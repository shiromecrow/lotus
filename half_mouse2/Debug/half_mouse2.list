
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a304  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0801a4e8  0801a4e8  0002a4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa90  0801aa90  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa90  0801aa90  0002aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa98  0801aa98  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa98  0801aa98  0002aa98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa9c  0801aa9c  0002aa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801aaa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c930  200001dc  0801ac7c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cb0c  0801ac7c  0003cb0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cdb  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ba  00000000  00000000  00053ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000592a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a50  00000000  00000000  0005afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002755b  00000000  00000000  0005c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b455  00000000  00000000  00083f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea216  00000000  00000000  000af3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001995b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bb4  00000000  00000000  00199608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a4cc 	.word	0x0801a4cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0801a4cc 	.word	0x0801a4cc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000200 	.word	0x20000200
 8000ff4:	20000204 	.word	0x20000204
 8000ff8:	20000210 	.word	0x20000210
 8000ffc:	20000214 	.word	0x20000214
 8001000:	20000220 	.word	0x20000220
 8001004:	20000224 	.word	0x20000224
 8001008:	20000230 	.word	0x20000230
 800100c:	20000234 	.word	0x20000234
 8001010:	20000240 	.word	0x20000240
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <reset_speed+0x34>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <reset_speed+0x38>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <reset_speed+0x3c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <reset_speed+0x40>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <reset_speed+0x44>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <reset_speed+0x48>)
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000228 	.word	0x20000228
 8001050:	2000022c 	.word	0x2000022c
 8001054:	20000238 	.word	0x20000238
 8001058:	2000023c 	.word	0x2000023c
 800105c:	20000240 	.word	0x20000240
 8001060:	3f266666 	.word	0x3f266666
 8001064:	00000000 	.word	0x00000000

08001068 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 800106e:	4bd0      	ldr	r3, [pc, #832]	; (80013b0 <interupt_calEncoder+0x348>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013b8 <interupt_calEncoder+0x350>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd07      	ble.n	80010a4 <interupt_calEncoder+0x3c>
 8001094:	edd7 7a01 	vldr	s15, [r7, #4]
 8001098:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013bc <interupt_calEncoder+0x354>
 800109c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013c0 <interupt_calEncoder+0x358>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d507      	bpl.n	80010c6 <interupt_calEncoder+0x5e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013bc <interupt_calEncoder+0x354>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010c6:	4bbf      	ldr	r3, [pc, #764]	; (80013c4 <interupt_calEncoder+0x35c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4bbe      	ldr	r3, [pc, #760]	; (80013c8 <interupt_calEncoder+0x360>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eef1 7a67 	vneg.f32	s15, s15
 80010da:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013b8 <interupt_calEncoder+0x350>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd07      	ble.n	8001100 <interupt_calEncoder+0x98>
 80010f0:	edd7 7a00 	vldr	s15, [r7]
 80010f4:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013bc <interupt_calEncoder+0x354>
 80010f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013c0 <interupt_calEncoder+0x358>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d507      	bpl.n	8001122 <interupt_calEncoder+0xba>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013bc <interupt_calEncoder+0x354>
 800111a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	a391      	add	r3, pc, #580	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa8b 	bl	8000648 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <interupt_calEncoder+0x364>)
 8001140:	f7ff fbac 	bl	800089c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	a38a      	add	r3, pc, #552	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a388      	add	r3, pc, #544	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	a385      	add	r3, pc, #532	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa67 	bl	8000648 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a383      	add	r3, pc, #524	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb88 	bl	800089c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <interupt_calEncoder+0x368>)
 800119a:	f7ff fa55 	bl	8000648 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a37c      	add	r3, pc, #496	; (adr r3, 8001398 <interupt_calEncoder+0x330>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fb76 	bl	800089c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <interupt_calEncoder+0x36c>)
 80011d2:	f7ff fa39 	bl	8000648 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a370      	add	r3, pc, #448	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb5a 	bl	800089c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd02 	bl	8000bf8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <interupt_calEncoder+0x370>)
 80011f8:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f9cc 	bl	8000598 <__aeabi_f2d>
 8001200:	a35b      	add	r3, pc, #364	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <interupt_calEncoder+0x364>)
 8001218:	f7ff fb40 	bl	800089c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a354      	add	r3, pc, #336	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa0d 	bl	8000648 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a352      	add	r3, pc, #328	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a34f      	add	r3, pc, #316	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a34d      	add	r3, pc, #308	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fb1c 	bl	800089c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <interupt_calEncoder+0x368>)
 8001272:	f7ff f9e9 	bl	8000648 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a34a      	add	r3, pc, #296	; (adr r3, 80013a8 <interupt_calEncoder+0x340>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fb0a 	bl	800089c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	f7ff fb00 	bl	800089c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <interupt_calEncoder+0x36c>)
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a33a      	add	r3, pc, #232	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff faee 	bl	800089c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc96 	bl	8000bf8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <interupt_calEncoder+0x374>)
 80012d0:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <interupt_calEncoder+0x378>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f95e 	bl	8000598 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <interupt_calEncoder+0x370>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	a32d      	add	r3, pc, #180	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f9aa 	bl	8000648 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffee 	bl	80002dc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc76 	bl	8000bf8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <interupt_calEncoder+0x378>)
 8001310:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <interupt_calEncoder+0x374>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	a31d      	add	r3, pc, #116	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f98a 	bl	8000648 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffce 	bl	80002dc <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc56 	bl	8000bf8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001350:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <interupt_calEncoder+0x35c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <interupt_calEncoder+0x360>)
 8001358:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <interupt_calEncoder+0x348>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001360:	6013      	str	r3, [r2, #0]

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	54411744 	.word	0x54411744
 8001374:	400921fb 	.word	0x400921fb
 8001378:	4e70a65b 	.word	0x4e70a65b
 800137c:	3f882f36 	.word	0x3f882f36
 8001380:	a858793e 	.word	0xa858793e
 8001384:	3ff1cd35 	.word	0x3ff1cd35
 8001388:	00000000 	.word	0x00000000
 800138c:	4078c000 	.word	0x4078c000
 8001390:	147ae148 	.word	0x147ae148
 8001394:	4078fbae 	.word	0x4078fbae
 8001398:	0a3d70a4 	.word	0x0a3d70a4
 800139c:	4078efd7 	.word	0x4078efd7
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	5c28f5c3 	.word	0x5c28f5c3
 80013ac:	40792a8f 	.word	0x40792a8f
 80013b0:	200006b8 	.word	0x200006b8
 80013b4:	200001f8 	.word	0x200001f8
 80013b8:	43340000 	.word	0x43340000
 80013bc:	43b40000 	.word	0x43b40000
 80013c0:	c3340000 	.word	0xc3340000
 80013c4:	200006bc 	.word	0x200006bc
 80013c8:	200001fc 	.word	0x200001fc
 80013cc:	40668000 	.word	0x40668000
 80013d0:	40790000 	.word	0x40790000
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	20000208 	.word	0x20000208
 80013dc:	2000020c 	.word	0x2000020c
 80013e0:	20000200 	.word	0x20000200
 80013e4:	20000204 	.word	0x20000204

080013e8 <interupt_calFusion>:


void interupt_calFusion(void) {
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80013ee:	4bca      	ldr	r3, [pc, #808]	; (8001718 <interupt_calFusion+0x330>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <interupt_calFusion+0x334>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	4bc6      	ldr	r3, [pc, #792]	; (8001718 <interupt_calFusion+0x330>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140c:	4bc4      	ldr	r3, [pc, #784]	; (8001720 <interupt_calFusion+0x338>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4bc0      	ldr	r3, [pc, #768]	; (800171c <interupt_calFusion+0x334>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001420:	4bbd      	ldr	r3, [pc, #756]	; (8001718 <interupt_calFusion+0x330>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4bbf      	ldr	r3, [pc, #764]	; (8001724 <interupt_calFusion+0x33c>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	4bb9      	ldr	r3, [pc, #740]	; (8001718 <interupt_calFusion+0x330>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800143a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143e:	4bba      	ldr	r3, [pc, #744]	; (8001728 <interupt_calFusion+0x340>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4bb5      	ldr	r3, [pc, #724]	; (8001724 <interupt_calFusion+0x33c>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 8001452:	4bb6      	ldr	r3, [pc, #728]	; (800172c <interupt_calFusion+0x344>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f89e 	bl	8000598 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4bae      	ldr	r3, [pc, #696]	; (800171c <interupt_calFusion+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8ea 	bl	8000648 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ff2e 	bl	80002dc <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fbb6 	bl	8000bf8 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4aa7      	ldr	r2, [pc, #668]	; (800172c <interupt_calFusion+0x344>)
 8001490:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 8001492:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <interupt_calFusion+0x348>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f87e 	bl	8000598 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <interupt_calFusion+0x33c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f877 	bl	8000598 <__aeabi_f2d>
 80014aa:	a399      	add	r3, pc, #612	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8ca 	bl	8000648 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe ff0e 	bl	80002dc <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a98      	ldr	r2, [pc, #608]	; (8001730 <interupt_calFusion+0x348>)
 80014d0:	6013      	str	r3, [r2, #0]


	G_hpf_speedL = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 80014d2:	4b91      	ldr	r3, [pc, #580]	; (8001718 <interupt_calFusion+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4b94      	ldr	r3, [pc, #592]	; (8001734 <interupt_calFusion+0x34c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <interupt_calFusion+0x350>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	a385      	add	r3, pc, #532	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f8a3 	bl	8000648 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4640      	mov	r0, r8
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fee7 	bl	80002dc <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb69 	bl	8000bf8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	4a82      	ldr	r2, [pc, #520]	; (8001734 <interupt_calFusion+0x34c>)
 800152a:	6013      	str	r3, [r2, #0]
	G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 800152c:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <interupt_calFusion+0x330>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f831 	bl	8000598 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <interupt_calFusion+0x34c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f82a 	bl	8000598 <__aeabi_f2d>
 8001544:	4680      	mov	r8, r0
 8001546:	4689      	mov	r9, r1
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <interupt_calFusion+0x350>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f823 	bl	8000598 <__aeabi_f2d>
 8001552:	a36f      	add	r3, pc, #444	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f876 	bl	8000648 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7fe feba 	bl	80002dc <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f86a 	bl	8000648 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fb3c 	bl	8000bf8 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <interupt_calFusion+0x354>)
 8001584:	6013      	str	r3, [r2, #0]
	G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <interupt_calFusion+0x358>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <interupt_calFusion+0x34c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	a35c      	add	r3, pc, #368	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe94 	bl	80002dc <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb1c 	bl	8000bf8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <interupt_calFusion+0x358>)
 80015c4:	6013      	str	r3, [r2, #0]
	G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <interupt_calFusion+0x35c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffe4 	bl	8000598 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <interupt_calFusion+0x354>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffdd 	bl	8000598 <__aeabi_f2d>
 80015de:	a34c      	add	r3, pc, #304	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f830 	bl	8000648 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe74 	bl	80002dc <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fafc 	bl	8000bf8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a50      	ldr	r2, [pc, #320]	; (8001744 <interupt_calFusion+0x35c>)
 8001604:	6013      	str	r3, [r2, #0]


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <interupt_calFusion+0x330>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <interupt_calFusion+0x360>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffbd 	bl	8000598 <__aeabi_f2d>
 800161e:	4680      	mov	r8, r0
 8001620:	4689      	mov	r9, r1
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <interupt_calFusion+0x350>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffb6 	bl	8000598 <__aeabi_f2d>
 800162c:	a338      	add	r3, pc, #224	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f809 	bl	8000648 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4640      	mov	r0, r8
 800163c:	4649      	mov	r1, r9
 800163e:	f7fe fe4d 	bl	80002dc <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fffd 	bl	8000648 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4614      	mov	r4, r2
 8001654:	461d      	mov	r5, r3
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <interupt_calFusion+0x330>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <interupt_calFusion+0x338>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff91 	bl	8000598 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe2d 	bl	80002dc <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fab5 	bl	8000bf8 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <interupt_calFusion+0x360>)
 8001692:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <interupt_calFusion+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff7d 	bl	8000598 <__aeabi_f2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <interupt_calFusion+0x360>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff76 	bl	8000598 <__aeabi_f2d>
 80016ac:	4680      	mov	r8, r0
 80016ae:	4689      	mov	r9, r1
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <interupt_calFusion+0x350>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	a315      	add	r3, pc, #84	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffc2 	bl	8000648 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4640      	mov	r0, r8
 80016ca:	4649      	mov	r1, r9
 80016cc:	f7fe fe06 	bl	80002dc <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ffb6 	bl	8000648 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <interupt_calFusion+0x330>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <interupt_calFusion+0x340>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	ee17 0a90 	vmov	r0, s15
 8001700:	f7fe ff4a 	bl	8000598 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	e01e      	b.n	800174c <interupt_calFusion+0x364>
 800170e:	bf00      	nop
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	3f50624d 	.word	0x3f50624d
 8001718:	20000240 	.word	0x20000240
 800171c:	20000218 	.word	0x20000218
 8001720:	20000208 	.word	0x20000208
 8001724:	2000021c 	.word	0x2000021c
 8001728:	2000020c 	.word	0x2000020c
 800172c:	20000210 	.word	0x20000210
 8001730:	20000214 	.word	0x20000214
 8001734:	20000228 	.word	0x20000228
 8001738:	20000260 	.word	0x20000260
 800173c:	2000022c 	.word	0x2000022c
 8001740:	20000220 	.word	0x20000220
 8001744:	20000224 	.word	0x20000224
 8001748:	20000238 	.word	0x20000238
 800174c:	f7fe fdc6 	bl	80002dc <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa4e 	bl	8000bf8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <interupt_calFusion+0x408>)
 8001760:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <interupt_calFusion+0x40c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <interupt_calFusion+0x410>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff0f 	bl	8000598 <__aeabi_f2d>
 800177a:	a31b      	add	r3, pc, #108	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff62 	bl	8000648 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fda6 	bl	80002dc <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa2e 	bl	8000bf8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <interupt_calFusion+0x40c>)
 80017a0:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <interupt_calFusion+0x414>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fef6 	bl	8000598 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <interupt_calFusion+0x408>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe feef 	bl	8000598 <__aeabi_f2d>
 80017ba:	a30b      	add	r3, pc, #44	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff42 	bl	8000648 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd86 	bl	80002dc <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fa0e 	bl	8000bf8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <interupt_calFusion+0x414>)
 80017e0:	6013      	str	r3, [r2, #0]

}
 80017e2:	bf00      	nop
 80017e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ec:	3f50624d 	.word	0x3f50624d
 80017f0:	2000023c 	.word	0x2000023c
 80017f4:	20000230 	.word	0x20000230
 80017f8:	20000238 	.word	0x20000238
 80017fc:	20000234 	.word	0x20000234

08001800 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	int s = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	angle = 0;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <reset_gyro+0xfc>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <reset_gyro+0x100>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e026      	b.n	800186e <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <reset_gyro+0x104>)
 8001822:	ed93 7a02 	vldr	s14, [r3, #8]
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <reset_gyro+0x100>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <reset_gyro+0x100>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <reset_gyro+0x104>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <reset_gyro+0x108>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <reset_gyro+0x108>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <reset_gyro+0x104>)
 800184e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <reset_gyro+0x10c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <reset_gyro+0x10c>)
 800185e:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f006 fb3c 	bl	8007ee0 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	ddd4      	ble.n	8001820 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <reset_gyro+0x100>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001910 <reset_gyro+0x110>
 8001880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <reset_gyro+0x100>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <reset_gyro+0x108>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001910 <reset_gyro+0x110>
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <reset_gyro+0x108>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <reset_gyro+0x10c>)
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001910 <reset_gyro+0x110>
 80018a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <reset_gyro+0x10c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <reset_gyro+0xfc>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	anglex = 0;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <reset_gyro+0x114>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <reset_gyro+0x118>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <reset_gyro+0x11c>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e009      	b.n	80018ec <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <reset_gyro+0x120>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	ddf2      	ble.n	80018d8 <reset_gyro+0xd8>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000244 	.word	0x20000244
 8001900:	20000268 	.word	0x20000268
 8001904:	200006c4 	.word	0x200006c4
 8001908:	20000264 	.word	0x20000264
 800190c:	2000026c 	.word	0x2000026c
 8001910:	447a0000 	.word	0x447a0000
 8001914:	2000024c 	.word	0x2000024c
 8001918:	20000258 	.word	0x20000258
 800191c:	2000025c 	.word	0x2000025c
 8001920:	20000270 	.word	0x20000270
 8001924:	00000000 	.word	0x00000000

08001928 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	int j = 9;
 800192e:	2309      	movs	r3, #9
 8001930:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001932:	2309      	movs	r3, #9
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e00d      	b.n	8001954 <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	4aa6      	ldr	r2, [pc, #664]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	49a4      	ldr	r1, [pc, #656]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dcee      	bgt.n	8001938 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 800195a:	4ba0      	ldr	r3, [pc, #640]	; (8001bdc <interrupt_calGyro+0x2b4>)
 800195c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001960:	4b9f      	ldr	r3, [pc, #636]	; (8001be0 <interrupt_calGyro+0x2b8>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a387      	add	r3, pc, #540	; (adr r3, 8001b90 <interrupt_calGyro+0x268>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a384      	add	r3, pc, #528	; (adr r3, 8001b98 <interrupt_calGyro+0x270>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe5d 	bl	8000648 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	a382      	add	r3, pc, #520	; (adr r3, 8001ba0 <interrupt_calGyro+0x278>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe ff7e 	bl	800089c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7ff f926 	bl	8000bf8 <__aeabi_d2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a8a      	ldr	r2, [pc, #552]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b0:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a8b      	ldr	r2, [pc, #556]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019b8:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 80019ba:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a8a      	ldr	r2, [pc, #552]	; (8001be8 <interrupt_calGyro+0x2c0>)
 80019c0:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 80019c2:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <interrupt_calGyro+0x2c4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <interrupt_calGyro+0x2c8>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 80019d8:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fddb 	bl	8000598 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdd4 	bl	8000598 <__aeabi_f2d>
 80019f0:	a36d      	add	r3, pc, #436	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe27 	bl	8000648 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc6b 	bl	80002dc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8f3 	bl	8000bf8 <__aeabi_d2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 8001a16:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001a18:	4b77      	ldr	r3, [pc, #476]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fdbb 	bl	8000598 <__aeabi_f2d>
 8001a22:	4604      	mov	r4, r0
 8001a24:	460d      	mov	r5, r1
 8001a26:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <interrupt_calGyro+0x2c4>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	ee17 0a90 	vmov	r0, s15
 8001a3a:	f7fe fdad 	bl	8000598 <__aeabi_f2d>
 8001a3e:	a35a      	add	r3, pc, #360	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fe00 	bl	8000648 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fc44 	bl	80002dc <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8cc 	bl	8000bf8 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a64:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a68:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <interrupt_calGyro+0x2d4>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	ee17 0a90 	vmov	r0, s15
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	a34c      	add	r3, pc, #304	; (adr r3, 8001bb0 <interrupt_calGyro+0x288>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fde0 	bl	8000648 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	a349      	add	r3, pc, #292	; (adr r3, 8001bb8 <interrupt_calGyro+0x290>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fdd7 	bl	8000648 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	a347      	add	r3, pc, #284	; (adr r3, 8001bc0 <interrupt_calGyro+0x298>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fef8 	bl	800089c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <interrupt_calGyro+0x2d8>)
 8001aba:	f7fe fdc5 	bl	8000648 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a340      	add	r3, pc, #256	; (adr r3, 8001bc8 <interrupt_calGyro+0x2a0>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <interrupt_calGyro+0x2dc>)
 8001ade:	f7fe fdb3 	bl	8000648 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a339      	add	r3, pc, #228	; (adr r3, 8001bd0 <interrupt_calGyro+0x2a8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fdaa 	bl	8000648 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f87c 	bl	8000bf8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b04:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd44 	bl	8000598 <__aeabi_f2d>
 8001b10:	4604      	mov	r4, r0
 8001b12:	460d      	mov	r5, r1
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	a322      	add	r3, pc, #136	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b44:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a312      	add	r3, pc, #72	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b84:	6013      	str	r3, [r2, #0]




}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	70a3d70a 	.word	0x70a3d70a
 8001b94:	3fef0a3d 	.word	0x3fef0a3d
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40acd400 	.word	0x40acd400
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40ac2000 	.word	0x40ac2000
 8001ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bac:	3f50624d 	.word	0x3f50624d
 8001bb0:	0fcf80dc 	.word	0x0fcf80dc
 8001bb4:	3ff0a423 	.word	0x3ff0a423
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	4078c000 	.word	0x4078c000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	4077d000 	.word	0x4077d000
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	407a7000 	.word	0x407a7000
 8001bd0:	3a92a305 	.word	0x3a92a305
 8001bd4:	40239d01 	.word	0x40239d01
 8001bd8:	20000270 	.word	0x20000270
 8001bdc:	200006c4 	.word	0x200006c4
 8001be0:	20000268 	.word	0x20000268
 8001be4:	20000248 	.word	0x20000248
 8001be8:	20000250 	.word	0x20000250
 8001bec:	20000264 	.word	0x20000264
 8001bf0:	20000254 	.word	0x20000254
 8001bf4:	20000244 	.word	0x20000244
 8001bf8:	2000024c 	.word	0x2000024c
 8001bfc:	2000026c 	.word	0x2000026c
 8001c00:	40790000 	.word	0x40790000
 8001c04:	408f4000 	.word	0x408f4000
 8001c08:	20000260 	.word	0x20000260
 8001c0c:	20000258 	.word	0x20000258
 8001c10:	2000025c 	.word	0x2000025c
 8001c14:	00000000 	.word	0x00000000

08001c18 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e00f      	b.n	8001c44 <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001c24:	f005 ff2c 	bl	8007a80 <pl_getbatt>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <battcheak+0xe8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f006 f90d 	bl	8007e58 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b13      	cmp	r3, #19
 8001c48:	ddec      	ble.n	8001c24 <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <battcheak+0xec>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e010      	b.n	8001c7a <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <battcheak+0xe8>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <battcheak+0xec>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <battcheak+0xec>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b13      	cmp	r3, #19
 8001c7e:	ddeb      	ble.n	8001c58 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <battcheak+0xec>)
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <battcheak+0xec>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <battcheak+0xec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc7d 	bl	8000598 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <battcheak+0xf0>)
 8001ca4:	f016 f8fa 	bl	8017e9c <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <battcheak+0xec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc73 	bl	8000598 <__aeabi_f2d>
 8001cb2:	a311      	add	r3, pc, #68	; (adr r3, 8001cf8 <battcheak+0xe0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe ff42 	bl	8000b40 <__aeabi_dcmple>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001cc2:	e014      	b.n	8001cee <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f005 fb5b 	bl	8007380 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f005 fb6a 	bl	80073a4 <pl_l_blue_LED>
		wait_ms(500);
 8001cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd4:	f006 f8c0 	bl	8007e58 <wait_ms>
		pl_r_blue_LED(OFF);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f005 fb51 	bl	8007380 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f005 fb60 	bl	80073a4 <pl_l_blue_LED>
		wait_ms(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce8:	f006 f8b6 	bl	8007e58 <wait_ms>
		pl_r_blue_LED(ON);
 8001cec:	e7ea      	b.n	8001cc4 <battcheak+0xac>
}
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	9999999a 	.word	0x9999999a
 8001cfc:	400d9999 	.word	0x400d9999
 8001d00:	20000464 	.word	0x20000464
 8001d04:	200004b4 	.word	0x200004b4
 8001d08:	0801a4e8 	.word	0x0801a4e8

08001d0c <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001d12:	f006 f853 	bl	8007dbc <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001d16:	2313      	movs	r3, #19
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	e037      	b.n	8001d8c <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d26:	4960      	ldr	r1, [pc, #384]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d34:	3314      	adds	r3, #20
 8001d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3a:	495b      	ldr	r1, [pc, #364]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d4a:	3328      	adds	r3, #40	; 0x28
 8001d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d50:	4955      	ldr	r1, [pc, #340]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d66:	4950      	ldr	r1, [pc, #320]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	333c      	adds	r3, #60	; 0x3c
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d76:	3350      	adds	r3, #80	; 0x50
 8001d78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d7c:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3350      	adds	r3, #80	; 0x50
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dcc4      	bgt.n	8001d1c <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <interupt_calSensor+0x1a0>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001da0:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <interupt_calSensor+0x1a0>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001db0:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <interupt_calSensor+0x1a0>)
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dc0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dc6:	88db      	ldrh	r3, [r3, #6]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dcc:	88db      	ldrh	r3, [r3, #6]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dde:	891b      	ldrh	r3, [r3, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e053      	b.n	8001e96 <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001dee:	492e      	ldr	r1, [pc, #184]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	440b      	add	r3, r1
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	482a      	ldr	r0, [pc, #168]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4403      	add	r3, r0
 8001e0c:	332c      	adds	r3, #44	; 0x2c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1aca      	subs	r2, r1, r3
 8001e12:	4928      	ldr	r1, [pc, #160]	; (8001eb4 <interupt_calSensor+0x1a8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][3];
 8001e1a:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	440b      	add	r3, r1
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4403      	add	r3, r0
 8001e38:	330c      	adds	r3, #12
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1aca      	subs	r2, r1, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <interupt_calSensor+0x1ac>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001e46:	4918      	ldr	r1, [pc, #96]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	440b      	add	r3, r1
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4403      	add	r3, r0
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4419      	add	r1, r3
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4403      	add	r3, r0
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	440b      	add	r3, r1
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <interupt_calSensor+0x1b0>)
 8001e80:	fb82 1203 	smull	r1, r2, r2, r3
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <interupt_calSensor+0x1b4>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	dda8      	ble.n	8001dee <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000298 	.word	0x20000298
 8001eac:	200006ec 	.word	0x200006ec
 8001eb0:	200006f8 	.word	0x200006f8
 8001eb4:	20000428 	.word	0x20000428
 8001eb8:	2000043c 	.word	0x2000043c
 8001ebc:	55555556 	.word	0x55555556
 8001ec0:	20000450 	.word	0x20000450

08001ec4 <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Control_mode_Init+0x28>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Control_mode_Init+0x2c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <Control_mode_Init+0x30>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <Control_mode_Init+0x34>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]

}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000508 	.word	0x20000508
 8001ef0:	200007e5 	.word	0x200007e5
 8001ef4:	200007e0 	.word	0x200007e0
 8001ef8:	20000509 	.word	0x20000509
 8001efc:	00000000 	.word	0x00000000

08001f00 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001f12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	db14      	blt.n	8001f4a <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f005 fce3 	bl	80078ec <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001f26:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <get_duty+0x160>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f34:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002064 <get_duty+0x164>
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f40:	ee17 2a90 	vmov	r2, s15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e015      	b.n	8001f76 <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f005 fcce 	bl	80078ec <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f54:	eef1 6a67 	vneg.f32	s13, s15
 8001f58:	4b41      	ldr	r3, [pc, #260]	; (8002060 <get_duty+0x160>)
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f62:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002064 <get_duty+0x164>
 8001f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6e:	ee17 2a90 	vmov	r2, s15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001f76:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	db14      	blt.n	8001fae <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f005 fcd9 	bl	800793c <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001f8a:	4b35      	ldr	r3, [pc, #212]	; (8002060 <get_duty+0x160>)
 8001f8c:	ed93 7a00 	vldr	s14, [r3]
 8001f90:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f98:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002064 <get_duty+0x164>
 8001f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa4:	ee17 2a90 	vmov	r2, s15
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e015      	b.n	8001fda <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f005 fcc4 	bl	800793c <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb8:	eef1 6a67 	vneg.f32	s13, s15
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <get_duty+0x160>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002064 <get_duty+0x164>
 8001fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd2:	ee17 2a90 	vmov	r2, s15
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R*1.3*0.9;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fac4 	bl	8000574 <__aeabi_i2d>
 8001fec:	a318      	add	r3, pc, #96	; (adr r3, 8002050 <get_duty+0x150>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe fb29 	bl	8000648 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	a316      	add	r3, pc, #88	; (adr r3, 8002058 <get_duty+0x158>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fb20 	bl	8000648 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fdca 	bl	8000ba8 <__aeabi_d2iz>
 8002014:	4602      	mov	r2, r0
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f240 628c 	movw	r2, #1676	; 0x68c
 8002022:	4293      	cmp	r3, r2
 8002024:	dd03      	ble.n	800202e <get_duty+0x12e>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f240 628d 	movw	r2, #1677	; 0x68d
 800202c:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f240 628c 	movw	r2, #1676	; 0x68c
 8002036:	4293      	cmp	r3, r2
 8002038:	dd03      	ble.n	8002042 <get_duty+0x142>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f240 628d 	movw	r2, #1677	; 0x68d
 8002040:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	f3af 8000 	nop.w
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	3ff4cccc 	.word	0x3ff4cccc
 8002058:	cccccccd 	.word	0xcccccccd
 800205c:	3feccccc 	.word	0x3feccccc
 8002060:	200004b4 	.word	0x200004b4
 8002064:	44d1e000 	.word	0x44d1e000

08002068 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800206c:	b08c      	sub	sp, #48	; 0x30
 800206e:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8002096:	4bd2      	ldr	r3, [pc, #840]	; (80023e0 <interupt_DriveMotor+0x378>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 800209e:	4bd1      	ldr	r3, [pc, #836]	; (80023e4 <interupt_DriveMotor+0x37c>)
 80020a0:	2204      	movs	r2, #4
 80020a2:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 80020a4:	4bd0      	ldr	r3, [pc, #832]	; (80023e8 <interupt_DriveMotor+0x380>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80020aa:	4bd0      	ldr	r3, [pc, #832]	; (80023ec <interupt_DriveMotor+0x384>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 80020b0:	4bcb      	ldr	r3, [pc, #812]	; (80023e0 <interupt_DriveMotor+0x378>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 828f 	bne.w	80025d8 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 80020ba:	4bcc      	ldr	r3, [pc, #816]	; (80023ec <interupt_DriveMotor+0x384>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80020c0:	4bcb      	ldr	r3, [pc, #812]	; (80023f0 <interupt_DriveMotor+0x388>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4aca      	ldr	r2, [pc, #808]	; (80023f0 <interupt_DriveMotor+0x388>)
 80020c8:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80020ca:	4bca      	ldr	r3, [pc, #808]	; (80023f4 <interupt_DriveMotor+0x38c>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa62 	bl	8000598 <__aeabi_f2d>
 80020d4:	4604      	mov	r4, r0
 80020d6:	460d      	mov	r5, r1
 80020d8:	4bc6      	ldr	r3, [pc, #792]	; (80023f4 <interupt_DriveMotor+0x38c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fa5b 	bl	8000598 <__aeabi_f2d>
 80020e2:	a3bb      	add	r3, pc, #748	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe faae 	bl	8000648 <__aeabi_dmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4690      	mov	r8, r2
 80020f2:	4699      	mov	r9, r3
 80020f4:	4bbf      	ldr	r3, [pc, #764]	; (80023f4 <interupt_DriveMotor+0x38c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa4d 	bl	8000598 <__aeabi_f2d>
 80020fe:	a3b4      	add	r3, pc, #720	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe faa0 	bl	8000648 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	a3af      	add	r3, pc, #700	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa97 	bl	8000648 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800212a:	f7fe fbb7 	bl	800089c <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4640      	mov	r0, r8
 8002134:	4649      	mov	r1, r9
 8002136:	f7fe f8d1 	bl	80002dc <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe f8cb 	bl	80002dc <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fd53 	bl	8000bf8 <__aeabi_d2f>
 8002152:	4603      	mov	r3, r0
 8002154:	4aa7      	ldr	r2, [pc, #668]	; (80023f4 <interupt_DriveMotor+0x38c>)
 8002156:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002158:	4ba6      	ldr	r3, [pc, #664]	; (80023f4 <interupt_DriveMotor+0x38c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fa1b 	bl	8000598 <__aeabi_f2d>
 8002162:	4604      	mov	r4, r0
 8002164:	460d      	mov	r5, r1
 8002166:	4ba3      	ldr	r3, [pc, #652]	; (80023f4 <interupt_DriveMotor+0x38c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fa14 	bl	8000598 <__aeabi_f2d>
 8002170:	a397      	add	r3, pc, #604	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe fa67 	bl	8000648 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4620      	mov	r0, r4
 8002180:	4629      	mov	r1, r5
 8002182:	f7fe f8ab 	bl	80002dc <__adddf3>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fd33 	bl	8000bf8 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4a97      	ldr	r2, [pc, #604]	; (80023f4 <interupt_DriveMotor+0x38c>)
 8002196:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002198:	4b97      	ldr	r3, [pc, #604]	; (80023f8 <interupt_DriveMotor+0x390>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9fb 	bl	8000598 <__aeabi_f2d>
 80021a2:	4604      	mov	r4, r0
 80021a4:	460d      	mov	r5, r1
 80021a6:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <interupt_DriveMotor+0x390>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f9f4 	bl	8000598 <__aeabi_f2d>
 80021b0:	a387      	add	r3, pc, #540	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe fa47 	bl	8000648 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4690      	mov	r8, r2
 80021c0:	4699      	mov	r9, r3
 80021c2:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <interupt_DriveMotor+0x390>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9e6 	bl	8000598 <__aeabi_f2d>
 80021cc:	a380      	add	r3, pc, #512	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe fa39 	bl	8000648 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	a37c      	add	r3, pc, #496	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe fa30 	bl	8000648 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f8:	f7fe fb50 	bl	800089c <__aeabi_ddiv>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4640      	mov	r0, r8
 8002202:	4649      	mov	r1, r9
 8002204:	f7fe f86a 	bl	80002dc <__adddf3>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe f864 	bl	80002dc <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fcec 	bl	8000bf8 <__aeabi_d2f>
 8002220:	4603      	mov	r3, r0
 8002222:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <interupt_DriveMotor+0x390>)
 8002224:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002226:	4b74      	ldr	r3, [pc, #464]	; (80023f8 <interupt_DriveMotor+0x390>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f9b4 	bl	8000598 <__aeabi_f2d>
 8002230:	4604      	mov	r4, r0
 8002232:	460d      	mov	r5, r1
 8002234:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <interupt_DriveMotor+0x390>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f9ad 	bl	8000598 <__aeabi_f2d>
 800223e:	a364      	add	r3, pc, #400	; (adr r3, 80023d0 <interupt_DriveMotor+0x368>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe fa00 	bl	8000648 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe f844 	bl	80002dc <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fccc 	bl	8000bf8 <__aeabi_d2f>
 8002260:	4603      	mov	r3, r0
 8002262:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <interupt_DriveMotor+0x390>)
 8002264:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002266:	4b65      	ldr	r3, [pc, #404]	; (80023fc <interupt_DriveMotor+0x394>)
 8002268:	4a62      	ldr	r2, [pc, #392]	; (80023f4 <interupt_DriveMotor+0x38c>)
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002272:	f005 ffef 	bl	8008254 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <interupt_DriveMotor+0x38c>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <interupt_DriveMotor+0x390>)
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	eef0 0a47 	vmov.f32	s1, s14
 800228e:	eeb0 0a67 	vmov.f32	s0, s15
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fbf5 	bl	8004a84 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800229a:	4b59      	ldr	r3, [pc, #356]	; (8002400 <interupt_DriveMotor+0x398>)
 800229c:	ed93 7a00 	vldr	s14, [r3]
 80022a0:	4b58      	ldr	r3, [pc, #352]	; (8002404 <interupt_DriveMotor+0x39c>)
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022b2:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <interupt_DriveMotor+0x38c>)
 80022b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80022b8:	4b53      	ldr	r3, [pc, #332]	; (8002408 <interupt_DriveMotor+0x3a0>)
 80022ba:	edd3 6a00 	vldr	s13, [r3]
 80022be:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <interupt_DriveMotor+0x390>)
 80022c0:	ed93 6a01 	vldr	s12, [r3, #4]
 80022c4:	1d3a      	adds	r2, r7, #4
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	eef0 1a46 	vmov.f32	s3, s12
 80022ce:	eeb0 1a66 	vmov.f32	s2, s13
 80022d2:	4611      	mov	r1, r2
 80022d4:	eef0 0a67 	vmov.f32	s1, s15
 80022d8:	eeb0 0a47 	vmov.f32	s0, s14
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 f927 	bl	8004530 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80022e2:	f002 fdb9 	bl	8004e58 <calWallConrol>
 80022e6:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80022ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002306:	edd7 7a01 	vldr	s15, [r7, #4]
 800230a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002312:	ed97 7a04 	vldr	s14, [r7, #16]
 8002316:	edd7 7a03 	vldr	s15, [r7, #12]
 800231a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800231e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002326:	edd7 7a02 	vldr	s15, [r7, #8]
 800232a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002336:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800233a:	ed97 7a04 	vldr	s14, [r7, #16]
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f925 	bl	8000598 <__aeabi_f2d>
 800234e:	4604      	mov	r4, r0
 8002350:	460d      	mov	r5, r1
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <interupt_DriveMotor+0x3a4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f91e 	bl	8000598 <__aeabi_f2d>
 800235c:	a31e      	add	r3, pc, #120	; (adr r3, 80023d8 <interupt_DriveMotor+0x370>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe f971 	bl	8000648 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	f7fe fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 808d 	beq.w	8002494 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800237a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800237c:	f7fe f90c 	bl	8000598 <__aeabi_f2d>
 8002380:	4604      	mov	r4, r0
 8002382:	460d      	mov	r5, r1
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <interupt_DriveMotor+0x3a4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f905 	bl	8000598 <__aeabi_f2d>
 800238e:	a312      	add	r3, pc, #72	; (adr r3, 80023d8 <interupt_DriveMotor+0x370>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f958 	bl	8000648 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4690      	mov	r8, r2
 800239e:	4699      	mov	r9, r3
 80023a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80023a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	ee17 0a90 	vmov	r0, s15
 80023b0:	f7fe f8f2 	bl	8000598 <__aeabi_f2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4640      	mov	r0, r8
 80023ba:	4649      	mov	r1, r9
 80023bc:	f7fd ff8c 	bl	80002d8 <__aeabi_dsub>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4620      	mov	r0, r4
 80023c6:	4629      	mov	r1, r5
 80023c8:	e022      	b.n	8002410 <interupt_DriveMotor+0x3a8>
 80023ca:	bf00      	nop
 80023cc:	f3af 8000 	nop.w
 80023d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80023d4:	3f50624d 	.word	0x3f50624d
 80023d8:	d916872b 	.word	0xd916872b
 80023dc:	3feff7ce 	.word	0x3feff7ce
 80023e0:	20000508 	.word	0x20000508
 80023e4:	200007e4 	.word	0x200007e4
 80023e8:	20000570 	.word	0x20000570
 80023ec:	20000572 	.word	0x20000572
 80023f0:	20000504 	.word	0x20000504
 80023f4:	200004b8 	.word	0x200004b8
 80023f8:	200004c4 	.word	0x200004c4
 80023fc:	200004d0 	.word	0x200004d0
 8002400:	20000218 	.word	0x20000218
 8002404:	2000021c 	.word	0x2000021c
 8002408:	20000248 	.word	0x20000248
 800240c:	200004b4 	.word	0x200004b4
 8002410:	f7fd ff64 	bl	80002dc <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fbec 	bl	8000bf8 <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002424:	6a38      	ldr	r0, [r7, #32]
 8002426:	f7fe f8b7 	bl	8000598 <__aeabi_f2d>
 800242a:	4604      	mov	r4, r0
 800242c:	460d      	mov	r5, r1
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <interupt_DriveMotor+0x428>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f8b0 	bl	8000598 <__aeabi_f2d>
 8002438:	a313      	add	r3, pc, #76	; (adr r3, 8002488 <interupt_DriveMotor+0x420>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f7fe f903 	bl	8000648 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4690      	mov	r8, r2
 8002448:	4699      	mov	r9, r3
 800244a:	ed97 7a04 	vldr	s14, [r7, #16]
 800244e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	ee17 0a90 	vmov	r0, s15
 800245a:	f7fe f89d 	bl	8000598 <__aeabi_f2d>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4640      	mov	r0, r8
 8002464:	4649      	mov	r1, r9
 8002466:	f7fd ff37 	bl	80002d8 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f7fd ff33 	bl	80002dc <__adddf3>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fbbb 	bl	8000bf8 <__aeabi_d2f>
 8002482:	4603      	mov	r3, r0
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	e095      	b.n	80025b4 <interupt_DriveMotor+0x54c>
 8002488:	d916872b 	.word	0xd916872b
 800248c:	3feff7ce 	.word	0x3feff7ce
 8002490:	200004b4 	.word	0x200004b4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002494:	ed97 7a04 	vldr	s14, [r7, #16]
 8002498:	edd7 7a02 	vldr	s15, [r7, #8]
 800249c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a0:	ee17 0a90 	vmov	r0, s15
 80024a4:	f7fe f878 	bl	8000598 <__aeabi_f2d>
 80024a8:	4604      	mov	r4, r0
 80024aa:	460d      	mov	r5, r1
 80024ac:	4bce      	ldr	r3, [pc, #824]	; (80027e8 <interupt_DriveMotor+0x780>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	eef1 7a67 	vneg.f32	s15, s15
 80024b6:	ee17 3a90 	vmov	r3, s15
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f86c 	bl	8000598 <__aeabi_f2d>
 80024c0:	a3c5      	add	r3, pc, #788	; (adr r3, 80027d8 <interupt_DriveMotor+0x770>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f8bf 	bl	8000648 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7fe fb2b 	bl	8000b2c <__aeabi_dcmplt>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d06b      	beq.n	80025b4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80024dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024de:	f7fe f85b 	bl	8000598 <__aeabi_f2d>
 80024e2:	4604      	mov	r4, r0
 80024e4:	460d      	mov	r5, r1
 80024e6:	4bc0      	ldr	r3, [pc, #768]	; (80027e8 <interupt_DriveMotor+0x780>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eef1 7a67 	vneg.f32	s15, s15
 80024f0:	ee17 3a90 	vmov	r3, s15
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f84f 	bl	8000598 <__aeabi_f2d>
 80024fa:	a3b7      	add	r3, pc, #732	; (adr r3, 80027d8 <interupt_DriveMotor+0x770>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f8a2 	bl	8000648 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4690      	mov	r8, r2
 800250a:	4699      	mov	r9, r3
 800250c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002510:	edd7 7a02 	vldr	s15, [r7, #8]
 8002514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002518:	ee17 0a90 	vmov	r0, s15
 800251c:	f7fe f83c 	bl	8000598 <__aeabi_f2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4640      	mov	r0, r8
 8002526:	4649      	mov	r1, r9
 8002528:	f7fd fed6 	bl	80002d8 <__aeabi_dsub>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7fd fed2 	bl	80002dc <__adddf3>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb5a 	bl	8000bf8 <__aeabi_d2f>
 8002544:	4603      	mov	r3, r0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002548:	6a38      	ldr	r0, [r7, #32]
 800254a:	f7fe f825 	bl	8000598 <__aeabi_f2d>
 800254e:	4604      	mov	r4, r0
 8002550:	460d      	mov	r5, r1
 8002552:	4ba5      	ldr	r3, [pc, #660]	; (80027e8 <interupt_DriveMotor+0x780>)
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	eef1 7a67 	vneg.f32	s15, s15
 800255c:	ee17 3a90 	vmov	r3, s15
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe f819 	bl	8000598 <__aeabi_f2d>
 8002566:	a39c      	add	r3, pc, #624	; (adr r3, 80027d8 <interupt_DriveMotor+0x770>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe f86c 	bl	8000648 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4690      	mov	r8, r2
 8002576:	4699      	mov	r9, r3
 8002578:	ed97 7a04 	vldr	s14, [r7, #16]
 800257c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002584:	ee17 0a90 	vmov	r0, s15
 8002588:	f7fe f806 	bl	8000598 <__aeabi_f2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4640      	mov	r0, r8
 8002592:	4649      	mov	r1, r9
 8002594:	f7fd fea0 	bl	80002d8 <__aeabi_dsub>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	f7fd fe9c 	bl	80002dc <__adddf3>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7fe fb24 	bl	8000bf8 <__aeabi_d2f>
 80025b0:	4603      	mov	r3, r0
 80025b2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80025b4:	f107 0214 	add.w	r2, r7, #20
 80025b8:	f107 0318 	add.w	r3, r7, #24
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	edd7 0a08 	vldr	s1, [r7, #32]
 80025c4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80025c8:	f7ff fc9a 	bl	8001f00 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f005 f9f4 	bl	80079c0 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80025d8:	4b84      	ldr	r3, [pc, #528]	; (80027ec <interupt_DriveMotor+0x784>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d004      	beq.n	80025ea <interupt_DriveMotor+0x582>
 80025e0:	4b82      	ldr	r3, [pc, #520]	; (80027ec <interupt_DriveMotor+0x784>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	f040 8287 	bne.w	8002af8 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80025ea:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <interupt_DriveMotor+0x788>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80025f0:	4b80      	ldr	r3, [pc, #512]	; (80027f4 <interupt_DriveMotor+0x78c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80025f6:	4b80      	ldr	r3, [pc, #512]	; (80027f8 <interupt_DriveMotor+0x790>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	4a7e      	ldr	r2, [pc, #504]	; (80027f8 <interupt_DriveMotor+0x790>)
 80025fe:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002600:	4b7e      	ldr	r3, [pc, #504]	; (80027fc <interupt_DriveMotor+0x794>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ffc7 	bl	8000598 <__aeabi_f2d>
 800260a:	4604      	mov	r4, r0
 800260c:	460d      	mov	r5, r1
 800260e:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <interupt_DriveMotor+0x794>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ffc0 	bl	8000598 <__aeabi_f2d>
 8002618:	a371      	add	r3, pc, #452	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fe f813 	bl	8000648 <__aeabi_dmul>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4690      	mov	r8, r2
 8002628:	4699      	mov	r9, r3
 800262a:	4b74      	ldr	r3, [pc, #464]	; (80027fc <interupt_DriveMotor+0x794>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ffb2 	bl	8000598 <__aeabi_f2d>
 8002634:	a36a      	add	r3, pc, #424	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f7fe f805 	bl	8000648 <__aeabi_dmul>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	a366      	add	r3, pc, #408	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fd fffc 	bl	8000648 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002660:	f7fe f91c 	bl	800089c <__aeabi_ddiv>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4640      	mov	r0, r8
 800266a:	4649      	mov	r1, r9
 800266c:	f7fd fe36 	bl	80002dc <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4620      	mov	r0, r4
 8002676:	4629      	mov	r1, r5
 8002678:	f7fd fe30 	bl	80002dc <__adddf3>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f7fe fab8 	bl	8000bf8 <__aeabi_d2f>
 8002688:	4603      	mov	r3, r0
 800268a:	4a5c      	ldr	r2, [pc, #368]	; (80027fc <interupt_DriveMotor+0x794>)
 800268c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800268e:	4b5b      	ldr	r3, [pc, #364]	; (80027fc <interupt_DriveMotor+0x794>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff80 	bl	8000598 <__aeabi_f2d>
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <interupt_DriveMotor+0x794>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff79 	bl	8000598 <__aeabi_f2d>
 80026a6:	a34e      	add	r3, pc, #312	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ffcc 	bl	8000648 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4620      	mov	r0, r4
 80026b6:	4629      	mov	r1, r5
 80026b8:	f7fd fe10 	bl	80002dc <__adddf3>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fa98 	bl	8000bf8 <__aeabi_d2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a4c      	ldr	r2, [pc, #304]	; (80027fc <interupt_DriveMotor+0x794>)
 80026cc:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <interupt_DriveMotor+0x798>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff60 	bl	8000598 <__aeabi_f2d>
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
 80026dc:	4b48      	ldr	r3, [pc, #288]	; (8002800 <interupt_DriveMotor+0x798>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff59 	bl	8000598 <__aeabi_f2d>
 80026e6:	a33e      	add	r3, pc, #248	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fd ffac 	bl	8000648 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4690      	mov	r8, r2
 80026f6:	4699      	mov	r9, r3
 80026f8:	4b41      	ldr	r3, [pc, #260]	; (8002800 <interupt_DriveMotor+0x798>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff4b 	bl	8000598 <__aeabi_f2d>
 8002702:	a337      	add	r3, pc, #220	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd ff9e 	bl	8000648 <__aeabi_dmul>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	a332      	add	r3, pc, #200	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fd ff95 	bl	8000648 <__aeabi_dmul>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800272e:	f7fe f8b5 	bl	800089c <__aeabi_ddiv>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4640      	mov	r0, r8
 8002738:	4649      	mov	r1, r9
 800273a:	f7fd fdcf 	bl	80002dc <__adddf3>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4620      	mov	r0, r4
 8002744:	4629      	mov	r1, r5
 8002746:	f7fd fdc9 	bl	80002dc <__adddf3>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe fa51 	bl	8000bf8 <__aeabi_d2f>
 8002756:	4603      	mov	r3, r0
 8002758:	4a29      	ldr	r2, [pc, #164]	; (8002800 <interupt_DriveMotor+0x798>)
 800275a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <interupt_DriveMotor+0x798>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd ff19 	bl	8000598 <__aeabi_f2d>
 8002766:	4604      	mov	r4, r0
 8002768:	460d      	mov	r5, r1
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <interupt_DriveMotor+0x798>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd ff12 	bl	8000598 <__aeabi_f2d>
 8002774:	a31a      	add	r3, pc, #104	; (adr r3, 80027e0 <interupt_DriveMotor+0x778>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fd ff65 	bl	8000648 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fd fda9 	bl	80002dc <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe fa31 	bl	8000bf8 <__aeabi_d2f>
 8002796:	4603      	mov	r3, r0
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <interupt_DriveMotor+0x798>)
 800279a:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <interupt_DriveMotor+0x79c>)
 800279e:	4a18      	ldr	r2, [pc, #96]	; (8002800 <interupt_DriveMotor+0x798>)
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	9200      	str	r2, [sp, #0]
 80027a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a8:	f005 fd54 	bl	8008254 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <interupt_DriveMotor+0x794>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <interupt_DriveMotor+0x798>)
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	f107 020c 	add.w	r2, r7, #12
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	eef0 0a47 	vmov.f32	s1, s14
 80027c4:	eeb0 0a67 	vmov.f32	s0, s15
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 f95a 	bl	8004a84 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <interupt_DriveMotor+0x7a0>)
 80027d2:	ed93 7a00 	vldr	s14, [r3]
 80027d6:	e019      	b.n	800280c <interupt_DriveMotor+0x7a4>
 80027d8:	d916872b 	.word	0xd916872b
 80027dc:	3feff7ce 	.word	0x3feff7ce
 80027e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027e4:	3f50624d 	.word	0x3f50624d
 80027e8:	200004b4 	.word	0x200004b4
 80027ec:	20000508 	.word	0x20000508
 80027f0:	20000570 	.word	0x20000570
 80027f4:	20000572 	.word	0x20000572
 80027f8:	20000504 	.word	0x20000504
 80027fc:	200004b8 	.word	0x200004b8
 8002800:	200004c4 	.word	0x200004c4
 8002804:	200004e4 	.word	0x200004e4
 8002808:	20000218 	.word	0x20000218
 800280c:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <interupt_DriveMotor+0x938>)
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800281a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <interupt_DriveMotor+0x93c>)
 8002820:	edd3 7a01 	vldr	s15, [r3, #4]
 8002824:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <interupt_DriveMotor+0x940>)
 8002826:	edd3 6a00 	vldr	s13, [r3]
 800282a:	4b60      	ldr	r3, [pc, #384]	; (80029ac <interupt_DriveMotor+0x944>)
 800282c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002830:	1d3a      	adds	r2, r7, #4
 8002832:	f107 0308 	add.w	r3, r7, #8
 8002836:	eef0 1a46 	vmov.f32	s3, s12
 800283a:	eeb0 1a66 	vmov.f32	s2, s13
 800283e:	4611      	mov	r1, r2
 8002840:	eef0 0a67 	vmov.f32	s1, s15
 8002844:	eeb0 0a47 	vmov.f32	s0, s14
 8002848:	4618      	mov	r0, r3
 800284a:	f001 fe71 	bl	8004530 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800284e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002852:	edd7 7a03 	vldr	s15, [r7, #12]
 8002856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800285a:	edd7 7a02 	vldr	s15, [r7, #8]
 800285e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002862:	edd7 7a01 	vldr	s15, [r7, #4]
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800286e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002872:	edd7 7a03 	vldr	s15, [r7, #12]
 8002876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800287a:	edd7 7a02 	vldr	s15, [r7, #8]
 800287e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800288e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002892:	edd7 7a02 	vldr	s15, [r7, #8]
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289a:	ee17 0a90 	vmov	r0, s15
 800289e:	f7fd fe7b 	bl	8000598 <__aeabi_f2d>
 80028a2:	4604      	mov	r4, r0
 80028a4:	460d      	mov	r5, r1
 80028a6:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <interupt_DriveMotor+0x948>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fe74 	bl	8000598 <__aeabi_f2d>
 80028b0:	a339      	add	r3, pc, #228	; (adr r3, 8002998 <interupt_DriveMotor+0x930>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f7fd fec7 	bl	8000648 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4620      	mov	r0, r4
 80028c0:	4629      	mov	r1, r5
 80028c2:	f7fe f951 	bl	8000b68 <__aeabi_dcmpgt>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d073      	beq.n	80029b4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ce:	f7fd fe63 	bl	8000598 <__aeabi_f2d>
 80028d2:	4604      	mov	r4, r0
 80028d4:	460d      	mov	r5, r1
 80028d6:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <interupt_DriveMotor+0x948>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd fe5c 	bl	8000598 <__aeabi_f2d>
 80028e0:	a32d      	add	r3, pc, #180	; (adr r3, 8002998 <interupt_DriveMotor+0x930>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd feaf 	bl	8000648 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4690      	mov	r8, r2
 80028f0:	4699      	mov	r9, r3
 80028f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80028f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fe:	ee17 0a90 	vmov	r0, s15
 8002902:	f7fd fe49 	bl	8000598 <__aeabi_f2d>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4640      	mov	r0, r8
 800290c:	4649      	mov	r1, r9
 800290e:	f7fd fce3 	bl	80002d8 <__aeabi_dsub>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4620      	mov	r0, r4
 8002918:	4629      	mov	r1, r5
 800291a:	f7fd fcdf 	bl	80002dc <__adddf3>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	f7fe f967 	bl	8000bf8 <__aeabi_d2f>
 800292a:	4603      	mov	r3, r0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800292e:	6a38      	ldr	r0, [r7, #32]
 8002930:	f7fd fe32 	bl	8000598 <__aeabi_f2d>
 8002934:	4604      	mov	r4, r0
 8002936:	460d      	mov	r5, r1
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <interupt_DriveMotor+0x948>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fe2b 	bl	8000598 <__aeabi_f2d>
 8002942:	a315      	add	r3, pc, #84	; (adr r3, 8002998 <interupt_DriveMotor+0x930>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fe7e 	bl	8000648 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4690      	mov	r8, r2
 8002952:	4699      	mov	r9, r3
 8002954:	ed97 7a04 	vldr	s14, [r7, #16]
 8002958:	edd7 7a02 	vldr	s15, [r7, #8]
 800295c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002960:	ee17 0a90 	vmov	r0, s15
 8002964:	f7fd fe18 	bl	8000598 <__aeabi_f2d>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4640      	mov	r0, r8
 800296e:	4649      	mov	r1, r9
 8002970:	f7fd fcb2 	bl	80002d8 <__aeabi_dsub>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f7fd fcae 	bl	80002dc <__adddf3>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f7fe f936 	bl	8000bf8 <__aeabi_d2f>
 800298c:	4603      	mov	r3, r0
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	e0a0      	b.n	8002ad4 <interupt_DriveMotor+0xa6c>
 8002992:	bf00      	nop
 8002994:	f3af 8000 	nop.w
 8002998:	d916872b 	.word	0xd916872b
 800299c:	3feff7ce 	.word	0x3feff7ce
 80029a0:	2000021c 	.word	0x2000021c
 80029a4:	200004b8 	.word	0x200004b8
 80029a8:	20000248 	.word	0x20000248
 80029ac:	200004c4 	.word	0x200004c4
 80029b0:	200004b4 	.word	0x200004b4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80029b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80029b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	ee17 0a90 	vmov	r0, s15
 80029c4:	f7fd fde8 	bl	8000598 <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	4bd6      	ldr	r3, [pc, #856]	; (8002d28 <interupt_DriveMotor+0xcc0>)
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	eef1 7a67 	vneg.f32	s15, s15
 80029d6:	ee17 3a90 	vmov	r3, s15
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fddc 	bl	8000598 <__aeabi_f2d>
 80029e0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002d18 <interupt_DriveMotor+0xcb0>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe2f 	bl	8000648 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f7fe f89b 	bl	8000b2c <__aeabi_dcmplt>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d06b      	beq.n	8002ad4 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80029fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029fe:	f7fd fdcb 	bl	8000598 <__aeabi_f2d>
 8002a02:	4604      	mov	r4, r0
 8002a04:	460d      	mov	r5, r1
 8002a06:	4bc8      	ldr	r3, [pc, #800]	; (8002d28 <interupt_DriveMotor+0xcc0>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	eef1 7a67 	vneg.f32	s15, s15
 8002a10:	ee17 3a90 	vmov	r3, s15
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fdbf 	bl	8000598 <__aeabi_f2d>
 8002a1a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002d18 <interupt_DriveMotor+0xcb0>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fd fe12 	bl	8000648 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4690      	mov	r8, r2
 8002a2a:	4699      	mov	r9, r3
 8002a2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a38:	ee17 0a90 	vmov	r0, s15
 8002a3c:	f7fd fdac 	bl	8000598 <__aeabi_f2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4640      	mov	r0, r8
 8002a46:	4649      	mov	r1, r9
 8002a48:	f7fd fc46 	bl	80002d8 <__aeabi_dsub>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4620      	mov	r0, r4
 8002a52:	4629      	mov	r1, r5
 8002a54:	f7fd fc42 	bl	80002dc <__adddf3>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7fe f8ca 	bl	8000bf8 <__aeabi_d2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002a68:	6a38      	ldr	r0, [r7, #32]
 8002a6a:	f7fd fd95 	bl	8000598 <__aeabi_f2d>
 8002a6e:	4604      	mov	r4, r0
 8002a70:	460d      	mov	r5, r1
 8002a72:	4bad      	ldr	r3, [pc, #692]	; (8002d28 <interupt_DriveMotor+0xcc0>)
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	eef1 7a67 	vneg.f32	s15, s15
 8002a7c:	ee17 3a90 	vmov	r3, s15
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd89 	bl	8000598 <__aeabi_f2d>
 8002a86:	a3a4      	add	r3, pc, #656	; (adr r3, 8002d18 <interupt_DriveMotor+0xcb0>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fddc 	bl	8000648 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4690      	mov	r8, r2
 8002a96:	4699      	mov	r9, r3
 8002a98:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	ee17 0a90 	vmov	r0, s15
 8002aa8:	f7fd fd76 	bl	8000598 <__aeabi_f2d>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	f7fd fc10 	bl	80002d8 <__aeabi_dsub>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fc0c 	bl	80002dc <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f894 	bl	8000bf8 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ad4:	f107 0214 	add.w	r2, r7, #20
 8002ad8:	f107 0318 	add.w	r3, r7, #24
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ae4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002ae8:	f7ff fa0a 	bl	8001f00 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 ff64 	bl	80079c0 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002af8:	4b8c      	ldr	r3, [pc, #560]	; (8002d2c <interupt_DriveMotor+0xcc4>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	f040 8137 	bne.w	8002d70 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002b02:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <interupt_DriveMotor+0xcc8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002b08:	4b8a      	ldr	r3, [pc, #552]	; (8002d34 <interupt_DriveMotor+0xccc>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002b0e:	4b8a      	ldr	r3, [pc, #552]	; (8002d38 <interupt_DriveMotor+0xcd0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a88      	ldr	r2, [pc, #544]	; (8002d38 <interupt_DriveMotor+0xcd0>)
 8002b16:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002b18:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd3b 	bl	8000598 <__aeabi_f2d>
 8002b22:	4604      	mov	r4, r0
 8002b24:	460d      	mov	r5, r1
 8002b26:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd34 	bl	8000598 <__aeabi_f2d>
 8002b30:	a37b      	add	r3, pc, #492	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fd87 	bl	8000648 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4690      	mov	r8, r2
 8002b40:	4699      	mov	r9, r3
 8002b42:	4b7e      	ldr	r3, [pc, #504]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fd26 	bl	8000598 <__aeabi_f2d>
 8002b4c:	a374      	add	r3, pc, #464	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fd79 	bl	8000648 <__aeabi_dmul>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	a370      	add	r3, pc, #448	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fd70 	bl	8000648 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b78:	f7fd fe90 	bl	800089c <__aeabi_ddiv>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4640      	mov	r0, r8
 8002b82:	4649      	mov	r1, r9
 8002b84:	f7fd fbaa 	bl	80002dc <__adddf3>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fd fba4 	bl	80002dc <__adddf3>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7fe f82c 	bl	8000bf8 <__aeabi_d2f>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002ba4:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002ba6:	4b65      	ldr	r3, [pc, #404]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fcf4 	bl	8000598 <__aeabi_f2d>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	460d      	mov	r5, r1
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fced 	bl	8000598 <__aeabi_f2d>
 8002bbe:	a358      	add	r3, pc, #352	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fd40 	bl	8000648 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fb84 	bl	80002dc <__adddf3>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fe f80c 	bl	8000bf8 <__aeabi_d2f>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002be4:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002be6:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcd4 	bl	8000598 <__aeabi_f2d>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fccd 	bl	8000598 <__aeabi_f2d>
 8002bfe:	a348      	add	r3, pc, #288	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fd20 	bl	8000648 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4690      	mov	r8, r2
 8002c0e:	4699      	mov	r9, r3
 8002c10:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fcbf 	bl	8000598 <__aeabi_f2d>
 8002c1a:	a341      	add	r3, pc, #260	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fd12 	bl	8000648 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	a33c      	add	r3, pc, #240	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd fd09 	bl	8000648 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c46:	f7fd fe29 	bl	800089c <__aeabi_ddiv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4640      	mov	r0, r8
 8002c50:	4649      	mov	r1, r9
 8002c52:	f7fd fb43 	bl	80002dc <__adddf3>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fb3d 	bl	80002dc <__adddf3>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7fd ffc5 	bl	8000bf8 <__aeabi_d2f>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002c72:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc8d 	bl	8000598 <__aeabi_f2d>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	460d      	mov	r5, r1
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc86 	bl	8000598 <__aeabi_f2d>
 8002c8c:	a324      	add	r3, pc, #144	; (adr r3, 8002d20 <interupt_DriveMotor+0xcb8>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd fcd9 	bl	8000648 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd fb1d 	bl	80002dc <__adddf3>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffa5 	bl	8000bf8 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002cb2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <interupt_DriveMotor+0xcd4>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <interupt_DriveMotor+0xcd8>)
 8002cbc:	ed93 7a00 	vldr	s14, [r3]
 8002cc0:	f107 020c 	add.w	r2, r7, #12
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	eef0 0a47 	vmov.f32	s1, s14
 8002ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 fed6 	bl	8004a84 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002cd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002cf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d10:	e018      	b.n	8002d44 <interupt_DriveMotor+0xcdc>
 8002d12:	bf00      	nop
 8002d14:	f3af 8000 	nop.w
 8002d18:	d916872b 	.word	0xd916872b
 8002d1c:	3feff7ce 	.word	0x3feff7ce
 8002d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d24:	3f50624d 	.word	0x3f50624d
 8002d28:	200004b4 	.word	0x200004b4
 8002d2c:	20000508 	.word	0x20000508
 8002d30:	20000570 	.word	0x20000570
 8002d34:	20000572 	.word	0x20000572
 8002d38:	20000504 	.word	0x20000504
 8002d3c:	200004b8 	.word	0x200004b8
 8002d40:	200004c4 	.word	0x200004c4
 8002d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d48:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d4c:	f107 0214 	add.w	r2, r7, #20
 8002d50:	f107 0318 	add.w	r3, r7, #24
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d5c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d60:	f7ff f8ce 	bl	8001f00 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 fe28 	bl	80079c0 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002d70:	4bd3      	ldr	r3, [pc, #844]	; (80030c0 <interupt_DriveMotor+0x1058>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d137      	bne.n	8002de8 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002d78:	4bd2      	ldr	r3, [pc, #840]	; (80030c4 <interupt_DriveMotor+0x105c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002d7e:	4bd2      	ldr	r3, [pc, #840]	; (80030c8 <interupt_DriveMotor+0x1060>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002d84:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002da4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002dc4:	f107 0214 	add.w	r2, r7, #20
 8002dc8:	f107 0318 	add.w	r3, r7, #24
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002dd4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002dd8:	f7ff f892 	bl	8001f00 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f004 fdec 	bl	80079c0 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002de8:	4bb5      	ldr	r3, [pc, #724]	; (80030c0 <interupt_DriveMotor+0x1058>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b06      	cmp	r3, #6
 8002dee:	f040 8105 	bne.w	8002ffc <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002df2:	4bb4      	ldr	r3, [pc, #720]	; (80030c4 <interupt_DriveMotor+0x105c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002df8:	4bb3      	ldr	r3, [pc, #716]	; (80030c8 <interupt_DriveMotor+0x1060>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002dfe:	4bb3      	ldr	r3, [pc, #716]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fbc8 	bl	8000598 <__aeabi_f2d>
 8002e08:	4604      	mov	r4, r0
 8002e0a:	460d      	mov	r5, r1
 8002e0c:	4baf      	ldr	r3, [pc, #700]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd fbc1 	bl	8000598 <__aeabi_f2d>
 8002e16:	a3a8      	add	r3, pc, #672	; (adr r3, 80030b8 <interupt_DriveMotor+0x1050>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fc14 	bl	8000648 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4690      	mov	r8, r2
 8002e26:	4699      	mov	r9, r3
 8002e28:	4ba8      	ldr	r3, [pc, #672]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fbb3 	bl	8000598 <__aeabi_f2d>
 8002e32:	a3a1      	add	r3, pc, #644	; (adr r3, 80030b8 <interupt_DriveMotor+0x1050>)
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	f7fd fc06 	bl	8000648 <__aeabi_dmul>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	a39c      	add	r3, pc, #624	; (adr r3, 80030b8 <interupt_DriveMotor+0x1050>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fbfd 	bl	8000648 <__aeabi_dmul>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e5e:	f7fd fd1d 	bl	800089c <__aeabi_ddiv>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4640      	mov	r0, r8
 8002e68:	4649      	mov	r1, r9
 8002e6a:	f7fd fa37 	bl	80002dc <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4620      	mov	r0, r4
 8002e74:	4629      	mov	r1, r5
 8002e76:	f7fd fa31 	bl	80002dc <__adddf3>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd feb9 	bl	8000bf8 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a90      	ldr	r2, [pc, #576]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002e8a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002e8c:	4b8f      	ldr	r3, [pc, #572]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fb81 	bl	8000598 <__aeabi_f2d>
 8002e96:	4604      	mov	r4, r0
 8002e98:	460d      	mov	r5, r1
 8002e9a:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fb7a 	bl	8000598 <__aeabi_f2d>
 8002ea4:	a384      	add	r3, pc, #528	; (adr r3, 80030b8 <interupt_DriveMotor+0x1050>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fbcd 	bl	8000648 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	f7fd fa11 	bl	80002dc <__adddf3>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7fd fe99 	bl	8000bf8 <__aeabi_d2f>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4a80      	ldr	r2, [pc, #512]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002eca:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ecc:	4b80      	ldr	r3, [pc, #512]	; (80030d0 <interupt_DriveMotor+0x1068>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fb61 	bl	8000598 <__aeabi_f2d>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	460d      	mov	r5, r1
 8002eda:	4b7d      	ldr	r3, [pc, #500]	; (80030d0 <interupt_DriveMotor+0x1068>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fb5a 	bl	8000598 <__aeabi_f2d>
 8002ee4:	a374      	add	r3, pc, #464	; (adr r3, 80030b8 <interupt_DriveMotor+0x1050>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fbad 	bl	8000648 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f7fd f9f1 	bl	80002dc <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd fe79 	bl	8000bf8 <__aeabi_d2f>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4a71      	ldr	r2, [pc, #452]	; (80030d0 <interupt_DriveMotor+0x1068>)
 8002f0a:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002f0c:	4b71      	ldr	r3, [pc, #452]	; (80030d4 <interupt_DriveMotor+0x106c>)
 8002f0e:	edd3 6a00 	vldr	s13, [r3]
 8002f12:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f1a:	486d      	ldr	r0, [pc, #436]	; (80030d0 <interupt_DriveMotor+0x1068>)
 8002f1c:	eeb0 0a66 	vmov.f32	s0, s13
 8002f20:	eef0 0a47 	vmov.f32	s1, s14
 8002f24:	eeb0 1a67 	vmov.f32	s2, s15
 8002f28:	f005 fcee 	bl	8008908 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002f2c:	4b67      	ldr	r3, [pc, #412]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <interupt_DriveMotor+0x1068>)
 8002f34:	ed93 7a00 	vldr	s14, [r3]
 8002f38:	f107 020c 	add.w	r2, r7, #12
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	eef0 0a47 	vmov.f32	s1, s14
 8002f44:	eeb0 0a67 	vmov.f32	s0, s15
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fd9a 	bl	8004a84 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002f50:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <interupt_DriveMotor+0x1070>)
 8002f52:	ed93 7a00 	vldr	s14, [r3]
 8002f56:	4b61      	ldr	r3, [pc, #388]	; (80030dc <interupt_DriveMotor+0x1074>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f68:	4b58      	ldr	r3, [pc, #352]	; (80030cc <interupt_DriveMotor+0x1064>)
 8002f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f6e:	4b5c      	ldr	r3, [pc, #368]	; (80030e0 <interupt_DriveMotor+0x1078>)
 8002f70:	edd3 6a00 	vldr	s13, [r3]
 8002f74:	4b56      	ldr	r3, [pc, #344]	; (80030d0 <interupt_DriveMotor+0x1068>)
 8002f76:	ed93 6a01 	vldr	s12, [r3, #4]
 8002f7a:	1d3a      	adds	r2, r7, #4
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	eef0 1a46 	vmov.f32	s3, s12
 8002f84:	eeb0 1a66 	vmov.f32	s2, s13
 8002f88:	4611      	mov	r1, r2
 8002f8a:	eef0 0a67 	vmov.f32	s1, s15
 8002f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f92:	4618      	mov	r0, r3
 8002f94:	f001 facc 	bl	8004530 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f98:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002fb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002fd8:	f107 0214 	add.w	r2, r7, #20
 8002fdc:	f107 0318 	add.w	r3, r7, #24
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002fe8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002fec:	f7fe ff88 	bl	8001f00 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 fce2 	bl	80079c0 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <interupt_DriveMotor+0x1058>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d14b      	bne.n	800309c <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8003004:	4b31      	ldr	r3, [pc, #196]	; (80030cc <interupt_DriveMotor+0x1064>)
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <interupt_DriveMotor+0x1068>)
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <interupt_DriveMotor+0x1064>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <interupt_DriveMotor+0x1068>)
 800301c:	ed93 7a00 	vldr	s14, [r3]
 8003020:	f107 020c 	add.w	r2, r7, #12
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	eef0 0a47 	vmov.f32	s1, s14
 800302c:	eeb0 0a67 	vmov.f32	s0, s15
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fd26 	bl	8004a84 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003038:	ed97 7a04 	vldr	s14, [r7, #16]
 800303c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003044:	edd7 7a02 	vldr	s15, [r7, #8]
 8003048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003054:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003058:	ed97 7a04 	vldr	s14, [r7, #16]
 800305c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003064:	edd7 7a02 	vldr	s15, [r7, #8]
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003078:	f107 0214 	add.w	r2, r7, #20
 800307c:	f107 0318 	add.w	r3, r7, #24
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	edd7 0a08 	vldr	s1, [r7, #32]
 8003088:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800308c:	f7fe ff38 	bl	8001f00 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f004 fc92 	bl	80079c0 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 800309c:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <interupt_DriveMotor+0x107c>)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <interupt_DriveMotor+0x1080>)
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	6013      	str	r3, [r2, #0]



}
 80030a8:	bf00      	nop
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030b2:	bf00      	nop
 80030b4:	f3af 8000 	nop.w
 80030b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80030bc:	3f50624d 	.word	0x3f50624d
 80030c0:	20000508 	.word	0x20000508
 80030c4:	20000570 	.word	0x20000570
 80030c8:	20000572 	.word	0x20000572
 80030cc:	200004b8 	.word	0x200004b8
 80030d0:	200004c4 	.word	0x200004c4
 80030d4:	200004f8 	.word	0x200004f8
 80030d8:	20000218 	.word	0x20000218
 80030dc:	2000021c 	.word	0x2000021c
 80030e0:	20000248 	.word	0x20000248
 80030e4:	2000050c 	.word	0x2000050c
 80030e8:	20000510 	.word	0x20000510

080030ec <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80030f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80030fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80030fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8003102:	ed87 2a01 	vstr	s4, [r7, #4]
 8003106:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003108:	edd7 7a03 	vldr	s15, [r7, #12]
 800310c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003110:	edd7 7a04 	vldr	s15, [r7, #16]
 8003114:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800311c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003120:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003124:	ed97 7a01 	vldr	s14, [r7, #4]
 8003128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800312c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003130:	edd7 7a01 	vldr	s15, [r7, #4]
 8003134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d505      	bpl.n	800314a <straight_table2+0x5e>
 800313e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003142:	eef1 7a67 	vneg.f32	s15, s15
 8003146:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 800314a:	4bb4      	ldr	r3, [pc, #720]	; (800341c <straight_table2+0x330>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8003152:	2300      	movs	r3, #0
 8003154:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003156:	4ab2      	ldr	r2, [pc, #712]	; (8003420 <straight_table2+0x334>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800315c:	4ab0      	ldr	r2, [pc, #704]	; (8003420 <straight_table2+0x334>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003162:	4aaf      	ldr	r2, [pc, #700]	; (8003420 <straight_table2+0x334>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003168:	4aad      	ldr	r2, [pc, #692]	; (8003420 <straight_table2+0x334>)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800316e:	4aac      	ldr	r2, [pc, #688]	; (8003420 <straight_table2+0x334>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003174:	edd7 7a02 	vldr	s15, [r7, #8]
 8003178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	db03      	blt.n	800318a <straight_table2+0x9e>
 8003182:	4aa8      	ldr	r2, [pc, #672]	; (8003424 <straight_table2+0x338>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6053      	str	r3, [r2, #4]
 8003188:	e006      	b.n	8003198 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800318a:	edd7 7a01 	vldr	s15, [r7, #4]
 800318e:	eef1 7a67 	vneg.f32	s15, s15
 8003192:	4ba4      	ldr	r3, [pc, #656]	; (8003424 <straight_table2+0x338>)
 8003194:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003198:	4aa2      	ldr	r2, [pc, #648]	; (8003424 <straight_table2+0x338>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800319e:	4ba1      	ldr	r3, [pc, #644]	; (8003424 <straight_table2+0x338>)
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80031a6:	4ba0      	ldr	r3, [pc, #640]	; (8003428 <straight_table2+0x33c>)
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 80031ae:	4b9e      	ldr	r3, [pc, #632]	; (8003428 <straight_table2+0x33c>)
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80031b6:	4b9c      	ldr	r3, [pc, #624]	; (8003428 <straight_table2+0x33c>)
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80031be:	4b9b      	ldr	r3, [pc, #620]	; (800342c <straight_table2+0x340>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80031c4:	4b9a      	ldr	r3, [pc, #616]	; (8003430 <straight_table2+0x344>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80031ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	dd0e      	ble.n	80031f6 <straight_table2+0x10a>
 80031d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80031dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e8:	dd05      	ble.n	80031f6 <straight_table2+0x10a>
 80031ea:	4b91      	ldr	r3, [pc, #580]	; (8003430 <straight_table2+0x344>)
 80031ec:	2205      	movs	r2, #5
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	4a8c      	ldr	r2, [pc, #560]	; (8003424 <straight_table2+0x338>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80031f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	dd14      	ble.n	800322e <straight_table2+0x142>
 8003204:	edd7 7a05 	vldr	s15, [r7, #20]
 8003208:	eef1 7a67 	vneg.f32	s15, s15
 800320c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d509      	bpl.n	800322e <straight_table2+0x142>
 800321a:	4b85      	ldr	r3, [pc, #532]	; (8003430 <straight_table2+0x344>)
 800321c:	2206      	movs	r2, #6
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	edd7 7a01 	vldr	s15, [r7, #4]
 8003224:	eef1 7a67 	vneg.f32	s15, s15
 8003228:	4b7e      	ldr	r3, [pc, #504]	; (8003424 <straight_table2+0x338>)
 800322a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800322e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d514      	bpl.n	8003266 <straight_table2+0x17a>
 800323c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003240:	eef1 7a67 	vneg.f32	s15, s15
 8003244:	ed97 7a07 	vldr	s14, [r7, #28]
 8003248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	dd09      	ble.n	8003266 <straight_table2+0x17a>
 8003252:	4b77      	ldr	r3, [pc, #476]	; (8003430 <straight_table2+0x344>)
 8003254:	2205      	movs	r2, #5
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	edd7 7a01 	vldr	s15, [r7, #4]
 800325c:	eef1 7a67 	vneg.f32	s15, s15
 8003260:	4b70      	ldr	r3, [pc, #448]	; (8003424 <straight_table2+0x338>)
 8003262:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003266:	edd7 7a05 	vldr	s15, [r7, #20]
 800326a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	d50e      	bpl.n	8003292 <straight_table2+0x1a6>
 8003274:	ed97 7a07 	vldr	s14, [r7, #28]
 8003278:	edd7 7a05 	vldr	s15, [r7, #20]
 800327c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	d505      	bpl.n	8003292 <straight_table2+0x1a6>
 8003286:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <straight_table2+0x344>)
 8003288:	2206      	movs	r2, #6
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	4a65      	ldr	r2, [pc, #404]	; (8003424 <straight_table2+0x338>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003292:	4b68      	ldr	r3, [pc, #416]	; (8003434 <straight_table2+0x348>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003298:	783a      	ldrb	r2, [r7, #0]
 800329a:	4b67      	ldr	r3, [pc, #412]	; (8003438 <straight_table2+0x34c>)
 800329c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 800329e:	f004 fb73 	bl	8007988 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 80d3 	bne.w	8003450 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80032aa:	4b64      	ldr	r3, [pc, #400]	; (800343c <straight_table2+0x350>)
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <straight_table2+0x344>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80032b8:	4b5a      	ldr	r3, [pc, #360]	; (8003424 <straight_table2+0x338>)
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80032c0:	bf00      	nop
 80032c2:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <straight_table2+0x354>)
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80032cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	d409      	bmi.n	80032ea <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80032d6:	4b5a      	ldr	r3, [pc, #360]	; (8003440 <straight_table2+0x354>)
 80032d8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80032dc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003444 <straight_table2+0x358>
 80032e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	dd18      	ble.n	800331c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <straight_table2+0x35c>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80032f0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80032f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	d409      	bmi.n	8003312 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80032fe:	4b52      	ldr	r3, [pc, #328]	; (8003448 <straight_table2+0x35c>)
 8003300:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003304:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003444 <straight_table2+0x358>
 8003308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003310:	dd04      	ble.n	800331c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003312:	4b4e      	ldr	r3, [pc, #312]	; (800344c <straight_table2+0x360>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0d2      	beq.n	80032c2 <straight_table2+0x1d6>
		straight.displacement=0;
 800331c:	4b41      	ldr	r3, [pc, #260]	; (8003424 <straight_table2+0x338>)
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003324:	edd7 7a02 	vldr	s15, [r7, #8]
 8003328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	db03      	blt.n	800333a <straight_table2+0x24e>
 8003332:	4a3c      	ldr	r2, [pc, #240]	; (8003424 <straight_table2+0x338>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6053      	str	r3, [r2, #4]
 8003338:	e006      	b.n	8003348 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 800333a:	edd7 7a01 	vldr	s15, [r7, #4]
 800333e:	eef1 7a67 	vneg.f32	s15, s15
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <straight_table2+0x338>)
 8003344:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <straight_table2+0x344>)
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800334e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	dd0e      	ble.n	800337a <straight_table2+0x28e>
 800335c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003360:	edd7 7a05 	vldr	s15, [r7, #20]
 8003364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336c:	dd05      	ble.n	800337a <straight_table2+0x28e>
 800336e:	4b30      	ldr	r3, [pc, #192]	; (8003430 <straight_table2+0x344>)
 8003370:	2205      	movs	r2, #5
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <straight_table2+0x338>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800337a:	edd7 7a05 	vldr	s15, [r7, #20]
 800337e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	dd14      	ble.n	80033b2 <straight_table2+0x2c6>
 8003388:	edd7 7a05 	vldr	s15, [r7, #20]
 800338c:	eef1 7a67 	vneg.f32	s15, s15
 8003390:	ed97 7a07 	vldr	s14, [r7, #28]
 8003394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	d509      	bpl.n	80033b2 <straight_table2+0x2c6>
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <straight_table2+0x344>)
 80033a0:	2206      	movs	r2, #6
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a8:	eef1 7a67 	vneg.f32	s15, s15
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <straight_table2+0x338>)
 80033ae:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80033b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80033b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	d514      	bpl.n	80033ea <straight_table2+0x2fe>
 80033c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80033c4:	eef1 7a67 	vneg.f32	s15, s15
 80033c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80033cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	dd09      	ble.n	80033ea <straight_table2+0x2fe>
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <straight_table2+0x344>)
 80033d8:	2205      	movs	r2, #5
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e0:	eef1 7a67 	vneg.f32	s15, s15
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <straight_table2+0x338>)
 80033e6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80033ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f6:	f140 825b 	bpl.w	80038b0 <straight_table2+0x7c4>
 80033fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80033fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	f140 8251 	bpl.w	80038b0 <straight_table2+0x7c4>
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <straight_table2+0x344>)
 8003410:	2206      	movs	r2, #6
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <straight_table2+0x338>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6053      	str	r3, [r2, #4]
 800341a:	e249      	b.n	80038b0 <straight_table2+0x7c4>
 800341c:	20000509 	.word	0x20000509
 8003420:	200004d0 	.word	0x200004d0
 8003424:	200004b8 	.word	0x200004b8
 8003428:	200004c4 	.word	0x200004c4
 800342c:	200007e5 	.word	0x200007e5
 8003430:	200007e4 	.word	0x200007e4
 8003434:	20000508 	.word	0x20000508
 8003438:	20000570 	.word	0x20000570
 800343c:	20000514 	.word	0x20000514
 8003440:	200005ac 	.word	0x200005ac
 8003444:	425c0000 	.word	0x425c0000
 8003448:	200005b0 	.word	0x200005b0
 800344c:	200005d2 	.word	0x200005d2
	}else if(motor_mode.WallCutMode==2){
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	2b02      	cmp	r3, #2
 8003454:	f040 80c9 	bne.w	80035ea <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003458:	4bb8      	ldr	r3, [pc, #736]	; (800373c <straight_table2+0x650>)
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003460:	4bb7      	ldr	r3, [pc, #732]	; (8003740 <straight_table2+0x654>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003466:	4bb7      	ldr	r3, [pc, #732]	; (8003744 <straight_table2+0x658>)
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800346e:	bf00      	nop
 8003470:	4bb5      	ldr	r3, [pc, #724]	; (8003748 <straight_table2+0x65c>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d913      	bls.n	80034a8 <straight_table2+0x3bc>
 8003480:	4bb1      	ldr	r3, [pc, #708]	; (8003748 <straight_table2+0x65c>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800348a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	d909      	bls.n	80034a8 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003494:	4bac      	ldr	r3, [pc, #688]	; (8003748 <straight_table2+0x65c>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800349a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800374c <straight_table2+0x660>
 800349e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	db20      	blt.n	80034ea <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80034a8:	4ba9      	ldr	r3, [pc, #676]	; (8003750 <straight_table2+0x664>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80034ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	d913      	bls.n	80034e0 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80034b8:	4ba5      	ldr	r3, [pc, #660]	; (8003750 <straight_table2+0x664>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80034c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d909      	bls.n	80034e0 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80034cc:	4ba0      	ldr	r3, [pc, #640]	; (8003750 <straight_table2+0x664>)
 80034ce:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80034d2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800374c <straight_table2+0x660>
 80034d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034de:	db04      	blt.n	80034ea <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 80034e0:	4b9c      	ldr	r3, [pc, #624]	; (8003754 <straight_table2+0x668>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0c2      	beq.n	8003470 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 80034ea:	4b96      	ldr	r3, [pc, #600]	; (8003744 <straight_table2+0x658>)
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	db03      	blt.n	8003508 <straight_table2+0x41c>
 8003500:	4a90      	ldr	r2, [pc, #576]	; (8003744 <straight_table2+0x658>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6053      	str	r3, [r2, #4]
 8003506:	e006      	b.n	8003516 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 8003508:	edd7 7a01 	vldr	s15, [r7, #4]
 800350c:	eef1 7a67 	vneg.f32	s15, s15
 8003510:	4b8c      	ldr	r3, [pc, #560]	; (8003744 <straight_table2+0x658>)
 8003512:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003516:	4b8a      	ldr	r3, [pc, #552]	; (8003740 <straight_table2+0x654>)
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800351c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	dd0e      	ble.n	8003548 <straight_table2+0x45c>
 800352a:	ed97 7a07 	vldr	s14, [r7, #28]
 800352e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353a:	dd05      	ble.n	8003548 <straight_table2+0x45c>
 800353c:	4b80      	ldr	r3, [pc, #512]	; (8003740 <straight_table2+0x654>)
 800353e:	2205      	movs	r2, #5
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	4a80      	ldr	r2, [pc, #512]	; (8003744 <straight_table2+0x658>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003548:	edd7 7a05 	vldr	s15, [r7, #20]
 800354c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	dd14      	ble.n	8003580 <straight_table2+0x494>
 8003556:	edd7 7a05 	vldr	s15, [r7, #20]
 800355a:	eef1 7a67 	vneg.f32	s15, s15
 800355e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	d509      	bpl.n	8003580 <straight_table2+0x494>
 800356c:	4b74      	ldr	r3, [pc, #464]	; (8003740 <straight_table2+0x654>)
 800356e:	2206      	movs	r2, #6
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	edd7 7a01 	vldr	s15, [r7, #4]
 8003576:	eef1 7a67 	vneg.f32	s15, s15
 800357a:	4b72      	ldr	r3, [pc, #456]	; (8003744 <straight_table2+0x658>)
 800357c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003580:	edd7 7a05 	vldr	s15, [r7, #20]
 8003584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d514      	bpl.n	80035b8 <straight_table2+0x4cc>
 800358e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003592:	eef1 7a67 	vneg.f32	s15, s15
 8003596:	ed97 7a07 	vldr	s14, [r7, #28]
 800359a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a2:	dd09      	ble.n	80035b8 <straight_table2+0x4cc>
 80035a4:	4b66      	ldr	r3, [pc, #408]	; (8003740 <straight_table2+0x654>)
 80035a6:	2205      	movs	r2, #5
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ae:	eef1 7a67 	vneg.f32	s15, s15
 80035b2:	4b64      	ldr	r3, [pc, #400]	; (8003744 <straight_table2+0x658>)
 80035b4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80035bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	f140 8174 	bpl.w	80038b0 <straight_table2+0x7c4>
 80035c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d8:	f140 816a 	bpl.w	80038b0 <straight_table2+0x7c4>
 80035dc:	4b58      	ldr	r3, [pc, #352]	; (8003740 <straight_table2+0x654>)
 80035de:	2206      	movs	r2, #6
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	4a58      	ldr	r2, [pc, #352]	; (8003744 <straight_table2+0x658>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e162      	b.n	80038b0 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	f040 80b9 	bne.w	8003764 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035f2:	4b52      	ldr	r3, [pc, #328]	; (800373c <straight_table2+0x650>)
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <straight_table2+0x654>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <straight_table2+0x658>)
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003608:	bf00      	nop
 800360a:	4b53      	ldr	r3, [pc, #332]	; (8003758 <straight_table2+0x66c>)
 800360c:	edd3 7a00 	vldr	s15, [r3]
 8003610:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361c:	d409      	bmi.n	8003632 <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <straight_table2+0x66c>)
 8003620:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003624:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800375c <straight_table2+0x670>
 8003628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003630:	dd04      	ble.n	800363c <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 8003632:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <straight_table2+0x674>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0e6      	beq.n	800360a <straight_table2+0x51e>
		straight.displacement=0;
 800363c:	4b41      	ldr	r3, [pc, #260]	; (8003744 <straight_table2+0x658>)
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003644:	edd7 7a02 	vldr	s15, [r7, #8]
 8003648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	db03      	blt.n	800365a <straight_table2+0x56e>
 8003652:	4a3c      	ldr	r2, [pc, #240]	; (8003744 <straight_table2+0x658>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6053      	str	r3, [r2, #4]
 8003658:	e006      	b.n	8003668 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 800365a:	edd7 7a01 	vldr	s15, [r7, #4]
 800365e:	eef1 7a67 	vneg.f32	s15, s15
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <straight_table2+0x658>)
 8003664:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <straight_table2+0x654>)
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800366e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003672:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367a:	dd0e      	ble.n	800369a <straight_table2+0x5ae>
 800367c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003680:	edd7 7a05 	vldr	s15, [r7, #20]
 8003684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368c:	dd05      	ble.n	800369a <straight_table2+0x5ae>
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <straight_table2+0x654>)
 8003690:	2205      	movs	r2, #5
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <straight_table2+0x658>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800369a:	edd7 7a05 	vldr	s15, [r7, #20]
 800369e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a6:	dd14      	ble.n	80036d2 <straight_table2+0x5e6>
 80036a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ac:	eef1 7a67 	vneg.f32	s15, s15
 80036b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80036b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	d509      	bpl.n	80036d2 <straight_table2+0x5e6>
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <straight_table2+0x654>)
 80036c0:	2206      	movs	r2, #6
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <straight_table2+0x658>)
 80036ce:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80036d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036de:	d514      	bpl.n	800370a <straight_table2+0x61e>
 80036e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80036e4:	eef1 7a67 	vneg.f32	s15, s15
 80036e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f4:	dd09      	ble.n	800370a <straight_table2+0x61e>
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <straight_table2+0x654>)
 80036f8:	2205      	movs	r2, #5
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003700:	eef1 7a67 	vneg.f32	s15, s15
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <straight_table2+0x658>)
 8003706:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800370a:	edd7 7a05 	vldr	s15, [r7, #20]
 800370e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	f140 80cb 	bpl.w	80038b0 <straight_table2+0x7c4>
 800371a:	ed97 7a07 	vldr	s14, [r7, #28]
 800371e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372a:	f140 80c1 	bpl.w	80038b0 <straight_table2+0x7c4>
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <straight_table2+0x654>)
 8003730:	2206      	movs	r2, #6
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	4a03      	ldr	r2, [pc, #12]	; (8003744 <straight_table2+0x658>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6053      	str	r3, [r2, #4]
 800373a:	e0b9      	b.n	80038b0 <straight_table2+0x7c4>
 800373c:	20000514 	.word	0x20000514
 8003740:	200007e4 	.word	0x200007e4
 8003744:	200004b8 	.word	0x200004b8
 8003748:	200005b4 	.word	0x200005b4
 800374c:	42000000 	.word	0x42000000
 8003750:	200005b8 	.word	0x200005b8
 8003754:	200005d3 	.word	0x200005d3
 8003758:	200005c4 	.word	0x200005c4
 800375c:	420c0000 	.word	0x420c0000
 8003760:	200005d4 	.word	0x200005d4
	}else if(motor_mode.WallCutMode==4){
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	2b04      	cmp	r3, #4
 8003768:	f040 80a2 	bne.w	80038b0 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800376c:	4ba6      	ldr	r3, [pc, #664]	; (8003a08 <straight_table2+0x91c>)
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003774:	4ba5      	ldr	r3, [pc, #660]	; (8003a0c <straight_table2+0x920>)
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800377a:	4ba5      	ldr	r3, [pc, #660]	; (8003a10 <straight_table2+0x924>)
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003782:	bf00      	nop
 8003784:	4ba3      	ldr	r3, [pc, #652]	; (8003a14 <straight_table2+0x928>)
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800378e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003796:	d409      	bmi.n	80037ac <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003798:	4b9e      	ldr	r3, [pc, #632]	; (8003a14 <straight_table2+0x928>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800379e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003a18 <straight_table2+0x92c>
 80037a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037aa:	dd04      	ble.n	80037b6 <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 80037ac:	4b9b      	ldr	r3, [pc, #620]	; (8003a1c <straight_table2+0x930>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0e6      	beq.n	8003784 <straight_table2+0x698>
		straight.displacement=0;
 80037b6:	4b96      	ldr	r3, [pc, #600]	; (8003a10 <straight_table2+0x924>)
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80037be:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	db03      	blt.n	80037d4 <straight_table2+0x6e8>
 80037cc:	4a90      	ldr	r2, [pc, #576]	; (8003a10 <straight_table2+0x924>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6053      	str	r3, [r2, #4]
 80037d2:	e006      	b.n	80037e2 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 80037d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d8:	eef1 7a67 	vneg.f32	s15, s15
 80037dc:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <straight_table2+0x924>)
 80037de:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80037e2:	4b8a      	ldr	r3, [pc, #552]	; (8003a0c <straight_table2+0x920>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80037e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	dd0e      	ble.n	8003814 <straight_table2+0x728>
 80037f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80037fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80037fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003806:	dd05      	ble.n	8003814 <straight_table2+0x728>
 8003808:	4b80      	ldr	r3, [pc, #512]	; (8003a0c <straight_table2+0x920>)
 800380a:	2205      	movs	r2, #5
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	4a80      	ldr	r2, [pc, #512]	; (8003a10 <straight_table2+0x924>)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003814:	edd7 7a05 	vldr	s15, [r7, #20]
 8003818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003820:	dd14      	ble.n	800384c <straight_table2+0x760>
 8003822:	edd7 7a05 	vldr	s15, [r7, #20]
 8003826:	eef1 7a67 	vneg.f32	s15, s15
 800382a:	ed97 7a07 	vldr	s14, [r7, #28]
 800382e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003836:	d509      	bpl.n	800384c <straight_table2+0x760>
 8003838:	4b74      	ldr	r3, [pc, #464]	; (8003a0c <straight_table2+0x920>)
 800383a:	2206      	movs	r2, #6
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003842:	eef1 7a67 	vneg.f32	s15, s15
 8003846:	4b72      	ldr	r3, [pc, #456]	; (8003a10 <straight_table2+0x924>)
 8003848:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800384c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003858:	d514      	bpl.n	8003884 <straight_table2+0x798>
 800385a:	edd7 7a05 	vldr	s15, [r7, #20]
 800385e:	eef1 7a67 	vneg.f32	s15, s15
 8003862:	ed97 7a07 	vldr	s14, [r7, #28]
 8003866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386e:	dd09      	ble.n	8003884 <straight_table2+0x798>
 8003870:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <straight_table2+0x920>)
 8003872:	2205      	movs	r2, #5
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	edd7 7a01 	vldr	s15, [r7, #4]
 800387a:	eef1 7a67 	vneg.f32	s15, s15
 800387e:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <straight_table2+0x924>)
 8003880:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003884:	edd7 7a05 	vldr	s15, [r7, #20]
 8003888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	d50e      	bpl.n	80038b0 <straight_table2+0x7c4>
 8003892:	ed97 7a07 	vldr	s14, [r7, #28]
 8003896:	edd7 7a05 	vldr	s15, [r7, #20]
 800389a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a2:	d505      	bpl.n	80038b0 <straight_table2+0x7c4>
 80038a4:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <straight_table2+0x920>)
 80038a6:	2206      	movs	r2, #6
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <straight_table2+0x924>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 80038b0:	78bb      	ldrb	r3, [r7, #2]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 809e 	bne.w	80039f4 <straight_table2+0x908>
	while (g_acc_flag!=4){
 80038b8:	e074      	b.n	80039a4 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d120      	bne.n	8003902 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c4:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80038c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038cc:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <straight_table2+0x934>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d90e      	bls.n	80038fa <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 80038dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80038e0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80038e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038e8:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <straight_table2+0x938>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d900      	bls.n	80038fa <straight_table2+0x80e>
 80038f8:	e054      	b.n	80039a4 <straight_table2+0x8b8>
				g_acc_flag=4;
 80038fa:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <straight_table2+0x920>)
 80038fc:	2204      	movs	r2, #4
 80038fe:	701a      	strb	r2, [r3, #0]
				break;
 8003900:	e055      	b.n	80039ae <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d121      	bne.n	800394c <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003908:	edd7 7a05 	vldr	s15, [r7, #20]
 800390c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003914:	4b44      	ldr	r3, [pc, #272]	; (8003a28 <straight_table2+0x93c>)
 8003916:	edd3 7a00 	vldr	s15, [r3]
 800391a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003922:	d900      	bls.n	8003926 <straight_table2+0x83a>
 8003924:	e03e      	b.n	80039a4 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003926:	edd7 7a05 	vldr	s15, [r7, #20]
 800392a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800392e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003932:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <straight_table2+0x940>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	d900      	bls.n	8003944 <straight_table2+0x858>
 8003942:	e02f      	b.n	80039a4 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <straight_table2+0x920>)
 8003946:	2204      	movs	r2, #4
 8003948:	701a      	strb	r2, [r3, #0]
				break;
 800394a:	e030      	b.n	80039ae <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d112      	bne.n	8003978 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003952:	edd7 7a05 	vldr	s15, [r7, #20]
 8003956:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800395a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800395e:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <straight_table2+0x944>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	d900      	bls.n	8003970 <straight_table2+0x884>
 800396e:	e019      	b.n	80039a4 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003970:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <straight_table2+0x920>)
 8003972:	2204      	movs	r2, #4
 8003974:	701a      	strb	r2, [r3, #0]
				break;
 8003976:	e01a      	b.n	80039ae <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d112      	bne.n	80039a4 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800397e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003982:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <straight_table2+0x928>)
 800398c:	edd3 7a00 	vldr	s15, [r3]
 8003990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	d900      	bls.n	800399c <straight_table2+0x8b0>
 800399a:	e003      	b.n	80039a4 <straight_table2+0x8b8>
				g_acc_flag=4;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <straight_table2+0x920>)
 800399e:	2204      	movs	r2, #4
 80039a0:	701a      	strb	r2, [r3, #0]
				break;
 80039a2:	e004      	b.n	80039ae <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <straight_table2+0x920>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d185      	bne.n	80038ba <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 80039ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80039b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	d105      	bne.n	80039c8 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 80039bc:	2064      	movs	r0, #100	; 0x64
 80039be:	f004 fa8f 	bl	8007ee0 <wait_ms_NoReset>
		modeacc = 0;
 80039c2:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <straight_table2+0x948>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <straight_table2+0x94c>)
 80039ca:	ed93 7a00 	vldr	s14, [r3]
 80039ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80039d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <straight_table2+0x94c>)
 80039d8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <straight_table2+0x950>)
 80039de:	ed93 7a00 	vldr	s14, [r3]
 80039e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80039e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <straight_table2+0x950>)
 80039ec:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039f0:	f003 ffd8 	bl	80079a4 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <straight_table2+0x924>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	ee07 3a90 	vmov	s15, r3



}
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000514 	.word	0x20000514
 8003a0c:	200007e4 	.word	0x200007e4
 8003a10:	200004b8 	.word	0x200004b8
 8003a14:	200005c8 	.word	0x200005c8
 8003a18:	420c0000 	.word	0x420c0000
 8003a1c:	200005d4 	.word	0x200005d4
 8003a20:	200005b0 	.word	0x200005b0
 8003a24:	200005ac 	.word	0x200005ac
 8003a28:	200005b8 	.word	0x200005b8
 8003a2c:	200005b4 	.word	0x200005b4
 8003a30:	200005c4 	.word	0x200005c4
 8003a34:	20000508 	.word	0x20000508
 8003a38:	20000200 	.word	0x20000200
 8003a3c:	20000204 	.word	0x20000204

08003a40 <turning_table2>:
	E_distanceR = E_distanceR - input_displacement;
	pl_DriveMotor_stop();//これは必要か？
}

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a4a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a4e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a52:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a56:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a5e:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a62:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a72:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a76:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7e:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a82:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	d505      	bpl.n	8003a9c <turning_table2+0x5c>
 8003a90:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a94:	eef1 7a67 	vneg.f32	s15, s15
 8003a98:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003a9c:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <turning_table2+0x1f4>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003aa2:	4a64      	ldr	r2, [pc, #400]	; (8003c34 <turning_table2+0x1f4>)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003aa8:	4a62      	ldr	r2, [pc, #392]	; (8003c34 <turning_table2+0x1f4>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003aae:	4a61      	ldr	r2, [pc, #388]	; (8003c34 <turning_table2+0x1f4>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ab4:	4a5f      	ldr	r2, [pc, #380]	; (8003c34 <turning_table2+0x1f4>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8003abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	db03      	blt.n	8003ad0 <turning_table2+0x90>
 8003ac8:	4a5b      	ldr	r2, [pc, #364]	; (8003c38 <turning_table2+0x1f8>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6053      	str	r3, [r2, #4]
 8003ace:	e006      	b.n	8003ade <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ad4:	eef1 7a67 	vneg.f32	s15, s15
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <turning_table2+0x1f8>)
 8003ada:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003ade:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <turning_table2+0x1f8>)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003ae4:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <turning_table2+0x1f8>)
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003aec:	4b53      	ldr	r3, [pc, #332]	; (8003c3c <turning_table2+0x1fc>)
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <turning_table2+0x1fc>)
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <turning_table2+0x1fc>)
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003b04:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <turning_table2+0x200>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003b0a:	4b4e      	ldr	r3, [pc, #312]	; (8003c44 <turning_table2+0x204>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1c:	dd0e      	ble.n	8003b3c <turning_table2+0xfc>
 8003b1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2e:	dd05      	ble.n	8003b3c <turning_table2+0xfc>
 8003b30:	4b44      	ldr	r3, [pc, #272]	; (8003c44 <turning_table2+0x204>)
 8003b32:	2205      	movs	r2, #5
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	4a40      	ldr	r2, [pc, #256]	; (8003c38 <turning_table2+0x1f8>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	dd14      	ble.n	8003b74 <turning_table2+0x134>
 8003b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b4e:	eef1 7a67 	vneg.f32	s15, s15
 8003b52:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	d509      	bpl.n	8003b74 <turning_table2+0x134>
 8003b60:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <turning_table2+0x204>)
 8003b62:	2206      	movs	r2, #6
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b6a:	eef1 7a67 	vneg.f32	s15, s15
 8003b6e:	4b32      	ldr	r3, [pc, #200]	; (8003c38 <turning_table2+0x1f8>)
 8003b70:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	d514      	bpl.n	8003bac <turning_table2+0x16c>
 8003b82:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b86:	eef1 7a67 	vneg.f32	s15, s15
 8003b8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	dd09      	ble.n	8003bac <turning_table2+0x16c>
 8003b98:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <turning_table2+0x204>)
 8003b9a:	2205      	movs	r2, #5
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ba2:	eef1 7a67 	vneg.f32	s15, s15
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <turning_table2+0x1f8>)
 8003ba8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003bac:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	d50e      	bpl.n	8003bd8 <turning_table2+0x198>
 8003bba:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	d505      	bpl.n	8003bd8 <turning_table2+0x198>
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <turning_table2+0x204>)
 8003bce:	2206      	movs	r2, #6
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <turning_table2+0x1f8>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <turning_table2+0x208>)
 8003bda:	2202      	movs	r2, #2
 8003bdc:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003bde:	f003 fed3 	bl	8007988 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003be2:	bf00      	nop
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <turning_table2+0x204>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d1fa      	bne.n	8003be4 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	d106      	bne.n	8003c0a <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003bfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c00:	f004 f96e 	bl	8007ee0 <wait_ms_NoReset>
		modeacc = 0;
 8003c04:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <turning_table2+0x208>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <turning_table2+0x20c>)
 8003c0c:	ed93 7a00 	vldr	s14, [r3]
 8003c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <turning_table2+0x20c>)
 8003c1a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003c1e:	f003 fec1 	bl	80079a4 <pl_DriveMotor_stop>

	return turning.velocity;
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <turning_table2+0x1f8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	ee07 3a90 	vmov	s15, r3
}
 8003c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200004e4 	.word	0x200004e4
 8003c38:	200004c4 	.word	0x200004c4
 8003c3c:	200004b8 	.word	0x200004b8
 8003c40:	200007e5 	.word	0x200007e5
 8003c44:	200007e4 	.word	0x200007e4
 8003c48:	20000508 	.word	0x20000508
 8003c4c:	20000244 	.word	0x20000244

08003c50 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c5a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c5e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c62:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c66:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c6a:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c72:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c76:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c86:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c8a:	ed97 7a00 	vldr	s14, [r7]
 8003c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c96:	edd7 7a00 	vldr	s15, [r7]
 8003c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	d505      	bpl.n	8003cb0 <slalom_table2+0x60>
 8003ca4:	edd7 7a00 	vldr	s15, [r7]
 8003ca8:	eef1 7a67 	vneg.f32	s15, s15
 8003cac:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003cb0:	4a5e      	ldr	r2, [pc, #376]	; (8003e2c <slalom_table2+0x1dc>)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	; (8003e2c <slalom_table2+0x1dc>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003cbc:	4a5b      	ldr	r2, [pc, #364]	; (8003e2c <slalom_table2+0x1dc>)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <slalom_table2+0x1dc>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <slalom_table2+0x1dc>)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cda:	db03      	blt.n	8003ce4 <slalom_table2+0x94>
 8003cdc:	4a54      	ldr	r2, [pc, #336]	; (8003e30 <slalom_table2+0x1e0>)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6053      	str	r3, [r2, #4]
 8003ce2:	e006      	b.n	8003cf2 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003ce4:	edd7 7a00 	vldr	s15, [r7]
 8003ce8:	eef1 7a67 	vneg.f32	s15, s15
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <slalom_table2+0x1e0>)
 8003cee:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003cf2:	4a4f      	ldr	r2, [pc, #316]	; (8003e30 <slalom_table2+0x1e0>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003cf8:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <slalom_table2+0x1e0>)
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003d00:	4a4c      	ldr	r2, [pc, #304]	; (8003e34 <slalom_table2+0x1e4>)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003d06:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <slalom_table2+0x1e4>)
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003d0e:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <slalom_table2+0x1e4>)
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003d16:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <slalom_table2+0x1e8>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003d1c:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <slalom_table2+0x1ec>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2e:	dd0e      	ble.n	8003d4e <slalom_table2+0xfe>
 8003d30:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d40:	dd05      	ble.n	8003d4e <slalom_table2+0xfe>
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <slalom_table2+0x1ec>)
 8003d44:	2205      	movs	r2, #5
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	4a39      	ldr	r2, [pc, #228]	; (8003e30 <slalom_table2+0x1e0>)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5a:	dd14      	ble.n	8003d86 <slalom_table2+0x136>
 8003d5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d60:	eef1 7a67 	vneg.f32	s15, s15
 8003d64:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d70:	d509      	bpl.n	8003d86 <slalom_table2+0x136>
 8003d72:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <slalom_table2+0x1ec>)
 8003d74:	2206      	movs	r2, #6
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	edd7 7a00 	vldr	s15, [r7]
 8003d7c:	eef1 7a67 	vneg.f32	s15, s15
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <slalom_table2+0x1e0>)
 8003d82:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d92:	d514      	bpl.n	8003dbe <slalom_table2+0x16e>
 8003d94:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d98:	eef1 7a67 	vneg.f32	s15, s15
 8003d9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	dd09      	ble.n	8003dbe <slalom_table2+0x16e>
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <slalom_table2+0x1ec>)
 8003dac:	2205      	movs	r2, #5
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	edd7 7a00 	vldr	s15, [r7]
 8003db4:	eef1 7a67 	vneg.f32	s15, s15
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <slalom_table2+0x1e0>)
 8003dba:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	d50e      	bpl.n	8003dea <slalom_table2+0x19a>
 8003dcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ddc:	d505      	bpl.n	8003dea <slalom_table2+0x19a>
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <slalom_table2+0x1ec>)
 8003de0:	2206      	movs	r2, #6
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <slalom_table2+0x1e0>)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <slalom_table2+0x1f0>)
 8003dec:	2204      	movs	r2, #4
 8003dee:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003df0:	f003 fdca 	bl	8007988 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003df4:	bf00      	nop
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <slalom_table2+0x1ec>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d1fa      	bne.n	8003df6 <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <slalom_table2+0x1f4>)
 8003e02:	ed93 7a00 	vldr	s14, [r3]
 8003e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <slalom_table2+0x1f4>)
 8003e10:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003e14:	f003 fdc6 	bl	80079a4 <pl_DriveMotor_stop>

	return turning.velocity;
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <slalom_table2+0x1e0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	ee07 3a90 	vmov	s15, r3
}
 8003e20:	eeb0 0a67 	vmov.f32	s0, s15
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200004e4 	.word	0x200004e4
 8003e30:	200004c4 	.word	0x200004c4
 8003e34:	200004b8 	.word	0x200004b8
 8003e38:	200007e5 	.word	0x200007e5
 8003e3c:	200007e4 	.word	0x200007e4
 8003e40:	20000508 	.word	0x20000508
 8003e44:	20000244 	.word	0x20000244

08003e48 <no_angle>:

void no_angle(void){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <no_angle+0x78>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <no_angle+0x78>)
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e5c:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <no_angle+0x78>)
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e64:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <no_angle+0x7c>)
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <no_angle+0x7c>)
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <no_angle+0x7c>)
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <no_angle+0x80>)
 8003e7e:	2203      	movs	r2, #3
 8003e80:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e82:	f003 fd81 	bl	8007988 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e86:	e002      	b.n	8003e8e <no_angle+0x46>
		HAL_Delay(1);
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f00c fb1d 	bl	80104c8 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <no_angle+0x84>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e96:	ddf7      	ble.n	8003e88 <no_angle+0x40>
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <no_angle+0x84>)
 8003e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e9e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003ea2:	ddf1      	ble.n	8003e88 <no_angle+0x40>
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <no_angle+0x84>)
 8003ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003eaa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003eae:	ddeb      	ble.n	8003e88 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <no_angle+0x80>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003eb6:	f003 fd75 	bl	80079a4 <pl_DriveMotor_stop>

}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200004c4 	.word	0x200004c4
 8003ec4:	200004b8 	.word	0x200004b8
 8003ec8:	20000508 	.word	0x20000508
 8003ecc:	20000298 	.word	0x20000298

08003ed0 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003ed0:	b5b0      	push	{r4, r5, r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003eda:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ede:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003ee2:	4a3d      	ldr	r2, [pc, #244]	; (8003fd8 <mollifier_slalom_table+0x108>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003ee8:	4a3b      	ldr	r2, [pc, #236]	; (8003fd8 <mollifier_slalom_table+0x108>)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003eee:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <mollifier_slalom_table+0x108>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <mollifier_slalom_table+0x10c>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003efc:	4b37      	ldr	r3, [pc, #220]	; (8003fdc <mollifier_slalom_table+0x10c>)
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003f04:	4a36      	ldr	r2, [pc, #216]	; (8003fe0 <mollifier_slalom_table+0x110>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <mollifier_slalom_table+0x110>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <mollifier_slalom_table+0x110>)
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <mollifier_slalom_table+0x114>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f20:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <mollifier_slalom_table+0x118>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003f26:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f2a:	eef0 7ae7 	vabs.f32	s15, s15
 8003f2e:	ee17 0a90 	vmov	r0, s15
 8003f32:	f7fc fb31 	bl	8000598 <__aeabi_f2d>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4614      	mov	r4, r2
 8003f3c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f40:	a321      	add	r3, pc, #132	; (adr r3, 8003fc8 <mollifier_slalom_table+0xf8>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	4620      	mov	r0, r4
 8003f48:	4629      	mov	r1, r5
 8003f4a:	f7fc fca7 	bl	800089c <__aeabi_ddiv>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	a31e      	add	r3, pc, #120	; (adr r3, 8003fd0 <mollifier_slalom_table+0x100>)
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f7fc fb74 	bl	8000648 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7fc fb15 	bl	8000598 <__aeabi_f2d>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4620      	mov	r0, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	f7fc fc91 	bl	800089c <__aeabi_ddiv>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	f7fc fe39 	bl	8000bf8 <__aeabi_d2f>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <mollifier_slalom_table+0x11c>)
 8003f8a:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <mollifier_slalom_table+0x120>)
 8003f8e:	2206      	movs	r2, #6
 8003f90:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f92:	f003 fcf9 	bl	8007988 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f96:	bf00      	nop
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <mollifier_slalom_table+0x118>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d1fa      	bne.n	8003f98 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <mollifier_slalom_table+0x124>)
 8003fa4:	ed93 7a00 	vldr	s14, [r3]
 8003fa8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <mollifier_slalom_table+0x124>)
 8003fb2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003fb6:	f003 fcf5 	bl	80079a4 <pl_DriveMotor_stop>

}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	f3af 8000 	nop.w
 8003fc8:	f9db22d1 	.word	0xf9db22d1
 8003fcc:	3fdc6a7e 	.word	0x3fdc6a7e
 8003fd0:	362cef38 	.word	0x362cef38
 8003fd4:	3fd78b56 	.word	0x3fd78b56
 8003fd8:	200004f8 	.word	0x200004f8
 8003fdc:	200004c4 	.word	0x200004c4
 8003fe0:	200004b8 	.word	0x200004b8
 8003fe4:	200007e5 	.word	0x200007e5
 8003fe8:	200007e4 	.word	0x200007e4
 8003fec:	200007e0 	.word	0x200007e0
 8003ff0:	20000508 	.word	0x20000508
 8003ff4:	20000244 	.word	0x20000244

08003ff8 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <no_frontwall_straight+0x60>)
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <no_frontwall_straight+0x60>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <no_frontwall_straight+0x60>)
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <no_frontwall_straight+0x64>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <no_frontwall_straight+0x64>)
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <no_frontwall_straight+0x64>)
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <no_frontwall_straight+0x68>)
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <no_frontwall_straight+0x6c>)
 8004034:	2205      	movs	r2, #5
 8004036:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004038:	f003 fca6 	bl	8007988 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 800403c:	2096      	movs	r0, #150	; 0x96
 800403e:	f003 ff4f 	bl	8007ee0 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <no_frontwall_straight+0x68>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <no_frontwall_straight+0x6c>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 800404e:	f003 fca9 	bl	80079a4 <pl_DriveMotor_stop>

}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200004c4 	.word	0x200004c4
 800405c:	200004b8 	.word	0x200004b8
 8004060:	20000571 	.word	0x20000571
 8004064:	20000508 	.word	0x20000508

08004068 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004072:	edc7 0a04 	vstr	s1, [r7, #16]
 8004076:	ed87 1a03 	vstr	s2, [r7, #12]
 800407a:	edc7 1a02 	vstr	s3, [r7, #8]
 800407e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004082:	edd7 7a03 	vldr	s15, [r7, #12]
 8004086:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800408a:	edd7 7a04 	vldr	s15, [r7, #16]
 800408e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004092:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004096:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800409a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800409e:	ed97 7a01 	vldr	s14, [r7, #4]
 80040a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a6:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80040aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	d505      	bpl.n	80040c4 <straight_table_ff+0x5c>
 80040b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80040bc:	eef1 7a67 	vneg.f32	s15, s15
 80040c0:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 80040c4:	4b76      	ldr	r3, [pc, #472]	; (80042a0 <straight_table_ff+0x238>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 80040cc:	4b75      	ldr	r3, [pc, #468]	; (80042a4 <straight_table_ff+0x23c>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 80040d4:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <straight_table_ff+0x240>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 80040dc:	4b73      	ldr	r3, [pc, #460]	; (80042ac <straight_table_ff+0x244>)
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 80040e4:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <straight_table_ff+0x248>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 80040ec:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <straight_table_ff+0x24c>)
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 80040f4:	4a70      	ldr	r2, [pc, #448]	; (80042b8 <straight_table_ff+0x250>)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80040fa:	4a6f      	ldr	r2, [pc, #444]	; (80042b8 <straight_table_ff+0x250>)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8004100:	4a6d      	ldr	r2, [pc, #436]	; (80042b8 <straight_table_ff+0x250>)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8004106:	4a6c      	ldr	r2, [pc, #432]	; (80042b8 <straight_table_ff+0x250>)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800410c:	4a6a      	ldr	r2, [pc, #424]	; (80042b8 <straight_table_ff+0x250>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004112:	edd7 7a02 	vldr	s15, [r7, #8]
 8004116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	db03      	blt.n	8004128 <straight_table_ff+0xc0>
 8004120:	4a66      	ldr	r2, [pc, #408]	; (80042bc <straight_table_ff+0x254>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6053      	str	r3, [r2, #4]
 8004126:	e006      	b.n	8004136 <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 8004128:	edd7 7a01 	vldr	s15, [r7, #4]
 800412c:	eef1 7a67 	vneg.f32	s15, s15
 8004130:	4b62      	ldr	r3, [pc, #392]	; (80042bc <straight_table_ff+0x254>)
 8004132:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8004136:	4a61      	ldr	r2, [pc, #388]	; (80042bc <straight_table_ff+0x254>)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800413c:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <straight_table_ff+0x254>)
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8004144:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <straight_table_ff+0x258>)
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800414c:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <straight_table_ff+0x258>)
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8004154:	4b5a      	ldr	r3, [pc, #360]	; (80042c0 <straight_table_ff+0x258>)
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800415c:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <straight_table_ff+0x25c>)
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004162:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <straight_table_ff+0x260>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004168:	edd7 7a05 	vldr	s15, [r7, #20]
 800416c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004174:	dd0e      	ble.n	8004194 <straight_table_ff+0x12c>
 8004176:	ed97 7a07 	vldr	s14, [r7, #28]
 800417a:	edd7 7a05 	vldr	s15, [r7, #20]
 800417e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	dd05      	ble.n	8004194 <straight_table_ff+0x12c>
 8004188:	4b4f      	ldr	r3, [pc, #316]	; (80042c8 <straight_table_ff+0x260>)
 800418a:	2205      	movs	r2, #5
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	4a4b      	ldr	r2, [pc, #300]	; (80042bc <straight_table_ff+0x254>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004194:	edd7 7a05 	vldr	s15, [r7, #20]
 8004198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	dd14      	ble.n	80041cc <straight_table_ff+0x164>
 80041a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80041a6:	eef1 7a67 	vneg.f32	s15, s15
 80041aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80041ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b6:	d509      	bpl.n	80041cc <straight_table_ff+0x164>
 80041b8:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <straight_table_ff+0x260>)
 80041ba:	2206      	movs	r2, #6
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	edd7 7a01 	vldr	s15, [r7, #4]
 80041c2:	eef1 7a67 	vneg.f32	s15, s15
 80041c6:	4b3d      	ldr	r3, [pc, #244]	; (80042bc <straight_table_ff+0x254>)
 80041c8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80041cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80041d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d8:	d514      	bpl.n	8004204 <straight_table_ff+0x19c>
 80041da:	edd7 7a05 	vldr	s15, [r7, #20]
 80041de:	eef1 7a67 	vneg.f32	s15, s15
 80041e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80041e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ee:	dd09      	ble.n	8004204 <straight_table_ff+0x19c>
 80041f0:	4b35      	ldr	r3, [pc, #212]	; (80042c8 <straight_table_ff+0x260>)
 80041f2:	2205      	movs	r2, #5
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80041fa:	eef1 7a67 	vneg.f32	s15, s15
 80041fe:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <straight_table_ff+0x254>)
 8004200:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004204:	edd7 7a05 	vldr	s15, [r7, #20]
 8004208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800420c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004210:	d50e      	bpl.n	8004230 <straight_table_ff+0x1c8>
 8004212:	ed97 7a07 	vldr	s14, [r7, #28]
 8004216:	edd7 7a05 	vldr	s15, [r7, #20]
 800421a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004222:	d505      	bpl.n	8004230 <straight_table_ff+0x1c8>
 8004224:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <straight_table_ff+0x260>)
 8004226:	2206      	movs	r2, #6
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	4a24      	ldr	r2, [pc, #144]	; (80042bc <straight_table_ff+0x254>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8004230:	4b26      	ldr	r3, [pc, #152]	; (80042cc <straight_table_ff+0x264>)
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8004236:	f003 fba7 	bl	8007988 <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 800423a:	bf00      	nop
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <straight_table_ff+0x260>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b04      	cmp	r3, #4
 8004244:	d1fa      	bne.n	800423c <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 8004246:	edd7 7a03 	vldr	s15, [r7, #12]
 800424a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004252:	d105      	bne.n	8004260 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 8004254:	2064      	movs	r0, #100	; 0x64
 8004256:	f003 fe43 	bl	8007ee0 <wait_ms_NoReset>
		modeacc = 0;
 800425a:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <straight_table_ff+0x264>)
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004260:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <straight_table_ff+0x268>)
 8004262:	ed93 7a00 	vldr	s14, [r3]
 8004266:	edd7 7a05 	vldr	s15, [r7, #20]
 800426a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <straight_table_ff+0x268>)
 8004270:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004274:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <straight_table_ff+0x26c>)
 8004276:	ed93 7a00 	vldr	s14, [r3]
 800427a:	edd7 7a05 	vldr	s15, [r7, #20]
 800427e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <straight_table_ff+0x26c>)
 8004284:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004288:	f003 fb8c 	bl	80079a4 <pl_DriveMotor_stop>



	return straight.velocity;
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <straight_table_ff+0x254>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	ee07 3a90 	vmov	s15, r3



}
 8004294:	eeb0 0a67 	vmov.f32	s0, s15
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000534 	.word	0x20000534
 80042a4:	20000538 	.word	0x20000538
 80042a8:	2000053c 	.word	0x2000053c
 80042ac:	20000540 	.word	0x20000540
 80042b0:	20000544 	.word	0x20000544
 80042b4:	20000548 	.word	0x20000548
 80042b8:	200004d0 	.word	0x200004d0
 80042bc:	200004b8 	.word	0x200004b8
 80042c0:	200004c4 	.word	0x200004c4
 80042c4:	200007e5 	.word	0x200007e5
 80042c8:	200007e4 	.word	0x200007e4
 80042cc:	20000508 	.word	0x20000508
 80042d0:	20000200 	.word	0x20000200
 80042d4:	20000204 	.word	0x20000204

080042d8 <turning_table_ff>:



float turning_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	ed87 0a05 	vstr	s0, [r7, #20]
 80042e2:	edc7 0a04 	vstr	s1, [r7, #16]
 80042e6:	ed87 1a03 	vstr	s2, [r7, #12]
 80042ea:	edc7 1a02 	vstr	s3, [r7, #8]
 80042ee:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80042f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80042f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80042fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80042fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004302:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004306:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800430a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800430e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004316:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800431a:	edd7 7a01 	vldr	s15, [r7, #4]
 800431e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004326:	d505      	bpl.n	8004334 <turning_table_ff+0x5c>
 8004328:	edd7 7a01 	vldr	s15, [r7, #4]
 800432c:	eef1 7a67 	vneg.f32	s15, s15
 8004330:	edc7 7a01 	vstr	s15, [r7, #4]

	Ksp = 0;//3//P項の制御量直進*****************************************************
 8004334:	4b71      	ldr	r3, [pc, #452]	; (80044fc <turning_table_ff+0x224>)
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
		Ksi = 0;//5//43//I項の制御量直進*****************************************************
 800433c:	4b70      	ldr	r3, [pc, #448]	; (8004500 <turning_table_ff+0x228>)
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
		Ksd = 0;//D項の制御量直進*****************************************************
 8004344:	4b6f      	ldr	r3, [pc, #444]	; (8004504 <turning_table_ff+0x22c>)
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
		Ktp = 0;//295//P項の制御量旋回*****************************************************
 800434c:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <turning_table_ff+0x230>)
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
		Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 8004354:	4b6d      	ldr	r3, [pc, #436]	; (800450c <turning_table_ff+0x234>)
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
	//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
		Ktd = 0;
 800435c:	4b6c      	ldr	r3, [pc, #432]	; (8004510 <turning_table_ff+0x238>)
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

	Trapezoid_turning.displacement = input_displacement;
 8004364:	4a6b      	ldr	r2, [pc, #428]	; (8004514 <turning_table_ff+0x23c>)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 800436a:	4a6a      	ldr	r2, [pc, #424]	; (8004514 <turning_table_ff+0x23c>)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004370:	4a68      	ldr	r2, [pc, #416]	; (8004514 <turning_table_ff+0x23c>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004376:	4a67      	ldr	r2, [pc, #412]	; (8004514 <turning_table_ff+0x23c>)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 800437c:	4a65      	ldr	r2, [pc, #404]	; (8004514 <turning_table_ff+0x23c>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8004382:	edd7 7a02 	vldr	s15, [r7, #8]
 8004386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	db03      	blt.n	8004398 <turning_table_ff+0xc0>
 8004390:	4a61      	ldr	r2, [pc, #388]	; (8004518 <turning_table_ff+0x240>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6053      	str	r3, [r2, #4]
 8004396:	e006      	b.n	80043a6 <turning_table_ff+0xce>
	}else{turning.acceleration = -input_acceleration;}
 8004398:	edd7 7a01 	vldr	s15, [r7, #4]
 800439c:	eef1 7a67 	vneg.f32	s15, s15
 80043a0:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <turning_table_ff+0x240>)
 80043a2:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 80043a6:	4a5c      	ldr	r2, [pc, #368]	; (8004518 <turning_table_ff+0x240>)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 80043ac:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <turning_table_ff+0x240>)
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80043b4:	4b59      	ldr	r3, [pc, #356]	; (800451c <turning_table_ff+0x244>)
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80043bc:	4b57      	ldr	r3, [pc, #348]	; (800451c <turning_table_ff+0x244>)
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80043c4:	4b55      	ldr	r3, [pc, #340]	; (800451c <turning_table_ff+0x244>)
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80043cc:	4b54      	ldr	r3, [pc, #336]	; (8004520 <turning_table_ff+0x248>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80043d2:	4b54      	ldr	r3, [pc, #336]	; (8004524 <turning_table_ff+0x24c>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 80043d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e4:	dd0e      	ble.n	8004404 <turning_table_ff+0x12c>
 80043e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80043ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	dd05      	ble.n	8004404 <turning_table_ff+0x12c>
 80043f8:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <turning_table_ff+0x24c>)
 80043fa:	2205      	movs	r2, #5
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	4a46      	ldr	r2, [pc, #280]	; (8004518 <turning_table_ff+0x240>)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8004404:	edd7 7a05 	vldr	s15, [r7, #20]
 8004408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004410:	dd14      	ble.n	800443c <turning_table_ff+0x164>
 8004412:	edd7 7a05 	vldr	s15, [r7, #20]
 8004416:	eef1 7a67 	vneg.f32	s15, s15
 800441a:	ed97 7a07 	vldr	s14, [r7, #28]
 800441e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004426:	d509      	bpl.n	800443c <turning_table_ff+0x164>
 8004428:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <turning_table_ff+0x24c>)
 800442a:	2206      	movs	r2, #6
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004432:	eef1 7a67 	vneg.f32	s15, s15
 8004436:	4b38      	ldr	r3, [pc, #224]	; (8004518 <turning_table_ff+0x240>)
 8004438:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 800443c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	d514      	bpl.n	8004474 <turning_table_ff+0x19c>
 800444a:	edd7 7a05 	vldr	s15, [r7, #20]
 800444e:	eef1 7a67 	vneg.f32	s15, s15
 8004452:	ed97 7a07 	vldr	s14, [r7, #28]
 8004456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445e:	dd09      	ble.n	8004474 <turning_table_ff+0x19c>
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <turning_table_ff+0x24c>)
 8004462:	2205      	movs	r2, #5
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	edd7 7a01 	vldr	s15, [r7, #4]
 800446a:	eef1 7a67 	vneg.f32	s15, s15
 800446e:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <turning_table_ff+0x240>)
 8004470:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004474:	edd7 7a05 	vldr	s15, [r7, #20]
 8004478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004480:	d50e      	bpl.n	80044a0 <turning_table_ff+0x1c8>
 8004482:	ed97 7a07 	vldr	s14, [r7, #28]
 8004486:	edd7 7a05 	vldr	s15, [r7, #20]
 800448a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004492:	d505      	bpl.n	80044a0 <turning_table_ff+0x1c8>
 8004494:	4b23      	ldr	r3, [pc, #140]	; (8004524 <turning_table_ff+0x24c>)
 8004496:	2206      	movs	r2, #6
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <turning_table_ff+0x240>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 80044a0:	4b21      	ldr	r3, [pc, #132]	; (8004528 <turning_table_ff+0x250>)
 80044a2:	2202      	movs	r2, #2
 80044a4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80044a6:	f003 fa6f 	bl	8007988 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 80044aa:	bf00      	nop
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <turning_table_ff+0x24c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d1fa      	bne.n	80044ac <turning_table_ff+0x1d4>

	}
	if(input_end_velocity==0){//BREAK
 80044b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80044ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	d106      	bne.n	80044d2 <turning_table_ff+0x1fa>
		wait_ms_NoReset(300);
 80044c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80044c8:	f003 fd0a 	bl	8007ee0 <wait_ms_NoReset>
		modeacc = 0;
 80044cc:	4b16      	ldr	r3, [pc, #88]	; (8004528 <turning_table_ff+0x250>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <turning_table_ff+0x254>)
 80044d4:	ed93 7a00 	vldr	s14, [r3]
 80044d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e0:	4b12      	ldr	r3, [pc, #72]	; (800452c <turning_table_ff+0x254>)
 80044e2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 80044e6:	f003 fa5d 	bl	80079a4 <pl_DriveMotor_stop>

	return turning.velocity;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <turning_table_ff+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	ee07 3a90 	vmov	s15, r3
}
 80044f2:	eeb0 0a67 	vmov.f32	s0, s15
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000534 	.word	0x20000534
 8004500:	20000538 	.word	0x20000538
 8004504:	2000053c 	.word	0x2000053c
 8004508:	20000540 	.word	0x20000540
 800450c:	20000544 	.word	0x20000544
 8004510:	20000548 	.word	0x20000548
 8004514:	200004e4 	.word	0x200004e4
 8004518:	200004c4 	.word	0x200004c4
 800451c:	200004b8 	.word	0x200004b8
 8004520:	200007e5 	.word	0x200007e5
 8004524:	200007e4 	.word	0x200007e4
 8004528:	20000508 	.word	0x20000508
 800452c:	20000244 	.word	0x20000244

08004530 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6178      	str	r0, [r7, #20]
 8004538:	ed87 0a04 	vstr	s0, [r7, #16]
 800453c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	ed87 1a01 	vstr	s2, [r7, #4]
 8004546:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 800454a:	edd7 7a04 	vldr	s15, [r7, #16]
 800454e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	db7c      	blt.n	8004652 <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7fc f81d 	bl	8000598 <__aeabi_f2d>
 800455e:	a3c8      	add	r3, pc, #800	; (adr r3, 8004880 <feedforward_const_accel+0x350>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7fc f870 	bl	8000648 <__aeabi_dmul>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	4bc6      	ldr	r3, [pc, #792]	; (8004890 <feedforward_const_accel+0x360>)
 8004576:	f7fc f991 	bl	800089c <__aeabi_ddiv>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004582:	a3b5      	add	r3, pc, #724	; (adr r3, 8004858 <feedforward_const_accel+0x328>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f7fc f988 	bl	800089c <__aeabi_ddiv>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800459c:	f7fc f97e 	bl	800089c <__aeabi_ddiv>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	a3ad      	add	r3, pc, #692	; (adr r3, 8004860 <feedforward_const_accel+0x330>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fb fe95 	bl	80002dc <__adddf3>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	a3ab      	add	r3, pc, #684	; (adr r3, 8004868 <feedforward_const_accel+0x338>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fc f842 	bl	8000648 <__aeabi_dmul>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8004870 <feedforward_const_accel+0x340>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fc f963 	bl	800089c <__aeabi_ddiv>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4614      	mov	r4, r2
 80045dc:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80045de:	ed97 7a04 	vldr	s14, [r7, #16]
 80045e2:	eddf 6aac 	vldr	s13, [pc, #688]	; 8004894 <feedforward_const_accel+0x364>
 80045e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045ea:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8004898 <feedforward_const_accel+0x368>
 80045ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80045f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045fa:	ee16 0a90 	vmov	r0, s13
 80045fe:	f7fb ffcb 	bl	8000598 <__aeabi_f2d>
 8004602:	a39d      	add	r3, pc, #628	; (adr r3, 8004878 <feedforward_const_accel+0x348>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fc f81e 	bl	8000648 <__aeabi_dmul>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	a390      	add	r3, pc, #576	; (adr r3, 8004858 <feedforward_const_accel+0x328>)
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f7fc f93f 	bl	800089c <__aeabi_ddiv>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800462e:	f7fc f935 	bl	800089c <__aeabi_ddiv>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f7fb fe4f 	bl	80002dc <__adddf3>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f7fc fad7 	bl	8000bf8 <__aeabi_d2f>
 800464a:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e07b      	b.n	800474a <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7fb ffa0 	bl	8000598 <__aeabi_f2d>
 8004658:	a389      	add	r3, pc, #548	; (adr r3, 8004880 <feedforward_const_accel+0x350>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fb fff3 	bl	8000648 <__aeabi_dmul>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	4b88      	ldr	r3, [pc, #544]	; (8004890 <feedforward_const_accel+0x360>)
 8004670:	f7fc f914 	bl	800089c <__aeabi_ddiv>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800467c:	a376      	add	r3, pc, #472	; (adr r3, 8004858 <feedforward_const_accel+0x328>)
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f7fc f90b 	bl	800089c <__aeabi_ddiv>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004696:	f7fc f901 	bl	800089c <__aeabi_ddiv>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	a36f      	add	r3, pc, #444	; (adr r3, 8004860 <feedforward_const_accel+0x330>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f7fb fe16 	bl	80002d8 <__aeabi_dsub>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	a36c      	add	r3, pc, #432	; (adr r3, 8004868 <feedforward_const_accel+0x338>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f7fb ffc5 	bl	8000648 <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4610      	mov	r0, r2
 80046c4:	4619      	mov	r1, r3
 80046c6:	a36a      	add	r3, pc, #424	; (adr r3, 8004870 <feedforward_const_accel+0x340>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fc f8e6 	bl	800089c <__aeabi_ddiv>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4614      	mov	r4, r2
 80046d6:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80046d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80046dc:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8004894 <feedforward_const_accel+0x364>
 80046e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046e4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004898 <feedforward_const_accel+0x368>
 80046e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ec:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80046f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046f4:	ee16 0a90 	vmov	r0, s13
 80046f8:	f7fb ff4e 	bl	8000598 <__aeabi_f2d>
 80046fc:	a35e      	add	r3, pc, #376	; (adr r3, 8004878 <feedforward_const_accel+0x348>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb ffa1 	bl	8000648 <__aeabi_dmul>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	a352      	add	r3, pc, #328	; (adr r3, 8004858 <feedforward_const_accel+0x328>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fc f8c2 	bl	800089c <__aeabi_ddiv>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004728:	f7fc f8b8 	bl	800089c <__aeabi_ddiv>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb fdd2 	bl	80002dc <__adddf3>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	f7fc fa5a 	bl	8000bf8 <__aeabi_d2f>
 8004744:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 800474a:	edd7 7a01 	vldr	s15, [r7, #4]
 800474e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004756:	f2c0 80a1 	blt.w	800489c <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	f7fb ff1c 	bl	8000598 <__aeabi_f2d>
 8004760:	a349      	add	r3, pc, #292	; (adr r3, 8004888 <feedforward_const_accel+0x358>)
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f7fb ff6f 	bl	8000648 <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	4b46      	ldr	r3, [pc, #280]	; (8004890 <feedforward_const_accel+0x360>)
 8004778:	f7fc f890 	bl	800089c <__aeabi_ddiv>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4610      	mov	r0, r2
 8004782:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004784:	a334      	add	r3, pc, #208	; (adr r3, 8004858 <feedforward_const_accel+0x328>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fc f887 	bl	800089c <__aeabi_ddiv>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800479e:	f7fc f87d 	bl	800089c <__aeabi_ddiv>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	a32d      	add	r3, pc, #180	; (adr r3, 8004860 <feedforward_const_accel+0x330>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb fd94 	bl	80002dc <__adddf3>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	a32a      	add	r3, pc, #168	; (adr r3, 8004868 <feedforward_const_accel+0x338>)
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f7fb ff41 	bl	8000648 <__aeabi_dmul>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	a328      	add	r3, pc, #160	; (adr r3, 8004870 <feedforward_const_accel+0x340>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f7fc f862 	bl	800089c <__aeabi_ddiv>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4614      	mov	r4, r2
 80047de:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80047e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80047e4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004894 <feedforward_const_accel+0x364>
 80047e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004898 <feedforward_const_accel+0x368>
 80047f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047f4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80047f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047fc:	ee16 0a90 	vmov	r0, s13
 8004800:	f7fb feca 	bl	8000598 <__aeabi_f2d>
 8004804:	a31c      	add	r3, pc, #112	; (adr r3, 8004878 <feedforward_const_accel+0x348>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb ff1d 	bl	8000648 <__aeabi_dmul>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	a310      	add	r3, pc, #64	; (adr r3, 8004858 <feedforward_const_accel+0x328>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f7fc f83e 	bl	800089c <__aeabi_ddiv>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004830:	f7fc f834 	bl	800089c <__aeabi_ddiv>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4620      	mov	r0, r4
 800483a:	4629      	mov	r1, r5
 800483c:	f7fb fd4e 	bl	80002dc <__adddf3>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	f7fc f9d6 	bl	8000bf8 <__aeabi_d2f>
 800484c:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e09f      	b.n	8004994 <feedforward_const_accel+0x464>
 8004854:	f3af 8000 	nop.w
 8004858:	99e4ac6e 	.word	0x99e4ac6e
 800485c:	3f9a9a29 	.word	0x3f9a9a29
 8004860:	eb1c432d 	.word	0xeb1c432d
 8004864:	3f1a36e2 	.word	0x3f1a36e2
 8004868:	51eb851f 	.word	0x51eb851f
 800486c:	3ff11eb8 	.word	0x3ff11eb8
 8004870:	b7952d23 	.word	0xb7952d23
 8004874:	3f569c23 	.word	0x3f569c23
 8004878:	761b0f50 	.word	0x761b0f50
 800487c:	3f66bf29 	.word	0x3f66bf29
 8004880:	0b5ee724 	.word	0x0b5ee724
 8004884:	3ee4156f 	.word	0x3ee4156f
 8004888:	1db94e6b 	.word	0x1db94e6b
 800488c:	3eb5cf75 	.word	0x3eb5cf75
 8004890:	408f4000 	.word	0x408f4000
 8004894:	447a0000 	.word	0x447a0000
 8004898:	421c0000 	.word	0x421c0000
	} else {
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800489c:	6838      	ldr	r0, [r7, #0]
 800489e:	f7fb fe7b 	bl	8000598 <__aeabi_f2d>
 80048a2:	a34e      	add	r3, pc, #312	; (adr r3, 80049dc <feedforward_const_accel+0x4ac>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fece 	bl	8000648 <__aeabi_dmul>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	4b45      	ldr	r3, [pc, #276]	; (80049d0 <feedforward_const_accel+0x4a0>)
 80048ba:	f7fb ffef 	bl	800089c <__aeabi_ddiv>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80048c6:	a338      	add	r3, pc, #224	; (adr r3, 80049a8 <feedforward_const_accel+0x478>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb ffe6 	bl	800089c <__aeabi_ddiv>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048e0:	f7fb ffdc 	bl	800089c <__aeabi_ddiv>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	a330      	add	r3, pc, #192	; (adr r3, 80049b0 <feedforward_const_accel+0x480>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fb fcf1 	bl	80002d8 <__aeabi_dsub>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	a32e      	add	r3, pc, #184	; (adr r3, 80049b8 <feedforward_const_accel+0x488>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fea0 	bl	8000648 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	a32b      	add	r3, pc, #172	; (adr r3, 80049c0 <feedforward_const_accel+0x490>)
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f7fb ffc1 	bl	800089c <__aeabi_ddiv>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4614      	mov	r4, r2
 8004920:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004922:	ed97 7a01 	vldr	s14, [r7, #4]
 8004926:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80049d4 <feedforward_const_accel+0x4a4>
 800492a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800492e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80049d8 <feedforward_const_accel+0x4a8>
 8004932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004936:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800493a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800493e:	ee16 0a90 	vmov	r0, s13
 8004942:	f7fb fe29 	bl	8000598 <__aeabi_f2d>
 8004946:	a320      	add	r3, pc, #128	; (adr r3, 80049c8 <feedforward_const_accel+0x498>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f7fb fe7c 	bl	8000648 <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	a313      	add	r3, pc, #76	; (adr r3, 80049a8 <feedforward_const_accel+0x478>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f7fb ff9d 	bl	800089c <__aeabi_ddiv>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004972:	f7fb ff93 	bl	800089c <__aeabi_ddiv>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	f7fb fcad 	bl	80002dc <__adddf3>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	f7fc f935 	bl	8000bf8 <__aeabi_d2f>
 800498e:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	601a      	str	r2, [r3, #0]
	}
	*feedforward_straight=0;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
	//*feedforward_turning =0;

}
 800499c:	bf00      	nop
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bdb0      	pop	{r4, r5, r7, pc}
 80049a4:	f3af 8000 	nop.w
 80049a8:	99e4ac6e 	.word	0x99e4ac6e
 80049ac:	3f9a9a29 	.word	0x3f9a9a29
 80049b0:	eb1c432d 	.word	0xeb1c432d
 80049b4:	3f1a36e2 	.word	0x3f1a36e2
 80049b8:	51eb851f 	.word	0x51eb851f
 80049bc:	3ff11eb8 	.word	0x3ff11eb8
 80049c0:	b7952d23 	.word	0xb7952d23
 80049c4:	3f569c23 	.word	0x3f569c23
 80049c8:	761b0f50 	.word	0x761b0f50
 80049cc:	3f66bf29 	.word	0x3f66bf29
 80049d0:	408f4000 	.word	0x408f4000
 80049d4:	447a0000 	.word	0x447a0000
 80049d8:	421c0000 	.word	0x421c0000
 80049dc:	1db94e6b 	.word	0x1db94e6b
 80049e0:	3eb5cf75 	.word	0x3eb5cf75

080049e4 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <PID_Init+0x44>)
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <PID_Init+0x48>)
 80049ec:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <PID_Init+0x4c>)
 80049f0:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <PID_Init+0x50>)
 80049f2:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <PID_Init+0x54>)
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 80049fc:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <PID_Init+0x58>)
 80049fe:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <PID_Init+0x5c>)
 8004a00:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <PID_Init+0x60>)
 8004a04:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <PID_Init+0x64>)
 8004a06:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <PID_Init+0x68>)
 8004a0a:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <PID_Init+0x6c>)
 8004a0c:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <PID_Init+0x70>)
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <PID_Init+0x74>)
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]

}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000534 	.word	0x20000534
 8004a2c:	40466666 	.word	0x40466666
 8004a30:	20000538 	.word	0x20000538
 8004a34:	3da3d70a 	.word	0x3da3d70a
 8004a38:	2000053c 	.word	0x2000053c
 8004a3c:	20000540 	.word	0x20000540
 8004a40:	3fcccccd 	.word	0x3fcccccd
 8004a44:	20000544 	.word	0x20000544
 8004a48:	3d4ccccd 	.word	0x3d4ccccd
 8004a4c:	20000548 	.word	0x20000548
 8004a50:	3b03126f 	.word	0x3b03126f
 8004a54:	20000514 	.word	0x20000514
 8004a58:	20000524 	.word	0x20000524

08004a5c <clear_Ierror>:

void clear_Ierror(void) {
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <clear_Ierror+0x20>)
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <clear_Ierror+0x24>)
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000514 	.word	0x20000514
 8004a80:	20000524 	.word	0x20000524

08004a84 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a92:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 8004aa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aae:	d101      	bne.n	8004ab4 <EncoderGyro_PID+0x30>
		reset_speed();
 8004ab0:	f7fc fab2 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100) {
 8004ab4:	4b6e      	ldr	r3, [pc, #440]	; (8004c70 <EncoderGyro_PID+0x1ec>)
 8004ab6:	edd3 7a00 	vldr	s15, [r3]
 8004aba:	eef0 7ae7 	vabs.f32	s15, s15
 8004abe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004c74 <EncoderGyro_PID+0x1f0>
 8004ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aca:	d51c      	bpl.n	8004b06 <EncoderGyro_PID+0x82>
 8004acc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ad0:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004c78 <EncoderGyro_PID+0x1f4>
 8004ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004adc:	db13      	blt.n	8004b06 <EncoderGyro_PID+0x82>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004ade:	4b67      	ldr	r3, [pc, #412]	; (8004c7c <EncoderGyro_PID+0x1f8>)
 8004ae0:	ed93 7a00 	vldr	s14, [r3]
 8004ae4:	4b66      	ldr	r3, [pc, #408]	; (8004c80 <EncoderGyro_PID+0x1fc>)
 8004ae6:	edd3 7a00 	vldr	s15, [r3]
 8004aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004aee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004af6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afe:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b00:	edc3 7a00 	vstr	s15, [r3]
 8004b04:	e01a      	b.n	8004b3c <EncoderGyro_PID+0xb8>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004b06:	4b60      	ldr	r3, [pc, #384]	; (8004c88 <EncoderGyro_PID+0x204>)
 8004b08:	ed93 7a00 	vldr	s14, [r3]
 8004b0c:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <EncoderGyro_PID+0x208>)
 8004b0e:	edd3 7a00 	vldr	s15, [r3]
 8004b12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b26:	4b57      	ldr	r3, [pc, #348]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b28:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_speedL;
 8004b2c:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <EncoderGyro_PID+0x208>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a53      	ldr	r2, [pc, #332]	; (8004c80 <EncoderGyro_PID+0x1fc>)
 8004b32:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_speedR;
 8004b34:	4b54      	ldr	r3, [pc, #336]	; (8004c88 <EncoderGyro_PID+0x204>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a50      	ldr	r2, [pc, #320]	; (8004c7c <EncoderGyro_PID+0x1f8>)
 8004b3a:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8004b3c:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b3e:	ed93 7a00 	vldr	s14, [r3]
 8004b42:	4b50      	ldr	r3, [pc, #320]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4c:	4b4d      	ldr	r3, [pc, #308]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b4e:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8004b52:	4b4c      	ldr	r3, [pc, #304]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a4b      	ldr	r2, [pc, #300]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b58:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8004b5a:	4b4a      	ldr	r3, [pc, #296]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b60:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b62:	edd3 7a00 	vldr	s15, [r3]
 8004b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6a:	4b46      	ldr	r3, [pc, #280]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b6c:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8004b70:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b72:	ed93 7a00 	vldr	s14, [r3]
 8004b76:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <EncoderGyro_PID+0x20c>)
 8004b78:	edd3 7a00 	vldr	s15, [r3]
 8004b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b80:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b82:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b86:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <EncoderGyro_PID+0x210>)
 8004b88:	edd3 7a00 	vldr	s15, [r3]
 8004b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <EncoderGyro_PID+0x200>)
 8004b96:	edd3 6a03 	vldr	s13, [r3, #12]
 8004b9a:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <EncoderGyro_PID+0x214>)
 8004b9c:	edd3 7a00 	vldr	s15, [r3]
 8004ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba8:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <EncoderGyro_PID+0x1ec>)
 8004bae:	edd3 7a00 	vldr	s15, [r3]
 8004bb2:	ed97 7a00 	vldr	s14, [r7]
 8004bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bba:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bbc:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004bc0:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bc2:	ed93 7a00 	vldr	s14, [r3]
 8004bc6:	4b35      	ldr	r3, [pc, #212]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bd2:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004bd6:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a30      	ldr	r2, [pc, #192]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bdc:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004bde:	4b2f      	ldr	r3, [pc, #188]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004be0:	ed93 7a02 	vldr	s14, [r3, #8]
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004be6:	edd3 7a00 	vldr	s15, [r3]
 8004bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bf0:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004bf4:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004bf6:	ed93 7a00 	vldr	s14, [r3]
 8004bfa:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <EncoderGyro_PID+0x21c>)
 8004bfc:	edd3 7a00 	vldr	s15, [r3]
 8004c00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c04:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004c06:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <EncoderGyro_PID+0x220>)
 8004c0c:	edd3 7a00 	vldr	s15, [r3]
 8004c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c14:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004c18:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <EncoderGyro_PID+0x218>)
 8004c1a:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c1e:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <EncoderGyro_PID+0x224>)
 8004c20:	edd3 7a00 	vldr	s15, [r3]
 8004c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c2c:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c34:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8004cac <EncoderGyro_PID+0x228>
 8004c38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c3c:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <EncoderGyro_PID+0x22c>)
 8004c3e:	edd3 7a00 	vldr	s15, [r3]
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c50:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004cac <EncoderGyro_PID+0x228>
 8004c54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <EncoderGyro_PID+0x22c>)
 8004c5a:	edd3 7a00 	vldr	s15, [r3]
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	edc3 7a00 	vstr	s15, [r3]

}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000248 	.word	0x20000248
 8004c74:	42f00000 	.word	0x42f00000
 8004c78:	42c80000 	.word	0x42c80000
 8004c7c:	2000023c 	.word	0x2000023c
 8004c80:	20000238 	.word	0x20000238
 8004c84:	20000514 	.word	0x20000514
 8004c88:	2000020c 	.word	0x2000020c
 8004c8c:	20000208 	.word	0x20000208
 8004c90:	20000534 	.word	0x20000534
 8004c94:	20000538 	.word	0x20000538
 8004c98:	2000053c 	.word	0x2000053c
 8004c9c:	20000524 	.word	0x20000524
 8004ca0:	20000540 	.word	0x20000540
 8004ca4:	20000544 	.word	0x20000544
 8004ca8:	20000548 	.word	0x20000548
 8004cac:	44d1e000 	.word	0x44d1e000
 8004cb0:	200004b4 	.word	0x200004b4

08004cb4 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004cb8:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <init_WallControl+0x104>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <init_WallControl+0x108>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <init_WallControl+0x10c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004cca:	4b3e      	ldr	r3, [pc, #248]	; (8004dc4 <init_WallControl+0x110>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004cd0:	4b3d      	ldr	r3, [pc, #244]	; (8004dc8 <init_WallControl+0x114>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004cd6:	4b3d      	ldr	r3, [pc, #244]	; (8004dcc <init_WallControl+0x118>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004cdc:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <init_WallControl+0x11c>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004ce2:	4b3c      	ldr	r3, [pc, #240]	; (8004dd4 <init_WallControl+0x120>)
 8004ce4:	4a3c      	ldr	r2, [pc, #240]	; (8004dd8 <init_WallControl+0x124>)
 8004ce6:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004ce8:	4b3c      	ldr	r3, [pc, #240]	; (8004ddc <init_WallControl+0x128>)
 8004cea:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <init_WallControl+0x12c>)
 8004cec:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004cee:	4b3d      	ldr	r3, [pc, #244]	; (8004de4 <init_WallControl+0x130>)
 8004cf0:	4a3d      	ldr	r2, [pc, #244]	; (8004de8 <init_WallControl+0x134>)
 8004cf2:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004cf4:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <init_WallControl+0x138>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <init_WallControl+0x13c>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004d00:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <init_WallControl+0x140>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004d06:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <init_WallControl+0x144>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <init_WallControl+0x148>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <init_WallControl+0x14c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004d18:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <init_WallControl+0x150>)
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004d20:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <init_WallControl+0x154>)
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004d28:	4b38      	ldr	r3, [pc, #224]	; (8004e0c <init_WallControl+0x158>)
 8004d2a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004d2e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004d30:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <init_WallControl+0x15c>)
 8004d32:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004d36:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004d38:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <init_WallControl+0x160>)
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004d40:	4b35      	ldr	r3, [pc, #212]	; (8004e18 <init_WallControl+0x164>)
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004d48:	4b34      	ldr	r3, [pc, #208]	; (8004e1c <init_WallControl+0x168>)
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004d50:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <init_WallControl+0x16c>)
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004d58:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <init_WallControl+0x170>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004d5e:	4b32      	ldr	r3, [pc, #200]	; (8004e28 <init_WallControl+0x174>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004d64:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <init_WallControl+0x178>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004d6a:	4b31      	ldr	r3, [pc, #196]	; (8004e30 <init_WallControl+0x17c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <init_WallControl+0x180>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <init_WallControl+0x184>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <init_WallControl+0x188>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004d82:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <init_WallControl+0x18c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004d88:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <init_WallControl+0x190>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <init_WallControl+0x194>)
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004d96:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <init_WallControl+0x198>)
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004d9e:	4b2c      	ldr	r3, [pc, #176]	; (8004e50 <init_WallControl+0x19c>)
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004da6:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <init_WallControl+0x1a0>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	20000570 	.word	0x20000570
 8004dbc:	20000571 	.word	0x20000571
 8004dc0:	20000573 	.word	0x20000573
 8004dc4:	20000572 	.word	0x20000572
 8004dc8:	20000575 	.word	0x20000575
 8004dcc:	20000576 	.word	0x20000576
 8004dd0:	20000577 	.word	0x20000577
 8004dd4:	20000578 	.word	0x20000578
 8004dd8:	44c46000 	.word	0x44c46000
 8004ddc:	2000057c 	.word	0x2000057c
 8004de0:	448d4000 	.word	0x448d4000
 8004de4:	20000580 	.word	0x20000580
 8004de8:	420c0000 	.word	0x420c0000
 8004dec:	20000598 	.word	0x20000598
 8004df0:	20000594 	.word	0x20000594
 8004df4:	200005a0 	.word	0x200005a0
 8004df8:	2000059c 	.word	0x2000059c
 8004dfc:	200005a8 	.word	0x200005a8
 8004e00:	200005a4 	.word	0x200005a4
 8004e04:	200005b0 	.word	0x200005b0
 8004e08:	200005ac 	.word	0x200005ac
 8004e0c:	200005b8 	.word	0x200005b8
 8004e10:	200005b4 	.word	0x200005b4
 8004e14:	200005c0 	.word	0x200005c0
 8004e18:	200005bc 	.word	0x200005bc
 8004e1c:	200005c8 	.word	0x200005c8
 8004e20:	200005c4 	.word	0x200005c4
 8004e24:	200005cc 	.word	0x200005cc
 8004e28:	200005cd 	.word	0x200005cd
 8004e2c:	200005ce 	.word	0x200005ce
 8004e30:	200005cf 	.word	0x200005cf
 8004e34:	200005d0 	.word	0x200005d0
 8004e38:	200005d1 	.word	0x200005d1
 8004e3c:	200005d2 	.word	0x200005d2
 8004e40:	200005d3 	.word	0x200005d3
 8004e44:	200005d4 	.word	0x200005d4
 8004e48:	200005d8 	.word	0x200005d8
 8004e4c:	200005dc 	.word	0x200005dc
 8004e50:	200005e0 	.word	0x200005e0
 8004e54:	200005e4 	.word	0x200005e4

08004e58 <calWallConrol>:


float calWallConrol(void) {
 8004e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e5c:	b0aa      	sub	sp, #168	; 0xa8
 8004e5e:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004e60:	4ba1      	ldr	r3, [pc, #644]	; (80050e8 <calWallConrol+0x290>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d13d      	bne.n	8004ee4 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004e68:	4ba0      	ldr	r3, [pc, #640]	; (80050ec <calWallConrol+0x294>)
 8004e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004e6e:	4ba0      	ldr	r3, [pc, #640]	; (80050f0 <calWallConrol+0x298>)
 8004e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004e74:	4b9f      	ldr	r3, [pc, #636]	; (80050f4 <calWallConrol+0x29c>)
 8004e76:	edd3 7a00 	vldr	s15, [r3]
 8004e7a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80050f8 <calWallConrol+0x2a0>
 8004e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e86:	dd06      	ble.n	8004e96 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004e88:	4b9c      	ldr	r3, [pc, #624]	; (80050fc <calWallConrol+0x2a4>)
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004e8e:	4b9c      	ldr	r3, [pc, #624]	; (8005100 <calWallConrol+0x2a8>)
 8004e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e94:	e052      	b.n	8004f3c <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004e96:	4b97      	ldr	r3, [pc, #604]	; (80050f4 <calWallConrol+0x29c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb fb7c 	bl	8000598 <__aeabi_f2d>
 8004ea0:	a389      	add	r3, pc, #548	; (adr r3, 80050c8 <calWallConrol+0x270>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb fbcf 	bl	8000648 <__aeabi_dmul>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f7fb fea1 	bl	8000bf8 <__aeabi_d2f>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004ebc:	4b8d      	ldr	r3, [pc, #564]	; (80050f4 <calWallConrol+0x29c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb fb69 	bl	8000598 <__aeabi_f2d>
 8004ec6:	a382      	add	r3, pc, #520	; (adr r3, 80050d0 <calWallConrol+0x278>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f7fb fbbc 	bl	8000648 <__aeabi_dmul>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f7fb fe8e 	bl	8000bf8 <__aeabi_d2f>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ee2:	e02b      	b.n	8004f3c <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004ee4:	4b87      	ldr	r3, [pc, #540]	; (8005104 <calWallConrol+0x2ac>)
 8004ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004eea:	4b87      	ldr	r3, [pc, #540]	; (8005108 <calWallConrol+0x2b0>)
 8004eec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004ef0:	4b80      	ldr	r3, [pc, #512]	; (80050f4 <calWallConrol+0x29c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fb fb4f 	bl	8000598 <__aeabi_f2d>
 8004efa:	a377      	add	r3, pc, #476	; (adr r3, 80050d8 <calWallConrol+0x280>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb fba2 	bl	8000648 <__aeabi_dmul>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f7fb fe74 	bl	8000bf8 <__aeabi_d2f>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004f16:	4b77      	ldr	r3, [pc, #476]	; (80050f4 <calWallConrol+0x29c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fb fb3c 	bl	8000598 <__aeabi_f2d>
 8004f20:	a36f      	add	r3, pc, #444	; (adr r3, 80050e0 <calWallConrol+0x288>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb fb8f 	bl	8000648 <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	f7fb fe61 	bl	8000bf8 <__aeabi_d2f>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004f3c:	4b73      	ldr	r3, [pc, #460]	; (800510c <calWallConrol+0x2b4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004f44:	da03      	bge.n	8004f4e <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MIN;
 8004f46:	4b72      	ldr	r3, [pc, #456]	; (8005110 <calWallConrol+0x2b8>)
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f4c:	e011      	b.n	8004f72 <calWallConrol+0x11a>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004f4e:	4b6f      	ldr	r3, [pc, #444]	; (800510c <calWallConrol+0x2b4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004f56:	4293      	cmp	r3, r2
 8004f58:	dd03      	ble.n	8004f62 <calWallConrol+0x10a>
		sensorWall_L = SENSOR_L_MAX;
 8004f5a:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <calWallConrol+0x2bc>)
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f60:	e007      	b.n	8004f72 <calWallConrol+0x11a>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004f62:	4b6a      	ldr	r3, [pc, #424]	; (800510c <calWallConrol+0x2b4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f6e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004f72:	4b66      	ldr	r3, [pc, #408]	; (800510c <calWallConrol+0x2b4>)
 8004f74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f78:	f240 2289 	movw	r2, #649	; 0x289
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	dc03      	bgt.n	8004f88 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004f80:	4b65      	ldr	r3, [pc, #404]	; (8005118 <calWallConrol+0x2c0>)
 8004f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f86:	e012      	b.n	8004fae <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004f88:	4b60      	ldr	r3, [pc, #384]	; (800510c <calWallConrol+0x2b4>)
 8004f8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f8e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004f92:	dd03      	ble.n	8004f9c <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004f94:	4b61      	ldr	r3, [pc, #388]	; (800511c <calWallConrol+0x2c4>)
 8004f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f9a:	e008      	b.n	8004fae <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004f9c:	4b5b      	ldr	r3, [pc, #364]	; (800510c <calWallConrol+0x2b4>)
 8004f9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004faa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004fbc:	4b58      	ldr	r3, [pc, #352]	; (8005120 <calWallConrol+0x2c8>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11c      	bne.n	8004ffe <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <calWallConrol+0x2cc>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004fca:	4b57      	ldr	r3, [pc, #348]	; (8005128 <calWallConrol+0x2d0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004fd0:	4b56      	ldr	r3, [pc, #344]	; (800512c <calWallConrol+0x2d4>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004fd6:	4b56      	ldr	r3, [pc, #344]	; (8005130 <calWallConrol+0x2d8>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004fdc:	4b55      	ldr	r3, [pc, #340]	; (8005134 <calWallConrol+0x2dc>)
 8004fde:	4a56      	ldr	r2, [pc, #344]	; (8005138 <calWallConrol+0x2e0>)
 8004fe0:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004fe2:	4b56      	ldr	r3, [pc, #344]	; (800513c <calWallConrol+0x2e4>)
 8004fe4:	4a56      	ldr	r2, [pc, #344]	; (8005140 <calWallConrol+0x2e8>)
 8004fe6:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004fe8:	4b56      	ldr	r3, [pc, #344]	; (8005144 <calWallConrol+0x2ec>)
 8004fea:	4a57      	ldr	r2, [pc, #348]	; (8005148 <calWallConrol+0x2f0>)
 8004fec:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004ff6:	f002 f89f 	bl	8007138 <pl_yellow_LED_off>
 8004ffa:	f001 ba4a 	b.w	8006492 <calWallConrol+0x163a>

	} else if (g_WallControl_mode == 1) {
 8004ffe:	4b48      	ldr	r3, [pc, #288]	; (8005120 <calWallConrol+0x2c8>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	f040 82ed 	bne.w	80055e2 <calWallConrol+0x78a>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8005008:	4b46      	ldr	r3, [pc, #280]	; (8005124 <calWallConrol+0x2cc>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 809d 	beq.w	8005150 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8005016:	4b3d      	ldr	r3, [pc, #244]	; (800510c <calWallConrol+0x2b4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800501e:	db16      	blt.n	800504e <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8005020:	4b4a      	ldr	r3, [pc, #296]	; (800514c <calWallConrol+0x2f4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb faa5 	bl	8000574 <__aeabi_i2d>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4690      	mov	r8, r2
 8005030:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005034:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005038:	f7fb faae 	bl	8000598 <__aeabi_f2d>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb fd90 	bl	8000b68 <__aeabi_dcmpgt>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d037      	beq.n	80050be <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 800504e:	4b35      	ldr	r3, [pc, #212]	; (8005124 <calWallConrol+0x2cc>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	3b01      	subs	r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	4b33      	ldr	r3, [pc, #204]	; (8005124 <calWallConrol+0x2cc>)
 8005058:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 800505a:	4b36      	ldr	r3, [pc, #216]	; (8005134 <calWallConrol+0x2dc>)
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005062:	2300      	movs	r3, #0
 8005064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005068:	e021      	b.n	80050ae <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <calWallConrol+0x2b4>)
 800506c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	ee07 3a90 	vmov	s15, r3
 8005078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <calWallConrol+0x2dc>)
 800507e:	edd3 7a00 	vldr	s15, [r3]
 8005082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508a:	dd0b      	ble.n	80050a4 <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 800508c:	4a1f      	ldr	r2, [pc, #124]	; (800510c <calWallConrol+0x2b4>)
 800508e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509e:	4b25      	ldr	r3, [pc, #148]	; (8005134 <calWallConrol+0x2dc>)
 80050a0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80050a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050a8:	3301      	adds	r3, #1
 80050aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050b2:	2b13      	cmp	r3, #19
 80050b4:	ddd9      	ble.n	800506a <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 80050b6:	4b23      	ldr	r3, [pc, #140]	; (8005144 <calWallConrol+0x2ec>)
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 80050be:	4b1b      	ldr	r3, [pc, #108]	; (800512c <calWallConrol+0x2d4>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e066      	b.n	8005194 <calWallConrol+0x33c>
 80050c6:	bf00      	nop
 80050c8:	33333333 	.word	0x33333333
 80050cc:	3fe33333 	.word	0x3fe33333
 80050d0:	9999999a 	.word	0x9999999a
 80050d4:	bfa99999 	.word	0xbfa99999
 80050d8:	9999999a 	.word	0x9999999a
 80050dc:	3fe99999 	.word	0x3fe99999
 80050e0:	47ae147b 	.word	0x47ae147b
 80050e4:	3f847ae1 	.word	0x3f847ae1
 80050e8:	200007e8 	.word	0x200007e8
 80050ec:	43340000 	.word	0x43340000
 80050f0:	43020000 	.word	0x43020000
 80050f4:	200004b8 	.word	0x200004b8
 80050f8:	44fa0000 	.word	0x44fa0000
 80050fc:	44960000 	.word	0x44960000
 8005100:	c2c80000 	.word	0xc2c80000
 8005104:	431d0000 	.word	0x431d0000
 8005108:	42dc0000 	.word	0x42dc0000
 800510c:	20000298 	.word	0x20000298
 8005110:	44390000 	.word	0x44390000
 8005114:	450fc000 	.word	0x450fc000
 8005118:	44228000 	.word	0x44228000
 800511c:	44e10000 	.word	0x44e10000
 8005120:	20000570 	.word	0x20000570
 8005124:	20000573 	.word	0x20000573
 8005128:	20000575 	.word	0x20000575
 800512c:	20000576 	.word	0x20000576
 8005130:	20000577 	.word	0x20000577
 8005134:	20000578 	.word	0x20000578
 8005138:	44c46000 	.word	0x44c46000
 800513c:	2000057c 	.word	0x2000057c
 8005140:	448d4000 	.word	0x448d4000
 8005144:	20000580 	.word	0x20000580
 8005148:	420c0000 	.word	0x420c0000
 800514c:	20000428 	.word	0x20000428
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8005150:	4bbd      	ldr	r3, [pc, #756]	; (8005448 <calWallConrol+0x5f0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005158:	dd1c      	ble.n	8005194 <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 800515a:	4bbc      	ldr	r3, [pc, #752]	; (800544c <calWallConrol+0x5f4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb fa08 	bl	8000574 <__aeabi_i2d>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4614      	mov	r4, r2
 800516a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800516e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005172:	f7fb fa11 	bl	8000598 <__aeabi_f2d>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f7fb fcd5 	bl	8000b2c <__aeabi_dcmplt>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005188:	4bb1      	ldr	r3, [pc, #708]	; (8005450 <calWallConrol+0x5f8>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	4baf      	ldr	r3, [pc, #700]	; (8005450 <calWallConrol+0x5f8>)
 8005192:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8005194:	4bae      	ldr	r3, [pc, #696]	; (8005450 <calWallConrol+0x5f8>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05b      	beq.n	800525c <calWallConrol+0x404>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 80051a4:	4ba8      	ldr	r3, [pc, #672]	; (8005448 <calWallConrol+0x5f0>)
 80051a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80051aa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80051ae:	db17      	blt.n	80051e0 <calWallConrol+0x388>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80051b0:	4ba6      	ldr	r3, [pc, #664]	; (800544c <calWallConrol+0x5f4>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb f9dd 	bl	8000574 <__aeabi_i2d>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	613a      	str	r2, [r7, #16]
 80051c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051c4:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 80051c6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80051ca:	f7fb f9e5 	bl	8000598 <__aeabi_f2d>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80051d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051d6:	f7fb fcc7 	bl	8000b68 <__aeabi_dcmpgt>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d039      	beq.n	8005254 <calWallConrol+0x3fc>
				g_WallControlStatus = g_WallControlStatus - 2;
 80051e0:	4b9b      	ldr	r3, [pc, #620]	; (8005450 <calWallConrol+0x5f8>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	3b02      	subs	r3, #2
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	4b99      	ldr	r3, [pc, #612]	; (8005450 <calWallConrol+0x5f8>)
 80051ea:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 80051ec:	4b99      	ldr	r3, [pc, #612]	; (8005454 <calWallConrol+0x5fc>)
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051fa:	e023      	b.n	8005244 <calWallConrol+0x3ec>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 80051fc:	4a92      	ldr	r2, [pc, #584]	; (8005448 <calWallConrol+0x5f0>)
 80051fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005202:	3350      	adds	r3, #80	; 0x50
 8005204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005210:	4b90      	ldr	r3, [pc, #576]	; (8005454 <calWallConrol+0x5fc>)
 8005212:	edd3 7a00 	vldr	s15, [r3]
 8005216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	dd0c      	ble.n	800523a <calWallConrol+0x3e2>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8005220:	4a89      	ldr	r2, [pc, #548]	; (8005448 <calWallConrol+0x5f0>)
 8005222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005226:	3350      	adds	r3, #80	; 0x50
 8005228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005234:	4b87      	ldr	r3, [pc, #540]	; (8005454 <calWallConrol+0x5fc>)
 8005236:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800523a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800523e:	3301      	adds	r3, #1
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005248:	2b13      	cmp	r3, #19
 800524a:	ddd7      	ble.n	80051fc <calWallConrol+0x3a4>
					}
				}
				g_skewer_displacement = 0;
 800524c:	4b82      	ldr	r3, [pc, #520]	; (8005458 <calWallConrol+0x600>)
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8005254:	4b81      	ldr	r3, [pc, #516]	; (800545c <calWallConrol+0x604>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e023      	b.n	80052a4 <calWallConrol+0x44c>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 800525c:	4b7a      	ldr	r3, [pc, #488]	; (8005448 <calWallConrol+0x5f0>)
 800525e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005262:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005266:	dd1d      	ble.n	80052a4 <calWallConrol+0x44c>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005268:	4b78      	ldr	r3, [pc, #480]	; (800544c <calWallConrol+0x5f4>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fb f981 	bl	8000574 <__aeabi_i2d>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	60ba      	str	r2, [r7, #8]
 8005278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800527c:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 800527e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005282:	f7fb f989 	bl	8000598 <__aeabi_f2d>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 800528a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800528e:	f7fb fc4d 	bl	8000b2c <__aeabi_dcmplt>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <calWallConrol+0x44c>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8005298:	4b6d      	ldr	r3, [pc, #436]	; (8005450 <calWallConrol+0x5f8>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3302      	adds	r3, #2
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	4b6b      	ldr	r3, [pc, #428]	; (8005450 <calWallConrol+0x5f8>)
 80052a2:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 80052a4:	4b6a      	ldr	r3, [pc, #424]	; (8005450 <calWallConrol+0x5f8>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	f201 80f2 	bhi.w	8006492 <calWallConrol+0x163a>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <calWallConrol+0x45c>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080053cb 	.word	0x080053cb
 80052bc:	08005479 	.word	0x08005479
 80052c0:	080054e3 	.word	0x080054e3
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 80052c4:	4b64      	ldr	r3, [pc, #400]	; (8005458 <calWallConrol+0x600>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f965 	bl	8000598 <__aeabi_f2d>
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	4b63      	ldr	r3, [pc, #396]	; (8005460 <calWallConrol+0x608>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb f95e 	bl	8000598 <__aeabi_f2d>
 80052dc:	a356      	add	r3, pc, #344	; (adr r3, 8005438 <calWallConrol+0x5e0>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb f9b1 	bl	8000648 <__aeabi_dmul>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4620      	mov	r0, r4
 80052ec:	4629      	mov	r1, r5
 80052ee:	f7fa fff5 	bl	80002dc <__adddf3>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	f7fb fc7d 	bl	8000bf8 <__aeabi_d2f>
 80052fe:	4603      	mov	r3, r0
 8005300:	4a55      	ldr	r2, [pc, #340]	; (8005458 <calWallConrol+0x600>)
 8005302:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005304:	4b54      	ldr	r3, [pc, #336]	; (8005458 <calWallConrol+0x600>)
 8005306:	edd3 7a00 	vldr	s15, [r3]
 800530a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005464 <calWallConrol+0x60c>
 800530e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005316:	d52e      	bpl.n	8005376 <calWallConrol+0x51e>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005318:	4b53      	ldr	r3, [pc, #332]	; (8005468 <calWallConrol+0x610>)
 800531a:	edd3 7a00 	vldr	s15, [r3]
 800531e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800546c <calWallConrol+0x614>
 8005322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005326:	eef1 6a67 	vneg.f32	s13, s15
 800532a:	4b4f      	ldr	r3, [pc, #316]	; (8005468 <calWallConrol+0x610>)
 800532c:	edd3 7a00 	vldr	s15, [r3]
 8005330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8005334:	4b47      	ldr	r3, [pc, #284]	; (8005454 <calWallConrol+0x5fc>)
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005474 <calWallConrol+0x61c>
 800533e:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8005342:	4b44      	ldr	r3, [pc, #272]	; (8005454 <calWallConrol+0x5fc>)
 8005344:	edd3 6a00 	vldr	s13, [r3]
 8005348:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800534c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005350:	ee17 0a90 	vmov	r0, s15
 8005354:	f7fb f920 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005358:	a339      	add	r3, pc, #228	; (adr r3, 8005440 <calWallConrol+0x5e8>)
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f7fb f973 	bl	8000648 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	f7fb fc45 	bl	8000bf8 <__aeabi_d2f>
 800536e:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005370:	4a3f      	ldr	r2, [pc, #252]	; (8005470 <calWallConrol+0x618>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e003      	b.n	800537e <calWallConrol+0x526>
			} else {
				wall_normal.error = 0;
 8005376:	4b3e      	ldr	r3, [pc, #248]	; (8005470 <calWallConrol+0x618>)
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800537e:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <calWallConrol+0x618>)
 8005380:	ed93 7a00 	vldr	s14, [r3]
 8005384:	4b3a      	ldr	r3, [pc, #232]	; (8005470 <calWallConrol+0x618>)
 8005386:	edd3 7a01 	vldr	s15, [r3, #4]
 800538a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538e:	4b38      	ldr	r3, [pc, #224]	; (8005470 <calWallConrol+0x618>)
 8005390:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005394:	4b36      	ldr	r3, [pc, #216]	; (8005470 <calWallConrol+0x618>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a35      	ldr	r2, [pc, #212]	; (8005470 <calWallConrol+0x618>)
 800539a:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800539c:	4b34      	ldr	r3, [pc, #208]	; (8005470 <calWallConrol+0x618>)
 800539e:	ed93 7a00 	vldr	s14, [r3]
 80053a2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053a6:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80053aa:	4b31      	ldr	r3, [pc, #196]	; (8005470 <calWallConrol+0x618>)
 80053ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80053b0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80053b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80053b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053bc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 80053c0:	2000      	movs	r0, #0
 80053c2:	f001 ff2d 	bl	8007220 <pl_yellow_LED_count>
			break;
 80053c6:	f001 b864 	b.w	8006492 <calWallConrol+0x163a>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80053ca:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80053ce:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800546c <calWallConrol+0x614>
 80053d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053d6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80053da:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 80053de:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80053e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80053e6:	4b22      	ldr	r3, [pc, #136]	; (8005470 <calWallConrol+0x618>)
 80053e8:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <calWallConrol+0x618>)
 80053ee:	ed93 7a00 	vldr	s14, [r3]
 80053f2:	4b1f      	ldr	r3, [pc, #124]	; (8005470 <calWallConrol+0x618>)
 80053f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80053f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053fc:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <calWallConrol+0x618>)
 80053fe:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005402:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <calWallConrol+0x618>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <calWallConrol+0x618>)
 8005408:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800540a:	4b19      	ldr	r3, [pc, #100]	; (8005470 <calWallConrol+0x618>)
 800540c:	ed93 7a00 	vldr	s14, [r3]
 8005410:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005414:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <calWallConrol+0x618>)
 800541a:	edd3 6a02 	vldr	s13, [r3, #8]
 800541e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005422:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800542a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(240);
 800542e:	20f0      	movs	r0, #240	; 0xf0
 8005430:	f001 fef6 	bl	8007220 <pl_yellow_LED_count>
			break;
 8005434:	f001 b82d 	b.w	8006492 <calWallConrol+0x163a>
 8005438:	d2f1a9fc 	.word	0xd2f1a9fc
 800543c:	3f50624d 	.word	0x3f50624d
 8005440:	66666666 	.word	0x66666666
 8005444:	3fe66666 	.word	0x3fe66666
 8005448:	20000298 	.word	0x20000298
 800544c:	20000428 	.word	0x20000428
 8005450:	20000573 	.word	0x20000573
 8005454:	2000057c 	.word	0x2000057c
 8005458:	20000580 	.word	0x20000580
 800545c:	20000577 	.word	0x20000577
 8005460:	200004b8 	.word	0x200004b8
 8005464:	420c0000 	.word	0x420c0000
 8005468:	20000578 	.word	0x20000578
 800546c:	44c46000 	.word	0x44c46000
 8005470:	2000054c 	.word	0x2000054c
 8005474:	448d4000 	.word	0x448d4000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005478:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800547c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005474 <calWallConrol+0x61c>
 8005480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005484:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005488:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005490:	4ba9      	ldr	r3, [pc, #676]	; (8005738 <calWallConrol+0x8e0>)
 8005492:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005496:	4ba8      	ldr	r3, [pc, #672]	; (8005738 <calWallConrol+0x8e0>)
 8005498:	ed93 7a00 	vldr	s14, [r3]
 800549c:	4ba6      	ldr	r3, [pc, #664]	; (8005738 <calWallConrol+0x8e0>)
 800549e:	edd3 7a01 	vldr	s15, [r3, #4]
 80054a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054a6:	4ba4      	ldr	r3, [pc, #656]	; (8005738 <calWallConrol+0x8e0>)
 80054a8:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80054ac:	4ba2      	ldr	r3, [pc, #648]	; (8005738 <calWallConrol+0x8e0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4aa1      	ldr	r2, [pc, #644]	; (8005738 <calWallConrol+0x8e0>)
 80054b2:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80054b4:	4ba0      	ldr	r3, [pc, #640]	; (8005738 <calWallConrol+0x8e0>)
 80054b6:	ed93 7a00 	vldr	s14, [r3]
 80054ba:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054be:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80054c2:	4b9d      	ldr	r3, [pc, #628]	; (8005738 <calWallConrol+0x8e0>)
 80054c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80054c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80054d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(15);
 80054d8:	200f      	movs	r0, #15
 80054da:	f001 fea1 	bl	8007220 <pl_yellow_LED_count>
			break;
 80054de:	f000 bfd8 	b.w	8006492 <calWallConrol+0x163a>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 80054e2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80054e6:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800573c <calWallConrol+0x8e4>
 80054ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054ee:	eef1 6a67 	vneg.f32	s13, s15
 80054f2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80054f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 80054fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80054fe:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005740 <calWallConrol+0x8e8>
 8005502:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8005506:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800550a:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 800550e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005512:	4b89      	ldr	r3, [pc, #548]	; (8005738 <calWallConrol+0x8e0>)
 8005514:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005518:	4b87      	ldr	r3, [pc, #540]	; (8005738 <calWallConrol+0x8e0>)
 800551a:	ed93 7a00 	vldr	s14, [r3]
 800551e:	4b86      	ldr	r3, [pc, #536]	; (8005738 <calWallConrol+0x8e0>)
 8005520:	edd3 7a01 	vldr	s15, [r3, #4]
 8005524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005528:	4b83      	ldr	r3, [pc, #524]	; (8005738 <calWallConrol+0x8e0>)
 800552a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800552e:	4b82      	ldr	r3, [pc, #520]	; (8005738 <calWallConrol+0x8e0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a81      	ldr	r2, [pc, #516]	; (8005738 <calWallConrol+0x8e0>)
 8005534:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005536:	4b80      	ldr	r3, [pc, #512]	; (8005738 <calWallConrol+0x8e0>)
 8005538:	ed93 7a00 	vldr	s14, [r3]
 800553c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005540:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005544:	4b7c      	ldr	r3, [pc, #496]	; (8005738 <calWallConrol+0x8e0>)
 8005546:	edd3 6a02 	vldr	s13, [r3, #8]
 800554a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800554e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005556:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(255);
 800555a:	20ff      	movs	r0, #255	; 0xff
 800555c:	f001 fe60 	bl	8007220 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005560:	4b78      	ldr	r3, [pc, #480]	; (8005744 <calWallConrol+0x8ec>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f7fb f805 	bl	8000574 <__aeabi_i2d>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	603a      	str	r2, [r7, #0]
 8005570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	4b73      	ldr	r3, [pc, #460]	; (8005748 <calWallConrol+0x8f0>)
 800557c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005580:	f7fb fad4 	bl	8000b2c <__aeabi_dcmplt>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01a      	beq.n	80055c0 <calWallConrol+0x768>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 800558a:	4b6e      	ldr	r3, [pc, #440]	; (8005744 <calWallConrol+0x8ec>)
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fa fff0 	bl	8000574 <__aeabi_i2d>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4692      	mov	sl, r2
 800559a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	4b69      	ldr	r3, [pc, #420]	; (8005748 <calWallConrol+0x8f0>)
 80055a4:	4650      	mov	r0, sl
 80055a6:	4659      	mov	r1, fp
 80055a8:	f7fb fac0 	bl	8000b2c <__aeabi_dcmplt>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d006      	beq.n	80055c0 <calWallConrol+0x768>
				StabilityCount_reset++;
 80055b2:	4b66      	ldr	r3, [pc, #408]	; (800574c <calWallConrol+0x8f4>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b64      	ldr	r3, [pc, #400]	; (800574c <calWallConrol+0x8f4>)
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e002      	b.n	80055c6 <calWallConrol+0x76e>
			} else {
				StabilityCount_reset = 0;
 80055c0:	4b62      	ldr	r3, [pc, #392]	; (800574c <calWallConrol+0x8f4>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 80055c6:	4b61      	ldr	r3, [pc, #388]	; (800574c <calWallConrol+0x8f4>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b18      	cmp	r3, #24
 80055cc:	f240 8760 	bls.w	8006490 <calWallConrol+0x1638>
				Gyro.sigma_error = 0;
 80055d0:	4b5f      	ldr	r3, [pc, #380]	; (8005750 <calWallConrol+0x8f8>)
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 80055d8:	4b5c      	ldr	r3, [pc, #368]	; (800574c <calWallConrol+0x8f4>)
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80055de:	f000 bf57 	b.w	8006490 <calWallConrol+0x1638>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 80055e2:	4b5c      	ldr	r3, [pc, #368]	; (8005754 <calWallConrol+0x8fc>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	f000 8753 	beq.w	8006492 <calWallConrol+0x163a>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 80055ec:	4b59      	ldr	r3, [pc, #356]	; (8005754 <calWallConrol+0x8fc>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	f040 874e 	bne.w	8006492 <calWallConrol+0x163a>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 80055f6:	4b58      	ldr	r3, [pc, #352]	; (8005758 <calWallConrol+0x900>)
 80055f8:	edd3 7a00 	vldr	s15, [r3]
 80055fc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800575c <calWallConrol+0x904>
 8005600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	dd05      	ble.n	8005616 <calWallConrol+0x7be>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 800560a:	4b55      	ldr	r3, [pc, #340]	; (8005760 <calWallConrol+0x908>)
 800560c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 8005610:	4b54      	ldr	r3, [pc, #336]	; (8005764 <calWallConrol+0x90c>)
 8005612:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005614:	e024      	b.n	8005660 <calWallConrol+0x808>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 8005616:	4b50      	ldr	r3, [pc, #320]	; (8005758 <calWallConrol+0x900>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ffbc 	bl	8000598 <__aeabi_f2d>
 8005620:	a341      	add	r3, pc, #260	; (adr r3, 8005728 <calWallConrol+0x8d0>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fb f80f 	bl	8000648 <__aeabi_dmul>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4610      	mov	r0, r2
 8005630:	4619      	mov	r1, r3
 8005632:	f7fb fae1 	bl	8000bf8 <__aeabi_d2f>
 8005636:	4603      	mov	r3, r0
 8005638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 800563c:	4b46      	ldr	r3, [pc, #280]	; (8005758 <calWallConrol+0x900>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fa ffa9 	bl	8000598 <__aeabi_f2d>
 8005646:	a33a      	add	r3, pc, #232	; (adr r3, 8005730 <calWallConrol+0x8d8>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f7fa fffc 	bl	8000648 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	f7fb face 	bl	8000bf8 <__aeabi_d2f>
 800565c:	4603      	mov	r3, r0
 800565e:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005660:	4b41      	ldr	r3, [pc, #260]	; (8005768 <calWallConrol+0x910>)
 8005662:	edd3 7a00 	vldr	s15, [r3]
 8005666:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800566a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800566e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005672:	dd12      	ble.n	800569a <calWallConrol+0x842>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005674:	4b3c      	ldr	r3, [pc, #240]	; (8005768 <calWallConrol+0x910>)
 8005676:	edd3 7a00 	vldr	s15, [r3]
 800567a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800567e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005686:	d808      	bhi.n	800569a <calWallConrol+0x842>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005688:	4b38      	ldr	r3, [pc, #224]	; (800576c <calWallConrol+0x914>)
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 800568c:	4b38      	ldr	r3, [pc, #224]	; (8005770 <calWallConrol+0x918>)
 800568e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005690:	4b38      	ldr	r3, [pc, #224]	; (8005774 <calWallConrol+0x91c>)
 8005692:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005694:	4b38      	ldr	r3, [pc, #224]	; (8005778 <calWallConrol+0x920>)
 8005696:	657b      	str	r3, [r7, #84]	; 0x54
 8005698:	e0a5      	b.n	80057e6 <calWallConrol+0x98e>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 800569a:	4b33      	ldr	r3, [pc, #204]	; (8005768 <calWallConrol+0x910>)
 800569c:	edd3 7a00 	vldr	s15, [r3]
 80056a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800577c <calWallConrol+0x924>
 80056a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ac:	dd12      	ble.n	80056d4 <calWallConrol+0x87c>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 80056ae:	4b2e      	ldr	r3, [pc, #184]	; (8005768 <calWallConrol+0x910>)
 80056b0:	edd3 7a00 	vldr	s15, [r3]
 80056b4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005780 <calWallConrol+0x928>
 80056b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c0:	d808      	bhi.n	80056d4 <calWallConrol+0x87c>
			coefficientR[0] = COEFFICIENT_R1_0;
 80056c2:	4b30      	ldr	r3, [pc, #192]	; (8005784 <calWallConrol+0x92c>)
 80056c4:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 80056c6:	4b30      	ldr	r3, [pc, #192]	; (8005788 <calWallConrol+0x930>)
 80056c8:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 80056ca:	4b30      	ldr	r3, [pc, #192]	; (800578c <calWallConrol+0x934>)
 80056cc:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 80056ce:	4b30      	ldr	r3, [pc, #192]	; (8005790 <calWallConrol+0x938>)
 80056d0:	657b      	str	r3, [r7, #84]	; 0x54
 80056d2:	e088      	b.n	80057e6 <calWallConrol+0x98e>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 80056d4:	4b24      	ldr	r3, [pc, #144]	; (8005768 <calWallConrol+0x910>)
 80056d6:	edd3 7a00 	vldr	s15, [r3]
 80056da:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005794 <calWallConrol+0x93c>
 80056de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e6:	dd12      	ble.n	800570e <calWallConrol+0x8b6>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 80056e8:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <calWallConrol+0x910>)
 80056ea:	edd3 7a00 	vldr	s15, [r3]
 80056ee:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005798 <calWallConrol+0x940>
 80056f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fa:	d808      	bhi.n	800570e <calWallConrol+0x8b6>
			coefficientR[0] = COEFFICIENT_R2_0;
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <calWallConrol+0x944>)
 80056fe:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <calWallConrol+0x948>)
 8005702:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005704:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <calWallConrol+0x94c>)
 8005706:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005708:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <calWallConrol+0x950>)
 800570a:	657b      	str	r3, [r7, #84]	; 0x54
 800570c:	e06b      	b.n	80057e6 <calWallConrol+0x98e>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 800570e:	4b27      	ldr	r3, [pc, #156]	; (80057ac <calWallConrol+0x954>)
 8005710:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005714:	2b5a      	cmp	r3, #90	; 0x5a
 8005716:	dd4d      	ble.n	80057b4 <calWallConrol+0x95c>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <calWallConrol+0x958>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f043 0302 	orr.w	r3, r3, #2
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <calWallConrol+0x958>)
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e04c      	b.n	80057c2 <calWallConrol+0x96a>
 8005728:	66666666 	.word	0x66666666
 800572c:	3fee6666 	.word	0x3fee6666
 8005730:	47ae147b 	.word	0x47ae147b
 8005734:	bfb47ae1 	.word	0xbfb47ae1
 8005738:	2000054c 	.word	0x2000054c
 800573c:	44c46000 	.word	0x44c46000
 8005740:	448d4000 	.word	0x448d4000
 8005744:	20000428 	.word	0x20000428
 8005748:	403e0000 	.word	0x403e0000
 800574c:	20000575 	.word	0x20000575
 8005750:	20000524 	.word	0x20000524
 8005754:	20000570 	.word	0x20000570
 8005758:	200004b8 	.word	0x200004b8
 800575c:	44fa0000 	.word	0x44fa0000
 8005760:	44ed8000 	.word	0x44ed8000
 8005764:	c3200000 	.word	0xc3200000
 8005768:	200005bc 	.word	0x200005bc
 800576c:	44129ffe 	.word	0x44129ffe
 8005770:	40a2c583 	.word	0x40a2c583
 8005774:	3efbe9c3 	.word	0x3efbe9c3
 8005778:	bbad03da 	.word	0xbbad03da
 800577c:	428c0000 	.word	0x428c0000
 8005780:	42f00000 	.word	0x42f00000
 8005784:	45738e20 	.word	0x45738e20
 8005788:	c2ab5142 	.word	0xc2ab5142
 800578c:	3f2f9723 	.word	0x3f2f9723
 8005790:	bafa0014 	.word	0xbafa0014
 8005794:	43480000 	.word	0x43480000
 8005798:	43700000 	.word	0x43700000
 800579c:	c5bb25b2 	.word	0xc5bb25b2
 80057a0:	42b29538 	.word	0x42b29538
 80057a4:	bee0db0f 	.word	0xbee0db0f
 80057a8:	3a42c5e3 	.word	0x3a42c5e3
 80057ac:	20000298 	.word	0x20000298
 80057b0:	20000573 	.word	0x20000573
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80057b4:	4b79      	ldr	r3, [pc, #484]	; (800599c <calWallConrol+0xb44>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	f023 0302 	bic.w	r3, r3, #2
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4b77      	ldr	r3, [pc, #476]	; (800599c <calWallConrol+0xb44>)
 80057c0:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 80057c2:	4b77      	ldr	r3, [pc, #476]	; (80059a0 <calWallConrol+0xb48>)
 80057c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 80057e6:	4b6f      	ldr	r3, [pc, #444]	; (80059a4 <calWallConrol+0xb4c>)
 80057e8:	edd3 7a00 	vldr	s15, [r3]
 80057ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80057f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f8:	dd12      	ble.n	8005820 <calWallConrol+0x9c8>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80057fa:	4b6a      	ldr	r3, [pc, #424]	; (80059a4 <calWallConrol+0xb4c>)
 80057fc:	edd3 7a00 	vldr	s15, [r3]
 8005800:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580c:	d808      	bhi.n	8005820 <calWallConrol+0x9c8>
			coefficientL[0] = COEFFICIENT_L0_0;
 800580e:	4b66      	ldr	r3, [pc, #408]	; (80059a8 <calWallConrol+0xb50>)
 8005810:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 8005812:	4b66      	ldr	r3, [pc, #408]	; (80059ac <calWallConrol+0xb54>)
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 8005816:	4b66      	ldr	r3, [pc, #408]	; (80059b0 <calWallConrol+0xb58>)
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 800581a:	4b66      	ldr	r3, [pc, #408]	; (80059b4 <calWallConrol+0xb5c>)
 800581c:	647b      	str	r3, [r7, #68]	; 0x44
 800581e:	e05d      	b.n	80058dc <calWallConrol+0xa84>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8005820:	4b60      	ldr	r3, [pc, #384]	; (80059a4 <calWallConrol+0xb4c>)
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80059b8 <calWallConrol+0xb60>
 800582a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005832:	dd12      	ble.n	800585a <calWallConrol+0xa02>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 8005834:	4b5b      	ldr	r3, [pc, #364]	; (80059a4 <calWallConrol+0xb4c>)
 8005836:	edd3 7a00 	vldr	s15, [r3]
 800583a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80059bc <calWallConrol+0xb64>
 800583e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005846:	d808      	bhi.n	800585a <calWallConrol+0xa02>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005848:	4b5d      	ldr	r3, [pc, #372]	; (80059c0 <calWallConrol+0xb68>)
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 800584c:	4b5d      	ldr	r3, [pc, #372]	; (80059c4 <calWallConrol+0xb6c>)
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005850:	4b5d      	ldr	r3, [pc, #372]	; (80059c8 <calWallConrol+0xb70>)
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8005854:	4b5d      	ldr	r3, [pc, #372]	; (80059cc <calWallConrol+0xb74>)
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
 8005858:	e040      	b.n	80058dc <calWallConrol+0xa84>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800585a:	4b52      	ldr	r3, [pc, #328]	; (80059a4 <calWallConrol+0xb4c>)
 800585c:	edd3 7a00 	vldr	s15, [r3]
 8005860:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80059d0 <calWallConrol+0xb78>
 8005864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586c:	dd12      	ble.n	8005894 <calWallConrol+0xa3c>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 800586e:	4b4d      	ldr	r3, [pc, #308]	; (80059a4 <calWallConrol+0xb4c>)
 8005870:	edd3 7a00 	vldr	s15, [r3]
 8005874:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80059d4 <calWallConrol+0xb7c>
 8005878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800587c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005880:	d808      	bhi.n	8005894 <calWallConrol+0xa3c>
			coefficientL[0] = COEFFICIENT_L2_0;
 8005882:	4b55      	ldr	r3, [pc, #340]	; (80059d8 <calWallConrol+0xb80>)
 8005884:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8005886:	4b55      	ldr	r3, [pc, #340]	; (80059dc <calWallConrol+0xb84>)
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800588a:	4b55      	ldr	r3, [pc, #340]	; (80059e0 <calWallConrol+0xb88>)
 800588c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800588e:	4b55      	ldr	r3, [pc, #340]	; (80059e4 <calWallConrol+0xb8c>)
 8005890:	647b      	str	r3, [r7, #68]	; 0x44
 8005892:	e023      	b.n	80058dc <calWallConrol+0xa84>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8005894:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <calWallConrol+0xb48>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b5a      	cmp	r3, #90	; 0x5a
 800589a:	dd07      	ble.n	80058ac <calWallConrol+0xa54>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800589c:	4b3f      	ldr	r3, [pc, #252]	; (800599c <calWallConrol+0xb44>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	4b3d      	ldr	r3, [pc, #244]	; (800599c <calWallConrol+0xb44>)
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e006      	b.n	80058ba <calWallConrol+0xa62>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80058ac:	4b3b      	ldr	r3, [pc, #236]	; (800599c <calWallConrol+0xb44>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	4b39      	ldr	r3, [pc, #228]	; (800599c <calWallConrol+0xb44>)
 80058b8:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 80058ba:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <calWallConrol+0xb48>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058c6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 80058dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 80058e0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80058e4:	4b40      	ldr	r3, [pc, #256]	; (80059e8 <calWallConrol+0xb90>)
 80058e6:	edd3 7a00 	vldr	s15, [r3]
 80058ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ee:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80058f2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80058f6:	4b3c      	ldr	r3, [pc, #240]	; (80059e8 <calWallConrol+0xb90>)
 80058f8:	edd3 7a00 	vldr	s15, [r3]
 80058fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005900:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <calWallConrol+0xb90>)
 8005902:	edd3 7a00 	vldr	s15, [r3]
 8005906:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800590a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 800590e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005912:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <calWallConrol+0xb90>)
 8005914:	edd3 7a00 	vldr	s15, [r3]
 8005918:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 800591c:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <calWallConrol+0xb90>)
 800591e:	edd3 7a00 	vldr	s15, [r3]
 8005922:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005926:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <calWallConrol+0xb90>)
 8005928:	edd3 7a00 	vldr	s15, [r3]
 800592c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8005930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005934:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8005938:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 800593c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005940:	4b18      	ldr	r3, [pc, #96]	; (80059a4 <calWallConrol+0xb4c>)
 8005942:	edd3 7a00 	vldr	s15, [r3]
 8005946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 800594e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005952:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <calWallConrol+0xb4c>)
 8005954:	edd3 7a00 	vldr	s15, [r3]
 8005958:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <calWallConrol+0xb4c>)
 800595e:	edd3 7a00 	vldr	s15, [r3]
 8005962:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005966:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 800596a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <calWallConrol+0xb4c>)
 8005970:	edd3 7a00 	vldr	s15, [r3]
 8005974:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <calWallConrol+0xb4c>)
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <calWallConrol+0xb4c>)
 8005984:	edd3 7a00 	vldr	s15, [r3]
 8005988:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 800598c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005990:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8005994:	230b      	movs	r3, #11
 8005996:	67bb      	str	r3, [r7, #120]	; 0x78
 8005998:	e041      	b.n	8005a1e <calWallConrol+0xbc6>
 800599a:	bf00      	nop
 800599c:	20000573 	.word	0x20000573
 80059a0:	20000298 	.word	0x20000298
 80059a4:	200005c0 	.word	0x200005c0
 80059a8:	4397e871 	.word	0x4397e871
 80059ac:	40c0cba7 	.word	0x40c0cba7
 80059b0:	bdb7434c 	.word	0xbdb7434c
 80059b4:	3b3ec2ab 	.word	0x3b3ec2ab
 80059b8:	428c0000 	.word	0x428c0000
 80059bc:	42f00000 	.word	0x42f00000
 80059c0:	45484ed8 	.word	0x45484ed8
 80059c4:	c293aa7b 	.word	0xc293aa7b
 80059c8:	3f20dbb7 	.word	0x3f20dbb7
 80059cc:	baf37bdb 	.word	0xbaf37bdb
 80059d0:	43480000 	.word	0x43480000
 80059d4:	43700000 	.word	0x43700000
 80059d8:	44c15b4c 	.word	0x44c15b4c
 80059dc:	c1945e93 	.word	0xc1945e93
 80059e0:	3d9b18cf 	.word	0x3d9b18cf
 80059e4:	b8baa583 	.word	0xb8baa583
 80059e8:	200005bc 	.word	0x200005bc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 80059ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4a9c      	ldr	r2, [pc, #624]	; (8005c64 <calWallConrol+0xe0c>)
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	499a      	ldr	r1, [pc, #616]	; (8005c64 <calWallConrol+0xe0c>)
 80059fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8005a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a04:	3b01      	subs	r3, #1
 8005a06:	4a98      	ldr	r2, [pc, #608]	; (8005c68 <calWallConrol+0xe10>)
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4996      	ldr	r1, [pc, #600]	; (8005c68 <calWallConrol+0xe10>)
 8005a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	dce3      	bgt.n	80059ec <calWallConrol+0xb94>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 8005a24:	4a8f      	ldr	r2, [pc, #572]	; (8005c64 <calWallConrol+0xe0c>)
 8005a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a28:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005a2a:	4a8f      	ldr	r2, [pc, #572]	; (8005c68 <calWallConrol+0xe10>)
 8005a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a2e:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005a30:	4b8c      	ldr	r3, [pc, #560]	; (8005c64 <calWallConrol+0xe0c>)
 8005a32:	ed93 7a00 	vldr	s14, [r3]
 8005a36:	4b8b      	ldr	r3, [pc, #556]	; (8005c64 <calWallConrol+0xe0c>)
 8005a38:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a40:	4b8a      	ldr	r3, [pc, #552]	; (8005c6c <calWallConrol+0xe14>)
 8005a42:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 8005a46:	4b88      	ldr	r3, [pc, #544]	; (8005c68 <calWallConrol+0xe10>)
 8005a48:	ed93 7a00 	vldr	s14, [r3]
 8005a4c:	4b86      	ldr	r3, [pc, #536]	; (8005c68 <calWallConrol+0xe10>)
 8005a4e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a56:	4b86      	ldr	r3, [pc, #536]	; (8005c70 <calWallConrol+0xe18>)
 8005a58:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005a5c:	4b85      	ldr	r3, [pc, #532]	; (8005c74 <calWallConrol+0xe1c>)
 8005a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a62:	2b5a      	cmp	r3, #90	; 0x5a
 8005a64:	dd1a      	ble.n	8005a9c <calWallConrol+0xc44>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005a66:	4b84      	ldr	r3, [pc, #528]	; (8005c78 <calWallConrol+0xe20>)
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a72:	4b7e      	ldr	r3, [pc, #504]	; (8005c6c <calWallConrol+0xe14>)
 8005a74:	edd3 7a00 	vldr	s15, [r3]
 8005a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a7c:	eef0 7ae7 	vabs.f32	s15, s15
 8005a80:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005c7c <calWallConrol+0xe24>
 8005a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8c:	d506      	bpl.n	8005a9c <calWallConrol+0xc44>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005a8e:	4b7c      	ldr	r3, [pc, #496]	; (8005c80 <calWallConrol+0xe28>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f043 0302 	orr.w	r3, r3, #2
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	4b79      	ldr	r3, [pc, #484]	; (8005c80 <calWallConrol+0xe28>)
 8005a9a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005a9c:	4b75      	ldr	r3, [pc, #468]	; (8005c74 <calWallConrol+0xe1c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b5a      	cmp	r3, #90	; 0x5a
 8005aa2:	dd1a      	ble.n	8005ada <calWallConrol+0xc82>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005aa4:	4b74      	ldr	r3, [pc, #464]	; (8005c78 <calWallConrol+0xe20>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <calWallConrol+0xe18>)
 8005ab2:	edd3 7a00 	vldr	s15, [r3]
 8005ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aba:	eef0 7ae7 	vabs.f32	s15, s15
 8005abe:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005c7c <calWallConrol+0xe24>
 8005ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	d506      	bpl.n	8005ada <calWallConrol+0xc82>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005acc:	4b6c      	ldr	r3, [pc, #432]	; (8005c80 <calWallConrol+0xe28>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4b6a      	ldr	r3, [pc, #424]	; (8005c80 <calWallConrol+0xe28>)
 8005ad8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005ada:	4b66      	ldr	r3, [pc, #408]	; (8005c74 <calWallConrol+0xe1c>)
 8005adc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ae0:	2b59      	cmp	r3, #89	; 0x59
 8005ae2:	dd13      	ble.n	8005b0c <calWallConrol+0xcb4>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005ae4:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <calWallConrol+0xe20>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005af0:	4b5e      	ldr	r3, [pc, #376]	; (8005c6c <calWallConrol+0xe14>)
 8005af2:	edd3 7a00 	vldr	s15, [r3]
 8005af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005afa:	eef0 7ae7 	vabs.f32	s15, s15
 8005afe:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005c7c <calWallConrol+0xe24>
 8005b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	dd06      	ble.n	8005b1a <calWallConrol+0xcc2>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005b0c:	4b5c      	ldr	r3, [pc, #368]	; (8005c80 <calWallConrol+0xe28>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f023 0302 	bic.w	r3, r3, #2
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4b5a      	ldr	r3, [pc, #360]	; (8005c80 <calWallConrol+0xe28>)
 8005b18:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005b1a:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <calWallConrol+0xe1c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b59      	cmp	r3, #89	; 0x59
 8005b20:	dd13      	ble.n	8005b4a <calWallConrol+0xcf2>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005b22:	4b55      	ldr	r3, [pc, #340]	; (8005c78 <calWallConrol+0xe20>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b2e:	4b50      	ldr	r3, [pc, #320]	; (8005c70 <calWallConrol+0xe18>)
 8005b30:	edd3 7a00 	vldr	s15, [r3]
 8005b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b38:	eef0 7ae7 	vabs.f32	s15, s15
 8005b3c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005c7c <calWallConrol+0xe24>
 8005b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b48:	dd06      	ble.n	8005b58 <calWallConrol+0xd00>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005b4a:	4b4d      	ldr	r3, [pc, #308]	; (8005c80 <calWallConrol+0xe28>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	4b4a      	ldr	r3, [pc, #296]	; (8005c80 <calWallConrol+0xe28>)
 8005b56:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005b58:	4b49      	ldr	r3, [pc, #292]	; (8005c80 <calWallConrol+0xe28>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	f200 813d 	bhi.w	8005ddc <calWallConrol+0xf84>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <calWallConrol+0xd10>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005bcd 	.word	0x08005bcd
 8005b70:	08005c91 	.word	0x08005c91
 8005b74:	08005d27 	.word	0x08005d27
		case 0:			//両壁なし
			PID_wall = 0;
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005b80:	2000      	movs	r0, #0
 8005b82:	f001 fa91 	bl	80070a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005b86:	2000      	movs	r0, #0
 8005b88:	f001 fac4 	bl	8007114 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005b8c:	4b39      	ldr	r3, [pc, #228]	; (8005c74 <calWallConrol+0xe1c>)
 8005b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b9a:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <calWallConrol+0xe2c>)
 8005b9c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005ba0:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <calWallConrol+0xe1c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	ee07 3a90 	vmov	s15, r3
 8005ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bac:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <calWallConrol+0xe30>)
 8005bae:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005bb2:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <calWallConrol+0xe34>)
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005bba:	4b34      	ldr	r3, [pc, #208]	; (8005c8c <calWallConrol+0xe34>)
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005bc2:	4b32      	ldr	r3, [pc, #200]	; (8005c8c <calWallConrol+0xe34>)
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	605a      	str	r2, [r3, #4]
			break;
 8005bca:	e107      	b.n	8005ddc <calWallConrol+0xf84>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005bcc:	2000      	movs	r0, #0
 8005bce:	f001 fa6b 	bl	80070a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f001 fa9e 	bl	8007114 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005bd8:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <calWallConrol+0xe1c>)
 8005bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <calWallConrol+0xe2c>)
 8005be8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005bec:	4a26      	ldr	r2, [pc, #152]	; (8005c88 <calWallConrol+0xe30>)
 8005bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf0:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <calWallConrol+0xe1c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bfe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c06:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005c0a:	4b1a      	ldr	r3, [pc, #104]	; (8005c74 <calWallConrol+0xe1c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005c1a:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <calWallConrol+0xe34>)
 8005c1c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005c20:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <calWallConrol+0xe34>)
 8005c22:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <calWallConrol+0xe34>)
 8005c28:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005c30:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <calWallConrol+0xe34>)
 8005c32:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005c36:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <calWallConrol+0xe34>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <calWallConrol+0xe34>)
 8005c3c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c3e:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <calWallConrol+0xe34>)
 8005c40:	ed93 7a00 	vldr	s14, [r3]
 8005c44:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c48:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <calWallConrol+0xe34>)
 8005c4e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c52:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005c62:	e0bb      	b.n	8005ddc <calWallConrol+0xf84>
 8005c64:	200005e8 	.word	0x200005e8
 8005c68:	20000618 	.word	0x20000618
 8005c6c:	200006a8 	.word	0x200006a8
 8005c70:	200006ac 	.word	0x200006ac
 8005c74:	20000298 	.word	0x20000298
 8005c78:	20000428 	.word	0x20000428
 8005c7c:	42a00000 	.word	0x42a00000
 8005c80:	20000573 	.word	0x20000573
 8005c84:	2000058c 	.word	0x2000058c
 8005c88:	20000590 	.word	0x20000590
 8005c8c:	20000558 	.word	0x20000558
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005c90:	2001      	movs	r0, #1
 8005c92:	f001 fa09 	bl	80070a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005c96:	2000      	movs	r0, #0
 8005c98:	f001 fa3c 	bl	8007114 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005c9c:	4aa4      	ldr	r2, [pc, #656]	; (8005f30 <calWallConrol+0x10d8>)
 8005c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005ca2:	4ba4      	ldr	r3, [pc, #656]	; (8005f34 <calWallConrol+0x10dc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cae:	4ba2      	ldr	r3, [pc, #648]	; (8005f38 <calWallConrol+0x10e0>)
 8005cb0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005cb4:	4b9f      	ldr	r3, [pc, #636]	; (8005f34 <calWallConrol+0x10dc>)
 8005cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cc2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005cc6:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005cca:	4b9a      	ldr	r3, [pc, #616]	; (8005f34 <calWallConrol+0x10dc>)
 8005ccc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005cdc:	4b97      	ldr	r3, [pc, #604]	; (8005f3c <calWallConrol+0x10e4>)
 8005cde:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005ce2:	4b96      	ldr	r3, [pc, #600]	; (8005f3c <calWallConrol+0x10e4>)
 8005ce4:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005ce8:	4b94      	ldr	r3, [pc, #592]	; (8005f3c <calWallConrol+0x10e4>)
 8005cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8005cee:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005cf2:	4b92      	ldr	r3, [pc, #584]	; (8005f3c <calWallConrol+0x10e4>)
 8005cf4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005cf8:	4b90      	ldr	r3, [pc, #576]	; (8005f3c <calWallConrol+0x10e4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a8f      	ldr	r2, [pc, #572]	; (8005f3c <calWallConrol+0x10e4>)
 8005cfe:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d00:	4b8e      	ldr	r3, [pc, #568]	; (8005f3c <calWallConrol+0x10e4>)
 8005d02:	ed93 7a00 	vldr	s14, [r3]
 8005d06:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005d0e:	4b8b      	ldr	r3, [pc, #556]	; (8005f3c <calWallConrol+0x10e4>)
 8005d10:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d14:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d20:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005d24:	e05a      	b.n	8005ddc <calWallConrol+0xf84>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005d26:	2001      	movs	r0, #1
 8005d28:	f001 f9be 	bl	80070a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f001 f9f1 	bl	8007114 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005d32:	4a7f      	ldr	r2, [pc, #508]	; (8005f30 <calWallConrol+0x10d8>)
 8005d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d36:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005d38:	4a7f      	ldr	r2, [pc, #508]	; (8005f38 <calWallConrol+0x10e0>)
 8005d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d3c:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005d3e:	4b7d      	ldr	r3, [pc, #500]	; (8005f34 <calWallConrol+0x10dc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d4a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d52:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005d56:	4b77      	ldr	r3, [pc, #476]	; (8005f34 <calWallConrol+0x10dc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005d66:	4b73      	ldr	r3, [pc, #460]	; (8005f34 <calWallConrol+0x10dc>)
 8005d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d6c:	ee07 3a90 	vmov	s15, r3
 8005d70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d74:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005d78:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005d7c:	4b6d      	ldr	r3, [pc, #436]	; (8005f34 <calWallConrol+0x10dc>)
 8005d7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d8a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005d92:	4b6a      	ldr	r3, [pc, #424]	; (8005f3c <calWallConrol+0x10e4>)
 8005d94:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005d98:	4b68      	ldr	r3, [pc, #416]	; (8005f3c <calWallConrol+0x10e4>)
 8005d9a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005d9e:	4b67      	ldr	r3, [pc, #412]	; (8005f3c <calWallConrol+0x10e4>)
 8005da0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005da4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005da8:	4b64      	ldr	r3, [pc, #400]	; (8005f3c <calWallConrol+0x10e4>)
 8005daa:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005dae:	4b63      	ldr	r3, [pc, #396]	; (8005f3c <calWallConrol+0x10e4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a62      	ldr	r2, [pc, #392]	; (8005f3c <calWallConrol+0x10e4>)
 8005db4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005db6:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <calWallConrol+0x10e4>)
 8005db8:	ed93 7a00 	vldr	s14, [r3]
 8005dbc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005dc4:	4b5d      	ldr	r3, [pc, #372]	; (8005f3c <calWallConrol+0x10e4>)
 8005dc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dca:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005dda:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005ddc:	4b58      	ldr	r3, [pc, #352]	; (8005f40 <calWallConrol+0x10e8>)
 8005dde:	edd3 7a00 	vldr	s15, [r3]
 8005de2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005f44 <calWallConrol+0x10ec>
 8005de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dee:	dd04      	ble.n	8005dfa <calWallConrol+0xfa2>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005df0:	4b55      	ldr	r3, [pc, #340]	; (8005f48 <calWallConrol+0x10f0>)
 8005df2:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005df4:	4b55      	ldr	r3, [pc, #340]	; (8005f4c <calWallConrol+0x10f4>)
 8005df6:	673b      	str	r3, [r7, #112]	; 0x70
 8005df8:	e023      	b.n	8005e42 <calWallConrol+0xfea>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005dfa:	4b51      	ldr	r3, [pc, #324]	; (8005f40 <calWallConrol+0x10e8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fa fbca 	bl	8000598 <__aeabi_f2d>
 8005e04:	a346      	add	r3, pc, #280	; (adr r3, 8005f20 <calWallConrol+0x10c8>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f7fa fc1d 	bl	8000648 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fa feef 	bl	8000bf8 <__aeabi_d2f>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005e1e:	4b48      	ldr	r3, [pc, #288]	; (8005f40 <calWallConrol+0x10e8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fbb8 	bl	8000598 <__aeabi_f2d>
 8005e28:	a33f      	add	r3, pc, #252	; (adr r3, 8005f28 <calWallConrol+0x10d0>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fc0b 	bl	8000648 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f7fa fedd 	bl	8000bf8 <__aeabi_d2f>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005e42:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <calWallConrol+0x10f8>)
 8005e44:	edd3 7a00 	vldr	s15, [r3]
 8005e48:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005f54 <calWallConrol+0x10fc>
 8005e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e54:	dd12      	ble.n	8005e7c <calWallConrol+0x1024>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <calWallConrol+0x10f8>)
 8005e58:	edd3 7a00 	vldr	s15, [r3]
 8005e5c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005f58 <calWallConrol+0x1100>
 8005e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e68:	d808      	bhi.n	8005e7c <calWallConrol+0x1024>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005e6a:	4b3c      	ldr	r3, [pc, #240]	; (8005f5c <calWallConrol+0x1104>)
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005e6e:	4b3c      	ldr	r3, [pc, #240]	; (8005f60 <calWallConrol+0x1108>)
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005e72:	4b3c      	ldr	r3, [pc, #240]	; (8005f64 <calWallConrol+0x110c>)
 8005e74:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005e76:	4b3c      	ldr	r3, [pc, #240]	; (8005f68 <calWallConrol+0x1110>)
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7a:	e025      	b.n	8005ec8 <calWallConrol+0x1070>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005e7c:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <calWallConrol+0x10dc>)
 8005e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e82:	2b82      	cmp	r3, #130	; 0x82
 8005e84:	dd07      	ble.n	8005e96 <calWallConrol+0x103e>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <calWallConrol+0x1114>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <calWallConrol+0x1114>)
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e006      	b.n	8005ea4 <calWallConrol+0x104c>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005e96:	4b35      	ldr	r3, [pc, #212]	; (8005f6c <calWallConrol+0x1114>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f023 0302 	bic.w	r3, r3, #2
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	4b32      	ldr	r3, [pc, #200]	; (8005f6c <calWallConrol+0x1114>)
 8005ea2:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005ea4:	4b23      	ldr	r3, [pc, #140]	; (8005f34 <calWallConrol+0x10dc>)
 8005ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eb2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005ec8:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <calWallConrol+0x1118>)
 8005eca:	edd3 7a00 	vldr	s15, [r3]
 8005ece:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005f54 <calWallConrol+0x10fc>
 8005ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eda:	dd12      	ble.n	8005f02 <calWallConrol+0x10aa>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005edc:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <calWallConrol+0x1118>)
 8005ede:	edd3 7a00 	vldr	s15, [r3]
 8005ee2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005f58 <calWallConrol+0x1100>
 8005ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	d808      	bhi.n	8005f02 <calWallConrol+0x10aa>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005ef0:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <calWallConrol+0x111c>)
 8005ef2:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005ef4:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <calWallConrol+0x1120>)
 8005ef6:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <calWallConrol+0x1124>)
 8005efa:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005efc:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <calWallConrol+0x1128>)
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
 8005f00:	e058      	b.n	8005fb4 <calWallConrol+0x115c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <calWallConrol+0x10dc>)
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	2b82      	cmp	r3, #130	; 0x82
 8005f08:	dd3c      	ble.n	8005f84 <calWallConrol+0x112c>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <calWallConrol+0x1114>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <calWallConrol+0x1114>)
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e03b      	b.n	8005f92 <calWallConrol+0x113a>
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w
 8005f20:	9999999a 	.word	0x9999999a
 8005f24:	3fe99999 	.word	0x3fe99999
 8005f28:	47ae147b 	.word	0x47ae147b
 8005f2c:	bfb47ae1 	.word	0xbfb47ae1
 8005f30:	2000058c 	.word	0x2000058c
 8005f34:	20000298 	.word	0x20000298
 8005f38:	20000590 	.word	0x20000590
 8005f3c:	20000558 	.word	0x20000558
 8005f40:	200004b8 	.word	0x200004b8
 8005f44:	44fa0000 	.word	0x44fa0000
 8005f48:	44c80000 	.word	0x44c80000
 8005f4c:	c3200000 	.word	0xc3200000
 8005f50:	200005bc 	.word	0x200005bc
 8005f54:	420c0000 	.word	0x420c0000
 8005f58:	43200000 	.word	0x43200000
 8005f5c:	43896a4d 	.word	0x43896a4d
 8005f60:	40ca5bd3 	.word	0x40ca5bd3
 8005f64:	bd6d2c96 	.word	0xbd6d2c96
 8005f68:	39a9de8b 	.word	0x39a9de8b
 8005f6c:	20000574 	.word	0x20000574
 8005f70:	200005c0 	.word	0x200005c0
 8005f74:	4383070e 	.word	0x4383070e
 8005f78:	3ff62494 	.word	0x3ff62494
 8005f7c:	bbc31628 	.word	0xbbc31628
 8005f80:	38eae18b 	.word	0x38eae18b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005f84:	4bb5      	ldr	r3, [pc, #724]	; (800625c <calWallConrol+0x1404>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4bb3      	ldr	r3, [pc, #716]	; (800625c <calWallConrol+0x1404>)
 8005f90:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005f92:	4bb3      	ldr	r3, [pc, #716]	; (8006260 <calWallConrol+0x1408>)
 8005f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f9e:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005fb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005fb8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005fbc:	4ba9      	ldr	r3, [pc, #676]	; (8006264 <calWallConrol+0x140c>)
 8005fbe:	edd3 7a00 	vldr	s15, [r3]
 8005fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005fca:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005fce:	4ba5      	ldr	r3, [pc, #660]	; (8006264 <calWallConrol+0x140c>)
 8005fd0:	edd3 7a00 	vldr	s15, [r3]
 8005fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005fd8:	4ba2      	ldr	r3, [pc, #648]	; (8006264 <calWallConrol+0x140c>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005fe6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005fea:	4b9e      	ldr	r3, [pc, #632]	; (8006264 <calWallConrol+0x140c>)
 8005fec:	edd3 7a00 	vldr	s15, [r3]
 8005ff0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005ff4:	4b9b      	ldr	r3, [pc, #620]	; (8006264 <calWallConrol+0x140c>)
 8005ff6:	edd3 7a00 	vldr	s15, [r3]
 8005ffa:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005ffe:	4b99      	ldr	r3, [pc, #612]	; (8006264 <calWallConrol+0x140c>)
 8006000:	edd3 7a00 	vldr	s15, [r3]
 8006004:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8006008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800600c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8006010:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8006014:	edd7 6a07 	vldr	s13, [r7, #28]
 8006018:	4b93      	ldr	r3, [pc, #588]	; (8006268 <calWallConrol+0x1410>)
 800601a:	edd3 7a00 	vldr	s15, [r3]
 800601e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006022:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8006026:	edd7 6a08 	vldr	s13, [r7, #32]
 800602a:	4b8f      	ldr	r3, [pc, #572]	; (8006268 <calWallConrol+0x1410>)
 800602c:	edd3 7a00 	vldr	s15, [r3]
 8006030:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006034:	4b8c      	ldr	r3, [pc, #560]	; (8006268 <calWallConrol+0x1410>)
 8006036:	edd3 7a00 	vldr	s15, [r3]
 800603a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 800603e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8006042:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006046:	4b88      	ldr	r3, [pc, #544]	; (8006268 <calWallConrol+0x1410>)
 8006048:	edd3 7a00 	vldr	s15, [r3]
 800604c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006050:	4b85      	ldr	r3, [pc, #532]	; (8006268 <calWallConrol+0x1410>)
 8006052:	edd3 7a00 	vldr	s15, [r3]
 8006056:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800605a:	4b83      	ldr	r3, [pc, #524]	; (8006268 <calWallConrol+0x1410>)
 800605c:	edd3 7a00 	vldr	s15, [r3]
 8006060:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8006064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006068:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 800606c:	230b      	movs	r3, #11
 800606e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006070:	e018      	b.n	80060a4 <calWallConrol+0x124c>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8006072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006074:	3b01      	subs	r3, #1
 8006076:	4a7d      	ldr	r2, [pc, #500]	; (800626c <calWallConrol+0x1414>)
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	497b      	ldr	r1, [pc, #492]	; (800626c <calWallConrol+0x1414>)
 8006080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8006088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608a:	3b01      	subs	r3, #1
 800608c:	4a78      	ldr	r2, [pc, #480]	; (8006270 <calWallConrol+0x1418>)
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4976      	ldr	r1, [pc, #472]	; (8006270 <calWallConrol+0x1418>)
 8006096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 800609e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a0:	3b01      	subs	r3, #1
 80060a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dce3      	bgt.n	8006072 <calWallConrol+0x121a>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 80060aa:	4a70      	ldr	r2, [pc, #448]	; (800626c <calWallConrol+0x1414>)
 80060ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ae:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 80060b0:	4a6f      	ldr	r2, [pc, #444]	; (8006270 <calWallConrol+0x1418>)
 80060b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b4:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 80060b6:	4b6d      	ldr	r3, [pc, #436]	; (800626c <calWallConrol+0x1414>)
 80060b8:	ed93 7a00 	vldr	s14, [r3]
 80060bc:	4b6b      	ldr	r3, [pc, #428]	; (800626c <calWallConrol+0x1414>)
 80060be:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80060c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060c6:	4b6b      	ldr	r3, [pc, #428]	; (8006274 <calWallConrol+0x141c>)
 80060c8:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 80060cc:	4b68      	ldr	r3, [pc, #416]	; (8006270 <calWallConrol+0x1418>)
 80060ce:	ed93 7a00 	vldr	s14, [r3]
 80060d2:	4b67      	ldr	r3, [pc, #412]	; (8006270 <calWallConrol+0x1418>)
 80060d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80060d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060dc:	4b66      	ldr	r3, [pc, #408]	; (8006278 <calWallConrol+0x1420>)
 80060de:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 80060e2:	4b5f      	ldr	r3, [pc, #380]	; (8006260 <calWallConrol+0x1408>)
 80060e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060e8:	2b82      	cmp	r3, #130	; 0x82
 80060ea:	dd1a      	ble.n	8006122 <calWallConrol+0x12ca>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 80060ec:	4b63      	ldr	r3, [pc, #396]	; (800627c <calWallConrol+0x1424>)
 80060ee:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80060f0:	ee07 3a90 	vmov	s15, r3
 80060f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060f8:	4b5e      	ldr	r3, [pc, #376]	; (8006274 <calWallConrol+0x141c>)
 80060fa:	edd3 7a00 	vldr	s15, [r3]
 80060fe:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8006102:	eef0 7ae7 	vabs.f32	s15, s15
 8006106:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006280 <calWallConrol+0x1428>
 800610a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800610e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006112:	d506      	bpl.n	8006122 <calWallConrol+0x12ca>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8006114:	4b51      	ldr	r3, [pc, #324]	; (800625c <calWallConrol+0x1404>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f043 0302 	orr.w	r3, r3, #2
 800611c:	b2da      	uxtb	r2, r3
 800611e:	4b4f      	ldr	r3, [pc, #316]	; (800625c <calWallConrol+0x1404>)
 8006120:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8006122:	4b4f      	ldr	r3, [pc, #316]	; (8006260 <calWallConrol+0x1408>)
 8006124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006126:	2b82      	cmp	r3, #130	; 0x82
 8006128:	dd1a      	ble.n	8006160 <calWallConrol+0x1308>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 800612a:	4b54      	ldr	r3, [pc, #336]	; (800627c <calWallConrol+0x1424>)
 800612c:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006136:	4b50      	ldr	r3, [pc, #320]	; (8006278 <calWallConrol+0x1420>)
 8006138:	edd3 7a00 	vldr	s15, [r3]
 800613c:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8006140:	eef0 7ae7 	vabs.f32	s15, s15
 8006144:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006280 <calWallConrol+0x1428>
 8006148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006150:	d506      	bpl.n	8006160 <calWallConrol+0x1308>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8006152:	4b42      	ldr	r3, [pc, #264]	; (800625c <calWallConrol+0x1404>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	b2da      	uxtb	r2, r3
 800615c:	4b3f      	ldr	r3, [pc, #252]	; (800625c <calWallConrol+0x1404>)
 800615e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8006160:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <calWallConrol+0x1408>)
 8006162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006166:	2b81      	cmp	r3, #129	; 0x81
 8006168:	dd13      	ble.n	8006192 <calWallConrol+0x133a>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 800616a:	4b44      	ldr	r3, [pc, #272]	; (800627c <calWallConrol+0x1424>)
 800616c:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006176:	4b3f      	ldr	r3, [pc, #252]	; (8006274 <calWallConrol+0x141c>)
 8006178:	edd3 7a00 	vldr	s15, [r3]
 800617c:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006180:	eef0 7ae7 	vabs.f32	s15, s15
 8006184:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006280 <calWallConrol+0x1428>
 8006188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	dd06      	ble.n	80061a0 <calWallConrol+0x1348>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006192:	4b32      	ldr	r3, [pc, #200]	; (800625c <calWallConrol+0x1404>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f023 0302 	bic.w	r3, r3, #2
 800619a:	b2da      	uxtb	r2, r3
 800619c:	4b2f      	ldr	r3, [pc, #188]	; (800625c <calWallConrol+0x1404>)
 800619e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 80061a0:	4b2f      	ldr	r3, [pc, #188]	; (8006260 <calWallConrol+0x1408>)
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	2b81      	cmp	r3, #129	; 0x81
 80061a6:	dd13      	ble.n	80061d0 <calWallConrol+0x1378>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80061a8:	4b34      	ldr	r3, [pc, #208]	; (800627c <calWallConrol+0x1424>)
 80061aa:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061b4:	4b30      	ldr	r3, [pc, #192]	; (8006278 <calWallConrol+0x1420>)
 80061b6:	edd3 7a00 	vldr	s15, [r3]
 80061ba:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 80061be:	eef0 7ae7 	vabs.f32	s15, s15
 80061c2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006280 <calWallConrol+0x1428>
 80061c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ce:	dd06      	ble.n	80061de <calWallConrol+0x1386>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 80061d0:	4b22      	ldr	r3, [pc, #136]	; (800625c <calWallConrol+0x1404>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	4b20      	ldr	r3, [pc, #128]	; (800625c <calWallConrol+0x1404>)
 80061dc:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 80061de:	4b1f      	ldr	r3, [pc, #124]	; (800625c <calWallConrol+0x1404>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	f200 8155 	bhi.w	8006492 <calWallConrol+0x163a>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <calWallConrol+0x1398>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006295 	.word	0x08006295
 80061f8:	08006335 	.word	0x08006335
 80061fc:	080063d3 	.word	0x080063d3
		case 0:			//両壁なし
			PID_wall += 0;
 8006200:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006204:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006284 <calWallConrol+0x142c>
 8006208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800620c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8006210:	2000      	movs	r0, #0
 8006212:	f000 ff5b 	bl	80070cc <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006216:	2000      	movs	r0, #0
 8006218:	f000 ff6a 	bl	80070f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 800621c:	4b10      	ldr	r3, [pc, #64]	; (8006260 <calWallConrol+0x1408>)
 800621e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800622a:	4b17      	ldr	r3, [pc, #92]	; (8006288 <calWallConrol+0x1430>)
 800622c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <calWallConrol+0x1408>)
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <calWallConrol+0x1434>)
 800623e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <calWallConrol+0x1438>)
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <calWallConrol+0x1438>)
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8006252:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <calWallConrol+0x1438>)
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	605a      	str	r2, [r3, #4]
			break;
 800625a:	e11a      	b.n	8006492 <calWallConrol+0x163a>
 800625c:	20000574 	.word	0x20000574
 8006260:	20000298 	.word	0x20000298
 8006264:	200005bc 	.word	0x200005bc
 8006268:	200005c0 	.word	0x200005c0
 800626c:	20000648 	.word	0x20000648
 8006270:	20000678 	.word	0x20000678
 8006274:	200006b0 	.word	0x200006b0
 8006278:	200006b4 	.word	0x200006b4
 800627c:	20000428 	.word	0x20000428
 8006280:	42a00000 	.word	0x42a00000
 8006284:	00000000 	.word	0x00000000
 8006288:	20000584 	.word	0x20000584
 800628c:	20000588 	.word	0x20000588
 8006290:	20000564 	.word	0x20000564
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006294:	2000      	movs	r0, #0
 8006296:	f000 ff19 	bl	80070cc <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 800629a:	2001      	movs	r0, #1
 800629c:	f000 ff28 	bl	80070f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 80062a0:	4b87      	ldr	r3, [pc, #540]	; (80064c0 <calWallConrol+0x1668>)
 80062a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ae:	4b85      	ldr	r3, [pc, #532]	; (80064c4 <calWallConrol+0x166c>)
 80062b0:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 80062b4:	4a84      	ldr	r2, [pc, #528]	; (80064c8 <calWallConrol+0x1670>)
 80062b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062b8:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 80062ba:	4b81      	ldr	r3, [pc, #516]	; (80064c0 <calWallConrol+0x1668>)
 80062bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062c6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80062ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ce:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 80062d2:	4b7b      	ldr	r3, [pc, #492]	; (80064c0 <calWallConrol+0x1668>)
 80062d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062de:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 80062e2:	4b7a      	ldr	r3, [pc, #488]	; (80064cc <calWallConrol+0x1674>)
 80062e4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80062e8:	4b78      	ldr	r3, [pc, #480]	; (80064cc <calWallConrol+0x1674>)
 80062ea:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80062ee:	4b77      	ldr	r3, [pc, #476]	; (80064cc <calWallConrol+0x1674>)
 80062f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80062f4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80062f8:	4b74      	ldr	r3, [pc, #464]	; (80064cc <calWallConrol+0x1674>)
 80062fa:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80062fe:	4b73      	ldr	r3, [pc, #460]	; (80064cc <calWallConrol+0x1674>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a72      	ldr	r2, [pc, #456]	; (80064cc <calWallConrol+0x1674>)
 8006304:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006306:	4b71      	ldr	r3, [pc, #452]	; (80064cc <calWallConrol+0x1674>)
 8006308:	ed93 7a00 	vldr	s14, [r3]
 800630c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006310:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006314:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <calWallConrol+0x1674>)
 8006316:	edd3 6a02 	vldr	s13, [r3, #8]
 800631a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800631e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006322:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006326:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800632a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006332:	e0ae      	b.n	8006492 <calWallConrol+0x163a>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006334:	2001      	movs	r0, #1
 8006336:	f000 fec9 	bl	80070cc <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 800633a:	2000      	movs	r0, #0
 800633c:	f000 fed8 	bl	80070f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006340:	4a60      	ldr	r2, [pc, #384]	; (80064c4 <calWallConrol+0x166c>)
 8006342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006344:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006346:	4b5e      	ldr	r3, [pc, #376]	; (80064c0 <calWallConrol+0x1668>)
 8006348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006352:	4b5d      	ldr	r3, [pc, #372]	; (80064c8 <calWallConrol+0x1670>)
 8006354:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006358:	4b59      	ldr	r3, [pc, #356]	; (80064c0 <calWallConrol+0x1668>)
 800635a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006366:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800636a:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800636e:	4b54      	ldr	r3, [pc, #336]	; (80064c0 <calWallConrol+0x1668>)
 8006370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800637c:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006380:	4b52      	ldr	r3, [pc, #328]	; (80064cc <calWallConrol+0x1674>)
 8006382:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006386:	4b51      	ldr	r3, [pc, #324]	; (80064cc <calWallConrol+0x1674>)
 8006388:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800638c:	4b4f      	ldr	r3, [pc, #316]	; (80064cc <calWallConrol+0x1674>)
 800638e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006392:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006396:	4b4d      	ldr	r3, [pc, #308]	; (80064cc <calWallConrol+0x1674>)
 8006398:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800639c:	4b4b      	ldr	r3, [pc, #300]	; (80064cc <calWallConrol+0x1674>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a4a      	ldr	r2, [pc, #296]	; (80064cc <calWallConrol+0x1674>)
 80063a2:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063a4:	4b49      	ldr	r3, [pc, #292]	; (80064cc <calWallConrol+0x1674>)
 80063a6:	ed93 7a00 	vldr	s14, [r3]
 80063aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80063ae:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80063b2:	4b46      	ldr	r3, [pc, #280]	; (80064cc <calWallConrol+0x1674>)
 80063b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80063b8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80063bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063c0:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063c4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80063c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063cc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80063d0:	e05f      	b.n	8006492 <calWallConrol+0x163a>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 80063d2:	2001      	movs	r0, #1
 80063d4:	f000 fe7a 	bl	80070cc <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 80063d8:	2001      	movs	r0, #1
 80063da:	f000 fe89 	bl	80070f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80063de:	4a39      	ldr	r2, [pc, #228]	; (80064c4 <calWallConrol+0x166c>)
 80063e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e2:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 80063e4:	4a38      	ldr	r2, [pc, #224]	; (80064c8 <calWallConrol+0x1670>)
 80063e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063e8:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80063ea:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <calWallConrol+0x1668>)
 80063ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80063fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063fe:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8006402:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <calWallConrol+0x1668>)
 8006404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800640e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006412:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <calWallConrol+0x1668>)
 8006414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006420:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006424:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <calWallConrol+0x1668>)
 800642a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006436:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800643a:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 800643e:	4b23      	ldr	r3, [pc, #140]	; (80064cc <calWallConrol+0x1674>)
 8006440:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006444:	4b21      	ldr	r3, [pc, #132]	; (80064cc <calWallConrol+0x1674>)
 8006446:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800644a:	4b20      	ldr	r3, [pc, #128]	; (80064cc <calWallConrol+0x1674>)
 800644c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006450:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006454:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <calWallConrol+0x1674>)
 8006456:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800645a:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <calWallConrol+0x1674>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1b      	ldr	r2, [pc, #108]	; (80064cc <calWallConrol+0x1674>)
 8006460:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006462:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <calWallConrol+0x1674>)
 8006464:	ed93 7a00 	vldr	s14, [r3]
 8006468:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800646c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006470:	4b16      	ldr	r3, [pc, #88]	; (80064cc <calWallConrol+0x1674>)
 8006472:	edd3 6a02 	vldr	s13, [r3, #8]
 8006476:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800647a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800647e:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006482:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800648a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800648e:	e000      	b.n	8006492 <calWallConrol+0x163a>
			break;
 8006490:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006492:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006496:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80064d0 <calWallConrol+0x1678>
 800649a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <calWallConrol+0x167c>)
 80064a0:	edd3 7a00 	vldr	s15, [r3]
 80064a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 80064ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ae:	ee07 3a90 	vmov	s15, r3
}
 80064b2:	eeb0 0a67 	vmov.f32	s0, s15
 80064b6:	37a8      	adds	r7, #168	; 0xa8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064be:	bf00      	nop
 80064c0:	20000298 	.word	0x20000298
 80064c4:	20000584 	.word	0x20000584
 80064c8:	20000588 	.word	0x20000588
 80064cc:	20000564 	.word	0x20000564
 80064d0:	44d1e000 	.word	0x44d1e000
 80064d4:	200004b4 	.word	0x200004b4

080064d8 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 80064d8:	b5b0      	push	{r4, r5, r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 80064de:	4b98      	ldr	r3, [pc, #608]	; (8006740 <interrupt_WallCut+0x268>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	f040 8537 	bne.w	8006f56 <interrupt_WallCut+0xa7e>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 80064e8:	4b96      	ldr	r3, [pc, #600]	; (8006744 <interrupt_WallCut+0x26c>)
 80064ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f2:	dd03      	ble.n	80064fc <interrupt_WallCut+0x24>
			front_wall_break_90 = 1;
 80064f4:	4b94      	ldr	r3, [pc, #592]	; (8006748 <interrupt_WallCut+0x270>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e002      	b.n	8006502 <interrupt_WallCut+0x2a>
		} else {
			front_wall_break_90 = 0;
 80064fc:	4b92      	ldr	r3, [pc, #584]	; (8006748 <interrupt_WallCut+0x270>)
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006502:	4b90      	ldr	r3, [pc, #576]	; (8006744 <interrupt_WallCut+0x26c>)
 8006504:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006508:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800650c:	dd03      	ble.n	8006516 <interrupt_WallCut+0x3e>
			front_wall_break_45 = 1;
 800650e:	4b8f      	ldr	r3, [pc, #572]	; (800674c <interrupt_WallCut+0x274>)
 8006510:	2201      	movs	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	e002      	b.n	800651c <interrupt_WallCut+0x44>
		} else {
			front_wall_break_45 = 0;
 8006516:	4b8d      	ldr	r3, [pc, #564]	; (800674c <interrupt_WallCut+0x274>)
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 800651c:	4b89      	ldr	r3, [pc, #548]	; (8006744 <interrupt_WallCut+0x26c>)
 800651e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006522:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006526:	dd03      	ble.n	8006530 <interrupt_WallCut+0x58>
			front_wall_break_45slant = 1;
 8006528:	4b89      	ldr	r3, [pc, #548]	; (8006750 <interrupt_WallCut+0x278>)
 800652a:	2201      	movs	r2, #1
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	e002      	b.n	8006536 <interrupt_WallCut+0x5e>
		} else {
			front_wall_break_45slant = 0;
 8006530:	4b87      	ldr	r3, [pc, #540]	; (8006750 <interrupt_WallCut+0x278>)
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006536:	4b83      	ldr	r3, [pc, #524]	; (8006744 <interrupt_WallCut+0x26c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2bc7      	cmp	r3, #199	; 0xc7
 800653c:	dc30      	bgt.n	80065a0 <interrupt_WallCut+0xc8>
			NoWallCountL90++;
 800653e:	4b85      	ldr	r3, [pc, #532]	; (8006754 <interrupt_WallCut+0x27c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3301      	adds	r3, #1
 8006544:	4a83      	ldr	r2, [pc, #524]	; (8006754 <interrupt_WallCut+0x27c>)
 8006546:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006548:	4b83      	ldr	r3, [pc, #524]	; (8006758 <interrupt_WallCut+0x280>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f7fa f823 	bl	8000598 <__aeabi_f2d>
 8006552:	4604      	mov	r4, r0
 8006554:	460d      	mov	r5, r1
 8006556:	4b81      	ldr	r3, [pc, #516]	; (800675c <interrupt_WallCut+0x284>)
 8006558:	ed93 7a00 	vldr	s14, [r3]
 800655c:	4b80      	ldr	r3, [pc, #512]	; (8006760 <interrupt_WallCut+0x288>)
 800655e:	edd3 7a00 	vldr	s15, [r3]
 8006562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006566:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800656a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800656e:	ee16 0a90 	vmov	r0, s13
 8006572:	f7fa f811 	bl	8000598 <__aeabi_f2d>
 8006576:	a370      	add	r3, pc, #448	; (adr r3, 8006738 <interrupt_WallCut+0x260>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f7fa f864 	bl	8000648 <__aeabi_dmul>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	f7f9 fea8 	bl	80002dc <__adddf3>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4610      	mov	r0, r2
 8006592:	4619      	mov	r1, r3
 8006594:	f7fa fb30 	bl	8000bf8 <__aeabi_d2f>
 8006598:	4603      	mov	r3, r0
 800659a:	4a6f      	ldr	r2, [pc, #444]	; (8006758 <interrupt_WallCut+0x280>)
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e006      	b.n	80065ae <interrupt_WallCut+0xd6>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80065a0:	4b6c      	ldr	r3, [pc, #432]	; (8006754 <interrupt_WallCut+0x27c>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80065a6:	4b6c      	ldr	r3, [pc, #432]	; (8006758 <interrupt_WallCut+0x280>)
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80065ae:	4b65      	ldr	r3, [pc, #404]	; (8006744 <interrupt_WallCut+0x26c>)
 80065b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065b4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80065b8:	da30      	bge.n	800661c <interrupt_WallCut+0x144>
			NoWallCountR90++;
 80065ba:	4b6a      	ldr	r3, [pc, #424]	; (8006764 <interrupt_WallCut+0x28c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	4a68      	ldr	r2, [pc, #416]	; (8006764 <interrupt_WallCut+0x28c>)
 80065c2:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80065c4:	4b68      	ldr	r3, [pc, #416]	; (8006768 <interrupt_WallCut+0x290>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7f9 ffe5 	bl	8000598 <__aeabi_f2d>
 80065ce:	4604      	mov	r4, r0
 80065d0:	460d      	mov	r5, r1
 80065d2:	4b62      	ldr	r3, [pc, #392]	; (800675c <interrupt_WallCut+0x284>)
 80065d4:	ed93 7a00 	vldr	s14, [r3]
 80065d8:	4b61      	ldr	r3, [pc, #388]	; (8006760 <interrupt_WallCut+0x288>)
 80065da:	edd3 7a00 	vldr	s15, [r3]
 80065de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80065e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065ea:	ee16 0a90 	vmov	r0, s13
 80065ee:	f7f9 ffd3 	bl	8000598 <__aeabi_f2d>
 80065f2:	a351      	add	r3, pc, #324	; (adr r3, 8006738 <interrupt_WallCut+0x260>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7fa f826 	bl	8000648 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4620      	mov	r0, r4
 8006602:	4629      	mov	r1, r5
 8006604:	f7f9 fe6a 	bl	80002dc <__adddf3>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4610      	mov	r0, r2
 800660e:	4619      	mov	r1, r3
 8006610:	f7fa faf2 	bl	8000bf8 <__aeabi_d2f>
 8006614:	4603      	mov	r3, r0
 8006616:	4a54      	ldr	r2, [pc, #336]	; (8006768 <interrupt_WallCut+0x290>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e006      	b.n	800662a <interrupt_WallCut+0x152>
		} else {
			NoWallCountR90 = 0;
 800661c:	4b51      	ldr	r3, [pc, #324]	; (8006764 <interrupt_WallCut+0x28c>)
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006622:	4b51      	ldr	r3, [pc, #324]	; (8006768 <interrupt_WallCut+0x290>)
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 800662a:	4b50      	ldr	r3, [pc, #320]	; (800676c <interrupt_WallCut+0x294>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8006632:	da04      	bge.n	800663e <interrupt_WallCut+0x166>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006634:	4b43      	ldr	r3, [pc, #268]	; (8006744 <interrupt_WallCut+0x26c>)
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800663c:	dd37      	ble.n	80066ae <interrupt_WallCut+0x1d6>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 800663e:	4b4c      	ldr	r3, [pc, #304]	; (8006770 <interrupt_WallCut+0x298>)
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006646:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <interrupt_WallCut+0x29c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	4a49      	ldr	r2, [pc, #292]	; (8006774 <interrupt_WallCut+0x29c>)
 800664e:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006650:	4b49      	ldr	r3, [pc, #292]	; (8006778 <interrupt_WallCut+0x2a0>)
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006656:	4b49      	ldr	r3, [pc, #292]	; (800677c <interrupt_WallCut+0x2a4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7f9 ff9c 	bl	8000598 <__aeabi_f2d>
 8006660:	4604      	mov	r4, r0
 8006662:	460d      	mov	r5, r1
 8006664:	4b3d      	ldr	r3, [pc, #244]	; (800675c <interrupt_WallCut+0x284>)
 8006666:	ed93 7a00 	vldr	s14, [r3]
 800666a:	4b3d      	ldr	r3, [pc, #244]	; (8006760 <interrupt_WallCut+0x288>)
 800666c:	edd3 7a00 	vldr	s15, [r3]
 8006670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006674:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006678:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800667c:	ee16 0a90 	vmov	r0, s13
 8006680:	f7f9 ff8a 	bl	8000598 <__aeabi_f2d>
 8006684:	a32c      	add	r3, pc, #176	; (adr r3, 8006738 <interrupt_WallCut+0x260>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 ffdd 	bl	8000648 <__aeabi_dmul>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4620      	mov	r0, r4
 8006694:	4629      	mov	r1, r5
 8006696:	f7f9 fe21 	bl	80002dc <__adddf3>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	f7fa faa9 	bl	8000bf8 <__aeabi_d2f>
 80066a6:	4603      	mov	r3, r0
 80066a8:	4a34      	ldr	r2, [pc, #208]	; (800677c <interrupt_WallCut+0x2a4>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	e09c      	b.n	80067e8 <interrupt_WallCut+0x310>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80066ae:	4b32      	ldr	r3, [pc, #200]	; (8006778 <interrupt_WallCut+0x2a0>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d168      	bne.n	8006788 <interrupt_WallCut+0x2b0>
				for (int i = 0; i <= 19; i++) {
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e01f      	b.n	80066fc <interrupt_WallCut+0x224>
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80066bc:	4a21      	ldr	r2, [pc, #132]	; (8006744 <interrupt_WallCut+0x26c>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3314      	adds	r3, #20
 80066c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ce:	4b28      	ldr	r3, [pc, #160]	; (8006770 <interrupt_WallCut+0x298>)
 80066d0:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 80066d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066dc:	dd0b      	ble.n	80066f6 <interrupt_WallCut+0x21e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80066de:	4a19      	ldr	r2, [pc, #100]	; (8006744 <interrupt_WallCut+0x26c>)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3314      	adds	r3, #20
 80066e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 80066f0:	4b1f      	ldr	r3, [pc, #124]	; (8006770 <interrupt_WallCut+0x298>)
 80066f2:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b13      	cmp	r3, #19
 8006700:	dddc      	ble.n	80066bc <interrupt_WallCut+0x1e4>
					}
				}
				NoWallCountL45 = 0;
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <interrupt_WallCut+0x29c>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <interrupt_WallCut+0x2a0>)
 800670a:	2201      	movs	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800670e:	4b18      	ldr	r3, [pc, #96]	; (8006770 <interrupt_WallCut+0x298>)
 8006710:	edd3 7a00 	vldr	s15, [r3]
 8006714:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006780 <interrupt_WallCut+0x2a8>
 8006718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800671c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006784 <interrupt_WallCut+0x2ac>
 8006720:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006724:	4b12      	ldr	r3, [pc, #72]	; (8006770 <interrupt_WallCut+0x298>)
 8006726:	ed93 7a00 	vldr	s14, [r3]
 800672a:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <interrupt_WallCut+0x2a4>)
 8006730:	edc3 7a00 	vstr	s15, [r3]
 8006734:	e058      	b.n	80067e8 <interrupt_WallCut+0x310>
 8006736:	bf00      	nop
 8006738:	d2f1a9fc 	.word	0xd2f1a9fc
 800673c:	3f50624d 	.word	0x3f50624d
 8006740:	20000572 	.word	0x20000572
 8006744:	20000298 	.word	0x20000298
 8006748:	200005d2 	.word	0x200005d2
 800674c:	200005d3 	.word	0x200005d3
 8006750:	200005d4 	.word	0x200005d4
 8006754:	20000598 	.word	0x20000598
 8006758:	200005b0 	.word	0x200005b0
 800675c:	20000238 	.word	0x20000238
 8006760:	2000023c 	.word	0x2000023c
 8006764:	20000594 	.word	0x20000594
 8006768:	200005ac 	.word	0x200005ac
 800676c:	2000043c 	.word	0x2000043c
 8006770:	200005d8 	.word	0x200005d8
 8006774:	200005a0 	.word	0x200005a0
 8006778:	200005cc 	.word	0x200005cc
 800677c:	200005b8 	.word	0x200005b8
 8006780:	43f68000 	.word	0x43f68000
 8006784:	00000000 	.word	0x00000000
			} else {
				NoWallCountL45++;
 8006788:	4bab      	ldr	r3, [pc, #684]	; (8006a38 <interrupt_WallCut+0x560>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	4aaa      	ldr	r2, [pc, #680]	; (8006a38 <interrupt_WallCut+0x560>)
 8006790:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006792:	4baa      	ldr	r3, [pc, #680]	; (8006a3c <interrupt_WallCut+0x564>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7f9 fefe 	bl	8000598 <__aeabi_f2d>
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	4ba7      	ldr	r3, [pc, #668]	; (8006a40 <interrupt_WallCut+0x568>)
 80067a2:	ed93 7a00 	vldr	s14, [r3]
 80067a6:	4ba7      	ldr	r3, [pc, #668]	; (8006a44 <interrupt_WallCut+0x56c>)
 80067a8:	edd3 7a00 	vldr	s15, [r3]
 80067ac:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80067b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80067b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067b8:	ee16 0a90 	vmov	r0, s13
 80067bc:	f7f9 feec 	bl	8000598 <__aeabi_f2d>
 80067c0:	a39b      	add	r3, pc, #620	; (adr r3, 8006a30 <interrupt_WallCut+0x558>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7f9 ff3f 	bl	8000648 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 fd83 	bl	80002dc <__adddf3>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	f7fa fa0b 	bl	8000bf8 <__aeabi_d2f>
 80067e2:	4603      	mov	r3, r0
 80067e4:	4a95      	ldr	r2, [pc, #596]	; (8006a3c <interrupt_WallCut+0x564>)
 80067e6:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80067e8:	4b97      	ldr	r3, [pc, #604]	; (8006a48 <interrupt_WallCut+0x570>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f113 0f81 	cmn.w	r3, #129	; 0x81
 80067f0:	da05      	bge.n	80067fe <interrupt_WallCut+0x326>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 80067f2:	4b96      	ldr	r3, [pc, #600]	; (8006a4c <interrupt_WallCut+0x574>)
 80067f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067f8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80067fc:	dd37      	ble.n	800686e <interrupt_WallCut+0x396>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 80067fe:	4b94      	ldr	r3, [pc, #592]	; (8006a50 <interrupt_WallCut+0x578>)
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8006806:	4b93      	ldr	r3, [pc, #588]	; (8006a54 <interrupt_WallCut+0x57c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	4a91      	ldr	r2, [pc, #580]	; (8006a54 <interrupt_WallCut+0x57c>)
 800680e:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 8006810:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <interrupt_WallCut+0x580>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006816:	4b91      	ldr	r3, [pc, #580]	; (8006a5c <interrupt_WallCut+0x584>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7f9 febc 	bl	8000598 <__aeabi_f2d>
 8006820:	4604      	mov	r4, r0
 8006822:	460d      	mov	r5, r1
 8006824:	4b86      	ldr	r3, [pc, #536]	; (8006a40 <interrupt_WallCut+0x568>)
 8006826:	ed93 7a00 	vldr	s14, [r3]
 800682a:	4b86      	ldr	r3, [pc, #536]	; (8006a44 <interrupt_WallCut+0x56c>)
 800682c:	edd3 7a00 	vldr	s15, [r3]
 8006830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006834:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006838:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800683c:	ee16 0a90 	vmov	r0, s13
 8006840:	f7f9 feaa 	bl	8000598 <__aeabi_f2d>
 8006844:	a37a      	add	r3, pc, #488	; (adr r3, 8006a30 <interrupt_WallCut+0x558>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fefd 	bl	8000648 <__aeabi_dmul>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4620      	mov	r0, r4
 8006854:	4629      	mov	r1, r5
 8006856:	f7f9 fd41 	bl	80002dc <__adddf3>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	f7fa f9c9 	bl	8000bf8 <__aeabi_d2f>
 8006866:	4603      	mov	r3, r0
 8006868:	4a7c      	ldr	r2, [pc, #496]	; (8006a5c <interrupt_WallCut+0x584>)
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	e073      	b.n	8006956 <interrupt_WallCut+0x47e>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800686e:	4b7a      	ldr	r3, [pc, #488]	; (8006a58 <interrupt_WallCut+0x580>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d13f      	bne.n	80068f6 <interrupt_WallCut+0x41e>
				for (int i = 0; i <= 19; i++) {
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	e01f      	b.n	80068bc <interrupt_WallCut+0x3e4>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 800687c:	4a73      	ldr	r2, [pc, #460]	; (8006a4c <interrupt_WallCut+0x574>)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	333c      	adds	r3, #60	; 0x3c
 8006882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800688e:	4b70      	ldr	r3, [pc, #448]	; (8006a50 <interrupt_WallCut+0x578>)
 8006890:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 8006894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689c:	dd0b      	ble.n	80068b6 <interrupt_WallCut+0x3de>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 800689e:	4a6b      	ldr	r2, [pc, #428]	; (8006a4c <interrupt_WallCut+0x574>)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	333c      	adds	r3, #60	; 0x3c
 80068a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80068b0:	4b67      	ldr	r3, [pc, #412]	; (8006a50 <interrupt_WallCut+0x578>)
 80068b2:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b13      	cmp	r3, #19
 80068c0:	dddc      	ble.n	800687c <interrupt_WallCut+0x3a4>
					}
				}
				NoWallCountR45 = 0;
 80068c2:	4b64      	ldr	r3, [pc, #400]	; (8006a54 <interrupt_WallCut+0x57c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 80068c8:	4b63      	ldr	r3, [pc, #396]	; (8006a58 <interrupt_WallCut+0x580>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 80068ce:	4b60      	ldr	r3, [pc, #384]	; (8006a50 <interrupt_WallCut+0x578>)
 80068d0:	edd3 7a00 	vldr	s15, [r3]
 80068d4:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8006a60 <interrupt_WallCut+0x588>
 80068d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068dc:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006a64 <interrupt_WallCut+0x58c>
 80068e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80068e4:	4b5a      	ldr	r3, [pc, #360]	; (8006a50 <interrupt_WallCut+0x578>)
 80068e6:	ed93 7a00 	vldr	s14, [r3]
 80068ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 80068ee:	4b5b      	ldr	r3, [pc, #364]	; (8006a5c <interrupt_WallCut+0x584>)
 80068f0:	edc3 7a00 	vstr	s15, [r3]
 80068f4:	e02f      	b.n	8006956 <interrupt_WallCut+0x47e>
			} else {
				NoWallCountR45++;
 80068f6:	4b57      	ldr	r3, [pc, #348]	; (8006a54 <interrupt_WallCut+0x57c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	4a55      	ldr	r2, [pc, #340]	; (8006a54 <interrupt_WallCut+0x57c>)
 80068fe:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006900:	4b56      	ldr	r3, [pc, #344]	; (8006a5c <interrupt_WallCut+0x584>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f7f9 fe47 	bl	8000598 <__aeabi_f2d>
 800690a:	4604      	mov	r4, r0
 800690c:	460d      	mov	r5, r1
 800690e:	4b4c      	ldr	r3, [pc, #304]	; (8006a40 <interrupt_WallCut+0x568>)
 8006910:	ed93 7a00 	vldr	s14, [r3]
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <interrupt_WallCut+0x56c>)
 8006916:	edd3 7a00 	vldr	s15, [r3]
 800691a:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 800691e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006922:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006926:	ee16 0a90 	vmov	r0, s13
 800692a:	f7f9 fe35 	bl	8000598 <__aeabi_f2d>
 800692e:	a340      	add	r3, pc, #256	; (adr r3, 8006a30 <interrupt_WallCut+0x558>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fe88 	bl	8000648 <__aeabi_dmul>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800693c:	4620      	mov	r0, r4
 800693e:	4629      	mov	r1, r5
 8006940:	f7f9 fccc 	bl	80002dc <__adddf3>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	f7fa f954 	bl	8000bf8 <__aeabi_d2f>
 8006950:	4603      	mov	r3, r0
 8006952:	4a42      	ldr	r2, [pc, #264]	; (8006a5c <interrupt_WallCut+0x584>)
 8006954:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006956:	4b3c      	ldr	r3, [pc, #240]	; (8006a48 <interrupt_WallCut+0x570>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800695e:	dd5f      	ble.n	8006a20 <interrupt_WallCut+0x548>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 8006960:	4b41      	ldr	r3, [pc, #260]	; (8006a68 <interrupt_WallCut+0x590>)
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006968:	4b40      	ldr	r3, [pc, #256]	; (8006a6c <interrupt_WallCut+0x594>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	4a3f      	ldr	r2, [pc, #252]	; (8006a6c <interrupt_WallCut+0x594>)
 8006970:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006972:	2000      	movs	r0, #0
 8006974:	f000 fd16 	bl	80073a4 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006978:	4b3d      	ldr	r3, [pc, #244]	; (8006a70 <interrupt_WallCut+0x598>)
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800697e:	4b3d      	ldr	r3, [pc, #244]	; (8006a74 <interrupt_WallCut+0x59c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f7f9 fe08 	bl	8000598 <__aeabi_f2d>
 8006988:	4604      	mov	r4, r0
 800698a:	460d      	mov	r5, r1
 800698c:	4b2c      	ldr	r3, [pc, #176]	; (8006a40 <interrupt_WallCut+0x568>)
 800698e:	ed93 7a00 	vldr	s14, [r3]
 8006992:	4b2c      	ldr	r3, [pc, #176]	; (8006a44 <interrupt_WallCut+0x56c>)
 8006994:	edd3 7a00 	vldr	s15, [r3]
 8006998:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 800699c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069a4:	ee16 0a90 	vmov	r0, s13
 80069a8:	f7f9 fdf6 	bl	8000598 <__aeabi_f2d>
 80069ac:	a320      	add	r3, pc, #128	; (adr r3, 8006a30 <interrupt_WallCut+0x558>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fe49 	bl	8000648 <__aeabi_dmul>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80069ba:	4620      	mov	r0, r4
 80069bc:	4629      	mov	r1, r5
 80069be:	f7f9 fc8d 	bl	80002dc <__adddf3>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	f7fa f915 	bl	8000bf8 <__aeabi_d2f>
 80069ce:	4603      	mov	r3, r0
 80069d0:	4a28      	ldr	r2, [pc, #160]	; (8006a74 <interrupt_WallCut+0x59c>)
 80069d2:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 80069d4:	4b28      	ldr	r3, [pc, #160]	; (8006a78 <interrupt_WallCut+0x5a0>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	f040 8130 	bne.w	8006c3e <interrupt_WallCut+0x766>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 80069de:	4b27      	ldr	r3, [pc, #156]	; (8006a7c <interrupt_WallCut+0x5a4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7f9 fdd8 	bl	8000598 <__aeabi_f2d>
 80069e8:	4604      	mov	r4, r0
 80069ea:	460d      	mov	r5, r1
 80069ec:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <interrupt_WallCut+0x5a8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7f9 fdd1 	bl	8000598 <__aeabi_f2d>
 80069f6:	a30e      	add	r3, pc, #56	; (adr r3, 8006a30 <interrupt_WallCut+0x558>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f7f9 fe24 	bl	8000648 <__aeabi_dmul>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4620      	mov	r0, r4
 8006a06:	4629      	mov	r1, r5
 8006a08:	f7f9 fc68 	bl	80002dc <__adddf3>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4610      	mov	r0, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	f7fa f8f0 	bl	8000bf8 <__aeabi_d2f>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <interrupt_WallCut+0x5a4>)
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e10e      	b.n	8006c3e <interrupt_WallCut+0x766>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8006a20:	4b13      	ldr	r3, [pc, #76]	; (8006a70 <interrupt_WallCut+0x598>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f040 80b3 	bne.w	8006b90 <interrupt_WallCut+0x6b8>
				for (int i = 0; i <= 19; i++) {
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	e049      	b.n	8006ac4 <interrupt_WallCut+0x5ec>
 8006a30:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a34:	3f50624d 	.word	0x3f50624d
 8006a38:	200005a0 	.word	0x200005a0
 8006a3c:	200005b8 	.word	0x200005b8
 8006a40:	20000238 	.word	0x20000238
 8006a44:	2000023c 	.word	0x2000023c
 8006a48:	2000043c 	.word	0x2000043c
 8006a4c:	20000298 	.word	0x20000298
 8006a50:	200005dc 	.word	0x200005dc
 8006a54:	2000059c 	.word	0x2000059c
 8006a58:	200005cd 	.word	0x200005cd
 8006a5c:	200005b4 	.word	0x200005b4
 8006a60:	44484000 	.word	0x44484000
 8006a64:	00000000 	.word	0x00000000
 8006a68:	200005e0 	.word	0x200005e0
 8006a6c:	200005a8 	.word	0x200005a8
 8006a70:	200005ce 	.word	0x200005ce
 8006a74:	200005c8 	.word	0x200005c8
 8006a78:	200005d0 	.word	0x200005d0
 8006a7c:	200005c0 	.word	0x200005c0
 8006a80:	200004b8 	.word	0x200004b8
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006a84:	4aac      	ldr	r2, [pc, #688]	; (8006d38 <interrupt_WallCut+0x860>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3314      	adds	r3, #20
 8006a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a96:	4ba9      	ldr	r3, [pc, #676]	; (8006d3c <interrupt_WallCut+0x864>)
 8006a98:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8006a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	dd0b      	ble.n	8006abe <interrupt_WallCut+0x5e6>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006aa6:	4aa4      	ldr	r2, [pc, #656]	; (8006d38 <interrupt_WallCut+0x860>)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3314      	adds	r3, #20
 8006aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006ab8:	4ba0      	ldr	r3, [pc, #640]	; (8006d3c <interrupt_WallCut+0x864>)
 8006aba:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	607b      	str	r3, [r7, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b13      	cmp	r3, #19
 8006ac8:	dddc      	ble.n	8006a84 <interrupt_WallCut+0x5ac>
					}
				}
				NoWallCountL45slant = 0;
 8006aca:	4b9d      	ldr	r3, [pc, #628]	; (8006d40 <interrupt_WallCut+0x868>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006ad0:	4b9c      	ldr	r3, [pc, #624]	; (8006d44 <interrupt_WallCut+0x86c>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	f000 fc64 	bl	80073a4 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006adc:	4b97      	ldr	r3, [pc, #604]	; (8006d3c <interrupt_WallCut+0x864>)
 8006ade:	edd3 7a00 	vldr	s15, [r3]
 8006ae2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006d48 <interrupt_WallCut+0x870>
 8006ae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006aea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af2:	db26      	blt.n	8006b42 <interrupt_WallCut+0x66a>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006af4:	4b91      	ldr	r3, [pc, #580]	; (8006d3c <interrupt_WallCut+0x864>)
 8006af6:	edd3 7a00 	vldr	s15, [r3]
 8006afa:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006d48 <interrupt_WallCut+0x870>
 8006afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b02:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8006d4c <interrupt_WallCut+0x874>
 8006b06:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006b0a:	4b8c      	ldr	r3, [pc, #560]	; (8006d3c <interrupt_WallCut+0x864>)
 8006b0c:	ed93 7a00 	vldr	s14, [r3]
 8006b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006b14:	4b8e      	ldr	r3, [pc, #568]	; (8006d50 <interrupt_WallCut+0x878>)
 8006b16:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006b1a:	4b88      	ldr	r3, [pc, #544]	; (8006d3c <interrupt_WallCut+0x864>)
 8006b1c:	edd3 7a00 	vldr	s15, [r3]
 8006b20:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006d48 <interrupt_WallCut+0x870>
 8006b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b28:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006d4c <interrupt_WallCut+0x874>
 8006b2c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006b30:	4b82      	ldr	r3, [pc, #520]	; (8006d3c <interrupt_WallCut+0x864>)
 8006b32:	ed93 7a00 	vldr	s14, [r3]
 8006b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006b3a:	4b86      	ldr	r3, [pc, #536]	; (8006d54 <interrupt_WallCut+0x87c>)
 8006b3c:	edc3 7a00 	vstr	s15, [r3]
 8006b40:	e07a      	b.n	8006c38 <interrupt_WallCut+0x760>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006b42:	4b7e      	ldr	r3, [pc, #504]	; (8006d3c <interrupt_WallCut+0x864>)
 8006b44:	edd3 7a00 	vldr	s15, [r3]
 8006b48:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8006d48 <interrupt_WallCut+0x870>
 8006b4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b50:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006d4c <interrupt_WallCut+0x874>
 8006b54:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006b58:	4b78      	ldr	r3, [pc, #480]	; (8006d3c <interrupt_WallCut+0x864>)
 8006b5a:	ed93 7a00 	vldr	s14, [r3]
 8006b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006b62:	4b7b      	ldr	r3, [pc, #492]	; (8006d50 <interrupt_WallCut+0x878>)
 8006b64:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006b68:	4b74      	ldr	r3, [pc, #464]	; (8006d3c <interrupt_WallCut+0x864>)
 8006b6a:	edd3 7a00 	vldr	s15, [r3]
 8006b6e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8006d48 <interrupt_WallCut+0x870>
 8006b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b76:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006d4c <interrupt_WallCut+0x874>
 8006b7a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006b7e:	4b6f      	ldr	r3, [pc, #444]	; (8006d3c <interrupt_WallCut+0x864>)
 8006b80:	ed93 7a00 	vldr	s14, [r3]
 8006b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8006b88:	4b72      	ldr	r3, [pc, #456]	; (8006d54 <interrupt_WallCut+0x87c>)
 8006b8a:	edc3 7a00 	vstr	s15, [r3]
 8006b8e:	e053      	b.n	8006c38 <interrupt_WallCut+0x760>
				}

			} else {
				NoWallCountL45slant++;
 8006b90:	4b6b      	ldr	r3, [pc, #428]	; (8006d40 <interrupt_WallCut+0x868>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a6a      	ldr	r2, [pc, #424]	; (8006d40 <interrupt_WallCut+0x868>)
 8006b98:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006b9a:	4b6e      	ldr	r3, [pc, #440]	; (8006d54 <interrupt_WallCut+0x87c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7f9 fcfa 	bl	8000598 <__aeabi_f2d>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	4b6b      	ldr	r3, [pc, #428]	; (8006d58 <interrupt_WallCut+0x880>)
 8006baa:	ed93 7a00 	vldr	s14, [r3]
 8006bae:	4b6b      	ldr	r3, [pc, #428]	; (8006d5c <interrupt_WallCut+0x884>)
 8006bb0:	edd3 7a00 	vldr	s15, [r3]
 8006bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006bb8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006bbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006bc0:	ee16 0a90 	vmov	r0, s13
 8006bc4:	f7f9 fce8 	bl	8000598 <__aeabi_f2d>
 8006bc8:	a359      	add	r3, pc, #356	; (adr r3, 8006d30 <interrupt_WallCut+0x858>)
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7f9 fd3b 	bl	8000648 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 fb7f 	bl	80002dc <__adddf3>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4610      	mov	r0, r2
 8006be4:	4619      	mov	r1, r3
 8006be6:	f7fa f807 	bl	8000bf8 <__aeabi_d2f>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4a59      	ldr	r2, [pc, #356]	; (8006d54 <interrupt_WallCut+0x87c>)
 8006bee:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006bf0:	4b5b      	ldr	r3, [pc, #364]	; (8006d60 <interrupt_WallCut+0x888>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d11f      	bne.n	8006c38 <interrupt_WallCut+0x760>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006bf8:	4b55      	ldr	r3, [pc, #340]	; (8006d50 <interrupt_WallCut+0x878>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7f9 fccb 	bl	8000598 <__aeabi_f2d>
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
 8006c06:	4b57      	ldr	r3, [pc, #348]	; (8006d64 <interrupt_WallCut+0x88c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7f9 fcc4 	bl	8000598 <__aeabi_f2d>
 8006c10:	a347      	add	r3, pc, #284	; (adr r3, 8006d30 <interrupt_WallCut+0x858>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fd17 	bl	8000648 <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fb5b 	bl	80002dc <__adddf3>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7f9 ffe3 	bl	8000bf8 <__aeabi_d2f>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4a46      	ldr	r2, [pc, #280]	; (8006d50 <interrupt_WallCut+0x878>)
 8006c36:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006c38:	4b49      	ldr	r3, [pc, #292]	; (8006d60 <interrupt_WallCut+0x888>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006c3e:	4b4a      	ldr	r3, [pc, #296]	; (8006d68 <interrupt_WallCut+0x890>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8006c46:	dd6a      	ble.n	8006d1e <interrupt_WallCut+0x846>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006c48:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <interrupt_WallCut+0x894>)
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006c50:	4b47      	ldr	r3, [pc, #284]	; (8006d70 <interrupt_WallCut+0x898>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	4a46      	ldr	r2, [pc, #280]	; (8006d70 <interrupt_WallCut+0x898>)
 8006c58:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f000 fb90 	bl	8007380 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006c60:	4b44      	ldr	r3, [pc, #272]	; (8006d74 <interrupt_WallCut+0x89c>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006c66:	4b44      	ldr	r3, [pc, #272]	; (8006d78 <interrupt_WallCut+0x8a0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7f9 fc94 	bl	8000598 <__aeabi_f2d>
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	4b38      	ldr	r3, [pc, #224]	; (8006d58 <interrupt_WallCut+0x880>)
 8006c76:	ed93 7a00 	vldr	s14, [r3]
 8006c7a:	4b38      	ldr	r3, [pc, #224]	; (8006d5c <interrupt_WallCut+0x884>)
 8006c7c:	edd3 7a00 	vldr	s15, [r3]
 8006c80:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006c84:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c8c:	ee16 0a90 	vmov	r0, s13
 8006c90:	f7f9 fc82 	bl	8000598 <__aeabi_f2d>
 8006c94:	a326      	add	r3, pc, #152	; (adr r3, 8006d30 <interrupt_WallCut+0x858>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 fcd5 	bl	8000648 <__aeabi_dmul>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 fb19 	bl	80002dc <__adddf3>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4610      	mov	r0, r2
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	f7f9 ffa1 	bl	8000bf8 <__aeabi_d2f>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4a2f      	ldr	r2, [pc, #188]	; (8006d78 <interrupt_WallCut+0x8a0>)
 8006cba:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006cbc:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <interrupt_WallCut+0x8a4>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	f040 81a8 	bne.w	8007016 <interrupt_WallCut+0xb3e>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	; (8006d80 <interrupt_WallCut+0x8a8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7f9 fc64 	bl	8000598 <__aeabi_f2d>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	4b20      	ldr	r3, [pc, #128]	; (8006d58 <interrupt_WallCut+0x880>)
 8006cd6:	ed93 7a00 	vldr	s14, [r3]
 8006cda:	4b20      	ldr	r3, [pc, #128]	; (8006d5c <interrupt_WallCut+0x884>)
 8006cdc:	edd3 7a00 	vldr	s15, [r3]
 8006ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006ce4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ce8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006cec:	ee16 0a90 	vmov	r0, s13
 8006cf0:	f7f9 fc52 	bl	8000598 <__aeabi_f2d>
 8006cf4:	a30e      	add	r3, pc, #56	; (adr r3, 8006d30 <interrupt_WallCut+0x858>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f7f9 fca5 	bl	8000648 <__aeabi_dmul>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006d02:	4620      	mov	r0, r4
 8006d04:	4629      	mov	r1, r5
 8006d06:	f7f9 fae9 	bl	80002dc <__adddf3>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4619      	mov	r1, r3
 8006d12:	f7f9 ff71 	bl	8000bf8 <__aeabi_d2f>
 8006d16:	4603      	mov	r3, r0
 8006d18:	4a19      	ldr	r2, [pc, #100]	; (8006d80 <interrupt_WallCut+0x8a8>)
 8006d1a:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006d1c:	e17b      	b.n	8007016 <interrupt_WallCut+0xb3e>
			if (NoWallCountR45slant_flag == 0) {
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <interrupt_WallCut+0x89c>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 80b4 	bne.w	8006e90 <interrupt_WallCut+0x9b8>
				for (int i = 0; i <= 19; i++) {
 8006d28:	2300      	movs	r3, #0
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	e04a      	b.n	8006dc4 <interrupt_WallCut+0x8ec>
 8006d2e:	bf00      	nop
 8006d30:	d2f1a9fc 	.word	0xd2f1a9fc
 8006d34:	3f50624d 	.word	0x3f50624d
 8006d38:	20000298 	.word	0x20000298
 8006d3c:	200005e0 	.word	0x200005e0
 8006d40:	200005a8 	.word	0x200005a8
 8006d44:	200005ce 	.word	0x200005ce
 8006d48:	455ac000 	.word	0x455ac000
 8006d4c:	00000000 	.word	0x00000000
 8006d50:	200005c0 	.word	0x200005c0
 8006d54:	200005c8 	.word	0x200005c8
 8006d58:	20000238 	.word	0x20000238
 8006d5c:	2000023c 	.word	0x2000023c
 8006d60:	200005d0 	.word	0x200005d0
 8006d64:	200004b8 	.word	0x200004b8
 8006d68:	2000043c 	.word	0x2000043c
 8006d6c:	200005e4 	.word	0x200005e4
 8006d70:	200005a4 	.word	0x200005a4
 8006d74:	200005cf 	.word	0x200005cf
 8006d78:	200005c4 	.word	0x200005c4
 8006d7c:	200005d1 	.word	0x200005d1
 8006d80:	200005bc 	.word	0x200005bc
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006d84:	4aa8      	ldr	r2, [pc, #672]	; (8007028 <interrupt_WallCut+0xb50>)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	333c      	adds	r3, #60	; 0x3c
 8006d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d96:	4ba5      	ldr	r3, [pc, #660]	; (800702c <interrupt_WallCut+0xb54>)
 8006d98:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da4:	dd0b      	ble.n	8006dbe <interrupt_WallCut+0x8e6>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006da6:	4aa0      	ldr	r2, [pc, #640]	; (8007028 <interrupt_WallCut+0xb50>)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	333c      	adds	r3, #60	; 0x3c
 8006dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006db8:	4b9c      	ldr	r3, [pc, #624]	; (800702c <interrupt_WallCut+0xb54>)
 8006dba:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b13      	cmp	r3, #19
 8006dc8:	dddc      	ble.n	8006d84 <interrupt_WallCut+0x8ac>
				NoWallCountR45slant = 0;
 8006dca:	4b99      	ldr	r3, [pc, #612]	; (8007030 <interrupt_WallCut+0xb58>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006dd0:	4b98      	ldr	r3, [pc, #608]	; (8007034 <interrupt_WallCut+0xb5c>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	f000 fad2 	bl	8007380 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006ddc:	4b93      	ldr	r3, [pc, #588]	; (800702c <interrupt_WallCut+0xb54>)
 8006dde:	edd3 7a00 	vldr	s15, [r3]
 8006de2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8007038 <interrupt_WallCut+0xb60>
 8006de6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df2:	db26      	blt.n	8006e42 <interrupt_WallCut+0x96a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006df4:	4b8d      	ldr	r3, [pc, #564]	; (800702c <interrupt_WallCut+0xb54>)
 8006df6:	edd3 7a00 	vldr	s15, [r3]
 8006dfa:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8007038 <interrupt_WallCut+0xb60>
 8006dfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e02:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800703c <interrupt_WallCut+0xb64>
 8006e06:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006e0a:	4b88      	ldr	r3, [pc, #544]	; (800702c <interrupt_WallCut+0xb54>)
 8006e0c:	ed93 7a00 	vldr	s14, [r3]
 8006e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006e14:	4b8a      	ldr	r3, [pc, #552]	; (8007040 <interrupt_WallCut+0xb68>)
 8006e16:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006e1a:	4b84      	ldr	r3, [pc, #528]	; (800702c <interrupt_WallCut+0xb54>)
 8006e1c:	edd3 7a00 	vldr	s15, [r3]
 8006e20:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8007038 <interrupt_WallCut+0xb60>
 8006e24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e28:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800703c <interrupt_WallCut+0xb64>
 8006e2c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006e30:	4b7e      	ldr	r3, [pc, #504]	; (800702c <interrupt_WallCut+0xb54>)
 8006e32:	ed93 7a00 	vldr	s14, [r3]
 8006e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006e3a:	4b82      	ldr	r3, [pc, #520]	; (8007044 <interrupt_WallCut+0xb6c>)
 8006e3c:	edc3 7a00 	vstr	s15, [r3]
 8006e40:	e085      	b.n	8006f4e <interrupt_WallCut+0xa76>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006e42:	4b7a      	ldr	r3, [pc, #488]	; (800702c <interrupt_WallCut+0xb54>)
 8006e44:	edd3 7a00 	vldr	s15, [r3]
 8006e48:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8007038 <interrupt_WallCut+0xb60>
 8006e4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e50:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800703c <interrupt_WallCut+0xb64>
 8006e54:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006e58:	4b74      	ldr	r3, [pc, #464]	; (800702c <interrupt_WallCut+0xb54>)
 8006e5a:	ed93 7a00 	vldr	s14, [r3]
 8006e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006e62:	4b77      	ldr	r3, [pc, #476]	; (8007040 <interrupt_WallCut+0xb68>)
 8006e64:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006e68:	4b70      	ldr	r3, [pc, #448]	; (800702c <interrupt_WallCut+0xb54>)
 8006e6a:	edd3 7a00 	vldr	s15, [r3]
 8006e6e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8007038 <interrupt_WallCut+0xb60>
 8006e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e76:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800703c <interrupt_WallCut+0xb64>
 8006e7a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006e7e:	4b6b      	ldr	r3, [pc, #428]	; (800702c <interrupt_WallCut+0xb54>)
 8006e80:	ed93 7a00 	vldr	s14, [r3]
 8006e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006e88:	4b6e      	ldr	r3, [pc, #440]	; (8007044 <interrupt_WallCut+0xb6c>)
 8006e8a:	edc3 7a00 	vstr	s15, [r3]
 8006e8e:	e05e      	b.n	8006f4e <interrupt_WallCut+0xa76>
				NoWallCountR45slant++;
 8006e90:	4b67      	ldr	r3, [pc, #412]	; (8007030 <interrupt_WallCut+0xb58>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	4a66      	ldr	r2, [pc, #408]	; (8007030 <interrupt_WallCut+0xb58>)
 8006e98:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006e9a:	4b6a      	ldr	r3, [pc, #424]	; (8007044 <interrupt_WallCut+0xb6c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7f9 fb7a 	bl	8000598 <__aeabi_f2d>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	4b67      	ldr	r3, [pc, #412]	; (8007048 <interrupt_WallCut+0xb70>)
 8006eaa:	ed93 7a00 	vldr	s14, [r3]
 8006eae:	4b67      	ldr	r3, [pc, #412]	; (800704c <interrupt_WallCut+0xb74>)
 8006eb0:	edd3 7a00 	vldr	s15, [r3]
 8006eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006eb8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ebc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ec0:	ee16 0a90 	vmov	r0, s13
 8006ec4:	f7f9 fb68 	bl	8000598 <__aeabi_f2d>
 8006ec8:	a355      	add	r3, pc, #340	; (adr r3, 8007020 <interrupt_WallCut+0xb48>)
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 fbbb 	bl	8000648 <__aeabi_dmul>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 f9ff 	bl	80002dc <__adddf3>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f7f9 fe87 	bl	8000bf8 <__aeabi_d2f>
 8006eea:	4603      	mov	r3, r0
 8006eec:	4a55      	ldr	r2, [pc, #340]	; (8007044 <interrupt_WallCut+0xb6c>)
 8006eee:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006ef0:	4b57      	ldr	r3, [pc, #348]	; (8007050 <interrupt_WallCut+0xb78>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d12a      	bne.n	8006f4e <interrupt_WallCut+0xa76>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006ef8:	4b51      	ldr	r3, [pc, #324]	; (8007040 <interrupt_WallCut+0xb68>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7f9 fb4b 	bl	8000598 <__aeabi_f2d>
 8006f02:	4604      	mov	r4, r0
 8006f04:	460d      	mov	r5, r1
 8006f06:	4b50      	ldr	r3, [pc, #320]	; (8007048 <interrupt_WallCut+0xb70>)
 8006f08:	ed93 7a00 	vldr	s14, [r3]
 8006f0c:	4b4f      	ldr	r3, [pc, #316]	; (800704c <interrupt_WallCut+0xb74>)
 8006f0e:	edd3 7a00 	vldr	s15, [r3]
 8006f12:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006f16:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006f1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f1e:	ee16 0a90 	vmov	r0, s13
 8006f22:	f7f9 fb39 	bl	8000598 <__aeabi_f2d>
 8006f26:	a33e      	add	r3, pc, #248	; (adr r3, 8007020 <interrupt_WallCut+0xb48>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 fb8c 	bl	8000648 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 f9d0 	bl	80002dc <__adddf3>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	f7f9 fe58 	bl	8000bf8 <__aeabi_d2f>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <interrupt_WallCut+0xb68>)
 8006f4c:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006f4e:	4b40      	ldr	r3, [pc, #256]	; (8007050 <interrupt_WallCut+0xb78>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	701a      	strb	r2, [r3, #0]
}
 8006f54:	e05f      	b.n	8007016 <interrupt_WallCut+0xb3e>
		NoWallCountL90 = 0;
 8006f56:	4b3f      	ldr	r3, [pc, #252]	; (8007054 <interrupt_WallCut+0xb7c>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006f5c:	4b3e      	ldr	r3, [pc, #248]	; (8007058 <interrupt_WallCut+0xb80>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006f62:	4b3e      	ldr	r3, [pc, #248]	; (800705c <interrupt_WallCut+0xb84>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006f68:	4b3d      	ldr	r3, [pc, #244]	; (8007060 <interrupt_WallCut+0xb88>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006f6e:	4b3d      	ldr	r3, [pc, #244]	; (8007064 <interrupt_WallCut+0xb8c>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006f74:	4b2e      	ldr	r3, [pc, #184]	; (8007030 <interrupt_WallCut+0xb58>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006f7a:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <interrupt_WallCut+0xb90>)
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006f82:	4b3a      	ldr	r3, [pc, #232]	; (800706c <interrupt_WallCut+0xb94>)
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006f8a:	4b39      	ldr	r3, [pc, #228]	; (8007070 <interrupt_WallCut+0xb98>)
 8006f8c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006f90:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006f92:	4b38      	ldr	r3, [pc, #224]	; (8007074 <interrupt_WallCut+0xb9c>)
 8006f94:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006f98:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006f9a:	4b37      	ldr	r3, [pc, #220]	; (8007078 <interrupt_WallCut+0xba0>)
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006fa2:	4b27      	ldr	r3, [pc, #156]	; (8007040 <interrupt_WallCut+0xb68>)
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006faa:	4b34      	ldr	r3, [pc, #208]	; (800707c <interrupt_WallCut+0xba4>)
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006fb2:	4b24      	ldr	r3, [pc, #144]	; (8007044 <interrupt_WallCut+0xb6c>)
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006fba:	4b31      	ldr	r3, [pc, #196]	; (8007080 <interrupt_WallCut+0xba8>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006fc0:	4b30      	ldr	r3, [pc, #192]	; (8007084 <interrupt_WallCut+0xbac>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006fc6:	4b30      	ldr	r3, [pc, #192]	; (8007088 <interrupt_WallCut+0xbb0>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <interrupt_WallCut+0xb5c>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006fd2:	4b2e      	ldr	r3, [pc, #184]	; (800708c <interrupt_WallCut+0xbb4>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006fd8:	4b1d      	ldr	r3, [pc, #116]	; (8007050 <interrupt_WallCut+0xb78>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006fde:	4b2c      	ldr	r3, [pc, #176]	; (8007090 <interrupt_WallCut+0xbb8>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006fe4:	4b2b      	ldr	r3, [pc, #172]	; (8007094 <interrupt_WallCut+0xbbc>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006fea:	4b2b      	ldr	r3, [pc, #172]	; (8007098 <interrupt_WallCut+0xbc0>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006ff0:	4b29      	ldr	r3, [pc, #164]	; (8007098 <interrupt_WallCut+0xbc0>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006ff6:	4b29      	ldr	r3, [pc, #164]	; (800709c <interrupt_WallCut+0xbc4>)
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006ffe:	4b28      	ldr	r3, [pc, #160]	; (80070a0 <interrupt_WallCut+0xbc8>)
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8007006:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <interrupt_WallCut+0xbcc>)
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <interrupt_WallCut+0xb54>)
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bdb0      	pop	{r4, r5, r7, pc}
 800701e:	bf00      	nop
 8007020:	d2f1a9fc 	.word	0xd2f1a9fc
 8007024:	3f50624d 	.word	0x3f50624d
 8007028:	20000298 	.word	0x20000298
 800702c:	200005e4 	.word	0x200005e4
 8007030:	200005a4 	.word	0x200005a4
 8007034:	200005cf 	.word	0x200005cf
 8007038:	455ac000 	.word	0x455ac000
 800703c:	00000000 	.word	0x00000000
 8007040:	200005bc 	.word	0x200005bc
 8007044:	200005c4 	.word	0x200005c4
 8007048:	20000238 	.word	0x20000238
 800704c:	2000023c 	.word	0x2000023c
 8007050:	200005d1 	.word	0x200005d1
 8007054:	20000598 	.word	0x20000598
 8007058:	20000594 	.word	0x20000594
 800705c:	200005a0 	.word	0x200005a0
 8007060:	2000059c 	.word	0x2000059c
 8007064:	200005a8 	.word	0x200005a8
 8007068:	200005b0 	.word	0x200005b0
 800706c:	200005ac 	.word	0x200005ac
 8007070:	200005b8 	.word	0x200005b8
 8007074:	200005b4 	.word	0x200005b4
 8007078:	200005c0 	.word	0x200005c0
 800707c:	200005c8 	.word	0x200005c8
 8007080:	200005cc 	.word	0x200005cc
 8007084:	200005cd 	.word	0x200005cd
 8007088:	200005ce 	.word	0x200005ce
 800708c:	200005d0 	.word	0x200005d0
 8007090:	200005d2 	.word	0x200005d2
 8007094:	200005d3 	.word	0x200005d3
 8007098:	200005d4 	.word	0x200005d4
 800709c:	200005d8 	.word	0x200005d8
 80070a0:	200005dc 	.word	0x200005dc
 80070a4:	200005e0 	.word	0x200005e0

080070a8 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070be:	f00c f957 	bl	8013370 <HAL_GPIO_WritePin>
}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	2140      	movs	r1, #64	; 0x40
 80070dc:	4803      	ldr	r0, [pc, #12]	; (80070ec <pl_yellow_LED_3+0x20>)
 80070de:	f00c f947 	bl	8013370 <HAL_GPIO_WritePin>
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	48000800 	.word	0x48000800

080070f0 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007102:	4803      	ldr	r0, [pc, #12]	; (8007110 <pl_yellow_LED_6+0x20>)
 8007104:	f00c f934 	bl	8013370 <HAL_GPIO_WritePin>
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	48000400 	.word	0x48000400

08007114 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007126:	4803      	ldr	r0, [pc, #12]	; (8007134 <pl_yellow_LED_8+0x20>)
 8007128:	f00c f922 	bl	8013370 <HAL_GPIO_WritePin>
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	48000400 	.word	0x48000400

08007138 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 800713c:	2200      	movs	r2, #0
 800713e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007146:	f00c f913 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 800714a:	2200      	movs	r2, #0
 800714c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007154:	f00c f90c 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007158:	2200      	movs	r2, #0
 800715a:	2140      	movs	r1, #64	; 0x40
 800715c:	4811      	ldr	r0, [pc, #68]	; (80071a4 <pl_yellow_LED_off+0x6c>)
 800715e:	f00c f907 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007162:	2200      	movs	r2, #0
 8007164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007168:	480f      	ldr	r0, [pc, #60]	; (80071a8 <pl_yellow_LED_off+0x70>)
 800716a:	f00c f901 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800716e:	2200      	movs	r2, #0
 8007170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007174:	480c      	ldr	r0, [pc, #48]	; (80071a8 <pl_yellow_LED_off+0x70>)
 8007176:	f00c f8fb 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800717a:	2200      	movs	r2, #0
 800717c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007180:	4809      	ldr	r0, [pc, #36]	; (80071a8 <pl_yellow_LED_off+0x70>)
 8007182:	f00c f8f5 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007186:	2200      	movs	r2, #0
 8007188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800718c:	4806      	ldr	r0, [pc, #24]	; (80071a8 <pl_yellow_LED_off+0x70>)
 800718e:	f00c f8ef 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007192:	2200      	movs	r2, #0
 8007194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007198:	4803      	ldr	r0, [pc, #12]	; (80071a8 <pl_yellow_LED_off+0x70>)
 800719a:	f00c f8e9 	bl	8013370 <HAL_GPIO_WritePin>
}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	48000800 	.word	0x48000800
 80071a8:	48000400 	.word	0x48000400

080071ac <pl_yellow_LED_on>:

void pl_yellow_LED_on(void){
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80071b0:	2201      	movs	r2, #1
 80071b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071ba:	f00c f8d9 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 80071be:	2201      	movs	r2, #1
 80071c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071c8:	f00c f8d2 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80071cc:	2201      	movs	r2, #1
 80071ce:	2140      	movs	r1, #64	; 0x40
 80071d0:	4811      	ldr	r0, [pc, #68]	; (8007218 <pl_yellow_LED_on+0x6c>)
 80071d2:	f00c f8cd 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80071d6:	2201      	movs	r2, #1
 80071d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071dc:	480f      	ldr	r0, [pc, #60]	; (800721c <pl_yellow_LED_on+0x70>)
 80071de:	f00c f8c7 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 80071e2:	2201      	movs	r2, #1
 80071e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071e8:	480c      	ldr	r0, [pc, #48]	; (800721c <pl_yellow_LED_on+0x70>)
 80071ea:	f00c f8c1 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 80071ee:	2201      	movs	r2, #1
 80071f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071f4:	4809      	ldr	r0, [pc, #36]	; (800721c <pl_yellow_LED_on+0x70>)
 80071f6:	f00c f8bb 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 80071fa:	2201      	movs	r2, #1
 80071fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007200:	4806      	ldr	r0, [pc, #24]	; (800721c <pl_yellow_LED_on+0x70>)
 8007202:	f00c f8b5 	bl	8013370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007206:	2201      	movs	r2, #1
 8007208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800720c:	4803      	ldr	r0, [pc, #12]	; (800721c <pl_yellow_LED_on+0x70>)
 800720e:	f00c f8af 	bl	8013370 <HAL_GPIO_WritePin>
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	48000800 	.word	0x48000800
 800721c:	48000400 	.word	0x48000400

08007220 <pl_yellow_LED_count>:


void pl_yellow_LED_count(unsigned char yy){
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007260:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007268:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d007      	beq.n	8007280 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8007270:	2201      	movs	r2, #1
 8007272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800727a:	f00c f879 	bl	8013370 <HAL_GPIO_WritePin>
 800727e:	e006      	b.n	800728e <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007280:	2200      	movs	r2, #0
 8007282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800728a:	f00c f871 	bl	8013370 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8007294:	2201      	movs	r2, #1
 8007296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800729a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800729e:	f00c f867 	bl	8013370 <HAL_GPIO_WritePin>
 80072a2:	e006      	b.n	80072b2 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80072a4:	2200      	movs	r2, #0
 80072a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072ae:	f00c f85f 	bl	8013370 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 80072b2:	7b7b      	ldrb	r3, [r7, #13]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80072b8:	2201      	movs	r2, #1
 80072ba:	2140      	movs	r1, #64	; 0x40
 80072bc:	482e      	ldr	r0, [pc, #184]	; (8007378 <pl_yellow_LED_count+0x158>)
 80072be:	f00c f857 	bl	8013370 <HAL_GPIO_WritePin>
 80072c2:	e004      	b.n	80072ce <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 80072c4:	2200      	movs	r2, #0
 80072c6:	2140      	movs	r1, #64	; 0x40
 80072c8:	482b      	ldr	r0, [pc, #172]	; (8007378 <pl_yellow_LED_count+0x158>)
 80072ca:	f00c f851 	bl	8013370 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 80072ce:	7b3b      	ldrb	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d006      	beq.n	80072e2 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80072d4:	2201      	movs	r2, #1
 80072d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072da:	4828      	ldr	r0, [pc, #160]	; (800737c <pl_yellow_LED_count+0x15c>)
 80072dc:	f00c f848 	bl	8013370 <HAL_GPIO_WritePin>
 80072e0:	e005      	b.n	80072ee <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 80072e2:	2200      	movs	r2, #0
 80072e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072e8:	4824      	ldr	r0, [pc, #144]	; (800737c <pl_yellow_LED_count+0x15c>)
 80072ea:	f00c f841 	bl	8013370 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 80072ee:	7afb      	ldrb	r3, [r7, #11]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 80072f4:	2201      	movs	r2, #1
 80072f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072fa:	4820      	ldr	r0, [pc, #128]	; (800737c <pl_yellow_LED_count+0x15c>)
 80072fc:	f00c f838 	bl	8013370 <HAL_GPIO_WritePin>
 8007300:	e005      	b.n	800730e <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007302:	2200      	movs	r2, #0
 8007304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007308:	481c      	ldr	r0, [pc, #112]	; (800737c <pl_yellow_LED_count+0x15c>)
 800730a:	f00c f831 	bl	8013370 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 800730e:	7abb      	ldrb	r3, [r7, #10]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8007314:	2201      	movs	r2, #1
 8007316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800731a:	4818      	ldr	r0, [pc, #96]	; (800737c <pl_yellow_LED_count+0x15c>)
 800731c:	f00c f828 	bl	8013370 <HAL_GPIO_WritePin>
 8007320:	e005      	b.n	800732e <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007322:	2200      	movs	r2, #0
 8007324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007328:	4814      	ldr	r0, [pc, #80]	; (800737c <pl_yellow_LED_count+0x15c>)
 800732a:	f00c f821 	bl	8013370 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 800732e:	7a7b      	ldrb	r3, [r7, #9]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d006      	beq.n	8007342 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007334:	2201      	movs	r2, #1
 8007336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800733a:	4810      	ldr	r0, [pc, #64]	; (800737c <pl_yellow_LED_count+0x15c>)
 800733c:	f00c f818 	bl	8013370 <HAL_GPIO_WritePin>
 8007340:	e005      	b.n	800734e <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007342:	2200      	movs	r2, #0
 8007344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007348:	480c      	ldr	r0, [pc, #48]	; (800737c <pl_yellow_LED_count+0x15c>)
 800734a:	f00c f811 	bl	8013370 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 800734e:	7a3b      	ldrb	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d006      	beq.n	8007362 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007354:	2201      	movs	r2, #1
 8007356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800735a:	4808      	ldr	r0, [pc, #32]	; (800737c <pl_yellow_LED_count+0x15c>)
 800735c:	f00c f808 	bl	8013370 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8007360:	e005      	b.n	800736e <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007362:	2200      	movs	r2, #0
 8007364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007368:	4804      	ldr	r0, [pc, #16]	; (800737c <pl_yellow_LED_count+0x15c>)
 800736a:	f00c f801 	bl	8013370 <HAL_GPIO_WritePin>
}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	48000800 	.word	0x48000800
 800737c:	48000400 	.word	0x48000400

08007380 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007392:	4803      	ldr	r0, [pc, #12]	; (80073a0 <pl_r_blue_LED+0x20>)
 8007394:	f00b ffec 	bl	8013370 <HAL_GPIO_WritePin>
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	48000800 	.word	0x48000800

080073a4 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	2104      	movs	r1, #4
 80073b4:	4803      	ldr	r0, [pc, #12]	; (80073c4 <pl_l_blue_LED+0x20>)
 80073b6:	f00b ffdb 	bl	8013370 <HAL_GPIO_WritePin>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	48000400 	.word	0x48000400

080073c8 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	460a      	mov	r2, r1
 80073d2:	80fb      	strh	r3, [r7, #6]
 80073d4:	4613      	mov	r3, r2
 80073d6:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80073d8:	2200      	movs	r2, #0
 80073da:	2110      	movs	r1, #16
 80073dc:	4833      	ldr	r0, [pc, #204]	; (80074ac <encoder_read_byte_R+0xe4>)
 80073de:	f00b ffc7 	bl	8013370 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073e8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	e00d      	b.n	8007410 <encoder_read_byte_R+0x48>
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	fa42 f303 	asr.w	r3, r2, r3
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	8bfb      	ldrh	r3, [r7, #30]
 8007406:	4413      	add	r3, r2
 8007408:	83fb      	strh	r3, [r7, #30]
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	3301      	adds	r3, #1
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b0e      	cmp	r3, #14
 8007414:	ddee      	ble.n	80073f4 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007416:	8bfb      	ldrh	r3, [r7, #30]
 8007418:	03db      	lsls	r3, r3, #15
 800741a:	b21a      	sxth	r2, r3
 800741c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007420:	4313      	orrs	r3, r2
 8007422:	b21b      	sxth	r3, r3
 8007424:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	b29b      	uxth	r3, r3
 800742c:	b2db      	uxtb	r3, r3
 800742e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007436:	f107 0110 	add.w	r1, r7, #16
 800743a:	2364      	movs	r3, #100	; 0x64
 800743c:	2202      	movs	r2, #2
 800743e:	481c      	ldr	r0, [pc, #112]	; (80074b0 <encoder_read_byte_R+0xe8>)
 8007440:	f00d f879 	bl	8014536 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007444:	2201      	movs	r2, #1
 8007446:	2110      	movs	r1, #16
 8007448:	4818      	ldr	r0, [pc, #96]	; (80074ac <encoder_read_byte_R+0xe4>)
 800744a:	f00b ff91 	bl	8013370 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e002      	b.n	800745a <encoder_read_byte_R+0x92>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	3301      	adds	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b95      	cmp	r3, #149	; 0x95
 800745e:	ddf9      	ble.n	8007454 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007460:	2200      	movs	r2, #0
 8007462:	2110      	movs	r1, #16
 8007464:	4811      	ldr	r0, [pc, #68]	; (80074ac <encoder_read_byte_R+0xe4>)
 8007466:	f00b ff83 	bl	8013370 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 800746a:	88bb      	ldrh	r3, [r7, #4]
 800746c:	0a1b      	lsrs	r3, r3, #8
 800746e:	b29b      	uxth	r3, r3
 8007470:	b2db      	uxtb	r3, r3
 8007472:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007474:	88bb      	ldrh	r3, [r7, #4]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800747a:	f107 010c 	add.w	r1, r7, #12
 800747e:	2364      	movs	r3, #100	; 0x64
 8007480:	2202      	movs	r2, #2
 8007482:	480b      	ldr	r0, [pc, #44]	; (80074b0 <encoder_read_byte_R+0xe8>)
 8007484:	f00d f9c5 	bl	8014812 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007488:	7b3b      	ldrb	r3, [r7, #12]
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	b21a      	sxth	r2, r3
 800748e:	7b7b      	ldrb	r3, [r7, #13]
 8007490:	b21b      	sxth	r3, r3
 8007492:	4313      	orrs	r3, r2
 8007494:	b21b      	sxth	r3, r3
 8007496:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007498:	2201      	movs	r2, #1
 800749a:	2110      	movs	r1, #16
 800749c:	4803      	ldr	r0, [pc, #12]	; (80074ac <encoder_read_byte_R+0xe4>)
 800749e:	f00b ff67 	bl	8013370 <HAL_GPIO_WritePin>

	return data;
 80074a2:	88bb      	ldrh	r3, [r7, #4]

}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3720      	adds	r7, #32
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	48000400 	.word	0x48000400
 80074b0:	2000c3fc 	.word	0x2000c3fc

080074b4 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	460a      	mov	r2, r1
 80074be:	80fb      	strh	r3, [r7, #6]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80074c4:	2200      	movs	r2, #0
 80074c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074ce:	f00b ff4f 	bl	8013370 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074d8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80074da:	2300      	movs	r3, #0
 80074dc:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80074de:	2300      	movs	r3, #0
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	e00d      	b.n	8007500 <encoder_read_byte_L+0x4c>
 80074e4:	88fa      	ldrh	r2, [r7, #6]
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	fa42 f303 	asr.w	r3, r2, r3
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	8bfb      	ldrh	r3, [r7, #30]
 80074f6:	4413      	add	r3, r2
 80074f8:	83fb      	strh	r3, [r7, #30]
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3301      	adds	r3, #1
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b0e      	cmp	r3, #14
 8007504:	ddee      	ble.n	80074e4 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007506:	8bfb      	ldrh	r3, [r7, #30]
 8007508:	03db      	lsls	r3, r3, #15
 800750a:	b21a      	sxth	r2, r3
 800750c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007510:	4313      	orrs	r3, r2
 8007512:	b21b      	sxth	r3, r3
 8007514:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007516:	88fb      	ldrh	r3, [r7, #6]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	b29b      	uxth	r3, r3
 800751c:	b2db      	uxtb	r3, r3
 800751e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007526:	f107 0110 	add.w	r1, r7, #16
 800752a:	2364      	movs	r3, #100	; 0x64
 800752c:	2202      	movs	r2, #2
 800752e:	481e      	ldr	r0, [pc, #120]	; (80075a8 <encoder_read_byte_L+0xf4>)
 8007530:	f00d f801 	bl	8014536 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007534:	2201      	movs	r2, #1
 8007536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800753a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800753e:	f00b ff17 	bl	8013370 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	e002      	b.n	800754e <encoder_read_byte_L+0x9a>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	3301      	adds	r3, #1
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b95      	cmp	r3, #149	; 0x95
 8007552:	ddf9      	ble.n	8007548 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007554:	2200      	movs	r2, #0
 8007556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800755a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800755e:	f00b ff07 	bl	8013370 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007562:	88bb      	ldrh	r3, [r7, #4]
 8007564:	0a1b      	lsrs	r3, r3, #8
 8007566:	b29b      	uxth	r3, r3
 8007568:	b2db      	uxtb	r3, r3
 800756a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800756c:	88bb      	ldrh	r3, [r7, #4]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007572:	f107 010c 	add.w	r1, r7, #12
 8007576:	2364      	movs	r3, #100	; 0x64
 8007578:	2202      	movs	r2, #2
 800757a:	480b      	ldr	r0, [pc, #44]	; (80075a8 <encoder_read_byte_L+0xf4>)
 800757c:	f00d f949 	bl	8014812 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007580:	7b3b      	ldrb	r3, [r7, #12]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	b21a      	sxth	r2, r3
 8007586:	7b7b      	ldrb	r3, [r7, #13]
 8007588:	b21b      	sxth	r3, r3
 800758a:	4313      	orrs	r3, r2
 800758c:	b21b      	sxth	r3, r3
 800758e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007590:	2201      	movs	r2, #1
 8007592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800759a:	f00b fee9 	bl	8013370 <HAL_GPIO_WritePin>

	return data;
 800759e:	88bb      	ldrh	r3, [r7, #4]

}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	2000c3fc 	.word	0x2000c3fc

080075ac <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80075b0:	2100      	movs	r1, #0
 80075b2:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80075b6:	f7ff ff07 	bl	80073c8 <encoder_read_byte_R>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075c8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007610 <AS5047_DataUpdate+0x64>
 80075cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80075d0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007614 <AS5047_DataUpdate+0x68>
 80075d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <AS5047_DataUpdate+0x6c>)
 80075da:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80075de:	2100      	movs	r1, #0
 80075e0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80075e4:	f7ff ff66 	bl	80074b4 <encoder_read_byte_L>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007610 <AS5047_DataUpdate+0x64>
 80075fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80075fe:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007614 <AS5047_DataUpdate+0x68>
 8007602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <AS5047_DataUpdate+0x70>)
 8007608:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 800760c:	bf00      	nop
 800760e:	bd80      	pop	{r7, pc}
 8007610:	43b40000 	.word	0x43b40000
 8007614:	46800000 	.word	0x46800000
 8007618:	200006b8 	.word	0x200006b8
 800761c:	200006bc 	.word	0x200006bc

08007620 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800762a:	2200      	movs	r2, #0
 800762c:	2110      	movs	r1, #16
 800762e:	4810      	ldr	r0, [pc, #64]	; (8007670 <gyro_read_byte+0x50>)
 8007630:	f00b fe9e 	bl	8013370 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800763a:	b2db      	uxtb	r3, r3
 800763c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800763e:	f107 010f 	add.w	r1, r7, #15
 8007642:	2364      	movs	r3, #100	; 0x64
 8007644:	2201      	movs	r2, #1
 8007646:	480b      	ldr	r0, [pc, #44]	; (8007674 <gyro_read_byte+0x54>)
 8007648:	f00c ff75 	bl	8014536 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 800764c:	f107 010e 	add.w	r1, r7, #14
 8007650:	2364      	movs	r3, #100	; 0x64
 8007652:	2201      	movs	r2, #1
 8007654:	4807      	ldr	r0, [pc, #28]	; (8007674 <gyro_read_byte+0x54>)
 8007656:	f00d f8dc 	bl	8014812 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800765a:	2201      	movs	r2, #1
 800765c:	2110      	movs	r1, #16
 800765e:	4804      	ldr	r0, [pc, #16]	; (8007670 <gyro_read_byte+0x50>)
 8007660:	f00b fe86 	bl	8013370 <HAL_GPIO_WritePin>

	return val;
 8007664:	7bbb      	ldrb	r3, [r7, #14]

}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	48000800 	.word	0x48000800
 8007674:	2000c398 	.word	0x2000c398

08007678 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	460a      	mov	r2, r1
 8007682:	71fb      	strb	r3, [r7, #7]
 8007684:	4613      	mov	r3, r2
 8007686:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800768e:	b2db      	uxtb	r3, r3
 8007690:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8007692:	2200      	movs	r2, #0
 8007694:	2110      	movs	r1, #16
 8007696:	480c      	ldr	r0, [pc, #48]	; (80076c8 <gyro_write_byte+0x50>)
 8007698:	f00b fe6a 	bl	8013370 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800769c:	f107 010f 	add.w	r1, r7, #15
 80076a0:	2364      	movs	r3, #100	; 0x64
 80076a2:	2201      	movs	r2, #1
 80076a4:	4809      	ldr	r0, [pc, #36]	; (80076cc <gyro_write_byte+0x54>)
 80076a6:	f00c ff46 	bl	8014536 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80076aa:	1db9      	adds	r1, r7, #6
 80076ac:	2364      	movs	r3, #100	; 0x64
 80076ae:	2201      	movs	r2, #1
 80076b0:	4806      	ldr	r0, [pc, #24]	; (80076cc <gyro_write_byte+0x54>)
 80076b2:	f00c ff40 	bl	8014536 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80076b6:	2201      	movs	r2, #1
 80076b8:	2110      	movs	r1, #16
 80076ba:	4803      	ldr	r0, [pc, #12]	; (80076c8 <gyro_write_byte+0x50>)
 80076bc:	f00b fe58 	bl	8013370 <HAL_GPIO_WritePin>

}
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	48000800 	.word	0x48000800
 80076cc:	2000c398 	.word	0x2000c398

080076d0 <pl_gyro_init>:

void pl_gyro_init(void)

{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 80076da:	2075      	movs	r0, #117	; 0x75
 80076dc:	f7ff ffa0 	bl	8007620 <gyro_read_byte>
 80076e0:	4603      	mov	r3, r0
 80076e2:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	4619      	mov	r1, r3
 80076e8:	481b      	ldr	r0, [pc, #108]	; (8007758 <pl_gyro_init+0x88>)
 80076ea:	f010 fbd7 	bl	8017e9c <iprintf>

// recheck

	if (who_am_i != 0x98) {
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	2b98      	cmp	r3, #152	; 0x98
 80076f2:	d00e      	beq.n	8007712 <pl_gyro_init+0x42>

		HAL_Delay(100);
 80076f4:	2064      	movs	r0, #100	; 0x64
 80076f6:	f008 fee7 	bl	80104c8 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 80076fa:	2075      	movs	r0, #117	; 0x75
 80076fc:	f7ff ff90 	bl	8007620 <gyro_read_byte>
 8007700:	4603      	mov	r3, r0
 8007702:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b98      	cmp	r3, #152	; 0x98
 8007708:	d003      	beq.n	8007712 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 800770a:	4814      	ldr	r0, [pc, #80]	; (800775c <pl_gyro_init+0x8c>)
 800770c:	f010 fbc6 	bl	8017e9c <iprintf>
 8007710:	e7fb      	b.n	800770a <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007712:	2100      	movs	r1, #0
 8007714:	206b      	movs	r0, #107	; 0x6b
 8007716:	f7ff ffaf 	bl	8007678 <gyro_write_byte>

	HAL_Delay(50);
 800771a:	2032      	movs	r0, #50	; 0x32
 800771c:	f008 fed4 	bl	80104c8 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007720:	2100      	movs	r1, #0
 8007722:	206c      	movs	r0, #108	; 0x6c
 8007724:	f7ff ffa8 	bl	8007678 <gyro_write_byte>

	HAL_Delay(50);
 8007728:	2032      	movs	r0, #50	; 0x32
 800772a:	f008 fecd 	bl	80104c8 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 800772e:	2118      	movs	r1, #24
 8007730:	201b      	movs	r0, #27
 8007732:	f7ff ffa1 	bl	8007678 <gyro_write_byte>

	HAL_Delay(50);
 8007736:	2032      	movs	r0, #50	; 0x32
 8007738:	f008 fec6 	bl	80104c8 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 800773c:	2118      	movs	r1, #24
 800773e:	201c      	movs	r0, #28
 8007740:	f7ff ff9a 	bl	8007678 <gyro_write_byte>

	HAL_Delay(50);
 8007744:	2032      	movs	r0, #50	; 0x32
 8007746:	f008 febf 	bl	80104c8 <HAL_Delay>

	set_flag = 1;
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <pl_gyro_init+0x90>)
 800774c:	2201      	movs	r2, #1
 800774e:	701a      	strb	r2, [r3, #0]

}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	0801a548 	.word	0x0801a548
 800775c:	0801a55c 	.word	0x0801a55c
 8007760:	200006c0 	.word	0x200006c0

08007764 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff ff55 	bl	8007620 <gyro_read_byte>
 8007776:	4603      	mov	r3, r0
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	3301      	adds	r3, #1
 8007780:	b2db      	uxtb	r3, r3
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff ff4c 	bl	8007620 <gyro_read_byte>
 8007788:	4603      	mov	r3, r0
 800778a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800778c:	4323      	orrs	r3, r4
 800778e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007794:	ee07 3a90 	vmov	s15, r3
 8007798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800779c:	eddf 6a06 	vldr	s13, [pc, #24]	; 80077b8 <ICM20602_GYRO_READ+0x54>
 80077a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077a4:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	ee07 3a90 	vmov	s15, r3

}
 80077ae:	eeb0 0a67 	vmov.f32	s0, s15
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd90      	pop	{r4, r7, pc}
 80077b8:	41833333 	.word	0x41833333

080077bc <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff ff29 	bl	8007620 <gyro_read_byte>
 80077ce:	4603      	mov	r3, r0
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	3301      	adds	r3, #1
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff ff20 	bl	8007620 <gyro_read_byte>
 80077e0:	4603      	mov	r3, r0
 80077e2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077e4:	4323      	orrs	r3, r4
 80077e6:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 80077e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077f4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007810 <ICM20602_ACCEL_READ+0x54>
 80077f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077fc:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	ee07 3a90 	vmov	s15, r3

}
 8007806:	eeb0 0a67 	vmov.f32	s0, s15
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	bd90      	pop	{r4, r7, pc}
 8007810:	45000000 	.word	0x45000000

08007814 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007814:	b580      	push	{r7, lr}
 8007816:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007818:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <ICM20602_DataUpdate+0x70>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d12f      	bne.n	8007880 <ICM20602_DataUpdate+0x6c>

// get yawrate

		gyro.omega_y = ICM20602_GYRO_READ(0x43);
 8007820:	2043      	movs	r0, #67	; 0x43
 8007822:	f7ff ff9f 	bl	8007764 <ICM20602_GYRO_READ>
 8007826:	eef0 7a40 	vmov.f32	s15, s0
 800782a:	4b17      	ldr	r3, [pc, #92]	; (8007888 <ICM20602_DataUpdate+0x74>)
 800782c:	edc3 7a01 	vstr	s15, [r3, #4]

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007830:	2045      	movs	r0, #69	; 0x45
 8007832:	f7ff ff97 	bl	8007764 <ICM20602_GYRO_READ>
 8007836:	eef0 7a40 	vmov.f32	s15, s0
 800783a:	4b13      	ldr	r3, [pc, #76]	; (8007888 <ICM20602_DataUpdate+0x74>)
 800783c:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007840:	2047      	movs	r0, #71	; 0x47
 8007842:	f7ff ff8f 	bl	8007764 <ICM20602_GYRO_READ>
 8007846:	eef0 7a40 	vmov.f32	s15, s0
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <ICM20602_DataUpdate+0x74>)
 800784c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007850:	203b      	movs	r0, #59	; 0x3b
 8007852:	f7ff ffb3 	bl	80077bc <ICM20602_ACCEL_READ>
 8007856:	eef0 7a40 	vmov.f32	s15, s0
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <ICM20602_DataUpdate+0x74>)
 800785c:	edc3 7a04 	vstr	s15, [r3, #16]

		gyro.accel_x = ICM20602_ACCEL_READ(0x3D);
 8007860:	203d      	movs	r0, #61	; 0x3d
 8007862:	f7ff ffab 	bl	80077bc <ICM20602_ACCEL_READ>
 8007866:	eef0 7a40 	vmov.f32	s15, s0
 800786a:	4b07      	ldr	r3, [pc, #28]	; (8007888 <ICM20602_DataUpdate+0x74>)
 800786c:	edc3 7a03 	vstr	s15, [r3, #12]

		gyro.accel_z = ICM20602_ACCEL_READ(0x3F);
 8007870:	203f      	movs	r0, #63	; 0x3f
 8007872:	f7ff ffa3 	bl	80077bc <ICM20602_ACCEL_READ>
 8007876:	eef0 7a40 	vmov.f32	s15, s0
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <ICM20602_DataUpdate+0x74>)
 800787c:	edc3 7a05 	vstr	s15, [r3, #20]

	}

}
 8007880:	bf00      	nop
 8007882:	bd80      	pop	{r7, pc}
 8007884:	200006c0 	.word	0x200006c0
 8007888:	200006c4 	.word	0x200006c4

0800788c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007890:	480f      	ldr	r0, [pc, #60]	; (80078d0 <pl_motor_init+0x44>)
 8007892:	f00d fd15 	bl	80152c0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007896:	480e      	ldr	r0, [pc, #56]	; (80078d0 <pl_motor_init+0x44>)
 8007898:	f007 ff7c 	bl	800f794 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 800789c:	480d      	ldr	r0, [pc, #52]	; (80078d4 <pl_motor_init+0x48>)
 800789e:	f00d fd0f 	bl	80152c0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 80078a2:	480c      	ldr	r0, [pc, #48]	; (80078d4 <pl_motor_init+0x48>)
 80078a4:	f007 ff76 	bl	800f794 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 80078a8:	2001      	movs	r0, #1
 80078aa:	f000 f81f 	bl	80078ec <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 80078ae:	4b08      	ldr	r3, [pc, #32]	; (80078d0 <pl_motor_init+0x44>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	225a      	movs	r2, #90	; 0x5a
 80078b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 80078b6:	2001      	movs	r0, #1
 80078b8:	f000 f840 	bl	800793c <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <pl_motor_init+0x44>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	225a      	movs	r2, #90	; 0x5a
 80078c2:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <pl_motor_init+0x48>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	221e      	movs	r2, #30
 80078ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078cc:	bf00      	nop
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	2000c4b0 	.word	0x2000c4b0
 80078d4:	2000c4fc 	.word	0x2000c4fc

080078d8 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d819      	bhi.n	800792e <pl_L_DriveMotor_mode+0x42>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <pl_L_DriveMotor_mode+0x14>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007911 	.word	0x08007911
 8007908:	0800791f 	.word	0x0800791f
 800790c:	0800792d 	.word	0x0800792d
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007910:	2200      	movs	r2, #0
 8007912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007916:	4808      	ldr	r0, [pc, #32]	; (8007938 <pl_L_DriveMotor_mode+0x4c>)
 8007918:	f00b fd2a 	bl	8013370 <HAL_GPIO_WritePin>
break;
 800791c:	e007      	b.n	800792e <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 800791e:	2201      	movs	r2, #1
 8007920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007924:	4804      	ldr	r0, [pc, #16]	; (8007938 <pl_L_DriveMotor_mode+0x4c>)
 8007926:	f00b fd23 	bl	8013370 <HAL_GPIO_WritePin>
break;
 800792a:	e000      	b.n	800792e <pl_L_DriveMotor_mode+0x42>
break;
 800792c:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	48000800 	.word	0x48000800

0800793c <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b03      	cmp	r3, #3
 8007948:	d817      	bhi.n	800797a <pl_R_DriveMotor_mode+0x3e>
 800794a:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <pl_R_DriveMotor_mode+0x14>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007979 	.word	0x08007979
 8007954:	08007961 	.word	0x08007961
 8007958:	0800796d 	.word	0x0800796d
 800795c:	08007979 	.word	0x08007979
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007960:	2201      	movs	r2, #1
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	4807      	ldr	r0, [pc, #28]	; (8007984 <pl_R_DriveMotor_mode+0x48>)
 8007966:	f00b fd03 	bl	8013370 <HAL_GPIO_WritePin>
break;
 800796a:	e006      	b.n	800797a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 800796c:	2200      	movs	r2, #0
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	4804      	ldr	r0, [pc, #16]	; (8007984 <pl_R_DriveMotor_mode+0x48>)
 8007972:	f00b fcfd 	bl	8013370 <HAL_GPIO_WritePin>
break;
 8007976:	e000      	b.n	800797a <pl_R_DriveMotor_mode+0x3e>
break;
 8007978:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	48000400 	.word	0x48000400

08007988 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800798c:	2108      	movs	r1, #8
 800798e:	4804      	ldr	r0, [pc, #16]	; (80079a0 <pl_DriveMotor_start+0x18>)
 8007990:	f00d fd5e 	bl	8015450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007994:	2100      	movs	r1, #0
 8007996:	4802      	ldr	r0, [pc, #8]	; (80079a0 <pl_DriveMotor_start+0x18>)
 8007998:	f00d fd5a 	bl	8015450 <HAL_TIM_PWM_Start>
}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000c4b0 	.word	0x2000c4b0

080079a4 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80079a8:	2108      	movs	r1, #8
 80079aa:	4804      	ldr	r0, [pc, #16]	; (80079bc <pl_DriveMotor_stop+0x18>)
 80079ac:	f00d fe5c 	bl	8015668 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80079b0:	2100      	movs	r1, #0
 80079b2:	4802      	ldr	r0, [pc, #8]	; (80079bc <pl_DriveMotor_stop+0x18>)
 80079b4:	f00d fe58 	bl	8015668 <HAL_TIM_PWM_Stop>
}
 80079b8:	bf00      	nop
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	2000c4b0 	.word	0x2000c4b0

080079c0 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <pl_DriveMotor_duty+0x28>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <pl_DriveMotor_duty+0x28>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000c4b0 	.word	0x2000c4b0

080079ec <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80079f0:	2100      	movs	r1, #0
 80079f2:	4802      	ldr	r0, [pc, #8]	; (80079fc <pl_FunMotor_start+0x10>)
 80079f4:	f00d fd2c 	bl	8015450 <HAL_TIM_PWM_Start>
}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	2000c4fc 	.word	0x2000c4fc

08007a00 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007a04:	2100      	movs	r1, #0
 8007a06:	4802      	ldr	r0, [pc, #8]	; (8007a10 <pl_FunMotor_stop+0x10>)
 8007a08:	f00d fe2e 	bl	8015668 <HAL_TIM_PWM_Stop>
}
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	2000c4fc 	.word	0x2000c4fc

08007a14 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a22:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007a58 <pl_FunMotor_duty+0x44>
 8007a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a2e:	ee17 3a90 	vmov	r3, s15
 8007a32:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007a34:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <pl_FunMotor_duty+0x48>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2264      	movs	r2, #100	; 0x64
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a3c:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <pl_FunMotor_duty+0x48>)
 8007a3e:	2264      	movs	r2, #100	; 0x64
 8007a40:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <pl_FunMotor_duty+0x48>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	42c80000 	.word	0x42c80000
 8007a5c:	2000c4fc 	.word	0x2000c4fc

08007a60 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
	AD_step=0;
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <pl_sensor_init+0x18>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007a6a:	217f      	movs	r1, #127	; 0x7f
 8007a6c:	4803      	ldr	r0, [pc, #12]	; (8007a7c <pl_sensor_init+0x1c>)
 8007a6e:	f00a fda5 	bl	80125bc <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007a72:	bf00      	nop
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200006e8 	.word	0x200006e8
 8007a7c:	20000714 	.word	0x20000714

08007a80 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007a86:	483c      	ldr	r0, [pc, #240]	; (8007b78 <pl_getbatt+0xf8>)
 8007a88:	f009 f986 	bl	8010d98 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007a8c:	2132      	movs	r1, #50	; 0x32
 8007a8e:	483a      	ldr	r0, [pc, #232]	; (8007b78 <pl_getbatt+0xf8>)
 8007a90:	f009 fa80 	bl	8010f94 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007a94:	4838      	ldr	r0, [pc, #224]	; (8007b78 <pl_getbatt+0xf8>)
 8007a96:	f009 fc9c 	bl	80113d2 <HAL_ADC_GetValue>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007a9e:	4836      	ldr	r0, [pc, #216]	; (8007b78 <pl_getbatt+0xf8>)
 8007aa0:	f009 fa44 	bl	8010f2c <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	ee17 0a90 	vmov	r0, s15
 8007ab2:	f7f8 fd71 	bl	8000598 <__aeabi_f2d>
 8007ab6:	a326      	add	r3, pc, #152	; (adr r3, 8007b50 <pl_getbatt+0xd0>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f8 fdc4 	bl	8000648 <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	a323      	add	r3, pc, #140	; (adr r3, 8007b58 <pl_getbatt+0xd8>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fee5 	bl	800089c <__aeabi_ddiv>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <pl_getbatt+0xfc>)
 8007ae0:	f7f8 fdb2 	bl	8000648 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4619      	mov	r1, r3
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <pl_getbatt+0x100>)
 8007af2:	f7f8 fed3 	bl	800089c <__aeabi_ddiv>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4610      	mov	r0, r2
 8007afc:	4619      	mov	r1, r3
 8007afe:	a318      	add	r3, pc, #96	; (adr r3, 8007b60 <pl_getbatt+0xe0>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fda0 	bl	8000648 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	a315      	add	r3, pc, #84	; (adr r3, 8007b68 <pl_getbatt+0xe8>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fd97 	bl	8000648 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	a313      	add	r3, pc, #76	; (adr r3, 8007b70 <pl_getbatt+0xf0>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 feb8 	bl	800089c <__aeabi_ddiv>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4610      	mov	r0, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	f7f9 f860 	bl	8000bf8 <__aeabi_d2f>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	603b      	str	r3, [r7, #0]
return batt;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	ee07 3a90 	vmov	s15, r3
}
 8007b42:	eeb0 0a67 	vmov.f32	s0, s15
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	f3af 8000 	nop.w
 8007b50:	66666666 	.word	0x66666666
 8007b54:	400a6666 	.word	0x400a6666
 8007b58:	00000000 	.word	0x00000000
 8007b5c:	40affe00 	.word	0x40affe00
 8007b60:	66666666 	.word	0x66666666
 8007b64:	3ff26666 	.word	0x3ff26666
 8007b68:	9999999a 	.word	0x9999999a
 8007b6c:	400d9999 	.word	0x400d9999
 8007b70:	ae147ae1 	.word	0xae147ae1
 8007b74:	400ee147 	.word	0x400ee147
 8007b78:	20000714 	.word	0x20000714
 8007b7c:	40340000 	.word	0x40340000
 8007b80:	40240000 	.word	0x40240000
 8007b84:	00000000 	.word	0x00000000

08007b88 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007b8e:	4882      	ldr	r0, [pc, #520]	; (8007d98 <pl_callback_getSensor+0x210>)
 8007b90:	f009 fbbe 	bl	8011310 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007b94:	4b81      	ldr	r3, [pc, #516]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	f200 80d9 	bhi.w	8007d50 <pl_callback_getSensor+0x1c8>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <pl_callback_getSensor+0x1c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bb9 	.word	0x08007bb9
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007c51 	.word	0x08007c51
 8007bb0:	08007c91 	.word	0x08007c91
 8007bb4:	08007d51 	.word	0x08007d51
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007bb8:	2201      	movs	r2, #1
 8007bba:	2102      	movs	r1, #2
 8007bbc:	4878      	ldr	r0, [pc, #480]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007bbe:	f00b fbd7 	bl	8013370 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2110      	movs	r1, #16
 8007bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bca:	f00b fbd1 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bd4:	4873      	ldr	r0, [pc, #460]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007bd6:	f00b fbcb 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007bde:	e002      	b.n	8007be6 <pl_callback_getSensor+0x5e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3301      	adds	r3, #1
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bec:	ddf8      	ble.n	8007be0 <pl_callback_getSensor+0x58>
		break;
 8007bee:	e0af      	b.n	8007d50 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007bf0:	4b6d      	ldr	r3, [pc, #436]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007bf2:	885a      	ldrh	r2, [r3, #2]
 8007bf4:	4b6d      	ldr	r3, [pc, #436]	; (8007dac <pl_callback_getSensor+0x224>)
 8007bf6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007bf8:	4b6b      	ldr	r3, [pc, #428]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007bfa:	889a      	ldrh	r2, [r3, #4]
 8007bfc:	4b6b      	ldr	r3, [pc, #428]	; (8007dac <pl_callback_getSensor+0x224>)
 8007bfe:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007c00:	4b69      	ldr	r3, [pc, #420]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c02:	88da      	ldrh	r2, [r3, #6]
 8007c04:	4b6a      	ldr	r3, [pc, #424]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c06:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007c08:	4b67      	ldr	r3, [pc, #412]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c0a:	891a      	ldrh	r2, [r3, #8]
 8007c0c:	4b68      	ldr	r3, [pc, #416]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c0e:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007c10:	4b65      	ldr	r3, [pc, #404]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c12:	895a      	ldrh	r2, [r3, #10]
 8007c14:	4b66      	ldr	r3, [pc, #408]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c16:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	4860      	ldr	r0, [pc, #384]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007c1e:	f00b fba7 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007c22:	2201      	movs	r2, #1
 8007c24:	2110      	movs	r1, #16
 8007c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c2a:	f00b fba1 	bl	8013370 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c34:	485b      	ldr	r0, [pc, #364]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007c36:	f00b fb9b 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c3e:	e002      	b.n	8007c46 <pl_callback_getSensor+0xbe>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3301      	adds	r3, #1
 8007c44:	607b      	str	r3, [r7, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c4c:	ddf8      	ble.n	8007c40 <pl_callback_getSensor+0xb8>
		break;
 8007c4e:	e07f      	b.n	8007d50 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007c50:	4b55      	ldr	r3, [pc, #340]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c52:	88da      	ldrh	r2, [r3, #6]
 8007c54:	4b55      	ldr	r3, [pc, #340]	; (8007dac <pl_callback_getSensor+0x224>)
 8007c56:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	4850      	ldr	r0, [pc, #320]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007c5e:	f00b fb87 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c62:	2200      	movs	r2, #0
 8007c64:	2110      	movs	r1, #16
 8007c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c6a:	f00b fb81 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c74:	484b      	ldr	r0, [pc, #300]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007c76:	f00b fb7b 	bl	8013370 <HAL_GPIO_WritePin>
		j=0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c7e:	e002      	b.n	8007c86 <pl_callback_getSensor+0xfe>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3301      	adds	r3, #1
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c8c:	ddf8      	ble.n	8007c80 <pl_callback_getSensor+0xf8>
		break;
 8007c8e:	e05f      	b.n	8007d50 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007c90:	4b45      	ldr	r3, [pc, #276]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c92:	885a      	ldrh	r2, [r3, #2]
 8007c94:	4b46      	ldr	r3, [pc, #280]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c96:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007c98:	4b43      	ldr	r3, [pc, #268]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c9a:	889a      	ldrh	r2, [r3, #4]
 8007c9c:	4b44      	ldr	r3, [pc, #272]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c9e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007ca0:	4b41      	ldr	r3, [pc, #260]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007ca2:	891a      	ldrh	r2, [r3, #8]
 8007ca4:	4b41      	ldr	r3, [pc, #260]	; (8007dac <pl_callback_getSensor+0x224>)
 8007ca6:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007ca8:	4b3f      	ldr	r3, [pc, #252]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007caa:	895a      	ldrh	r2, [r3, #10]
 8007cac:	4b3f      	ldr	r3, [pc, #252]	; (8007dac <pl_callback_getSensor+0x224>)
 8007cae:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	483a      	ldr	r0, [pc, #232]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007cb6:	f00b fb5b 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2110      	movs	r1, #16
 8007cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cc2:	f00b fb55 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ccc:	4835      	ldr	r0, [pc, #212]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007cce:	f00b fb4f 	bl	8013370 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007cd6:	e002      	b.n	8007cde <pl_callback_getSensor+0x156>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	607b      	str	r3, [r7, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b32      	cmp	r3, #50	; 0x32
 8007ce2:	ddf9      	ble.n	8007cd8 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007ce4:	4b30      	ldr	r3, [pc, #192]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007cea:	887b      	ldrh	r3, [r7, #2]
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf4:	ee17 0a90 	vmov	r0, s15
 8007cf8:	f7f8 fc4e 	bl	8000598 <__aeabi_f2d>
 8007cfc:	a320      	add	r3, pc, #128	; (adr r3, 8007d80 <pl_callback_getSensor+0x1f8>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f7f8 fca1 	bl	8000648 <__aeabi_dmul>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	a31e      	add	r3, pc, #120	; (adr r3, 8007d88 <pl_callback_getSensor+0x200>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fdc2 	bl	800089c <__aeabi_ddiv>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	a31b      	add	r3, pc, #108	; (adr r3, 8007d90 <pl_callback_getSensor+0x208>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7f8 fc8f 	bl	8000648 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <pl_callback_getSensor+0x22c>)
 8007d38:	f7f8 fdb0 	bl	800089c <__aeabi_ddiv>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	f7f8 ff58 	bl	8000bf8 <__aeabi_d2f>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <pl_callback_getSensor+0x230>)
 8007d4c:	6013      	str	r3, [r2, #0]
		break;
 8007d4e:	bf00      	nop

		break;
	}


	AD_step++;
 8007d50:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d5a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d005      	beq.n	8007d70 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d64:	2206      	movs	r2, #6
 8007d66:	4910      	ldr	r1, [pc, #64]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007d68:	480b      	ldr	r0, [pc, #44]	; (8007d98 <pl_callback_getSensor+0x210>)
 8007d6a:	f009 fa07 	bl	801117c <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007d6e:	e002      	b.n	8007d76 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	66666666 	.word	0x66666666
 8007d84:	400a6666 	.word	0x400a6666
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	40affe00 	.word	0x40affe00
 8007d90:	00000000 	.word	0x00000000
 8007d94:	4062c000 	.word	0x4062c000
 8007d98:	20000714 	.word	0x20000714
 8007d9c:	200006e8 	.word	0x200006e8
 8007da0:	48000400 	.word	0x48000400
 8007da4:	48000800 	.word	0x48000800
 8007da8:	200006dc 	.word	0x200006dc
 8007dac:	200006ec 	.word	0x200006ec
 8007db0:	200006f8 	.word	0x200006f8
 8007db4:	40490000 	.word	0x40490000
 8007db8:	20000704 	.word	0x20000704

08007dbc <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007dc0:	2206      	movs	r2, #6
 8007dc2:	4903      	ldr	r1, [pc, #12]	; (8007dd0 <pl_interupt_getSensor+0x14>)
 8007dc4:	4803      	ldr	r0, [pc, #12]	; (8007dd4 <pl_interupt_getSensor+0x18>)
 8007dc6:	f009 f9d9 	bl	801117c <HAL_ADC_Start_DMA>

}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	200006dc 	.word	0x200006dc
 8007dd4:	20000714 	.word	0x20000714

08007dd8 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
	count_mode=0;
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <pl_timer_init+0x1c>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <pl_timer_init+0x20>)
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007dea:	4804      	ldr	r0, [pc, #16]	; (8007dfc <pl_timer_init+0x24>)
 8007dec:	f00d fa68 	bl	80152c0 <HAL_TIM_Base_Start_IT>
}
 8007df0:	bf00      	nop
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000710 	.word	0x20000710
 8007df8:	2000070c 	.word	0x2000070c
 8007dfc:	2000c464 	.word	0x2000c464

08007e00 <interrupt_timer>:

void interrupt_timer(void){
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
	g_timCount++;
 8007e04:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <interrupt_timer+0x48>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	; (8007e48 <interrupt_timer+0x48>)
 8007e0c:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <interrupt_timer+0x4c>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d112      	bne.n	8007e3c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007e16:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <interrupt_timer+0x50>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7f8 fbbc 	bl	8000598 <__aeabi_f2d>
 8007e20:	a307      	add	r3, pc, #28	; (adr r3, 8007e40 <interrupt_timer+0x40>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fa59 	bl	80002dc <__adddf3>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7f8 fee1 	bl	8000bf8 <__aeabi_d2f>
 8007e36:	4603      	mov	r3, r0
 8007e38:	4a05      	ldr	r2, [pc, #20]	; (8007e50 <interrupt_timer+0x50>)
 8007e3a:	6013      	str	r3, [r2, #0]
	}

}
 8007e3c:	bf00      	nop
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e44:	3f50624d 	.word	0x3f50624d
 8007e48:	20000708 	.word	0x20000708
 8007e4c:	20000710 	.word	0x20000710
 8007e50:	2000070c 	.word	0x2000070c
 8007e54:	00000000 	.word	0x00000000

08007e58 <wait_ms>:
	count_mode=0;
	g_timCount_sec=0;
	return timer;
}

void wait_ms(uint32_t waitTime) {
 8007e58:	b5b0      	push	{r4, r5, r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007e60:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <wait_ms+0x80>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007e66:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <wait_ms+0x84>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007e6e:	bf00      	nop
 8007e70:	4b19      	ldr	r3, [pc, #100]	; (8007ed8 <wait_ms+0x80>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7c:	ee17 0a90 	vmov	r0, s15
 8007e80:	f7f8 fb8a 	bl	8000598 <__aeabi_f2d>
 8007e84:	a312      	add	r3, pc, #72	; (adr r3, 8007ed0 <wait_ms+0x78>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f7f8 fbdd 	bl	8000648 <__aeabi_dmul>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	a30e      	add	r3, pc, #56	; (adr r3, 8007ed0 <wait_ms+0x78>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f7f8 fcfe 	bl	800089c <__aeabi_ddiv>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4614      	mov	r4, r2
 8007ea6:	461d      	mov	r5, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7f8 fb53 	bl	8000554 <__aeabi_ui2d>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	f7f8 fe39 	bl	8000b2c <__aeabi_dcmplt>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1d7      	bne.n	8007e70 <wait_ms+0x18>
        }

}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	f3af 8000 	nop.w
 8007ed0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007ed4:	3f50624d 	.word	0x3f50624d
 8007ed8:	20000708 	.word	0x20000708
 8007edc:	2000c464 	.word	0x2000c464

08007ee0 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007ee0:	b5b0      	push	{r4, r5, r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007ee8:	4b1b      	ldr	r3, [pc, #108]	; (8007f58 <wait_ms_NoReset+0x78>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007eee:	bf00      	nop
 8007ef0:	4b19      	ldr	r3, [pc, #100]	; (8007f58 <wait_ms_NoReset+0x78>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	ee17 0a90 	vmov	r0, s15
 8007f00:	f7f8 fb4a 	bl	8000598 <__aeabi_f2d>
 8007f04:	a312      	add	r3, pc, #72	; (adr r3, 8007f50 <wait_ms_NoReset+0x70>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 fb9d 	bl	8000648 <__aeabi_dmul>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	a30e      	add	r3, pc, #56	; (adr r3, 8007f50 <wait_ms_NoReset+0x70>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 fcbe 	bl	800089c <__aeabi_ddiv>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4614      	mov	r4, r2
 8007f26:	461d      	mov	r5, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7f8 fb13 	bl	8000554 <__aeabi_ui2d>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4620      	mov	r0, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7f8 fdf9 	bl	8000b2c <__aeabi_dcmplt>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1d7      	bne.n	8007ef0 <wait_ms_NoReset+0x10>
        }

}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bdb0      	pop	{r4, r5, r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	f3af 8000 	nop.w
 8007f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f54:	3f50624d 	.word	0x3f50624d
 8007f58:	20000708 	.word	0x20000708

08007f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08c      	sub	sp, #48	; 0x30
 8007f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	605a      	str	r2, [r3, #4]
 8007f6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	2220      	movs	r2, #32
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f00f fb1f 	bl	80175b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007f7a:	4b56      	ldr	r3, [pc, #344]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007f7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007f82:	4b54      	ldr	r3, [pc, #336]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007f84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007f88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007f8a:	4b52      	ldr	r3, [pc, #328]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f90:	4b50      	ldr	r3, [pc, #320]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007f96:	4b4f      	ldr	r3, [pc, #316]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007f9c:	4b4d      	ldr	r3, [pc, #308]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007fa2:	4b4c      	ldr	r3, [pc, #304]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007fa8:	4b4a      	ldr	r3, [pc, #296]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007fae:	4b49      	ldr	r3, [pc, #292]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8007fb4:	4b47      	ldr	r3, [pc, #284]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fb6:	2206      	movs	r2, #6
 8007fb8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007fba:	4b46      	ldr	r3, [pc, #280]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007fc2:	4b44      	ldr	r3, [pc, #272]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007fc8:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007fce:	4b41      	ldr	r3, [pc, #260]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007fd6:	4b3f      	ldr	r3, [pc, #252]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007fdc:	4b3d      	ldr	r3, [pc, #244]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007fe4:	483b      	ldr	r0, [pc, #236]	; (80080d4 <MX_ADC1_Init+0x178>)
 8007fe6:	f008 fd23 	bl	8010a30 <HAL_ADC_Init>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007ff0:	f001 fed3 	bl	8009d9a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4835      	ldr	r0, [pc, #212]	; (80080d4 <MX_ADC1_Init+0x178>)
 8008000:	f00a fb70 	bl	80126e4 <HAL_ADCEx_MultiModeConfigChannel>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800800a:	f001 fec6 	bl	8009d9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800800e:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <MX_ADC1_Init+0x17c>)
 8008010:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008012:	2306      	movs	r3, #6
 8008014:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8008016:	2301      	movs	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800801a:	237f      	movs	r3, #127	; 0x7f
 800801c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800801e:	2304      	movs	r3, #4
 8008020:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008026:	1d3b      	adds	r3, r7, #4
 8008028:	4619      	mov	r1, r3
 800802a:	482a      	ldr	r0, [pc, #168]	; (80080d4 <MX_ADC1_Init+0x178>)
 800802c:	f009 fc36 	bl	801189c <HAL_ADC_ConfigChannel>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008036:	f001 feb0 	bl	8009d9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800803a:	4b28      	ldr	r3, [pc, #160]	; (80080dc <MX_ADC1_Init+0x180>)
 800803c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800803e:	230c      	movs	r3, #12
 8008040:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4823      	ldr	r0, [pc, #140]	; (80080d4 <MX_ADC1_Init+0x178>)
 8008048:	f009 fc28 	bl	801189c <HAL_ADC_ConfigChannel>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008052:	f001 fea2 	bl	8009d9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008056:	4b22      	ldr	r3, [pc, #136]	; (80080e0 <MX_ADC1_Init+0x184>)
 8008058:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800805a:	2312      	movs	r3, #18
 800805c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800805e:	1d3b      	adds	r3, r7, #4
 8008060:	4619      	mov	r1, r3
 8008062:	481c      	ldr	r0, [pc, #112]	; (80080d4 <MX_ADC1_Init+0x178>)
 8008064:	f009 fc1a 	bl	801189c <HAL_ADC_ConfigChannel>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800806e:	f001 fe94 	bl	8009d9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <MX_ADC1_Init+0x188>)
 8008074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008076:	2318      	movs	r3, #24
 8008078:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4815      	ldr	r0, [pc, #84]	; (80080d4 <MX_ADC1_Init+0x178>)
 8008080:	f009 fc0c 	bl	801189c <HAL_ADC_ConfigChannel>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800808a:	f001 fe86 	bl	8009d9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800808e:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <MX_ADC1_Init+0x18c>)
 8008090:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008098:	1d3b      	adds	r3, r7, #4
 800809a:	4619      	mov	r1, r3
 800809c:	480d      	ldr	r0, [pc, #52]	; (80080d4 <MX_ADC1_Init+0x178>)
 800809e:	f009 fbfd 	bl	801189c <HAL_ADC_ConfigChannel>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80080a8:	f001 fe77 	bl	8009d9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <MX_ADC1_Init+0x190>)
 80080ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80080b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80080b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080b6:	1d3b      	adds	r3, r7, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	4806      	ldr	r0, [pc, #24]	; (80080d4 <MX_ADC1_Init+0x178>)
 80080bc:	f009 fbee 	bl	801189c <HAL_ADC_ConfigChannel>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80080c6:	f001 fe68 	bl	8009d9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80080ca:	bf00      	nop
 80080cc:	3730      	adds	r7, #48	; 0x30
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000714 	.word	0x20000714
 80080d8:	2e300800 	.word	0x2e300800
 80080dc:	3ef08000 	.word	0x3ef08000
 80080e0:	10c00010 	.word	0x10c00010
 80080e4:	0c900008 	.word	0x0c900008
 80080e8:	08600004 	.word	0x08600004
 80080ec:	04300002 	.word	0x04300002

080080f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b09e      	sub	sp, #120	; 0x78
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	609a      	str	r2, [r3, #8]
 8008104:	60da      	str	r2, [r3, #12]
 8008106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008108:	f107 0314 	add.w	r3, r7, #20
 800810c:	2250      	movs	r2, #80	; 0x50
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f00f fa51 	bl	80175b8 <memset>
  if(adcHandle->Instance==ADC1)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800811e:	f040 8082 	bne.w	8008226 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008126:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008128:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800812c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800812e:	f107 0314 	add.w	r3, r7, #20
 8008132:	4618      	mov	r0, r3
 8008134:	f00b ff18 	bl	8013f68 <HAL_RCCEx_PeriphCLKConfig>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800813e:	f001 fe2c 	bl	8009d9a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008142:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008146:	4a3a      	ldr	r2, [pc, #232]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800814c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800814e:	4b38      	ldr	r3, [pc, #224]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800815a:	4b35      	ldr	r3, [pc, #212]	; (8008230 <HAL_ADC_MspInit+0x140>)
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	4a34      	ldr	r2, [pc, #208]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008166:	4b32      	ldr	r3, [pc, #200]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008172:	4b2f      	ldr	r3, [pc, #188]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	4a2e      	ldr	r2, [pc, #184]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008178:	f043 0302 	orr.w	r3, r3, #2
 800817c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800817e:	4b2c      	ldr	r3, [pc, #176]	; (8008230 <HAL_ADC_MspInit+0x140>)
 8008180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	60bb      	str	r3, [r7, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 800818a:	230f      	movs	r3, #15
 800818c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800818e:	2303      	movs	r3, #3
 8008190:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008192:	2300      	movs	r3, #0
 8008194:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008196:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800819a:	4619      	mov	r1, r3
 800819c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081a0:	f00a ff64 	bl	801306c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80081a4:	f241 0301 	movw	r3, #4097	; 0x1001
 80081a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081aa:	2303      	movs	r3, #3
 80081ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081b6:	4619      	mov	r1, r3
 80081b8:	481e      	ldr	r0, [pc, #120]	; (8008234 <HAL_ADC_MspInit+0x144>)
 80081ba:	f00a ff57 	bl	801306c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80081be:	4b1e      	ldr	r3, [pc, #120]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081c0:	4a1e      	ldr	r2, [pc, #120]	; (800823c <HAL_ADC_MspInit+0x14c>)
 80081c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80081c4:	4b1c      	ldr	r3, [pc, #112]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081c6:	2205      	movs	r2, #5
 80081c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081ca:	4b1b      	ldr	r3, [pc, #108]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80081d0:	4b19      	ldr	r3, [pc, #100]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081d8:	2280      	movs	r2, #128	; 0x80
 80081da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80081dc:	4b16      	ldr	r3, [pc, #88]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80081e4:	4b14      	ldr	r3, [pc, #80]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80081ec:	4b12      	ldr	r3, [pc, #72]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081ee:	2220      	movs	r2, #32
 80081f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80081f2:	4b11      	ldr	r3, [pc, #68]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80081fa:	480f      	ldr	r0, [pc, #60]	; (8008238 <HAL_ADC_MspInit+0x148>)
 80081fc:	f00a fc6a 	bl	8012ad4 <HAL_DMA_Init>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008206:	f001 fdc8 	bl	8009d9a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a0a      	ldr	r2, [pc, #40]	; (8008238 <HAL_ADC_MspInit+0x148>)
 800820e:	655a      	str	r2, [r3, #84]	; 0x54
 8008210:	4a09      	ldr	r2, [pc, #36]	; (8008238 <HAL_ADC_MspInit+0x148>)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008216:	2200      	movs	r2, #0
 8008218:	2100      	movs	r1, #0
 800821a:	2012      	movs	r0, #18
 800821c:	f00a fc25 	bl	8012a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008220:	2012      	movs	r0, #18
 8008222:	f00a fc3c 	bl	8012a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008226:	bf00      	nop
 8008228:	3778      	adds	r7, #120	; 0x78
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40021000 	.word	0x40021000
 8008234:	48000400 	.word	0x48000400
 8008238:	20000780 	.word	0x20000780
 800823c:	40020008 	.word	0x40020008

08008240 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008248:	f7ff fc9e 	bl	8007b88 <pl_callback_getSensor>
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008254:	b084      	sub	sp, #16
 8008256:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	f107 0420 	add.w	r4, r7, #32
 8008262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008266:	edd7 7a08 	vldr	s15, [r7, #32]
 800826a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800826e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008272:	f2c0 819d 	blt.w	80085b0 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008276:	4bcd      	ldr	r3, [pc, #820]	; (80085ac <cal_table+0x358>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b06      	cmp	r3, #6
 800827e:	f200 833a 	bhi.w	80088f6 <cal_table+0x6a2>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <cal_table+0x34>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080088e9 	.word	0x080088e9
 800828c:	080082a5 	.word	0x080082a5
 8008290:	08008417 	.word	0x08008417
 8008294:	08008535 	.word	0x08008535
 8008298:	080088e9 	.word	0x080088e9
 800829c:	08008561 	.word	0x08008561
 80082a0:	08008587 	.word	0x08008587
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80082a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a6:	ed93 7a00 	vldr	s14, [r3]
 80082aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80082ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b6:	db0a      	blt.n	80082ce <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80082b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80082be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80082c6:	4bb9      	ldr	r3, [pc, #740]	; (80085ac <cal_table+0x358>)
 80082c8:	2202      	movs	r2, #2
 80082ca:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80082cc:	e313      	b.n	80088f6 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80082ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	edd3 7a00 	vldr	s15, [r3]
 80082d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	edd3 7a00 	vldr	s15, [r3]
 80082e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80082e6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80082ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80082ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80082f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80082fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80082fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008302:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008306:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800830a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800830e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008312:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800831a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831e:	d900      	bls.n	8008322 <cal_table+0xce>
		break;
 8008320:	e2e9      	b.n	80088f6 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 8008322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008324:	edd3 7a00 	vldr	s15, [r3]
 8008328:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	edd3 7a00 	vldr	s15, [r3]
 8008332:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008336:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800833a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800833e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008342:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008346:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800834a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800834e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008352:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008356:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800835a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800835e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	edd7 7a08 	vldr	s15, [r7, #32]
 800836a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8008374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008378:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800837c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f7f8 f909 	bl	8000598 <__aeabi_f2d>
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	4618      	mov	r0, r3
 800838e:	f7f8 f903 	bl	8000598 <__aeabi_f2d>
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	f7f8 f955 	bl	8000648 <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4690      	mov	r8, r2
 80083a4:	4699      	mov	r9, r3
 80083a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80083aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083ae:	ee17 0a90 	vmov	r0, s15
 80083b2:	f7f8 f8f1 	bl	8000598 <__aeabi_f2d>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4640      	mov	r0, r8
 80083bc:	4649      	mov	r1, r9
 80083be:	f7f8 f943 	bl	8000648 <__aeabi_dmul>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f7 ff85 	bl	80002d8 <__aeabi_dsub>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4610      	mov	r0, r2
 80083d4:	4619      	mov	r1, r3
 80083d6:	f7f8 fc0f 	bl	8000bf8 <__aeabi_d2f>
 80083da:	4602      	mov	r2, r0
 80083dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083de:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	ed93 7a00 	vldr	s14, [r3]
 80083e6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80083ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80083ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fc:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008400:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008404:	eef1 7a67 	vneg.f32	s15, s15
 8008408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800840e:	4b67      	ldr	r3, [pc, #412]	; (80085ac <cal_table+0x358>)
 8008410:	2203      	movs	r2, #3
 8008412:	701a      	strb	r2, [r3, #0]
		break;
 8008414:	e26f      	b.n	80088f6 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8008416:	ed97 7a08 	vldr	s14, [r7, #32]
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008420:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008424:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008428:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800842c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008430:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008434:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008438:	ee66 7a27 	vmul.f32	s15, s12, s15
 800843c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008440:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008444:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008448:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800844c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	d900      	bls.n	800845c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800845a:	e24c      	b.n	80088f6 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008462:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008466:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800846a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800846e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008472:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008476:	ee66 7a27 	vmul.f32	s15, s12, s15
 800847a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800847e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008482:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008486:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800848a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800848e:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008492:	edd7 7a08 	vldr	s15, [r7, #32]
 8008496:	ee77 6a67 	vsub.f32	s13, s14, s15
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a4:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7f8 f873 	bl	8000598 <__aeabi_f2d>
 80084b2:	4604      	mov	r4, r0
 80084b4:	460d      	mov	r5, r1
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7f8 f86d 	bl	8000598 <__aeabi_f2d>
 80084be:	f04f 0200 	mov.w	r2, #0
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	f7f8 f8bf 	bl	8000648 <__aeabi_dmul>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4690      	mov	r8, r2
 80084d0:	4699      	mov	r9, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f8 f860 	bl	8000598 <__aeabi_f2d>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4640      	mov	r0, r8
 80084de:	4649      	mov	r1, r9
 80084e0:	f7f8 f8b2 	bl	8000648 <__aeabi_dmul>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7f7 fef4 	bl	80002d8 <__aeabi_dsub>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4610      	mov	r0, r2
 80084f6:	4619      	mov	r1, r3
 80084f8:	f7f8 fb7e 	bl	8000bf8 <__aeabi_d2f>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008504:	ed93 7a00 	vldr	s14, [r3]
 8008508:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800850c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 800851e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008522:	eef1 7a67 	vneg.f32	s15, s15
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800852c:	4b1f      	ldr	r3, [pc, #124]	; (80085ac <cal_table+0x358>)
 800852e:	2203      	movs	r2, #3
 8008530:	701a      	strb	r2, [r3, #0]
		break;
 8008532:	e1e0      	b.n	80088f6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8008534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008536:	ed93 7a00 	vldr	s14, [r3]
 800853a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800853e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	d900      	bls.n	800854a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008548:	e1d5      	b.n	80088f6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800854a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008558:	4b14      	ldr	r3, [pc, #80]	; (80085ac <cal_table+0x358>)
 800855a:	2204      	movs	r2, #4
 800855c:	701a      	strb	r2, [r3, #0]
		break;
 800855e:	e1ca      	b.n	80088f6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	ed93 7a02 	vldr	s14, [r3, #8]
 8008566:	edd7 7a08 	vldr	s15, [r7, #32]
 800856a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800856e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008572:	da00      	bge.n	8008576 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008574:	e1bf      	b.n	80088f6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800857e:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <cal_table+0x358>)
 8008580:	2204      	movs	r2, #4
 8008582:	701a      	strb	r2, [r3, #0]
		break;
 8008584:	e1b7      	b.n	80088f6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8008586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008588:	ed93 7a02 	vldr	s14, [r3, #8]
 800858c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008598:	da00      	bge.n	800859c <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800859a:	e1ac      	b.n	80088f6 <cal_table+0x6a2>
			target->acceleration = 0;
 800859c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859e:	f04f 0200 	mov.w	r2, #0
 80085a2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085a4:	4b01      	ldr	r3, [pc, #4]	; (80085ac <cal_table+0x358>)
 80085a6:	2204      	movs	r2, #4
 80085a8:	701a      	strb	r2, [r3, #0]
		break;
 80085aa:	e1a4      	b.n	80088f6 <cal_table+0x6a2>
 80085ac:	200007e4 	.word	0x200007e4
	}
}else{
	switch (g_acc_flag) {
 80085b0:	4bce      	ldr	r3, [pc, #824]	; (80088ec <cal_table+0x698>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	f200 819d 	bhi.w	80088f6 <cal_table+0x6a2>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <cal_table+0x370>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080088f5 	.word	0x080088f5
 80085c8:	080085e1 	.word	0x080085e1
 80085cc:	08008753 	.word	0x08008753
 80085d0:	08008869 	.word	0x08008869
 80085d4:	08008895 	.word	0x08008895
 80085d8:	0800889d 	.word	0x0800889d
 80085dc:	080088c3 	.word	0x080088c3
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 80085e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e2:	ed93 7a00 	vldr	s14, [r3]
 80085e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80085ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f2:	d80a      	bhi.n	800860a <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 80085f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f8:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008602:	4bba      	ldr	r3, [pc, #744]	; (80088ec <cal_table+0x698>)
 8008604:	2202      	movs	r2, #2
 8008606:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008608:	e175      	b.n	80088f6 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800860a:	edd7 7a08 	vldr	s15, [r7, #32]
 800860e:	eeb1 7a67 	vneg.f32	s14, s15
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008614:	edd3 7a00 	vldr	s15, [r3]
 8008618:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	edd3 7a00 	vldr	s15, [r3]
 8008622:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008626:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800862a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800862e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008632:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008636:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800863a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800863e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008642:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008646:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800864a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800864e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008652:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800865a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865e:	d900      	bls.n	8008662 <cal_table+0x40e>
		break;
 8008660:	e149      	b.n	80088f6 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	edd3 7a00 	vldr	s15, [r3]
 8008668:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	edd3 7a00 	vldr	s15, [r3]
 8008672:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008676:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800867a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800867e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008682:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008686:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800868a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800868e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008692:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8008696:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800869a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800869e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80086a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80086ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80086b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086bc:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7f7 ff67 	bl	8000598 <__aeabi_f2d>
 80086ca:	4604      	mov	r4, r0
 80086cc:	460d      	mov	r5, r1
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7f7 ff61 	bl	8000598 <__aeabi_f2d>
 80086d6:	f04f 0200 	mov.w	r2, #0
 80086da:	f04f 0300 	mov.w	r3, #0
 80086de:	f7f7 ffb3 	bl	8000648 <__aeabi_dmul>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4690      	mov	r8, r2
 80086e8:	4699      	mov	r9, r3
 80086ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80086ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80086f2:	ee17 0a90 	vmov	r0, s15
 80086f6:	f7f7 ff4f 	bl	8000598 <__aeabi_f2d>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f7 ffa1 	bl	8000648 <__aeabi_dmul>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f7 fde5 	bl	80002dc <__adddf3>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4610      	mov	r0, r2
 8008718:	4619      	mov	r1, r3
 800871a:	f7f8 fa6d 	bl	8000bf8 <__aeabi_d2f>
 800871e:	4602      	mov	r2, r0
 8008720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008722:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	ed93 7a00 	vldr	s14, [r3]
 800872a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800872e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008732:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800873a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800873e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008740:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800874a:	4b68      	ldr	r3, [pc, #416]	; (80088ec <cal_table+0x698>)
 800874c:	2203      	movs	r2, #3
 800874e:	701a      	strb	r2, [r3, #0]
		break;
 8008750:	e0d1      	b.n	80088f6 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	ed93 7a02 	vldr	s14, [r3, #8]
 8008758:	edd7 7a08 	vldr	s15, [r7, #32]
 800875c:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008760:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008764:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008768:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 800876c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008770:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008774:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008778:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800877c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008780:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008784:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008788:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 800878c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008794:	d900      	bls.n	8008798 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008796:	e0ae      	b.n	80088f6 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	ed93 7a02 	vldr	s14, [r3, #8]
 800879e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80087aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087be:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80087c2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087c6:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80087ca:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80087ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80087d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80087dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e0:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80087e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7f7 fed5 	bl	8000598 <__aeabi_f2d>
 80087ee:	4604      	mov	r4, r0
 80087f0:	460d      	mov	r5, r1
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7f7 fecf 	bl	8000598 <__aeabi_f2d>
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	f04f 0300 	mov.w	r3, #0
 8008802:	f7f7 ff21 	bl	8000648 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4690      	mov	r8, r2
 800880c:	4699      	mov	r9, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7f7 fec2 	bl	8000598 <__aeabi_f2d>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4640      	mov	r0, r8
 800881a:	4649      	mov	r1, r9
 800881c:	f7f7 ff14 	bl	8000648 <__aeabi_dmul>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f7f7 fd58 	bl	80002dc <__adddf3>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	f7f8 f9e0 	bl	8000bf8 <__aeabi_d2f>
 8008838:	4602      	mov	r2, r0
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 800883e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008840:	ed93 7a00 	vldr	s14, [r3]
 8008844:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008848:	edd7 7a01 	vldr	s15, [r7, #4]
 800884c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 800885a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885e:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008860:	4b22      	ldr	r3, [pc, #136]	; (80088ec <cal_table+0x698>)
 8008862:	2203      	movs	r2, #3
 8008864:	701a      	strb	r2, [r3, #0]
		break;
 8008866:	e046      	b.n	80088f6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	ed93 7a00 	vldr	s14, [r3]
 800886e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887a:	da00      	bge.n	800887e <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800887c:	e03b      	b.n	80088f6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800887e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008882:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800888c:	4b17      	ldr	r3, [pc, #92]	; (80088ec <cal_table+0x698>)
 800888e:	2204      	movs	r2, #4
 8008890:	701a      	strb	r2, [r3, #0]
		break;
 8008892:	e030      	b.n	80088f6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008894:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <cal_table+0x69c>)
 8008896:	2201      	movs	r2, #1
 8008898:	701a      	strb	r2, [r3, #0]
		break;
 800889a:	e02c      	b.n	80088f6 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	ed93 7a02 	vldr	s14, [r3, #8]
 80088a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80088a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ae:	d900      	bls.n	80088b2 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088b0:	e021      	b.n	80088f6 <cal_table+0x6a2>
			target->acceleration = 0;
 80088b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b4:	f04f 0200 	mov.w	r2, #0
 80088b8:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <cal_table+0x698>)
 80088bc:	2204      	movs	r2, #4
 80088be:	701a      	strb	r2, [r3, #0]
		break;
 80088c0:	e019      	b.n	80088f6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80088c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80088cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d4:	d900      	bls.n	80088d8 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088d6:	e00e      	b.n	80088f6 <cal_table+0x6a2>
			target->acceleration = 0;
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088e0:	4b02      	ldr	r3, [pc, #8]	; (80088ec <cal_table+0x698>)
 80088e2:	2204      	movs	r2, #4
 80088e4:	701a      	strb	r2, [r3, #0]
		break;
 80088e6:	e006      	b.n	80088f6 <cal_table+0x6a2>
		break;
 80088e8:	bf00      	nop
 80088ea:	e004      	b.n	80088f6 <cal_table+0x6a2>
 80088ec:	200007e4 	.word	0x200007e4
 80088f0:	200007e5 	.word	0x200007e5
		break;
 80088f4:	bf00      	nop
	}

}

}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008900:	b004      	add	sp, #16
 8008902:	4770      	bx	lr
 8008904:	0000      	movs	r0, r0
	...

08008908 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800890c:	b08c      	sub	sp, #48	; 0x30
 800890e:	af00      	add	r7, sp, #0
 8008910:	eef0 6a40 	vmov.f32	s13, s0
 8008914:	eeb0 7a60 	vmov.f32	s14, s1
 8008918:	eef0 7a41 	vmov.f32	s15, s2
 800891c:	6138      	str	r0, [r7, #16]
 800891e:	edc7 6a05 	vstr	s13, [r7, #20]
 8008922:	ed87 7a06 	vstr	s14, [r7, #24]
 8008926:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 800892a:	4be7      	ldr	r3, [pc, #924]	; (8008cc8 <cal_mollifier_table+0x3c0>)
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 800892e:	4be7      	ldr	r3, [pc, #924]	; (8008ccc <cal_mollifier_table+0x3c4>)
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008932:	4be7      	ldr	r3, [pc, #924]	; (8008cd0 <cal_mollifier_table+0x3c8>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f7f7 fe2e 	bl	8000598 <__aeabi_f2d>
 800893c:	a3da      	add	r3, pc, #872	; (adr r3, 8008ca8 <cal_mollifier_table+0x3a0>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fccb 	bl	80002dc <__adddf3>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4610      	mov	r0, r2
 800894c:	4619      	mov	r1, r3
 800894e:	f7f8 f953 	bl	8000bf8 <__aeabi_d2f>
 8008952:	4603      	mov	r3, r0
 8008954:	4ade      	ldr	r2, [pc, #888]	; (8008cd0 <cal_mollifier_table+0x3c8>)
 8008956:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008958:	edd7 7a05 	vldr	s15, [r7, #20]
 800895c:	eef0 7ae7 	vabs.f32	s15, s15
 8008960:	ee17 0a90 	vmov	r0, s15
 8008964:	f7f7 fe18 	bl	8000598 <__aeabi_f2d>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	f7f7 fcb6 	bl	80002dc <__adddf3>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	a3cd      	add	r3, pc, #820	; (adr r3, 8008cb0 <cal_mollifier_table+0x3a8>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 ff8d 	bl	800089c <__aeabi_ddiv>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4610      	mov	r0, r2
 8008988:	4619      	mov	r1, r3
 800898a:	a3cb      	add	r3, pc, #812	; (adr r3, 8008cb8 <cal_mollifier_table+0x3b0>)
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f7f7 fe5a 	bl	8000648 <__aeabi_dmul>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4614      	mov	r4, r2
 800899a:	461d      	mov	r5, r3
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f7 fdfa 	bl	8000598 <__aeabi_f2d>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4620      	mov	r0, r4
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7f7 ff76 	bl	800089c <__aeabi_ddiv>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4610      	mov	r0, r2
 80089b6:	4619      	mov	r1, r3
 80089b8:	f7f8 f91e 	bl	8000bf8 <__aeabi_d2f>
 80089bc:	4603      	mov	r3, r0
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 80089c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089c4:	eef1 7a67 	vneg.f32	s15, s15
 80089c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80089d0:	4bbf      	ldr	r3, [pc, #764]	; (8008cd0 <cal_mollifier_table+0x3c8>)
 80089d2:	edd3 7a00 	vldr	s15, [r3]
 80089d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089de:	f140 8698 	bpl.w	8009712 <cal_mollifier_table+0xe0a>
 80089e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80089ee:	4bb8      	ldr	r3, [pc, #736]	; (8008cd0 <cal_mollifier_table+0x3c8>)
 80089f0:	edd3 7a00 	vldr	s15, [r3]
 80089f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fc:	f340 8689 	ble.w	8009712 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008a06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	ee17 0a90 	vmov	r0, s15
 8008a1e:	f7f7 fdbb 	bl	8000598 <__aeabi_f2d>
 8008a22:	a3a3      	add	r3, pc, #652	; (adr r3, 8008cb0 <cal_mollifier_table+0x3a8>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 ff38 	bl	800089c <__aeabi_ddiv>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	461d      	mov	r5, r3
 8008a34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a38:	eeb1 7a67 	vneg.f32	s14, s15
 8008a3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a44:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008a48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a54:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008a58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008a5c:	4b9c      	ldr	r3, [pc, #624]	; (8008cd0 <cal_mollifier_table+0x3c8>)
 8008a5e:	ed93 6a00 	vldr	s12, [r3]
 8008a62:	4b9b      	ldr	r3, [pc, #620]	; (8008cd0 <cal_mollifier_table+0x3c8>)
 8008a64:	edd3 7a00 	vldr	s15, [r3]
 8008a68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008a6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008a70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008a74:	ee16 0a90 	vmov	r0, s13
 8008a78:	f7f7 fd8e 	bl	8000598 <__aeabi_f2d>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	ec43 2b10 	vmov	d0, r2, r3
 8008a84:	f011 fb1c 	bl	801a0c0 <exp>
 8008a88:	ec53 2b10 	vmov	r2, r3, d0
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	f7f7 fdda 	bl	8000648 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	f7f8 f8ac 	bl	8000bf8 <__aeabi_d2f>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008aa6:	4b8a      	ldr	r3, [pc, #552]	; (8008cd0 <cal_mollifier_table+0x3c8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f7 fd74 	bl	8000598 <__aeabi_f2d>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	460d      	mov	r5, r1
 8008ab4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ab8:	eef1 7a67 	vneg.f32	s15, s15
 8008abc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ac0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ac4:	ee16 0a90 	vmov	r0, s13
 8008ac8:	f7f7 fd66 	bl	8000598 <__aeabi_f2d>
 8008acc:	a37c      	add	r3, pc, #496	; (adr r3, 8008cc0 <cal_mollifier_table+0x3b8>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fee3 	bl	800089c <__aeabi_ddiv>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4690      	mov	r8, r2
 8008adc:	4699      	mov	r9, r3
 8008ade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ae0:	f7f7 fd5a 	bl	8000598 <__aeabi_f2d>
 8008ae4:	a370      	add	r3, pc, #448	; (adr r3, 8008ca8 <cal_mollifier_table+0x3a0>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fdad 	bl	8000648 <__aeabi_dmul>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4640      	mov	r0, r8
 8008af4:	4649      	mov	r1, r9
 8008af6:	f7f7 fbf1 	bl	80002dc <__adddf3>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4620      	mov	r0, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7f8 f813 	bl	8000b2c <__aeabi_dcmplt>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 8163 	beq.w	8008dd4 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008b0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	ee17 0a90 	vmov	r0, s15
 8008b26:	f7f7 fd37 	bl	8000598 <__aeabi_f2d>
 8008b2a:	a361      	add	r3, pc, #388	; (adr r3, 8008cb0 <cal_mollifier_table+0x3a8>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 feb4 	bl	800089c <__aeabi_ddiv>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008b3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b40:	eeb1 7a67 	vneg.f32	s14, s15
 8008b44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b54:	ee16 0a90 	vmov	r0, s13
 8008b58:	f7f7 fd1e 	bl	8000598 <__aeabi_f2d>
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	460d      	mov	r5, r1
 8008b60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b64:	eef1 7a67 	vneg.f32	s15, s15
 8008b68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b70:	ee16 0a90 	vmov	r0, s13
 8008b74:	f7f7 fd10 	bl	8000598 <__aeabi_f2d>
 8008b78:	a351      	add	r3, pc, #324	; (adr r3, 8008cc0 <cal_mollifier_table+0x3b8>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fe8d 	bl	800089c <__aeabi_ddiv>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4620      	mov	r0, r4
 8008b88:	4629      	mov	r1, r5
 8008b8a:	f7f7 fd5d 	bl	8000648 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4690      	mov	r8, r2
 8008b94:	4699      	mov	r9, r3
 8008b96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b9e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008ba2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ba6:	ee16 0a90 	vmov	r0, s13
 8008baa:	f7f7 fcf5 	bl	8000598 <__aeabi_f2d>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bb6:	eef1 7a67 	vneg.f32	s15, s15
 8008bba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bc2:	ee16 0a90 	vmov	r0, s13
 8008bc6:	f7f7 fce7 	bl	8000598 <__aeabi_f2d>
 8008bca:	a33d      	add	r3, pc, #244	; (adr r3, 8008cc0 <cal_mollifier_table+0x3b8>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f7f7 fe64 	bl	800089c <__aeabi_ddiv>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4692      	mov	sl, r2
 8008bda:	469b      	mov	fp, r3
 8008bdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008be0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008be4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008be8:	ee16 0a90 	vmov	r0, s13
 8008bec:	f7f7 fcd4 	bl	8000598 <__aeabi_f2d>
 8008bf0:	a333      	add	r3, pc, #204	; (adr r3, 8008cc0 <cal_mollifier_table+0x3b8>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fe51 	bl	800089c <__aeabi_ddiv>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4650      	mov	r0, sl
 8008c00:	4659      	mov	r1, fp
 8008c02:	f7f7 fd21 	bl	8000648 <__aeabi_dmul>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 fb65 	bl	80002dc <__adddf3>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4640      	mov	r0, r8
 8008c18:	4649      	mov	r1, r9
 8008c1a:	f7f7 fe3f 	bl	800089c <__aeabi_ddiv>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4690      	mov	r8, r2
 8008c24:	4699      	mov	r9, r3
 8008c26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c2e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c36:	ee16 0a90 	vmov	r0, s13
 8008c3a:	f7f7 fcad 	bl	8000598 <__aeabi_f2d>
 8008c3e:	4604      	mov	r4, r0
 8008c40:	460d      	mov	r5, r1
 8008c42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c46:	eef1 7a67 	vneg.f32	s15, s15
 8008c4a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c52:	ee16 0a90 	vmov	r0, s13
 8008c56:	f7f7 fc9f 	bl	8000598 <__aeabi_f2d>
 8008c5a:	a319      	add	r3, pc, #100	; (adr r3, 8008cc0 <cal_mollifier_table+0x3b8>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fe1c 	bl	800089c <__aeabi_ddiv>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4692      	mov	sl, r2
 8008c6a:	469b      	mov	fp, r3
 8008c6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c78:	ee16 0a90 	vmov	r0, s13
 8008c7c:	f7f7 fc8c 	bl	8000598 <__aeabi_f2d>
 8008c80:	a30f      	add	r3, pc, #60	; (adr r3, 8008cc0 <cal_mollifier_table+0x3b8>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fe09 	bl	800089c <__aeabi_ddiv>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4650      	mov	r0, sl
 8008c90:	4659      	mov	r1, fp
 8008c92:	f7f7 fcd9 	bl	8000648 <__aeabi_dmul>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	f7f7 fb1d 	bl	80002dc <__adddf3>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	e016      	b.n	8008cd4 <cal_mollifier_table+0x3cc>
 8008ca6:	bf00      	nop
 8008ca8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008cac:	3f50624d 	.word	0x3f50624d
 8008cb0:	f9db22d1 	.word	0xf9db22d1
 8008cb4:	3fdc6a7e 	.word	0x3fdc6a7e
 8008cb8:	362cef38 	.word	0x362cef38
 8008cbc:	3fd78b56 	.word	0x3fd78b56
 8008cc0:	04189375 	.word	0x04189375
 8008cc4:	3ff50e56 	.word	0x3ff50e56
 8008cc8:	41700000 	.word	0x41700000
 8008ccc:	c1700000 	.word	0xc1700000
 8008cd0:	200007e0 	.word	0x200007e0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 fddf 	bl	800089c <__aeabi_ddiv>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ce6:	f7f7 fcaf 	bl	8000648 <__aeabi_dmul>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4692      	mov	sl, r2
 8008cf0:	469b      	mov	fp, r3
 8008cf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cf6:	eeb1 7a67 	vneg.f32	s14, s15
 8008cfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d02:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d0a:	ee16 0a90 	vmov	r0, s13
 8008d0e:	f7f7 fc43 	bl	8000598 <__aeabi_f2d>
 8008d12:	4604      	mov	r4, r0
 8008d14:	460d      	mov	r5, r1
 8008d16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d1e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d26:	ee16 0a90 	vmov	r0, s13
 8008d2a:	f7f7 fc35 	bl	8000598 <__aeabi_f2d>
 8008d2e:	4680      	mov	r8, r0
 8008d30:	4689      	mov	r9, r1
 8008d32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d36:	eef1 7a67 	vneg.f32	s15, s15
 8008d3a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d42:	ee16 0a90 	vmov	r0, s13
 8008d46:	f7f7 fc27 	bl	8000598 <__aeabi_f2d>
 8008d4a:	a3e1      	add	r3, pc, #900	; (adr r3, 80090d0 <cal_mollifier_table+0x7c8>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f7f7 fda4 	bl	800089c <__aeabi_ddiv>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008d5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d68:	ee16 0a90 	vmov	r0, s13
 8008d6c:	f7f7 fc14 	bl	8000598 <__aeabi_f2d>
 8008d70:	a3d7      	add	r3, pc, #860	; (adr r3, 80090d0 <cal_mollifier_table+0x7c8>)
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f7f7 fd91 	bl	800089c <__aeabi_ddiv>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d82:	f7f7 fc61 	bl	8000648 <__aeabi_dmul>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 faa5 	bl	80002dc <__adddf3>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4620      	mov	r0, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f7f7 fd7f 	bl	800089c <__aeabi_ddiv>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	ec43 2b17 	vmov	d7, r2, r3
 8008da6:	eeb0 0a47 	vmov.f32	s0, s14
 8008daa:	eef0 0a67 	vmov.f32	s1, s15
 8008dae:	f011 f987 	bl	801a0c0 <exp>
 8008db2:	ec53 2b10 	vmov	r2, r3, d0
 8008db6:	4650      	mov	r0, sl
 8008db8:	4659      	mov	r1, fp
 8008dba:	f7f7 fc45 	bl	8000648 <__aeabi_dmul>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f7f7 ff17 	bl	8000bf8 <__aeabi_d2f>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008dd0:	f000 bcb4 	b.w	800973c <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008dd4:	4bc0      	ldr	r3, [pc, #768]	; (80090d8 <cal_mollifier_table+0x7d0>)
 8008dd6:	edd3 7a00 	vldr	s15, [r3]
 8008dda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de2:	f140 817b 	bpl.w	80090dc <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008de6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008dea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfa:	ee17 0a90 	vmov	r0, s15
 8008dfe:	f7f7 fbcb 	bl	8000598 <__aeabi_f2d>
 8008e02:	a3af      	add	r3, pc, #700	; (adr r3, 80090c0 <cal_mollifier_table+0x7b8>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fd48 	bl	800089c <__aeabi_ddiv>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008e14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e18:	eeb1 7a67 	vneg.f32	s14, s15
 8008e1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e24:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e2c:	ee16 0a90 	vmov	r0, s13
 8008e30:	f7f7 fbb2 	bl	8000598 <__aeabi_f2d>
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	4ba7      	ldr	r3, [pc, #668]	; (80090d8 <cal_mollifier_table+0x7d0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7f7 fbab 	bl	8000598 <__aeabi_f2d>
 8008e42:	4680      	mov	r8, r0
 8008e44:	4689      	mov	r9, r1
 8008e46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e48:	f7f7 fba6 	bl	8000598 <__aeabi_f2d>
 8008e4c:	a39e      	add	r3, pc, #632	; (adr r3, 80090c8 <cal_mollifier_table+0x7c0>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fbf9 	bl	8000648 <__aeabi_dmul>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fa3b 	bl	80002d8 <__aeabi_dsub>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fbed 	bl	8000648 <__aeabi_dmul>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	e9c7 2300 	strd	r2, r3, [r7]
 8008e76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e7e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e86:	ee16 0a90 	vmov	r0, s13
 8008e8a:	f7f7 fb85 	bl	8000598 <__aeabi_f2d>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4689      	mov	r9, r1
 8008e92:	4b91      	ldr	r3, [pc, #580]	; (80090d8 <cal_mollifier_table+0x7d0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f7 fb7e 	bl	8000598 <__aeabi_f2d>
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ea2:	f7f7 fb79 	bl	8000598 <__aeabi_f2d>
 8008ea6:	a388      	add	r3, pc, #544	; (adr r3, 80090c8 <cal_mollifier_table+0x7c0>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 fbcc 	bl	8000648 <__aeabi_dmul>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fa0e 	bl	80002d8 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4692      	mov	sl, r2
 8008ec2:	469b      	mov	fp, r3
 8008ec4:	4b84      	ldr	r3, [pc, #528]	; (80090d8 <cal_mollifier_table+0x7d0>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7f7 fb65 	bl	8000598 <__aeabi_f2d>
 8008ece:	4604      	mov	r4, r0
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed4:	f7f7 fb60 	bl	8000598 <__aeabi_f2d>
 8008ed8:	a37b      	add	r3, pc, #492	; (adr r3, 80090c8 <cal_mollifier_table+0x7c0>)
 8008eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ede:	f7f7 fbb3 	bl	8000648 <__aeabi_dmul>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 f9f5 	bl	80002d8 <__aeabi_dsub>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	f7f7 fba7 	bl	8000648 <__aeabi_dmul>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4640      	mov	r0, r8
 8008f00:	4649      	mov	r1, r9
 8008f02:	f7f7 f9e9 	bl	80002d8 <__aeabi_dsub>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f0e:	f7f7 fcc5 	bl	800089c <__aeabi_ddiv>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	e9c7 2300 	strd	r2, r3, [r7]
 8008f1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f22:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f2a:	ee16 0a90 	vmov	r0, s13
 8008f2e:	f7f7 fb33 	bl	8000598 <__aeabi_f2d>
 8008f32:	4680      	mov	r8, r0
 8008f34:	4689      	mov	r9, r1
 8008f36:	4b68      	ldr	r3, [pc, #416]	; (80090d8 <cal_mollifier_table+0x7d0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f7 fb2c 	bl	8000598 <__aeabi_f2d>
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f46:	f7f7 fb27 	bl	8000598 <__aeabi_f2d>
 8008f4a:	a35f      	add	r3, pc, #380	; (adr r3, 80090c8 <cal_mollifier_table+0x7c0>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f7f7 fb7a 	bl	8000648 <__aeabi_dmul>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 f9bc 	bl	80002d8 <__aeabi_dsub>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4692      	mov	sl, r2
 8008f66:	469b      	mov	fp, r3
 8008f68:	4b5b      	ldr	r3, [pc, #364]	; (80090d8 <cal_mollifier_table+0x7d0>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f7 fb13 	bl	8000598 <__aeabi_f2d>
 8008f72:	4604      	mov	r4, r0
 8008f74:	460d      	mov	r5, r1
 8008f76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f78:	f7f7 fb0e 	bl	8000598 <__aeabi_f2d>
 8008f7c:	a352      	add	r3, pc, #328	; (adr r3, 80090c8 <cal_mollifier_table+0x7c0>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 fb61 	bl	8000648 <__aeabi_dmul>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	f7f7 f9a3 	bl	80002d8 <__aeabi_dsub>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4650      	mov	r0, sl
 8008f98:	4659      	mov	r1, fp
 8008f9a:	f7f7 fb55 	bl	8000648 <__aeabi_dmul>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 f997 	bl	80002d8 <__aeabi_dsub>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fb2:	f7f7 fc73 	bl	800089c <__aeabi_ddiv>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fbe:	f7f7 fb43 	bl	8000648 <__aeabi_dmul>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008fca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fce:	eeb1 7a67 	vneg.f32	s14, s15
 8008fd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008fde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fe2:	ee16 0a90 	vmov	r0, s13
 8008fe6:	f7f7 fad7 	bl	8000598 <__aeabi_f2d>
 8008fea:	4680      	mov	r8, r0
 8008fec:	4689      	mov	r9, r1
 8008fee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ff2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ff6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008ffa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ffe:	ee16 0a90 	vmov	r0, s13
 8009002:	f7f7 fac9 	bl	8000598 <__aeabi_f2d>
 8009006:	4682      	mov	sl, r0
 8009008:	468b      	mov	fp, r1
 800900a:	4b33      	ldr	r3, [pc, #204]	; (80090d8 <cal_mollifier_table+0x7d0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f7f7 fac2 	bl	8000598 <__aeabi_f2d>
 8009014:	4604      	mov	r4, r0
 8009016:	460d      	mov	r5, r1
 8009018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800901a:	f7f7 fabd 	bl	8000598 <__aeabi_f2d>
 800901e:	a32a      	add	r3, pc, #168	; (adr r3, 80090c8 <cal_mollifier_table+0x7c0>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f7f7 fb10 	bl	8000648 <__aeabi_dmul>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4620      	mov	r0, r4
 800902e:	4629      	mov	r1, r5
 8009030:	f7f7 f952 	bl	80002d8 <__aeabi_dsub>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	e9c7 2300 	strd	r2, r3, [r7]
 800903c:	4b26      	ldr	r3, [pc, #152]	; (80090d8 <cal_mollifier_table+0x7d0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 faa9 	bl	8000598 <__aeabi_f2d>
 8009046:	4604      	mov	r4, r0
 8009048:	460d      	mov	r5, r1
 800904a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904c:	f7f7 faa4 	bl	8000598 <__aeabi_f2d>
 8009050:	a31d      	add	r3, pc, #116	; (adr r3, 80090c8 <cal_mollifier_table+0x7c0>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 faf7 	bl	8000648 <__aeabi_dmul>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4620      	mov	r0, r4
 8009060:	4629      	mov	r1, r5
 8009062:	f7f7 f939 	bl	80002d8 <__aeabi_dsub>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800906e:	f7f7 faeb 	bl	8000648 <__aeabi_dmul>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4650      	mov	r0, sl
 8009078:	4659      	mov	r1, fp
 800907a:	f7f7 f92d 	bl	80002d8 <__aeabi_dsub>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 fc09 	bl	800089c <__aeabi_ddiv>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	ec43 2b17 	vmov	d7, r2, r3
 8009092:	eeb0 0a47 	vmov.f32	s0, s14
 8009096:	eef0 0a67 	vmov.f32	s1, s15
 800909a:	f011 f811 	bl	801a0c0 <exp>
 800909e:	ec53 2b10 	vmov	r2, r3, d0
 80090a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090a6:	f7f7 facf 	bl	8000648 <__aeabi_dmul>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4610      	mov	r0, r2
 80090b0:	4619      	mov	r1, r3
 80090b2:	f7f7 fda1 	bl	8000bf8 <__aeabi_d2f>
 80090b6:	4602      	mov	r2, r0
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80090bc:	e33e      	b.n	800973c <cal_mollifier_table+0xe34>
 80090be:	bf00      	nop
 80090c0:	f9db22d1 	.word	0xf9db22d1
 80090c4:	3fdc6a7e 	.word	0x3fdc6a7e
 80090c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80090cc:	3f50624d 	.word	0x3f50624d
 80090d0:	04189375 	.word	0x04189375
 80090d4:	3ff50e56 	.word	0x3ff50e56
 80090d8:	200007e0 	.word	0x200007e0
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 80090dc:	4bd4      	ldr	r3, [pc, #848]	; (8009430 <cal_mollifier_table+0xb28>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7f7 fa59 	bl	8000598 <__aeabi_f2d>
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80090f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090f6:	ee16 0a90 	vmov	r0, s13
 80090fa:	f7f7 fa4d 	bl	8000598 <__aeabi_f2d>
 80090fe:	a3c6      	add	r3, pc, #792	; (adr r3, 8009418 <cal_mollifier_table+0xb10>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 fbca 	bl	800089c <__aeabi_ddiv>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4690      	mov	r8, r2
 800910e:	4699      	mov	r9, r3
 8009110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009112:	f7f7 fa41 	bl	8000598 <__aeabi_f2d>
 8009116:	a3c2      	add	r3, pc, #776	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f7f7 fa94 	bl	8000648 <__aeabi_dmul>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 f8d8 	bl	80002dc <__adddf3>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4620      	mov	r0, r4
 8009132:	4629      	mov	r1, r5
 8009134:	f7f7 fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 817a 	beq.w	8009434 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009140:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009144:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009154:	ee17 0a90 	vmov	r0, s15
 8009158:	f7f7 fa1e 	bl	8000598 <__aeabi_f2d>
 800915c:	a3b2      	add	r3, pc, #712	; (adr r3, 8009428 <cal_mollifier_table+0xb20>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 fb9b 	bl	800089c <__aeabi_ddiv>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800916e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009172:	eeb1 7a67 	vneg.f32	s14, s15
 8009176:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009182:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009186:	ee16 0a90 	vmov	r0, s13
 800918a:	f7f7 fa05 	bl	8000598 <__aeabi_f2d>
 800918e:	4604      	mov	r4, r0
 8009190:	460d      	mov	r5, r1
 8009192:	4ba7      	ldr	r3, [pc, #668]	; (8009430 <cal_mollifier_table+0xb28>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f9fe 	bl	8000598 <__aeabi_f2d>
 800919c:	4680      	mov	r8, r0
 800919e:	4689      	mov	r9, r1
 80091a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091a2:	f7f7 f9f9 	bl	8000598 <__aeabi_f2d>
 80091a6:	a39e      	add	r3, pc, #632	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f7f7 fa4c 	bl	8000648 <__aeabi_dmul>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4640      	mov	r0, r8
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7f7 f88e 	bl	80002d8 <__aeabi_dsub>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f7 fa40 	bl	8000648 <__aeabi_dmul>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	e9c7 2300 	strd	r2, r3, [r7]
 80091d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80091d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80091dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091e0:	ee16 0a90 	vmov	r0, s13
 80091e4:	f7f7 f9d8 	bl	8000598 <__aeabi_f2d>
 80091e8:	4680      	mov	r8, r0
 80091ea:	4689      	mov	r9, r1
 80091ec:	4b90      	ldr	r3, [pc, #576]	; (8009430 <cal_mollifier_table+0xb28>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7f7 f9d1 	bl	8000598 <__aeabi_f2d>
 80091f6:	4604      	mov	r4, r0
 80091f8:	460d      	mov	r5, r1
 80091fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091fc:	f7f7 f9cc 	bl	8000598 <__aeabi_f2d>
 8009200:	a387      	add	r3, pc, #540	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f7 fa1f 	bl	8000648 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 f861 	bl	80002d8 <__aeabi_dsub>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4692      	mov	sl, r2
 800921c:	469b      	mov	fp, r3
 800921e:	4b84      	ldr	r3, [pc, #528]	; (8009430 <cal_mollifier_table+0xb28>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f7f7 f9b8 	bl	8000598 <__aeabi_f2d>
 8009228:	4604      	mov	r4, r0
 800922a:	460d      	mov	r5, r1
 800922c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800922e:	f7f7 f9b3 	bl	8000598 <__aeabi_f2d>
 8009232:	a37b      	add	r3, pc, #492	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f7f7 fa06 	bl	8000648 <__aeabi_dmul>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4620      	mov	r0, r4
 8009242:	4629      	mov	r1, r5
 8009244:	f7f7 f848 	bl	80002d8 <__aeabi_dsub>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4650      	mov	r0, sl
 800924e:	4659      	mov	r1, fp
 8009250:	f7f7 f9fa 	bl	8000648 <__aeabi_dmul>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4640      	mov	r0, r8
 800925a:	4649      	mov	r1, r9
 800925c:	f7f7 f83c 	bl	80002d8 <__aeabi_dsub>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009268:	f7f7 fb18 	bl	800089c <__aeabi_ddiv>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	e9c7 2300 	strd	r2, r3, [r7]
 8009274:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009278:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800927c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009280:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009284:	ee16 0a90 	vmov	r0, s13
 8009288:	f7f7 f986 	bl	8000598 <__aeabi_f2d>
 800928c:	4680      	mov	r8, r0
 800928e:	4689      	mov	r9, r1
 8009290:	4b67      	ldr	r3, [pc, #412]	; (8009430 <cal_mollifier_table+0xb28>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4618      	mov	r0, r3
 8009296:	f7f7 f97f 	bl	8000598 <__aeabi_f2d>
 800929a:	4604      	mov	r4, r0
 800929c:	460d      	mov	r5, r1
 800929e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092a0:	f7f7 f97a 	bl	8000598 <__aeabi_f2d>
 80092a4:	a35e      	add	r3, pc, #376	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f7 f9cd 	bl	8000648 <__aeabi_dmul>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f7 f80f 	bl	80002d8 <__aeabi_dsub>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4692      	mov	sl, r2
 80092c0:	469b      	mov	fp, r3
 80092c2:	4b5b      	ldr	r3, [pc, #364]	; (8009430 <cal_mollifier_table+0xb28>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7f7 f966 	bl	8000598 <__aeabi_f2d>
 80092cc:	4604      	mov	r4, r0
 80092ce:	460d      	mov	r5, r1
 80092d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d2:	f7f7 f961 	bl	8000598 <__aeabi_f2d>
 80092d6:	a352      	add	r3, pc, #328	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f7 f9b4 	bl	8000648 <__aeabi_dmul>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4620      	mov	r0, r4
 80092e6:	4629      	mov	r1, r5
 80092e8:	f7f6 fff6 	bl	80002d8 <__aeabi_dsub>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4650      	mov	r0, sl
 80092f2:	4659      	mov	r1, fp
 80092f4:	f7f7 f9a8 	bl	8000648 <__aeabi_dmul>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f6 ffea 	bl	80002d8 <__aeabi_dsub>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800930c:	f7f7 fac6 	bl	800089c <__aeabi_ddiv>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009318:	f7f7 f996 	bl	8000648 <__aeabi_dmul>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009324:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009328:	eeb1 7a67 	vneg.f32	s14, s15
 800932c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009334:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800933c:	ee16 0a90 	vmov	r0, s13
 8009340:	f7f7 f92a 	bl	8000598 <__aeabi_f2d>
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800934c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009350:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009354:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009358:	ee16 0a90 	vmov	r0, s13
 800935c:	f7f7 f91c 	bl	8000598 <__aeabi_f2d>
 8009360:	4682      	mov	sl, r0
 8009362:	468b      	mov	fp, r1
 8009364:	4b32      	ldr	r3, [pc, #200]	; (8009430 <cal_mollifier_table+0xb28>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f7f7 f915 	bl	8000598 <__aeabi_f2d>
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009374:	f7f7 f910 	bl	8000598 <__aeabi_f2d>
 8009378:	a329      	add	r3, pc, #164	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f7 f963 	bl	8000648 <__aeabi_dmul>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	f7f6 ffa5 	bl	80002d8 <__aeabi_dsub>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	e9c7 2300 	strd	r2, r3, [r7]
 8009396:	4b26      	ldr	r3, [pc, #152]	; (8009430 <cal_mollifier_table+0xb28>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f7f7 f8fc 	bl	8000598 <__aeabi_f2d>
 80093a0:	4604      	mov	r4, r0
 80093a2:	460d      	mov	r5, r1
 80093a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093a6:	f7f7 f8f7 	bl	8000598 <__aeabi_f2d>
 80093aa:	a31d      	add	r3, pc, #116	; (adr r3, 8009420 <cal_mollifier_table+0xb18>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f7 f94a 	bl	8000648 <__aeabi_dmul>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 ff8c 	bl	80002d8 <__aeabi_dsub>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093c8:	f7f7 f93e 	bl	8000648 <__aeabi_dmul>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4650      	mov	r0, sl
 80093d2:	4659      	mov	r1, fp
 80093d4:	f7f6 ff80 	bl	80002d8 <__aeabi_dsub>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4640      	mov	r0, r8
 80093de:	4649      	mov	r1, r9
 80093e0:	f7f7 fa5c 	bl	800089c <__aeabi_ddiv>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	ec43 2b17 	vmov	d7, r2, r3
 80093ec:	eeb0 0a47 	vmov.f32	s0, s14
 80093f0:	eef0 0a67 	vmov.f32	s1, s15
 80093f4:	f010 fe64 	bl	801a0c0 <exp>
 80093f8:	ec53 2b10 	vmov	r2, r3, d0
 80093fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009400:	f7f7 f922 	bl	8000648 <__aeabi_dmul>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4610      	mov	r0, r2
 800940a:	4619      	mov	r1, r3
 800940c:	f7f7 fbf4 	bl	8000bf8 <__aeabi_d2f>
 8009410:	4602      	mov	r2, r0
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009416:	e191      	b.n	800973c <cal_mollifier_table+0xe34>
 8009418:	04189375 	.word	0x04189375
 800941c:	3ff50e56 	.word	0x3ff50e56
 8009420:	d2f1a9fc 	.word	0xd2f1a9fc
 8009424:	3f50624d 	.word	0x3f50624d
 8009428:	f9db22d1 	.word	0xf9db22d1
 800942c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009430:	200007e0 	.word	0x200007e0
			}else{
				time_delay=0;
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 800943a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800943e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009446:	edd7 7a05 	vldr	s15, [r7, #20]
 800944a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944e:	ee17 0a90 	vmov	r0, s15
 8009452:	f7f7 f8a1 	bl	8000598 <__aeabi_f2d>
 8009456:	a3c0      	add	r3, pc, #768	; (adr r3, 8009758 <cal_mollifier_table+0xe50>)
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f7f7 fa1e 	bl	800089c <__aeabi_ddiv>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009468:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800946c:	eeb1 7a67 	vneg.f32	s14, s15
 8009470:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009478:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800947c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009480:	ee16 0a90 	vmov	r0, s13
 8009484:	f7f7 f888 	bl	8000598 <__aeabi_f2d>
 8009488:	4604      	mov	r4, r0
 800948a:	460d      	mov	r5, r1
 800948c:	4bb0      	ldr	r3, [pc, #704]	; (8009750 <cal_mollifier_table+0xe48>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f7f7 f881 	bl	8000598 <__aeabi_f2d>
 8009496:	4680      	mov	r8, r0
 8009498:	4689      	mov	r9, r1
 800949a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800949c:	f7f7 f87c 	bl	8000598 <__aeabi_f2d>
 80094a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8009748 <cal_mollifier_table+0xe40>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7f7 f8cf 	bl	8000648 <__aeabi_dmul>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f6 ff11 	bl	80002d8 <__aeabi_dsub>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4620      	mov	r0, r4
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f7 f8c3 	bl	8000648 <__aeabi_dmul>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	e9c7 2300 	strd	r2, r3, [r7]
 80094ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80094d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80094d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094da:	ee16 0a90 	vmov	r0, s13
 80094de:	f7f7 f85b 	bl	8000598 <__aeabi_f2d>
 80094e2:	4680      	mov	r8, r0
 80094e4:	4689      	mov	r9, r1
 80094e6:	4b9a      	ldr	r3, [pc, #616]	; (8009750 <cal_mollifier_table+0xe48>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7f7 f854 	bl	8000598 <__aeabi_f2d>
 80094f0:	4604      	mov	r4, r0
 80094f2:	460d      	mov	r5, r1
 80094f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f6:	f7f7 f84f 	bl	8000598 <__aeabi_f2d>
 80094fa:	a393      	add	r3, pc, #588	; (adr r3, 8009748 <cal_mollifier_table+0xe40>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f7 f8a2 	bl	8000648 <__aeabi_dmul>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4620      	mov	r0, r4
 800950a:	4629      	mov	r1, r5
 800950c:	f7f6 fee4 	bl	80002d8 <__aeabi_dsub>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4692      	mov	sl, r2
 8009516:	469b      	mov	fp, r3
 8009518:	4b8d      	ldr	r3, [pc, #564]	; (8009750 <cal_mollifier_table+0xe48>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4618      	mov	r0, r3
 800951e:	f7f7 f83b 	bl	8000598 <__aeabi_f2d>
 8009522:	4604      	mov	r4, r0
 8009524:	460d      	mov	r5, r1
 8009526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009528:	f7f7 f836 	bl	8000598 <__aeabi_f2d>
 800952c:	a386      	add	r3, pc, #536	; (adr r3, 8009748 <cal_mollifier_table+0xe40>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f7 f889 	bl	8000648 <__aeabi_dmul>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4620      	mov	r0, r4
 800953c:	4629      	mov	r1, r5
 800953e:	f7f6 fecb 	bl	80002d8 <__aeabi_dsub>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4650      	mov	r0, sl
 8009548:	4659      	mov	r1, fp
 800954a:	f7f7 f87d 	bl	8000648 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4640      	mov	r0, r8
 8009554:	4649      	mov	r1, r9
 8009556:	f7f6 febf 	bl	80002d8 <__aeabi_dsub>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009562:	f7f7 f99b 	bl	800089c <__aeabi_ddiv>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	e9c7 2300 	strd	r2, r3, [r7]
 800956e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009572:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009576:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800957a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800957e:	ee16 0a90 	vmov	r0, s13
 8009582:	f7f7 f809 	bl	8000598 <__aeabi_f2d>
 8009586:	4680      	mov	r8, r0
 8009588:	4689      	mov	r9, r1
 800958a:	4b71      	ldr	r3, [pc, #452]	; (8009750 <cal_mollifier_table+0xe48>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f7f7 f802 	bl	8000598 <__aeabi_f2d>
 8009594:	4604      	mov	r4, r0
 8009596:	460d      	mov	r5, r1
 8009598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800959a:	f7f6 fffd 	bl	8000598 <__aeabi_f2d>
 800959e:	a36a      	add	r3, pc, #424	; (adr r3, 8009748 <cal_mollifier_table+0xe40>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f7f7 f850 	bl	8000648 <__aeabi_dmul>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f6 fe92 	bl	80002d8 <__aeabi_dsub>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4692      	mov	sl, r2
 80095ba:	469b      	mov	fp, r3
 80095bc:	4b64      	ldr	r3, [pc, #400]	; (8009750 <cal_mollifier_table+0xe48>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f6 ffe9 	bl	8000598 <__aeabi_f2d>
 80095c6:	4604      	mov	r4, r0
 80095c8:	460d      	mov	r5, r1
 80095ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095cc:	f7f6 ffe4 	bl	8000598 <__aeabi_f2d>
 80095d0:	a35d      	add	r3, pc, #372	; (adr r3, 8009748 <cal_mollifier_table+0xe40>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f7 f837 	bl	8000648 <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f6 fe79 	bl	80002d8 <__aeabi_dsub>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4650      	mov	r0, sl
 80095ec:	4659      	mov	r1, fp
 80095ee:	f7f7 f82b 	bl	8000648 <__aeabi_dmul>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4640      	mov	r0, r8
 80095f8:	4649      	mov	r1, r9
 80095fa:	f7f6 fe6d 	bl	80002d8 <__aeabi_dsub>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009606:	f7f7 f949 	bl	800089c <__aeabi_ddiv>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009612:	f7f7 f819 	bl	8000648 <__aeabi_dmul>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800961e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009622:	eeb1 7a67 	vneg.f32	s14, s15
 8009626:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800962a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009632:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009636:	ee16 0a90 	vmov	r0, s13
 800963a:	f7f6 ffad 	bl	8000598 <__aeabi_f2d>
 800963e:	4680      	mov	r8, r0
 8009640:	4689      	mov	r9, r1
 8009642:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009646:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800964a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800964e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009652:	ee16 0a90 	vmov	r0, s13
 8009656:	f7f6 ff9f 	bl	8000598 <__aeabi_f2d>
 800965a:	4682      	mov	sl, r0
 800965c:	468b      	mov	fp, r1
 800965e:	4b3c      	ldr	r3, [pc, #240]	; (8009750 <cal_mollifier_table+0xe48>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f7f6 ff98 	bl	8000598 <__aeabi_f2d>
 8009668:	4604      	mov	r4, r0
 800966a:	460d      	mov	r5, r1
 800966c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800966e:	f7f6 ff93 	bl	8000598 <__aeabi_f2d>
 8009672:	a335      	add	r3, pc, #212	; (adr r3, 8009748 <cal_mollifier_table+0xe40>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 ffe6 	bl	8000648 <__aeabi_dmul>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4620      	mov	r0, r4
 8009682:	4629      	mov	r1, r5
 8009684:	f7f6 fe28 	bl	80002d8 <__aeabi_dsub>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	e9c7 2300 	strd	r2, r3, [r7]
 8009690:	4b2f      	ldr	r3, [pc, #188]	; (8009750 <cal_mollifier_table+0xe48>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4618      	mov	r0, r3
 8009696:	f7f6 ff7f 	bl	8000598 <__aeabi_f2d>
 800969a:	4604      	mov	r4, r0
 800969c:	460d      	mov	r5, r1
 800969e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096a0:	f7f6 ff7a 	bl	8000598 <__aeabi_f2d>
 80096a4:	a328      	add	r3, pc, #160	; (adr r3, 8009748 <cal_mollifier_table+0xe40>)
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	f7f6 ffcd 	bl	8000648 <__aeabi_dmul>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4620      	mov	r0, r4
 80096b4:	4629      	mov	r1, r5
 80096b6:	f7f6 fe0f 	bl	80002d8 <__aeabi_dsub>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096c2:	f7f6 ffc1 	bl	8000648 <__aeabi_dmul>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	f7f6 fe03 	bl	80002d8 <__aeabi_dsub>
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f7 f8df 	bl	800089c <__aeabi_ddiv>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	ec43 2b17 	vmov	d7, r2, r3
 80096e6:	eeb0 0a47 	vmov.f32	s0, s14
 80096ea:	eef0 0a67 	vmov.f32	s1, s15
 80096ee:	f010 fce7 	bl	801a0c0 <exp>
 80096f2:	ec53 2b10 	vmov	r2, r3, d0
 80096f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096fa:	f7f6 ffa5 	bl	8000648 <__aeabi_dmul>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	4610      	mov	r0, r2
 8009704:	4619      	mov	r1, r3
 8009706:	f7f7 fa77 	bl	8000bf8 <__aeabi_d2f>
 800970a:	4602      	mov	r2, r0
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009710:	e014      	b.n	800973c <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f04f 0200 	mov.w	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	ed93 7a00 	vldr	s14, [r3]
 8009726:	edd7 7a08 	vldr	s15, [r7, #32]
 800972a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <cal_mollifier_table+0xe4c>)
 8009736:	2204      	movs	r2, #4
 8009738:	701a      	strb	r2, [r3, #0]
		}

}
 800973a:	bf00      	nop
 800973c:	bf00      	nop
 800973e:	3730      	adds	r7, #48	; 0x30
 8009740:	46bd      	mov	sp, r7
 8009742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009746:	bf00      	nop
 8009748:	d2f1a9fc 	.word	0xd2f1a9fc
 800974c:	3f50624d 	.word	0x3f50624d
 8009750:	200007e0 	.word	0x200007e0
 8009754:	200007e4 	.word	0x200007e4
 8009758:	f9db22d1 	.word	0xf9db22d1
 800975c:	3fdc6a7e 	.word	0x3fdc6a7e

08009760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009766:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <MX_DMA_Init+0x60>)
 8009768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800976a:	4a15      	ldr	r2, [pc, #84]	; (80097c0 <MX_DMA_Init+0x60>)
 800976c:	f043 0304 	orr.w	r3, r3, #4
 8009770:	6493      	str	r3, [r2, #72]	; 0x48
 8009772:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <MX_DMA_Init+0x60>)
 8009774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	607b      	str	r3, [r7, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800977e:	4b10      	ldr	r3, [pc, #64]	; (80097c0 <MX_DMA_Init+0x60>)
 8009780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009782:	4a0f      	ldr	r2, [pc, #60]	; (80097c0 <MX_DMA_Init+0x60>)
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	6493      	str	r3, [r2, #72]	; 0x48
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <MX_DMA_Init+0x60>)
 800978c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009796:	2200      	movs	r2, #0
 8009798:	2100      	movs	r1, #0
 800979a:	200b      	movs	r0, #11
 800979c:	f009 f965 	bl	8012a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80097a0:	200b      	movs	r0, #11
 80097a2:	f009 f97c 	bl	8012a9e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80097a6:	2200      	movs	r2, #0
 80097a8:	2100      	movs	r1, #0
 80097aa:	205e      	movs	r0, #94	; 0x5e
 80097ac:	f009 f95d 	bl	8012a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 80097b0:	205e      	movs	r0, #94	; 0x5e
 80097b2:	f009 f974 	bl	8012a9e <HAL_NVIC_EnableIRQ>

}
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	40021000 	.word	0x40021000

080097c4 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
	error_mode=0;
 80097c8:	4b11      	ldr	r3, [pc, #68]	; (8009810 <init_FailSafe+0x4c>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 80097ce:	4b11      	ldr	r3, [pc, #68]	; (8009814 <init_FailSafe+0x50>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80097d4:	4b10      	ldr	r3, [pc, #64]	; (8009818 <init_FailSafe+0x54>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 80097da:	4b10      	ldr	r3, [pc, #64]	; (800981c <init_FailSafe+0x58>)
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1200;
 80097e0:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <init_FailSafe+0x5c>)
 80097e2:	4a10      	ldr	r2, [pc, #64]	; (8009824 <init_FailSafe+0x60>)
 80097e4:	601a      	str	r2, [r3, #0]
	gyro_PID_error=1200;
 80097e6:	4b10      	ldr	r3, [pc, #64]	; (8009828 <init_FailSafe+0x64>)
 80097e8:	4a0e      	ldr	r2, [pc, #56]	; (8009824 <init_FailSafe+0x60>)
 80097ea:	601a      	str	r2, [r3, #0]
	gyro_x_error=1200;
 80097ec:	4b0f      	ldr	r3, [pc, #60]	; (800982c <init_FailSafe+0x68>)
 80097ee:	4a0d      	ldr	r2, [pc, #52]	; (8009824 <init_FailSafe+0x60>)
 80097f0:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=2000;//3000
 80097f2:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <init_FailSafe+0x6c>)
 80097f4:	4a0f      	ldr	r2, [pc, #60]	; (8009834 <init_FailSafe+0x70>)
 80097f6:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=2000;
 80097f8:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <init_FailSafe+0x74>)
 80097fa:	4a0e      	ldr	r2, [pc, #56]	; (8009834 <init_FailSafe+0x70>)
 80097fc:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1500;
 80097fe:	4b0f      	ldr	r3, [pc, #60]	; (800983c <init_FailSafe+0x78>)
 8009800:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <init_FailSafe+0x7c>)
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	200007e7 	.word	0x200007e7
 8009814:	200007e6 	.word	0x200007e6
 8009818:	200007e8 	.word	0x200007e8
 800981c:	20000804 	.word	0x20000804
 8009820:	200007ec 	.word	0x200007ec
 8009824:	44960000 	.word	0x44960000
 8009828:	200007f0 	.word	0x200007f0
 800982c:	200007f4 	.word	0x200007f4
 8009830:	200007f8 	.word	0x200007f8
 8009834:	44fa0000 	.word	0x44fa0000
 8009838:	200007fc 	.word	0x200007fc
 800983c:	20000800 	.word	0x20000800
 8009840:	44bb8000 	.word	0x44bb8000

08009844 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800984a:	4b6e      	ldr	r3, [pc, #440]	; (8009a04 <interrupt_FailSafe+0x1c0>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009852:	4b6d      	ldr	r3, [pc, #436]	; (8009a08 <interrupt_FailSafe+0x1c4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8009858:	4b6c      	ldr	r3, [pc, #432]	; (8009a0c <interrupt_FailSafe+0x1c8>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800985e:	4b6c      	ldr	r3, [pc, #432]	; (8009a10 <interrupt_FailSafe+0x1cc>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	607b      	str	r3, [r7, #4]
 8009864:	e008      	b.n	8009878 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8009866:	4b6b      	ldr	r3, [pc, #428]	; (8009a14 <interrupt_FailSafe+0x1d0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 800986c:	4b6a      	ldr	r3, [pc, #424]	; (8009a18 <interrupt_FailSafe+0x1d4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009872:	4b6a      	ldr	r3, [pc, #424]	; (8009a1c <interrupt_FailSafe+0x1d8>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8009878:	4b69      	ldr	r3, [pc, #420]	; (8009a20 <interrupt_FailSafe+0x1dc>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d062      	beq.n	8009946 <interrupt_FailSafe+0x102>
 8009880:	4b67      	ldr	r3, [pc, #412]	; (8009a20 <interrupt_FailSafe+0x1dc>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d05e      	beq.n	8009946 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8009888:	4b66      	ldr	r3, [pc, #408]	; (8009a24 <interrupt_FailSafe+0x1e0>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d15a      	bne.n	8009946 <interrupt_FailSafe+0x102>
 8009890:	4b65      	ldr	r3, [pc, #404]	; (8009a28 <interrupt_FailSafe+0x1e4>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d156      	bne.n	8009946 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8009898:	4b64      	ldr	r3, [pc, #400]	; (8009a2c <interrupt_FailSafe+0x1e8>)
 800989a:	ed93 7a00 	vldr	s14, [r3]
 800989e:	4b64      	ldr	r3, [pc, #400]	; (8009a30 <interrupt_FailSafe+0x1ec>)
 80098a0:	edd3 7a00 	vldr	s15, [r3]
 80098a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098a8:	eef0 7ae7 	vabs.f32	s15, s15
 80098ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80098b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b8:	d809      	bhi.n	80098ce <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80098ba:	f7fe f8a1 	bl	8007a00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 80098be:	2001      	movs	r0, #1
 80098c0:	f7fd fcae 	bl	8007220 <pl_yellow_LED_count>
						error_mode = 1;
 80098c4:	4b58      	ldr	r3, [pc, #352]	; (8009a28 <interrupt_FailSafe+0x1e4>)
 80098c6:	2201      	movs	r2, #1
 80098c8:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80098ca:	f7fb f8c7 	bl	8004a5c <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 80098ce:	4b59      	ldr	r3, [pc, #356]	; (8009a34 <interrupt_FailSafe+0x1f0>)
 80098d0:	edd3 7a00 	vldr	s15, [r3]
 80098d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80098d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e0:	d809      	bhi.n	80098f6 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80098e2:	f7fe f88d 	bl	8007a00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 80098e6:	2002      	movs	r0, #2
 80098e8:	f7fd fc9a 	bl	8007220 <pl_yellow_LED_count>
						error_mode = 1;
 80098ec:	4b4e      	ldr	r3, [pc, #312]	; (8009a28 <interrupt_FailSafe+0x1e4>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80098f2:	f7fb f8b3 	bl	8004a5c <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 80098f6:	4b50      	ldr	r3, [pc, #320]	; (8009a38 <interrupt_FailSafe+0x1f4>)
 80098f8:	ed93 7a00 	vldr	s14, [r3]
 80098fc:	4b4f      	ldr	r3, [pc, #316]	; (8009a3c <interrupt_FailSafe+0x1f8>)
 80098fe:	edd3 6a00 	vldr	s13, [r3]
 8009902:	4b4f      	ldr	r3, [pc, #316]	; (8009a40 <interrupt_FailSafe+0x1fc>)
 8009904:	edd3 7a00 	vldr	s15, [r3]
 8009908:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800990c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009910:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009918:	eef0 7ae7 	vabs.f32	s15, s15
 800991c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009928:	d80d      	bhi.n	8009946 <interrupt_FailSafe+0x102>
 800992a:	4b3d      	ldr	r3, [pc, #244]	; (8009a20 <interrupt_FailSafe+0x1dc>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d109      	bne.n	8009946 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009932:	f7fe f865 	bl	8007a00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009936:	2004      	movs	r0, #4
 8009938:	f7fd fc72 	bl	8007220 <pl_yellow_LED_count>
						error_mode = 1;
 800993c:	4b3a      	ldr	r3, [pc, #232]	; (8009a28 <interrupt_FailSafe+0x1e4>)
 800993e:	2201      	movs	r2, #1
 8009940:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009942:	f7fb f88b 	bl	8004a5c <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009946:	4b38      	ldr	r3, [pc, #224]	; (8009a28 <interrupt_FailSafe+0x1e4>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d153      	bne.n	80099f6 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800994e:	4b3d      	ldr	r3, [pc, #244]	; (8009a44 <interrupt_FailSafe+0x200>)
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009954:	4b3c      	ldr	r3, [pc, #240]	; (8009a48 <interrupt_FailSafe+0x204>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3301      	adds	r3, #1
 800995a:	4a3b      	ldr	r2, [pc, #236]	; (8009a48 <interrupt_FailSafe+0x204>)
 800995c:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800995e:	4b3a      	ldr	r3, [pc, #232]	; (8009a48 <interrupt_FailSafe+0x204>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009966:	dc05      	bgt.n	8009974 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009968:	f7fb f9a4 	bl	8004cb4 <init_WallControl>
			modeacc=100;//エラー用
 800996c:	4b2c      	ldr	r3, [pc, #176]	; (8009a20 <interrupt_FailSafe+0x1dc>)
 800996e:	2264      	movs	r2, #100	; 0x64
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e009      	b.n	8009988 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009974:	2000      	movs	r0, #0
 8009976:	f7fd ffaf 	bl	80078d8 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800997a:	f7fe f813 	bl	80079a4 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 800997e:	f7fe f83f 	bl	8007a00 <pl_FunMotor_stop>
			modeacc=0;
 8009982:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <interrupt_FailSafe+0x1dc>)
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009988:	4b30      	ldr	r3, [pc, #192]	; (8009a4c <interrupt_FailSafe+0x208>)
 800998a:	f04f 32ff 	mov.w	r2, #4294967295
 800998e:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009990:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <interrupt_FailSafe+0x20c>)
 8009992:	f04f 32ff 	mov.w	r2, #4294967295
 8009996:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009998:	4b2e      	ldr	r3, [pc, #184]	; (8009a54 <interrupt_FailSafe+0x210>)
 800999a:	f04f 32ff 	mov.w	r2, #4294967295
 800999e:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 80099a0:	4b2d      	ldr	r3, [pc, #180]	; (8009a58 <interrupt_FailSafe+0x214>)
 80099a2:	f04f 32ff 	mov.w	r2, #4294967295
 80099a6:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 80099a8:	4b2c      	ldr	r3, [pc, #176]	; (8009a5c <interrupt_FailSafe+0x218>)
 80099aa:	f04f 32ff 	mov.w	r2, #4294967295
 80099ae:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 80099b0:	4b2b      	ldr	r3, [pc, #172]	; (8009a60 <interrupt_FailSafe+0x21c>)
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 100;
 80099b8:	4b2a      	ldr	r3, [pc, #168]	; (8009a64 <interrupt_FailSafe+0x220>)
 80099ba:	4a2b      	ldr	r2, [pc, #172]	; (8009a68 <interrupt_FailSafe+0x224>)
 80099bc:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 100;
 80099be:	4b2b      	ldr	r3, [pc, #172]	; (8009a6c <interrupt_FailSafe+0x228>)
 80099c0:	4a29      	ldr	r2, [pc, #164]	; (8009a68 <interrupt_FailSafe+0x224>)
 80099c2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 40;
 80099c4:	4b2a      	ldr	r3, [pc, #168]	; (8009a70 <interrupt_FailSafe+0x22c>)
 80099c6:	4a2b      	ldr	r2, [pc, #172]	; (8009a74 <interrupt_FailSafe+0x230>)
 80099c8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 40;
 80099ca:	4b2b      	ldr	r3, [pc, #172]	; (8009a78 <interrupt_FailSafe+0x234>)
 80099cc:	4a29      	ldr	r2, [pc, #164]	; (8009a74 <interrupt_FailSafe+0x230>)
 80099ce:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 70;
 80099d0:	4b2a      	ldr	r3, [pc, #168]	; (8009a7c <interrupt_FailSafe+0x238>)
 80099d2:	4a2b      	ldr	r2, [pc, #172]	; (8009a80 <interrupt_FailSafe+0x23c>)
 80099d4:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 70;
 80099d6:	4b2b      	ldr	r3, [pc, #172]	; (8009a84 <interrupt_FailSafe+0x240>)
 80099d8:	4a29      	ldr	r2, [pc, #164]	; (8009a80 <interrupt_FailSafe+0x23c>)
 80099da:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 70;
 80099dc:	4b2a      	ldr	r3, [pc, #168]	; (8009a88 <interrupt_FailSafe+0x244>)
 80099de:	4a28      	ldr	r2, [pc, #160]	; (8009a80 <interrupt_FailSafe+0x23c>)
 80099e0:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 70;
 80099e2:	4b2a      	ldr	r3, [pc, #168]	; (8009a8c <interrupt_FailSafe+0x248>)
 80099e4:	4a26      	ldr	r2, [pc, #152]	; (8009a80 <interrupt_FailSafe+0x23c>)
 80099e6:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 80099e8:	4b29      	ldr	r3, [pc, #164]	; (8009a90 <interrupt_FailSafe+0x24c>)
 80099ea:	2204      	movs	r2, #4
 80099ec:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 80099ee:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <interrupt_FailSafe+0x250>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 80099f4:	e002      	b.n	80099fc <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <interrupt_FailSafe+0x204>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]
}
 80099fc:	bf00      	nop
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	200007e8 	.word	0x200007e8
 8009a08:	200007ec 	.word	0x200007ec
 8009a0c:	200007f0 	.word	0x200007f0
 8009a10:	200007f4 	.word	0x200007f4
 8009a14:	200007f8 	.word	0x200007f8
 8009a18:	200007fc 	.word	0x200007fc
 8009a1c:	20000800 	.word	0x20000800
 8009a20:	20000508 	.word	0x20000508
 8009a24:	200007e6 	.word	0x200007e6
 8009a28:	200007e7 	.word	0x200007e7
 8009a2c:	200004c4 	.word	0x200004c4
 8009a30:	20000248 	.word	0x20000248
 8009a34:	20000254 	.word	0x20000254
 8009a38:	200004b8 	.word	0x200004b8
 8009a3c:	2000023c 	.word	0x2000023c
 8009a40:	20000238 	.word	0x20000238
 8009a44:	2000c388 	.word	0x2000c388
 8009a48:	20000804 	.word	0x20000804
 8009a4c:	20000598 	.word	0x20000598
 8009a50:	20000594 	.word	0x20000594
 8009a54:	200005a0 	.word	0x200005a0
 8009a58:	2000059c 	.word	0x2000059c
 8009a5c:	200005a8 	.word	0x200005a8
 8009a60:	200005a4 	.word	0x200005a4
 8009a64:	200005b0 	.word	0x200005b0
 8009a68:	42c80000 	.word	0x42c80000
 8009a6c:	200005ac 	.word	0x200005ac
 8009a70:	200005b8 	.word	0x200005b8
 8009a74:	42200000 	.word	0x42200000
 8009a78:	200005b4 	.word	0x200005b4
 8009a7c:	200005c0 	.word	0x200005c0
 8009a80:	428c0000 	.word	0x428c0000
 8009a84:	200005bc 	.word	0x200005bc
 8009a88:	200005c8 	.word	0x200005c8
 8009a8c:	200005c4 	.word	0x200005c4
 8009a90:	200007e4 	.word	0x200007e4
 8009a94:	20000572 	.word	0x20000572

08009a98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a9e:	f107 0314 	add.w	r3, r7, #20
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	605a      	str	r2, [r3, #4]
 8009aa8:	609a      	str	r2, [r3, #8]
 8009aaa:	60da      	str	r2, [r3, #12]
 8009aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009aae:	4b3a      	ldr	r3, [pc, #232]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab2:	4a39      	ldr	r2, [pc, #228]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009ab4:	f043 0304 	orr.w	r3, r3, #4
 8009ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009aba:	4b37      	ldr	r3, [pc, #220]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	613b      	str	r3, [r7, #16]
 8009ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009ac6:	4b34      	ldr	r3, [pc, #208]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aca:	4a33      	ldr	r2, [pc, #204]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009acc:	f043 0320 	orr.w	r3, r3, #32
 8009ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ad2:	4b31      	ldr	r3, [pc, #196]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad6:	f003 0320 	and.w	r3, r3, #32
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ade:	4b2e      	ldr	r3, [pc, #184]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae2:	4a2d      	ldr	r2, [pc, #180]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009ae4:	f043 0301 	orr.w	r3, r3, #1
 8009ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009aea:	4b2b      	ldr	r3, [pc, #172]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	60bb      	str	r3, [r7, #8]
 8009af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009af6:	4b28      	ldr	r3, [pc, #160]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afa:	4a27      	ldr	r2, [pc, #156]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009afc:	f043 0302 	orr.w	r3, r3, #2
 8009b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b02:	4b25      	ldr	r3, [pc, #148]	; (8009b98 <MX_GPIO_Init+0x100>)
 8009b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009b14:	4821      	ldr	r0, [pc, #132]	; (8009b9c <MX_GPIO_Init+0x104>)
 8009b16:	f009 fc2b 	bl	8013370 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f648 1110 	movw	r1, #35088	; 0x8910
 8009b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b24:	f009 fc24 	bl	8013370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009b2e:	481c      	ldr	r0, [pc, #112]	; (8009ba0 <MX_GPIO_Init+0x108>)
 8009b30:	f009 fc1e 	bl	8013370 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b34:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009b38:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b42:	2300      	movs	r3, #0
 8009b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b46:	f107 0314 	add.w	r3, r7, #20
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4813      	ldr	r0, [pc, #76]	; (8009b9c <MX_GPIO_Init+0x104>)
 8009b4e:	f009 fa8d 	bl	801306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009b52:	f648 1310 	movw	r3, #35088	; 0x8910
 8009b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b60:	2300      	movs	r3, #0
 8009b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b64:	f107 0314 	add.w	r3, r7, #20
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b6e:	f009 fa7d 	bl	801306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b72:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009b76:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b80:	2300      	movs	r3, #0
 8009b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b84:	f107 0314 	add.w	r3, r7, #20
 8009b88:	4619      	mov	r1, r3
 8009b8a:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <MX_GPIO_Init+0x108>)
 8009b8c:	f009 fa6e 	bl	801306c <HAL_GPIO_Init>

}
 8009b90:	bf00      	nop
 8009b92:	3728      	adds	r7, #40	; 0x28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	40021000 	.word	0x40021000
 8009b9c:	48000800 	.word	0x48000800
 8009ba0:	48000400 	.word	0x48000400

08009ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009baa:	f006 fc1c 	bl	80103e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009bae:	f000 f8a9 	bl	8009d04 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009bb2:	f7ff fdd5 	bl	8009760 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009bb6:	f7ff ff6f 	bl	8009a98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009bba:	f7fe f9cf 	bl	8007f5c <MX_ADC1_Init>
  MX_SPI1_Init();
 8009bbe:	f005 f9ed 	bl	800ef9c <MX_SPI1_Init>
  MX_TIM6_Init();
 8009bc2:	f005 fc5f 	bl	800f484 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009bc6:	f005 fc93 	bl	800f4f0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009bca:	f006 fb3f 	bl	801024c <MX_USART1_UART_Init>
  MX_DMA_Init();
 8009bce:	f7ff fdc7 	bl	8009760 <MX_DMA_Init>
  MX_SPI3_Init();
 8009bd2:	f005 fa21 	bl	800f018 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009bd6:	f005 fd2b 	bl	800f630 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009bda:	f7fe f8fd 	bl	8007dd8 <pl_timer_init>
  pl_gyro_init();
 8009bde:	f7fd fd77 	bl	80076d0 <pl_gyro_init>
  pl_sensor_init();
 8009be2:	f7fd ff3d 	bl	8007a60 <pl_sensor_init>
  reset_distance();
 8009be6:	f7f7 f9d9 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009bea:	f7f7 fe09 	bl	8001800 <reset_gyro>
  reset_speed();
 8009bee:	f7f7 fa13 	bl	8001018 <reset_speed>
  record_reset();
 8009bf2:	f004 ffdb 	bl	800ebac <record_reset>
  pl_motor_init();
 8009bf6:	f7fd fe49 	bl	800788c <pl_motor_init>
  PID_Init();
 8009bfa:	f7fa fef3 	bl	80049e4 <PID_Init>
  init_WallControl();
 8009bfe:	f7fb f859 	bl	8004cb4 <init_WallControl>
  Control_mode_Init();
 8009c02:	f7f8 f95f 	bl	8001ec4 <Control_mode_Init>
  init_FailSafe();
 8009c06:	f7ff fddd 	bl	80097c4 <init_FailSafe>
  input_parameter();
 8009c0a:	f005 fe51 	bl	800f8b0 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c12:	4b37      	ldr	r3, [pc, #220]	; (8009cf0 <main+0x14c>)
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c18:	4b35      	ldr	r3, [pc, #212]	; (8009cf0 <main+0x14c>)
 8009c1a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c1c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c1e:	4b34      	ldr	r3, [pc, #208]	; (8009cf0 <main+0x14c>)
 8009c20:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c22:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c24:	4b32      	ldr	r3, [pc, #200]	; (8009cf0 <main+0x14c>)
 8009c26:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c28:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c2a:	4b31      	ldr	r3, [pc, #196]	; (8009cf0 <main+0x14c>)
 8009c2c:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	9200      	str	r2, [sp, #0]
 8009c32:	4623      	mov	r3, r4
 8009c34:	4602      	mov	r2, r0
 8009c36:	482f      	ldr	r0, [pc, #188]	; (8009cf4 <main+0x150>)
 8009c38:	f00e f930 	bl	8017e9c <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c3c:	4b2e      	ldr	r3, [pc, #184]	; (8009cf8 <main+0x154>)
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c42:	4b2d      	ldr	r3, [pc, #180]	; (8009cf8 <main+0x154>)
 8009c44:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c46:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c48:	4b2b      	ldr	r3, [pc, #172]	; (8009cf8 <main+0x154>)
 8009c4a:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c4c:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c4e:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <main+0x154>)
 8009c50:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c52:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c54:	4b28      	ldr	r3, [pc, #160]	; (8009cf8 <main+0x154>)
 8009c56:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	9200      	str	r2, [sp, #0]
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	4602      	mov	r2, r0
 8009c60:	4826      	ldr	r0, [pc, #152]	; (8009cfc <main+0x158>)
 8009c62:	f00e f91b 	bl	8017e9c <iprintf>
	battcheak();
 8009c66:	f7f7 ffd7 	bl	8001c18 <battcheak>

//起動cheak
	int yellow_count=1;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009c6e:	2300      	movs	r3, #0
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	e00d      	b.n	8009c90 <main+0xec>
		pl_yellow_LED_count(yellow_count);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fd fad1 	bl	8007220 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009c7e:	2032      	movs	r0, #50	; 0x32
 8009c80:	f006 fc22 	bl	80104c8 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b07      	cmp	r3, #7
 8009c94:	ddee      	ble.n	8009c74 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 8009c96:	2300      	movs	r3, #0
 8009c98:	603b      	str	r3, [r7, #0]
 8009c9a:	e00f      	b.n	8009cbc <main+0x118>
			pl_yellow_LED_count(yellow_count);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fd fabd 	bl	8007220 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009ca6:	2032      	movs	r0, #50	; 0x32
 8009ca8:	f006 fc0e 	bl	80104c8 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	0fda      	lsrs	r2, r3, #31
 8009cb0:	4413      	add	r3, r2
 8009cb2:	105b      	asrs	r3, r3, #1
 8009cb4:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	ddec      	ble.n	8009c9c <main+0xf8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f003 ffdc 	bl	800dc84 <mode_decision>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009cd0:	f7f7 f964 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009cd4:	f7f7 fd94 	bl	8001800 <reset_gyro>
	  		reset_speed();
 8009cd8:	f7f7 f99e 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f004 f8c9 	bl	800de78 <mode_execution>

	  		error_mode = 0;
 8009ce6:	4b06      	ldr	r3, [pc, #24]	; (8009d00 <main+0x15c>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009cec:	e7e9      	b.n	8009cc2 <main+0x11e>
 8009cee:	bf00      	nop
 8009cf0:	200006ec 	.word	0x200006ec
 8009cf4:	0801a568 	.word	0x0801a568
 8009cf8:	200006f8 	.word	0x200006f8
 8009cfc:	0801a594 	.word	0x0801a594
 8009d00:	200007e7 	.word	0x200007e7

08009d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b094      	sub	sp, #80	; 0x50
 8009d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d0a:	f107 0318 	add.w	r3, r7, #24
 8009d0e:	2238      	movs	r2, #56	; 0x38
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f00d fc50 	bl	80175b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d18:	1d3b      	adds	r3, r7, #4
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	605a      	str	r2, [r3, #4]
 8009d20:	609a      	str	r2, [r3, #8]
 8009d22:	60da      	str	r2, [r3, #12]
 8009d24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009d26:	2000      	movs	r0, #0
 8009d28:	f009 fb3a 	bl	80133a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d34:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d36:	2302      	movs	r3, #2
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009d3e:	2304      	movs	r3, #4
 8009d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009d42:	2355      	movs	r3, #85	; 0x55
 8009d44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d46:	2302      	movs	r3, #2
 8009d48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009d4e:	2302      	movs	r3, #2
 8009d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d52:	f107 0318 	add.w	r3, r7, #24
 8009d56:	4618      	mov	r0, r3
 8009d58:	f009 fbd6 	bl	8013508 <HAL_RCC_OscConfig>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009d62:	f000 f81a 	bl	8009d9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d66:	230f      	movs	r3, #15
 8009d68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009d72:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8009d78:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009d7e:	1d3b      	adds	r3, r7, #4
 8009d80:	2104      	movs	r1, #4
 8009d82:	4618      	mov	r0, r3
 8009d84:	f009 fed8 	bl	8013b38 <HAL_RCC_ClockConfig>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009d8e:	f000 f804 	bl	8009d9a <Error_Handler>
  }
}
 8009d92:	bf00      	nop
 8009d94:	3750      	adds	r7, #80	; 0x50
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009d9e:	b672      	cpsid	i
}
 8009da0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009da2:	e7fe      	b.n	8009da2 <Error_Handler+0x8>

08009da4 <slalomR>:
	wait_ms_NoReset(50);

}


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009da4:	b084      	sub	sp, #16
 8009da6:	b5b0      	push	{r4, r5, r7, lr}
 8009da8:	ed2d 8b02 	vpush	{d8}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009db8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009dbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	f040 80f5 	bne.w	8009fb0 <slalomR+0x20c>
		highspeed_mode = 0;
 8009dc6:	4bcd      	ldr	r3, [pc, #820]	; (800a0fc <slalomR+0x358>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009ddc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d11f      	bne.n	8009e24 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009de4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009de8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009dec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009df0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009df8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009dfc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009e00:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a100 <slalomR+0x35c>
 8009e04:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	eeb0 2a47 	vmov.f32	s4, s14
 8009e0e:	eef0 1a46 	vmov.f32	s3, s12
 8009e12:	eeb0 1a66 	vmov.f32	s2, s13
 8009e16:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a104 <slalomR+0x360>
 8009e1a:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a108 <slalomR+0x364>
 8009e1e:	f7f9 f965 	bl	80030ec <straight_table2>
 8009e22:	e01e      	b.n	8009e62 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009e24:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009e28:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009e2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e38:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009e3c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009e40:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a100 <slalomR+0x35c>
 8009e44:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	eeb0 2a47 	vmov.f32	s4, s14
 8009e4e:	eef0 1a46 	vmov.f32	s3, s12
 8009e52:	eeb0 1a66 	vmov.f32	s2, s13
 8009e56:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a104 <slalomR+0x360>
 8009e5a:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a10c <slalomR+0x368>
 8009e5e:	f7f9 f945 	bl	80030ec <straight_table2>
		}
		wallmode.WallCutMode=1;
 8009e62:	2301      	movs	r3, #1
 8009e64:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 8009e6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d127      	bne.n	8009ec2 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e72:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009e7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009e7e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009e82:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009e86:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009e8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e96:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009e9a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e9e:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a100 <slalomR+0x35c>
 8009ea2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	eeb0 2a47 	vmov.f32	s4, s14
 8009eac:	eef0 1a45 	vmov.f32	s3, s10
 8009eb0:	eeb0 1a65 	vmov.f32	s2, s11
 8009eb4:	eef0 0a46 	vmov.f32	s1, s12
 8009eb8:	eeb0 0a66 	vmov.f32	s0, s13
 8009ebc:	f7f9 f916 	bl	80030ec <straight_table2>
 8009ec0:	e022      	b.n	8009f08 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009ec2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009ec6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009eca:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009ece:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009ed2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ed6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ede:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009ee2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009ee6:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a100 <slalomR+0x35c>
 8009eea:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	eeb0 2a47 	vmov.f32	s4, s14
 8009ef4:	eef0 1a45 	vmov.f32	s3, s10
 8009ef8:	eeb0 1a65 	vmov.f32	s2, s11
 8009efc:	eef0 0a46 	vmov.f32	s1, s12
 8009f00:	eeb0 0a66 	vmov.f32	s0, s13
 8009f04:	f7f9 f8f2 	bl	80030ec <straight_table2>
		}
		if(mollifier_mode == ON){
 8009f08:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d10c      	bne.n	8009f2a <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 8009f10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f14:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009f18:	eeb0 1a47 	vmov.f32	s2, s14
 8009f1c:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a110 <slalomR+0x36c>
 8009f20:	eeb0 0a67 	vmov.f32	s0, s15
 8009f24:	f7f9 ffd4 	bl	8003ed0 <mollifier_slalom_table>
 8009f28:	e015      	b.n	8009f56 <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8009f2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009f32:	eef1 7a67 	vneg.f32	s15, s15
 8009f36:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009f3a:	eef0 2a66 	vmov.f32	s5, s13
 8009f3e:	eeb0 2a67 	vmov.f32	s4, s15
 8009f42:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a104 <slalomR+0x360>
 8009f46:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a104 <slalomR+0x360>
 8009f4a:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a110 <slalomR+0x36c>
 8009f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8009f52:	f7f9 fe7d 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009f5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f62:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a100 <slalomR+0x35c>
 8009f66:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009f6a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009f6e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009f72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f7e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8009f82:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009f86:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a100 <slalomR+0x35c>
 8009f8a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	eeb0 2a47 	vmov.f32	s4, s14
 8009f94:	eef0 1a65 	vmov.f32	s3, s11
 8009f98:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a104 <slalomR+0x360>
 8009f9c:	eef0 0a46 	vmov.f32	s1, s12
 8009fa0:	eeb0 0a66 	vmov.f32	s0, s13
 8009fa4:	f7f9 f8a2 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 8009fa8:	4b54      	ldr	r3, [pc, #336]	; (800a0fc <slalomR+0x358>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 8009fae:	e09c      	b.n	800a0ea <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009fc0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009fc4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009fc8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009fcc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fdc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009fe0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009fe4:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a100 <slalomR+0x35c>
 8009fe8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	eeb0 2a47 	vmov.f32	s4, s14
 8009ff2:	eef0 1a45 	vmov.f32	s3, s10
 8009ff6:	eeb0 1a65 	vmov.f32	s2, s11
 8009ffa:	eef0 0a46 	vmov.f32	s1, s12
 8009ffe:	eeb0 0a66 	vmov.f32	s0, s13
 800a002:	f7f9 f873 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800a006:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d10c      	bne.n	800a028 <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a00e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a012:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a016:	eeb0 1a47 	vmov.f32	s2, s14
 800a01a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a110 <slalomR+0x36c>
 800a01e:	eeb0 0a67 	vmov.f32	s0, s15
 800a022:	f7f9 ff55 	bl	8003ed0 <mollifier_slalom_table>
 800a026:	e015      	b.n	800a054 <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a028:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a02c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a030:	eef1 7a67 	vneg.f32	s15, s15
 800a034:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a038:	eef0 2a66 	vmov.f32	s5, s13
 800a03c:	eeb0 2a67 	vmov.f32	s4, s15
 800a040:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a104 <slalomR+0x360>
 800a044:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a104 <slalomR+0x360>
 800a048:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a110 <slalomR+0x36c>
 800a04c:	eeb0 0a47 	vmov.f32	s0, s14
 800a050:	f7f9 fdfe 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a054:	2300      	movs	r3, #0
 800a056:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a05c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a060:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a064:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a068:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a06c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a070:	edd7 7a01 	vldr	s15, [r7, #4]
 800a074:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a07c:	eef0 7ae7 	vabs.f32	s15, s15
 800a080:	ee17 0a90 	vmov	r0, s15
 800a084:	f7f6 fa88 	bl	8000598 <__aeabi_f2d>
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a090:	f7f6 fc04 	bl	800089c <__aeabi_ddiv>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4614      	mov	r4, r2
 800a09a:	461d      	mov	r5, r3
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f6 fa7a 	bl	8000598 <__aeabi_f2d>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	f7f6 fbf6 	bl	800089c <__aeabi_ddiv>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	f04f 0200 	mov.w	r2, #0
 800a0bc:	4b15      	ldr	r3, [pc, #84]	; (800a114 <slalomR+0x370>)
 800a0be:	f7f6 f90d 	bl	80002dc <__adddf3>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	f7f6 fd95 	bl	8000bf8 <__aeabi_d2f>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	ee02 3a10 	vmov	s4, r3
 800a0d6:	edd7 1a01 	vldr	s3, [r7, #4]
 800a0da:	ed97 1a01 	vldr	s2, [r7, #4]
 800a0de:	eef0 0a68 	vmov.f32	s1, s17
 800a0e2:	eeb0 0a48 	vmov.f32	s0, s16
 800a0e6:	f7f9 f801 	bl	80030ec <straight_table2>
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	ecbd 8b02 	vpop	{d8}
 800a0f4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a0f8:	b004      	add	sp, #16
 800a0fa:	4770      	bx	lr
 800a0fc:	200007e8 	.word	0x200007e8
 800a100:	42340000 	.word	0x42340000
 800a104:	00000000 	.word	0x00000000
 800a108:	43200000 	.word	0x43200000
 800a10c:	431a0000 	.word	0x431a0000
 800a110:	c2b40000 	.word	0xc2b40000
 800a114:	408f4000 	.word	0x408f4000

0800a118 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a118:	b084      	sub	sp, #16
 800a11a:	b5b0      	push	{r4, r5, r7, lr}
 800a11c:	ed2d 8b02 	vpush	{d8}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a12c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a130:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a134:	2b01      	cmp	r3, #1
 800a136:	f040 80f3 	bne.w	800a320 <slalomL+0x208>
		highspeed_mode = 0;
 800a13a:	4bcb      	ldr	r3, [pc, #812]	; (800a468 <slalomL+0x350>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a140:	2301      	movs	r3, #1
 800a142:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a144:	2300      	movs	r3, #0
 800a146:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a150:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11f      	bne.n	800a198 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a158:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a15c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a160:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a164:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a16c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a170:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a174:	eddf 5abd 	vldr	s11, [pc, #756]	; 800a46c <slalomL+0x354>
 800a178:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	eeb0 2a47 	vmov.f32	s4, s14
 800a182:	eef0 1a46 	vmov.f32	s3, s12
 800a186:	eeb0 1a66 	vmov.f32	s2, s13
 800a18a:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800a470 <slalomL+0x358>
 800a18e:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a474 <slalomL+0x35c>
 800a192:	f7f8 ffab 	bl	80030ec <straight_table2>
 800a196:	e01e      	b.n	800a1d6 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a198:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a19c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1ac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a1b0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a1b4:	eddf 5aad 	vldr	s11, [pc, #692]	; 800a46c <slalomL+0x354>
 800a1b8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	eeb0 2a47 	vmov.f32	s4, s14
 800a1c2:	eef0 1a46 	vmov.f32	s3, s12
 800a1c6:	eeb0 1a66 	vmov.f32	s2, s13
 800a1ca:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800a470 <slalomL+0x358>
 800a1ce:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a478 <slalomL+0x360>
 800a1d2:	f7f8 ff8b 	bl	80030ec <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a1de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d127      	bne.n	800a236 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a1ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1f6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1fa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a20a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a20e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a212:	eddf 4a96 	vldr	s9, [pc, #600]	; 800a46c <slalomL+0x354>
 800a216:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	eeb0 2a47 	vmov.f32	s4, s14
 800a220:	eef0 1a45 	vmov.f32	s3, s10
 800a224:	eeb0 1a65 	vmov.f32	s2, s11
 800a228:	eef0 0a46 	vmov.f32	s1, s12
 800a22c:	eeb0 0a66 	vmov.f32	s0, s13
 800a230:	f7f8 ff5c 	bl	80030ec <straight_table2>
 800a234:	e022      	b.n	800a27c <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a236:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a23a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a23e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a242:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a246:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a24a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a24e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a252:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a256:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a25a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a46c <slalomL+0x354>
 800a25e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	eeb0 2a47 	vmov.f32	s4, s14
 800a268:	eef0 1a45 	vmov.f32	s3, s10
 800a26c:	eeb0 1a65 	vmov.f32	s2, s11
 800a270:	eef0 0a46 	vmov.f32	s1, s12
 800a274:	eeb0 0a66 	vmov.f32	s0, s13
 800a278:	f7f8 ff38 	bl	80030ec <straight_table2>
		}
		if(mollifier_mode == ON){
 800a27c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a280:	2b01      	cmp	r3, #1
 800a282:	d10c      	bne.n	800a29e <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a284:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a288:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a28c:	eeb0 1a47 	vmov.f32	s2, s14
 800a290:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a47c <slalomL+0x364>
 800a294:	eeb0 0a67 	vmov.f32	s0, s15
 800a298:	f7f9 fe1a 	bl	8003ed0 <mollifier_slalom_table>
 800a29c:	e013      	b.n	800a2c6 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a29e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a2a6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a2aa:	eef0 2a66 	vmov.f32	s5, s13
 800a2ae:	eeb0 2a47 	vmov.f32	s4, s14
 800a2b2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a470 <slalomL+0x358>
 800a2b6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a470 <slalomL+0x358>
 800a2ba:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a47c <slalomL+0x364>
 800a2be:	eeb0 0a67 	vmov.f32	s0, s15
 800a2c2:	f7f9 fcc5 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a2ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2d2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a46c <slalomL+0x354>
 800a2d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a2da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a2de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a2e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2ee:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a2f2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a2f6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a46c <slalomL+0x354>
 800a2fa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	eeb0 2a47 	vmov.f32	s4, s14
 800a304:	eef0 1a65 	vmov.f32	s3, s11
 800a308:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a470 <slalomL+0x358>
 800a30c:	eef0 0a46 	vmov.f32	s1, s12
 800a310:	eeb0 0a66 	vmov.f32	s0, s13
 800a314:	f7f8 feea 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800a318:	4b53      	ldr	r3, [pc, #332]	; (800a468 <slalomL+0x350>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a31e:	e09a      	b.n	800a456 <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a320:	2300      	movs	r3, #0
 800a322:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a324:	2300      	movs	r3, #0
 800a326:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a328:	2301      	movs	r3, #1
 800a32a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a330:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a334:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a338:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a33c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a340:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a344:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a34c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a350:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a354:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a46c <slalomL+0x354>
 800a358:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	eeb0 2a47 	vmov.f32	s4, s14
 800a362:	eef0 1a45 	vmov.f32	s3, s10
 800a366:	eeb0 1a65 	vmov.f32	s2, s11
 800a36a:	eef0 0a46 	vmov.f32	s1, s12
 800a36e:	eeb0 0a66 	vmov.f32	s0, s13
 800a372:	f7f8 febb 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800a376:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d10c      	bne.n	800a398 <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a37e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a382:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a386:	eeb0 1a47 	vmov.f32	s2, s14
 800a38a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a47c <slalomL+0x364>
 800a38e:	eeb0 0a67 	vmov.f32	s0, s15
 800a392:	f7f9 fd9d 	bl	8003ed0 <mollifier_slalom_table>
 800a396:	e013      	b.n	800a3c0 <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a39c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a3a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a3a4:	eef0 2a66 	vmov.f32	s5, s13
 800a3a8:	eeb0 2a47 	vmov.f32	s4, s14
 800a3ac:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a470 <slalomL+0x358>
 800a3b0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a470 <slalomL+0x358>
 800a3b4:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a47c <slalomL+0x364>
 800a3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3bc:	f7f9 fc48 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a3c8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a3cc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a3d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800a3e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3e8:	eef0 7ae7 	vabs.f32	s15, s15
 800a3ec:	ee17 0a90 	vmov	r0, s15
 800a3f0:	f7f6 f8d2 	bl	8000598 <__aeabi_f2d>
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3fc:	f7f6 fa4e 	bl	800089c <__aeabi_ddiv>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4614      	mov	r4, r2
 800a406:	461d      	mov	r5, r3
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f6 f8c4 	bl	8000598 <__aeabi_f2d>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4620      	mov	r0, r4
 800a416:	4629      	mov	r1, r5
 800a418:	f7f6 fa40 	bl	800089c <__aeabi_ddiv>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4610      	mov	r0, r2
 800a422:	4619      	mov	r1, r3
 800a424:	f04f 0200 	mov.w	r2, #0
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <slalomL+0x368>)
 800a42a:	f7f5 ff57 	bl	80002dc <__adddf3>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a432:	4610      	mov	r0, r2
 800a434:	4619      	mov	r1, r3
 800a436:	f7f6 fbdf 	bl	8000bf8 <__aeabi_d2f>
 800a43a:	4603      	mov	r3, r0
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	ee02 3a10 	vmov	s4, r3
 800a442:	edd7 1a01 	vldr	s3, [r7, #4]
 800a446:	ed97 1a01 	vldr	s2, [r7, #4]
 800a44a:	eef0 0a68 	vmov.f32	s1, s17
 800a44e:	eeb0 0a48 	vmov.f32	s0, s16
 800a452:	f7f8 fe4b 	bl	80030ec <straight_table2>
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	ecbd 8b02 	vpop	{d8}
 800a460:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a464:	b004      	add	sp, #16
 800a466:	4770      	bx	lr
 800a468:	200007e8 	.word	0x200007e8
 800a46c:	42340000 	.word	0x42340000
 800a470:	00000000 	.word	0x00000000
 800a474:	43200000 	.word	0x43200000
 800a478:	431a0000 	.word	0x431a0000
 800a47c:	42b40000 	.word	0x42b40000
 800a480:	408f4000 	.word	0x408f4000

0800a484 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a484:	b084      	sub	sp, #16
 800a486:	b5b0      	push	{r4, r5, r7, lr}
 800a488:	ed2d 8b02 	vpush	{d8}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a498:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a49c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	f040 80a5 	bne.w	800a5f0 <turn90R+0x16c>
		highspeed_mode = 1;
 800a4a6:	4ba5      	ldr	r3, [pc, #660]	; (800a73c <turn90R+0x2b8>)
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a4bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a4c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4d0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a4d4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a4d8:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a740 <turn90R+0x2bc>
 800a4dc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	eeb0 2a47 	vmov.f32	s4, s14
 800a4e6:	eef0 1a46 	vmov.f32	s3, s12
 800a4ea:	eeb0 1a66 	vmov.f32	s2, s13
 800a4ee:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a744 <turn90R+0x2c0>
 800a4f2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a748 <turn90R+0x2c4>
 800a4f6:	f7f8 fdf9 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a4fe:	2302      	movs	r3, #2
 800a500:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a502:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a506:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a50a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a50e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a512:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a516:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a51a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a51e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a522:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a526:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a740 <turn90R+0x2bc>
 800a52a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	eeb0 2a47 	vmov.f32	s4, s14
 800a534:	eef0 1a45 	vmov.f32	s3, s10
 800a538:	eeb0 1a65 	vmov.f32	s2, s11
 800a53c:	eef0 0a46 	vmov.f32	s1, s12
 800a540:	eeb0 0a66 	vmov.f32	s0, s13
 800a544:	f7f8 fdd2 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800a548:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d10c      	bne.n	800a56a <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a550:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a554:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a558:	eeb0 1a47 	vmov.f32	s2, s14
 800a55c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a74c <turn90R+0x2c8>
 800a560:	eeb0 0a67 	vmov.f32	s0, s15
 800a564:	f7f9 fcb4 	bl	8003ed0 <mollifier_slalom_table>
 800a568:	e015      	b.n	800a596 <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a56a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a56e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a572:	eef1 7a67 	vneg.f32	s15, s15
 800a576:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a57a:	eef0 2a66 	vmov.f32	s5, s13
 800a57e:	eeb0 2a67 	vmov.f32	s4, s15
 800a582:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a744 <turn90R+0x2c0>
 800a586:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a744 <turn90R+0x2c0>
 800a58a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a74c <turn90R+0x2c8>
 800a58e:	eeb0 0a47 	vmov.f32	s0, s14
 800a592:	f7f9 fb5d 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a596:	2300      	movs	r3, #0
 800a598:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a59e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a5a2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a750 <turn90R+0x2cc>
 800a5a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a5aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5be:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a5c2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a5c6:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a740 <turn90R+0x2bc>
 800a5ca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	eeb0 2a47 	vmov.f32	s4, s14
 800a5d4:	eef0 1a65 	vmov.f32	s3, s11
 800a5d8:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a744 <turn90R+0x2c0>
 800a5dc:	eef0 0a46 	vmov.f32	s1, s12
 800a5e0:	eeb0 0a66 	vmov.f32	s0, s13
 800a5e4:	f7f8 fd82 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800a5e8:	4b54      	ldr	r3, [pc, #336]	; (800a73c <turn90R+0x2b8>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a5ee:	e09c      	b.n	800a72a <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a600:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a604:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a608:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a60c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a610:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a61c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a620:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a624:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a740 <turn90R+0x2bc>
 800a628:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	eeb0 2a47 	vmov.f32	s4, s14
 800a632:	eef0 1a45 	vmov.f32	s3, s10
 800a636:	eeb0 1a65 	vmov.f32	s2, s11
 800a63a:	eef0 0a46 	vmov.f32	s1, s12
 800a63e:	eeb0 0a66 	vmov.f32	s0, s13
 800a642:	f7f8 fd53 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800a646:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d10c      	bne.n	800a668 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a64e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a652:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a656:	eeb0 1a47 	vmov.f32	s2, s14
 800a65a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a74c <turn90R+0x2c8>
 800a65e:	eeb0 0a67 	vmov.f32	s0, s15
 800a662:	f7f9 fc35 	bl	8003ed0 <mollifier_slalom_table>
 800a666:	e015      	b.n	800a694 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a668:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a66c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a670:	eef1 7a67 	vneg.f32	s15, s15
 800a674:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a678:	eef0 2a66 	vmov.f32	s5, s13
 800a67c:	eeb0 2a67 	vmov.f32	s4, s15
 800a680:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a744 <turn90R+0x2c0>
 800a684:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a744 <turn90R+0x2c0>
 800a688:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a74c <turn90R+0x2c8>
 800a68c:	eeb0 0a47 	vmov.f32	s0, s14
 800a690:	f7f9 fade 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a694:	2301      	movs	r3, #1
 800a696:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a69c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a6a0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a6a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a6a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800a6b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6bc:	eef0 7ae7 	vabs.f32	s15, s15
 800a6c0:	ee17 0a90 	vmov	r0, s15
 800a6c4:	f7f5 ff68 	bl	8000598 <__aeabi_f2d>
 800a6c8:	f04f 0200 	mov.w	r2, #0
 800a6cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6d0:	f7f6 f8e4 	bl	800089c <__aeabi_ddiv>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4614      	mov	r4, r2
 800a6da:	461d      	mov	r5, r3
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7f5 ff5a 	bl	8000598 <__aeabi_f2d>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f7f6 f8d6 	bl	800089c <__aeabi_ddiv>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	f04f 0200 	mov.w	r2, #0
 800a6fc:	4b15      	ldr	r3, [pc, #84]	; (800a754 <turn90R+0x2d0>)
 800a6fe:	f7f5 fded 	bl	80002dc <__adddf3>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a706:	4610      	mov	r0, r2
 800a708:	4619      	mov	r1, r3
 800a70a:	f7f6 fa75 	bl	8000bf8 <__aeabi_d2f>
 800a70e:	4603      	mov	r3, r0
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	ee02 3a10 	vmov	s4, r3
 800a716:	edd7 1a01 	vldr	s3, [r7, #4]
 800a71a:	ed97 1a01 	vldr	s2, [r7, #4]
 800a71e:	eef0 0a68 	vmov.f32	s1, s17
 800a722:	eeb0 0a48 	vmov.f32	s0, s16
 800a726:	f7f8 fce1 	bl	80030ec <straight_table2>
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	ecbd 8b02 	vpop	{d8}
 800a734:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a738:	b004      	add	sp, #16
 800a73a:	4770      	bx	lr
 800a73c:	200007e8 	.word	0x200007e8
 800a740:	42340000 	.word	0x42340000
 800a744:	00000000 	.word	0x00000000
 800a748:	42da0000 	.word	0x42da0000
 800a74c:	c2b40000 	.word	0xc2b40000
 800a750:	42b40000 	.word	0x42b40000
 800a754:	408f4000 	.word	0x408f4000

0800a758 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a758:	b084      	sub	sp, #16
 800a75a:	b5b0      	push	{r4, r5, r7, lr}
 800a75c:	ed2d 8b02 	vpush	{d8}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a76c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a770:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a774:	2b01      	cmp	r3, #1
 800a776:	f040 80a3 	bne.w	800a8c0 <turn90L+0x168>
		highspeed_mode = 1;
 800a77a:	4ba3      	ldr	r3, [pc, #652]	; (800aa08 <turn90L+0x2b0>)
 800a77c:	2201      	movs	r2, #1
 800a77e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a780:	2301      	movs	r3, #1
 800a782:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a784:	2300      	movs	r3, #0
 800a786:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a790:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a794:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a798:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a79c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7a4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a7a8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a7ac:	eddf 5a97 	vldr	s11, [pc, #604]	; 800aa0c <turn90L+0x2b4>
 800a7b0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	eeb0 2a47 	vmov.f32	s4, s14
 800a7ba:	eef0 1a46 	vmov.f32	s3, s12
 800a7be:	eeb0 1a66 	vmov.f32	s2, s13
 800a7c2:	eddf 0a93 	vldr	s1, [pc, #588]	; 800aa10 <turn90L+0x2b8>
 800a7c6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800aa14 <turn90L+0x2bc>
 800a7ca:	f7f8 fc8f 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7d6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a7da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a7de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a7e2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7f2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a7f6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7fa:	eddf 4a84 	vldr	s9, [pc, #528]	; 800aa0c <turn90L+0x2b4>
 800a7fe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	eeb0 2a47 	vmov.f32	s4, s14
 800a808:	eef0 1a45 	vmov.f32	s3, s10
 800a80c:	eeb0 1a65 	vmov.f32	s2, s11
 800a810:	eef0 0a46 	vmov.f32	s1, s12
 800a814:	eeb0 0a66 	vmov.f32	s0, s13
 800a818:	f7f8 fc68 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800a81c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a820:	2b01      	cmp	r3, #1
 800a822:	d10c      	bne.n	800a83e <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a824:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a828:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a82c:	eeb0 1a47 	vmov.f32	s2, s14
 800a830:	eddf 0a79 	vldr	s1, [pc, #484]	; 800aa18 <turn90L+0x2c0>
 800a834:	eeb0 0a67 	vmov.f32	s0, s15
 800a838:	f7f9 fb4a 	bl	8003ed0 <mollifier_slalom_table>
 800a83c:	e013      	b.n	800a866 <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a83e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a842:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a846:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a84a:	eef0 2a66 	vmov.f32	s5, s13
 800a84e:	eeb0 2a47 	vmov.f32	s4, s14
 800a852:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800aa10 <turn90L+0x2b8>
 800a856:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800aa10 <turn90L+0x2b8>
 800a85a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800aa18 <turn90L+0x2c0>
 800a85e:	eeb0 0a67 	vmov.f32	s0, s15
 800a862:	f7f9 f9f5 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a866:	2300      	movs	r3, #0
 800a868:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a86e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a872:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800aa18 <turn90L+0x2c0>
 800a876:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a87a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a87e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a882:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a886:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a88a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a88e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a892:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a896:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800aa0c <turn90L+0x2b4>
 800a89a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	eeb0 2a47 	vmov.f32	s4, s14
 800a8a4:	eef0 1a65 	vmov.f32	s3, s11
 800a8a8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800aa10 <turn90L+0x2b8>
 800a8ac:	eef0 0a46 	vmov.f32	s1, s12
 800a8b0:	eeb0 0a66 	vmov.f32	s0, s13
 800a8b4:	f7f8 fc1a 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800a8b8:	4b53      	ldr	r3, [pc, #332]	; (800aa08 <turn90L+0x2b0>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a8be:	e09a      	b.n	800a9f6 <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a8d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a8d8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a8dc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a8e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a8f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8f4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800aa0c <turn90L+0x2b4>
 800a8f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	eeb0 2a47 	vmov.f32	s4, s14
 800a902:	eef0 1a45 	vmov.f32	s3, s10
 800a906:	eeb0 1a65 	vmov.f32	s2, s11
 800a90a:	eef0 0a46 	vmov.f32	s1, s12
 800a90e:	eeb0 0a66 	vmov.f32	s0, s13
 800a912:	f7f8 fbeb 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800a916:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d10c      	bne.n	800a938 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a91e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a922:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a926:	eeb0 1a47 	vmov.f32	s2, s14
 800a92a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800aa18 <turn90L+0x2c0>
 800a92e:	eeb0 0a67 	vmov.f32	s0, s15
 800a932:	f7f9 facd 	bl	8003ed0 <mollifier_slalom_table>
 800a936:	e013      	b.n	800a960 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a938:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a93c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a940:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a944:	eef0 2a66 	vmov.f32	s5, s13
 800a948:	eeb0 2a47 	vmov.f32	s4, s14
 800a94c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800aa10 <turn90L+0x2b8>
 800a950:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800aa10 <turn90L+0x2b8>
 800a954:	eddf 0a30 	vldr	s1, [pc, #192]	; 800aa18 <turn90L+0x2c0>
 800a958:	eeb0 0a67 	vmov.f32	s0, s15
 800a95c:	f7f9 f978 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a960:	2301      	movs	r3, #1
 800a962:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a968:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a96c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a970:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a974:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a97c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a980:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a984:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a988:	eef0 7ae7 	vabs.f32	s15, s15
 800a98c:	ee17 0a90 	vmov	r0, s15
 800a990:	f7f5 fe02 	bl	8000598 <__aeabi_f2d>
 800a994:	f04f 0200 	mov.w	r2, #0
 800a998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a99c:	f7f5 ff7e 	bl	800089c <__aeabi_ddiv>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	461d      	mov	r5, r3
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f5 fdf4 	bl	8000598 <__aeabi_f2d>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7f5 ff70 	bl	800089c <__aeabi_ddiv>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f04f 0200 	mov.w	r2, #0
 800a9c8:	4b14      	ldr	r3, [pc, #80]	; (800aa1c <turn90L+0x2c4>)
 800a9ca:	f7f5 fc87 	bl	80002dc <__adddf3>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f7f6 f90f 	bl	8000bf8 <__aeabi_d2f>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	ee02 3a10 	vmov	s4, r3
 800a9e2:	edd7 1a01 	vldr	s3, [r7, #4]
 800a9e6:	ed97 1a01 	vldr	s2, [r7, #4]
 800a9ea:	eef0 0a68 	vmov.f32	s1, s17
 800a9ee:	eeb0 0a48 	vmov.f32	s0, s16
 800a9f2:	f7f8 fb7b 	bl	80030ec <straight_table2>
}
 800a9f6:	bf00      	nop
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	ecbd 8b02 	vpop	{d8}
 800aa00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800aa04:	b004      	add	sp, #16
 800aa06:	4770      	bx	lr
 800aa08:	200007e8 	.word	0x200007e8
 800aa0c:	42340000 	.word	0x42340000
 800aa10:	00000000 	.word	0x00000000
 800aa14:	42da0000 	.word	0x42da0000
 800aa18:	42b40000 	.word	0x42b40000
 800aa1c:	408f4000 	.word	0x408f4000

0800aa20 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800aa20:	b084      	sub	sp, #16
 800aa22:	b5b0      	push	{r4, r5, r7, lr}
 800aa24:	ed2d 8b02 	vpush	{d8}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aa30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa34:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800aa38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	f040 80a5 	bne.w	800ab8c <turn180R+0x16c>
		highspeed_mode = 1;
 800aa42:	4ba5      	ldr	r3, [pc, #660]	; (800acd8 <turn180R+0x2b8>)
 800aa44:	2201      	movs	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa58:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa5c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa6c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa70:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa74:	eddf 5a99 	vldr	s11, [pc, #612]	; 800acdc <turn180R+0x2bc>
 800aa78:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	eeb0 2a47 	vmov.f32	s4, s14
 800aa82:	eef0 1a46 	vmov.f32	s3, s12
 800aa86:	eeb0 1a66 	vmov.f32	s2, s13
 800aa8a:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ace0 <turn180R+0x2c0>
 800aa8e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ace4 <turn180R+0x2c4>
 800aa92:	f7f8 fb2b 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa9e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aaa2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aaa6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aaaa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aaae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aab2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aabe:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aac2:	eddf 4a86 	vldr	s9, [pc, #536]	; 800acdc <turn180R+0x2bc>
 800aac6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	eeb0 2a47 	vmov.f32	s4, s14
 800aad0:	eef0 1a45 	vmov.f32	s3, s10
 800aad4:	eeb0 1a65 	vmov.f32	s2, s11
 800aad8:	eef0 0a46 	vmov.f32	s1, s12
 800aadc:	eeb0 0a66 	vmov.f32	s0, s13
 800aae0:	f7f8 fb04 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800aae4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d10c      	bne.n	800ab06 <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800aaec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaf0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aaf4:	eeb0 1a47 	vmov.f32	s2, s14
 800aaf8:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ace8 <turn180R+0x2c8>
 800aafc:	eeb0 0a67 	vmov.f32	s0, s15
 800ab00:	f7f9 f9e6 	bl	8003ed0 <mollifier_slalom_table>
 800ab04:	e015      	b.n	800ab32 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ab06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab0e:	eef1 7a67 	vneg.f32	s15, s15
 800ab12:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ab16:	eef0 2a66 	vmov.f32	s5, s13
 800ab1a:	eeb0 2a67 	vmov.f32	s4, s15
 800ab1e:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ace0 <turn180R+0x2c0>
 800ab22:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ace0 <turn180R+0x2c0>
 800ab26:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ace8 <turn180R+0x2c8>
 800ab2a:	eeb0 0a47 	vmov.f32	s0, s14
 800ab2e:	f7f9 f88f 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab3a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab3e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800acec <turn180R+0x2cc>
 800ab42:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab4a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab5a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ab5e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab62:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800acdc <turn180R+0x2bc>
 800ab66:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	eeb0 2a47 	vmov.f32	s4, s14
 800ab70:	eef0 1a65 	vmov.f32	s3, s11
 800ab74:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ace0 <turn180R+0x2c0>
 800ab78:	eef0 0a46 	vmov.f32	s1, s12
 800ab7c:	eeb0 0a66 	vmov.f32	s0, s13
 800ab80:	f7f8 fab4 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800ab84:	4b54      	ldr	r3, [pc, #336]	; (800acd8 <turn180R+0x2b8>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab8a:	e09c      	b.n	800acc6 <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab94:	2302      	movs	r3, #2
 800ab96:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab9c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aba0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aba4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aba8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800abac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abb8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800abbc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800abc0:	eddf 4a46 	vldr	s9, [pc, #280]	; 800acdc <turn180R+0x2bc>
 800abc4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	eeb0 2a47 	vmov.f32	s4, s14
 800abce:	eef0 1a45 	vmov.f32	s3, s10
 800abd2:	eeb0 1a65 	vmov.f32	s2, s11
 800abd6:	eef0 0a46 	vmov.f32	s1, s12
 800abda:	eeb0 0a66 	vmov.f32	s0, s13
 800abde:	f7f8 fa85 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800abe2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d10c      	bne.n	800ac04 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800abea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abf2:	eeb0 1a47 	vmov.f32	s2, s14
 800abf6:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ace8 <turn180R+0x2c8>
 800abfa:	eeb0 0a67 	vmov.f32	s0, s15
 800abfe:	f7f9 f967 	bl	8003ed0 <mollifier_slalom_table>
 800ac02:	e015      	b.n	800ac30 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ac04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac08:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ac0c:	eef1 7a67 	vneg.f32	s15, s15
 800ac10:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ac14:	eef0 2a66 	vmov.f32	s5, s13
 800ac18:	eeb0 2a67 	vmov.f32	s4, s15
 800ac1c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ace0 <turn180R+0x2c0>
 800ac20:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ace0 <turn180R+0x2c0>
 800ac24:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ace8 <turn180R+0x2c8>
 800ac28:	eeb0 0a47 	vmov.f32	s0, s14
 800ac2c:	f7f9 f810 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ac30:	2301      	movs	r3, #1
 800ac32:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac38:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ac3c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ac40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac58:	eef0 7ae7 	vabs.f32	s15, s15
 800ac5c:	ee17 0a90 	vmov	r0, s15
 800ac60:	f7f5 fc9a 	bl	8000598 <__aeabi_f2d>
 800ac64:	f04f 0200 	mov.w	r2, #0
 800ac68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac6c:	f7f5 fe16 	bl	800089c <__aeabi_ddiv>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	461d      	mov	r5, r3
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7f5 fc8c 	bl	8000598 <__aeabi_f2d>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4620      	mov	r0, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7f5 fe08 	bl	800089c <__aeabi_ddiv>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4610      	mov	r0, r2
 800ac92:	4619      	mov	r1, r3
 800ac94:	f04f 0200 	mov.w	r2, #0
 800ac98:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <turn180R+0x2d0>)
 800ac9a:	f7f5 fb1f 	bl	80002dc <__adddf3>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aca2:	4610      	mov	r0, r2
 800aca4:	4619      	mov	r1, r3
 800aca6:	f7f5 ffa7 	bl	8000bf8 <__aeabi_d2f>
 800acaa:	4603      	mov	r3, r0
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	ee02 3a10 	vmov	s4, r3
 800acb2:	edd7 1a01 	vldr	s3, [r7, #4]
 800acb6:	ed97 1a01 	vldr	s2, [r7, #4]
 800acba:	eef0 0a68 	vmov.f32	s1, s17
 800acbe:	eeb0 0a48 	vmov.f32	s0, s16
 800acc2:	f7f8 fa13 	bl	80030ec <straight_table2>
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	ecbd 8b02 	vpop	{d8}
 800acd0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800acd4:	b004      	add	sp, #16
 800acd6:	4770      	bx	lr
 800acd8:	200007e8 	.word	0x200007e8
 800acdc:	42340000 	.word	0x42340000
 800ace0:	00000000 	.word	0x00000000
 800ace4:	42da0000 	.word	0x42da0000
 800ace8:	c3340000 	.word	0xc3340000
 800acec:	42b40000 	.word	0x42b40000
 800acf0:	408f4000 	.word	0x408f4000

0800acf4 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800acf4:	b084      	sub	sp, #16
 800acf6:	b5b0      	push	{r4, r5, r7, lr}
 800acf8:	ed2d 8b02 	vpush	{d8}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ad04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad08:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ad0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	f040 80a3 	bne.w	800ae5c <turn180L+0x168>
		highspeed_mode = 1;
 800ad16:	4ba3      	ldr	r3, [pc, #652]	; (800afa4 <turn180L+0x2b0>)
 800ad18:	2201      	movs	r2, #1
 800ad1a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ad2c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ad30:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad40:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ad44:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ad48:	eddf 5a97 	vldr	s11, [pc, #604]	; 800afa8 <turn180L+0x2b4>
 800ad4c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	eeb0 2a47 	vmov.f32	s4, s14
 800ad56:	eef0 1a46 	vmov.f32	s3, s12
 800ad5a:	eeb0 1a66 	vmov.f32	s2, s13
 800ad5e:	eddf 0a93 	vldr	s1, [pc, #588]	; 800afac <turn180L+0x2b8>
 800ad62:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800afb0 <turn180L+0x2bc>
 800ad66:	f7f8 f9c1 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ad6e:	2302      	movs	r3, #2
 800ad70:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad72:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad76:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad7a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad7e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad8e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad92:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad96:	eddf 4a84 	vldr	s9, [pc, #528]	; 800afa8 <turn180L+0x2b4>
 800ad9a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	eeb0 2a47 	vmov.f32	s4, s14
 800ada4:	eef0 1a45 	vmov.f32	s3, s10
 800ada8:	eeb0 1a65 	vmov.f32	s2, s11
 800adac:	eef0 0a46 	vmov.f32	s1, s12
 800adb0:	eeb0 0a66 	vmov.f32	s0, s13
 800adb4:	f7f8 f99a 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800adb8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d10c      	bne.n	800adda <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800adc0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adc4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800adc8:	eeb0 1a47 	vmov.f32	s2, s14
 800adcc:	eddf 0a79 	vldr	s1, [pc, #484]	; 800afb4 <turn180L+0x2c0>
 800add0:	eeb0 0a67 	vmov.f32	s0, s15
 800add4:	f7f9 f87c 	bl	8003ed0 <mollifier_slalom_table>
 800add8:	e013      	b.n	800ae02 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800adda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adde:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ade2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ade6:	eef0 2a66 	vmov.f32	s5, s13
 800adea:	eeb0 2a47 	vmov.f32	s4, s14
 800adee:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800afac <turn180L+0x2b8>
 800adf2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800afac <turn180L+0x2b8>
 800adf6:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800afb4 <turn180L+0x2c0>
 800adfa:	eeb0 0a67 	vmov.f32	s0, s15
 800adfe:	f7f8 ff27 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ae0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ae0e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800afb8 <turn180L+0x2c4>
 800ae12:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ae16:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae1a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae2a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ae2e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ae32:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800afa8 <turn180L+0x2b4>
 800ae36:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	eeb0 2a47 	vmov.f32	s4, s14
 800ae40:	eef0 1a65 	vmov.f32	s3, s11
 800ae44:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800afac <turn180L+0x2b8>
 800ae48:	eef0 0a46 	vmov.f32	s1, s12
 800ae4c:	eeb0 0a66 	vmov.f32	s0, s13
 800ae50:	f7f8 f94c 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800ae54:	4b53      	ldr	r3, [pc, #332]	; (800afa4 <turn180L+0x2b0>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ae5a:	e09a      	b.n	800af92 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ae64:	2302      	movs	r3, #2
 800ae66:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae6c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae70:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae74:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae78:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae88:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae8c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae90:	eddf 4a45 	vldr	s9, [pc, #276]	; 800afa8 <turn180L+0x2b4>
 800ae94:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	eeb0 2a47 	vmov.f32	s4, s14
 800ae9e:	eef0 1a45 	vmov.f32	s3, s10
 800aea2:	eeb0 1a65 	vmov.f32	s2, s11
 800aea6:	eef0 0a46 	vmov.f32	s1, s12
 800aeaa:	eeb0 0a66 	vmov.f32	s0, s13
 800aeae:	f7f8 f91d 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800aeb2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d10c      	bne.n	800aed4 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800aeba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aebe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aec2:	eeb0 1a47 	vmov.f32	s2, s14
 800aec6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800afb4 <turn180L+0x2c0>
 800aeca:	eeb0 0a67 	vmov.f32	s0, s15
 800aece:	f7f8 ffff 	bl	8003ed0 <mollifier_slalom_table>
 800aed2:	e013      	b.n	800aefc <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aed4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aed8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aedc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aee0:	eef0 2a66 	vmov.f32	s5, s13
 800aee4:	eeb0 2a47 	vmov.f32	s4, s14
 800aee8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800afac <turn180L+0x2b8>
 800aeec:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800afac <turn180L+0x2b8>
 800aef0:	eddf 0a30 	vldr	s1, [pc, #192]	; 800afb4 <turn180L+0x2c0>
 800aef4:	eeb0 0a67 	vmov.f32	s0, s15
 800aef8:	f7f8 feaa 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aefc:	2301      	movs	r3, #1
 800aefe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af04:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800af08:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800af0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af18:	edd7 7a01 	vldr	s15, [r7, #4]
 800af1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800af20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af24:	eef0 7ae7 	vabs.f32	s15, s15
 800af28:	ee17 0a90 	vmov	r0, s15
 800af2c:	f7f5 fb34 	bl	8000598 <__aeabi_f2d>
 800af30:	f04f 0200 	mov.w	r2, #0
 800af34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af38:	f7f5 fcb0 	bl	800089c <__aeabi_ddiv>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4614      	mov	r4, r2
 800af42:	461d      	mov	r5, r3
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	4618      	mov	r0, r3
 800af48:	f7f5 fb26 	bl	8000598 <__aeabi_f2d>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4620      	mov	r0, r4
 800af52:	4629      	mov	r1, r5
 800af54:	f7f5 fca2 	bl	800089c <__aeabi_ddiv>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4610      	mov	r0, r2
 800af5e:	4619      	mov	r1, r3
 800af60:	f04f 0200 	mov.w	r2, #0
 800af64:	4b15      	ldr	r3, [pc, #84]	; (800afbc <turn180L+0x2c8>)
 800af66:	f7f5 f9b9 	bl	80002dc <__adddf3>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af6e:	4610      	mov	r0, r2
 800af70:	4619      	mov	r1, r3
 800af72:	f7f5 fe41 	bl	8000bf8 <__aeabi_d2f>
 800af76:	4603      	mov	r3, r0
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	ee02 3a10 	vmov	s4, r3
 800af7e:	edd7 1a01 	vldr	s3, [r7, #4]
 800af82:	ed97 1a01 	vldr	s2, [r7, #4]
 800af86:	eef0 0a68 	vmov.f32	s1, s17
 800af8a:	eeb0 0a48 	vmov.f32	s0, s16
 800af8e:	f7f8 f8ad 	bl	80030ec <straight_table2>
}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	ecbd 8b02 	vpop	{d8}
 800af9c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800afa0:	b004      	add	sp, #16
 800afa2:	4770      	bx	lr
 800afa4:	200007e8 	.word	0x200007e8
 800afa8:	42340000 	.word	0x42340000
 800afac:	00000000 	.word	0x00000000
 800afb0:	42da0000 	.word	0x42da0000
 800afb4:	43340000 	.word	0x43340000
 800afb8:	42b40000 	.word	0x42b40000
 800afbc:	408f4000 	.word	0x408f4000

0800afc0 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800afc0:	b084      	sub	sp, #16
 800afc2:	b5b0      	push	{r4, r5, r7, lr}
 800afc4:	ed2d 8b02 	vpush	{d8}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800afd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800afd4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800afd8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800afdc:	2b01      	cmp	r3, #1
 800afde:	f040 80ae 	bne.w	800b13e <turn45inR+0x17e>
		highspeed_mode = 1;
 800afe2:	4bdd      	ldr	r3, [pc, #884]	; (800b358 <turn45inR+0x398>)
 800afe4:	2201      	movs	r2, #1
 800afe6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800afe8:	2301      	movs	r3, #1
 800afea:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800afec:	2300      	movs	r3, #0
 800afee:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aff8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800affc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b000:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b004:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b00c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b010:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b014:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b35c <turn45inR+0x39c>
 800b018:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	eeb0 2a47 	vmov.f32	s4, s14
 800b022:	eef0 1a46 	vmov.f32	s3, s12
 800b026:	eeb0 1a66 	vmov.f32	s2, s13
 800b02a:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b368 <turn45inR+0x3a8>
 800b02e:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b360 <turn45inR+0x3a0>
 800b032:	f7f8 f85b 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800b036:	2300      	movs	r3, #0
 800b038:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b03a:	2302      	movs	r3, #2
 800b03c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b03e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b042:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b046:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b04a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b04e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b052:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b05a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b05e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b062:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b35c <turn45inR+0x39c>
 800b066:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	eeb0 2a47 	vmov.f32	s4, s14
 800b070:	eef0 1a45 	vmov.f32	s3, s10
 800b074:	eeb0 1a65 	vmov.f32	s2, s11
 800b078:	eef0 0a46 	vmov.f32	s1, s12
 800b07c:	eeb0 0a66 	vmov.f32	s0, s13
 800b080:	f7f8 f834 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800b084:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d10c      	bne.n	800b0a6 <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b08c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b090:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b094:	eeb0 1a47 	vmov.f32	s2, s14
 800b098:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b36c <turn45inR+0x3ac>
 800b09c:	eeb0 0a67 	vmov.f32	s0, s15
 800b0a0:	f7f8 ff16 	bl	8003ed0 <mollifier_slalom_table>
 800b0a4:	e015      	b.n	800b0d2 <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b0a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0ae:	eef1 7a67 	vneg.f32	s15, s15
 800b0b2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b0b6:	eef0 2a66 	vmov.f32	s5, s13
 800b0ba:	eeb0 2a67 	vmov.f32	s4, s15
 800b0be:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b368 <turn45inR+0x3a8>
 800b0c2:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b368 <turn45inR+0x3a8>
 800b0c6:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b36c <turn45inR+0x3ac>
 800b0ca:	eeb0 0a47 	vmov.f32	s0, s14
 800b0ce:	f7f8 fdbf 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7f5 fa5b 	bl	8000598 <__aeabi_f2d>
 800b0e2:	a39b      	add	r3, pc, #620	; (adr r3, 800b350 <turn45inR+0x390>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f8f8 	bl	80002dc <__adddf3>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f7f5 fd80 	bl	8000bf8 <__aeabi_d2f>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b0fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b102:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b106:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b10a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b10e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b112:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b116:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b35c <turn45inR+0x39c>
 800b11a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	eeb0 2a47 	vmov.f32	s4, s14
 800b124:	eef0 1a46 	vmov.f32	s3, s12
 800b128:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b368 <turn45inR+0x3a8>
 800b12c:	eef0 0a66 	vmov.f32	s1, s13
 800b130:	ee00 3a10 	vmov	s0, r3
 800b134:	f7f7 ffda 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800b138:	4b87      	ldr	r3, [pc, #540]	; (800b358 <turn45inR+0x398>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b13e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b142:	2b00      	cmp	r3, #0
 800b144:	f040 809d 	bne.w	800b282 <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b148:	2300      	movs	r3, #0
 800b14a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b150:	2302      	movs	r3, #2
 800b152:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b154:	2300      	movs	r3, #0
 800b156:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b158:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b15c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b160:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b164:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b168:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b16c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b170:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b174:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b178:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b17c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b35c <turn45inR+0x39c>
 800b180:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	eeb0 2a47 	vmov.f32	s4, s14
 800b18a:	eef0 1a45 	vmov.f32	s3, s10
 800b18e:	eeb0 1a65 	vmov.f32	s2, s11
 800b192:	eef0 0a46 	vmov.f32	s1, s12
 800b196:	eeb0 0a66 	vmov.f32	s0, s13
 800b19a:	f7f7 ffa7 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800b19e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d10c      	bne.n	800b1c0 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b1a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b1ae:	eeb0 1a47 	vmov.f32	s2, s14
 800b1b2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b36c <turn45inR+0x3ac>
 800b1b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b1ba:	f7f8 fe89 	bl	8003ed0 <mollifier_slalom_table>
 800b1be:	e015      	b.n	800b1ec <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b1c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b1c8:	eef1 7a67 	vneg.f32	s15, s15
 800b1cc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b1d0:	eef0 2a66 	vmov.f32	s5, s13
 800b1d4:	eeb0 2a67 	vmov.f32	s4, s15
 800b1d8:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b368 <turn45inR+0x3a8>
 800b1dc:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b368 <turn45inR+0x3a8>
 800b1e0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b36c <turn45inR+0x3ac>
 800b1e4:	eeb0 0a47 	vmov.f32	s0, s14
 800b1e8:	f7f8 fd32 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1f4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b1f8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b1fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b200:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b204:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b208:	edd7 7a01 	vldr	s15, [r7, #4]
 800b20c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b210:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b214:	eef0 7ae7 	vabs.f32	s15, s15
 800b218:	ee17 0a90 	vmov	r0, s15
 800b21c:	f7f5 f9bc 	bl	8000598 <__aeabi_f2d>
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b228:	f7f5 fb38 	bl	800089c <__aeabi_ddiv>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4614      	mov	r4, r2
 800b232:	461d      	mov	r5, r3
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	4618      	mov	r0, r3
 800b238:	f7f5 f9ae 	bl	8000598 <__aeabi_f2d>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4620      	mov	r0, r4
 800b242:	4629      	mov	r1, r5
 800b244:	f7f5 fb2a 	bl	800089c <__aeabi_ddiv>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4610      	mov	r0, r2
 800b24e:	4619      	mov	r1, r3
 800b250:	f04f 0200 	mov.w	r2, #0
 800b254:	4b43      	ldr	r3, [pc, #268]	; (800b364 <turn45inR+0x3a4>)
 800b256:	f7f5 f841 	bl	80002dc <__adddf3>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b25e:	4610      	mov	r0, r2
 800b260:	4619      	mov	r1, r3
 800b262:	f7f5 fcc9 	bl	8000bf8 <__aeabi_d2f>
 800b266:	4603      	mov	r3, r0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	ee02 3a10 	vmov	s4, r3
 800b26e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b272:	ed97 1a01 	vldr	s2, [r7, #4]
 800b276:	eef0 0a68 	vmov.f32	s1, s17
 800b27a:	eeb0 0a48 	vmov.f32	s0, s16
 800b27e:	f7f7 ff35 	bl	80030ec <straight_table2>

	}
	if (test_mode >= 2) {
 800b282:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b286:	2b01      	cmp	r3, #1
 800b288:	f240 80d0 	bls.w	800b42c <turn45inR+0x46c>

		highspeed_mode = 1;
 800b28c:	4b32      	ldr	r3, [pc, #200]	; (800b358 <turn45inR+0x398>)
 800b28e:	2201      	movs	r2, #1
 800b290:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b292:	2301      	movs	r3, #1
 800b294:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b296:	2300      	movs	r3, #0
 800b298:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b2a2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b2a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2b6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b2ba:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b2be:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b35c <turn45inR+0x39c>
 800b2c2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	eeb0 2a47 	vmov.f32	s4, s14
 800b2cc:	eef0 1a46 	vmov.f32	s3, s12
 800b2d0:	eeb0 1a66 	vmov.f32	s2, s13
 800b2d4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b368 <turn45inR+0x3a8>
 800b2d8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b360 <turn45inR+0x3a0>
 800b2dc:	f7f7 ff06 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2f0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2f4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b300:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b304:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b308:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b30c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b35c <turn45inR+0x39c>
 800b310:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	eeb0 2a47 	vmov.f32	s4, s14
 800b31a:	eef0 1a45 	vmov.f32	s3, s10
 800b31e:	eeb0 1a65 	vmov.f32	s2, s11
 800b322:	eef0 0a46 	vmov.f32	s1, s12
 800b326:	eeb0 0a66 	vmov.f32	s0, s13
 800b32a:	f7f7 fedf 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800b32e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b332:	2b01      	cmp	r3, #1
 800b334:	d11c      	bne.n	800b370 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b336:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b33a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b33e:	eeb0 1a47 	vmov.f32	s2, s14
 800b342:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b36c <turn45inR+0x3ac>
 800b346:	eeb0 0a67 	vmov.f32	s0, s15
 800b34a:	f7f8 fdc1 	bl	8003ed0 <mollifier_slalom_table>
 800b34e:	e025      	b.n	800b39c <turn45inR+0x3dc>
 800b350:	c022ec18 	.word	0xc022ec18
 800b354:	405fd1de 	.word	0x405fd1de
 800b358:	200007e8 	.word	0x200007e8
 800b35c:	42340000 	.word	0x42340000
 800b360:	42da0000 	.word	0x42da0000
 800b364:	408f4000 	.word	0x408f4000
 800b368:	00000000 	.word	0x00000000
 800b36c:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b370:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b374:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b378:	eef1 7a67 	vneg.f32	s15, s15
 800b37c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b380:	eef0 2a66 	vmov.f32	s5, s13
 800b384:	eeb0 2a67 	vmov.f32	s4, s15
 800b388:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b368 <turn45inR+0x3a8>
 800b38c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b368 <turn45inR+0x3a8>
 800b390:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b36c <turn45inR+0x3ac>
 800b394:	eeb0 0a47 	vmov.f32	s0, s14
 800b398:	f7f8 fc5a 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3a8:	3b02      	subs	r3, #2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f5 f8e2 	bl	8000574 <__aeabi_i2d>
 800b3b0:	a325      	add	r3, pc, #148	; (adr r3, 800b448 <turn45inR+0x488>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f5 f947 	bl	8000648 <__aeabi_dmul>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	4614      	mov	r4, r2
 800b3c0:	461d      	mov	r5, r3
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7f5 f8e7 	bl	8000598 <__aeabi_f2d>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f4 ff83 	bl	80002dc <__adddf3>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4610      	mov	r0, r2
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f7f5 fc0b 	bl	8000bf8 <__aeabi_d2f>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b3e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3ec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3fc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b400:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b404:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b440 <turn45inR+0x480>
 800b408:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	eeb0 2a47 	vmov.f32	s4, s14
 800b412:	eef0 1a65 	vmov.f32	s3, s11
 800b416:	eeb0 1a46 	vmov.f32	s2, s12
 800b41a:	eef0 0a66 	vmov.f32	s1, s13
 800b41e:	ee00 3a10 	vmov	s0, r3
 800b422:	f7f7 fe63 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <turn45inR+0x484>)
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
	}

}
 800b42c:	bf00      	nop
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	ecbd 8b02 	vpop	{d8}
 800b436:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b43a:	b004      	add	sp, #16
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	42340000 	.word	0x42340000
 800b444:	200007e8 	.word	0x200007e8
 800b448:	c022ec18 	.word	0xc022ec18
 800b44c:	404fd1de 	.word	0x404fd1de

0800b450 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b450:	b084      	sub	sp, #16
 800b452:	b5b0      	push	{r4, r5, r7, lr}
 800b454:	ed2d 8b02 	vpush	{d8}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b464:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b468:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	f040 80ac 	bne.w	800b5ca <turn45inL+0x17a>
		highspeed_mode = 1;
 800b472:	4bdb      	ldr	r3, [pc, #876]	; (800b7e0 <turn45inL+0x390>)
 800b474:	2201      	movs	r2, #1
 800b476:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b478:	2301      	movs	r3, #1
 800b47a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b484:	2300      	movs	r3, #0
 800b486:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b488:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b48c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b490:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b494:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b49c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b4a0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b4a4:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800b7f0 <turn45inL+0x3a0>
 800b4a8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	eeb0 2a47 	vmov.f32	s4, s14
 800b4b2:	eef0 1a46 	vmov.f32	s3, s12
 800b4b6:	eeb0 1a66 	vmov.f32	s2, s13
 800b4ba:	eddf 0acc 	vldr	s1, [pc, #816]	; 800b7ec <turn45inL+0x39c>
 800b4be:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800b7e4 <turn45inL+0x394>
 800b4c2:	f7f7 fe13 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b4d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b4d6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b4da:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b4de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4ea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b4ee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4f2:	eddf 4abf 	vldr	s9, [pc, #764]	; 800b7f0 <turn45inL+0x3a0>
 800b4f6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	eeb0 2a47 	vmov.f32	s4, s14
 800b500:	eef0 1a45 	vmov.f32	s3, s10
 800b504:	eeb0 1a65 	vmov.f32	s2, s11
 800b508:	eef0 0a46 	vmov.f32	s1, s12
 800b50c:	eeb0 0a66 	vmov.f32	s0, s13
 800b510:	f7f7 fdec 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800b514:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d10c      	bne.n	800b536 <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b51c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b520:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b524:	eeb0 1a47 	vmov.f32	s2, s14
 800b528:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800b7f0 <turn45inL+0x3a0>
 800b52c:	eeb0 0a67 	vmov.f32	s0, s15
 800b530:	f7f8 fcce 	bl	8003ed0 <mollifier_slalom_table>
 800b534:	e013      	b.n	800b55e <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b536:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b53a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b53e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b542:	eef0 2a66 	vmov.f32	s5, s13
 800b546:	eeb0 2a47 	vmov.f32	s4, s14
 800b54a:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800b7ec <turn45inL+0x39c>
 800b54e:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800b7ec <turn45inL+0x39c>
 800b552:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800b7f0 <turn45inL+0x3a0>
 800b556:	eeb0 0a67 	vmov.f32	s0, s15
 800b55a:	f7f8 fb79 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b55e:	2300      	movs	r3, #0
 800b560:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	4618      	mov	r0, r3
 800b56a:	f7f5 f815 	bl	8000598 <__aeabi_f2d>
 800b56e:	a39a      	add	r3, pc, #616	; (adr r3, 800b7d8 <turn45inL+0x388>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f7f4 feb2 	bl	80002dc <__adddf3>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4610      	mov	r0, r2
 800b57e:	4619      	mov	r1, r3
 800b580:	f7f5 fb3a 	bl	8000bf8 <__aeabi_d2f>
 800b584:	4603      	mov	r3, r0
 800b586:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b58a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b58e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b592:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b59a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b59e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b5a2:	eddf 5a93 	vldr	s11, [pc, #588]	; 800b7f0 <turn45inL+0x3a0>
 800b5a6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	eeb0 2a47 	vmov.f32	s4, s14
 800b5b0:	eef0 1a46 	vmov.f32	s3, s12
 800b5b4:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800b7ec <turn45inL+0x39c>
 800b5b8:	eef0 0a66 	vmov.f32	s1, s13
 800b5bc:	ee00 3a10 	vmov	s0, r3
 800b5c0:	f7f7 fd94 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800b5c4:	4b86      	ldr	r3, [pc, #536]	; (800b7e0 <turn45inL+0x390>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b5ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f040 809b 	bne.w	800b70a <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b5dc:	2302      	movs	r3, #2
 800b5de:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b5e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b5e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b5ec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b5f0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b600:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b604:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b608:	eddf 4a79 	vldr	s9, [pc, #484]	; 800b7f0 <turn45inL+0x3a0>
 800b60c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	eeb0 2a47 	vmov.f32	s4, s14
 800b616:	eef0 1a45 	vmov.f32	s3, s10
 800b61a:	eeb0 1a65 	vmov.f32	s2, s11
 800b61e:	eef0 0a46 	vmov.f32	s1, s12
 800b622:	eeb0 0a66 	vmov.f32	s0, s13
 800b626:	f7f7 fd61 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800b62a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d10c      	bne.n	800b64c <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b632:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b636:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b63a:	eeb0 1a47 	vmov.f32	s2, s14
 800b63e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800b7f0 <turn45inL+0x3a0>
 800b642:	eeb0 0a67 	vmov.f32	s0, s15
 800b646:	f7f8 fc43 	bl	8003ed0 <mollifier_slalom_table>
 800b64a:	e013      	b.n	800b674 <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b64c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b650:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b654:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b658:	eef0 2a66 	vmov.f32	s5, s13
 800b65c:	eeb0 2a47 	vmov.f32	s4, s14
 800b660:	eddf 1a62 	vldr	s3, [pc, #392]	; 800b7ec <turn45inL+0x39c>
 800b664:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800b7ec <turn45inL+0x39c>
 800b668:	eddf 0a61 	vldr	s1, [pc, #388]	; 800b7f0 <turn45inL+0x3a0>
 800b66c:	eeb0 0a67 	vmov.f32	s0, s15
 800b670:	f7f8 faee 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b674:	2303      	movs	r3, #3
 800b676:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b67c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b680:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b684:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b688:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b68c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b690:	edd7 7a01 	vldr	s15, [r7, #4]
 800b694:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b69c:	eef0 7ae7 	vabs.f32	s15, s15
 800b6a0:	ee17 0a90 	vmov	r0, s15
 800b6a4:	f7f4 ff78 	bl	8000598 <__aeabi_f2d>
 800b6a8:	f04f 0200 	mov.w	r2, #0
 800b6ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6b0:	f7f5 f8f4 	bl	800089c <__aeabi_ddiv>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f4 ff6a 	bl	8000598 <__aeabi_f2d>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f5 f8e6 	bl	800089c <__aeabi_ddiv>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	f04f 0200 	mov.w	r2, #0
 800b6dc:	4b42      	ldr	r3, [pc, #264]	; (800b7e8 <turn45inL+0x398>)
 800b6de:	f7f4 fdfd 	bl	80002dc <__adddf3>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	f7f5 fa85 	bl	8000bf8 <__aeabi_d2f>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	ee02 3a10 	vmov	s4, r3
 800b6f6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b6fa:	ed97 1a01 	vldr	s2, [r7, #4]
 800b6fe:	eef0 0a68 	vmov.f32	s1, s17
 800b702:	eeb0 0a48 	vmov.f32	s0, s16
 800b706:	f7f7 fcf1 	bl	80030ec <straight_table2>

	}
	if (test_mode >= 2) {
 800b70a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b70e:	2b01      	cmp	r3, #1
 800b710:	f240 80cc 	bls.w	800b8ac <turn45inL+0x45c>

		highspeed_mode = 1;
 800b714:	4b32      	ldr	r3, [pc, #200]	; (800b7e0 <turn45inL+0x390>)
 800b716:	2201      	movs	r2, #1
 800b718:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b71a:	2301      	movs	r3, #1
 800b71c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b71e:	2300      	movs	r3, #0
 800b720:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b722:	2300      	movs	r3, #0
 800b724:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b726:	2300      	movs	r3, #0
 800b728:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b72a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b72e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b732:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b736:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b73a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b73e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b742:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b746:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800b7f0 <turn45inL+0x3a0>
 800b74a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	eeb0 2a47 	vmov.f32	s4, s14
 800b754:	eef0 1a46 	vmov.f32	s3, s12
 800b758:	eeb0 1a66 	vmov.f32	s2, s13
 800b75c:	eddf 0a23 	vldr	s1, [pc, #140]	; 800b7ec <turn45inL+0x39c>
 800b760:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800b7e4 <turn45inL+0x394>
 800b764:	f7f7 fcc2 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800b768:	2300      	movs	r3, #0
 800b76a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b76c:	2302      	movs	r3, #2
 800b76e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b770:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b774:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b778:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b77c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b780:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b784:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b78c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b790:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b794:	eddf 4a16 	vldr	s9, [pc, #88]	; 800b7f0 <turn45inL+0x3a0>
 800b798:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	eeb0 2a47 	vmov.f32	s4, s14
 800b7a2:	eef0 1a45 	vmov.f32	s3, s10
 800b7a6:	eeb0 1a65 	vmov.f32	s2, s11
 800b7aa:	eef0 0a46 	vmov.f32	s1, s12
 800b7ae:	eeb0 0a66 	vmov.f32	s0, s13
 800b7b2:	f7f7 fc9b 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800b7b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d11a      	bne.n	800b7f4 <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b7be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7c6:	eeb0 1a47 	vmov.f32	s2, s14
 800b7ca:	eddf 0a09 	vldr	s1, [pc, #36]	; 800b7f0 <turn45inL+0x3a0>
 800b7ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b7d2:	f7f8 fb7d 	bl	8003ed0 <mollifier_slalom_table>
 800b7d6:	e021      	b.n	800b81c <turn45inL+0x3cc>
 800b7d8:	c022ec18 	.word	0xc022ec18
 800b7dc:	405fd1de 	.word	0x405fd1de
 800b7e0:	200007e8 	.word	0x200007e8
 800b7e4:	42da0000 	.word	0x42da0000
 800b7e8:	408f4000 	.word	0x408f4000
 800b7ec:	00000000 	.word	0x00000000
 800b7f0:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b7f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b800:	eef0 2a66 	vmov.f32	s5, s13
 800b804:	eeb0 2a47 	vmov.f32	s4, s14
 800b808:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800b7ec <turn45inL+0x39c>
 800b80c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800b7ec <turn45inL+0x39c>
 800b810:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800b7f0 <turn45inL+0x3a0>
 800b814:	eeb0 0a67 	vmov.f32	s0, s15
 800b818:	f7f8 fa1a 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b820:	2300      	movs	r3, #0
 800b822:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b824:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b828:	3b02      	subs	r3, #2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7f4 fea2 	bl	8000574 <__aeabi_i2d>
 800b830:	a325      	add	r3, pc, #148	; (adr r3, 800b8c8 <turn45inL+0x478>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	f7f4 ff07 	bl	8000648 <__aeabi_dmul>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	4614      	mov	r4, r2
 800b840:	461d      	mov	r5, r3
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	4618      	mov	r0, r3
 800b846:	f7f4 fea7 	bl	8000598 <__aeabi_f2d>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4620      	mov	r0, r4
 800b850:	4629      	mov	r1, r5
 800b852:	f7f4 fd43 	bl	80002dc <__adddf3>
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	4610      	mov	r0, r2
 800b85c:	4619      	mov	r1, r3
 800b85e:	f7f5 f9cb 	bl	8000bf8 <__aeabi_d2f>
 800b862:	4603      	mov	r3, r0
 800b864:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b868:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b86c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b870:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b874:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b87c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b880:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b884:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b8c0 <turn45inL+0x470>
 800b888:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	eeb0 2a47 	vmov.f32	s4, s14
 800b892:	eef0 1a65 	vmov.f32	s3, s11
 800b896:	eeb0 1a46 	vmov.f32	s2, s12
 800b89a:	eef0 0a66 	vmov.f32	s1, s13
 800b89e:	ee00 3a10 	vmov	s0, r3
 800b8a2:	f7f7 fc23 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800b8a6:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <turn45inL+0x474>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	701a      	strb	r2, [r3, #0]
	}

}
 800b8ac:	bf00      	nop
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	ecbd 8b02 	vpop	{d8}
 800b8b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b8ba:	b004      	add	sp, #16
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	42340000 	.word	0x42340000
 800b8c4:	200007e8 	.word	0x200007e8
 800b8c8:	c022ec18 	.word	0xc022ec18
 800b8cc:	404fd1de 	.word	0x404fd1de

0800b8d0 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	b5b0      	push	{r4, r5, r7, lr}
 800b8d4:	ed2d 8b02 	vpush	{d8}
 800b8d8:	b084      	sub	sp, #16
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b8e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b8e4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b8e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	f040 80ae 	bne.w	800ba4e <turn135inR+0x17e>
		highspeed_mode = 1;
 800b8f2:	4bdd      	ldr	r3, [pc, #884]	; (800bc68 <turn135inR+0x398>)
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b904:	2300      	movs	r3, #0
 800b906:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b908:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b90c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b910:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b914:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b91c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b920:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b924:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bc6c <turn135inR+0x39c>
 800b928:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	eeb0 2a47 	vmov.f32	s4, s14
 800b932:	eef0 1a46 	vmov.f32	s3, s12
 800b936:	eeb0 1a66 	vmov.f32	s2, s13
 800b93a:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bc78 <turn135inR+0x3a8>
 800b93e:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bc70 <turn135inR+0x3a0>
 800b942:	f7f7 fbd3 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800b946:	2300      	movs	r3, #0
 800b948:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b94a:	2302      	movs	r3, #2
 800b94c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b94e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b952:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b956:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b95a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b95e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b962:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b96a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b96e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b972:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bc6c <turn135inR+0x39c>
 800b976:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	eeb0 2a47 	vmov.f32	s4, s14
 800b980:	eef0 1a45 	vmov.f32	s3, s10
 800b984:	eeb0 1a65 	vmov.f32	s2, s11
 800b988:	eef0 0a46 	vmov.f32	s1, s12
 800b98c:	eeb0 0a66 	vmov.f32	s0, s13
 800b990:	f7f7 fbac 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800b994:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d10c      	bne.n	800b9b6 <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800b99c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b9a4:	eeb0 1a47 	vmov.f32	s2, s14
 800b9a8:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bc7c <turn135inR+0x3ac>
 800b9ac:	eeb0 0a67 	vmov.f32	s0, s15
 800b9b0:	f7f8 fa8e 	bl	8003ed0 <mollifier_slalom_table>
 800b9b4:	e015      	b.n	800b9e2 <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b9b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b9be:	eef1 7a67 	vneg.f32	s15, s15
 800b9c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b9c6:	eef0 2a66 	vmov.f32	s5, s13
 800b9ca:	eeb0 2a67 	vmov.f32	s4, s15
 800b9ce:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bc78 <turn135inR+0x3a8>
 800b9d2:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bc78 <turn135inR+0x3a8>
 800b9d6:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bc7c <turn135inR+0x3ac>
 800b9da:	eeb0 0a47 	vmov.f32	s0, s14
 800b9de:	f7f8 f937 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7f4 fdd3 	bl	8000598 <__aeabi_f2d>
 800b9f2:	a39b      	add	r3, pc, #620	; (adr r3, 800bc60 <turn135inR+0x390>)
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f7f4 fc70 	bl	80002dc <__adddf3>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4610      	mov	r0, r2
 800ba02:	4619      	mov	r1, r3
 800ba04:	f7f5 f8f8 	bl	8000bf8 <__aeabi_d2f>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba0e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba1e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ba22:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ba26:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bc6c <turn135inR+0x39c>
 800ba2a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	eeb0 2a47 	vmov.f32	s4, s14
 800ba34:	eef0 1a46 	vmov.f32	s3, s12
 800ba38:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bc78 <turn135inR+0x3a8>
 800ba3c:	eef0 0a66 	vmov.f32	s1, s13
 800ba40:	ee00 3a10 	vmov	s0, r3
 800ba44:	f7f7 fb52 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800ba48:	4b87      	ldr	r3, [pc, #540]	; (800bc68 <turn135inR+0x398>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800ba4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f040 809d 	bne.w	800bb92 <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ba60:	2302      	movs	r3, #2
 800ba62:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba70:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ba74:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba84:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba88:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba8c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bc6c <turn135inR+0x39c>
 800ba90:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	eeb0 2a47 	vmov.f32	s4, s14
 800ba9a:	eef0 1a45 	vmov.f32	s3, s10
 800ba9e:	eeb0 1a65 	vmov.f32	s2, s11
 800baa2:	eef0 0a46 	vmov.f32	s1, s12
 800baa6:	eeb0 0a66 	vmov.f32	s0, s13
 800baaa:	f7f7 fb1f 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800baae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d10c      	bne.n	800bad0 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bab6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800babe:	eeb0 1a47 	vmov.f32	s2, s14
 800bac2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bc7c <turn135inR+0x3ac>
 800bac6:	eeb0 0a67 	vmov.f32	s0, s15
 800baca:	f7f8 fa01 	bl	8003ed0 <mollifier_slalom_table>
 800bace:	e015      	b.n	800bafc <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bad0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bad4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bad8:	eef1 7a67 	vneg.f32	s15, s15
 800badc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bae0:	eef0 2a66 	vmov.f32	s5, s13
 800bae4:	eeb0 2a67 	vmov.f32	s4, s15
 800bae8:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bc78 <turn135inR+0x3a8>
 800baec:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bc78 <turn135inR+0x3a8>
 800baf0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bc7c <turn135inR+0x3ac>
 800baf4:	eeb0 0a47 	vmov.f32	s0, s14
 800baf8:	f7f8 f8aa 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bb04:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bb08:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bb0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb18:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb24:	eef0 7ae7 	vabs.f32	s15, s15
 800bb28:	ee17 0a90 	vmov	r0, s15
 800bb2c:	f7f4 fd34 	bl	8000598 <__aeabi_f2d>
 800bb30:	f04f 0200 	mov.w	r2, #0
 800bb34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb38:	f7f4 feb0 	bl	800089c <__aeabi_ddiv>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4614      	mov	r4, r2
 800bb42:	461d      	mov	r5, r3
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7f4 fd26 	bl	8000598 <__aeabi_f2d>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 fea2 	bl	800089c <__aeabi_ddiv>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4619      	mov	r1, r3
 800bb60:	f04f 0200 	mov.w	r2, #0
 800bb64:	4b43      	ldr	r3, [pc, #268]	; (800bc74 <turn135inR+0x3a4>)
 800bb66:	f7f4 fbb9 	bl	80002dc <__adddf3>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bb6e:	4610      	mov	r0, r2
 800bb70:	4619      	mov	r1, r3
 800bb72:	f7f5 f841 	bl	8000bf8 <__aeabi_d2f>
 800bb76:	4603      	mov	r3, r0
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	ee02 3a10 	vmov	s4, r3
 800bb7e:	edd7 1a01 	vldr	s3, [r7, #4]
 800bb82:	ed97 1a01 	vldr	s2, [r7, #4]
 800bb86:	eef0 0a68 	vmov.f32	s1, s17
 800bb8a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb8e:	f7f7 faad 	bl	80030ec <straight_table2>

	}
	if (test_mode >= 2) {
 800bb92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	f240 80d0 	bls.w	800bd3c <turn135inR+0x46c>

		highspeed_mode = 1;
 800bb9c:	4b32      	ldr	r3, [pc, #200]	; (800bc68 <turn135inR+0x398>)
 800bb9e:	2201      	movs	r2, #1
 800bba0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bba2:	2301      	movs	r3, #1
 800bba4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bbb2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bbb6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbc6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bbca:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bbce:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bc6c <turn135inR+0x39c>
 800bbd2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	eeb0 2a47 	vmov.f32	s4, s14
 800bbdc:	eef0 1a46 	vmov.f32	s3, s12
 800bbe0:	eeb0 1a66 	vmov.f32	s2, s13
 800bbe4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bc78 <turn135inR+0x3a8>
 800bbe8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bc70 <turn135inR+0x3a0>
 800bbec:	f7f7 fa7e 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbf8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbfc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bc00:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bc04:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc14:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bc18:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc1c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bc6c <turn135inR+0x39c>
 800bc20:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	eeb0 2a47 	vmov.f32	s4, s14
 800bc2a:	eef0 1a45 	vmov.f32	s3, s10
 800bc2e:	eeb0 1a65 	vmov.f32	s2, s11
 800bc32:	eef0 0a46 	vmov.f32	s1, s12
 800bc36:	eeb0 0a66 	vmov.f32	s0, s13
 800bc3a:	f7f7 fa57 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800bc3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d11c      	bne.n	800bc80 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bc46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc4e:	eeb0 1a47 	vmov.f32	s2, s14
 800bc52:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bc7c <turn135inR+0x3ac>
 800bc56:	eeb0 0a67 	vmov.f32	s0, s15
 800bc5a:	f7f8 f939 	bl	8003ed0 <mollifier_slalom_table>
 800bc5e:	e025      	b.n	800bcac <turn135inR+0x3dc>
 800bc60:	c022ec18 	.word	0xc022ec18
 800bc64:	405fd1de 	.word	0x405fd1de
 800bc68:	200007e8 	.word	0x200007e8
 800bc6c:	42340000 	.word	0x42340000
 800bc70:	42da0000 	.word	0x42da0000
 800bc74:	408f4000 	.word	0x408f4000
 800bc78:	00000000 	.word	0x00000000
 800bc7c:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc88:	eef1 7a67 	vneg.f32	s15, s15
 800bc8c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc90:	eef0 2a66 	vmov.f32	s5, s13
 800bc94:	eeb0 2a67 	vmov.f32	s4, s15
 800bc98:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bc78 <turn135inR+0x3a8>
 800bc9c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bc78 <turn135inR+0x3a8>
 800bca0:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bc7c <turn135inR+0x3ac>
 800bca4:	eeb0 0a47 	vmov.f32	s0, s14
 800bca8:	f7f7 ffd2 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcb4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcb8:	3b02      	subs	r3, #2
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7f4 fc5a 	bl	8000574 <__aeabi_i2d>
 800bcc0:	a325      	add	r3, pc, #148	; (adr r3, 800bd58 <turn135inR+0x488>)
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	f7f4 fcbf 	bl	8000648 <__aeabi_dmul>
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4614      	mov	r4, r2
 800bcd0:	461d      	mov	r5, r3
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7f4 fc5f 	bl	8000598 <__aeabi_f2d>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fafb 	bl	80002dc <__adddf3>
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4610      	mov	r0, r2
 800bcec:	4619      	mov	r1, r3
 800bcee:	f7f4 ff83 	bl	8000bf8 <__aeabi_d2f>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bcf8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcfc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd0c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bd10:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd14:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bd50 <turn135inR+0x480>
 800bd18:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	eeb0 2a47 	vmov.f32	s4, s14
 800bd22:	eef0 1a65 	vmov.f32	s3, s11
 800bd26:	eeb0 1a46 	vmov.f32	s2, s12
 800bd2a:	eef0 0a66 	vmov.f32	s1, s13
 800bd2e:	ee00 3a10 	vmov	s0, r3
 800bd32:	f7f7 f9db 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800bd36:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <turn135inR+0x484>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	701a      	strb	r2, [r3, #0]
	}

}
 800bd3c:	bf00      	nop
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	ecbd 8b02 	vpop	{d8}
 800bd46:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bd4a:	b004      	add	sp, #16
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	42340000 	.word	0x42340000
 800bd54:	200007e8 	.word	0x200007e8
 800bd58:	c022ec18 	.word	0xc022ec18
 800bd5c:	404fd1de 	.word	0x404fd1de

0800bd60 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bd60:	b084      	sub	sp, #16
 800bd62:	b5b0      	push	{r4, r5, r7, lr}
 800bd64:	ed2d 8b02 	vpush	{d8}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bd70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd74:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bd78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	f040 80ac 	bne.w	800beda <turn135inL+0x17a>
		highspeed_mode = 1;
 800bd82:	4bdb      	ldr	r3, [pc, #876]	; (800c0f0 <turn135inL+0x390>)
 800bd84:	2201      	movs	r2, #1
 800bd86:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd98:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bda0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bda4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bda8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bdb0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bdb4:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c0f4 <turn135inL+0x394>
 800bdb8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	eeb0 2a47 	vmov.f32	s4, s14
 800bdc2:	eef0 1a46 	vmov.f32	s3, s12
 800bdc6:	eeb0 1a66 	vmov.f32	s2, s13
 800bdca:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c100 <turn135inL+0x3a0>
 800bdce:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c0f8 <turn135inL+0x398>
 800bdd2:	f7f7 f98b 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bdda:	2302      	movs	r3, #2
 800bddc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdde:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bde2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bde6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bdea:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bdee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdf2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdfa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bdfe:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be02:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c0f4 <turn135inL+0x394>
 800be06:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	eeb0 2a47 	vmov.f32	s4, s14
 800be10:	eef0 1a45 	vmov.f32	s3, s10
 800be14:	eeb0 1a65 	vmov.f32	s2, s11
 800be18:	eef0 0a46 	vmov.f32	s1, s12
 800be1c:	eeb0 0a66 	vmov.f32	s0, s13
 800be20:	f7f7 f964 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800be24:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d10c      	bne.n	800be46 <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800be2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be34:	eeb0 1a47 	vmov.f32	s2, s14
 800be38:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c104 <turn135inL+0x3a4>
 800be3c:	eeb0 0a67 	vmov.f32	s0, s15
 800be40:	f7f8 f846 	bl	8003ed0 <mollifier_slalom_table>
 800be44:	e013      	b.n	800be6e <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800be46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be4e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be52:	eef0 2a66 	vmov.f32	s5, s13
 800be56:	eeb0 2a47 	vmov.f32	s4, s14
 800be5a:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c100 <turn135inL+0x3a0>
 800be5e:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c100 <turn135inL+0x3a0>
 800be62:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c104 <turn135inL+0x3a4>
 800be66:	eeb0 0a67 	vmov.f32	s0, s15
 800be6a:	f7f7 fef1 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800be6e:	2300      	movs	r3, #0
 800be70:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f4 fb8d 	bl	8000598 <__aeabi_f2d>
 800be7e:	a39a      	add	r3, pc, #616	; (adr r3, 800c0e8 <turn135inL+0x388>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 fa2a 	bl	80002dc <__adddf3>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4610      	mov	r0, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	f7f4 feb2 	bl	8000bf8 <__aeabi_d2f>
 800be94:	4603      	mov	r3, r0
 800be96:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be9a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bea2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800beaa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800beae:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800beb2:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c0f4 <turn135inL+0x394>
 800beb6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	eeb0 2a47 	vmov.f32	s4, s14
 800bec0:	eef0 1a46 	vmov.f32	s3, s12
 800bec4:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c100 <turn135inL+0x3a0>
 800bec8:	eef0 0a66 	vmov.f32	s1, s13
 800becc:	ee00 3a10 	vmov	s0, r3
 800bed0:	f7f7 f90c 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800bed4:	4b86      	ldr	r3, [pc, #536]	; (800c0f0 <turn135inL+0x390>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800beda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f040 809b 	bne.w	800c01a <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bee4:	2300      	movs	r3, #0
 800bee6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bee8:	2300      	movs	r3, #0
 800beea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800beec:	2302      	movs	r3, #2
 800beee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bef4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bef8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800befc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bf00:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf10:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bf14:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf18:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c0f4 <turn135inL+0x394>
 800bf1c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	eeb0 2a47 	vmov.f32	s4, s14
 800bf26:	eef0 1a45 	vmov.f32	s3, s10
 800bf2a:	eeb0 1a65 	vmov.f32	s2, s11
 800bf2e:	eef0 0a46 	vmov.f32	s1, s12
 800bf32:	eeb0 0a66 	vmov.f32	s0, s13
 800bf36:	f7f7 f8d9 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800bf3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d10c      	bne.n	800bf5c <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bf42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf4a:	eeb0 1a47 	vmov.f32	s2, s14
 800bf4e:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c104 <turn135inL+0x3a4>
 800bf52:	eeb0 0a67 	vmov.f32	s0, s15
 800bf56:	f7f7 ffbb 	bl	8003ed0 <mollifier_slalom_table>
 800bf5a:	e013      	b.n	800bf84 <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bf5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf64:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf68:	eef0 2a66 	vmov.f32	s5, s13
 800bf6c:	eeb0 2a47 	vmov.f32	s4, s14
 800bf70:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c100 <turn135inL+0x3a0>
 800bf74:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c100 <turn135inL+0x3a0>
 800bf78:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c104 <turn135inL+0x3a4>
 800bf7c:	eeb0 0a67 	vmov.f32	s0, s15
 800bf80:	f7f7 fe66 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bf8c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bf90:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bf94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfa0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bfa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfac:	eef0 7ae7 	vabs.f32	s15, s15
 800bfb0:	ee17 0a90 	vmov	r0, s15
 800bfb4:	f7f4 faf0 	bl	8000598 <__aeabi_f2d>
 800bfb8:	f04f 0200 	mov.w	r2, #0
 800bfbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfc0:	f7f4 fc6c 	bl	800089c <__aeabi_ddiv>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4614      	mov	r4, r2
 800bfca:	461d      	mov	r5, r3
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f4 fae2 	bl	8000598 <__aeabi_f2d>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4620      	mov	r0, r4
 800bfda:	4629      	mov	r1, r5
 800bfdc:	f7f4 fc5e 	bl	800089c <__aeabi_ddiv>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	f04f 0200 	mov.w	r2, #0
 800bfec:	4b43      	ldr	r3, [pc, #268]	; (800c0fc <turn135inL+0x39c>)
 800bfee:	f7f4 f975 	bl	80002dc <__adddf3>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bff6:	4610      	mov	r0, r2
 800bff8:	4619      	mov	r1, r3
 800bffa:	f7f4 fdfd 	bl	8000bf8 <__aeabi_d2f>
 800bffe:	4603      	mov	r3, r0
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	ee02 3a10 	vmov	s4, r3
 800c006:	edd7 1a01 	vldr	s3, [r7, #4]
 800c00a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c00e:	eef0 0a68 	vmov.f32	s1, s17
 800c012:	eeb0 0a48 	vmov.f32	s0, s16
 800c016:	f7f7 f869 	bl	80030ec <straight_table2>

	}
	if (test_mode >= 2) {
 800c01a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c01e:	2b01      	cmp	r3, #1
 800c020:	f240 80ce 	bls.w	800c1c0 <turn135inL+0x460>

		highspeed_mode = 1;
 800c024:	4b32      	ldr	r3, [pc, #200]	; (800c0f0 <turn135inL+0x390>)
 800c026:	2201      	movs	r2, #1
 800c028:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c02a:	2301      	movs	r3, #1
 800c02c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c02e:	2300      	movs	r3, #0
 800c030:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c032:	2300      	movs	r3, #0
 800c034:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c036:	2300      	movs	r3, #0
 800c038:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c03a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c03e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c042:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c046:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c04a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c04e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c052:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c056:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c0f4 <turn135inL+0x394>
 800c05a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	eeb0 2a47 	vmov.f32	s4, s14
 800c064:	eef0 1a46 	vmov.f32	s3, s12
 800c068:	eeb0 1a66 	vmov.f32	s2, s13
 800c06c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c100 <turn135inL+0x3a0>
 800c070:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c0f8 <turn135inL+0x398>
 800c074:	f7f7 f83a 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800c078:	2300      	movs	r3, #0
 800c07a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c07c:	2302      	movs	r3, #2
 800c07e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c080:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c084:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c088:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c08c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c090:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c094:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c09c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c0a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0a4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c0f4 <turn135inL+0x394>
 800c0a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	eeb0 2a47 	vmov.f32	s4, s14
 800c0b2:	eef0 1a45 	vmov.f32	s3, s10
 800c0b6:	eeb0 1a65 	vmov.f32	s2, s11
 800c0ba:	eef0 0a46 	vmov.f32	s1, s12
 800c0be:	eeb0 0a66 	vmov.f32	s0, s13
 800c0c2:	f7f7 f813 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800c0c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d11c      	bne.n	800c108 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c0ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0d6:	eeb0 1a47 	vmov.f32	s2, s14
 800c0da:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c104 <turn135inL+0x3a4>
 800c0de:	eeb0 0a67 	vmov.f32	s0, s15
 800c0e2:	f7f7 fef5 	bl	8003ed0 <mollifier_slalom_table>
 800c0e6:	e023      	b.n	800c130 <turn135inL+0x3d0>
 800c0e8:	c022ec18 	.word	0xc022ec18
 800c0ec:	405fd1de 	.word	0x405fd1de
 800c0f0:	200007e8 	.word	0x200007e8
 800c0f4:	42340000 	.word	0x42340000
 800c0f8:	42da0000 	.word	0x42da0000
 800c0fc:	408f4000 	.word	0x408f4000
 800c100:	00000000 	.word	0x00000000
 800c104:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c108:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c10c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c110:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c114:	eef0 2a66 	vmov.f32	s5, s13
 800c118:	eeb0 2a47 	vmov.f32	s4, s14
 800c11c:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c100 <turn135inL+0x3a0>
 800c120:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c100 <turn135inL+0x3a0>
 800c124:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c104 <turn135inL+0x3a4>
 800c128:	eeb0 0a67 	vmov.f32	s0, s15
 800c12c:	f7f7 fd90 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c130:	2300      	movs	r3, #0
 800c132:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c138:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c13c:	3b02      	subs	r3, #2
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f4 fa18 	bl	8000574 <__aeabi_i2d>
 800c144:	a326      	add	r3, pc, #152	; (adr r3, 800c1e0 <turn135inL+0x480>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f7f4 fa7d 	bl	8000648 <__aeabi_dmul>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	4614      	mov	r4, r2
 800c154:	461d      	mov	r5, r3
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f4 fa1d 	bl	8000598 <__aeabi_f2d>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	4620      	mov	r0, r4
 800c164:	4629      	mov	r1, r5
 800c166:	f7f4 f8b9 	bl	80002dc <__adddf3>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4610      	mov	r0, r2
 800c170:	4619      	mov	r1, r3
 800c172:	f7f4 fd41 	bl	8000bf8 <__aeabi_d2f>
 800c176:	4603      	mov	r3, r0
 800c178:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c17c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c180:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c184:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c188:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c18c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c190:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c194:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c198:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c1d8 <turn135inL+0x478>
 800c19c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	eeb0 2a47 	vmov.f32	s4, s14
 800c1a6:	eef0 1a65 	vmov.f32	s3, s11
 800c1aa:	eeb0 1a46 	vmov.f32	s2, s12
 800c1ae:	eef0 0a66 	vmov.f32	s1, s13
 800c1b2:	ee00 3a10 	vmov	s0, r3
 800c1b6:	f7f6 ff99 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800c1ba:	4b08      	ldr	r3, [pc, #32]	; (800c1dc <turn135inL+0x47c>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
	}

}
 800c1c0:	bf00      	nop
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	ecbd 8b02 	vpop	{d8}
 800c1ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c1ce:	b004      	add	sp, #16
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	f3af 8000 	nop.w
 800c1d8:	42340000 	.word	0x42340000
 800c1dc:	200007e8 	.word	0x200007e8
 800c1e0:	c022ec18 	.word	0xc022ec18
 800c1e4:	404fd1de 	.word	0x404fd1de

0800c1e8 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c1e8:	b084      	sub	sp, #16
 800c1ea:	b5b0      	push	{r4, r5, r7, lr}
 800c1ec:	ed2d 8b02 	vpush	{d8}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c1f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c1fc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c200:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c204:	2b01      	cmp	r3, #1
 800c206:	f040 80a5 	bne.w	800c354 <turn45outR+0x16c>
		highspeed_mode = 1;
 800c20a:	4be9      	ldr	r3, [pc, #932]	; (800c5b0 <turn45outR+0x3c8>)
 800c20c:	2201      	movs	r2, #1
 800c20e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c210:	2300      	movs	r3, #0
 800c212:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c214:	2300      	movs	r3, #0
 800c216:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c220:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c224:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c228:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c22c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c230:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c234:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c238:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c23c:	eddf 5add 	vldr	s11, [pc, #884]	; 800c5b4 <turn45outR+0x3cc>
 800c240:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	eeb0 2a47 	vmov.f32	s4, s14
 800c24a:	eef0 1a46 	vmov.f32	s3, s12
 800c24e:	eeb0 1a66 	vmov.f32	s2, s13
 800c252:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c5b8 <turn45outR+0x3d0>
 800c256:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c5bc <turn45outR+0x3d4>
 800c25a:	f7f6 ff47 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800c25e:	2300      	movs	r3, #0
 800c260:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c262:	2303      	movs	r3, #3
 800c264:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c266:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c26a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c26e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c272:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c276:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c27a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c27e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c282:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c286:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c28a:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c5b4 <turn45outR+0x3cc>
 800c28e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	eeb0 2a47 	vmov.f32	s4, s14
 800c298:	eef0 1a45 	vmov.f32	s3, s10
 800c29c:	eeb0 1a65 	vmov.f32	s2, s11
 800c2a0:	eef0 0a46 	vmov.f32	s1, s12
 800c2a4:	eeb0 0a66 	vmov.f32	s0, s13
 800c2a8:	f7f6 ff20 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800c2ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d10c      	bne.n	800c2ce <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c2b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c2bc:	eeb0 1a47 	vmov.f32	s2, s14
 800c2c0:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c5c0 <turn45outR+0x3d8>
 800c2c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c2c8:	f7f7 fe02 	bl	8003ed0 <mollifier_slalom_table>
 800c2cc:	e015      	b.n	800c2fa <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c2ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c2d6:	eef1 7a67 	vneg.f32	s15, s15
 800c2da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c2de:	eef0 2a66 	vmov.f32	s5, s13
 800c2e2:	eeb0 2a67 	vmov.f32	s4, s15
 800c2e6:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c5b8 <turn45outR+0x3d0>
 800c2ea:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c5b8 <turn45outR+0x3d0>
 800c2ee:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c5c0 <turn45outR+0x3d8>
 800c2f2:	eeb0 0a47 	vmov.f32	s0, s14
 800c2f6:	f7f7 fcab 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c302:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c306:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c5c4 <turn45outR+0x3dc>
 800c30a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c30e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c312:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c316:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c31a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c31e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c322:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c326:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c32a:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c5b4 <turn45outR+0x3cc>
 800c32e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	eeb0 2a47 	vmov.f32	s4, s14
 800c338:	eef0 1a65 	vmov.f32	s3, s11
 800c33c:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c5b8 <turn45outR+0x3d0>
 800c340:	eef0 0a46 	vmov.f32	s1, s12
 800c344:	eeb0 0a66 	vmov.f32	s0, s13
 800c348:	f7f6 fed0 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800c34c:	4b98      	ldr	r3, [pc, #608]	; (800c5b0 <turn45outR+0x3c8>)
 800c34e:	2200      	movs	r2, #0
 800c350:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c352:	e123      	b.n	800c59c <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c354:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c358:	2b01      	cmp	r3, #1
 800c35a:	f240 8082 	bls.w	800c462 <turn45outR+0x27a>
		highspeed_mode = 1;
 800c35e:	4b94      	ldr	r3, [pc, #592]	; (800c5b0 <turn45outR+0x3c8>)
 800c360:	2201      	movs	r2, #1
 800c362:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c364:	2300      	movs	r3, #0
 800c366:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c368:	2300      	movs	r3, #0
 800c36a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c36c:	2303      	movs	r3, #3
 800c36e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c370:	2300      	movs	r3, #0
 800c372:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c374:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c378:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c37c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c380:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c384:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c388:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c38c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c390:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c394:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c398:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c5b4 <turn45outR+0x3cc>
 800c39c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	eeb0 2a47 	vmov.f32	s4, s14
 800c3a6:	eef0 1a45 	vmov.f32	s3, s10
 800c3aa:	eeb0 1a65 	vmov.f32	s2, s11
 800c3ae:	eef0 0a46 	vmov.f32	s1, s12
 800c3b2:	eeb0 0a66 	vmov.f32	s0, s13
 800c3b6:	f7f6 fe99 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800c3ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d10c      	bne.n	800c3dc <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c3c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3ca:	eeb0 1a47 	vmov.f32	s2, s14
 800c3ce:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c5c0 <turn45outR+0x3d8>
 800c3d2:	eeb0 0a67 	vmov.f32	s0, s15
 800c3d6:	f7f7 fd7b 	bl	8003ed0 <mollifier_slalom_table>
 800c3da:	e015      	b.n	800c408 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c3dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c3e4:	eef1 7a67 	vneg.f32	s15, s15
 800c3e8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c3ec:	eef0 2a66 	vmov.f32	s5, s13
 800c3f0:	eeb0 2a67 	vmov.f32	s4, s15
 800c3f4:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c5b8 <turn45outR+0x3d0>
 800c3f8:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c5b8 <turn45outR+0x3d0>
 800c3fc:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c5c0 <turn45outR+0x3d8>
 800c400:	eeb0 0a47 	vmov.f32	s0, s14
 800c404:	f7f7 fc24 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=0;
 800c408:	2300      	movs	r3, #0
 800c40a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c410:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c414:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c5c4 <turn45outR+0x3dc>
 800c418:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c41c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c420:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c424:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c428:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c42c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c430:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c434:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c438:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c5b4 <turn45outR+0x3cc>
 800c43c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	eeb0 2a47 	vmov.f32	s4, s14
 800c446:	eef0 1a65 	vmov.f32	s3, s11
 800c44a:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c5b8 <turn45outR+0x3d0>
 800c44e:	eef0 0a46 	vmov.f32	s1, s12
 800c452:	eeb0 0a66 	vmov.f32	s0, s13
 800c456:	f7f6 fe49 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800c45a:	4b55      	ldr	r3, [pc, #340]	; (800c5b0 <turn45outR+0x3c8>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	701a      	strb	r2, [r3, #0]
}
 800c460:	e09c      	b.n	800c59c <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c462:	2300      	movs	r3, #0
 800c464:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c466:	2300      	movs	r3, #0
 800c468:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c46a:	2303      	movs	r3, #3
 800c46c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c46e:	2300      	movs	r3, #0
 800c470:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c472:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c476:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c47a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c47e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c482:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c486:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c48a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c48e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c492:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c496:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c5b4 <turn45outR+0x3cc>
 800c49a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	eeb0 2a47 	vmov.f32	s4, s14
 800c4a4:	eef0 1a45 	vmov.f32	s3, s10
 800c4a8:	eeb0 1a65 	vmov.f32	s2, s11
 800c4ac:	eef0 0a46 	vmov.f32	s1, s12
 800c4b0:	eeb0 0a66 	vmov.f32	s0, s13
 800c4b4:	f7f6 fe1a 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800c4b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d10c      	bne.n	800c4da <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c4c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c4c8:	eeb0 1a47 	vmov.f32	s2, s14
 800c4cc:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c5c0 <turn45outR+0x3d8>
 800c4d0:	eeb0 0a67 	vmov.f32	s0, s15
 800c4d4:	f7f7 fcfc 	bl	8003ed0 <mollifier_slalom_table>
 800c4d8:	e015      	b.n	800c506 <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c4da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c4e2:	eef1 7a67 	vneg.f32	s15, s15
 800c4e6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c4ea:	eef0 2a66 	vmov.f32	s5, s13
 800c4ee:	eeb0 2a67 	vmov.f32	s4, s15
 800c4f2:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c5b8 <turn45outR+0x3d0>
 800c4f6:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c5b8 <turn45outR+0x3d0>
 800c4fa:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c5c0 <turn45outR+0x3d8>
 800c4fe:	eeb0 0a47 	vmov.f32	s0, s14
 800c502:	f7f7 fba5 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c506:	2301      	movs	r3, #1
 800c508:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c50e:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c512:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c516:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c51a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c51e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c522:	edd7 7a01 	vldr	s15, [r7, #4]
 800c526:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c52a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c52e:	eef0 7ae7 	vabs.f32	s15, s15
 800c532:	ee17 0a90 	vmov	r0, s15
 800c536:	f7f4 f82f 	bl	8000598 <__aeabi_f2d>
 800c53a:	f04f 0200 	mov.w	r2, #0
 800c53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c542:	f7f4 f9ab 	bl	800089c <__aeabi_ddiv>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4614      	mov	r4, r2
 800c54c:	461d      	mov	r5, r3
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	4618      	mov	r0, r3
 800c552:	f7f4 f821 	bl	8000598 <__aeabi_f2d>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f4 f99d 	bl	800089c <__aeabi_ddiv>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4610      	mov	r0, r2
 800c568:	4619      	mov	r1, r3
 800c56a:	f04f 0200 	mov.w	r2, #0
 800c56e:	4b16      	ldr	r3, [pc, #88]	; (800c5c8 <turn45outR+0x3e0>)
 800c570:	f7f3 feb4 	bl	80002dc <__adddf3>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c578:	4610      	mov	r0, r2
 800c57a:	4619      	mov	r1, r3
 800c57c:	f7f4 fb3c 	bl	8000bf8 <__aeabi_d2f>
 800c580:	4603      	mov	r3, r0
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	ee02 3a10 	vmov	s4, r3
 800c588:	edd7 1a01 	vldr	s3, [r7, #4]
 800c58c:	ed97 1a01 	vldr	s2, [r7, #4]
 800c590:	eef0 0a68 	vmov.f32	s1, s17
 800c594:	eeb0 0a48 	vmov.f32	s0, s16
 800c598:	f7f6 fda8 	bl	80030ec <straight_table2>
}
 800c59c:	bf00      	nop
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	ecbd 8b02 	vpop	{d8}
 800c5a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c5aa:	b004      	add	sp, #16
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	200007e8 	.word	0x200007e8
 800c5b4:	42340000 	.word	0x42340000
 800c5b8:	00000000 	.word	0x00000000
 800c5bc:	42d3477b 	.word	0x42d3477b
 800c5c0:	c2340000 	.word	0xc2340000
 800c5c4:	42b40000 	.word	0x42b40000
 800c5c8:	408f4000 	.word	0x408f4000

0800c5cc <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	b5b0      	push	{r4, r5, r7, lr}
 800c5d0:	ed2d 8b02 	vpush	{d8}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c5dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c5e0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c5e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	f040 80a3 	bne.w	800c734 <turn45outL+0x168>
			highspeed_mode = 1;
 800c5ee:	4be5      	ldr	r3, [pc, #916]	; (800c984 <turn45outL+0x3b8>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c600:	2300      	movs	r3, #0
 800c602:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c604:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c608:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c60c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c610:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c614:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c618:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c61c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c620:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800c988 <turn45outL+0x3bc>
 800c624:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	eeb0 2a47 	vmov.f32	s4, s14
 800c62e:	eef0 1a46 	vmov.f32	s3, s12
 800c632:	eeb0 1a66 	vmov.f32	s2, s13
 800c636:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800c98c <turn45outL+0x3c0>
 800c63a:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800c990 <turn45outL+0x3c4>
 800c63e:	f7f6 fd55 	bl	80030ec <straight_table2>
			wallmode.WallControlMode=0;
 800c642:	2300      	movs	r3, #0
 800c644:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c646:	2304      	movs	r3, #4
 800c648:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c64a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c64e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c652:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c656:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c65a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c65e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c662:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c666:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c66a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c66e:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800c988 <turn45outL+0x3bc>
 800c672:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	eeb0 2a47 	vmov.f32	s4, s14
 800c67c:	eef0 1a45 	vmov.f32	s3, s10
 800c680:	eeb0 1a65 	vmov.f32	s2, s11
 800c684:	eef0 0a46 	vmov.f32	s1, s12
 800c688:	eeb0 0a66 	vmov.f32	s0, s13
 800c68c:	f7f6 fd2e 	bl	80030ec <straight_table2>
			if(mollifier_mode == ON){
 800c690:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c694:	2b01      	cmp	r3, #1
 800c696:	d10c      	bne.n	800c6b2 <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c698:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c69c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c6a0:	eeb0 1a47 	vmov.f32	s2, s14
 800c6a4:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800c988 <turn45outL+0x3bc>
 800c6a8:	eeb0 0a67 	vmov.f32	s0, s15
 800c6ac:	f7f7 fc10 	bl	8003ed0 <mollifier_slalom_table>
 800c6b0:	e013      	b.n	800c6da <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c6b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c6ba:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c6be:	eef0 2a66 	vmov.f32	s5, s13
 800c6c2:	eeb0 2a47 	vmov.f32	s4, s14
 800c6c6:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800c98c <turn45outL+0x3c0>
 800c6ca:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800c98c <turn45outL+0x3c0>
 800c6ce:	eddf 0aae 	vldr	s1, [pc, #696]	; 800c988 <turn45outL+0x3bc>
 800c6d2:	eeb0 0a67 	vmov.f32	s0, s15
 800c6d6:	f7f7 fabb 	bl	8003c50 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6e6:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c994 <turn45outL+0x3c8>
 800c6ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c6ee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6f2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c702:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c706:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c70a:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800c988 <turn45outL+0x3bc>
 800c70e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	eeb0 2a47 	vmov.f32	s4, s14
 800c718:	eef0 1a65 	vmov.f32	s3, s11
 800c71c:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800c98c <turn45outL+0x3c0>
 800c720:	eef0 0a46 	vmov.f32	s1, s12
 800c724:	eeb0 0a66 	vmov.f32	s0, s13
 800c728:	f7f6 fce0 	bl	80030ec <straight_table2>
			highspeed_mode = 0;
 800c72c:	4b95      	ldr	r3, [pc, #596]	; (800c984 <turn45outL+0x3b8>)
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c732:	e11e      	b.n	800c972 <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c734:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d97f      	bls.n	800c83c <turn45outL+0x270>
		highspeed_mode = 1;
 800c73c:	4b91      	ldr	r3, [pc, #580]	; (800c984 <turn45outL+0x3b8>)
 800c73e:	2201      	movs	r2, #1
 800c740:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c742:	2300      	movs	r3, #0
 800c744:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c746:	2300      	movs	r3, #0
 800c748:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c74a:	2304      	movs	r3, #4
 800c74c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c74e:	2300      	movs	r3, #0
 800c750:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c752:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c756:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c75a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c75e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c762:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c766:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c76a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c76e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c772:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c776:	eddf 4a84 	vldr	s9, [pc, #528]	; 800c988 <turn45outL+0x3bc>
 800c77a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	eeb0 2a47 	vmov.f32	s4, s14
 800c784:	eef0 1a45 	vmov.f32	s3, s10
 800c788:	eeb0 1a65 	vmov.f32	s2, s11
 800c78c:	eef0 0a46 	vmov.f32	s1, s12
 800c790:	eeb0 0a66 	vmov.f32	s0, s13
 800c794:	f7f6 fcaa 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800c798:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d10c      	bne.n	800c7ba <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c7a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7a4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7a8:	eeb0 1a47 	vmov.f32	s2, s14
 800c7ac:	eddf 0a76 	vldr	s1, [pc, #472]	; 800c988 <turn45outL+0x3bc>
 800c7b0:	eeb0 0a67 	vmov.f32	s0, s15
 800c7b4:	f7f7 fb8c 	bl	8003ed0 <mollifier_slalom_table>
 800c7b8:	e013      	b.n	800c7e2 <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c7ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c7c6:	eef0 2a66 	vmov.f32	s5, s13
 800c7ca:	eeb0 2a47 	vmov.f32	s4, s14
 800c7ce:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800c98c <turn45outL+0x3c0>
 800c7d2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800c98c <turn45outL+0x3c0>
 800c7d6:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800c988 <turn45outL+0x3bc>
 800c7da:	eeb0 0a67 	vmov.f32	s0, s15
 800c7de:	f7f7 fa37 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c7ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c7ee:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800c994 <turn45outL+0x3c8>
 800c7f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c7f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c802:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c80a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c80e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c812:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800c988 <turn45outL+0x3bc>
 800c816:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	eeb0 2a47 	vmov.f32	s4, s14
 800c820:	eef0 1a65 	vmov.f32	s3, s11
 800c824:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800c98c <turn45outL+0x3c0>
 800c828:	eef0 0a46 	vmov.f32	s1, s12
 800c82c:	eeb0 0a66 	vmov.f32	s0, s13
 800c830:	f7f6 fc5c 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800c834:	4b53      	ldr	r3, [pc, #332]	; (800c984 <turn45outL+0x3b8>)
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
}
 800c83a:	e09a      	b.n	800c972 <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c83c:	2300      	movs	r3, #0
 800c83e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c840:	2300      	movs	r3, #0
 800c842:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c844:	2304      	movs	r3, #4
 800c846:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c848:	2300      	movs	r3, #0
 800c84a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c84c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c850:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c854:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c858:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c85c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c860:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c864:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c868:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c86c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c870:	eddf 4a45 	vldr	s9, [pc, #276]	; 800c988 <turn45outL+0x3bc>
 800c874:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	eeb0 2a47 	vmov.f32	s4, s14
 800c87e:	eef0 1a45 	vmov.f32	s3, s10
 800c882:	eeb0 1a65 	vmov.f32	s2, s11
 800c886:	eef0 0a46 	vmov.f32	s1, s12
 800c88a:	eeb0 0a66 	vmov.f32	s0, s13
 800c88e:	f7f6 fc2d 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800c892:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c896:	2b01      	cmp	r3, #1
 800c898:	d10c      	bne.n	800c8b4 <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c89a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c89e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c8a2:	eeb0 1a47 	vmov.f32	s2, s14
 800c8a6:	eddf 0a38 	vldr	s1, [pc, #224]	; 800c988 <turn45outL+0x3bc>
 800c8aa:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ae:	f7f7 fb0f 	bl	8003ed0 <mollifier_slalom_table>
 800c8b2:	e013      	b.n	800c8dc <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c8b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c8bc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c8c0:	eef0 2a66 	vmov.f32	s5, s13
 800c8c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c8c8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800c98c <turn45outL+0x3c0>
 800c8cc:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800c98c <turn45outL+0x3c0>
 800c8d0:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800c988 <turn45outL+0x3bc>
 800c8d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c8d8:	f7f7 f9ba 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c8e4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c8e8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c8ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c900:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c904:	eef0 7ae7 	vabs.f32	s15, s15
 800c908:	ee17 0a90 	vmov	r0, s15
 800c90c:	f7f3 fe44 	bl	8000598 <__aeabi_f2d>
 800c910:	f04f 0200 	mov.w	r2, #0
 800c914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c918:	f7f3 ffc0 	bl	800089c <__aeabi_ddiv>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4614      	mov	r4, r2
 800c922:	461d      	mov	r5, r3
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	4618      	mov	r0, r3
 800c928:	f7f3 fe36 	bl	8000598 <__aeabi_f2d>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4620      	mov	r0, r4
 800c932:	4629      	mov	r1, r5
 800c934:	f7f3 ffb2 	bl	800089c <__aeabi_ddiv>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4610      	mov	r0, r2
 800c93e:	4619      	mov	r1, r3
 800c940:	f04f 0200 	mov.w	r2, #0
 800c944:	4b14      	ldr	r3, [pc, #80]	; (800c998 <turn45outL+0x3cc>)
 800c946:	f7f3 fcc9 	bl	80002dc <__adddf3>
 800c94a:	4602      	mov	r2, r0
 800c94c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c94e:	4610      	mov	r0, r2
 800c950:	4619      	mov	r1, r3
 800c952:	f7f4 f951 	bl	8000bf8 <__aeabi_d2f>
 800c956:	4603      	mov	r3, r0
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	ee02 3a10 	vmov	s4, r3
 800c95e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c962:	ed97 1a01 	vldr	s2, [r7, #4]
 800c966:	eef0 0a68 	vmov.f32	s1, s17
 800c96a:	eeb0 0a48 	vmov.f32	s0, s16
 800c96e:	f7f6 fbbd 	bl	80030ec <straight_table2>
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	ecbd 8b02 	vpop	{d8}
 800c97c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c980:	b004      	add	sp, #16
 800c982:	4770      	bx	lr
 800c984:	200007e8 	.word	0x200007e8
 800c988:	42340000 	.word	0x42340000
 800c98c:	00000000 	.word	0x00000000
 800c990:	42d3477b 	.word	0x42d3477b
 800c994:	42b40000 	.word	0x42b40000
 800c998:	408f4000 	.word	0x408f4000

0800c99c <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c99c:	b084      	sub	sp, #16
 800c99e:	b5b0      	push	{r4, r5, r7, lr}
 800c9a0:	ed2d 8b02 	vpush	{d8}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c9ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c9b0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c9b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	f040 80a5 	bne.w	800cb08 <turn135outR+0x16c>
			highspeed_mode = 1;
 800c9be:	4be9      	ldr	r3, [pc, #932]	; (800cd64 <turn135outR+0x3c8>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c9d4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c9d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9e8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c9ec:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c9f0:	eddf 5add 	vldr	s11, [pc, #884]	; 800cd68 <turn135outR+0x3cc>
 800c9f4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	eeb0 2a47 	vmov.f32	s4, s14
 800c9fe:	eef0 1a46 	vmov.f32	s3, s12
 800ca02:	eeb0 1a66 	vmov.f32	s2, s13
 800ca06:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cd6c <turn135outR+0x3d0>
 800ca0a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cd70 <turn135outR+0x3d4>
 800ca0e:	f7f6 fb6d 	bl	80030ec <straight_table2>
			wallmode.WallControlMode=0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800ca16:	2303      	movs	r3, #3
 800ca18:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca1a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ca1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca22:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ca26:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca36:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ca3a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca3e:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cd68 <turn135outR+0x3cc>
 800ca42:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	eeb0 2a47 	vmov.f32	s4, s14
 800ca4c:	eef0 1a45 	vmov.f32	s3, s10
 800ca50:	eeb0 1a65 	vmov.f32	s2, s11
 800ca54:	eef0 0a46 	vmov.f32	s1, s12
 800ca58:	eeb0 0a66 	vmov.f32	s0, s13
 800ca5c:	f7f6 fb46 	bl	80030ec <straight_table2>
			if(mollifier_mode == ON){
 800ca60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d10c      	bne.n	800ca82 <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ca68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca6c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca70:	eeb0 1a47 	vmov.f32	s2, s14
 800ca74:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cd74 <turn135outR+0x3d8>
 800ca78:	eeb0 0a67 	vmov.f32	s0, s15
 800ca7c:	f7f7 fa28 	bl	8003ed0 <mollifier_slalom_table>
 800ca80:	e015      	b.n	800caae <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ca82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca86:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ca8a:	eef1 7a67 	vneg.f32	s15, s15
 800ca8e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca92:	eef0 2a66 	vmov.f32	s5, s13
 800ca96:	eeb0 2a67 	vmov.f32	s4, s15
 800ca9a:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cd6c <turn135outR+0x3d0>
 800ca9e:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cd6c <turn135outR+0x3d0>
 800caa2:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cd74 <turn135outR+0x3d8>
 800caa6:	eeb0 0a47 	vmov.f32	s0, s14
 800caaa:	f7f7 f8d1 	bl	8003c50 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800caae:	2300      	movs	r3, #0
 800cab0:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cab6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800caba:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cd78 <turn135outR+0x3dc>
 800cabe:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cac2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cac6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800caca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cace:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cad6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cada:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cade:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cd68 <turn135outR+0x3cc>
 800cae2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	eeb0 2a47 	vmov.f32	s4, s14
 800caec:	eef0 1a65 	vmov.f32	s3, s11
 800caf0:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cd6c <turn135outR+0x3d0>
 800caf4:	eef0 0a46 	vmov.f32	s1, s12
 800caf8:	eeb0 0a66 	vmov.f32	s0, s13
 800cafc:	f7f6 faf6 	bl	80030ec <straight_table2>
			highspeed_mode = 0;
 800cb00:	4b98      	ldr	r3, [pc, #608]	; (800cd64 <turn135outR+0x3c8>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cb06:	e123      	b.n	800cd50 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cb08:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	f240 8082 	bls.w	800cc16 <turn135outR+0x27a>
		highspeed_mode = 1;
 800cb12:	4b94      	ldr	r3, [pc, #592]	; (800cd64 <turn135outR+0x3c8>)
 800cb14:	2201      	movs	r2, #1
 800cb16:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cb20:	2303      	movs	r3, #3
 800cb22:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb30:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb34:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb44:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb48:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb4c:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cd68 <turn135outR+0x3cc>
 800cb50:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	eeb0 2a47 	vmov.f32	s4, s14
 800cb5a:	eef0 1a45 	vmov.f32	s3, s10
 800cb5e:	eeb0 1a65 	vmov.f32	s2, s11
 800cb62:	eef0 0a46 	vmov.f32	s1, s12
 800cb66:	eeb0 0a66 	vmov.f32	s0, s13
 800cb6a:	f7f6 fabf 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800cb6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d10c      	bne.n	800cb90 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cb76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb7e:	eeb0 1a47 	vmov.f32	s2, s14
 800cb82:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cd74 <turn135outR+0x3d8>
 800cb86:	eeb0 0a67 	vmov.f32	s0, s15
 800cb8a:	f7f7 f9a1 	bl	8003ed0 <mollifier_slalom_table>
 800cb8e:	e015      	b.n	800cbbc <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cb90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cb98:	eef1 7a67 	vneg.f32	s15, s15
 800cb9c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cba0:	eef0 2a66 	vmov.f32	s5, s13
 800cba4:	eeb0 2a67 	vmov.f32	s4, s15
 800cba8:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cd6c <turn135outR+0x3d0>
 800cbac:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cd6c <turn135outR+0x3d0>
 800cbb0:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cd74 <turn135outR+0x3d8>
 800cbb4:	eeb0 0a47 	vmov.f32	s0, s14
 800cbb8:	f7f7 f84a 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cbc4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cbc8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cd78 <turn135outR+0x3dc>
 800cbcc:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cbd0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cbd4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cbd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbe4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cbe8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cbec:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cd68 <turn135outR+0x3cc>
 800cbf0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	eeb0 2a47 	vmov.f32	s4, s14
 800cbfa:	eef0 1a65 	vmov.f32	s3, s11
 800cbfe:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cd6c <turn135outR+0x3d0>
 800cc02:	eef0 0a46 	vmov.f32	s1, s12
 800cc06:	eeb0 0a66 	vmov.f32	s0, s13
 800cc0a:	f7f6 fa6f 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800cc0e:	4b55      	ldr	r3, [pc, #340]	; (800cd64 <turn135outR+0x3c8>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	701a      	strb	r2, [r3, #0]
}
 800cc14:	e09c      	b.n	800cd50 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cc16:	2300      	movs	r3, #0
 800cc18:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cc1e:	2303      	movs	r3, #3
 800cc20:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc32:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc42:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cc46:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc4a:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cd68 <turn135outR+0x3cc>
 800cc4e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	eeb0 2a47 	vmov.f32	s4, s14
 800cc58:	eef0 1a45 	vmov.f32	s3, s10
 800cc5c:	eeb0 1a65 	vmov.f32	s2, s11
 800cc60:	eef0 0a46 	vmov.f32	s1, s12
 800cc64:	eeb0 0a66 	vmov.f32	s0, s13
 800cc68:	f7f6 fa40 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800cc6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d10c      	bne.n	800cc8e <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cc74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cc7c:	eeb0 1a47 	vmov.f32	s2, s14
 800cc80:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cd74 <turn135outR+0x3d8>
 800cc84:	eeb0 0a67 	vmov.f32	s0, s15
 800cc88:	f7f7 f922 	bl	8003ed0 <mollifier_slalom_table>
 800cc8c:	e015      	b.n	800ccba <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cc8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cc96:	eef1 7a67 	vneg.f32	s15, s15
 800cc9a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cc9e:	eef0 2a66 	vmov.f32	s5, s13
 800cca2:	eeb0 2a67 	vmov.f32	s4, s15
 800cca6:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cd6c <turn135outR+0x3d0>
 800ccaa:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cd6c <turn135outR+0x3d0>
 800ccae:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cd74 <turn135outR+0x3d8>
 800ccb2:	eeb0 0a47 	vmov.f32	s0, s14
 800ccb6:	f7f6 ffcb 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ccc2:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ccc6:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ccca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd6:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ccde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cce2:	eef0 7ae7 	vabs.f32	s15, s15
 800cce6:	ee17 0a90 	vmov	r0, s15
 800ccea:	f7f3 fc55 	bl	8000598 <__aeabi_f2d>
 800ccee:	f04f 0200 	mov.w	r2, #0
 800ccf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccf6:	f7f3 fdd1 	bl	800089c <__aeabi_ddiv>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4614      	mov	r4, r2
 800cd00:	461d      	mov	r5, r3
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7f3 fc47 	bl	8000598 <__aeabi_f2d>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4620      	mov	r0, r4
 800cd10:	4629      	mov	r1, r5
 800cd12:	f7f3 fdc3 	bl	800089c <__aeabi_ddiv>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	f04f 0200 	mov.w	r2, #0
 800cd22:	4b16      	ldr	r3, [pc, #88]	; (800cd7c <turn135outR+0x3e0>)
 800cd24:	f7f3 fada 	bl	80002dc <__adddf3>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4619      	mov	r1, r3
 800cd30:	f7f3 ff62 	bl	8000bf8 <__aeabi_d2f>
 800cd34:	4603      	mov	r3, r0
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	ee02 3a10 	vmov	s4, r3
 800cd3c:	edd7 1a01 	vldr	s3, [r7, #4]
 800cd40:	ed97 1a01 	vldr	s2, [r7, #4]
 800cd44:	eef0 0a68 	vmov.f32	s1, s17
 800cd48:	eeb0 0a48 	vmov.f32	s0, s16
 800cd4c:	f7f6 f9ce 	bl	80030ec <straight_table2>
}
 800cd50:	bf00      	nop
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	ecbd 8b02 	vpop	{d8}
 800cd5a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cd5e:	b004      	add	sp, #16
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	200007e8 	.word	0x200007e8
 800cd68:	42340000 	.word	0x42340000
 800cd6c:	00000000 	.word	0x00000000
 800cd70:	42d3477b 	.word	0x42d3477b
 800cd74:	c3070000 	.word	0xc3070000
 800cd78:	42b40000 	.word	0x42b40000
 800cd7c:	408f4000 	.word	0x408f4000

0800cd80 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cd80:	b084      	sub	sp, #16
 800cd82:	b5b0      	push	{r4, r5, r7, lr}
 800cd84:	ed2d 8b02 	vpush	{d8}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cd90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cd94:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cd98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	f040 80a3 	bne.w	800cee8 <turn135outL+0x168>
		highspeed_mode = 1;
 800cda2:	4be5      	ldr	r3, [pc, #916]	; (800d138 <turn135outL+0x3b8>)
 800cda4:	2201      	movs	r2, #1
 800cda6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cdb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cdbc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdcc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cdd0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cdd4:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d13c <turn135outL+0x3bc>
 800cdd8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	eeb0 2a47 	vmov.f32	s4, s14
 800cde2:	eef0 1a46 	vmov.f32	s3, s12
 800cde6:	eeb0 1a66 	vmov.f32	s2, s13
 800cdea:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d140 <turn135outL+0x3c0>
 800cdee:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d144 <turn135outL+0x3c4>
 800cdf2:	f7f6 f97b 	bl	80030ec <straight_table2>
		wallmode.WallControlMode=0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800cdfa:	2304      	movs	r3, #4
 800cdfc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdfe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ce02:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce06:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ce0a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce1a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ce1e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce22:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d13c <turn135outL+0x3bc>
 800ce26:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	eeb0 2a47 	vmov.f32	s4, s14
 800ce30:	eef0 1a45 	vmov.f32	s3, s10
 800ce34:	eeb0 1a65 	vmov.f32	s2, s11
 800ce38:	eef0 0a46 	vmov.f32	s1, s12
 800ce3c:	eeb0 0a66 	vmov.f32	s0, s13
 800ce40:	f7f6 f954 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800ce44:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d10c      	bne.n	800ce66 <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ce4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce54:	eeb0 1a47 	vmov.f32	s2, s14
 800ce58:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d148 <turn135outL+0x3c8>
 800ce5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ce60:	f7f7 f836 	bl	8003ed0 <mollifier_slalom_table>
 800ce64:	e013      	b.n	800ce8e <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ce66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce6e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce72:	eef0 2a66 	vmov.f32	s5, s13
 800ce76:	eeb0 2a47 	vmov.f32	s4, s14
 800ce7a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d140 <turn135outL+0x3c0>
 800ce7e:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d140 <turn135outL+0x3c0>
 800ce82:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d148 <turn135outL+0x3c8>
 800ce86:	eeb0 0a67 	vmov.f32	s0, s15
 800ce8a:	f7f6 fee1 	bl	8003c50 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce9a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d14c <turn135outL+0x3cc>
 800ce9e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cea2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cea6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ceaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ceae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ceb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceb6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ceba:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cebe:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d13c <turn135outL+0x3bc>
 800cec2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	eeb0 2a47 	vmov.f32	s4, s14
 800cecc:	eef0 1a65 	vmov.f32	s3, s11
 800ced0:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d140 <turn135outL+0x3c0>
 800ced4:	eef0 0a46 	vmov.f32	s1, s12
 800ced8:	eeb0 0a66 	vmov.f32	s0, s13
 800cedc:	f7f6 f906 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800cee0:	4b95      	ldr	r3, [pc, #596]	; (800d138 <turn135outL+0x3b8>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cee6:	e11e      	b.n	800d126 <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800cee8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d97f      	bls.n	800cff0 <turn135outL+0x270>
		highspeed_mode = 1;
 800cef0:	4b91      	ldr	r3, [pc, #580]	; (800d138 <turn135outL+0x3b8>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cefe:	2304      	movs	r3, #4
 800cf00:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf06:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cf0a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf0e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cf12:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf16:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf22:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf26:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf2a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d13c <turn135outL+0x3bc>
 800cf2e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	eeb0 2a47 	vmov.f32	s4, s14
 800cf38:	eef0 1a45 	vmov.f32	s3, s10
 800cf3c:	eeb0 1a65 	vmov.f32	s2, s11
 800cf40:	eef0 0a46 	vmov.f32	s1, s12
 800cf44:	eeb0 0a66 	vmov.f32	s0, s13
 800cf48:	f7f6 f8d0 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800cf4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d10c      	bne.n	800cf6e <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cf54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf58:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf5c:	eeb0 1a47 	vmov.f32	s2, s14
 800cf60:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d148 <turn135outL+0x3c8>
 800cf64:	eeb0 0a67 	vmov.f32	s0, s15
 800cf68:	f7f6 ffb2 	bl	8003ed0 <mollifier_slalom_table>
 800cf6c:	e013      	b.n	800cf96 <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cf6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf72:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf76:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf7a:	eef0 2a66 	vmov.f32	s5, s13
 800cf7e:	eeb0 2a47 	vmov.f32	s4, s14
 800cf82:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d140 <turn135outL+0x3c0>
 800cf86:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d140 <turn135outL+0x3c0>
 800cf8a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d148 <turn135outL+0x3c8>
 800cf8e:	eeb0 0a67 	vmov.f32	s0, s15
 800cf92:	f7f6 fe5d 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cf9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cfa2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d14c <turn135outL+0x3cc>
 800cfa6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cfaa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cfae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cfb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfbe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cfc2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cfc6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d13c <turn135outL+0x3bc>
 800cfca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	eeb0 2a47 	vmov.f32	s4, s14
 800cfd4:	eef0 1a65 	vmov.f32	s3, s11
 800cfd8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d140 <turn135outL+0x3c0>
 800cfdc:	eef0 0a46 	vmov.f32	s1, s12
 800cfe0:	eeb0 0a66 	vmov.f32	s0, s13
 800cfe4:	f7f6 f882 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800cfe8:	4b53      	ldr	r3, [pc, #332]	; (800d138 <turn135outL+0x3b8>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	701a      	strb	r2, [r3, #0]
}
 800cfee:	e09a      	b.n	800d126 <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cff0:	2300      	movs	r3, #0
 800cff2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cff4:	2300      	movs	r3, #0
 800cff6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cff8:	2304      	movs	r3, #4
 800cffa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d000:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d004:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d008:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d00c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d010:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d014:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d01c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d020:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d024:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d13c <turn135outL+0x3bc>
 800d028:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	eeb0 2a47 	vmov.f32	s4, s14
 800d032:	eef0 1a45 	vmov.f32	s3, s10
 800d036:	eeb0 1a65 	vmov.f32	s2, s11
 800d03a:	eef0 0a46 	vmov.f32	s1, s12
 800d03e:	eeb0 0a66 	vmov.f32	s0, s13
 800d042:	f7f6 f853 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800d046:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d10c      	bne.n	800d068 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d04e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d052:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d056:	eeb0 1a47 	vmov.f32	s2, s14
 800d05a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d148 <turn135outL+0x3c8>
 800d05e:	eeb0 0a67 	vmov.f32	s0, s15
 800d062:	f7f6 ff35 	bl	8003ed0 <mollifier_slalom_table>
 800d066:	e013      	b.n	800d090 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d068:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d06c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d070:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d074:	eef0 2a66 	vmov.f32	s5, s13
 800d078:	eeb0 2a47 	vmov.f32	s4, s14
 800d07c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d140 <turn135outL+0x3c0>
 800d080:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d140 <turn135outL+0x3c0>
 800d084:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d148 <turn135outL+0x3c8>
 800d088:	eeb0 0a67 	vmov.f32	s0, s15
 800d08c:	f7f6 fde0 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d090:	2301      	movs	r3, #1
 800d092:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d098:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d09c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d0a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0ac:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0b8:	eef0 7ae7 	vabs.f32	s15, s15
 800d0bc:	ee17 0a90 	vmov	r0, s15
 800d0c0:	f7f3 fa6a 	bl	8000598 <__aeabi_f2d>
 800d0c4:	f04f 0200 	mov.w	r2, #0
 800d0c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0cc:	f7f3 fbe6 	bl	800089c <__aeabi_ddiv>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	461d      	mov	r5, r3
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f3 fa5c 	bl	8000598 <__aeabi_f2d>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	f7f3 fbd8 	bl	800089c <__aeabi_ddiv>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	f04f 0200 	mov.w	r2, #0
 800d0f8:	4b15      	ldr	r3, [pc, #84]	; (800d150 <turn135outL+0x3d0>)
 800d0fa:	f7f3 f8ef 	bl	80002dc <__adddf3>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d102:	4610      	mov	r0, r2
 800d104:	4619      	mov	r1, r3
 800d106:	f7f3 fd77 	bl	8000bf8 <__aeabi_d2f>
 800d10a:	4603      	mov	r3, r0
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	ee02 3a10 	vmov	s4, r3
 800d112:	edd7 1a01 	vldr	s3, [r7, #4]
 800d116:	ed97 1a01 	vldr	s2, [r7, #4]
 800d11a:	eef0 0a68 	vmov.f32	s1, s17
 800d11e:	eeb0 0a48 	vmov.f32	s0, s16
 800d122:	f7f5 ffe3 	bl	80030ec <straight_table2>
}
 800d126:	bf00      	nop
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	ecbd 8b02 	vpop	{d8}
 800d130:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d134:	b004      	add	sp, #16
 800d136:	4770      	bx	lr
 800d138:	200007e8 	.word	0x200007e8
 800d13c:	42340000 	.word	0x42340000
 800d140:	00000000 	.word	0x00000000
 800d144:	42d3477b 	.word	0x42d3477b
 800d148:	43070000 	.word	0x43070000
 800d14c:	42b40000 	.word	0x42b40000
 800d150:	408f4000 	.word	0x408f4000
 800d154:	00000000 	.word	0x00000000

0800d158 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d158:	b084      	sub	sp, #16
 800d15a:	b5b0      	push	{r4, r5, r7, lr}
 800d15c:	ed2d 8b02 	vpush	{d8}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d16c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d170:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d174:	2b01      	cmp	r3, #1
 800d176:	f040 80af 	bne.w	800d2d8 <V90R+0x180>
			highspeed_mode = 1;
 800d17a:	4bc1      	ldr	r3, [pc, #772]	; (800d480 <V90R+0x328>)
 800d17c:	2201      	movs	r2, #1
 800d17e:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d180:	2300      	movs	r3, #0
 800d182:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d184:	2300      	movs	r3, #0
 800d186:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d190:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d194:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d198:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d19c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d1a8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d1ac:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d484 <V90R+0x32c>
 800d1b0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	eeb0 2a47 	vmov.f32	s4, s14
 800d1ba:	eef0 1a46 	vmov.f32	s3, s12
 800d1be:	eeb0 1a66 	vmov.f32	s2, s13
 800d1c2:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d48c <V90R+0x334>
 800d1c6:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d488 <V90R+0x330>
 800d1ca:	f7f5 ff8f 	bl	80030ec <straight_table2>
			wallmode.WallControlMode=0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1d6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d1da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d1e2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1f6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1fa:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d484 <V90R+0x32c>
 800d1fe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	eeb0 2a47 	vmov.f32	s4, s14
 800d208:	eef0 1a45 	vmov.f32	s3, s10
 800d20c:	eeb0 1a65 	vmov.f32	s2, s11
 800d210:	eef0 0a46 	vmov.f32	s1, s12
 800d214:	eeb0 0a66 	vmov.f32	s0, s13
 800d218:	f7f5 ff68 	bl	80030ec <straight_table2>
			if(mollifier_mode == ON){
 800d21c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d220:	2b01      	cmp	r3, #1
 800d222:	d10c      	bne.n	800d23e <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d224:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d228:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d22c:	eeb0 1a47 	vmov.f32	s2, s14
 800d230:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d490 <V90R+0x338>
 800d234:	eeb0 0a67 	vmov.f32	s0, s15
 800d238:	f7f6 fe4a 	bl	8003ed0 <mollifier_slalom_table>
 800d23c:	e015      	b.n	800d26a <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d23e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d242:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d246:	eef1 7a67 	vneg.f32	s15, s15
 800d24a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d24e:	eef0 2a66 	vmov.f32	s5, s13
 800d252:	eeb0 2a67 	vmov.f32	s4, s15
 800d256:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d48c <V90R+0x334>
 800d25a:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d48c <V90R+0x334>
 800d25e:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d490 <V90R+0x338>
 800d262:	eeb0 0a47 	vmov.f32	s0, s14
 800d266:	f7f6 fcf3 	bl	8003c50 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d26e:	2300      	movs	r3, #0
 800d270:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	4618      	mov	r0, r3
 800d276:	f7f3 f98f 	bl	8000598 <__aeabi_f2d>
 800d27a:	a37f      	add	r3, pc, #508	; (adr r3, 800d478 <V90R+0x320>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	f7f3 f82c 	bl	80002dc <__adddf3>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4610      	mov	r0, r2
 800d28a:	4619      	mov	r1, r3
 800d28c:	f7f3 fcb4 	bl	8000bf8 <__aeabi_d2f>
 800d290:	4603      	mov	r3, r0
 800d292:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d296:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d29a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d29e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2a6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2aa:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d2ae:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d484 <V90R+0x32c>
 800d2b2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	eeb0 2a47 	vmov.f32	s4, s14
 800d2bc:	eef0 1a46 	vmov.f32	s3, s12
 800d2c0:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d48c <V90R+0x334>
 800d2c4:	eef0 0a66 	vmov.f32	s1, s13
 800d2c8:	ee00 3a10 	vmov	s0, r3
 800d2cc:	f7f5 ff0e 	bl	80030ec <straight_table2>
			highspeed_mode = 0;
 800d2d0:	4b6b      	ldr	r3, [pc, #428]	; (800d480 <V90R+0x328>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d2d6:	e13e      	b.n	800d556 <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d2d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	f240 808c 	bls.w	800d3fa <V90R+0x2a2>
		highspeed_mode = 1;
 800d2e2:	4b67      	ldr	r3, [pc, #412]	; (800d480 <V90R+0x328>)
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2f8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d2fc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d300:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d304:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d308:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d30c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d310:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d314:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d318:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d31c:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d484 <V90R+0x32c>
 800d320:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	eeb0 2a47 	vmov.f32	s4, s14
 800d32a:	eef0 1a45 	vmov.f32	s3, s10
 800d32e:	eeb0 1a65 	vmov.f32	s2, s11
 800d332:	eef0 0a46 	vmov.f32	s1, s12
 800d336:	eeb0 0a66 	vmov.f32	s0, s13
 800d33a:	f7f5 fed7 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800d33e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d342:	2b01      	cmp	r3, #1
 800d344:	d10c      	bne.n	800d360 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d346:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d34a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d34e:	eeb0 1a47 	vmov.f32	s2, s14
 800d352:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d490 <V90R+0x338>
 800d356:	eeb0 0a67 	vmov.f32	s0, s15
 800d35a:	f7f6 fdb9 	bl	8003ed0 <mollifier_slalom_table>
 800d35e:	e015      	b.n	800d38c <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d360:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d364:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d368:	eef1 7a67 	vneg.f32	s15, s15
 800d36c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d370:	eef0 2a66 	vmov.f32	s5, s13
 800d374:	eeb0 2a67 	vmov.f32	s4, s15
 800d378:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d48c <V90R+0x334>
 800d37c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d48c <V90R+0x334>
 800d380:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d490 <V90R+0x338>
 800d384:	eeb0 0a47 	vmov.f32	s0, s14
 800d388:	f7f6 fc62 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=0;
 800d38c:	2300      	movs	r3, #0
 800d38e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d390:	2300      	movs	r3, #0
 800d392:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d396:	4618      	mov	r0, r3
 800d398:	f7f3 f8fe 	bl	8000598 <__aeabi_f2d>
 800d39c:	a336      	add	r3, pc, #216	; (adr r3, 800d478 <V90R+0x320>)
 800d39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a2:	f7f2 ff9b 	bl	80002dc <__adddf3>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	f7f3 fc23 	bl	8000bf8 <__aeabi_d2f>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d3b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3c8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d3cc:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d3d0:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d484 <V90R+0x32c>
 800d3d4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	eeb0 2a47 	vmov.f32	s4, s14
 800d3de:	eef0 1a46 	vmov.f32	s3, s12
 800d3e2:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d48c <V90R+0x334>
 800d3e6:	eef0 0a66 	vmov.f32	s1, s13
 800d3ea:	ee00 3a10 	vmov	s0, r3
 800d3ee:	f7f5 fe7d 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800d3f2:	4b23      	ldr	r3, [pc, #140]	; (800d480 <V90R+0x328>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	701a      	strb	r2, [r3, #0]
}
 800d3f8:	e0ad      	b.n	800d556 <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d402:	2303      	movs	r3, #3
 800d404:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d406:	2300      	movs	r3, #0
 800d408:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d40a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d40e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d412:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d416:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d41a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d41e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d422:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d426:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d42a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d42e:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d484 <V90R+0x32c>
 800d432:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	eeb0 2a47 	vmov.f32	s4, s14
 800d43c:	eef0 1a45 	vmov.f32	s3, s10
 800d440:	eeb0 1a65 	vmov.f32	s2, s11
 800d444:	eef0 0a46 	vmov.f32	s1, s12
 800d448:	eeb0 0a66 	vmov.f32	s0, s13
 800d44c:	f7f5 fe4e 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800d450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d454:	2b01      	cmp	r3, #1
 800d456:	d11d      	bne.n	800d494 <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d458:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d45c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d460:	eeb0 1a47 	vmov.f32	s2, s14
 800d464:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d490 <V90R+0x338>
 800d468:	eeb0 0a67 	vmov.f32	s0, s15
 800d46c:	f7f6 fd30 	bl	8003ed0 <mollifier_slalom_table>
 800d470:	e026      	b.n	800d4c0 <V90R+0x368>
 800d472:	bf00      	nop
 800d474:	f3af 8000 	nop.w
 800d478:	c022ec18 	.word	0xc022ec18
 800d47c:	405fd1de 	.word	0x405fd1de
 800d480:	200007e8 	.word	0x200007e8
 800d484:	42340000 	.word	0x42340000
 800d488:	42d3477b 	.word	0x42d3477b
 800d48c:	00000000 	.word	0x00000000
 800d490:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d494:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d498:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d49c:	eef1 7a67 	vneg.f32	s15, s15
 800d4a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4a4:	eef0 2a66 	vmov.f32	s5, s13
 800d4a8:	eeb0 2a67 	vmov.f32	s4, s15
 800d4ac:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d48c <V90R+0x334>
 800d4b0:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d48c <V90R+0x334>
 800d4b4:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d490 <V90R+0x338>
 800d4b8:	eeb0 0a47 	vmov.f32	s0, s14
 800d4bc:	f7f6 fbc8 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d4c0:	2303      	movs	r3, #3
 800d4c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d4c8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d4cc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d4d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d4e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d4e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4e8:	eef0 7ae7 	vabs.f32	s15, s15
 800d4ec:	ee17 0a90 	vmov	r0, s15
 800d4f0:	f7f3 f852 	bl	8000598 <__aeabi_f2d>
 800d4f4:	f04f 0200 	mov.w	r2, #0
 800d4f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4fc:	f7f3 f9ce 	bl	800089c <__aeabi_ddiv>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	4614      	mov	r4, r2
 800d506:	461d      	mov	r5, r3
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7f3 f844 	bl	8000598 <__aeabi_f2d>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4620      	mov	r0, r4
 800d516:	4629      	mov	r1, r5
 800d518:	f7f3 f9c0 	bl	800089c <__aeabi_ddiv>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	4610      	mov	r0, r2
 800d522:	4619      	mov	r1, r3
 800d524:	f04f 0200 	mov.w	r2, #0
 800d528:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <V90R+0x410>)
 800d52a:	f7f2 fed7 	bl	80002dc <__adddf3>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d532:	4610      	mov	r0, r2
 800d534:	4619      	mov	r1, r3
 800d536:	f7f3 fb5f 	bl	8000bf8 <__aeabi_d2f>
 800d53a:	4603      	mov	r3, r0
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	ee02 3a10 	vmov	s4, r3
 800d542:	edd7 1a01 	vldr	s3, [r7, #4]
 800d546:	ed97 1a01 	vldr	s2, [r7, #4]
 800d54a:	eef0 0a68 	vmov.f32	s1, s17
 800d54e:	eeb0 0a48 	vmov.f32	s0, s16
 800d552:	f7f5 fdcb 	bl	80030ec <straight_table2>
}
 800d556:	bf00      	nop
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	ecbd 8b02 	vpop	{d8}
 800d560:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d564:	b004      	add	sp, #16
 800d566:	4770      	bx	lr
 800d568:	408f4000 	.word	0x408f4000
 800d56c:	00000000 	.word	0x00000000

0800d570 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d570:	b084      	sub	sp, #16
 800d572:	b5b0      	push	{r4, r5, r7, lr}
 800d574:	ed2d 8b02 	vpush	{d8}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d584:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d588:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	f040 80ad 	bne.w	800d6ec <V90L+0x17c>
				highspeed_mode = 1;
 800d592:	4bbf      	ldr	r3, [pc, #764]	; (800d890 <V90L+0x320>)
 800d594:	2201      	movs	r2, #1
 800d596:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d598:	2300      	movs	r3, #0
 800d59a:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d5a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d5ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5bc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d5c0:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d5c4:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800d894 <V90L+0x324>
 800d5c8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	eeb0 2a47 	vmov.f32	s4, s14
 800d5d2:	eef0 1a46 	vmov.f32	s3, s12
 800d5d6:	eeb0 1a66 	vmov.f32	s2, s13
 800d5da:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800d89c <V90L+0x32c>
 800d5de:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800d898 <V90L+0x328>
 800d5e2:	f7f5 fd83 	bl	80030ec <straight_table2>
				wallmode.WallControlMode=0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d5ea:	2304      	movs	r3, #4
 800d5ec:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5ee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d5f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d5f6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d5fa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d602:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d60a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d60e:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d612:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800d894 <V90L+0x324>
 800d616:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	eeb0 2a47 	vmov.f32	s4, s14
 800d620:	eef0 1a45 	vmov.f32	s3, s10
 800d624:	eeb0 1a65 	vmov.f32	s2, s11
 800d628:	eef0 0a46 	vmov.f32	s1, s12
 800d62c:	eeb0 0a66 	vmov.f32	s0, s13
 800d630:	f7f5 fd5c 	bl	80030ec <straight_table2>
				if(mollifier_mode == ON){
 800d634:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d10c      	bne.n	800d656 <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d63c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d640:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d644:	eeb0 1a47 	vmov.f32	s2, s14
 800d648:	eddf 0a95 	vldr	s1, [pc, #596]	; 800d8a0 <V90L+0x330>
 800d64c:	eeb0 0a67 	vmov.f32	s0, s15
 800d650:	f7f6 fc3e 	bl	8003ed0 <mollifier_slalom_table>
 800d654:	e013      	b.n	800d67e <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d656:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d65a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d65e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d662:	eef0 2a66 	vmov.f32	s5, s13
 800d666:	eeb0 2a47 	vmov.f32	s4, s14
 800d66a:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800d89c <V90L+0x32c>
 800d66e:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800d89c <V90L+0x32c>
 800d672:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800d8a0 <V90L+0x330>
 800d676:	eeb0 0a67 	vmov.f32	s0, s15
 800d67a:	f7f6 fae9 	bl	8003c50 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d67e:	2300      	movs	r3, #0
 800d680:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d682:	2300      	movs	r3, #0
 800d684:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	4618      	mov	r0, r3
 800d68a:	f7f2 ff85 	bl	8000598 <__aeabi_f2d>
 800d68e:	a37e      	add	r3, pc, #504	; (adr r3, 800d888 <V90L+0x318>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f7f2 fe22 	bl	80002dc <__adddf3>
 800d698:	4602      	mov	r2, r0
 800d69a:	460b      	mov	r3, r1
 800d69c:	4610      	mov	r0, r2
 800d69e:	4619      	mov	r1, r3
 800d6a0:	f7f3 faaa 	bl	8000bf8 <__aeabi_d2f>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d6aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6ba:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d6be:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d6c2:	eddf 5a74 	vldr	s11, [pc, #464]	; 800d894 <V90L+0x324>
 800d6c6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	eeb0 2a47 	vmov.f32	s4, s14
 800d6d0:	eef0 1a46 	vmov.f32	s3, s12
 800d6d4:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800d89c <V90L+0x32c>
 800d6d8:	eef0 0a66 	vmov.f32	s1, s13
 800d6dc:	ee00 3a10 	vmov	s0, r3
 800d6e0:	f7f5 fd04 	bl	80030ec <straight_table2>
				highspeed_mode = 0;
 800d6e4:	4b6a      	ldr	r3, [pc, #424]	; (800d890 <V90L+0x320>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d6ea:	e13a      	b.n	800d962 <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d6ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	f240 808a 	bls.w	800d80a <V90L+0x29a>
		highspeed_mode = 1;
 800d6f6:	4b66      	ldr	r3, [pc, #408]	; (800d890 <V90L+0x320>)
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d700:	2300      	movs	r3, #0
 800d702:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d704:	2304      	movs	r3, #4
 800d706:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d708:	2300      	movs	r3, #0
 800d70a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d70c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d710:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d714:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d718:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d71c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d720:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d724:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d728:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d72c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d730:	eddf 4a58 	vldr	s9, [pc, #352]	; 800d894 <V90L+0x324>
 800d734:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	eeb0 2a47 	vmov.f32	s4, s14
 800d73e:	eef0 1a45 	vmov.f32	s3, s10
 800d742:	eeb0 1a65 	vmov.f32	s2, s11
 800d746:	eef0 0a46 	vmov.f32	s1, s12
 800d74a:	eeb0 0a66 	vmov.f32	s0, s13
 800d74e:	f7f5 fccd 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800d752:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d756:	2b01      	cmp	r3, #1
 800d758:	d10c      	bne.n	800d774 <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d75a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d75e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d762:	eeb0 1a47 	vmov.f32	s2, s14
 800d766:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800d8a0 <V90L+0x330>
 800d76a:	eeb0 0a67 	vmov.f32	s0, s15
 800d76e:	f7f6 fbaf 	bl	8003ed0 <mollifier_slalom_table>
 800d772:	e013      	b.n	800d79c <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d774:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d778:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d77c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d780:	eef0 2a66 	vmov.f32	s5, s13
 800d784:	eeb0 2a47 	vmov.f32	s4, s14
 800d788:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d89c <V90L+0x32c>
 800d78c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d89c <V90L+0x32c>
 800d790:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d8a0 <V90L+0x330>
 800d794:	eeb0 0a67 	vmov.f32	s0, s15
 800d798:	f7f6 fa5a 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f2 fef6 	bl	8000598 <__aeabi_f2d>
 800d7ac:	a336      	add	r3, pc, #216	; (adr r3, 800d888 <V90L+0x318>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd93 	bl	80002dc <__adddf3>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f7f3 fa1b 	bl	8000bf8 <__aeabi_d2f>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d7c8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7d8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d7dc:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d7e0:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d894 <V90L+0x324>
 800d7e4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	eeb0 2a47 	vmov.f32	s4, s14
 800d7ee:	eef0 1a46 	vmov.f32	s3, s12
 800d7f2:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d89c <V90L+0x32c>
 800d7f6:	eef0 0a66 	vmov.f32	s1, s13
 800d7fa:	ee00 3a10 	vmov	s0, r3
 800d7fe:	f7f5 fc75 	bl	80030ec <straight_table2>
		highspeed_mode = 0;
 800d802:	4b23      	ldr	r3, [pc, #140]	; (800d890 <V90L+0x320>)
 800d804:	2200      	movs	r2, #0
 800d806:	701a      	strb	r2, [r3, #0]
}
 800d808:	e0ab      	b.n	800d962 <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d80a:	2300      	movs	r3, #0
 800d80c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d80e:	2300      	movs	r3, #0
 800d810:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d812:	2304      	movs	r3, #4
 800d814:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d816:	2300      	movs	r3, #0
 800d818:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d81a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d81e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d822:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d826:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d82a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d82e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d832:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d836:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d83a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d83e:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d894 <V90L+0x324>
 800d842:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	eeb0 2a47 	vmov.f32	s4, s14
 800d84c:	eef0 1a45 	vmov.f32	s3, s10
 800d850:	eeb0 1a65 	vmov.f32	s2, s11
 800d854:	eef0 0a46 	vmov.f32	s1, s12
 800d858:	eeb0 0a66 	vmov.f32	s0, s13
 800d85c:	f7f5 fc46 	bl	80030ec <straight_table2>
		if(mollifier_mode == ON){
 800d860:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d864:	2b01      	cmp	r3, #1
 800d866:	d11d      	bne.n	800d8a4 <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d868:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d86c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d870:	eeb0 1a47 	vmov.f32	s2, s14
 800d874:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d8a0 <V90L+0x330>
 800d878:	eeb0 0a67 	vmov.f32	s0, s15
 800d87c:	f7f6 fb28 	bl	8003ed0 <mollifier_slalom_table>
 800d880:	e024      	b.n	800d8cc <V90L+0x35c>
 800d882:	bf00      	nop
 800d884:	f3af 8000 	nop.w
 800d888:	c022ec18 	.word	0xc022ec18
 800d88c:	405fd1de 	.word	0x405fd1de
 800d890:	200007e8 	.word	0x200007e8
 800d894:	42340000 	.word	0x42340000
 800d898:	42df477b 	.word	0x42df477b
 800d89c:	00000000 	.word	0x00000000
 800d8a0:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8ac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8b0:	eef0 2a66 	vmov.f32	s5, s13
 800d8b4:	eeb0 2a47 	vmov.f32	s4, s14
 800d8b8:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800d89c <V90L+0x32c>
 800d8bc:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800d89c <V90L+0x32c>
 800d8c0:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800d8a0 <V90L+0x330>
 800d8c4:	eeb0 0a67 	vmov.f32	s0, s15
 800d8c8:	f7f6 f9c2 	bl	8003c50 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d8d4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d8d8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d8dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800d8ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d8f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8f4:	eef0 7ae7 	vabs.f32	s15, s15
 800d8f8:	ee17 0a90 	vmov	r0, s15
 800d8fc:	f7f2 fe4c 	bl	8000598 <__aeabi_f2d>
 800d900:	f04f 0200 	mov.w	r2, #0
 800d904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d908:	f7f2 ffc8 	bl	800089c <__aeabi_ddiv>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4614      	mov	r4, r2
 800d912:	461d      	mov	r5, r3
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	4618      	mov	r0, r3
 800d918:	f7f2 fe3e 	bl	8000598 <__aeabi_f2d>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	4620      	mov	r0, r4
 800d922:	4629      	mov	r1, r5
 800d924:	f7f2 ffba 	bl	800089c <__aeabi_ddiv>
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	4610      	mov	r0, r2
 800d92e:	4619      	mov	r1, r3
 800d930:	f04f 0200 	mov.w	r2, #0
 800d934:	4b0f      	ldr	r3, [pc, #60]	; (800d974 <V90L+0x404>)
 800d936:	f7f2 fcd1 	bl	80002dc <__adddf3>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d93e:	4610      	mov	r0, r2
 800d940:	4619      	mov	r1, r3
 800d942:	f7f3 f959 	bl	8000bf8 <__aeabi_d2f>
 800d946:	4603      	mov	r3, r0
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	ee02 3a10 	vmov	s4, r3
 800d94e:	edd7 1a01 	vldr	s3, [r7, #4]
 800d952:	ed97 1a01 	vldr	s2, [r7, #4]
 800d956:	eef0 0a68 	vmov.f32	s1, s17
 800d95a:	eeb0 0a48 	vmov.f32	s0, s16
 800d95e:	f7f5 fbc5 	bl	80030ec <straight_table2>
}
 800d962:	bf00      	nop
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	ecbd 8b02 	vpop	{d8}
 800d96c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d970:	b004      	add	sp, #16
 800d972:	4770      	bx	lr
 800d974:	408f4000 	.word	0x408f4000

0800d978 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800d978:	b084      	sub	sp, #16
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b086      	sub	sp, #24
 800d97e:	af04      	add	r7, sp, #16
 800d980:	f107 0c10 	add.w	ip, r7, #16
 800d984:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800d988:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800d98c:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800d990:	2b01      	cmp	r3, #1
 800d992:	d116      	bne.n	800d9c2 <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800d994:	2001      	movs	r0, #1
 800d996:	f7f9 ff9f 	bl	80078d8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d99a:	2003      	movs	r0, #3
 800d99c:	f7f9 ffa6 	bl	80078ec <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800d9a0:	ed97 0a01 	vldr	s0, [r7, #4]
 800d9a4:	f7fa f836 	bl	8007a14 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800d9a8:	f7fa f820 	bl	80079ec <pl_FunMotor_start>
		HAL_Delay(600);
 800d9ac:	f44f 7016 	mov.w	r0, #600	; 0x258
 800d9b0:	f002 fd8a 	bl	80104c8 <HAL_Delay>
		reset_gyro();
 800d9b4:	f7f3 ff24 	bl	8001800 <reset_gyro>
		reset_speed();
 800d9b8:	f7f3 fb2e 	bl	8001018 <reset_speed>
		clear_Ierror();
 800d9bc:	f7f7 f84e 	bl	8004a5c <clear_Ierror>
 800d9c0:	e00b      	b.n	800d9da <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800d9c2:	2001      	movs	r0, #1
 800d9c4:	f7f9 ff88 	bl	80078d8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d9c8:	2003      	movs	r0, #3
 800d9ca:	f7f9 ff8f 	bl	80078ec <pl_L_DriveMotor_mode>
		reset_gyro();
 800d9ce:	f7f3 ff17 	bl	8001800 <reset_gyro>
		reset_speed();
 800d9d2:	f7f3 fb21 	bl	8001018 <reset_speed>
		clear_Ierror();
 800d9d6:	f7f7 f841 	bl	8004a5c <clear_Ierror>

	}
	record_mode=2;
 800d9da:	4ba8      	ldr	r3, [pc, #672]	; (800dc7c <testturning+0x304>)
 800d9dc:	2202      	movs	r2, #2
 800d9de:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800d9e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d110      	bne.n	800da0a <testturning+0x92>
 800d9e8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d9ec:	9303      	str	r3, [sp, #12]
 800d9ee:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800d9f2:	9302      	str	r3, [sp, #8]
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	f107 0318 	add.w	r3, r7, #24
 800da00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da02:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800dc80 <testturning+0x308>
 800da06:	f7fc f9cd 	bl	8009da4 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800da0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d110      	bne.n	800da34 <testturning+0xbc>
 800da12:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da16:	9303      	str	r3, [sp, #12]
 800da18:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800da1c:	9302      	str	r3, [sp, #8]
 800da1e:	2301      	movs	r3, #1
 800da20:	9301      	str	r3, [sp, #4]
 800da22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da2c:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800dc80 <testturning+0x308>
 800da30:	f7fc fb72 	bl	800a118 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800da34:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d10d      	bne.n	800da58 <testturning+0xe0>
 800da3c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da40:	9302      	str	r3, [sp, #8]
 800da42:	2301      	movs	r3, #1
 800da44:	9301      	str	r3, [sp, #4]
 800da46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800da4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da50:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800dc80 <testturning+0x308>
 800da54:	f7fc fd16 	bl	800a484 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800da58:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da5c:	2b03      	cmp	r3, #3
 800da5e:	d10d      	bne.n	800da7c <testturning+0x104>
 800da60:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da64:	9302      	str	r3, [sp, #8]
 800da66:	2301      	movs	r3, #1
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800da72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da74:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800dc80 <testturning+0x308>
 800da78:	f7fc fe6e 	bl	800a758 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800da7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da80:	2b04      	cmp	r3, #4
 800da82:	d10d      	bne.n	800daa0 <testturning+0x128>
 800da84:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da88:	9302      	str	r3, [sp, #8]
 800da8a:	2301      	movs	r3, #1
 800da8c:	9301      	str	r3, [sp, #4]
 800da8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800da96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da98:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800dc80 <testturning+0x308>
 800da9c:	f7fc ffc0 	bl	800aa20 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800daa0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800daa4:	2b05      	cmp	r3, #5
 800daa6:	d10e      	bne.n	800dac6 <testturning+0x14e>
 800daa8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800daac:	9302      	str	r3, [sp, #8]
 800daae:	2301      	movs	r3, #1
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dabc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dabe:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800dc80 <testturning+0x308>
 800dac2:	f7fd f917 	bl	800acf4 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dac6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800daca:	2b06      	cmp	r3, #6
 800dacc:	d10e      	bne.n	800daec <testturning+0x174>
 800dace:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dad2:	9302      	str	r3, [sp, #8]
 800dad4:	2301      	movs	r3, #1
 800dad6:	9301      	str	r3, [sp, #4]
 800dad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dae4:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800dc80 <testturning+0x308>
 800dae8:	f7fd fa6a 	bl	800afc0 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800daec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800daf0:	2b07      	cmp	r3, #7
 800daf2:	d10e      	bne.n	800db12 <testturning+0x19a>
 800daf4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800daf8:	9302      	str	r3, [sp, #8]
 800dafa:	2301      	movs	r3, #1
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800db08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db0a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800dc80 <testturning+0x308>
 800db0e:	f7fd fc9f 	bl	800b450 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800db12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db16:	2b08      	cmp	r3, #8
 800db18:	d10e      	bne.n	800db38 <testturning+0x1c0>
 800db1a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db1e:	9302      	str	r3, [sp, #8]
 800db20:	2301      	movs	r3, #1
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800db2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db30:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800dc80 <testturning+0x308>
 800db34:	f7fd fecc 	bl	800b8d0 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800db38:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db3c:	2b09      	cmp	r3, #9
 800db3e:	d10e      	bne.n	800db5e <testturning+0x1e6>
 800db40:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db44:	9302      	str	r3, [sp, #8]
 800db46:	2301      	movs	r3, #1
 800db48:	9301      	str	r3, [sp, #4]
 800db4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800db54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db56:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800dc80 <testturning+0x308>
 800db5a:	f7fe f901 	bl	800bd60 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800db5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db62:	2b0a      	cmp	r3, #10
 800db64:	d10e      	bne.n	800db84 <testturning+0x20c>
 800db66:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db6a:	9302      	str	r3, [sp, #8]
 800db6c:	2301      	movs	r3, #1
 800db6e:	9301      	str	r3, [sp, #4]
 800db70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800db7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db7c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800dc80 <testturning+0x308>
 800db80:	f7fe fb32 	bl	800c1e8 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800db84:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db88:	2b0b      	cmp	r3, #11
 800db8a:	d10e      	bne.n	800dbaa <testturning+0x232>
 800db8c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db90:	9302      	str	r3, [sp, #8]
 800db92:	2301      	movs	r3, #1
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800dba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dba2:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800dc80 <testturning+0x308>
 800dba6:	f7fe fd11 	bl	800c5cc <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800dbaa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dbae:	2b0c      	cmp	r3, #12
 800dbb0:	d10e      	bne.n	800dbd0 <testturning+0x258>
 800dbb2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dbb6:	9302      	str	r3, [sp, #8]
 800dbb8:	2301      	movs	r3, #1
 800dbba:	9301      	str	r3, [sp, #4]
 800dbbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbc8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800dc80 <testturning+0x308>
 800dbcc:	f7fe fee6 	bl	800c99c <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800dbd0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dbd4:	2b0d      	cmp	r3, #13
 800dbd6:	d10e      	bne.n	800dbf6 <testturning+0x27e>
 800dbd8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dbdc:	9302      	str	r3, [sp, #8]
 800dbde:	2301      	movs	r3, #1
 800dbe0:	9301      	str	r3, [sp, #4]
 800dbe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800dbec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbee:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800dc80 <testturning+0x308>
 800dbf2:	f7ff f8c5 	bl	800cd80 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800dbf6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dbfa:	2b0e      	cmp	r3, #14
 800dbfc:	d10e      	bne.n	800dc1c <testturning+0x2a4>
 800dbfe:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc02:	9302      	str	r3, [sp, #8]
 800dc04:	2301      	movs	r3, #1
 800dc06:	9301      	str	r3, [sp, #4]
 800dc08:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc14:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800dc80 <testturning+0x308>
 800dc18:	f7ff fa9e 	bl	800d158 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800dc1c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc20:	2b0f      	cmp	r3, #15
 800dc22:	d10e      	bne.n	800dc42 <testturning+0x2ca>
 800dc24:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc28:	9302      	str	r3, [sp, #8]
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	9301      	str	r3, [sp, #4]
 800dc2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dc38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc3a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800dc80 <testturning+0x308>
 800dc3e:	f7ff fc97 	bl	800d570 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800dc42:	4b0e      	ldr	r3, [pc, #56]	; (800dc7c <testturning+0x304>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800dc48:	2003      	movs	r0, #3
 800dc4a:	f7f9 fe77 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc4e:	2003      	movs	r0, #3
 800dc50:	f7f9 fe4c 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800dc54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc58:	f7fa f942 	bl	8007ee0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800dc5c:	f7f9 fed0 	bl	8007a00 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800dc60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc64:	f7fa f93c 	bl	8007ee0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800dc68:	2000      	movs	r0, #0
 800dc6a:	f7f9 fe35 	bl	80078d8 <pl_DriveMotor_standby>

}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc78:	b004      	add	sp, #16
 800dc7a:	4770      	bx	lr
 800dc7c:	2000c388 	.word	0x2000c388
 800dc80:	c2c80000 	.word	0xc2c80000

0800dc84 <mode_decision>:
#include "fail_safe.h"




unsigned char mode_decision(unsigned char now_mode){
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 800dc96:	2300      	movs	r3, #0
 800dc98:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 800dc9a:	4b71      	ldr	r3, [pc, #452]	; (800de60 <mode_decision+0x1dc>)
 800dc9c:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	f003 030f 	and.w	r3, r3, #15
 800dca4:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	091b      	lsrs	r3, r3, #4
 800dcaa:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dcac:	7bbb      	ldrb	r3, [r7, #14]
 800dcae:	011b      	lsls	r3, r3, #4
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f9 fab1 	bl	8007220 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 800dcbe:	e07f      	b.n	800ddc0 <mode_decision+0x13c>
				HAL_Delay(1);
 800dcc0:	2001      	movs	r0, #1
 800dcc2:	f002 fc01 	bl	80104c8 <HAL_Delay>
				if (E_distanceR >= dis8) {
 800dcc6:	4b67      	ldr	r3, [pc, #412]	; (800de64 <mode_decision+0x1e0>)
 800dcc8:	edd3 7a00 	vldr	s15, [r3]
 800dccc:	ed97 7a02 	vldr	s14, [r7, #8]
 800dcd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd8:	d813      	bhi.n	800dd02 <mode_decision+0x7e>
					if (main_modeR == 15) {
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	2b0f      	cmp	r3, #15
 800dcde:	d102      	bne.n	800dce6 <mode_decision+0x62>
						main_modeR = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73fb      	strb	r3, [r7, #15]
 800dce4:	e002      	b.n	800dcec <mode_decision+0x68>
					} else {
						main_modeR++;
 800dce6:	7bfb      	ldrb	r3, [r7, #15]
 800dce8:	3301      	adds	r3, #1
 800dcea:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 800dcec:	f7f3 f956 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dcf0:	7bbb      	ldrb	r3, [r7, #14]
 800dcf2:	011b      	lsls	r3, r3, #4
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	7bfb      	ldrb	r3, [r7, #15]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f9 fa8f 	bl	8007220 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 800dd02:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd06:	eeb1 7a67 	vneg.f32	s14, s15
 800dd0a:	4b56      	ldr	r3, [pc, #344]	; (800de64 <mode_decision+0x1e0>)
 800dd0c:	edd3 7a00 	vldr	s15, [r3]
 800dd10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd18:	db13      	blt.n	800dd42 <mode_decision+0xbe>
					if (main_modeR == 0) {
 800dd1a:	7bfb      	ldrb	r3, [r7, #15]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d102      	bne.n	800dd26 <mode_decision+0xa2>
						main_modeR = 15;
 800dd20:	230f      	movs	r3, #15
 800dd22:	73fb      	strb	r3, [r7, #15]
 800dd24:	e002      	b.n	800dd2c <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 800dd2c:	f7f3 f936 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dd30:	7bbb      	ldrb	r3, [r7, #14]
 800dd32:	011b      	lsls	r3, r3, #4
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
 800dd38:	4413      	add	r3, r2
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7f9 fa6f 	bl	8007220 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 800dd42:	4b49      	ldr	r3, [pc, #292]	; (800de68 <mode_decision+0x1e4>)
 800dd44:	edd3 7a00 	vldr	s15, [r3]
 800dd48:	ed97 7a02 	vldr	s14, [r7, #8]
 800dd4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd54:	d813      	bhi.n	800dd7e <mode_decision+0xfa>
					if (main_modeL == 15) {
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
 800dd58:	2b0f      	cmp	r3, #15
 800dd5a:	d102      	bne.n	800dd62 <mode_decision+0xde>
						main_modeL = 0;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	73bb      	strb	r3, [r7, #14]
 800dd60:	e002      	b.n	800dd68 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 800dd62:	7bbb      	ldrb	r3, [r7, #14]
 800dd64:	3301      	adds	r3, #1
 800dd66:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 800dd68:	f7f3 f918 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	011b      	lsls	r3, r3, #4
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
 800dd74:	4413      	add	r3, r2
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7f9 fa51 	bl	8007220 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 800dd7e:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd82:	eeb1 7a67 	vneg.f32	s14, s15
 800dd86:	4b38      	ldr	r3, [pc, #224]	; (800de68 <mode_decision+0x1e4>)
 800dd88:	edd3 7a00 	vldr	s15, [r3]
 800dd8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd94:	da00      	bge.n	800dd98 <mode_decision+0x114>
 800dd96:	e013      	b.n	800ddc0 <mode_decision+0x13c>
					if (main_modeL == 0) {
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d102      	bne.n	800dda4 <mode_decision+0x120>
						main_modeL = 15;
 800dd9e:	230f      	movs	r3, #15
 800dda0:	73bb      	strb	r3, [r7, #14]
 800dda2:	e002      	b.n	800ddaa <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 800ddaa:	f7f3 f8f7 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800ddae:	7bbb      	ldrb	r3, [r7, #14]
 800ddb0:	011b      	lsls	r3, r3, #4
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	7bfb      	ldrb	r3, [r7, #15]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7f9 fa30 	bl	8007220 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 800ddc0:	4b2a      	ldr	r3, [pc, #168]	; (800de6c <mode_decision+0x1e8>)
 800ddc2:	edd3 7a00 	vldr	s15, [r3]
 800ddc6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800de70 <mode_decision+0x1ec>
 800ddca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd2:	f67f af75 	bls.w	800dcc0 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_on();
 800ddd6:	f7f9 f9e9 	bl	80071ac <pl_yellow_LED_on>
			pl_r_blue_LED(ON);
 800ddda:	2001      	movs	r0, #1
 800dddc:	f7f9 fad0 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800dde0:	2001      	movs	r0, #1
 800dde2:	f7f9 fadf 	bl	80073a4 <pl_l_blue_LED>
			HAL_Delay(1000);
 800dde6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ddea:	f002 fb6d 	bl	80104c8 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 800ddee:	e011      	b.n	800de14 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 800ddf0:	4b1e      	ldr	r3, [pc, #120]	; (800de6c <mode_decision+0x1e8>)
 800ddf2:	edd3 7a00 	vldr	s15, [r3]
 800ddf6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800de70 <mode_decision+0x1ec>
 800ddfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de02:	db04      	blt.n	800de0e <mode_decision+0x18a>
					main_modeL = 0;
 800de04:	2300      	movs	r3, #0
 800de06:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	73fb      	strb	r3, [r7, #15]
					break;
 800de0c:	e013      	b.n	800de36 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 800de0e:	2001      	movs	r0, #1
 800de10:	f002 fb5a 	bl	80104c8 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 800de14:	4b17      	ldr	r3, [pc, #92]	; (800de74 <mode_decision+0x1f0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800de1c:	dde8      	ble.n	800ddf0 <mode_decision+0x16c>
 800de1e:	4b15      	ldr	r3, [pc, #84]	; (800de74 <mode_decision+0x1f0>)
 800de20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800de24:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800de28:	dde2      	ble.n	800ddf0 <mode_decision+0x16c>
 800de2a:	4b12      	ldr	r3, [pc, #72]	; (800de74 <mode_decision+0x1f0>)
 800de2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800de30:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800de34:	dddc      	ble.n	800ddf0 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 800de36:	2000      	movs	r0, #0
 800de38:	f7f9 faa2 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800de3c:	2000      	movs	r0, #0
 800de3e:	f7f9 fab1 	bl	80073a4 <pl_l_blue_LED>
			pl_yellow_LED_off();
 800de42:	f7f9 f979 	bl	8007138 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 800de46:	7bbb      	ldrb	r3, [r7, #14]
 800de48:	011b      	lsls	r3, r3, #4
 800de4a:	b25a      	sxtb	r2, r3
 800de4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de50:	4313      	orrs	r3, r2
 800de52:	b25b      	sxtb	r3, r3
 800de54:	737b      	strb	r3, [r7, #13]

return main_mode;
 800de56:	7b7b      	ldrb	r3, [r7, #13]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	41200000 	.word	0x41200000
 800de64:	20000204 	.word	0x20000204
 800de68:	20000200 	.word	0x20000200
 800de6c:	20000250 	.word	0x20000250
 800de70:	43c80000 	.word	0x43c80000
 800de74:	20000298 	.word	0x20000298

0800de78 <mode_execution>:


void mode_execution(unsigned char now_mode){
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	4603      	mov	r3, r0
 800de80:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 800de82:	2300      	movs	r3, #0
 800de84:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 800de86:	2300      	movs	r3, #0
 800de88:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 800de8a:	79fb      	ldrb	r3, [r7, #7]
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 800de92:	79fb      	ldrb	r3, [r7, #7]
 800de94:	091b      	lsrs	r3, r3, #4
 800de96:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	2b0f      	cmp	r3, #15
 800de9c:	d832      	bhi.n	800df04 <mode_execution+0x8c>
 800de9e:	a201      	add	r2, pc, #4	; (adr r2, 800dea4 <mode_execution+0x2c>)
 800dea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea4:	0800dee5 	.word	0x0800dee5
 800dea8:	0800df03 	.word	0x0800df03
 800deac:	0800df03 	.word	0x0800df03
 800deb0:	0800deef 	.word	0x0800deef
 800deb4:	0800def9 	.word	0x0800def9
 800deb8:	0800df03 	.word	0x0800df03
 800debc:	0800df03 	.word	0x0800df03
 800dec0:	0800df03 	.word	0x0800df03
 800dec4:	0800df03 	.word	0x0800df03
 800dec8:	0800df03 	.word	0x0800df03
 800decc:	0800df03 	.word	0x0800df03
 800ded0:	0800df03 	.word	0x0800df03
 800ded4:	0800df03 	.word	0x0800df03
 800ded8:	0800df03 	.word	0x0800df03
 800dedc:	0800df03 	.word	0x0800df03
 800dee0:	0800df03 	.word	0x0800df03
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 f810 	bl	800df0c <mode_PLtest>
	break;
 800deec:	e00a      	b.n	800df04 <mode_execution+0x8c>

	break;
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 800deee:	7bfb      	ldrb	r3, [r7, #15]
 800def0:	4618      	mov	r0, r3
 800def2:	f000 f97f 	bl	800e1f4 <mode_Tuning0>
	break;
 800def6:	e005      	b.n	800df04 <mode_execution+0x8c>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	4618      	mov	r0, r3
 800defc:	f000 fc22 	bl	800e744 <mode_WallSensorTuning>
	break;
 800df00:	e000      	b.n	800df04 <mode_execution+0x8c>
	break;
 800df02:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 800df04:	bf00      	nop
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 800df0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df10:	b090      	sub	sp, #64	; 0x40
 800df12:	af0a      	add	r7, sp, #40	; 0x28
 800df14:	4603      	mov	r3, r0
 800df16:	75fb      	strb	r3, [r7, #23]

	switch (main_modeR) {
 800df18:	7dfb      	ldrb	r3, [r7, #23]
 800df1a:	2b0f      	cmp	r3, #15
 800df1c:	f200 8159 	bhi.w	800e1d2 <mode_PLtest+0x2c6>
 800df20:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <mode_PLtest+0x1c>)
 800df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df26:	bf00      	nop
 800df28:	0800e1d1 	.word	0x0800e1d1
 800df2c:	0800df69 	.word	0x0800df69
 800df30:	0800df9b 	.word	0x0800df9b
 800df34:	0800e017 	.word	0x0800e017
 800df38:	0800e07b 	.word	0x0800e07b
 800df3c:	0800e1d3 	.word	0x0800e1d3
 800df40:	0800e1d3 	.word	0x0800e1d3
 800df44:	0800e1d3 	.word	0x0800e1d3
 800df48:	0800e1d3 	.word	0x0800e1d3
 800df4c:	0800e0fb 	.word	0x0800e0fb
 800df50:	0800e163 	.word	0x0800e163
 800df54:	0800e1d3 	.word	0x0800e1d3
 800df58:	0800e1d3 	.word	0x0800e1d3
 800df5c:	0800e1d3 	.word	0x0800e1d3
 800df60:	0800e1d3 	.word	0x0800e1d3
 800df64:	0800e1cb 	.word	0x0800e1cb
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 800df68:	4b9c      	ldr	r3, [pc, #624]	; (800e1dc <mode_PLtest+0x2d0>)
 800df6a:	6819      	ldr	r1, [r3, #0]
 800df6c:	4b9b      	ldr	r3, [pc, #620]	; (800e1dc <mode_PLtest+0x2d0>)
 800df6e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800df70:	4b9a      	ldr	r3, [pc, #616]	; (800e1dc <mode_PLtest+0x2d0>)
 800df72:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800df76:	4b99      	ldr	r3, [pc, #612]	; (800e1dc <mode_PLtest+0x2d0>)
 800df78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800df7c:	4a97      	ldr	r2, [pc, #604]	; (800e1dc <mode_PLtest+0x2d0>)
 800df7e:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 800df82:	9201      	str	r2, [sp, #4]
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	4623      	mov	r3, r4
 800df88:	4602      	mov	r2, r0
 800df8a:	4895      	ldr	r0, [pc, #596]	; (800e1e0 <mode_PLtest+0x2d4>)
 800df8c:	f009 ff86 	bl	8017e9c <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 800df90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df94:	f7f9 ff60 	bl	8007e58 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 800df98:	e7e6      	b.n	800df68 <mode_PLtest+0x5c>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 800df9a:	2001      	movs	r0, #1
 800df9c:	f7f9 f9f0 	bl	8007380 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 800dfa0:	2001      	movs	r0, #1
 800dfa2:	f7f9 f9ff 	bl	80073a4 <pl_l_blue_LED>
		record_mode = 1;
 800dfa6:	4b8f      	ldr	r3, [pc, #572]	; (800e1e4 <mode_PLtest+0x2d8>)
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(1200, 1200*1.3*0.9);
 800dfac:	f240 517c 	movw	r1, #1404	; 0x57c
 800dfb0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800dfb4:	f7f9 fd04 	bl	80079c0 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 800dfb8:	2001      	movs	r0, #1
 800dfba:	f7f9 fcbf 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	f7f9 fc94 	bl	80078ec <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 800dfc4:	f7f9 fce0 	bl	8007988 <pl_DriveMotor_start>
		wait_ms(2500);
 800dfc8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800dfcc:	f7f9 ff44 	bl	8007e58 <wait_ms>
		pl_DriveMotor_stop();
 800dfd0:	f7f9 fce8 	bl	80079a4 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	f7f9 f9d3 	bl	8007380 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 800dfda:	2000      	movs	r0, #0
 800dfdc:	f7f9 f9e2 	bl	80073a4 <pl_l_blue_LED>
		record_mode = 0;
 800dfe0:	4b80      	ldr	r3, [pc, #512]	; (800e1e4 <mode_PLtest+0x2d8>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800dfe6:	e002      	b.n	800dfee <mode_PLtest+0xe2>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 800dfe8:	2001      	movs	r0, #1
 800dfea:	f7f9 ff35 	bl	8007e58 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800dfee:	4b7b      	ldr	r3, [pc, #492]	; (800e1dc <mode_PLtest+0x2d0>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800dff6:	ddf7      	ble.n	800dfe8 <mode_PLtest+0xdc>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 800dff8:	4b78      	ldr	r3, [pc, #480]	; (800e1dc <mode_PLtest+0x2d0>)
 800dffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dffe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e002:	ddf1      	ble.n	800dfe8 <mode_PLtest+0xdc>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e004:	4b75      	ldr	r3, [pc, #468]	; (800e1dc <mode_PLtest+0x2d0>)
 800e006:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e00a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e00e:	ddeb      	ble.n	800dfe8 <mode_PLtest+0xdc>
		}
		record_print();
 800e010:	f000 fe28 	bl	800ec64 <record_print>
		break;
 800e014:	e0dd      	b.n	800e1d2 <mode_PLtest+0x2c6>
	case 0b0011:	//gyro
		reset_gyro();
 800e016:	f7f3 fbf3 	bl	8001800 <reset_gyro>
		reset_speed();
 800e01a:	f7f2 fffd 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 800e01e:	2001      	movs	r0, #1
 800e020:	f7f9 f9ae 	bl	8007380 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 800e024:	2001      	movs	r0, #1
 800e026:	f7f9 f9bd 	bl	80073a4 <pl_l_blue_LED>
		record_mode = 2;
 800e02a:	4b6e      	ldr	r3, [pc, #440]	; (800e1e4 <mode_PLtest+0x2d8>)
 800e02c:	2202      	movs	r2, #2
 800e02e:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 800e030:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800e034:	f7f9 ff10 	bl	8007e58 <wait_ms>
		pl_r_blue_LED(OFF);
 800e038:	2000      	movs	r0, #0
 800e03a:	f7f9 f9a1 	bl	8007380 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 800e03e:	2000      	movs	r0, #0
 800e040:	f7f9 f9b0 	bl	80073a4 <pl_l_blue_LED>
		record_mode = 0;
 800e044:	4b67      	ldr	r3, [pc, #412]	; (800e1e4 <mode_PLtest+0x2d8>)
 800e046:	2200      	movs	r2, #0
 800e048:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800e04a:	e002      	b.n	800e052 <mode_PLtest+0x146>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 800e04c:	2001      	movs	r0, #1
 800e04e:	f7f9 ff03 	bl	8007e58 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800e052:	4b62      	ldr	r3, [pc, #392]	; (800e1dc <mode_PLtest+0x2d0>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e05a:	ddf7      	ble.n	800e04c <mode_PLtest+0x140>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 800e05c:	4b5f      	ldr	r3, [pc, #380]	; (800e1dc <mode_PLtest+0x2d0>)
 800e05e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e062:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e066:	ddf1      	ble.n	800e04c <mode_PLtest+0x140>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e068:	4b5c      	ldr	r3, [pc, #368]	; (800e1dc <mode_PLtest+0x2d0>)
 800e06a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e06e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e072:	ddeb      	ble.n	800e04c <mode_PLtest+0x140>
		}
		record_print();
 800e074:	f000 fdf6 	bl	800ec64 <record_print>
		break;
 800e078:	e0ab      	b.n	800e1d2 <mode_PLtest+0x2c6>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e07a:	4b5b      	ldr	r3, [pc, #364]	; (800e1e8 <mode_PLtest+0x2dc>)
 800e07c:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f2 fa8a 	bl	8000598 <__aeabi_f2d>
 800e084:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e088:	4b57      	ldr	r3, [pc, #348]	; (800e1e8 <mode_PLtest+0x2dc>)
 800e08a:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7f2 fa83 	bl	8000598 <__aeabi_f2d>
 800e092:	4604      	mov	r4, r0
 800e094:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e096:	4b54      	ldr	r3, [pc, #336]	; (800e1e8 <mode_PLtest+0x2dc>)
 800e098:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7f2 fa7c 	bl	8000598 <__aeabi_f2d>
 800e0a0:	4680      	mov	r8, r0
 800e0a2:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e0a4:	4b50      	ldr	r3, [pc, #320]	; (800e1e8 <mode_PLtest+0x2dc>)
 800e0a6:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7f2 fa75 	bl	8000598 <__aeabi_f2d>
 800e0ae:	4682      	mov	sl, r0
 800e0b0:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e0b2:	4b4d      	ldr	r3, [pc, #308]	; (800e1e8 <mode_PLtest+0x2dc>)
 800e0b4:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7f2 fa6e 	bl	8000598 <__aeabi_f2d>
 800e0bc:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e0c0:	4b49      	ldr	r3, [pc, #292]	; (800e1e8 <mode_PLtest+0x2dc>)
 800e0c2:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7f2 fa67 	bl	8000598 <__aeabi_f2d>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e0d2:	ed97 7b00 	vldr	d7, [r7]
 800e0d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0da:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e0de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e0e2:	e9cd 4500 	strd	r4, r5, [sp]
 800e0e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0ea:	4840      	ldr	r0, [pc, #256]	; (800e1ec <mode_PLtest+0x2e0>)
 800e0ec:	f009 fed6 	bl	8017e9c <iprintf>
			wait_ms(500);
 800e0f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e0f4:	f7f9 feb0 	bl	8007e58 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e0f8:	e7bf      	b.n	800e07a <mode_PLtest+0x16e>
		}
	break;
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 800e0fa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800e0fe:	f7f9 fc89 	bl	8007a14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 800e102:	f7f9 fc73 	bl	80079ec <pl_FunMotor_start>
			HAL_Delay(2000);
 800e106:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e10a:	f002 f9dd 	bl	80104c8 <HAL_Delay>
			reset_gyro();
 800e10e:	f7f3 fb77 	bl	8001800 <reset_gyro>
			reset_speed();
 800e112:	f7f2 ff81 	bl	8001018 <reset_speed>
			clear_Ierror();
 800e116:	f7f6 fca1 	bl	8004a5c <clear_Ierror>
			pl_r_blue_LED(ON);
 800e11a:	2001      	movs	r0, #1
 800e11c:	f7f9 f930 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e120:	2001      	movs	r0, #1
 800e122:	f7f9 f93f 	bl	80073a4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e126:	e002      	b.n	800e12e <mode_PLtest+0x222>
				HAL_Delay(1);
 800e128:	2001      	movs	r0, #1
 800e12a:	f002 f9cd 	bl	80104c8 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e12e:	4b2b      	ldr	r3, [pc, #172]	; (800e1dc <mode_PLtest+0x2d0>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e136:	ddf7      	ble.n	800e128 <mode_PLtest+0x21c>
 800e138:	4b28      	ldr	r3, [pc, #160]	; (800e1dc <mode_PLtest+0x2d0>)
 800e13a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e13e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e142:	ddf1      	ble.n	800e128 <mode_PLtest+0x21c>
 800e144:	4b25      	ldr	r3, [pc, #148]	; (800e1dc <mode_PLtest+0x2d0>)
 800e146:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e14a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e14e:	ddeb      	ble.n	800e128 <mode_PLtest+0x21c>
			}
			pl_r_blue_LED(OFF);
 800e150:	2000      	movs	r0, #0
 800e152:	f7f9 f915 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e156:	2000      	movs	r0, #0
 800e158:	f7f9 f924 	bl	80073a4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 800e15c:	f7f9 fc50 	bl	8007a00 <pl_FunMotor_stop>
		break;
 800e160:	e037      	b.n	800e1d2 <mode_PLtest+0x2c6>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 800e162:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800e1f0 <mode_PLtest+0x2e4>
 800e166:	f7f9 fc55 	bl	8007a14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 800e16a:	f7f9 fc3f 	bl	80079ec <pl_FunMotor_start>
			HAL_Delay(2000);
 800e16e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e172:	f002 f9a9 	bl	80104c8 <HAL_Delay>
			reset_gyro();
 800e176:	f7f3 fb43 	bl	8001800 <reset_gyro>
			reset_speed();
 800e17a:	f7f2 ff4d 	bl	8001018 <reset_speed>
			clear_Ierror();
 800e17e:	f7f6 fc6d 	bl	8004a5c <clear_Ierror>
			pl_r_blue_LED(ON);
 800e182:	2001      	movs	r0, #1
 800e184:	f7f9 f8fc 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e188:	2001      	movs	r0, #1
 800e18a:	f7f9 f90b 	bl	80073a4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e18e:	e002      	b.n	800e196 <mode_PLtest+0x28a>
				HAL_Delay(1);
 800e190:	2001      	movs	r0, #1
 800e192:	f002 f999 	bl	80104c8 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e196:	4b11      	ldr	r3, [pc, #68]	; (800e1dc <mode_PLtest+0x2d0>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e19e:	ddf7      	ble.n	800e190 <mode_PLtest+0x284>
 800e1a0:	4b0e      	ldr	r3, [pc, #56]	; (800e1dc <mode_PLtest+0x2d0>)
 800e1a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e1a6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e1aa:	ddf1      	ble.n	800e190 <mode_PLtest+0x284>
 800e1ac:	4b0b      	ldr	r3, [pc, #44]	; (800e1dc <mode_PLtest+0x2d0>)
 800e1ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e1b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e1b6:	ddeb      	ble.n	800e190 <mode_PLtest+0x284>
			}
			pl_r_blue_LED(OFF);
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	f7f9 f8e1 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e1be:	2000      	movs	r0, #0
 800e1c0:	f7f9 f8f0 	bl	80073a4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 800e1c4:	f7f9 fc1c 	bl	8007a00 <pl_FunMotor_stop>
		break;
 800e1c8:	e003      	b.n	800e1d2 <mode_PLtest+0x2c6>
	case 0b1111:	//record_out
		record_print();
 800e1ca:	f000 fd4b 	bl	800ec64 <record_print>
		break;
 800e1ce:	e000      	b.n	800e1d2 <mode_PLtest+0x2c6>
		break;
 800e1d0:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 800e1d2:	bf00      	nop
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1dc:	20000298 	.word	0x20000298
 800e1e0:	0801a5c4 	.word	0x0801a5c4
 800e1e4:	2000c388 	.word	0x2000c388
 800e1e8:	200006c4 	.word	0x200006c4
 800e1ec:	0801a5f0 	.word	0x0801a5f0
 800e1f0:	3f7d70a4 	.word	0x3f7d70a4

0800e1f4 <mode_Tuning0>:



void mode_Tuning0(unsigned char main_modeR){
 800e1f4:	b590      	push	{r4, r7, lr}
 800e1f6:	b0d7      	sub	sp, #348	; 0x15c
 800e1f8:	af52      	add	r7, sp, #328	; 0x148
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 800e202:	2300      	movs	r3, #0
 800e204:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 800e206:	2300      	movs	r3, #0
 800e208:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e20e:	2003      	movs	r0, #3
 800e210:	f7f9 fb6c 	bl	80078ec <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e214:	2003      	movs	r0, #3
 800e216:	f7f9 fb91 	bl	800793c <pl_R_DriveMotor_mode>
	reset_gyro();
 800e21a:	f7f3 faf1 	bl	8001800 <reset_gyro>
	reset_speed();
 800e21e:	f7f2 fefb 	bl	8001018 <reset_speed>
	reset_distance();
 800e222:	f7f2 febb 	bl	8000f9c <reset_distance>
	clear_Ierror();
 800e226:	f7f6 fc19 	bl	8004a5c <clear_Ierror>

	switch (main_modeR) {
 800e22a:	79fb      	ldrb	r3, [r7, #7]
 800e22c:	2b0f      	cmp	r3, #15
 800e22e:	f200 823f 	bhi.w	800e6b0 <mode_Tuning0+0x4bc>
 800e232:	a201      	add	r2, pc, #4	; (adr r2, 800e238 <mode_Tuning0+0x44>)
 800e234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e238:	0800e279 	.word	0x0800e279
 800e23c:	0800e303 	.word	0x0800e303
 800e240:	0800e329 	.word	0x0800e329
 800e244:	0800e34f 	.word	0x0800e34f
 800e248:	0800e37f 	.word	0x0800e37f
 800e24c:	0800e3af 	.word	0x0800e3af
 800e250:	0800e3d5 	.word	0x0800e3d5
 800e254:	0800e3fb 	.word	0x0800e3fb
 800e258:	0800e421 	.word	0x0800e421
 800e25c:	0800e445 	.word	0x0800e445
 800e260:	0800e4c5 	.word	0x0800e4c5
 800e264:	0800e545 	.word	0x0800e545
 800e268:	0800e56b 	.word	0x0800e56b
 800e26c:	0800e59d 	.word	0x0800e59d
 800e270:	0800e615 	.word	0x0800e615
 800e274:	0800e665 	.word	0x0800e665
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 800e278:	4bd0      	ldr	r3, [pc, #832]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e27a:	2203      	movs	r2, #3
 800e27c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e27e:	2300      	movs	r3, #0
 800e280:	723b      	strb	r3, [r7, #8]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 800e282:	68b8      	ldr	r0, [r7, #8]
 800e284:	ed9f 2ace 	vldr	s4, [pc, #824]	; 800e5c0 <mode_Tuning0+0x3cc>
 800e288:	eddf 1ace 	vldr	s3, [pc, #824]	; 800e5c4 <mode_Tuning0+0x3d0>
 800e28c:	ed9f 1ace 	vldr	s2, [pc, #824]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e290:	eddf 0acd 	vldr	s1, [pc, #820]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e294:	ed9f 0acd 	vldr	s0, [pc, #820]	; 800e5cc <mode_Tuning0+0x3d8>
 800e298:	f7f4 ff28 	bl	80030ec <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 800e29c:	ed9f 2acc 	vldr	s4, [pc, #816]	; 800e5d0 <mode_Tuning0+0x3dc>
 800e2a0:	eddf 1acc 	vldr	s3, [pc, #816]	; 800e5d4 <mode_Tuning0+0x3e0>
 800e2a4:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2a8:	eddf 0ac7 	vldr	s1, [pc, #796]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2ac:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800e5d8 <mode_Tuning0+0x3e4>
 800e2b0:	f7f5 fbc6 	bl	8003a40 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 800e2b4:	68b8      	ldr	r0, [r7, #8]
 800e2b6:	ed9f 2ac9 	vldr	s4, [pc, #804]	; 800e5dc <mode_Tuning0+0x3e8>
 800e2ba:	eddf 1ac9 	vldr	s3, [pc, #804]	; 800e5e0 <mode_Tuning0+0x3ec>
 800e2be:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2c2:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2c6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e5cc <mode_Tuning0+0x3d8>
 800e2ca:	f7f4 ff0f 	bl	80030ec <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 800e2ce:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 800e5d0 <mode_Tuning0+0x3dc>
 800e2d2:	eddf 1ac0 	vldr	s3, [pc, #768]	; 800e5d4 <mode_Tuning0+0x3e0>
 800e2d6:	ed9f 1abc 	vldr	s2, [pc, #752]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2da:	eddf 0abb 	vldr	s1, [pc, #748]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2de:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800e5d8 <mode_Tuning0+0x3e4>
 800e2e2:	f7f5 fbad 	bl	8003a40 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 800e2e6:	68b8      	ldr	r0, [r7, #8]
 800e2e8:	ed9f 2abe 	vldr	s4, [pc, #760]	; 800e5e4 <mode_Tuning0+0x3f0>
 800e2ec:	eddf 1abe 	vldr	s3, [pc, #760]	; 800e5e8 <mode_Tuning0+0x3f4>
 800e2f0:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2f4:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e2f8:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800e5cc <mode_Tuning0+0x3d8>
 800e2fc:	f7f4 fef6 	bl	80030ec <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 800e300:	e1d6      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 800e302:	4bae      	ldr	r3, [pc, #696]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e304:	2205      	movs	r2, #5
 800e306:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e308:	2300      	movs	r3, #0
 800e30a:	723b      	strb	r3, [r7, #8]
			straight_table2(400, 0, 0, 400, 3000,mode);
 800e30c:	68b8      	ldr	r0, [r7, #8]
 800e30e:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 800e5ec <mode_Tuning0+0x3f8>
 800e312:	eddf 1ab0 	vldr	s3, [pc, #704]	; 800e5d4 <mode_Tuning0+0x3e0>
 800e316:	ed9f 1aac 	vldr	s2, [pc, #688]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e31a:	eddf 0aab 	vldr	s1, [pc, #684]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e31e:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800e5d4 <mode_Tuning0+0x3e0>
 800e322:	f7f4 fee3 	bl	80030ec <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 800e326:	e1c3      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 2://壁制御
			record_mode=6;
 800e328:	4ba4      	ldr	r3, [pc, #656]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e32a:	2206      	movs	r2, #6
 800e32c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 800e32e:	2301      	movs	r3, #1
 800e330:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 800e332:	68b8      	ldr	r0, [r7, #8]
 800e334:	ed9f 2aae 	vldr	s4, [pc, #696]	; 800e5f0 <mode_Tuning0+0x3fc>
 800e338:	eddf 1aae 	vldr	s3, [pc, #696]	; 800e5f4 <mode_Tuning0+0x400>
 800e33c:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e340:	eddf 0aa1 	vldr	s1, [pc, #644]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e344:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800e5f8 <mode_Tuning0+0x404>
 800e348:	f7f4 fed0 	bl	80030ec <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 800e34c:	e1b0      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,0,0,0,0,0);
 800e34e:	4cab      	ldr	r4, [pc, #684]	; (800e5fc <mode_Tuning0+0x408>)
 800e350:	2300      	movs	r3, #0
 800e352:	9351      	str	r3, [sp, #324]	; 0x144
 800e354:	2300      	movs	r3, #0
 800e356:	9350      	str	r3, [sp, #320]	; 0x140
 800e358:	2300      	movs	r3, #0
 800e35a:	934f      	str	r3, [sp, #316]	; 0x13c
 800e35c:	2300      	movs	r3, #0
 800e35e:	934e      	str	r3, [sp, #312]	; 0x138
 800e360:	4668      	mov	r0, sp
 800e362:	f104 0310 	add.w	r3, r4, #16
 800e366:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e36a:	4619      	mov	r1, r3
 800e36c:	f009 f916 	bl	801759c <memcpy>
 800e370:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e374:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e378:	f7ff fafe 	bl	800d978 <testturning>
		break;
 800e37c:	e198      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 800e37e:	4c9f      	ldr	r4, [pc, #636]	; (800e5fc <mode_Tuning0+0x408>)
 800e380:	2300      	movs	r3, #0
 800e382:	9351      	str	r3, [sp, #324]	; 0x144
 800e384:	2300      	movs	r3, #0
 800e386:	9350      	str	r3, [sp, #320]	; 0x140
 800e388:	2300      	movs	r3, #0
 800e38a:	934f      	str	r3, [sp, #316]	; 0x13c
 800e38c:	2301      	movs	r3, #1
 800e38e:	934e      	str	r3, [sp, #312]	; 0x138
 800e390:	4668      	mov	r0, sp
 800e392:	f104 0310 	add.w	r3, r4, #16
 800e396:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e39a:	4619      	mov	r1, r3
 800e39c:	f009 f8fe 	bl	801759c <memcpy>
 800e3a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e3a4:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e3a8:	f7ff fae6 	bl	800d978 <testturning>
		break;
 800e3ac:	e180      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 5://直進(制御なし)
			record_mode=7;
 800e3ae:	4b83      	ldr	r3, [pc, #524]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e3b0:	2207      	movs	r2, #7
 800e3b2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	723b      	strb	r3, [r7, #8]
			straight_table2(180, 0, 0, 300, 6000,mode);
 800e3b8:	68b8      	ldr	r0, [r7, #8]
 800e3ba:	ed9f 2a8d 	vldr	s4, [pc, #564]	; 800e5f0 <mode_Tuning0+0x3fc>
 800e3be:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800e5f4 <mode_Tuning0+0x400>
 800e3c2:	ed9f 1a81 	vldr	s2, [pc, #516]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e3c6:	eddf 0a80 	vldr	s1, [pc, #512]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e3ca:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800e5d8 <mode_Tuning0+0x3e4>
 800e3ce:	f7f4 fe8d 	bl	80030ec <straight_table2>
		break;
 800e3d2:	e16d      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 800e3d4:	4b79      	ldr	r3, [pc, #484]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e3d6:	2207      	movs	r2, #7
 800e3d8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 800e3de:	68b8      	ldr	r0, [r7, #8]
 800e3e0:	ed9f 2a83 	vldr	s4, [pc, #524]	; 800e5f0 <mode_Tuning0+0x3fc>
 800e3e4:	eddf 1a86 	vldr	s3, [pc, #536]	; 800e600 <mode_Tuning0+0x40c>
 800e3e8:	ed9f 1a77 	vldr	s2, [pc, #476]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e3ec:	eddf 0a76 	vldr	s1, [pc, #472]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e3f0:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800e604 <mode_Tuning0+0x410>
 800e3f4:	f7f4 fe7a 	bl	80030ec <straight_table2>
		break;
 800e3f8:	e15a      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 800e3fa:	4b70      	ldr	r3, [pc, #448]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e3fc:	2207      	movs	r2, #7
 800e3fe:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 800e400:	2303      	movs	r3, #3
 800e402:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 800e404:	68b8      	ldr	r0, [r7, #8]
 800e406:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 800e5f0 <mode_Tuning0+0x3fc>
 800e40a:	eddf 1a75 	vldr	s3, [pc, #468]	; 800e5e0 <mode_Tuning0+0x3ec>
 800e40e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e412:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e416:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800e604 <mode_Tuning0+0x410>
 800e41a:	f7f4 fe67 	bl	80030ec <straight_table2>
		break;
 800e41e:	e147      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 8://宴会芸
			record_mode=2;
 800e420:	4b66      	ldr	r3, [pc, #408]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e422:	2202      	movs	r2, #2
 800e424:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 800e426:	2001      	movs	r0, #1
 800e428:	f7f8 ffaa 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e42c:	2001      	movs	r0, #1
 800e42e:	f7f8 ffb9 	bl	80073a4 <pl_l_blue_LED>
			no_angle();
 800e432:	f7f5 fd09 	bl	8003e48 <no_angle>
			pl_r_blue_LED(OFF);
 800e436:	2000      	movs	r0, #0
 800e438:	f7f8 ffa2 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e43c:	2000      	movs	r0, #0
 800e43e:	f7f8 ffb1 	bl	80073a4 <pl_l_blue_LED>
		break;
 800e442:	e135      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 9://システム同定enc
			record_mode=6;
 800e444:	4b5d      	ldr	r3, [pc, #372]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e446:	2206      	movs	r2, #6
 800e448:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 800e44a:	2001      	movs	r0, #1
 800e44c:	f7f8 ff98 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e450:	2001      	movs	r0, #1
 800e452:	f7f8 ffa7 	bl	80073a4 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 800e456:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 800e600 <mode_Tuning0+0x40c>
 800e45a:	eddf 1a66 	vldr	s3, [pc, #408]	; 800e5f4 <mode_Tuning0+0x400>
 800e45e:	ed9f 1a65 	vldr	s2, [pc, #404]	; 800e5f4 <mode_Tuning0+0x400>
 800e462:	eddf 0a59 	vldr	s1, [pc, #356]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e466:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800e608 <mode_Tuning0+0x414>
 800e46a:	f7f5 fdfd 	bl	8004068 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 800e46e:	ed9f 2a67 	vldr	s4, [pc, #412]	; 800e60c <mode_Tuning0+0x418>
 800e472:	eddf 1a67 	vldr	s3, [pc, #412]	; 800e610 <mode_Tuning0+0x41c>
 800e476:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800e610 <mode_Tuning0+0x41c>
 800e47a:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800e5f4 <mode_Tuning0+0x400>
 800e47e:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800e608 <mode_Tuning0+0x414>
 800e482:	f7f5 fdf1 	bl	8004068 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 800e486:	ed9f 2a61 	vldr	s4, [pc, #388]	; 800e60c <mode_Tuning0+0x418>
 800e48a:	eddf 1a61 	vldr	s3, [pc, #388]	; 800e610 <mode_Tuning0+0x41c>
 800e48e:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800e5f4 <mode_Tuning0+0x400>
 800e492:	eddf 0a5f 	vldr	s1, [pc, #380]	; 800e610 <mode_Tuning0+0x41c>
 800e496:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800e608 <mode_Tuning0+0x414>
 800e49a:	f7f5 fde5 	bl	8004068 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 800e49e:	ed9f 2a58 	vldr	s4, [pc, #352]	; 800e600 <mode_Tuning0+0x40c>
 800e4a2:	eddf 1a54 	vldr	s3, [pc, #336]	; 800e5f4 <mode_Tuning0+0x400>
 800e4a6:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e4aa:	eddf 0a52 	vldr	s1, [pc, #328]	; 800e5f4 <mode_Tuning0+0x400>
 800e4ae:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800e608 <mode_Tuning0+0x414>
 800e4b2:	f7f5 fdd9 	bl	8004068 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	f7f8 ff62 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e4bc:	2000      	movs	r0, #0
 800e4be:	f7f8 ff71 	bl	80073a4 <pl_l_blue_LED>
		break;
 800e4c2:	e0f5      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 10://システム同定gyro
			record_mode=2;
 800e4c4:	4b3d      	ldr	r3, [pc, #244]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 800e4ca:	2001      	movs	r0, #1
 800e4cc:	f7f8 ff58 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	f7f8 ff67 	bl	80073a4 <pl_l_blue_LED>
			turning_table_ff(90, 0, 300, 300, 500);
 800e4d6:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 800e600 <mode_Tuning0+0x40c>
 800e4da:	eddf 1a46 	vldr	s3, [pc, #280]	; 800e5f4 <mode_Tuning0+0x400>
 800e4de:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800e5f4 <mode_Tuning0+0x400>
 800e4e2:	eddf 0a39 	vldr	s1, [pc, #228]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e4e6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e608 <mode_Tuning0+0x414>
 800e4ea:	f7f5 fef5 	bl	80042d8 <turning_table_ff>
			turning_table_ff(90, 300, 600, 600, 1500);
 800e4ee:	ed9f 2a47 	vldr	s4, [pc, #284]	; 800e60c <mode_Tuning0+0x418>
 800e4f2:	eddf 1a47 	vldr	s3, [pc, #284]	; 800e610 <mode_Tuning0+0x41c>
 800e4f6:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800e610 <mode_Tuning0+0x41c>
 800e4fa:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800e5f4 <mode_Tuning0+0x400>
 800e4fe:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800e608 <mode_Tuning0+0x414>
 800e502:	f7f5 fee9 	bl	80042d8 <turning_table_ff>
			turning_table_ff(90, 600, 300, 600, 1500);
 800e506:	ed9f 2a41 	vldr	s4, [pc, #260]	; 800e60c <mode_Tuning0+0x418>
 800e50a:	eddf 1a41 	vldr	s3, [pc, #260]	; 800e610 <mode_Tuning0+0x41c>
 800e50e:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800e5f4 <mode_Tuning0+0x400>
 800e512:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800e610 <mode_Tuning0+0x41c>
 800e516:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e608 <mode_Tuning0+0x414>
 800e51a:	f7f5 fedd 	bl	80042d8 <turning_table_ff>
			turning_table_ff(90, 300, 0, 300, 500);
 800e51e:	ed9f 2a38 	vldr	s4, [pc, #224]	; 800e600 <mode_Tuning0+0x40c>
 800e522:	eddf 1a34 	vldr	s3, [pc, #208]	; 800e5f4 <mode_Tuning0+0x400>
 800e526:	ed9f 1a28 	vldr	s2, [pc, #160]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e52a:	eddf 0a32 	vldr	s1, [pc, #200]	; 800e5f4 <mode_Tuning0+0x400>
 800e52e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800e608 <mode_Tuning0+0x414>
 800e532:	f7f5 fed1 	bl	80042d8 <turning_table_ff>
//					record_mode=0;
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 800e536:	2000      	movs	r0, #0
 800e538:	f7f8 ff22 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e53c:	2000      	movs	r0, #0
 800e53e:	f7f8 ff31 	bl	80073a4 <pl_l_blue_LED>
		break;
 800e542:	e0b5      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 11:
		record_mode=1;
 800e544:	4b1d      	ldr	r3, [pc, #116]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e546:	2201      	movs	r2, #1
 800e548:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	723b      	strb	r3, [r7, #8]
		straight_table2(BACK_TO_CENTER, 0, 0, 300, 6000,mode);
 800e54e:	68b8      	ldr	r0, [r7, #8]
 800e550:	ed9f 2a27 	vldr	s4, [pc, #156]	; 800e5f0 <mode_Tuning0+0x3fc>
 800e554:	eddf 1a27 	vldr	s3, [pc, #156]	; 800e5f4 <mode_Tuning0+0x400>
 800e558:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e55c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e560:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 800e564:	f7f4 fdc2 	bl	80030ec <straight_table2>
		break;
 800e568:	e0a2      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 12:
		record_mode=17;
 800e56a:	4b14      	ldr	r3, [pc, #80]	; (800e5bc <mode_Tuning0+0x3c8>)
 800e56c:	2211      	movs	r2, #17
 800e56e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 800e570:	2300      	movs	r3, #0
 800e572:	60fb      	str	r3, [r7, #12]
 800e574:	e00e      	b.n	800e594 <mode_Tuning0+0x3a0>
		turning_table2(90, 0, 0, 400, 3000);
 800e576:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 800e5ec <mode_Tuning0+0x3f8>
 800e57a:	eddf 1a16 	vldr	s3, [pc, #88]	; 800e5d4 <mode_Tuning0+0x3e0>
 800e57e:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e582:	eddf 0a11 	vldr	s1, [pc, #68]	; 800e5c8 <mode_Tuning0+0x3d4>
 800e586:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800e608 <mode_Tuning0+0x414>
 800e58a:	f7f5 fa59 	bl	8003a40 <turning_table2>
		for(int i=0;i<40;i++){
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3301      	adds	r3, #1
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b27      	cmp	r3, #39	; 0x27
 800e598:	dded      	ble.n	800e576 <mode_Tuning0+0x382>
		}
		break;
 800e59a:	e089      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 13:
			pl_r_blue_LED(ON);
 800e59c:	2001      	movs	r0, #1
 800e59e:	f7f8 feef 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e5a2:	2001      	movs	r0, #1
 800e5a4:	f7f8 fefe 	bl	80073a4 <pl_l_blue_LED>
			no_frontwall_straight();
 800e5a8:	f7f5 fd26 	bl	8003ff8 <no_frontwall_straight>
			pl_r_blue_LED(OFF);
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	f7f8 fee7 	bl	8007380 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	f7f8 fef6 	bl	80073a4 <pl_l_blue_LED>
		break;
 800e5b8:	e07a      	b.n	800e6b0 <mode_Tuning0+0x4bc>
 800e5ba:	bf00      	nop
 800e5bc:	2000c388 	.word	0x2000c388
 800e5c0:	464b2000 	.word	0x464b2000
 800e5c4:	44c80000 	.word	0x44c80000
 800e5c8:	00000000 	.word	0x00000000
 800e5cc:	44070000 	.word	0x44070000
 800e5d0:	457a0000 	.word	0x457a0000
 800e5d4:	43c80000 	.word	0x43c80000
 800e5d8:	43340000 	.word	0x43340000
 800e5dc:	466a6000 	.word	0x466a6000
 800e5e0:	44fa0000 	.word	0x44fa0000
 800e5e4:	469c4000 	.word	0x469c4000
 800e5e8:	45160000 	.word	0x45160000
 800e5ec:	453b8000 	.word	0x453b8000
 800e5f0:	45bb8000 	.word	0x45bb8000
 800e5f4:	43960000 	.word	0x43960000
 800e5f8:	44340000 	.word	0x44340000
 800e5fc:	2000c548 	.word	0x2000c548
 800e600:	43fa0000 	.word	0x43fa0000
 800e604:	443eeb39 	.word	0x443eeb39
 800e608:	42b40000 	.word	0x42b40000
 800e60c:	44bb8000 	.word	0x44bb8000
 800e610:	44160000 	.word	0x44160000
		case 14://宴会芸＋吸引
			highspeed_mode = 1;
 800e614:	4b43      	ldr	r3, [pc, #268]	; (800e724 <mode_Tuning0+0x530>)
 800e616:	2201      	movs	r2, #1
 800e618:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.95);
 800e61a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800e728 <mode_Tuning0+0x534>
 800e61e:	f7f9 f9f9 	bl	8007a14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 800e622:	f7f9 f9e3 	bl	80079ec <pl_FunMotor_start>
			HAL_Delay(600);
 800e626:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e62a:	f001 ff4d 	bl	80104c8 <HAL_Delay>
			reset_gyro();
 800e62e:	f7f3 f8e7 	bl	8001800 <reset_gyro>
			reset_speed();
 800e632:	f7f2 fcf1 	bl	8001018 <reset_speed>
			reset_distance();
 800e636:	f7f2 fcb1 	bl	8000f9c <reset_distance>
			clear_Ierror();
 800e63a:	f7f6 fa0f 	bl	8004a5c <clear_Ierror>
			record_mode=3;
 800e63e:	4b3b      	ldr	r3, [pc, #236]	; (800e72c <mode_Tuning0+0x538>)
 800e640:	2203      	movs	r2, #3
 800e642:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 800e644:	2301      	movs	r3, #1
 800e646:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 1000, 7000,mode);
 800e648:	68b8      	ldr	r0, [r7, #8]
 800e64a:	ed9f 2a39 	vldr	s4, [pc, #228]	; 800e730 <mode_Tuning0+0x53c>
 800e64e:	eddf 1a39 	vldr	s3, [pc, #228]	; 800e734 <mode_Tuning0+0x540>
 800e652:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800e738 <mode_Tuning0+0x544>
 800e656:	eddf 0a38 	vldr	s1, [pc, #224]	; 800e738 <mode_Tuning0+0x544>
 800e65a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800e73c <mode_Tuning0+0x548>
 800e65e:	f7f4 fd45 	bl	80030ec <straight_table2>
		break;
 800e662:	e025      	b.n	800e6b0 <mode_Tuning0+0x4bc>
		case 15:
			highspeed_mode = 1;
 800e664:	4b2f      	ldr	r3, [pc, #188]	; (800e724 <mode_Tuning0+0x530>)
 800e666:	2201      	movs	r2, #1
 800e668:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 800e66a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800e728 <mode_Tuning0+0x534>
 800e66e:	f7f9 f9d1 	bl	8007a14 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 800e672:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e676:	f001 ff27 	bl	80104c8 <HAL_Delay>
						reset_gyro();
 800e67a:	f7f3 f8c1 	bl	8001800 <reset_gyro>
						reset_speed();
 800e67e:	f7f2 fccb 	bl	8001018 <reset_speed>
						reset_distance();
 800e682:	f7f2 fc8b 	bl	8000f9c <reset_distance>
						clear_Ierror();
 800e686:	f7f6 f9e9 	bl	8004a5c <clear_Ierror>
						record_mode=3;
 800e68a:	4b28      	ldr	r3, [pc, #160]	; (800e72c <mode_Tuning0+0x538>)
 800e68c:	2203      	movs	r2, #3
 800e68e:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 800e690:	2301      	movs	r3, #1
 800e692:	723b      	strb	r3, [r7, #8]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 800e694:	68b8      	ldr	r0, [r7, #8]
 800e696:	ed9f 2a26 	vldr	s4, [pc, #152]	; 800e730 <mode_Tuning0+0x53c>
 800e69a:	eddf 1a26 	vldr	s3, [pc, #152]	; 800e734 <mode_Tuning0+0x540>
 800e69e:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e738 <mode_Tuning0+0x544>
 800e6a2:	eddf 0a25 	vldr	s1, [pc, #148]	; 800e738 <mode_Tuning0+0x544>
 800e6a6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800e73c <mode_Tuning0+0x548>
 800e6aa:	f7f4 fd1f 	bl	80030ec <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 800e6ae:	bf00      	nop
	}
	record_mode=0;
 800e6b0:	4b1e      	ldr	r3, [pc, #120]	; (800e72c <mode_Tuning0+0x538>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e6b6:	2003      	movs	r0, #3
 800e6b8:	f7f9 f940 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e6bc:	2003      	movs	r0, #3
 800e6be:	f7f9 f915 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800e6c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e6c6:	f7f9 fc0b 	bl	8007ee0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800e6ca:	f7f9 f999 	bl	8007a00 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800e6ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e6d2:	f7f9 fc05 	bl	8007ee0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	f7f9 f8fe 	bl	80078d8 <pl_DriveMotor_standby>
	record_mode=0;
 800e6dc:	4b13      	ldr	r3, [pc, #76]	; (800e72c <mode_Tuning0+0x538>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e6e2:	e002      	b.n	800e6ea <mode_Tuning0+0x4f6>
		HAL_Delay(1);
 800e6e4:	2001      	movs	r0, #1
 800e6e6:	f001 feef 	bl	80104c8 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e6ea:	4b15      	ldr	r3, [pc, #84]	; (800e740 <mode_Tuning0+0x54c>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e6f2:	ddf7      	ble.n	800e6e4 <mode_Tuning0+0x4f0>
 800e6f4:	4b12      	ldr	r3, [pc, #72]	; (800e740 <mode_Tuning0+0x54c>)
 800e6f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e6fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e6fe:	ddf1      	ble.n	800e6e4 <mode_Tuning0+0x4f0>
 800e700:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <mode_Tuning0+0x54c>)
 800e702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e706:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e70a:	ddeb      	ble.n	800e6e4 <mode_Tuning0+0x4f0>
	}
	pl_r_blue_LED(ON);
 800e70c:	2001      	movs	r0, #1
 800e70e:	f7f8 fe37 	bl	8007380 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 800e712:	2001      	movs	r0, #1
 800e714:	f7f8 fe46 	bl	80073a4 <pl_l_blue_LED>
	record_print();
 800e718:	f000 faa4 	bl	800ec64 <record_print>



}
 800e71c:	bf00      	nop
 800e71e:	3714      	adds	r7, #20
 800e720:	46bd      	mov	sp, r7
 800e722:	bd90      	pop	{r4, r7, pc}
 800e724:	200007e8 	.word	0x200007e8
 800e728:	3f733333 	.word	0x3f733333
 800e72c:	2000c388 	.word	0x2000c388
 800e730:	45dac000 	.word	0x45dac000
 800e734:	447a0000 	.word	0x447a0000
 800e738:	00000000 	.word	0x00000000
 800e73c:	44340000 	.word	0x44340000
 800e740:	20000298 	.word	0x20000298

0800e744 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	4603      	mov	r3, r0
 800e74c:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 800e74e:	2300      	movs	r3, #0
 800e750:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 800e752:	2300      	movs	r3, #0
 800e754:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 800e756:	2300      	movs	r3, #0
 800e758:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 800e75e:	2001      	movs	r0, #1
 800e760:	f7f9 f8ba 	bl	80078d8 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e764:	2003      	movs	r0, #3
 800e766:	f7f9 f8c1 	bl	80078ec <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e76a:	2003      	movs	r0, #3
 800e76c:	f7f9 f8e6 	bl	800793c <pl_R_DriveMotor_mode>
	reset_gyro();
 800e770:	f7f3 f846 	bl	8001800 <reset_gyro>
	reset_speed();
 800e774:	f7f2 fc50 	bl	8001018 <reset_speed>
	clear_Ierror();
 800e778:	f7f6 f970 	bl	8004a5c <clear_Ierror>

	switch (main_modeR) {
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	2b0f      	cmp	r3, #15
 800e780:	f200 81ad 	bhi.w	800eade <mode_WallSensorTuning+0x39a>
 800e784:	a201      	add	r2, pc, #4	; (adr r2, 800e78c <mode_WallSensorTuning+0x48>)
 800e786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e78a:	bf00      	nop
 800e78c:	0800e7cd 	.word	0x0800e7cd
 800e790:	0800e7f3 	.word	0x0800e7f3
 800e794:	0800e80b 	.word	0x0800e80b
 800e798:	0800e881 	.word	0x0800e881
 800e79c:	0800e8f7 	.word	0x0800e8f7
 800e7a0:	0800e967 	.word	0x0800e967
 800e7a4:	0800e9d7 	.word	0x0800e9d7
 800e7a8:	0800e9fd 	.word	0x0800e9fd
 800e7ac:	0800ea23 	.word	0x0800ea23
 800e7b0:	0800ea49 	.word	0x0800ea49
 800e7b4:	0800eadf 	.word	0x0800eadf
 800e7b8:	0800eadf 	.word	0x0800eadf
 800e7bc:	0800eadf 	.word	0x0800eadf
 800e7c0:	0800eadf 	.word	0x0800eadf
 800e7c4:	0800eadf 	.word	0x0800eadf
 800e7c8:	0800ea6f 	.word	0x0800ea6f
		case 0://横壁追従制御
			record_mode=16;
 800e7cc:	4be1      	ldr	r3, [pc, #900]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800e7ce:	2210      	movs	r2, #16
 800e7d0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 800e7d6:	68b8      	ldr	r0, [r7, #8]
 800e7d8:	ed9f 2adf 	vldr	s4, [pc, #892]	; 800eb58 <mode_WallSensorTuning+0x414>
 800e7dc:	eddf 1adf 	vldr	s3, [pc, #892]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e7e0:	ed9f 1adf 	vldr	s2, [pc, #892]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e7e4:	eddf 0ade 	vldr	s1, [pc, #888]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e7e8:	ed9f 0ade 	vldr	s0, [pc, #888]	; 800eb64 <mode_WallSensorTuning+0x420>
 800e7ec:	f7f4 fc7e 	bl	80030ec <straight_table2>
		break;
 800e7f0:	e175      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	e004      	b.n	800e802 <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 800e7f8:	f7f5 fbfe 	bl	8003ff8 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	3301      	adds	r3, #1
 800e800:	60fb      	str	r3, [r7, #12]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2b14      	cmp	r3, #20
 800e806:	ddf7      	ble.n	800e7f8 <mode_WallSensorTuning+0xb4>
			}
		break;
 800e808:	e169      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 2://壁切れ90度
			record_mode = 4;
 800e80a:	4bd2      	ldr	r3, [pc, #840]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800e80c:	2204      	movs	r2, #4
 800e80e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e810:	2300      	movs	r3, #0
 800e812:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e814:	2300      	movs	r3, #0
 800e816:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e818:	2300      	movs	r3, #0
 800e81a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 270, 0, 500, 500,1500,mode);
 800e820:	68b8      	ldr	r0, [r7, #8]
 800e822:	ed9f 2ad1 	vldr	s4, [pc, #836]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e826:	eddf 1acd 	vldr	s3, [pc, #820]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e82a:	ed9f 1acc 	vldr	s2, [pc, #816]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e82e:	eddf 0acc 	vldr	s1, [pc, #816]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e832:	ed9f 0ace 	vldr	s0, [pc, #824]	; 800eb6c <mode_WallSensorTuning+0x428>
 800e836:	f7f4 fc59 	bl	80030ec <straight_table2>
			mode.WallCutMode=1;
 800e83a:	2301      	movs	r3, #1
 800e83c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e83e:	2300      	movs	r3, #0
 800e840:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 800e842:	68b8      	ldr	r0, [r7, #8]
 800e844:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e848:	eddf 1ac4 	vldr	s3, [pc, #784]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e84c:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e850:	eddf 0ac2 	vldr	s1, [pc, #776]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e854:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 800eb70 <mode_WallSensorTuning+0x42c>
 800e858:	f7f4 fc48 	bl	80030ec <straight_table2>
			mode.WallControlMode=0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e860:	2300      	movs	r3, #0
 800e862:	72fb      	strb	r3, [r7, #11]
			straight_table2(90 + 45, 500, 0, 500,1500,mode);
 800e864:	68b8      	ldr	r0, [r7, #8]
 800e866:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e86a:	eddf 1abc 	vldr	s3, [pc, #752]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e86e:	ed9f 1abc 	vldr	s2, [pc, #752]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e872:	eddf 0aba 	vldr	s1, [pc, #744]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e876:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800eb74 <mode_WallSensorTuning+0x430>
 800e87a:	f7f4 fc37 	bl	80030ec <straight_table2>
		break;
 800e87e:	e12e      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 3://壁切れ45度//90°大回り
			record_mode=1;
 800e880:	4bb4      	ldr	r3, [pc, #720]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800e882:	2201      	movs	r2, #1
 800e884:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e886:	2300      	movs	r3, #0
 800e888:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e88e:	2300      	movs	r3, #0
 800e890:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e892:	2300      	movs	r3, #0
 800e894:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 180, 0, 500, 500,1500,mode);
 800e896:	68b8      	ldr	r0, [r7, #8]
 800e898:	ed9f 2ab3 	vldr	s4, [pc, #716]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e89c:	eddf 1aaf 	vldr	s3, [pc, #700]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e8a0:	ed9f 1aae 	vldr	s2, [pc, #696]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e8a4:	eddf 0aae 	vldr	s1, [pc, #696]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e8a8:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800eb78 <mode_WallSensorTuning+0x434>
 800e8ac:	f7f4 fc1e 	bl	80030ec <straight_table2>
			mode.WallCutMode=2;
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 800e8b8:	68b8      	ldr	r0, [r7, #8]
 800e8ba:	ed9f 2aab 	vldr	s4, [pc, #684]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e8be:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e8c2:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e8c6:	eddf 0aa5 	vldr	s1, [pc, #660]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e8ca:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800eb70 <mode_WallSensorTuning+0x42c>
 800e8ce:	f7f4 fc0d 	bl	80030ec <straight_table2>
			mode.WallControlMode=0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 800e8da:	68b8      	ldr	r0, [r7, #8]
 800e8dc:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e8e0:	eddf 1a9e 	vldr	s3, [pc, #632]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e8e4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e8e8:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e8ec:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 800eb74 <mode_WallSensorTuning+0x430>
 800e8f0:	f7f4 fbfc 	bl	80030ec <straight_table2>
		break;
 800e8f4:	e0f3      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 4://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e902:	2300      	movs	r3, #0
 800e904:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 180*sqrt(2), 0, 500, 500,1500,mode);
 800e906:	68b8      	ldr	r0, [r7, #8]
 800e908:	ed9f 2a97 	vldr	s4, [pc, #604]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e90c:	eddf 1a93 	vldr	s3, [pc, #588]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e910:	ed9f 1a92 	vldr	s2, [pc, #584]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e914:	eddf 0a92 	vldr	s1, [pc, #584]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e918:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800eb7c <mode_WallSensorTuning+0x438>
 800e91c:	f7f4 fbe6 	bl	80030ec <straight_table2>
			mode.WallCutMode=3;
 800e920:	2303      	movs	r3, #3
 800e922:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e924:	2300      	movs	r3, #0
 800e926:	723b      	strb	r3, [r7, #8]
			straight_table2(45*sqrt(2), 500, 500, 500,1500,mode);
 800e928:	68b8      	ldr	r0, [r7, #8]
 800e92a:	ed9f 2a8f 	vldr	s4, [pc, #572]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e92e:	eddf 1a8b 	vldr	s3, [pc, #556]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e932:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e936:	eddf 0a89 	vldr	s1, [pc, #548]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e93a:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800eb80 <mode_WallSensorTuning+0x43c>
 800e93e:	f7f4 fbd5 	bl	80030ec <straight_table2>
			mode.WallControlMode=0;
 800e942:	2300      	movs	r3, #0
 800e944:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e946:	2300      	movs	r3, #0
 800e948:	72fb      	strb	r3, [r7, #11]
			straight_table2(90*sqrt(2) + 45*sqrt(2), 500, 0, 500,1500,mode);
 800e94a:	68b8      	ldr	r0, [r7, #8]
 800e94c:	ed9f 2a86 	vldr	s4, [pc, #536]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e950:	eddf 1a82 	vldr	s3, [pc, #520]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e954:	ed9f 1a82 	vldr	s2, [pc, #520]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e958:	eddf 0a80 	vldr	s1, [pc, #512]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e95c:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800eb84 <mode_WallSensorTuning+0x440>
 800e960:	f7f4 fbc4 	bl	80030ec <straight_table2>
		break;
 800e964:	e0bb      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 800e966:	2300      	movs	r3, #0
 800e968:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e96e:	2300      	movs	r3, #0
 800e970:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e972:	2300      	movs	r3, #0
 800e974:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+180*sqrt(2), 0, 500, 500,1500,mode);
 800e976:	68b8      	ldr	r0, [r7, #8]
 800e978:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e97c:	eddf 1a77 	vldr	s3, [pc, #476]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e980:	ed9f 1a76 	vldr	s2, [pc, #472]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e984:	eddf 0a76 	vldr	s1, [pc, #472]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e988:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800eb7c <mode_WallSensorTuning+0x438>
 800e98c:	f7f4 fbae 	bl	80030ec <straight_table2>
			mode.WallCutMode=4;
 800e990:	2304      	movs	r3, #4
 800e992:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e994:	2300      	movs	r3, #0
 800e996:	723b      	strb	r3, [r7, #8]
			straight_table2(45*sqrt(2), 500, 500, 500,1500,mode);
 800e998:	68b8      	ldr	r0, [r7, #8]
 800e99a:	ed9f 2a73 	vldr	s4, [pc, #460]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e99e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e9a2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e9a6:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e9aa:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800eb80 <mode_WallSensorTuning+0x43c>
 800e9ae:	f7f4 fb9d 	bl	80030ec <straight_table2>
			mode.WallControlMode=0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	72fb      	strb	r3, [r7, #11]
			straight_table2(90*sqrt(2) + 45*sqrt(2), 500, 0, 500,1500,mode);
 800e9ba:	68b8      	ldr	r0, [r7, #8]
 800e9bc:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 800eb68 <mode_WallSensorTuning+0x424>
 800e9c0:	eddf 1a66 	vldr	s3, [pc, #408]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e9c4:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e9c8:	eddf 0a64 	vldr	s1, [pc, #400]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e9cc:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800eb84 <mode_WallSensorTuning+0x440>
 800e9d0:	f7f4 fb8c 	bl	80030ec <straight_table2>
		break;
 800e9d4:	e083      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 6://斜め直進(制御あり)
			record_mode=7;
 800e9d6:	4b5f      	ldr	r3, [pc, #380]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800e9d8:	2207      	movs	r2, #7
 800e9da:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 800e9e0:	68b8      	ldr	r0, [r7, #8]
 800e9e2:	ed9f 2a69 	vldr	s4, [pc, #420]	; 800eb88 <mode_WallSensorTuning+0x444>
 800e9e6:	eddf 1a5d 	vldr	s3, [pc, #372]	; 800eb5c <mode_WallSensorTuning+0x418>
 800e9ea:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e9ee:	eddf 0a5c 	vldr	s1, [pc, #368]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800e9f2:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800eb8c <mode_WallSensorTuning+0x448>
 800e9f6:	f7f4 fb79 	bl	80030ec <straight_table2>
		break;
 800e9fa:	e070      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 800e9fc:	4b55      	ldr	r3, [pc, #340]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800e9fe:	2209      	movs	r2, #9
 800ea00:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 800ea06:	68b8      	ldr	r0, [r7, #8]
 800ea08:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 800eb88 <mode_WallSensorTuning+0x444>
 800ea0c:	eddf 1a53 	vldr	s3, [pc, #332]	; 800eb5c <mode_WallSensorTuning+0x418>
 800ea10:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ea14:	eddf 0a52 	vldr	s1, [pc, #328]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ea18:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800eb8c <mode_WallSensorTuning+0x448>
 800ea1c:	f7f4 fb66 	bl	80030ec <straight_table2>

		break;
 800ea20:	e05d      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 800ea22:	4b4c      	ldr	r3, [pc, #304]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800ea24:	2207      	movs	r2, #7
 800ea26:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 800ea28:	2303      	movs	r3, #3
 800ea2a:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 15000,mode);
 800ea2c:	68b8      	ldr	r0, [r7, #8]
 800ea2e:	ed9f 2a58 	vldr	s4, [pc, #352]	; 800eb90 <mode_WallSensorTuning+0x44c>
 800ea32:	eddf 1a58 	vldr	s3, [pc, #352]	; 800eb94 <mode_WallSensorTuning+0x450>
 800ea36:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ea3a:	eddf 0a49 	vldr	s1, [pc, #292]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ea3e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800eb8c <mode_WallSensorTuning+0x448>
 800ea42:	f7f4 fb53 	bl	80030ec <straight_table2>
		break;
 800ea46:	e04a      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 9:
			record_mode=8;
 800ea48:	4b42      	ldr	r3, [pc, #264]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800ea4a:	2208      	movs	r2, #8
 800ea4c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 800ea52:	68b8      	ldr	r0, [r7, #8]
 800ea54:	ed9f 2a50 	vldr	s4, [pc, #320]	; 800eb98 <mode_WallSensorTuning+0x454>
 800ea58:	eddf 1a50 	vldr	s3, [pc, #320]	; 800eb9c <mode_WallSensorTuning+0x458>
 800ea5c:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ea60:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ea64:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800eba0 <mode_WallSensorTuning+0x45c>
 800ea68:	f7f4 fb40 	bl	80030ec <straight_table2>
		break;
 800ea6c:	e037      	b.n	800eade <mode_WallSensorTuning+0x39a>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 800ea6e:	2305      	movs	r3, #5
 800ea70:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800ea72:	2300      	movs	r3, #0
 800ea74:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 800ea7e:	68b8      	ldr	r0, [r7, #8]
 800ea80:	ed9f 2a39 	vldr	s4, [pc, #228]	; 800eb68 <mode_WallSensorTuning+0x424>
 800ea84:	eddf 1a35 	vldr	s3, [pc, #212]	; 800eb5c <mode_WallSensorTuning+0x418>
 800ea88:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800eb5c <mode_WallSensorTuning+0x418>
 800ea8c:	eddf 0a34 	vldr	s1, [pc, #208]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ea90:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800eba4 <mode_WallSensorTuning+0x460>
 800ea94:	f7f4 fb2a 	bl	80030ec <straight_table2>
			mode.WallCutMode=2;
 800ea98:	2302      	movs	r3, #2
 800ea9a:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 800eaa0:	68b8      	ldr	r0, [r7, #8]
 800eaa2:	ed9f 2a31 	vldr	s4, [pc, #196]	; 800eb68 <mode_WallSensorTuning+0x424>
 800eaa6:	eddf 1a2d 	vldr	s3, [pc, #180]	; 800eb5c <mode_WallSensorTuning+0x418>
 800eaaa:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800eb5c <mode_WallSensorTuning+0x418>
 800eaae:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800eb5c <mode_WallSensorTuning+0x418>
 800eab2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800eb70 <mode_WallSensorTuning+0x42c>
 800eab6:	f7f4 fb19 	bl	80030ec <straight_table2>
			mode.WallControlMode=0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 800eac2:	68b8      	ldr	r0, [r7, #8]
 800eac4:	ed9f 2a28 	vldr	s4, [pc, #160]	; 800eb68 <mode_WallSensorTuning+0x424>
 800eac8:	eddf 1a24 	vldr	s3, [pc, #144]	; 800eb5c <mode_WallSensorTuning+0x418>
 800eacc:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800eb60 <mode_WallSensorTuning+0x41c>
 800ead0:	eddf 0a22 	vldr	s1, [pc, #136]	; 800eb5c <mode_WallSensorTuning+0x418>
 800ead4:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800eb74 <mode_WallSensorTuning+0x430>
 800ead8:	f7f4 fb08 	bl	80030ec <straight_table2>
		break;
 800eadc:	bf00      	nop
	}
	record_mode=0;
 800eade:	4b1d      	ldr	r3, [pc, #116]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eae4:	2003      	movs	r0, #3
 800eae6:	f7f8 ff29 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eaea:	2003      	movs	r0, #3
 800eaec:	f7f8 fefe 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800eaf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eaf4:	f7f9 f9f4 	bl	8007ee0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800eaf8:	f7f8 ff82 	bl	8007a00 <pl_FunMotor_stop>
	record_mode=0;
 800eafc:	4b15      	ldr	r3, [pc, #84]	; (800eb54 <mode_WallSensorTuning+0x410>)
 800eafe:	2200      	movs	r2, #0
 800eb00:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 800eb02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eb06:	f7f9 f9eb 	bl	8007ee0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	f7f8 fee4 	bl	80078d8 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800eb10:	e002      	b.n	800eb18 <mode_WallSensorTuning+0x3d4>
		HAL_Delay(1);
 800eb12:	2001      	movs	r0, #1
 800eb14:	f001 fcd8 	bl	80104c8 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800eb18:	4b23      	ldr	r3, [pc, #140]	; (800eba8 <mode_WallSensorTuning+0x464>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800eb20:	ddf7      	ble.n	800eb12 <mode_WallSensorTuning+0x3ce>
 800eb22:	4b21      	ldr	r3, [pc, #132]	; (800eba8 <mode_WallSensorTuning+0x464>)
 800eb24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eb28:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800eb2c:	ddf1      	ble.n	800eb12 <mode_WallSensorTuning+0x3ce>
 800eb2e:	4b1e      	ldr	r3, [pc, #120]	; (800eba8 <mode_WallSensorTuning+0x464>)
 800eb30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800eb34:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800eb38:	ddeb      	ble.n	800eb12 <mode_WallSensorTuning+0x3ce>
	}
	pl_r_blue_LED(ON);
 800eb3a:	2001      	movs	r0, #1
 800eb3c:	f7f8 fc20 	bl	8007380 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 800eb40:	2001      	movs	r0, #1
 800eb42:	f7f8 fc2f 	bl	80073a4 <pl_l_blue_LED>
	record_print();
 800eb46:	f000 f88d 	bl	800ec64 <record_print>



}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	2000c388 	.word	0x2000c388
 800eb58:	459c4000 	.word	0x459c4000
 800eb5c:	43fa0000 	.word	0x43fa0000
 800eb60:	00000000 	.word	0x00000000
 800eb64:	44b40000 	.word	0x44b40000
 800eb68:	44bb8000 	.word	0x44bb8000
 800eb6c:	43938000 	.word	0x43938000
 800eb70:	42340000 	.word	0x42340000
 800eb74:	43070000 	.word	0x43070000
 800eb78:	43470000 	.word	0x43470000
 800eb7c:	4397477b 	.word	0x4397477b
 800eb80:	427e8ef6 	.word	0x427e8ef6
 800eb84:	433eeb39 	.word	0x433eeb39
 800eb88:	45bb8000 	.word	0x45bb8000
 800eb8c:	443eeb39 	.word	0x443eeb39
 800eb90:	466a6000 	.word	0x466a6000
 800eb94:	44fa0000 	.word	0x44fa0000
 800eb98:	461c4000 	.word	0x461c4000
 800eb9c:	442f0000 	.word	0x442f0000
 800eba0:	4485477b 	.word	0x4485477b
 800eba4:	434d0000 	.word	0x434d0000
 800eba8:	20000298 	.word	0x20000298

0800ebac <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 800ebac:	b480      	push	{r7}
 800ebae:	af00      	add	r7, sp, #0
	record_mode = 0;
 800ebb0:	4b06      	ldr	r3, [pc, #24]	; (800ebcc <record_reset+0x20>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 800ebb6:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <record_reset+0x24>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 800ebbc:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <record_reset+0x28>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	701a      	strb	r2, [r3, #0]
}
 800ebc2:	bf00      	nop
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	2000c388 	.word	0x2000c388
 800ebd0:	2000c38c 	.word	0x2000c38c
 800ebd4:	2000c394 	.word	0x2000c394

0800ebd8 <record_data>:

void record_data(float *input_record_data, int numlen) {
 800ebd8:	b490      	push	{r4, r7}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60fb      	str	r3, [r7, #12]
 800ebe6:	e013      	b.n	800ec10 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 800ebf0:	4b18      	ldr	r3, [pc, #96]	; (800ec54 <record_data+0x7c>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 800ebf4:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 800ebf6:	4818      	ldr	r0, [pc, #96]	; (800ec58 <record_data+0x80>)
 800ebf8:	68f9      	ldr	r1, [r7, #12]
 800ebfa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800ebfe:	fb04 f101 	mul.w	r1, r4, r1
 800ec02:	440b      	add	r3, r1
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	4403      	add	r3, r0
 800ec08:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	dbe7      	blt.n	800ebe8 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 800ec18:	4b10      	ldr	r3, [pc, #64]	; (800ec5c <record_data+0x84>)
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d103      	bne.n	800ec28 <record_data+0x50>
		record_end_point = record_time;
 800ec20:	4b0c      	ldr	r3, [pc, #48]	; (800ec54 <record_data+0x7c>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4a0e      	ldr	r2, [pc, #56]	; (800ec60 <record_data+0x88>)
 800ec26:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 800ec28:	4b0a      	ldr	r3, [pc, #40]	; (800ec54 <record_data+0x7c>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	4a09      	ldr	r2, [pc, #36]	; (800ec54 <record_data+0x7c>)
 800ec30:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 800ec32:	4b08      	ldr	r3, [pc, #32]	; (800ec54 <record_data+0x7c>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	dd05      	ble.n	800ec4a <record_data+0x72>
		record_time = 0;
 800ec3e:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <record_data+0x7c>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 800ec44:	4b05      	ldr	r3, [pc, #20]	; (800ec5c <record_data+0x84>)
 800ec46:	2201      	movs	r2, #1
 800ec48:	701a      	strb	r2, [r3, #0]
	}

}
 800ec4a:	bf00      	nop
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bc90      	pop	{r4, r7}
 800ec52:	4770      	bx	lr
 800ec54:	2000c38c 	.word	0x2000c38c
 800ec58:	20000808 	.word	0x20000808
 800ec5c:	2000c394 	.word	0x2000c394
 800ec60:	2000c390 	.word	0x2000c390

0800ec64 <record_print>:

void record_print(void) {
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 800ec6a:	4b3a      	ldr	r3, [pc, #232]	; (800ed54 <record_print+0xf0>)
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d12e      	bne.n	800ecd0 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 800ec72:	2300      	movs	r3, #0
 800ec74:	60fb      	str	r3, [r7, #12]
 800ec76:	e025      	b.n	800ecc4 <record_print+0x60>

			printf("%d", a);
 800ec78:	68f9      	ldr	r1, [r7, #12]
 800ec7a:	4837      	ldr	r0, [pc, #220]	; (800ed58 <record_print+0xf4>)
 800ec7c:	f009 f90e 	bl	8017e9c <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 800ec80:	2300      	movs	r3, #0
 800ec82:	607b      	str	r3, [r7, #4]
 800ec84:	e015      	b.n	800ecb2 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 800ec86:	4935      	ldr	r1, [pc, #212]	; (800ed5c <record_print+0xf8>)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ec8e:	fb03 f202 	mul.w	r2, r3, r2
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	4413      	add	r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	440b      	add	r3, r1
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7f1 fc7b 	bl	8000598 <__aeabi_f2d>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	482e      	ldr	r0, [pc, #184]	; (800ed60 <record_print+0xfc>)
 800eca8:	f009 f8f8 	bl	8017e9c <iprintf>
					record_count++) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b03      	cmp	r3, #3
 800ecb6:	dde6      	ble.n	800ec86 <record_print+0x22>
			}
			printf("\n");
 800ecb8:	200a      	movs	r0, #10
 800ecba:	f009 f907 	bl	8017ecc <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	4b27      	ldr	r3, [pc, #156]	; (800ed64 <record_print+0x100>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	dbd4      	blt.n	800ec78 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 800ecce:	e03c      	b.n	800ed4a <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	60fb      	str	r3, [r7, #12]
 800ecd4:	e034      	b.n	800ed40 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 800ecd6:	4b24      	ldr	r3, [pc, #144]	; (800ed68 <record_print+0x104>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	4413      	add	r3, r2
 800ece0:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ece8:	4293      	cmp	r3, r2
 800ecea:	dd03      	ble.n	800ecf4 <record_print+0x90>
				time_index -= max_record_time;
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 800ecf2:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 800ecf4:	68f9      	ldr	r1, [r7, #12]
 800ecf6:	4818      	ldr	r0, [pc, #96]	; (800ed58 <record_print+0xf4>)
 800ecf8:	f009 f8d0 	bl	8017e9c <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	603b      	str	r3, [r7, #0]
 800ed00:	e015      	b.n	800ed2e <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 800ed02:	4916      	ldr	r1, [pc, #88]	; (800ed5c <record_print+0xf8>)
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ed0a:	fb03 f202 	mul.w	r2, r3, r2
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	4413      	add	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	440b      	add	r3, r1
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7f1 fc3d 	bl	8000598 <__aeabi_f2d>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	460b      	mov	r3, r1
 800ed22:	480f      	ldr	r0, [pc, #60]	; (800ed60 <record_print+0xfc>)
 800ed24:	f009 f8ba 	bl	8017e9c <iprintf>
					record_count++) {
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	2b03      	cmp	r3, #3
 800ed32:	dde6      	ble.n	800ed02 <record_print+0x9e>
			printf("\n");
 800ed34:	200a      	movs	r0, #10
 800ed36:	f009 f8c9 	bl	8017ecc <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ed46:	4293      	cmp	r3, r2
 800ed48:	ddc5      	ble.n	800ecd6 <record_print+0x72>
}
 800ed4a:	bf00      	nop
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	2000c394 	.word	0x2000c394
 800ed58:	0801a63c 	.word	0x0801a63c
 800ed5c:	20000808 	.word	0x20000808
 800ed60:	0801a640 	.word	0x0801a640
 800ed64:	2000c38c 	.word	0x2000c38c
 800ed68:	2000c390 	.word	0x2000c390

0800ed6c <interrupt_record>:

void interrupt_record(void) {
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 800ed72:	4b76      	ldr	r3, [pc, #472]	; (800ef4c <interrupt_record+0x1e0>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d110      	bne.n	800ed9c <interrupt_record+0x30>
			r_data[0] = E_speedR;
 800ed7a:	4b75      	ldr	r3, [pc, #468]	; (800ef50 <interrupt_record+0x1e4>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 800ed80:	4b74      	ldr	r3, [pc, #464]	; (800ef54 <interrupt_record+0x1e8>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 800ed86:	4b74      	ldr	r3, [pc, #464]	; (800ef58 <interrupt_record+0x1ec>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 800ed8c:	4b73      	ldr	r3, [pc, #460]	; (800ef5c <interrupt_record+0x1f0>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800ed92:	463b      	mov	r3, r7
 800ed94:	2104      	movs	r1, #4
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7ff ff1e 	bl	800ebd8 <record_data>
		}
	if (record_mode == 2) {
 800ed9c:	4b6b      	ldr	r3, [pc, #428]	; (800ef4c <interrupt_record+0x1e0>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	2b02      	cmp	r3, #2
 800eda2:	d110      	bne.n	800edc6 <interrupt_record+0x5a>
		r_data[0] = turning.velocity;
 800eda4:	4b6e      	ldr	r3, [pc, #440]	; (800ef60 <interrupt_record+0x1f4>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	603b      	str	r3, [r7, #0]
		r_data[1] = turning.acceleration;
 800edaa:	4b6d      	ldr	r3, [pc, #436]	; (800ef60 <interrupt_record+0x1f4>)
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	607b      	str	r3, [r7, #4]
		r_data[2] = angle_speed;
 800edb0:	4b6c      	ldr	r3, [pc, #432]	; (800ef64 <interrupt_record+0x1f8>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	60bb      	str	r3, [r7, #8]
		r_data[3] = angle; //g_V_R;
 800edb6:	4b6c      	ldr	r3, [pc, #432]	; (800ef68 <interrupt_record+0x1fc>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 800edbc:	463b      	mov	r3, r7
 800edbe:	2104      	movs	r1, #4
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff ff09 	bl	800ebd8 <record_data>
		}
	if (record_mode == 3) {
 800edc6:	4b61      	ldr	r3, [pc, #388]	; (800ef4c <interrupt_record+0x1e0>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	2b03      	cmp	r3, #3
 800edcc:	d126      	bne.n	800ee1c <interrupt_record+0xb0>
			r_data[0] = straight.velocity;
 800edce:	4b67      	ldr	r3, [pc, #412]	; (800ef6c <interrupt_record+0x200>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 800edd4:	4b65      	ldr	r3, [pc, #404]	; (800ef6c <interrupt_record+0x200>)
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 800edda:	4b65      	ldr	r3, [pc, #404]	; (800ef70 <interrupt_record+0x204>)
 800eddc:	ed93 7a00 	vldr	s14, [r3]
 800ede0:	4b64      	ldr	r3, [pc, #400]	; (800ef74 <interrupt_record+0x208>)
 800ede2:	edd3 7a00 	vldr	s15, [r3]
 800ede6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800edee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edf2:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 800edf6:	4b60      	ldr	r3, [pc, #384]	; (800ef78 <interrupt_record+0x20c>)
 800edf8:	ed93 7a00 	vldr	s14, [r3]
 800edfc:	4b5f      	ldr	r3, [pc, #380]	; (800ef7c <interrupt_record+0x210>)
 800edfe:	edd3 7a00 	vldr	s15, [r3]
 800ee02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ee0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee0e:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 800ee12:	463b      	mov	r3, r7
 800ee14:	2104      	movs	r1, #4
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7ff fede 	bl	800ebd8 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 800ee1c:	4b4b      	ldr	r3, [pc, #300]	; (800ef4c <interrupt_record+0x1e0>)
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	2b04      	cmp	r3, #4
 800ee22:	d126      	bne.n	800ee72 <interrupt_record+0x106>
			r_data[0] = straight.displacement;
 800ee24:	4b51      	ldr	r3, [pc, #324]	; (800ef6c <interrupt_record+0x200>)
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 800ee2a:	4b4b      	ldr	r3, [pc, #300]	; (800ef58 <interrupt_record+0x1ec>)
 800ee2c:	ed93 7a00 	vldr	s14, [r3]
 800ee30:	4b4a      	ldr	r3, [pc, #296]	; (800ef5c <interrupt_record+0x1f0>)
 800ee32:	edd3 7a00 	vldr	s15, [r3]
 800ee36:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee3a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ee3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee42:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 800ee46:	4b4e      	ldr	r3, [pc, #312]	; (800ef80 <interrupt_record+0x214>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 800ee4c:	4b4a      	ldr	r3, [pc, #296]	; (800ef78 <interrupt_record+0x20c>)
 800ee4e:	ed93 7a00 	vldr	s14, [r3]
 800ee52:	4b4a      	ldr	r3, [pc, #296]	; (800ef7c <interrupt_record+0x210>)
 800ee54:	edd3 7a00 	vldr	s15, [r3]
 800ee58:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ee60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee64:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 800ee68:	463b      	mov	r3, r7
 800ee6a:	2104      	movs	r1, #4
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7ff feb3 	bl	800ebd8 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 800ee72:	4b36      	ldr	r3, [pc, #216]	; (800ef4c <interrupt_record+0x1e0>)
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	2b05      	cmp	r3, #5
 800ee78:	d110      	bne.n	800ee9c <interrupt_record+0x130>
			r_data[0] = straight.displacement;
 800ee7a:	4b3c      	ldr	r3, [pc, #240]	; (800ef6c <interrupt_record+0x200>)
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 800ee80:	4b35      	ldr	r3, [pc, #212]	; (800ef58 <interrupt_record+0x1ec>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 800ee86:	4b35      	ldr	r3, [pc, #212]	; (800ef5c <interrupt_record+0x1f0>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 800ee8c:	4b3c      	ldr	r3, [pc, #240]	; (800ef80 <interrupt_record+0x214>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800ee92:	463b      	mov	r3, r7
 800ee94:	2104      	movs	r1, #4
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff fe9e 	bl	800ebd8 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 800ee9c:	4b2b      	ldr	r3, [pc, #172]	; (800ef4c <interrupt_record+0x1e0>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	2b05      	cmp	r3, #5
 800eea2:	d110      	bne.n	800eec6 <interrupt_record+0x15a>
			r_data[0] = g_V_L;
 800eea4:	4b37      	ldr	r3, [pc, #220]	; (800ef84 <interrupt_record+0x218>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 800eeaa:	4b2b      	ldr	r3, [pc, #172]	; (800ef58 <interrupt_record+0x1ec>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 800eeb0:	4b2a      	ldr	r3, [pc, #168]	; (800ef5c <interrupt_record+0x1f0>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 800eeb6:	4b32      	ldr	r3, [pc, #200]	; (800ef80 <interrupt_record+0x214>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800eebc:	463b      	mov	r3, r7
 800eebe:	2104      	movs	r1, #4
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7ff fe89 	bl	800ebd8 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 800eec6:	4b21      	ldr	r3, [pc, #132]	; (800ef4c <interrupt_record+0x1e0>)
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b06      	cmp	r3, #6
 800eecc:	d110      	bne.n	800eef0 <interrupt_record+0x184>
				r_data[0] = straight.velocity;
 800eece:	4b27      	ldr	r3, [pc, #156]	; (800ef6c <interrupt_record+0x200>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 800eed4:	4b2c      	ldr	r3, [pc, #176]	; (800ef88 <interrupt_record+0x21c>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 800eeda:	4b2c      	ldr	r3, [pc, #176]	; (800ef8c <interrupt_record+0x220>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 800eee0:	4b2b      	ldr	r3, [pc, #172]	; (800ef90 <interrupt_record+0x224>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 800eee6:	463b      	mov	r3, r7
 800eee8:	2104      	movs	r1, #4
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7ff fe74 	bl	800ebd8 <record_data>
			}
	if (record_mode == 7) {
 800eef0:	4b16      	ldr	r3, [pc, #88]	; (800ef4c <interrupt_record+0x1e0>)
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	2b07      	cmp	r3, #7
 800eef6:	d125      	bne.n	800ef44 <interrupt_record+0x1d8>
			r_data[0] = (float) g_sensor[0][0];
 800eef8:	4b26      	ldr	r3, [pc, #152]	; (800ef94 <interrupt_record+0x228>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	ee07 3a90 	vmov	s15, r3
 800ef00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef04:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[0];
 800ef08:	4b23      	ldr	r3, [pc, #140]	; (800ef98 <interrupt_record+0x22c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	ee07 3a90 	vmov	s15, r3
 800ef10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef14:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[4][0];
 800ef18:	4b1e      	ldr	r3, [pc, #120]	; (800ef94 <interrupt_record+0x228>)
 800ef1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ef1e:	ee07 3a90 	vmov	s15, r3
 800ef22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef26:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[4];
 800ef2a:	4b1b      	ldr	r3, [pc, #108]	; (800ef98 <interrupt_record+0x22c>)
 800ef2c:	691b      	ldr	r3, [r3, #16]
 800ef2e:	ee07 3a90 	vmov	s15, r3
 800ef32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef36:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 800ef3a:	463b      	mov	r3, r7
 800ef3c:	2104      	movs	r1, #4
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7ff fe4a 	bl	800ebd8 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 800ef44:	bf00      	nop
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	2000c388 	.word	0x2000c388
 800ef50:	2000020c 	.word	0x2000020c
 800ef54:	20000208 	.word	0x20000208
 800ef58:	20000204 	.word	0x20000204
 800ef5c:	20000200 	.word	0x20000200
 800ef60:	200004c4 	.word	0x200004c4
 800ef64:	20000248 	.word	0x20000248
 800ef68:	20000244 	.word	0x20000244
 800ef6c:	200004b8 	.word	0x200004b8
 800ef70:	2000023c 	.word	0x2000023c
 800ef74:	20000238 	.word	0x20000238
 800ef78:	20000234 	.word	0x20000234
 800ef7c:	20000230 	.word	0x20000230
 800ef80:	2000025c 	.word	0x2000025c
 800ef84:	2000050c 	.word	0x2000050c
 800ef88:	20000218 	.word	0x20000218
 800ef8c:	2000021c 	.word	0x2000021c
 800ef90:	20000258 	.word	0x20000258
 800ef94:	20000298 	.word	0x20000298
 800ef98:	20000428 	.word	0x20000428

0800ef9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800efa0:	4b1b      	ldr	r3, [pc, #108]	; (800f010 <MX_SPI1_Init+0x74>)
 800efa2:	4a1c      	ldr	r2, [pc, #112]	; (800f014 <MX_SPI1_Init+0x78>)
 800efa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800efa6:	4b1a      	ldr	r3, [pc, #104]	; (800f010 <MX_SPI1_Init+0x74>)
 800efa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800efac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800efae:	4b18      	ldr	r3, [pc, #96]	; (800f010 <MX_SPI1_Init+0x74>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800efb4:	4b16      	ldr	r3, [pc, #88]	; (800f010 <MX_SPI1_Init+0x74>)
 800efb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800efba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800efbc:	4b14      	ldr	r3, [pc, #80]	; (800f010 <MX_SPI1_Init+0x74>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800efc2:	4b13      	ldr	r3, [pc, #76]	; (800f010 <MX_SPI1_Init+0x74>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800efc8:	4b11      	ldr	r3, [pc, #68]	; (800f010 <MX_SPI1_Init+0x74>)
 800efca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800efd0:	4b0f      	ldr	r3, [pc, #60]	; (800f010 <MX_SPI1_Init+0x74>)
 800efd2:	2218      	movs	r2, #24
 800efd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800efd6:	4b0e      	ldr	r3, [pc, #56]	; (800f010 <MX_SPI1_Init+0x74>)
 800efd8:	2200      	movs	r2, #0
 800efda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800efdc:	4b0c      	ldr	r3, [pc, #48]	; (800f010 <MX_SPI1_Init+0x74>)
 800efde:	2200      	movs	r2, #0
 800efe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800efe2:	4b0b      	ldr	r3, [pc, #44]	; (800f010 <MX_SPI1_Init+0x74>)
 800efe4:	2200      	movs	r2, #0
 800efe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800efe8:	4b09      	ldr	r3, [pc, #36]	; (800f010 <MX_SPI1_Init+0x74>)
 800efea:	2207      	movs	r2, #7
 800efec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800efee:	4b08      	ldr	r3, [pc, #32]	; (800f010 <MX_SPI1_Init+0x74>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800eff4:	4b06      	ldr	r3, [pc, #24]	; (800f010 <MX_SPI1_Init+0x74>)
 800eff6:	2208      	movs	r2, #8
 800eff8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800effa:	4805      	ldr	r0, [pc, #20]	; (800f010 <MX_SPI1_Init+0x74>)
 800effc:	f005 f9f0 	bl	80143e0 <HAL_SPI_Init>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800f006:	f7fa fec8 	bl	8009d9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800f00a:	bf00      	nop
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	2000c398 	.word	0x2000c398
 800f014:	40013000 	.word	0x40013000

0800f018 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800f01c:	4b1b      	ldr	r3, [pc, #108]	; (800f08c <MX_SPI3_Init+0x74>)
 800f01e:	4a1c      	ldr	r2, [pc, #112]	; (800f090 <MX_SPI3_Init+0x78>)
 800f020:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800f022:	4b1a      	ldr	r3, [pc, #104]	; (800f08c <MX_SPI3_Init+0x74>)
 800f024:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f028:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800f02a:	4b18      	ldr	r3, [pc, #96]	; (800f08c <MX_SPI3_Init+0x74>)
 800f02c:	2200      	movs	r2, #0
 800f02e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800f030:	4b16      	ldr	r3, [pc, #88]	; (800f08c <MX_SPI3_Init+0x74>)
 800f032:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800f036:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f038:	4b14      	ldr	r3, [pc, #80]	; (800f08c <MX_SPI3_Init+0x74>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f03e:	4b13      	ldr	r3, [pc, #76]	; (800f08c <MX_SPI3_Init+0x74>)
 800f040:	2201      	movs	r2, #1
 800f042:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800f044:	4b11      	ldr	r3, [pc, #68]	; (800f08c <MX_SPI3_Init+0x74>)
 800f046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f04a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f04c:	4b0f      	ldr	r3, [pc, #60]	; (800f08c <MX_SPI3_Init+0x74>)
 800f04e:	2218      	movs	r2, #24
 800f050:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f052:	4b0e      	ldr	r3, [pc, #56]	; (800f08c <MX_SPI3_Init+0x74>)
 800f054:	2200      	movs	r2, #0
 800f056:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800f058:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <MX_SPI3_Init+0x74>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f05e:	4b0b      	ldr	r3, [pc, #44]	; (800f08c <MX_SPI3_Init+0x74>)
 800f060:	2200      	movs	r2, #0
 800f062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800f064:	4b09      	ldr	r3, [pc, #36]	; (800f08c <MX_SPI3_Init+0x74>)
 800f066:	2207      	movs	r2, #7
 800f068:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800f06a:	4b08      	ldr	r3, [pc, #32]	; (800f08c <MX_SPI3_Init+0x74>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800f070:	4b06      	ldr	r3, [pc, #24]	; (800f08c <MX_SPI3_Init+0x74>)
 800f072:	2200      	movs	r2, #0
 800f074:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800f076:	4805      	ldr	r0, [pc, #20]	; (800f08c <MX_SPI3_Init+0x74>)
 800f078:	f005 f9b2 	bl	80143e0 <HAL_SPI_Init>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d001      	beq.n	800f086 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800f082:	f7fa fe8a 	bl	8009d9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800f086:	bf00      	nop
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	2000c3fc 	.word	0x2000c3fc
 800f090:	40003c00 	.word	0x40003c00

0800f094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b08c      	sub	sp, #48	; 0x30
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f09c:	f107 031c 	add.w	r3, r7, #28
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	605a      	str	r2, [r3, #4]
 800f0a6:	609a      	str	r2, [r3, #8]
 800f0a8:	60da      	str	r2, [r3, #12]
 800f0aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a3d      	ldr	r2, [pc, #244]	; (800f1a8 <HAL_SPI_MspInit+0x114>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d129      	bne.n	800f10a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f0b6:	4b3d      	ldr	r3, [pc, #244]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f0b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0ba:	4a3c      	ldr	r2, [pc, #240]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f0bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f0c0:	6613      	str	r3, [r2, #96]	; 0x60
 800f0c2:	4b3a      	ldr	r3, [pc, #232]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f0c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f0ca:	61bb      	str	r3, [r7, #24]
 800f0cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0ce:	4b37      	ldr	r3, [pc, #220]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0d2:	4a36      	ldr	r2, [pc, #216]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f0d4:	f043 0301 	orr.w	r3, r3, #1
 800f0d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f0da:	4b34      	ldr	r3, [pc, #208]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800f0e6:	23e0      	movs	r3, #224	; 0xe0
 800f0e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0ea:	2302      	movs	r3, #2
 800f0ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f0f6:	2305      	movs	r3, #5
 800f0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0fa:	f107 031c 	add.w	r3, r7, #28
 800f0fe:	4619      	mov	r1, r3
 800f100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f104:	f003 ffb2 	bl	801306c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800f108:	e049      	b.n	800f19e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4a28      	ldr	r2, [pc, #160]	; (800f1b0 <HAL_SPI_MspInit+0x11c>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d144      	bne.n	800f19e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f114:	4b25      	ldr	r3, [pc, #148]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f118:	4a24      	ldr	r2, [pc, #144]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f11a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f11e:	6593      	str	r3, [r2, #88]	; 0x58
 800f120:	4b22      	ldr	r3, [pc, #136]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f128:	613b      	str	r3, [r7, #16]
 800f12a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f12c:	4b1f      	ldr	r3, [pc, #124]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f12e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f130:	4a1e      	ldr	r2, [pc, #120]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f132:	f043 0304 	orr.w	r3, r3, #4
 800f136:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f138:	4b1c      	ldr	r3, [pc, #112]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f13a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f13c:	f003 0304 	and.w	r3, r3, #4
 800f140:	60fb      	str	r3, [r7, #12]
 800f142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f144:	4b19      	ldr	r3, [pc, #100]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f148:	4a18      	ldr	r2, [pc, #96]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f14a:	f043 0302 	orr.w	r3, r3, #2
 800f14e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f150:	4b16      	ldr	r3, [pc, #88]	; (800f1ac <HAL_SPI_MspInit+0x118>)
 800f152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f154:	f003 0302 	and.w	r3, r3, #2
 800f158:	60bb      	str	r3, [r7, #8]
 800f15a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f15c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f162:	2302      	movs	r3, #2
 800f164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f166:	2300      	movs	r3, #0
 800f168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f16a:	2300      	movs	r3, #0
 800f16c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f16e:	2306      	movs	r3, #6
 800f170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f172:	f107 031c 	add.w	r3, r7, #28
 800f176:	4619      	mov	r1, r3
 800f178:	480e      	ldr	r0, [pc, #56]	; (800f1b4 <HAL_SPI_MspInit+0x120>)
 800f17a:	f003 ff77 	bl	801306c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f17e:	2320      	movs	r3, #32
 800f180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f182:	2302      	movs	r3, #2
 800f184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f186:	2300      	movs	r3, #0
 800f188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f18a:	2300      	movs	r3, #0
 800f18c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f18e:	2306      	movs	r3, #6
 800f190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f192:	f107 031c 	add.w	r3, r7, #28
 800f196:	4619      	mov	r1, r3
 800f198:	4807      	ldr	r0, [pc, #28]	; (800f1b8 <HAL_SPI_MspInit+0x124>)
 800f19a:	f003 ff67 	bl	801306c <HAL_GPIO_Init>
}
 800f19e:	bf00      	nop
 800f1a0:	3730      	adds	r7, #48	; 0x30
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	40013000 	.word	0x40013000
 800f1ac:	40021000 	.word	0x40021000
 800f1b0:	40003c00 	.word	0x40003c00
 800f1b4:	48000800 	.word	0x48000800
 800f1b8:	48000400 	.word	0x48000400

0800f1bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1c2:	4b0f      	ldr	r3, [pc, #60]	; (800f200 <HAL_MspInit+0x44>)
 800f1c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1c6:	4a0e      	ldr	r2, [pc, #56]	; (800f200 <HAL_MspInit+0x44>)
 800f1c8:	f043 0301 	orr.w	r3, r3, #1
 800f1cc:	6613      	str	r3, [r2, #96]	; 0x60
 800f1ce:	4b0c      	ldr	r3, [pc, #48]	; (800f200 <HAL_MspInit+0x44>)
 800f1d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1d2:	f003 0301 	and.w	r3, r3, #1
 800f1d6:	607b      	str	r3, [r7, #4]
 800f1d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f1da:	4b09      	ldr	r3, [pc, #36]	; (800f200 <HAL_MspInit+0x44>)
 800f1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1de:	4a08      	ldr	r2, [pc, #32]	; (800f200 <HAL_MspInit+0x44>)
 800f1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1e4:	6593      	str	r3, [r2, #88]	; 0x58
 800f1e6:	4b06      	ldr	r3, [pc, #24]	; (800f200 <HAL_MspInit+0x44>)
 800f1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1ee:	603b      	str	r3, [r7, #0]
 800f1f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800f1f2:	f004 f979 	bl	80134e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f1f6:	bf00      	nop
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	40021000 	.word	0x40021000

0800f204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f204:	b480      	push	{r7}
 800f206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f208:	e7fe      	b.n	800f208 <NMI_Handler+0x4>

0800f20a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f20a:	b480      	push	{r7}
 800f20c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 800f20e:	e7fe      	b.n	800f20e <HardFault_Handler+0x4>

0800f210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f210:	b480      	push	{r7}
 800f212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f214:	e7fe      	b.n	800f214 <MemManage_Handler+0x4>

0800f216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f216:	b480      	push	{r7}
 800f218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f21a:	e7fe      	b.n	800f21a <BusFault_Handler+0x4>

0800f21c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f21c:	b480      	push	{r7}
 800f21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f220:	e7fe      	b.n	800f220 <UsageFault_Handler+0x4>

0800f222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f222:	b480      	push	{r7}
 800f224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f226:	bf00      	nop
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f230:	b480      	push	{r7}
 800f232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f234:	bf00      	nop
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f23e:	b480      	push	{r7}
 800f240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f242:	bf00      	nop
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f250:	f001 f91c 	bl	801048c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f254:	bf00      	nop
 800f256:	bd80      	pop	{r7, pc}

0800f258 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800f25c:	4802      	ldr	r0, [pc, #8]	; (800f268 <DMA1_Channel1_IRQHandler+0x10>)
 800f25e:	f003 fdb5 	bl	8012dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800f262:	bf00      	nop
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	20000780 	.word	0x20000780

0800f26c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800f270:	4802      	ldr	r0, [pc, #8]	; (800f27c <ADC1_2_IRQHandler+0x10>)
 800f272:	f002 f8bb 	bl	80113ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 800f276:	bf00      	nop
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	20000714 	.word	0x20000714

0800f280 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800f284:	480d      	ldr	r0, [pc, #52]	; (800f2bc <TIM6_DAC_IRQHandler+0x3c>)
 800f286:	f006 fa8b 	bl	80157a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 800f28a:	f7f8 fdb9 	bl	8007e00 <interrupt_timer>
  interupt_calSensor();
 800f28e:	f7f2 fd3d 	bl	8001d0c <interupt_calSensor>
  ICM20602_DataUpdate();
 800f292:	f7f8 fabf 	bl	8007814 <ICM20602_DataUpdate>
  interrupt_calGyro();
 800f296:	f7f2 fb47 	bl	8001928 <interrupt_calGyro>
  AS5047_DataUpdate();
 800f29a:	f7f8 f987 	bl	80075ac <AS5047_DataUpdate>
  interupt_calEncoder();
 800f29e:	f7f1 fee3 	bl	8001068 <interupt_calEncoder>
  interupt_calFusion();
 800f2a2:	f7f2 f8a1 	bl	80013e8 <interupt_calFusion>
  interrupt_WallCut();
 800f2a6:	f7f7 f917 	bl	80064d8 <interrupt_WallCut>
  interupt_DriveMotor();
 800f2aa:	f7f2 fedd 	bl	8002068 <interupt_DriveMotor>

  interrupt_FailSafe();
 800f2ae:	f7fa fac9 	bl	8009844 <interrupt_FailSafe>
  interrupt_record();
 800f2b2:	f7ff fd5b 	bl	800ed6c <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800f2b6:	bf00      	nop
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2000c464 	.word	0x2000c464

0800f2c0 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800f2c4:	bf00      	nop
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr

0800f2ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f2ce:	b480      	push	{r7}
 800f2d0:	af00      	add	r7, sp, #0
	return 1;
 800f2d2:	2301      	movs	r3, #1
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <_kill>:

int _kill(int pid, int sig)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b082      	sub	sp, #8
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
 800f2e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800f2e8:	f008 f92e 	bl	8017548 <__errno>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2216      	movs	r2, #22
 800f2f0:	601a      	str	r2, [r3, #0]
	return -1;
 800f2f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3708      	adds	r7, #8
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <_exit>:

void _exit (int status)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b082      	sub	sp, #8
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800f306:	f04f 31ff 	mov.w	r1, #4294967295
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff ffe7 	bl	800f2de <_kill>
	while (1) {}		/* Make sure we hang here */
 800f310:	e7fe      	b.n	800f310 <_exit+0x12>

0800f312 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b086      	sub	sp, #24
 800f316:	af00      	add	r7, sp, #0
 800f318:	60f8      	str	r0, [r7, #12]
 800f31a:	60b9      	str	r1, [r7, #8]
 800f31c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f31e:	2300      	movs	r3, #0
 800f320:	617b      	str	r3, [r7, #20]
 800f322:	e00a      	b.n	800f33a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f324:	f3af 8000 	nop.w
 800f328:	4601      	mov	r1, r0
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	60ba      	str	r2, [r7, #8]
 800f330:	b2ca      	uxtb	r2, r1
 800f332:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	3301      	adds	r3, #1
 800f338:	617b      	str	r3, [r7, #20]
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	429a      	cmp	r2, r3
 800f340:	dbf0      	blt.n	800f324 <_read+0x12>
	}

return len;
 800f342:	687b      	ldr	r3, [r7, #4]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3718      	adds	r7, #24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f358:	2300      	movs	r3, #0
 800f35a:	617b      	str	r3, [r7, #20]
 800f35c:	e00a      	b.n	800f374 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 800f35e:	68b9      	ldr	r1, [r7, #8]
 800f360:	1c4b      	adds	r3, r1, #1
 800f362:	60bb      	str	r3, [r7, #8]
 800f364:	2301      	movs	r3, #1
 800f366:	2201      	movs	r2, #1
 800f368:	4807      	ldr	r0, [pc, #28]	; (800f388 <_write+0x3c>)
 800f36a:	f007 faa3 	bl	80168b4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	3301      	adds	r3, #1
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	697a      	ldr	r2, [r7, #20]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	429a      	cmp	r2, r3
 800f37a:	dbf0      	blt.n	800f35e <_write+0x12>
	}
	return len;
 800f37c:	687b      	ldr	r3, [r7, #4]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3718      	adds	r7, #24
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	2000ca68 	.word	0x2000ca68

0800f38c <_close>:

int _close(int file)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
	return -1;
 800f394:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f398:	4618      	mov	r0, r3
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f3b4:	605a      	str	r2, [r3, #4]
	return 0;
 800f3b6:	2300      	movs	r3, #0
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_isatty>:

int _isatty(int file)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
	return 1;
 800f3cc:	2301      	movs	r3, #1
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	370c      	adds	r7, #12
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f3da:	b480      	push	{r7}
 800f3dc:	b085      	sub	sp, #20
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	60f8      	str	r0, [r7, #12]
 800f3e2:	60b9      	str	r1, [r7, #8]
 800f3e4:	607a      	str	r2, [r7, #4]
	return 0;
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3714      	adds	r7, #20
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b086      	sub	sp, #24
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f3fc:	4a14      	ldr	r2, [pc, #80]	; (800f450 <_sbrk+0x5c>)
 800f3fe:	4b15      	ldr	r3, [pc, #84]	; (800f454 <_sbrk+0x60>)
 800f400:	1ad3      	subs	r3, r2, r3
 800f402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f408:	4b13      	ldr	r3, [pc, #76]	; (800f458 <_sbrk+0x64>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d102      	bne.n	800f416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f410:	4b11      	ldr	r3, [pc, #68]	; (800f458 <_sbrk+0x64>)
 800f412:	4a12      	ldr	r2, [pc, #72]	; (800f45c <_sbrk+0x68>)
 800f414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f416:	4b10      	ldr	r3, [pc, #64]	; (800f458 <_sbrk+0x64>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4413      	add	r3, r2
 800f41e:	693a      	ldr	r2, [r7, #16]
 800f420:	429a      	cmp	r2, r3
 800f422:	d207      	bcs.n	800f434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f424:	f008 f890 	bl	8017548 <__errno>
 800f428:	4603      	mov	r3, r0
 800f42a:	220c      	movs	r2, #12
 800f42c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f42e:	f04f 33ff 	mov.w	r3, #4294967295
 800f432:	e009      	b.n	800f448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f434:	4b08      	ldr	r3, [pc, #32]	; (800f458 <_sbrk+0x64>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f43a:	4b07      	ldr	r3, [pc, #28]	; (800f458 <_sbrk+0x64>)
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4413      	add	r3, r2
 800f442:	4a05      	ldr	r2, [pc, #20]	; (800f458 <_sbrk+0x64>)
 800f444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f446:	68fb      	ldr	r3, [r7, #12]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	2001c000 	.word	0x2001c000
 800f454:	00000400 	.word	0x00000400
 800f458:	2000c460 	.word	0x2000c460
 800f45c:	2000cb10 	.word	0x2000cb10

0800f460 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800f460:	b480      	push	{r7}
 800f462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f464:	4b06      	ldr	r3, [pc, #24]	; (800f480 <SystemInit+0x20>)
 800f466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f46a:	4a05      	ldr	r2, [pc, #20]	; (800f480 <SystemInit+0x20>)
 800f46c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f474:	bf00      	nop
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	e000ed00 	.word	0xe000ed00

0800f484 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f48a:	1d3b      	adds	r3, r7, #4
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]
 800f490:	605a      	str	r2, [r3, #4]
 800f492:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f494:	4b14      	ldr	r3, [pc, #80]	; (800f4e8 <MX_TIM6_Init+0x64>)
 800f496:	4a15      	ldr	r2, [pc, #84]	; (800f4ec <MX_TIM6_Init+0x68>)
 800f498:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 800f49a:	4b13      	ldr	r3, [pc, #76]	; (800f4e8 <MX_TIM6_Init+0x64>)
 800f49c:	2254      	movs	r2, #84	; 0x54
 800f49e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f4a0:	4b11      	ldr	r3, [pc, #68]	; (800f4e8 <MX_TIM6_Init+0x64>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800f4a6:	4b10      	ldr	r3, [pc, #64]	; (800f4e8 <MX_TIM6_Init+0x64>)
 800f4a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f4ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f4ae:	4b0e      	ldr	r3, [pc, #56]	; (800f4e8 <MX_TIM6_Init+0x64>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f4b4:	480c      	ldr	r0, [pc, #48]	; (800f4e8 <MX_TIM6_Init+0x64>)
 800f4b6:	f005 feab 	bl	8015210 <HAL_TIM_Base_Init>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800f4c0:	f7fa fc6b 	bl	8009d9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f4cc:	1d3b      	adds	r3, r7, #4
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	4805      	ldr	r0, [pc, #20]	; (800f4e8 <MX_TIM6_Init+0x64>)
 800f4d2:	f007 f819 	bl	8016508 <HAL_TIMEx_MasterConfigSynchronization>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800f4dc:	f7fa fc5d 	bl	8009d9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f4e0:	bf00      	nop
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	2000c464 	.word	0x2000c464
 800f4ec:	40001000 	.word	0x40001000

0800f4f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b098      	sub	sp, #96	; 0x60
 800f4f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f4f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	605a      	str	r2, [r3, #4]
 800f500:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f502:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f506:	2200      	movs	r2, #0
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	605a      	str	r2, [r3, #4]
 800f50c:	609a      	str	r2, [r3, #8]
 800f50e:	60da      	str	r2, [r3, #12]
 800f510:	611a      	str	r2, [r3, #16]
 800f512:	615a      	str	r2, [r3, #20]
 800f514:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f516:	1d3b      	adds	r3, r7, #4
 800f518:	2234      	movs	r2, #52	; 0x34
 800f51a:	2100      	movs	r1, #0
 800f51c:	4618      	mov	r0, r3
 800f51e:	f008 f84b 	bl	80175b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f522:	4b41      	ldr	r3, [pc, #260]	; (800f628 <MX_TIM8_Init+0x138>)
 800f524:	4a41      	ldr	r2, [pc, #260]	; (800f62c <MX_TIM8_Init+0x13c>)
 800f526:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 800f528:	4b3f      	ldr	r3, [pc, #252]	; (800f628 <MX_TIM8_Init+0x138>)
 800f52a:	2201      	movs	r2, #1
 800f52c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f52e:	4b3e      	ldr	r3, [pc, #248]	; (800f628 <MX_TIM8_Init+0x138>)
 800f530:	2200      	movs	r2, #0
 800f532:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800f534:	4b3c      	ldr	r3, [pc, #240]	; (800f628 <MX_TIM8_Init+0x138>)
 800f536:	f240 628f 	movw	r2, #1679	; 0x68f
 800f53a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f53c:	4b3a      	ldr	r3, [pc, #232]	; (800f628 <MX_TIM8_Init+0x138>)
 800f53e:	2200      	movs	r2, #0
 800f540:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f542:	4b39      	ldr	r3, [pc, #228]	; (800f628 <MX_TIM8_Init+0x138>)
 800f544:	2200      	movs	r2, #0
 800f546:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f548:	4b37      	ldr	r3, [pc, #220]	; (800f628 <MX_TIM8_Init+0x138>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f54e:	4836      	ldr	r0, [pc, #216]	; (800f628 <MX_TIM8_Init+0x138>)
 800f550:	f005 ff26 	bl	80153a0 <HAL_TIM_PWM_Init>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	d001      	beq.n	800f55e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800f55a:	f7fa fc1e 	bl	8009d9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f55e:	2300      	movs	r3, #0
 800f560:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f562:	2300      	movs	r3, #0
 800f564:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f566:	2300      	movs	r3, #0
 800f568:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f56a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f56e:	4619      	mov	r1, r3
 800f570:	482d      	ldr	r0, [pc, #180]	; (800f628 <MX_TIM8_Init+0x138>)
 800f572:	f006 ffc9 	bl	8016508 <HAL_TIMEx_MasterConfigSynchronization>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d001      	beq.n	800f580 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800f57c:	f7fa fc0d 	bl	8009d9a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f580:	2360      	movs	r3, #96	; 0x60
 800f582:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 800f584:	f240 13a3 	movw	r3, #419	; 0x1a3
 800f588:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f58a:	2300      	movs	r3, #0
 800f58c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f58e:	2300      	movs	r3, #0
 800f590:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f592:	2300      	movs	r3, #0
 800f594:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f596:	2300      	movs	r3, #0
 800f598:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f59a:	2300      	movs	r3, #0
 800f59c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f59e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4820      	ldr	r0, [pc, #128]	; (800f628 <MX_TIM8_Init+0x138>)
 800f5a8:	f006 fa7a 	bl	8015aa0 <HAL_TIM_PWM_ConfigChannel>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d001      	beq.n	800f5b6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800f5b2:	f7fa fbf2 	bl	8009d9a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f5b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5ba:	2208      	movs	r2, #8
 800f5bc:	4619      	mov	r1, r3
 800f5be:	481a      	ldr	r0, [pc, #104]	; (800f628 <MX_TIM8_Init+0x138>)
 800f5c0:	f006 fa6e 	bl	8015aa0 <HAL_TIM_PWM_ConfigChannel>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d001      	beq.n	800f5ce <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 800f5ca:	f7fa fbe6 	bl	8009d9a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f5e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f5f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f5f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800f5fe:	2300      	movs	r3, #0
 800f600:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f602:	2300      	movs	r3, #0
 800f604:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f606:	1d3b      	adds	r3, r7, #4
 800f608:	4619      	mov	r1, r3
 800f60a:	4807      	ldr	r0, [pc, #28]	; (800f628 <MX_TIM8_Init+0x138>)
 800f60c:	f007 f80a 	bl	8016624 <HAL_TIMEx_ConfigBreakDeadTime>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800f616:	f7fa fbc0 	bl	8009d9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f61a:	4803      	ldr	r0, [pc, #12]	; (800f628 <MX_TIM8_Init+0x138>)
 800f61c:	f000 f8da 	bl	800f7d4 <HAL_TIM_MspPostInit>

}
 800f620:	bf00      	nop
 800f622:	3760      	adds	r7, #96	; 0x60
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	2000c4b0 	.word	0x2000c4b0
 800f62c:	40013400 	.word	0x40013400

0800f630 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b094      	sub	sp, #80	; 0x50
 800f634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800f636:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f63a:	2200      	movs	r2, #0
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	605a      	str	r2, [r3, #4]
 800f640:	609a      	str	r2, [r3, #8]
 800f642:	60da      	str	r2, [r3, #12]
 800f644:	611a      	str	r2, [r3, #16]
 800f646:	615a      	str	r2, [r3, #20]
 800f648:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f64a:	463b      	mov	r3, r7
 800f64c:	2234      	movs	r2, #52	; 0x34
 800f64e:	2100      	movs	r1, #0
 800f650:	4618      	mov	r0, r3
 800f652:	f007 ffb1 	bl	80175b8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f656:	4b30      	ldr	r3, [pc, #192]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f658:	4a30      	ldr	r2, [pc, #192]	; (800f71c <MX_TIM16_Init+0xec>)
 800f65a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 800f65c:	4b2e      	ldr	r3, [pc, #184]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f65e:	2201      	movs	r2, #1
 800f660:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f662:	4b2d      	ldr	r3, [pc, #180]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f664:	2200      	movs	r2, #0
 800f666:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800f668:	4b2b      	ldr	r3, [pc, #172]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f66a:	2264      	movs	r2, #100	; 0x64
 800f66c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f66e:	4b2a      	ldr	r3, [pc, #168]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f670:	2200      	movs	r2, #0
 800f672:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f674:	4b28      	ldr	r3, [pc, #160]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f676:	2200      	movs	r2, #0
 800f678:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f67a:	4b27      	ldr	r3, [pc, #156]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f680:	4825      	ldr	r0, [pc, #148]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f682:	f005 fdc5 	bl	8015210 <HAL_TIM_Base_Init>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800f68c:	f7fa fb85 	bl	8009d9a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800f690:	4821      	ldr	r0, [pc, #132]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f692:	f005 fe85 	bl	80153a0 <HAL_TIM_PWM_Init>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 800f69c:	f7fa fb7d 	bl	8009d9a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f6a0:	2360      	movs	r3, #96	; 0x60
 800f6a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 800f6a4:	231e      	movs	r3, #30
 800f6a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f6bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4814      	ldr	r0, [pc, #80]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f6c6:	f006 f9eb 	bl	8015aa0 <HAL_TIM_PWM_ConfigChannel>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d001      	beq.n	800f6d4 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 800f6d0:	f7fa fb63 	bl	8009d9a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f6e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f6ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800f6f6:	463b      	mov	r3, r7
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	4807      	ldr	r0, [pc, #28]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f6fc:	f006 ff92 	bl	8016624 <HAL_TIMEx_ConfigBreakDeadTime>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d001      	beq.n	800f70a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800f706:	f7fa fb48 	bl	8009d9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800f70a:	4803      	ldr	r0, [pc, #12]	; (800f718 <MX_TIM16_Init+0xe8>)
 800f70c:	f000 f862 	bl	800f7d4 <HAL_TIM_MspPostInit>

}
 800f710:	bf00      	nop
 800f712:	3750      	adds	r7, #80	; 0x50
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	2000c4fc 	.word	0x2000c4fc
 800f71c:	40014400 	.word	0x40014400

0800f720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a16      	ldr	r2, [pc, #88]	; (800f788 <HAL_TIM_Base_MspInit+0x68>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d114      	bne.n	800f75c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800f732:	4b16      	ldr	r3, [pc, #88]	; (800f78c <HAL_TIM_Base_MspInit+0x6c>)
 800f734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f736:	4a15      	ldr	r2, [pc, #84]	; (800f78c <HAL_TIM_Base_MspInit+0x6c>)
 800f738:	f043 0310 	orr.w	r3, r3, #16
 800f73c:	6593      	str	r3, [r2, #88]	; 0x58
 800f73e:	4b13      	ldr	r3, [pc, #76]	; (800f78c <HAL_TIM_Base_MspInit+0x6c>)
 800f740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f742:	f003 0310 	and.w	r3, r3, #16
 800f746:	60fb      	str	r3, [r7, #12]
 800f748:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800f74a:	2200      	movs	r2, #0
 800f74c:	2103      	movs	r1, #3
 800f74e:	2036      	movs	r0, #54	; 0x36
 800f750:	f003 f98b 	bl	8012a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f754:	2036      	movs	r0, #54	; 0x36
 800f756:	f003 f9a2 	bl	8012a9e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800f75a:	e010      	b.n	800f77e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a0b      	ldr	r2, [pc, #44]	; (800f790 <HAL_TIM_Base_MspInit+0x70>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d10b      	bne.n	800f77e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800f766:	4b09      	ldr	r3, [pc, #36]	; (800f78c <HAL_TIM_Base_MspInit+0x6c>)
 800f768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f76a:	4a08      	ldr	r2, [pc, #32]	; (800f78c <HAL_TIM_Base_MspInit+0x6c>)
 800f76c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f770:	6613      	str	r3, [r2, #96]	; 0x60
 800f772:	4b06      	ldr	r3, [pc, #24]	; (800f78c <HAL_TIM_Base_MspInit+0x6c>)
 800f774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f77a:	60bb      	str	r3, [r7, #8]
 800f77c:	68bb      	ldr	r3, [r7, #8]
}
 800f77e:	bf00      	nop
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	40001000 	.word	0x40001000
 800f78c:	40021000 	.word	0x40021000
 800f790:	40014400 	.word	0x40014400

0800f794 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a0a      	ldr	r2, [pc, #40]	; (800f7cc <HAL_TIM_PWM_MspInit+0x38>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d10b      	bne.n	800f7be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800f7a6:	4b0a      	ldr	r3, [pc, #40]	; (800f7d0 <HAL_TIM_PWM_MspInit+0x3c>)
 800f7a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7aa:	4a09      	ldr	r2, [pc, #36]	; (800f7d0 <HAL_TIM_PWM_MspInit+0x3c>)
 800f7ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f7b0:	6613      	str	r3, [r2, #96]	; 0x60
 800f7b2:	4b07      	ldr	r3, [pc, #28]	; (800f7d0 <HAL_TIM_PWM_MspInit+0x3c>)
 800f7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f7ba:	60fb      	str	r3, [r7, #12]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800f7be:	bf00      	nop
 800f7c0:	3714      	adds	r7, #20
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	40013400 	.word	0x40013400
 800f7d0:	40021000 	.word	0x40021000

0800f7d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b08a      	sub	sp, #40	; 0x28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7dc:	f107 0314 	add.w	r3, r7, #20
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	601a      	str	r2, [r3, #0]
 800f7e4:	605a      	str	r2, [r3, #4]
 800f7e6:	609a      	str	r2, [r3, #8]
 800f7e8:	60da      	str	r2, [r3, #12]
 800f7ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a2b      	ldr	r2, [pc, #172]	; (800f8a0 <HAL_TIM_MspPostInit+0xcc>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d12d      	bne.n	800f852 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f7f6:	4b2b      	ldr	r3, [pc, #172]	; (800f8a4 <HAL_TIM_MspPostInit+0xd0>)
 800f7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7fa:	4a2a      	ldr	r2, [pc, #168]	; (800f8a4 <HAL_TIM_MspPostInit+0xd0>)
 800f7fc:	f043 0302 	orr.w	r3, r3, #2
 800f800:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f802:	4b28      	ldr	r3, [pc, #160]	; (800f8a4 <HAL_TIM_MspPostInit+0xd0>)
 800f804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f806:	f003 0302 	and.w	r3, r3, #2
 800f80a:	613b      	str	r3, [r7, #16]
 800f80c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 800f80e:	2340      	movs	r3, #64	; 0x40
 800f810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f812:	2302      	movs	r3, #2
 800f814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f816:	2300      	movs	r3, #0
 800f818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f81a:	2300      	movs	r3, #0
 800f81c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800f81e:	2305      	movs	r3, #5
 800f820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f822:	f107 0314 	add.w	r3, r7, #20
 800f826:	4619      	mov	r1, r3
 800f828:	481f      	ldr	r0, [pc, #124]	; (800f8a8 <HAL_TIM_MspPostInit+0xd4>)
 800f82a:	f003 fc1f 	bl	801306c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 800f82e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f834:	2302      	movs	r3, #2
 800f836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f838:	2300      	movs	r3, #0
 800f83a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f83c:	2300      	movs	r3, #0
 800f83e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800f840:	230a      	movs	r3, #10
 800f842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	4619      	mov	r1, r3
 800f84a:	4817      	ldr	r0, [pc, #92]	; (800f8a8 <HAL_TIM_MspPostInit+0xd4>)
 800f84c:	f003 fc0e 	bl	801306c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800f850:	e022      	b.n	800f898 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a15      	ldr	r2, [pc, #84]	; (800f8ac <HAL_TIM_MspPostInit+0xd8>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d11d      	bne.n	800f898 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f85c:	4b11      	ldr	r3, [pc, #68]	; (800f8a4 <HAL_TIM_MspPostInit+0xd0>)
 800f85e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f860:	4a10      	ldr	r2, [pc, #64]	; (800f8a4 <HAL_TIM_MspPostInit+0xd0>)
 800f862:	f043 0301 	orr.w	r3, r3, #1
 800f866:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f868:	4b0e      	ldr	r3, [pc, #56]	; (800f8a4 <HAL_TIM_MspPostInit+0xd0>)
 800f86a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	60fb      	str	r3, [r7, #12]
 800f872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 800f874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f87a:	2302      	movs	r3, #2
 800f87c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f882:	2300      	movs	r3, #0
 800f884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800f886:	2301      	movs	r3, #1
 800f888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800f88a:	f107 0314 	add.w	r3, r7, #20
 800f88e:	4619      	mov	r1, r3
 800f890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f894:	f003 fbea 	bl	801306c <HAL_GPIO_Init>
}
 800f898:	bf00      	nop
 800f89a:	3728      	adds	r7, #40	; 0x28
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	40013400 	.word	0x40013400
 800f8a4:	40021000 	.word	0x40021000
 800f8a8:	48000400 	.word	0x48000400
 800f8ac:	40014400 	.word	0x40014400

0800f8b0 <input_parameter>:
	}

	return End_velocity;
}

void input_parameter(void) {
 800f8b0:	b480      	push	{r7}
 800f8b2:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 800f8b4:	4b95      	ldr	r3, [pc, #596]	; (800fb0c <input_parameter+0x25c>)
 800f8b6:	4a96      	ldr	r2, [pc, #600]	; (800fb10 <input_parameter+0x260>)
 800f8b8:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 800f8ba:	4b94      	ldr	r3, [pc, #592]	; (800fb0c <input_parameter+0x25c>)
 800f8bc:	4a94      	ldr	r2, [pc, #592]	; (800fb10 <input_parameter+0x260>)
 800f8be:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 800f8c0:	4b92      	ldr	r3, [pc, #584]	; (800fb0c <input_parameter+0x25c>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 800f8c4:	4a91      	ldr	r2, [pc, #580]	; (800fb0c <input_parameter+0x25c>)
 800f8c6:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 700; //550
 800f8c8:	4b90      	ldr	r3, [pc, #576]	; (800fb0c <input_parameter+0x25c>)
 800f8ca:	4a92      	ldr	r2, [pc, #584]	; (800fb14 <input_parameter+0x264>)
 800f8cc:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 8000; //10000
 800f8ce:	4b8f      	ldr	r3, [pc, #572]	; (800fb0c <input_parameter+0x25c>)
 800f8d0:	4a91      	ldr	r2, [pc, #580]	; (800fb18 <input_parameter+0x268>)
 800f8d2:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 7; //55;
 800f8d4:	4b8d      	ldr	r3, [pc, #564]	; (800fb0c <input_parameter+0x25c>)
 800f8d6:	4a91      	ldr	r2, [pc, #580]	; (800fb1c <input_parameter+0x26c>)
 800f8d8:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 800f8da:	4b8c      	ldr	r3, [pc, #560]	; (800fb0c <input_parameter+0x25c>)
 800f8dc:	4a90      	ldr	r2, [pc, #576]	; (800fb20 <input_parameter+0x270>)
 800f8de:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 800f8e0:	4b8a      	ldr	r3, [pc, #552]	; (800fb0c <input_parameter+0x25c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 800f8e4:	4a89      	ldr	r2, [pc, #548]	; (800fb0c <input_parameter+0x25c>)
 800f8e6:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 700;
 800f8e8:	4b88      	ldr	r3, [pc, #544]	; (800fb0c <input_parameter+0x25c>)
 800f8ea:	4a8a      	ldr	r2, [pc, #552]	; (800fb14 <input_parameter+0x264>)
 800f8ec:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 8000;
 800f8ee:	4b87      	ldr	r3, [pc, #540]	; (800fb0c <input_parameter+0x25c>)
 800f8f0:	4a89      	ldr	r2, [pc, #548]	; (800fb18 <input_parameter+0x268>)
 800f8f2:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 1; //50;
 800f8f4:	4b85      	ldr	r3, [pc, #532]	; (800fb0c <input_parameter+0x25c>)
 800f8f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f8fa:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 800f8fc:	4b83      	ldr	r3, [pc, #524]	; (800fb0c <input_parameter+0x25c>)
 800f8fe:	4a89      	ldr	r2, [pc, #548]	; (800fb24 <input_parameter+0x274>)
 800f900:	625a      	str	r2, [r3, #36]	; 0x24

	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 800f902:	4b82      	ldr	r3, [pc, #520]	; (800fb0c <input_parameter+0x25c>)
 800f904:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 800f906:	4a88      	ldr	r2, [pc, #544]	; (800fb28 <input_parameter+0x278>)
 800f908:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 800f90a:	4b80      	ldr	r3, [pc, #512]	; (800fb0c <input_parameter+0x25c>)
 800f90c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f910:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800fb2c <input_parameter+0x27c>
 800f914:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 800f918:	4b83      	ldr	r3, [pc, #524]	; (800fb28 <input_parameter+0x278>)
 800f91a:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 800f91e:	4b7b      	ldr	r3, [pc, #492]	; (800fb0c <input_parameter+0x25c>)
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	4a81      	ldr	r2, [pc, #516]	; (800fb28 <input_parameter+0x278>)
 800f924:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 800f926:	4b79      	ldr	r3, [pc, #484]	; (800fb0c <input_parameter+0x25c>)
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	4a7f      	ldr	r2, [pc, #508]	; (800fb28 <input_parameter+0x278>)
 800f92c:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 800f92e:	4b77      	ldr	r3, [pc, #476]	; (800fb0c <input_parameter+0x25c>)
 800f930:	699b      	ldr	r3, [r3, #24]
 800f932:	4a7d      	ldr	r2, [pc, #500]	; (800fb28 <input_parameter+0x278>)
 800f934:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 800f936:	4b75      	ldr	r3, [pc, #468]	; (800fb0c <input_parameter+0x25c>)
 800f938:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 800f93c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f940:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 800f944:	4b78      	ldr	r3, [pc, #480]	; (800fb28 <input_parameter+0x278>)
 800f946:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 800f94a:	4b70      	ldr	r3, [pc, #448]	; (800fb0c <input_parameter+0x25c>)
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	4a76      	ldr	r2, [pc, #472]	; (800fb28 <input_parameter+0x278>)
 800f950:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 800f952:	4b6e      	ldr	r3, [pc, #440]	; (800fb0c <input_parameter+0x25c>)
 800f954:	69db      	ldr	r3, [r3, #28]
 800f956:	4a74      	ldr	r2, [pc, #464]	; (800fb28 <input_parameter+0x278>)
 800f958:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 800f95a:	4b6c      	ldr	r3, [pc, #432]	; (800fb0c <input_parameter+0x25c>)
 800f95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f95e:	4a72      	ldr	r2, [pc, #456]	; (800fb28 <input_parameter+0x278>)
 800f960:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 800f962:	4b6a      	ldr	r3, [pc, #424]	; (800fb0c <input_parameter+0x25c>)
 800f964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f966:	4a70      	ldr	r2, [pc, #448]	; (800fb28 <input_parameter+0x278>)
 800f968:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 800f96a:	4b68      	ldr	r3, [pc, #416]	; (800fb0c <input_parameter+0x25c>)
 800f96c:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 800f970:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f974:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 800f978:	4b6b      	ldr	r3, [pc, #428]	; (800fb28 <input_parameter+0x278>)
 800f97a:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 800f97e:	4b63      	ldr	r3, [pc, #396]	; (800fb0c <input_parameter+0x25c>)
 800f980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f982:	4a69      	ldr	r2, [pc, #420]	; (800fb28 <input_parameter+0x278>)
 800f984:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 800f986:	4b68      	ldr	r3, [pc, #416]	; (800fb28 <input_parameter+0x278>)
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	4a67      	ldr	r2, [pc, #412]	; (800fb28 <input_parameter+0x278>)
 800f98c:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 800f98e:	4b66      	ldr	r3, [pc, #408]	; (800fb28 <input_parameter+0x278>)
 800f990:	4a67      	ldr	r2, [pc, #412]	; (800fb30 <input_parameter+0x280>)
 800f992:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 800f994:	4b64      	ldr	r3, [pc, #400]	; (800fb28 <input_parameter+0x278>)
 800f996:	4a67      	ldr	r2, [pc, #412]	; (800fb34 <input_parameter+0x284>)
 800f998:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 800f99a:	4b63      	ldr	r3, [pc, #396]	; (800fb28 <input_parameter+0x278>)
 800f99c:	4a66      	ldr	r2, [pc, #408]	; (800fb38 <input_parameter+0x288>)
 800f99e:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 800f9a0:	4b61      	ldr	r3, [pc, #388]	; (800fb28 <input_parameter+0x278>)
 800f9a2:	4a66      	ldr	r2, [pc, #408]	; (800fb3c <input_parameter+0x28c>)
 800f9a4:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 800f9a6:	4b60      	ldr	r3, [pc, #384]	; (800fb28 <input_parameter+0x278>)
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	4a5f      	ldr	r2, [pc, #380]	; (800fb28 <input_parameter+0x278>)
 800f9ac:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 800f9ae:	4b5e      	ldr	r3, [pc, #376]	; (800fb28 <input_parameter+0x278>)
 800f9b0:	4a5f      	ldr	r2, [pc, #380]	; (800fb30 <input_parameter+0x280>)
 800f9b2:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 800f9b4:	4b5c      	ldr	r3, [pc, #368]	; (800fb28 <input_parameter+0x278>)
 800f9b6:	4a5f      	ldr	r2, [pc, #380]	; (800fb34 <input_parameter+0x284>)
 800f9b8:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 800f9ba:	4b5b      	ldr	r3, [pc, #364]	; (800fb28 <input_parameter+0x278>)
 800f9bc:	4a60      	ldr	r2, [pc, #384]	; (800fb40 <input_parameter+0x290>)
 800f9be:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 800f9c0:	4b59      	ldr	r3, [pc, #356]	; (800fb28 <input_parameter+0x278>)
 800f9c2:	4a60      	ldr	r2, [pc, #384]	; (800fb44 <input_parameter+0x294>)
 800f9c4:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 800f9c6:	4b58      	ldr	r3, [pc, #352]	; (800fb28 <input_parameter+0x278>)
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	4a57      	ldr	r2, [pc, #348]	; (800fb28 <input_parameter+0x278>)
 800f9cc:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 800f9ce:	4b56      	ldr	r3, [pc, #344]	; (800fb28 <input_parameter+0x278>)
 800f9d0:	4a5d      	ldr	r2, [pc, #372]	; (800fb48 <input_parameter+0x298>)
 800f9d2:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 800f9d4:	4b54      	ldr	r3, [pc, #336]	; (800fb28 <input_parameter+0x278>)
 800f9d6:	4a50      	ldr	r2, [pc, #320]	; (800fb18 <input_parameter+0x268>)
 800f9d8:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 800f9da:	4b53      	ldr	r3, [pc, #332]	; (800fb28 <input_parameter+0x278>)
 800f9dc:	4a5b      	ldr	r2, [pc, #364]	; (800fb4c <input_parameter+0x29c>)
 800f9de:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 800f9e0:	4b51      	ldr	r3, [pc, #324]	; (800fb28 <input_parameter+0x278>)
 800f9e2:	4a5b      	ldr	r2, [pc, #364]	; (800fb50 <input_parameter+0x2a0>)
 800f9e4:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 800f9e6:	4b50      	ldr	r3, [pc, #320]	; (800fb28 <input_parameter+0x278>)
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	4a4f      	ldr	r2, [pc, #316]	; (800fb28 <input_parameter+0x278>)
 800f9ec:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 800f9ee:	4b4e      	ldr	r3, [pc, #312]	; (800fb28 <input_parameter+0x278>)
 800f9f0:	4a58      	ldr	r2, [pc, #352]	; (800fb54 <input_parameter+0x2a4>)
 800f9f2:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 800f9f4:	4b4c      	ldr	r3, [pc, #304]	; (800fb28 <input_parameter+0x278>)
 800f9f6:	4a48      	ldr	r2, [pc, #288]	; (800fb18 <input_parameter+0x268>)
 800f9f8:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 800f9fa:	4b4b      	ldr	r3, [pc, #300]	; (800fb28 <input_parameter+0x278>)
 800f9fc:	4a56      	ldr	r2, [pc, #344]	; (800fb58 <input_parameter+0x2a8>)
 800f9fe:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 800fa00:	4b49      	ldr	r3, [pc, #292]	; (800fb28 <input_parameter+0x278>)
 800fa02:	4a56      	ldr	r2, [pc, #344]	; (800fb5c <input_parameter+0x2ac>)
 800fa04:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 800fa06:	4b48      	ldr	r3, [pc, #288]	; (800fb28 <input_parameter+0x278>)
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	4a47      	ldr	r2, [pc, #284]	; (800fb28 <input_parameter+0x278>)
 800fa0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 800fa10:	4b45      	ldr	r3, [pc, #276]	; (800fb28 <input_parameter+0x278>)
 800fa12:	4a47      	ldr	r2, [pc, #284]	; (800fb30 <input_parameter+0x280>)
 800fa14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 800fa18:	4b43      	ldr	r3, [pc, #268]	; (800fb28 <input_parameter+0x278>)
 800fa1a:	4a46      	ldr	r2, [pc, #280]	; (800fb34 <input_parameter+0x284>)
 800fa1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 800fa20:	4b41      	ldr	r3, [pc, #260]	; (800fb28 <input_parameter+0x278>)
 800fa22:	4a4f      	ldr	r2, [pc, #316]	; (800fb60 <input_parameter+0x2b0>)
 800fa24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 800fa28:	4b3f      	ldr	r3, [pc, #252]	; (800fb28 <input_parameter+0x278>)
 800fa2a:	4a4e      	ldr	r2, [pc, #312]	; (800fb64 <input_parameter+0x2b4>)
 800fa2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 800fa30:	4b3d      	ldr	r3, [pc, #244]	; (800fb28 <input_parameter+0x278>)
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	4a3c      	ldr	r2, [pc, #240]	; (800fb28 <input_parameter+0x278>)
 800fa36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 800fa3a:	4b3b      	ldr	r3, [pc, #236]	; (800fb28 <input_parameter+0x278>)
 800fa3c:	4a3c      	ldr	r2, [pc, #240]	; (800fb30 <input_parameter+0x280>)
 800fa3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 800fa42:	4b39      	ldr	r3, [pc, #228]	; (800fb28 <input_parameter+0x278>)
 800fa44:	4a3b      	ldr	r2, [pc, #236]	; (800fb34 <input_parameter+0x284>)
 800fa46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 800fa4a:	4b37      	ldr	r3, [pc, #220]	; (800fb28 <input_parameter+0x278>)
 800fa4c:	4a46      	ldr	r2, [pc, #280]	; (800fb68 <input_parameter+0x2b8>)
 800fa4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 800fa52:	4b35      	ldr	r3, [pc, #212]	; (800fb28 <input_parameter+0x278>)
 800fa54:	4a45      	ldr	r2, [pc, #276]	; (800fb6c <input_parameter+0x2bc>)
 800fa56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fa5a:	4b33      	ldr	r3, [pc, #204]	; (800fb28 <input_parameter+0x278>)
 800fa5c:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 800fa5e:	4a32      	ldr	r2, [pc, #200]	; (800fb28 <input_parameter+0x278>)
 800fa60:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 800fa64:	4b30      	ldr	r3, [pc, #192]	; (800fb28 <input_parameter+0x278>)
 800fa66:	4a42      	ldr	r2, [pc, #264]	; (800fb70 <input_parameter+0x2c0>)
 800fa68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 800fa6c:	4b2e      	ldr	r3, [pc, #184]	; (800fb28 <input_parameter+0x278>)
 800fa6e:	4a2a      	ldr	r2, [pc, #168]	; (800fb18 <input_parameter+0x268>)
 800fa70:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 800fa74:	4b2c      	ldr	r3, [pc, #176]	; (800fb28 <input_parameter+0x278>)
 800fa76:	4a3f      	ldr	r2, [pc, #252]	; (800fb74 <input_parameter+0x2c4>)
 800fa78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 800fa7c:	4b2a      	ldr	r3, [pc, #168]	; (800fb28 <input_parameter+0x278>)
 800fa7e:	4a3e      	ldr	r2, [pc, #248]	; (800fb78 <input_parameter+0x2c8>)
 800fa80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fa84:	4b28      	ldr	r3, [pc, #160]	; (800fb28 <input_parameter+0x278>)
 800fa86:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 800fa88:	4a27      	ldr	r2, [pc, #156]	; (800fb28 <input_parameter+0x278>)
 800fa8a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 800fa8e:	4b26      	ldr	r3, [pc, #152]	; (800fb28 <input_parameter+0x278>)
 800fa90:	4a37      	ldr	r2, [pc, #220]	; (800fb70 <input_parameter+0x2c0>)
 800fa92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 800fa96:	4b24      	ldr	r3, [pc, #144]	; (800fb28 <input_parameter+0x278>)
 800fa98:	4a1f      	ldr	r2, [pc, #124]	; (800fb18 <input_parameter+0x268>)
 800fa9a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 800fa9e:	4b22      	ldr	r3, [pc, #136]	; (800fb28 <input_parameter+0x278>)
 800faa0:	4a34      	ldr	r2, [pc, #208]	; (800fb74 <input_parameter+0x2c4>)
 800faa2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 800faa6:	4b20      	ldr	r3, [pc, #128]	; (800fb28 <input_parameter+0x278>)
 800faa8:	4a33      	ldr	r2, [pc, #204]	; (800fb78 <input_parameter+0x2c8>)
 800faaa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 800faae:	4b1e      	ldr	r3, [pc, #120]	; (800fb28 <input_parameter+0x278>)
 800fab0:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 800fab2:	4a1d      	ldr	r2, [pc, #116]	; (800fb28 <input_parameter+0x278>)
 800fab4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 800fab8:	4b1b      	ldr	r3, [pc, #108]	; (800fb28 <input_parameter+0x278>)
 800faba:	4a1d      	ldr	r2, [pc, #116]	; (800fb30 <input_parameter+0x280>)
 800fabc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 800fac0:	4b19      	ldr	r3, [pc, #100]	; (800fb28 <input_parameter+0x278>)
 800fac2:	4a1c      	ldr	r2, [pc, #112]	; (800fb34 <input_parameter+0x284>)
 800fac4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 800fac8:	4b17      	ldr	r3, [pc, #92]	; (800fb28 <input_parameter+0x278>)
 800faca:	4a2c      	ldr	r2, [pc, #176]	; (800fb7c <input_parameter+0x2cc>)
 800facc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 800fad0:	4b15      	ldr	r3, [pc, #84]	; (800fb28 <input_parameter+0x278>)
 800fad2:	4a2a      	ldr	r2, [pc, #168]	; (800fb7c <input_parameter+0x2cc>)
 800fad4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fad8:	4b13      	ldr	r3, [pc, #76]	; (800fb28 <input_parameter+0x278>)
 800fada:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 800fadc:	4a12      	ldr	r2, [pc, #72]	; (800fb28 <input_parameter+0x278>)
 800fade:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 800fae2:	4b11      	ldr	r3, [pc, #68]	; (800fb28 <input_parameter+0x278>)
 800fae4:	4a12      	ldr	r2, [pc, #72]	; (800fb30 <input_parameter+0x280>)
 800fae6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 800faea:	4b0f      	ldr	r3, [pc, #60]	; (800fb28 <input_parameter+0x278>)
 800faec:	4a11      	ldr	r2, [pc, #68]	; (800fb34 <input_parameter+0x284>)
 800faee:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 800faf2:	4b0d      	ldr	r3, [pc, #52]	; (800fb28 <input_parameter+0x278>)
 800faf4:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800faf8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 800fafc:	4b0a      	ldr	r3, [pc, #40]	; (800fb28 <input_parameter+0x278>)
 800fafe:	4a20      	ldr	r2, [pc, #128]	; (800fb80 <input_parameter+0x2d0>)
 800fb00:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fb04:	4b08      	ldr	r3, [pc, #32]	; (800fb28 <input_parameter+0x278>)
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	e03c      	b.n	800fb84 <input_parameter+0x2d4>
 800fb0a:	bf00      	nop
 800fb0c:	2000c548 	.word	0x2000c548
 800fb10:	43960000 	.word	0x43960000
 800fb14:	442f0000 	.word	0x442f0000
 800fb18:	45fa0000 	.word	0x45fa0000
 800fb1c:	40e00000 	.word	0x40e00000
 800fb20:	41a00000 	.word	0x41a00000
 800fb24:	41980000 	.word	0x41980000
 800fb28:	2000c690 	.word	0x2000c690
 800fb2c:	43480000 	.word	0x43480000
 800fb30:	44160000 	.word	0x44160000
 800fb34:	461c4000 	.word	0x461c4000
 800fb38:	42980000 	.word	0x42980000
 800fb3c:	42d60000 	.word	0x42d60000
 800fb40:	429a0000 	.word	0x429a0000
 800fb44:	42ce0000 	.word	0x42ce0000
 800fb48:	43d70000 	.word	0x43d70000
 800fb4c:	42820000 	.word	0x42820000
 800fb50:	42a00000 	.word	0x42a00000
 800fb54:	43e10000 	.word	0x43e10000
 800fb58:	42700000 	.word	0x42700000
 800fb5c:	428e0000 	.word	0x428e0000
 800fb60:	41d80000 	.word	0x41d80000
 800fb64:	42b20000 	.word	0x42b20000
 800fb68:	42040000 	.word	0x42040000
 800fb6c:	42b40000 	.word	0x42b40000
 800fb70:	44188000 	.word	0x44188000
 800fb74:	42860000 	.word	0x42860000
 800fb78:	42920000 	.word	0x42920000
 800fb7c:	42640000 	.word	0x42640000
 800fb80:	42500000 	.word	0x42500000
	speed300_shortest.turn135out_R.g_speed =
 800fb84:	4a9a      	ldr	r2, [pc, #616]	; (800fdf0 <input_parameter+0x540>)
 800fb86:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 800fb8a:	4b99      	ldr	r3, [pc, #612]	; (800fdf0 <input_parameter+0x540>)
 800fb8c:	4a99      	ldr	r2, [pc, #612]	; (800fdf4 <input_parameter+0x544>)
 800fb8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 800fb92:	4b97      	ldr	r3, [pc, #604]	; (800fdf0 <input_parameter+0x540>)
 800fb94:	4a98      	ldr	r2, [pc, #608]	; (800fdf8 <input_parameter+0x548>)
 800fb96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 800fb9a:	4b95      	ldr	r3, [pc, #596]	; (800fdf0 <input_parameter+0x540>)
 800fb9c:	4a97      	ldr	r2, [pc, #604]	; (800fdfc <input_parameter+0x54c>)
 800fb9e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 800fba2:	4b93      	ldr	r3, [pc, #588]	; (800fdf0 <input_parameter+0x540>)
 800fba4:	4a96      	ldr	r2, [pc, #600]	; (800fe00 <input_parameter+0x550>)
 800fba6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fbaa:	4b91      	ldr	r3, [pc, #580]	; (800fdf0 <input_parameter+0x540>)
 800fbac:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 800fbae:	4a90      	ldr	r2, [pc, #576]	; (800fdf0 <input_parameter+0x540>)
 800fbb0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 800fbb4:	4b8e      	ldr	r3, [pc, #568]	; (800fdf0 <input_parameter+0x540>)
 800fbb6:	4a8f      	ldr	r2, [pc, #572]	; (800fdf4 <input_parameter+0x544>)
 800fbb8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 800fbbc:	4b8c      	ldr	r3, [pc, #560]	; (800fdf0 <input_parameter+0x540>)
 800fbbe:	4a8e      	ldr	r2, [pc, #568]	; (800fdf8 <input_parameter+0x548>)
 800fbc0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 800fbc4:	4b8a      	ldr	r3, [pc, #552]	; (800fdf0 <input_parameter+0x540>)
 800fbc6:	4a8d      	ldr	r2, [pc, #564]	; (800fdfc <input_parameter+0x54c>)
 800fbc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 800fbcc:	4b88      	ldr	r3, [pc, #544]	; (800fdf0 <input_parameter+0x540>)
 800fbce:	4a8d      	ldr	r2, [pc, #564]	; (800fe04 <input_parameter+0x554>)
 800fbd0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 800fbd4:	4b86      	ldr	r3, [pc, #536]	; (800fdf0 <input_parameter+0x540>)
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	4a85      	ldr	r2, [pc, #532]	; (800fdf0 <input_parameter+0x540>)
 800fbda:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 800fbde:	4b84      	ldr	r3, [pc, #528]	; (800fdf0 <input_parameter+0x540>)
 800fbe0:	4a89      	ldr	r2, [pc, #548]	; (800fe08 <input_parameter+0x558>)
 800fbe2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 800fbe6:	4b82      	ldr	r3, [pc, #520]	; (800fdf0 <input_parameter+0x540>)
 800fbe8:	4a88      	ldr	r2, [pc, #544]	; (800fe0c <input_parameter+0x55c>)
 800fbea:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 800fbee:	4b80      	ldr	r3, [pc, #512]	; (800fdf0 <input_parameter+0x540>)
 800fbf0:	4a87      	ldr	r2, [pc, #540]	; (800fe10 <input_parameter+0x560>)
 800fbf2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 800fbf6:	4b7e      	ldr	r3, [pc, #504]	; (800fdf0 <input_parameter+0x540>)
 800fbf8:	4a86      	ldr	r2, [pc, #536]	; (800fe14 <input_parameter+0x564>)
 800fbfa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 800fbfe:	4b7c      	ldr	r3, [pc, #496]	; (800fdf0 <input_parameter+0x540>)
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	4a7b      	ldr	r2, [pc, #492]	; (800fdf0 <input_parameter+0x540>)
 800fc04:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 800fc08:	4b79      	ldr	r3, [pc, #484]	; (800fdf0 <input_parameter+0x540>)
 800fc0a:	4a7f      	ldr	r2, [pc, #508]	; (800fe08 <input_parameter+0x558>)
 800fc0c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 800fc10:	4b77      	ldr	r3, [pc, #476]	; (800fdf0 <input_parameter+0x540>)
 800fc12:	4a7e      	ldr	r2, [pc, #504]	; (800fe0c <input_parameter+0x55c>)
 800fc14:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 800fc18:	4b75      	ldr	r3, [pc, #468]	; (800fdf0 <input_parameter+0x540>)
 800fc1a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800fc1e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 800fc22:	4b73      	ldr	r3, [pc, #460]	; (800fdf0 <input_parameter+0x540>)
 800fc24:	4a7c      	ldr	r2, [pc, #496]	; (800fe18 <input_parameter+0x568>)
 800fc26:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//*********************************800********************************************

	speed800_shortest.SlalomCentervelocity = 500;
 800fc2a:	4b7c      	ldr	r3, [pc, #496]	; (800fe1c <input_parameter+0x56c>)
 800fc2c:	4a7c      	ldr	r2, [pc, #496]	; (800fe20 <input_parameter+0x570>)
 800fc2e:	601a      	str	r2, [r3, #0]
	speed800_shortest.TurnCentervelocity = 500;
 800fc30:	4b7a      	ldr	r3, [pc, #488]	; (800fe1c <input_parameter+0x56c>)
 800fc32:	4a7b      	ldr	r2, [pc, #492]	; (800fe20 <input_parameter+0x570>)
 800fc34:	605a      	str	r2, [r3, #4]

	speed800_shortest.slalom_R.g_speed = 1000;
 800fc36:	4b79      	ldr	r3, [pc, #484]	; (800fe1c <input_parameter+0x56c>)
 800fc38:	4a7a      	ldr	r2, [pc, #488]	; (800fe24 <input_parameter+0x574>)
 800fc3a:	609a      	str	r2, [r3, #8]
	speed800_shortest.slalom_R.t_speed = 1000;
 800fc3c:	4b77      	ldr	r3, [pc, #476]	; (800fe1c <input_parameter+0x56c>)
 800fc3e:	4a79      	ldr	r2, [pc, #484]	; (800fe24 <input_parameter+0x574>)
 800fc40:	615a      	str	r2, [r3, #20]
	speed800_shortest.slalom_R.t_acc = 14000;
 800fc42:	4b76      	ldr	r3, [pc, #472]	; (800fe1c <input_parameter+0x56c>)
 800fc44:	4a78      	ldr	r2, [pc, #480]	; (800fe28 <input_parameter+0x578>)
 800fc46:	619a      	str	r2, [r3, #24]
	speed800_shortest.slalom_R.f_ofset = 0;
 800fc48:	4b74      	ldr	r3, [pc, #464]	; (800fe1c <input_parameter+0x56c>)
 800fc4a:	f04f 0200 	mov.w	r2, #0
 800fc4e:	60da      	str	r2, [r3, #12]
	speed800_shortest.slalom_R.e_ofset = 15;
 800fc50:	4b72      	ldr	r3, [pc, #456]	; (800fe1c <input_parameter+0x56c>)
 800fc52:	4a76      	ldr	r2, [pc, #472]	; (800fe2c <input_parameter+0x57c>)
 800fc54:	611a      	str	r2, [r3, #16]

	speed800_shortest.slalom_L.g_speed = 1000;
 800fc56:	4b71      	ldr	r3, [pc, #452]	; (800fe1c <input_parameter+0x56c>)
 800fc58:	4a72      	ldr	r2, [pc, #456]	; (800fe24 <input_parameter+0x574>)
 800fc5a:	61da      	str	r2, [r3, #28]
	speed800_shortest.slalom_L.t_speed = 1000;
 800fc5c:	4b6f      	ldr	r3, [pc, #444]	; (800fe1c <input_parameter+0x56c>)
 800fc5e:	4a71      	ldr	r2, [pc, #452]	; (800fe24 <input_parameter+0x574>)
 800fc60:	629a      	str	r2, [r3, #40]	; 0x28
	speed800_shortest.slalom_L.t_acc = 14000;
 800fc62:	4b6e      	ldr	r3, [pc, #440]	; (800fe1c <input_parameter+0x56c>)
 800fc64:	4a70      	ldr	r2, [pc, #448]	; (800fe28 <input_parameter+0x578>)
 800fc66:	62da      	str	r2, [r3, #44]	; 0x2c
	speed800_shortest.slalom_L.f_ofset = 5;
 800fc68:	4b6c      	ldr	r3, [pc, #432]	; (800fe1c <input_parameter+0x56c>)
 800fc6a:	4a71      	ldr	r2, [pc, #452]	; (800fe30 <input_parameter+0x580>)
 800fc6c:	621a      	str	r2, [r3, #32]
	speed800_shortest.slalom_L.e_ofset = 5;
 800fc6e:	4b6b      	ldr	r3, [pc, #428]	; (800fe1c <input_parameter+0x56c>)
 800fc70:	4a6f      	ldr	r2, [pc, #444]	; (800fe30 <input_parameter+0x580>)
 800fc72:	625a      	str	r2, [r3, #36]	; 0x24

	speed800_shortest.turn90_R.g_speed = 500;
 800fc74:	4b69      	ldr	r3, [pc, #420]	; (800fe1c <input_parameter+0x56c>)
 800fc76:	4a6a      	ldr	r2, [pc, #424]	; (800fe20 <input_parameter+0x570>)
 800fc78:	631a      	str	r2, [r3, #48]	; 0x30
	speed800_shortest.turn90_R.t_speed = 650;
 800fc7a:	4b68      	ldr	r3, [pc, #416]	; (800fe1c <input_parameter+0x56c>)
 800fc7c:	4a6d      	ldr	r2, [pc, #436]	; (800fe34 <input_parameter+0x584>)
 800fc7e:	63da      	str	r2, [r3, #60]	; 0x3c
	speed800_shortest.turn90_R.t_acc = 15000;
 800fc80:	4b66      	ldr	r3, [pc, #408]	; (800fe1c <input_parameter+0x56c>)
 800fc82:	4a6d      	ldr	r2, [pc, #436]	; (800fe38 <input_parameter+0x588>)
 800fc84:	641a      	str	r2, [r3, #64]	; 0x40
	speed800_shortest.turn90_R.f_ofset = 69;
 800fc86:	4b65      	ldr	r3, [pc, #404]	; (800fe1c <input_parameter+0x56c>)
 800fc88:	4a6c      	ldr	r2, [pc, #432]	; (800fe3c <input_parameter+0x58c>)
 800fc8a:	635a      	str	r2, [r3, #52]	; 0x34
	speed800_shortest.turn90_R.e_ofset = 52;
 800fc8c:	4b63      	ldr	r3, [pc, #396]	; (800fe1c <input_parameter+0x56c>)
 800fc8e:	4a6c      	ldr	r2, [pc, #432]	; (800fe40 <input_parameter+0x590>)
 800fc90:	639a      	str	r2, [r3, #56]	; 0x38

	speed800_shortest.turn90_L.g_speed = 500;
 800fc92:	4b62      	ldr	r3, [pc, #392]	; (800fe1c <input_parameter+0x56c>)
 800fc94:	4a62      	ldr	r2, [pc, #392]	; (800fe20 <input_parameter+0x570>)
 800fc96:	645a      	str	r2, [r3, #68]	; 0x44
	speed800_shortest.turn90_L.t_speed = 650;
 800fc98:	4b60      	ldr	r3, [pc, #384]	; (800fe1c <input_parameter+0x56c>)
 800fc9a:	4a66      	ldr	r2, [pc, #408]	; (800fe34 <input_parameter+0x584>)
 800fc9c:	651a      	str	r2, [r3, #80]	; 0x50
	speed800_shortest.turn90_L.t_acc = 15000;
 800fc9e:	4b5f      	ldr	r3, [pc, #380]	; (800fe1c <input_parameter+0x56c>)
 800fca0:	4a65      	ldr	r2, [pc, #404]	; (800fe38 <input_parameter+0x588>)
 800fca2:	655a      	str	r2, [r3, #84]	; 0x54
	speed800_shortest.turn90_L.f_ofset = 79;
 800fca4:	4b5d      	ldr	r3, [pc, #372]	; (800fe1c <input_parameter+0x56c>)
 800fca6:	4a67      	ldr	r2, [pc, #412]	; (800fe44 <input_parameter+0x594>)
 800fca8:	649a      	str	r2, [r3, #72]	; 0x48
	speed800_shortest.turn90_L.e_ofset = 49;
 800fcaa:	4b5c      	ldr	r3, [pc, #368]	; (800fe1c <input_parameter+0x56c>)
 800fcac:	4a66      	ldr	r2, [pc, #408]	; (800fe48 <input_parameter+0x598>)
 800fcae:	64da      	str	r2, [r3, #76]	; 0x4c

	speed800_shortest.turn180_R.g_speed = 500;
 800fcb0:	4b5a      	ldr	r3, [pc, #360]	; (800fe1c <input_parameter+0x56c>)
 800fcb2:	4a5b      	ldr	r2, [pc, #364]	; (800fe20 <input_parameter+0x570>)
 800fcb4:	659a      	str	r2, [r3, #88]	; 0x58
	speed800_shortest.turn180_R.t_speed = 600;
 800fcb6:	4b59      	ldr	r3, [pc, #356]	; (800fe1c <input_parameter+0x56c>)
 800fcb8:	4a64      	ldr	r2, [pc, #400]	; (800fe4c <input_parameter+0x59c>)
 800fcba:	665a      	str	r2, [r3, #100]	; 0x64
	speed800_shortest.turn180_R.t_acc = 15000;
 800fcbc:	4b57      	ldr	r3, [pc, #348]	; (800fe1c <input_parameter+0x56c>)
 800fcbe:	4a5e      	ldr	r2, [pc, #376]	; (800fe38 <input_parameter+0x588>)
 800fcc0:	669a      	str	r2, [r3, #104]	; 0x68
	speed800_shortest.turn180_R.f_ofset = 65;
 800fcc2:	4b56      	ldr	r3, [pc, #344]	; (800fe1c <input_parameter+0x56c>)
 800fcc4:	4a62      	ldr	r2, [pc, #392]	; (800fe50 <input_parameter+0x5a0>)
 800fcc6:	65da      	str	r2, [r3, #92]	; 0x5c
	speed800_shortest.turn180_R.e_ofset = 50;
 800fcc8:	4b54      	ldr	r3, [pc, #336]	; (800fe1c <input_parameter+0x56c>)
 800fcca:	4a62      	ldr	r2, [pc, #392]	; (800fe54 <input_parameter+0x5a4>)
 800fccc:	661a      	str	r2, [r3, #96]	; 0x60

	speed800_shortest.turn180_L.g_speed = 500;
 800fcce:	4b53      	ldr	r3, [pc, #332]	; (800fe1c <input_parameter+0x56c>)
 800fcd0:	4a53      	ldr	r2, [pc, #332]	; (800fe20 <input_parameter+0x570>)
 800fcd2:	66da      	str	r2, [r3, #108]	; 0x6c
	speed800_shortest.turn180_L.t_speed = 600;
 800fcd4:	4b51      	ldr	r3, [pc, #324]	; (800fe1c <input_parameter+0x56c>)
 800fcd6:	4a5d      	ldr	r2, [pc, #372]	; (800fe4c <input_parameter+0x59c>)
 800fcd8:	679a      	str	r2, [r3, #120]	; 0x78
	speed800_shortest.turn180_L.t_acc = 15000;
 800fcda:	4b50      	ldr	r3, [pc, #320]	; (800fe1c <input_parameter+0x56c>)
 800fcdc:	4a56      	ldr	r2, [pc, #344]	; (800fe38 <input_parameter+0x588>)
 800fcde:	67da      	str	r2, [r3, #124]	; 0x7c
	speed800_shortest.turn180_L.f_ofset = 60;
 800fce0:	4b4e      	ldr	r3, [pc, #312]	; (800fe1c <input_parameter+0x56c>)
 800fce2:	4a4d      	ldr	r2, [pc, #308]	; (800fe18 <input_parameter+0x568>)
 800fce4:	671a      	str	r2, [r3, #112]	; 0x70
	speed800_shortest.turn180_L.e_ofset = 54;
 800fce6:	4b4d      	ldr	r3, [pc, #308]	; (800fe1c <input_parameter+0x56c>)
 800fce8:	4a5b      	ldr	r2, [pc, #364]	; (800fe58 <input_parameter+0x5a8>)
 800fcea:	675a      	str	r2, [r3, #116]	; 0x74

	speed800_shortest.turn45in_R.g_speed = 500;
 800fcec:	4b4b      	ldr	r3, [pc, #300]	; (800fe1c <input_parameter+0x56c>)
 800fcee:	4a4c      	ldr	r2, [pc, #304]	; (800fe20 <input_parameter+0x570>)
 800fcf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed800_shortest.turn45in_R.t_speed = 650;
 800fcf4:	4b49      	ldr	r3, [pc, #292]	; (800fe1c <input_parameter+0x56c>)
 800fcf6:	4a4f      	ldr	r2, [pc, #316]	; (800fe34 <input_parameter+0x584>)
 800fcf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed800_shortest.turn45in_R.t_acc = 15000;
 800fcfc:	4b47      	ldr	r3, [pc, #284]	; (800fe1c <input_parameter+0x56c>)
 800fcfe:	4a4e      	ldr	r2, [pc, #312]	; (800fe38 <input_parameter+0x588>)
 800fd00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed800_shortest.turn45in_R.f_ofset = 60;
 800fd04:	4b45      	ldr	r3, [pc, #276]	; (800fe1c <input_parameter+0x56c>)
 800fd06:	4a44      	ldr	r2, [pc, #272]	; (800fe18 <input_parameter+0x568>)
 800fd08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed800_shortest.turn45in_R.e_ofset = 40;
 800fd0c:	4b43      	ldr	r3, [pc, #268]	; (800fe1c <input_parameter+0x56c>)
 800fd0e:	4a53      	ldr	r2, [pc, #332]	; (800fe5c <input_parameter+0x5ac>)
 800fd10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed800_shortest.turn45in_L.g_speed = 500;
 800fd14:	4b41      	ldr	r3, [pc, #260]	; (800fe1c <input_parameter+0x56c>)
 800fd16:	4a42      	ldr	r2, [pc, #264]	; (800fe20 <input_parameter+0x570>)
 800fd18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed800_shortest.turn45in_L.t_speed = 650;
 800fd1c:	4b3f      	ldr	r3, [pc, #252]	; (800fe1c <input_parameter+0x56c>)
 800fd1e:	4a45      	ldr	r2, [pc, #276]	; (800fe34 <input_parameter+0x584>)
 800fd20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed800_shortest.turn45in_L.t_acc = 15000;
 800fd24:	4b3d      	ldr	r3, [pc, #244]	; (800fe1c <input_parameter+0x56c>)
 800fd26:	4a44      	ldr	r2, [pc, #272]	; (800fe38 <input_parameter+0x588>)
 800fd28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed800_shortest.turn45in_L.f_ofset = 64;
 800fd2c:	4b3b      	ldr	r3, [pc, #236]	; (800fe1c <input_parameter+0x56c>)
 800fd2e:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800fd32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed800_shortest.turn45in_L.e_ofset = 44;
 800fd36:	4b39      	ldr	r3, [pc, #228]	; (800fe1c <input_parameter+0x56c>)
 800fd38:	4a49      	ldr	r2, [pc, #292]	; (800fe60 <input_parameter+0x5b0>)
 800fd3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed800_shortest.turn135in_R.g_speed = 500;
 800fd3e:	4b37      	ldr	r3, [pc, #220]	; (800fe1c <input_parameter+0x56c>)
 800fd40:	4a37      	ldr	r2, [pc, #220]	; (800fe20 <input_parameter+0x570>)
 800fd42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed800_shortest.turn135in_R.t_speed = 650;
 800fd46:	4b35      	ldr	r3, [pc, #212]	; (800fe1c <input_parameter+0x56c>)
 800fd48:	4a3a      	ldr	r2, [pc, #232]	; (800fe34 <input_parameter+0x584>)
 800fd4a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed800_shortest.turn135in_R.t_acc = 15000;
 800fd4e:	4b33      	ldr	r3, [pc, #204]	; (800fe1c <input_parameter+0x56c>)
 800fd50:	4a39      	ldr	r2, [pc, #228]	; (800fe38 <input_parameter+0x588>)
 800fd52:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed800_shortest.turn135in_R.f_ofset = 75;
 800fd56:	4b31      	ldr	r3, [pc, #196]	; (800fe1c <input_parameter+0x56c>)
 800fd58:	4a42      	ldr	r2, [pc, #264]	; (800fe64 <input_parameter+0x5b4>)
 800fd5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed800_shortest.turn135in_R.e_ofset = 40;
 800fd5e:	4b2f      	ldr	r3, [pc, #188]	; (800fe1c <input_parameter+0x56c>)
 800fd60:	4a3e      	ldr	r2, [pc, #248]	; (800fe5c <input_parameter+0x5ac>)
 800fd62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed800_shortest.turn135in_L.g_speed = 500;
 800fd66:	4b2d      	ldr	r3, [pc, #180]	; (800fe1c <input_parameter+0x56c>)
 800fd68:	4a2d      	ldr	r2, [pc, #180]	; (800fe20 <input_parameter+0x570>)
 800fd6a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed800_shortest.turn135in_L.t_speed = 650;
 800fd6e:	4b2b      	ldr	r3, [pc, #172]	; (800fe1c <input_parameter+0x56c>)
 800fd70:	4a30      	ldr	r2, [pc, #192]	; (800fe34 <input_parameter+0x584>)
 800fd72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed800_shortest.turn135in_L.t_acc = 15000;
 800fd76:	4b29      	ldr	r3, [pc, #164]	; (800fe1c <input_parameter+0x56c>)
 800fd78:	4a2f      	ldr	r2, [pc, #188]	; (800fe38 <input_parameter+0x588>)
 800fd7a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed800_shortest.turn135in_L.f_ofset = 70;
 800fd7e:	4b27      	ldr	r3, [pc, #156]	; (800fe1c <input_parameter+0x56c>)
 800fd80:	4a39      	ldr	r2, [pc, #228]	; (800fe68 <input_parameter+0x5b8>)
 800fd82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed800_shortest.turn135in_L.e_ofset = 44;
 800fd86:	4b25      	ldr	r3, [pc, #148]	; (800fe1c <input_parameter+0x56c>)
 800fd88:	4a35      	ldr	r2, [pc, #212]	; (800fe60 <input_parameter+0x5b0>)
 800fd8a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed800_shortest.turn45out_R.g_speed = 500;
 800fd8e:	4b23      	ldr	r3, [pc, #140]	; (800fe1c <input_parameter+0x56c>)
 800fd90:	4a23      	ldr	r2, [pc, #140]	; (800fe20 <input_parameter+0x570>)
 800fd92:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed800_shortest.turn45out_R.t_speed = 650;
 800fd96:	4b21      	ldr	r3, [pc, #132]	; (800fe1c <input_parameter+0x56c>)
 800fd98:	4a26      	ldr	r2, [pc, #152]	; (800fe34 <input_parameter+0x584>)
 800fd9a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed800_shortest.turn45out_R.t_acc = 15000;
 800fd9e:	4b1f      	ldr	r3, [pc, #124]	; (800fe1c <input_parameter+0x56c>)
 800fda0:	4a25      	ldr	r2, [pc, #148]	; (800fe38 <input_parameter+0x588>)
 800fda2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed800_shortest.turn45out_R.f_ofset = 75;
 800fda6:	4b1d      	ldr	r3, [pc, #116]	; (800fe1c <input_parameter+0x56c>)
 800fda8:	4a2e      	ldr	r2, [pc, #184]	; (800fe64 <input_parameter+0x5b4>)
 800fdaa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed800_shortest.turn45out_R.e_ofset = 48;
 800fdae:	4b1b      	ldr	r3, [pc, #108]	; (800fe1c <input_parameter+0x56c>)
 800fdb0:	4a2e      	ldr	r2, [pc, #184]	; (800fe6c <input_parameter+0x5bc>)
 800fdb2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed800_shortest.turn45out_L.g_speed = 500;
 800fdb6:	4b19      	ldr	r3, [pc, #100]	; (800fe1c <input_parameter+0x56c>)
 800fdb8:	4a19      	ldr	r2, [pc, #100]	; (800fe20 <input_parameter+0x570>)
 800fdba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed800_shortest.turn45out_L.t_speed = 650;
 800fdbe:	4b17      	ldr	r3, [pc, #92]	; (800fe1c <input_parameter+0x56c>)
 800fdc0:	4a1c      	ldr	r2, [pc, #112]	; (800fe34 <input_parameter+0x584>)
 800fdc2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed800_shortest.turn45out_L.t_acc = 15000;
 800fdc6:	4b15      	ldr	r3, [pc, #84]	; (800fe1c <input_parameter+0x56c>)
 800fdc8:	4a1b      	ldr	r2, [pc, #108]	; (800fe38 <input_parameter+0x588>)
 800fdca:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed800_shortest.turn45out_L.f_ofset = 58;
 800fdce:	4b13      	ldr	r3, [pc, #76]	; (800fe1c <input_parameter+0x56c>)
 800fdd0:	4a27      	ldr	r2, [pc, #156]	; (800fe70 <input_parameter+0x5c0>)
 800fdd2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed800_shortest.turn45out_L.e_ofset = 48;
 800fdd6:	4b11      	ldr	r3, [pc, #68]	; (800fe1c <input_parameter+0x56c>)
 800fdd8:	4a24      	ldr	r2, [pc, #144]	; (800fe6c <input_parameter+0x5bc>)
 800fdda:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed800_shortest.turn135out_R.g_speed = 500;
 800fdde:	4b0f      	ldr	r3, [pc, #60]	; (800fe1c <input_parameter+0x56c>)
 800fde0:	4a0f      	ldr	r2, [pc, #60]	; (800fe20 <input_parameter+0x570>)
 800fde2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed800_shortest.turn135out_R.t_speed = 650;
 800fde6:	4b0d      	ldr	r3, [pc, #52]	; (800fe1c <input_parameter+0x56c>)
 800fde8:	4a12      	ldr	r2, [pc, #72]	; (800fe34 <input_parameter+0x584>)
 800fdea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800fdee:	e041      	b.n	800fe74 <input_parameter+0x5c4>
 800fdf0:	2000c690 	.word	0x2000c690
 800fdf4:	44250000 	.word	0x44250000
 800fdf8:	45fa0000 	.word	0x45fa0000
 800fdfc:	425c0000 	.word	0x425c0000
 800fe00:	42c80000 	.word	0x42c80000
 800fe04:	42ce0000 	.word	0x42ce0000
 800fe08:	442f0000 	.word	0x442f0000
 800fe0c:	462be000 	.word	0x462be000
 800fe10:	420c0000 	.word	0x420c0000
 800fe14:	42600000 	.word	0x42600000
 800fe18:	42700000 	.word	0x42700000
 800fe1c:	2000c7d8 	.word	0x2000c7d8
 800fe20:	43fa0000 	.word	0x43fa0000
 800fe24:	447a0000 	.word	0x447a0000
 800fe28:	465ac000 	.word	0x465ac000
 800fe2c:	41700000 	.word	0x41700000
 800fe30:	40a00000 	.word	0x40a00000
 800fe34:	44228000 	.word	0x44228000
 800fe38:	466a6000 	.word	0x466a6000
 800fe3c:	428a0000 	.word	0x428a0000
 800fe40:	42500000 	.word	0x42500000
 800fe44:	429e0000 	.word	0x429e0000
 800fe48:	42440000 	.word	0x42440000
 800fe4c:	44160000 	.word	0x44160000
 800fe50:	42820000 	.word	0x42820000
 800fe54:	42480000 	.word	0x42480000
 800fe58:	42580000 	.word	0x42580000
 800fe5c:	42200000 	.word	0x42200000
 800fe60:	42300000 	.word	0x42300000
 800fe64:	42960000 	.word	0x42960000
 800fe68:	428c0000 	.word	0x428c0000
 800fe6c:	42400000 	.word	0x42400000
 800fe70:	42680000 	.word	0x42680000
	speed800_shortest.turn135out_R.t_acc = 15000;
 800fe74:	4b9b      	ldr	r3, [pc, #620]	; (80100e4 <input_parameter+0x834>)
 800fe76:	4a9c      	ldr	r2, [pc, #624]	; (80100e8 <input_parameter+0x838>)
 800fe78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed800_shortest.turn135out_R.f_ofset = 75;
 800fe7c:	4b99      	ldr	r3, [pc, #612]	; (80100e4 <input_parameter+0x834>)
 800fe7e:	4a9b      	ldr	r2, [pc, #620]	; (80100ec <input_parameter+0x83c>)
 800fe80:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed800_shortest.turn135out_R.e_ofset = 60;
 800fe84:	4b97      	ldr	r3, [pc, #604]	; (80100e4 <input_parameter+0x834>)
 800fe86:	4a9a      	ldr	r2, [pc, #616]	; (80100f0 <input_parameter+0x840>)
 800fe88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed800_shortest.turn135out_L.g_speed = 500;
 800fe8c:	4b95      	ldr	r3, [pc, #596]	; (80100e4 <input_parameter+0x834>)
 800fe8e:	4a99      	ldr	r2, [pc, #612]	; (80100f4 <input_parameter+0x844>)
 800fe90:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed800_shortest.turn135out_L.t_speed = 650;
 800fe94:	4b93      	ldr	r3, [pc, #588]	; (80100e4 <input_parameter+0x834>)
 800fe96:	4a98      	ldr	r2, [pc, #608]	; (80100f8 <input_parameter+0x848>)
 800fe98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed800_shortest.turn135out_L.t_acc = 15000;
 800fe9c:	4b91      	ldr	r3, [pc, #580]	; (80100e4 <input_parameter+0x834>)
 800fe9e:	4a92      	ldr	r2, [pc, #584]	; (80100e8 <input_parameter+0x838>)
 800fea0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed800_shortest.turn135out_L.f_ofset = 80;
 800fea4:	4b8f      	ldr	r3, [pc, #572]	; (80100e4 <input_parameter+0x834>)
 800fea6:	4a95      	ldr	r2, [pc, #596]	; (80100fc <input_parameter+0x84c>)
 800fea8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed800_shortest.turn135out_L.e_ofset = 64;
 800feac:	4b8d      	ldr	r3, [pc, #564]	; (80100e4 <input_parameter+0x834>)
 800feae:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800feb2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed800_shortest.V90_R.g_speed = 500;
 800feb6:	4b8b      	ldr	r3, [pc, #556]	; (80100e4 <input_parameter+0x834>)
 800feb8:	4a8e      	ldr	r2, [pc, #568]	; (80100f4 <input_parameter+0x844>)
 800feba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed800_shortest.V90_R.t_speed = 650;
 800febe:	4b89      	ldr	r3, [pc, #548]	; (80100e4 <input_parameter+0x834>)
 800fec0:	4a8d      	ldr	r2, [pc, #564]	; (80100f8 <input_parameter+0x848>)
 800fec2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed800_shortest.V90_R.t_acc = 15000;
 800fec6:	4b87      	ldr	r3, [pc, #540]	; (80100e4 <input_parameter+0x834>)
 800fec8:	4a87      	ldr	r2, [pc, #540]	; (80100e8 <input_parameter+0x838>)
 800feca:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed800_shortest.V90_R.f_ofset = 55;
 800fece:	4b85      	ldr	r3, [pc, #532]	; (80100e4 <input_parameter+0x834>)
 800fed0:	4a8b      	ldr	r2, [pc, #556]	; (8010100 <input_parameter+0x850>)
 800fed2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed800_shortest.V90_R.e_ofset = 40;
 800fed6:	4b83      	ldr	r3, [pc, #524]	; (80100e4 <input_parameter+0x834>)
 800fed8:	4a8a      	ldr	r2, [pc, #552]	; (8010104 <input_parameter+0x854>)
 800feda:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed800_shortest.V90_L.g_speed = 500;
 800fede:	4b81      	ldr	r3, [pc, #516]	; (80100e4 <input_parameter+0x834>)
 800fee0:	4a84      	ldr	r2, [pc, #528]	; (80100f4 <input_parameter+0x844>)
 800fee2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed800_shortest.V90_L.t_speed = 650;
 800fee6:	4b7f      	ldr	r3, [pc, #508]	; (80100e4 <input_parameter+0x834>)
 800fee8:	4a83      	ldr	r2, [pc, #524]	; (80100f8 <input_parameter+0x848>)
 800feea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed800_shortest.V90_L.t_acc = 15000;
 800feee:	4b7d      	ldr	r3, [pc, #500]	; (80100e4 <input_parameter+0x834>)
 800fef0:	4a7d      	ldr	r2, [pc, #500]	; (80100e8 <input_parameter+0x838>)
 800fef2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed800_shortest.V90_L.f_ofset = 50;
 800fef6:	4b7b      	ldr	r3, [pc, #492]	; (80100e4 <input_parameter+0x834>)
 800fef8:	4a83      	ldr	r2, [pc, #524]	; (8010108 <input_parameter+0x858>)
 800fefa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed800_shortest.V90_L.e_ofset = 44;
 800fefe:	4b79      	ldr	r3, [pc, #484]	; (80100e4 <input_parameter+0x834>)
 800ff00:	4a82      	ldr	r2, [pc, #520]	; (801010c <input_parameter+0x85c>)
 800ff02:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


	//********************************800********************************************
	speed800_shortest_mollifier.SlalomCentervelocity = 800;
 800ff06:	4b82      	ldr	r3, [pc, #520]	; (8010110 <input_parameter+0x860>)
 800ff08:	4a82      	ldr	r2, [pc, #520]	; (8010114 <input_parameter+0x864>)
 800ff0a:	601a      	str	r2, [r3, #0]
	speed800_shortest_mollifier.TurnCentervelocity = 800;
 800ff0c:	4b80      	ldr	r3, [pc, #512]	; (8010110 <input_parameter+0x860>)
 800ff0e:	4a81      	ldr	r2, [pc, #516]	; (8010114 <input_parameter+0x864>)
 800ff10:	605a      	str	r2, [r3, #4]

	speed800_shortest_mollifier.slalom_R.g_speed =
			speed800_shortest_mollifier.SlalomCentervelocity;
 800ff12:	4b7f      	ldr	r3, [pc, #508]	; (8010110 <input_parameter+0x860>)
 800ff14:	681b      	ldr	r3, [r3, #0]
	speed800_shortest_mollifier.slalom_R.g_speed =
 800ff16:	4a7e      	ldr	r2, [pc, #504]	; (8010110 <input_parameter+0x860>)
 800ff18:	6093      	str	r3, [r2, #8]
	speed800_shortest_mollifier.slalom_R.t_speed = 1600;
 800ff1a:	4b7d      	ldr	r3, [pc, #500]	; (8010110 <input_parameter+0x860>)
 800ff1c:	4a7e      	ldr	r2, [pc, #504]	; (8010118 <input_parameter+0x868>)
 800ff1e:	615a      	str	r2, [r3, #20]
	speed800_shortest_mollifier.slalom_R.t_acc = 60000;
 800ff20:	4b7b      	ldr	r3, [pc, #492]	; (8010110 <input_parameter+0x860>)
 800ff22:	4a7e      	ldr	r2, [pc, #504]	; (801011c <input_parameter+0x86c>)
 800ff24:	619a      	str	r2, [r3, #24]
	speed800_shortest_mollifier.slalom_R.f_ofset = 15;
 800ff26:	4b7a      	ldr	r3, [pc, #488]	; (8010110 <input_parameter+0x860>)
 800ff28:	4a7d      	ldr	r2, [pc, #500]	; (8010120 <input_parameter+0x870>)
 800ff2a:	60da      	str	r2, [r3, #12]
	speed800_shortest_mollifier.slalom_R.e_ofset = 28;
 800ff2c:	4b78      	ldr	r3, [pc, #480]	; (8010110 <input_parameter+0x860>)
 800ff2e:	4a7d      	ldr	r2, [pc, #500]	; (8010124 <input_parameter+0x874>)
 800ff30:	611a      	str	r2, [r3, #16]

	speed800_shortest_mollifier.slalom_L.g_speed =
			speed800_shortest_mollifier.SlalomCentervelocity;
 800ff32:	4b77      	ldr	r3, [pc, #476]	; (8010110 <input_parameter+0x860>)
 800ff34:	681b      	ldr	r3, [r3, #0]
	speed800_shortest_mollifier.slalom_L.g_speed =
 800ff36:	4a76      	ldr	r2, [pc, #472]	; (8010110 <input_parameter+0x860>)
 800ff38:	61d3      	str	r3, [r2, #28]
	speed800_shortest_mollifier.slalom_L.t_speed = 800;
 800ff3a:	4b75      	ldr	r3, [pc, #468]	; (8010110 <input_parameter+0x860>)
 800ff3c:	4a75      	ldr	r2, [pc, #468]	; (8010114 <input_parameter+0x864>)
 800ff3e:	629a      	str	r2, [r3, #40]	; 0x28
	speed800_shortest_mollifier.slalom_L.t_acc = 60000;
 800ff40:	4b73      	ldr	r3, [pc, #460]	; (8010110 <input_parameter+0x860>)
 800ff42:	4a76      	ldr	r2, [pc, #472]	; (801011c <input_parameter+0x86c>)
 800ff44:	62da      	str	r2, [r3, #44]	; 0x2c
	speed800_shortest_mollifier.slalom_L.f_ofset = 15;
 800ff46:	4b72      	ldr	r3, [pc, #456]	; (8010110 <input_parameter+0x860>)
 800ff48:	4a75      	ldr	r2, [pc, #468]	; (8010120 <input_parameter+0x870>)
 800ff4a:	621a      	str	r2, [r3, #32]
	speed800_shortest_mollifier.slalom_L.e_ofset = 32;
 800ff4c:	4b70      	ldr	r3, [pc, #448]	; (8010110 <input_parameter+0x860>)
 800ff4e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800ff52:	625a      	str	r2, [r3, #36]	; 0x24

	speed800_shortest_mollifier.turn90_R.g_speed = 800;
 800ff54:	4b6e      	ldr	r3, [pc, #440]	; (8010110 <input_parameter+0x860>)
 800ff56:	4a6f      	ldr	r2, [pc, #444]	; (8010114 <input_parameter+0x864>)
 800ff58:	631a      	str	r2, [r3, #48]	; 0x30
	speed800_shortest_mollifier.turn90_R.t_speed = 1400;
 800ff5a:	4b6d      	ldr	r3, [pc, #436]	; (8010110 <input_parameter+0x860>)
 800ff5c:	4a72      	ldr	r2, [pc, #456]	; (8010128 <input_parameter+0x878>)
 800ff5e:	63da      	str	r2, [r3, #60]	; 0x3c
	speed800_shortest_mollifier.turn90_R.t_acc = 31000;
 800ff60:	4b6b      	ldr	r3, [pc, #428]	; (8010110 <input_parameter+0x860>)
 800ff62:	4a72      	ldr	r2, [pc, #456]	; (801012c <input_parameter+0x87c>)
 800ff64:	641a      	str	r2, [r3, #64]	; 0x40
	speed800_shortest_mollifier.turn90_R.f_ofset = 49;
 800ff66:	4b6a      	ldr	r3, [pc, #424]	; (8010110 <input_parameter+0x860>)
 800ff68:	4a71      	ldr	r2, [pc, #452]	; (8010130 <input_parameter+0x880>)
 800ff6a:	635a      	str	r2, [r3, #52]	; 0x34
	speed800_shortest_mollifier.turn90_R.e_ofset = 91;
 800ff6c:	4b68      	ldr	r3, [pc, #416]	; (8010110 <input_parameter+0x860>)
 800ff6e:	4a71      	ldr	r2, [pc, #452]	; (8010134 <input_parameter+0x884>)
 800ff70:	639a      	str	r2, [r3, #56]	; 0x38

	speed800_shortest_mollifier.turn90_L.g_speed = 800;
 800ff72:	4b67      	ldr	r3, [pc, #412]	; (8010110 <input_parameter+0x860>)
 800ff74:	4a67      	ldr	r2, [pc, #412]	; (8010114 <input_parameter+0x864>)
 800ff76:	645a      	str	r2, [r3, #68]	; 0x44
	speed800_shortest_mollifier.turn90_L.t_speed = 1400;
 800ff78:	4b65      	ldr	r3, [pc, #404]	; (8010110 <input_parameter+0x860>)
 800ff7a:	4a6b      	ldr	r2, [pc, #428]	; (8010128 <input_parameter+0x878>)
 800ff7c:	651a      	str	r2, [r3, #80]	; 0x50
	speed800_shortest_mollifier.turn90_L.t_acc = 31000;
 800ff7e:	4b64      	ldr	r3, [pc, #400]	; (8010110 <input_parameter+0x860>)
 800ff80:	4a6a      	ldr	r2, [pc, #424]	; (801012c <input_parameter+0x87c>)
 800ff82:	655a      	str	r2, [r3, #84]	; 0x54
	speed800_shortest_mollifier.turn90_L.f_ofset = 49;
 800ff84:	4b62      	ldr	r3, [pc, #392]	; (8010110 <input_parameter+0x860>)
 800ff86:	4a6a      	ldr	r2, [pc, #424]	; (8010130 <input_parameter+0x880>)
 800ff88:	649a      	str	r2, [r3, #72]	; 0x48
	speed800_shortest_mollifier.turn90_L.e_ofset = 95;
 800ff8a:	4b61      	ldr	r3, [pc, #388]	; (8010110 <input_parameter+0x860>)
 800ff8c:	4a6a      	ldr	r2, [pc, #424]	; (8010138 <input_parameter+0x888>)
 800ff8e:	64da      	str	r2, [r3, #76]	; 0x4c

	speed800_shortest_mollifier.turn180_R.g_speed =800;
 800ff90:	4b5f      	ldr	r3, [pc, #380]	; (8010110 <input_parameter+0x860>)
 800ff92:	4a60      	ldr	r2, [pc, #384]	; (8010114 <input_parameter+0x864>)
 800ff94:	659a      	str	r2, [r3, #88]	; 0x58
	speed800_shortest_mollifier.turn180_R.t_speed = 1320;
 800ff96:	4b5e      	ldr	r3, [pc, #376]	; (8010110 <input_parameter+0x860>)
 800ff98:	4a68      	ldr	r2, [pc, #416]	; (801013c <input_parameter+0x88c>)
 800ff9a:	665a      	str	r2, [r3, #100]	; 0x64
	speed800_shortest_mollifier.turn180_R.t_acc = 19000;
 800ff9c:	4b5c      	ldr	r3, [pc, #368]	; (8010110 <input_parameter+0x860>)
 800ff9e:	4a68      	ldr	r2, [pc, #416]	; (8010140 <input_parameter+0x890>)
 800ffa0:	669a      	str	r2, [r3, #104]	; 0x68
	speed800_shortest_mollifier.turn180_R.f_ofset = 7;
 800ffa2:	4b5b      	ldr	r3, [pc, #364]	; (8010110 <input_parameter+0x860>)
 800ffa4:	4a67      	ldr	r2, [pc, #412]	; (8010144 <input_parameter+0x894>)
 800ffa6:	65da      	str	r2, [r3, #92]	; 0x5c
	speed800_shortest_mollifier.turn180_R.e_ofset = 95;
 800ffa8:	4b59      	ldr	r3, [pc, #356]	; (8010110 <input_parameter+0x860>)
 800ffaa:	4a63      	ldr	r2, [pc, #396]	; (8010138 <input_parameter+0x888>)
 800ffac:	661a      	str	r2, [r3, #96]	; 0x60

	speed800_shortest_mollifier.turn180_L.g_speed = 800;
 800ffae:	4b58      	ldr	r3, [pc, #352]	; (8010110 <input_parameter+0x860>)
 800ffb0:	4a58      	ldr	r2, [pc, #352]	; (8010114 <input_parameter+0x864>)
 800ffb2:	66da      	str	r2, [r3, #108]	; 0x6c
	speed800_shortest_mollifier.turn180_L.t_speed = 1320;
 800ffb4:	4b56      	ldr	r3, [pc, #344]	; (8010110 <input_parameter+0x860>)
 800ffb6:	4a61      	ldr	r2, [pc, #388]	; (801013c <input_parameter+0x88c>)
 800ffb8:	679a      	str	r2, [r3, #120]	; 0x78
	speed800_shortest_mollifier.turn180_L.t_acc = 19000;
 800ffba:	4b55      	ldr	r3, [pc, #340]	; (8010110 <input_parameter+0x860>)
 800ffbc:	4a60      	ldr	r2, [pc, #384]	; (8010140 <input_parameter+0x890>)
 800ffbe:	67da      	str	r2, [r3, #124]	; 0x7c
	speed800_shortest_mollifier.turn180_L.f_ofset = 7;
 800ffc0:	4b53      	ldr	r3, [pc, #332]	; (8010110 <input_parameter+0x860>)
 800ffc2:	4a60      	ldr	r2, [pc, #384]	; (8010144 <input_parameter+0x894>)
 800ffc4:	671a      	str	r2, [r3, #112]	; 0x70
	speed800_shortest_mollifier.turn180_L.e_ofset = 93;
 800ffc6:	4b52      	ldr	r3, [pc, #328]	; (8010110 <input_parameter+0x860>)
 800ffc8:	4a5f      	ldr	r2, [pc, #380]	; (8010148 <input_parameter+0x898>)
 800ffca:	675a      	str	r2, [r3, #116]	; 0x74

	speed800_shortest_mollifier.turn45in_R.g_speed = 800;
 800ffcc:	4b50      	ldr	r3, [pc, #320]	; (8010110 <input_parameter+0x860>)
 800ffce:	4a51      	ldr	r2, [pc, #324]	; (8010114 <input_parameter+0x864>)
 800ffd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed800_shortest_mollifier.turn45in_R.t_speed = 1130;
 800ffd4:	4b4e      	ldr	r3, [pc, #312]	; (8010110 <input_parameter+0x860>)
 800ffd6:	4a5d      	ldr	r2, [pc, #372]	; (801014c <input_parameter+0x89c>)
 800ffd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed800_shortest_mollifier.turn45in_R.t_acc = 66000;
 800ffdc:	4b4c      	ldr	r3, [pc, #304]	; (8010110 <input_parameter+0x860>)
 800ffde:	4a5c      	ldr	r2, [pc, #368]	; (8010150 <input_parameter+0x8a0>)
 800ffe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed800_shortest_mollifier.turn45in_R.f_ofset = 13;
 800ffe4:	4b4a      	ldr	r3, [pc, #296]	; (8010110 <input_parameter+0x860>)
 800ffe6:	4a5b      	ldr	r2, [pc, #364]	; (8010154 <input_parameter+0x8a4>)
 800ffe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed800_shortest_mollifier.turn45in_R.e_ofset = 78;
 800ffec:	4b48      	ldr	r3, [pc, #288]	; (8010110 <input_parameter+0x860>)
 800ffee:	4a5a      	ldr	r2, [pc, #360]	; (8010158 <input_parameter+0x8a8>)
 800fff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed800_shortest_mollifier.turn45in_L.g_speed = 800;
 800fff4:	4b46      	ldr	r3, [pc, #280]	; (8010110 <input_parameter+0x860>)
 800fff6:	4a47      	ldr	r2, [pc, #284]	; (8010114 <input_parameter+0x864>)
 800fff8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed800_shortest_mollifier.turn45in_L.t_speed = 1130;
 800fffc:	4b44      	ldr	r3, [pc, #272]	; (8010110 <input_parameter+0x860>)
 800fffe:	4a53      	ldr	r2, [pc, #332]	; (801014c <input_parameter+0x89c>)
 8010000:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed800_shortest_mollifier.turn45in_L.t_acc = 67000;
 8010004:	4b42      	ldr	r3, [pc, #264]	; (8010110 <input_parameter+0x860>)
 8010006:	4a55      	ldr	r2, [pc, #340]	; (801015c <input_parameter+0x8ac>)
 8010008:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed800_shortest_mollifier.turn45in_L.f_ofset = 11;
 801000c:	4b40      	ldr	r3, [pc, #256]	; (8010110 <input_parameter+0x860>)
 801000e:	4a54      	ldr	r2, [pc, #336]	; (8010160 <input_parameter+0x8b0>)
 8010010:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed800_shortest_mollifier.turn45in_L.e_ofset = 76;
 8010014:	4b3e      	ldr	r3, [pc, #248]	; (8010110 <input_parameter+0x860>)
 8010016:	4a53      	ldr	r2, [pc, #332]	; (8010164 <input_parameter+0x8b4>)
 8010018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed800_shortest_mollifier.turn135in_R.g_speed = 800;
 801001c:	4b3c      	ldr	r3, [pc, #240]	; (8010110 <input_parameter+0x860>)
 801001e:	4a3d      	ldr	r2, [pc, #244]	; (8010114 <input_parameter+0x864>)
 8010020:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed800_shortest_mollifier.turn135in_R.t_speed = 1470;
 8010024:	4b3a      	ldr	r3, [pc, #232]	; (8010110 <input_parameter+0x860>)
 8010026:	4a50      	ldr	r2, [pc, #320]	; (8010168 <input_parameter+0x8b8>)
 8010028:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed800_shortest_mollifier.turn135in_R.t_acc = 34000;
 801002c:	4b38      	ldr	r3, [pc, #224]	; (8010110 <input_parameter+0x860>)
 801002e:	4a4f      	ldr	r2, [pc, #316]	; (801016c <input_parameter+0x8bc>)
 8010030:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed800_shortest_mollifier.turn135in_R.f_ofset = 8;
 8010034:	4b36      	ldr	r3, [pc, #216]	; (8010110 <input_parameter+0x860>)
 8010036:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801003a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed800_shortest_mollifier.turn135in_R.e_ofset = 106;
 801003e:	4b34      	ldr	r3, [pc, #208]	; (8010110 <input_parameter+0x860>)
 8010040:	4a4b      	ldr	r2, [pc, #300]	; (8010170 <input_parameter+0x8c0>)
 8010042:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed800_shortest_mollifier.turn135in_L.g_speed = 800;
 8010046:	4b32      	ldr	r3, [pc, #200]	; (8010110 <input_parameter+0x860>)
 8010048:	4a32      	ldr	r2, [pc, #200]	; (8010114 <input_parameter+0x864>)
 801004a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed800_shortest_mollifier.turn135in_L.t_speed = 1470;
 801004e:	4b30      	ldr	r3, [pc, #192]	; (8010110 <input_parameter+0x860>)
 8010050:	4a45      	ldr	r2, [pc, #276]	; (8010168 <input_parameter+0x8b8>)
 8010052:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed800_shortest_mollifier.turn135in_L.t_acc = 34000;
 8010056:	4b2e      	ldr	r3, [pc, #184]	; (8010110 <input_parameter+0x860>)
 8010058:	4a44      	ldr	r2, [pc, #272]	; (801016c <input_parameter+0x8bc>)
 801005a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed800_shortest_mollifier.turn135in_L.f_ofset = 8;
 801005e:	4b2c      	ldr	r3, [pc, #176]	; (8010110 <input_parameter+0x860>)
 8010060:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8010064:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed800_shortest_mollifier.turn135in_L.e_ofset = 101;
 8010068:	4b29      	ldr	r3, [pc, #164]	; (8010110 <input_parameter+0x860>)
 801006a:	4a42      	ldr	r2, [pc, #264]	; (8010174 <input_parameter+0x8c4>)
 801006c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed800_shortest_mollifier.turn45out_R.g_speed = 800;
 8010070:	4b27      	ldr	r3, [pc, #156]	; (8010110 <input_parameter+0x860>)
 8010072:	4a28      	ldr	r2, [pc, #160]	; (8010114 <input_parameter+0x864>)
 8010074:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed800_shortest_mollifier.turn45out_R.t_speed = 1120;
 8010078:	4b25      	ldr	r3, [pc, #148]	; (8010110 <input_parameter+0x860>)
 801007a:	4a3f      	ldr	r2, [pc, #252]	; (8010178 <input_parameter+0x8c8>)
 801007c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed800_shortest_mollifier.turn45out_R.t_acc = 42000;
 8010080:	4b23      	ldr	r3, [pc, #140]	; (8010110 <input_parameter+0x860>)
 8010082:	4a3e      	ldr	r2, [pc, #248]	; (801017c <input_parameter+0x8cc>)
 8010084:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed800_shortest_mollifier.turn45out_R.f_ofset = 43;
 8010088:	4b21      	ldr	r3, [pc, #132]	; (8010110 <input_parameter+0x860>)
 801008a:	4a3d      	ldr	r2, [pc, #244]	; (8010180 <input_parameter+0x8d0>)
 801008c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed800_shortest_mollifier.turn45out_R.e_ofset = 58;
 8010090:	4b1f      	ldr	r3, [pc, #124]	; (8010110 <input_parameter+0x860>)
 8010092:	4a3c      	ldr	r2, [pc, #240]	; (8010184 <input_parameter+0x8d4>)
 8010094:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed800_shortest_mollifier.turn45out_L.g_speed = 800;
 8010098:	4b1d      	ldr	r3, [pc, #116]	; (8010110 <input_parameter+0x860>)
 801009a:	4a1e      	ldr	r2, [pc, #120]	; (8010114 <input_parameter+0x864>)
 801009c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed800_shortest_mollifier.turn45out_L.t_speed = 1120;
 80100a0:	4b1b      	ldr	r3, [pc, #108]	; (8010110 <input_parameter+0x860>)
 80100a2:	4a35      	ldr	r2, [pc, #212]	; (8010178 <input_parameter+0x8c8>)
 80100a4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed800_shortest_mollifier.turn45out_L.t_acc = 42000;
 80100a8:	4b19      	ldr	r3, [pc, #100]	; (8010110 <input_parameter+0x860>)
 80100aa:	4a34      	ldr	r2, [pc, #208]	; (801017c <input_parameter+0x8cc>)
 80100ac:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed800_shortest_mollifier.turn45out_L.f_ofset = 46;
 80100b0:	4b17      	ldr	r3, [pc, #92]	; (8010110 <input_parameter+0x860>)
 80100b2:	4a35      	ldr	r2, [pc, #212]	; (8010188 <input_parameter+0x8d8>)
 80100b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed800_shortest_mollifier.turn45out_L.e_ofset = 81;
 80100b8:	4b15      	ldr	r3, [pc, #84]	; (8010110 <input_parameter+0x860>)
 80100ba:	4a34      	ldr	r2, [pc, #208]	; (801018c <input_parameter+0x8dc>)
 80100bc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed800_shortest_mollifier.turn135out_R.g_speed = 800;
 80100c0:	4b13      	ldr	r3, [pc, #76]	; (8010110 <input_parameter+0x860>)
 80100c2:	4a14      	ldr	r2, [pc, #80]	; (8010114 <input_parameter+0x864>)
 80100c4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed800_shortest_mollifier.turn135out_R.t_speed = 1550;
 80100c8:	4b11      	ldr	r3, [pc, #68]	; (8010110 <input_parameter+0x860>)
 80100ca:	4a31      	ldr	r2, [pc, #196]	; (8010190 <input_parameter+0x8e0>)
 80100cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed800_shortest_mollifier.turn135out_R.t_acc = 34000;
 80100d0:	4b0f      	ldr	r3, [pc, #60]	; (8010110 <input_parameter+0x860>)
 80100d2:	4a26      	ldr	r2, [pc, #152]	; (801016c <input_parameter+0x8bc>)
 80100d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed800_shortest_mollifier.turn135out_R.f_ofset = 15;
 80100d8:	4b0d      	ldr	r3, [pc, #52]	; (8010110 <input_parameter+0x860>)
 80100da:	4a11      	ldr	r2, [pc, #68]	; (8010120 <input_parameter+0x870>)
 80100dc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80100e0:	e058      	b.n	8010194 <input_parameter+0x8e4>
 80100e2:	bf00      	nop
 80100e4:	2000c7d8 	.word	0x2000c7d8
 80100e8:	466a6000 	.word	0x466a6000
 80100ec:	42960000 	.word	0x42960000
 80100f0:	42700000 	.word	0x42700000
 80100f4:	43fa0000 	.word	0x43fa0000
 80100f8:	44228000 	.word	0x44228000
 80100fc:	42a00000 	.word	0x42a00000
 8010100:	425c0000 	.word	0x425c0000
 8010104:	42200000 	.word	0x42200000
 8010108:	42480000 	.word	0x42480000
 801010c:	42300000 	.word	0x42300000
 8010110:	2000c920 	.word	0x2000c920
 8010114:	44480000 	.word	0x44480000
 8010118:	44c80000 	.word	0x44c80000
 801011c:	476a6000 	.word	0x476a6000
 8010120:	41700000 	.word	0x41700000
 8010124:	41e00000 	.word	0x41e00000
 8010128:	44af0000 	.word	0x44af0000
 801012c:	46f23000 	.word	0x46f23000
 8010130:	42440000 	.word	0x42440000
 8010134:	42b60000 	.word	0x42b60000
 8010138:	42be0000 	.word	0x42be0000
 801013c:	44a50000 	.word	0x44a50000
 8010140:	46947000 	.word	0x46947000
 8010144:	40e00000 	.word	0x40e00000
 8010148:	42ba0000 	.word	0x42ba0000
 801014c:	448d4000 	.word	0x448d4000
 8010150:	4780e800 	.word	0x4780e800
 8010154:	41500000 	.word	0x41500000
 8010158:	429c0000 	.word	0x429c0000
 801015c:	4782dc00 	.word	0x4782dc00
 8010160:	41300000 	.word	0x41300000
 8010164:	42980000 	.word	0x42980000
 8010168:	44b7c000 	.word	0x44b7c000
 801016c:	4704d000 	.word	0x4704d000
 8010170:	42d40000 	.word	0x42d40000
 8010174:	42ca0000 	.word	0x42ca0000
 8010178:	448c0000 	.word	0x448c0000
 801017c:	47241000 	.word	0x47241000
 8010180:	422c0000 	.word	0x422c0000
 8010184:	42680000 	.word	0x42680000
 8010188:	42380000 	.word	0x42380000
 801018c:	42a20000 	.word	0x42a20000
 8010190:	44c1c000 	.word	0x44c1c000
	speed800_shortest_mollifier.turn135out_R.e_ofset = 118;
 8010194:	4b22      	ldr	r3, [pc, #136]	; (8010220 <input_parameter+0x970>)
 8010196:	4a23      	ldr	r2, [pc, #140]	; (8010224 <input_parameter+0x974>)
 8010198:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed800_shortest_mollifier.turn135out_L.g_speed = 800;
 801019c:	4b20      	ldr	r3, [pc, #128]	; (8010220 <input_parameter+0x970>)
 801019e:	4a22      	ldr	r2, [pc, #136]	; (8010228 <input_parameter+0x978>)
 80101a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed800_shortest_mollifier.turn135out_L.t_speed = 1550;
 80101a4:	4b1e      	ldr	r3, [pc, #120]	; (8010220 <input_parameter+0x970>)
 80101a6:	4a21      	ldr	r2, [pc, #132]	; (801022c <input_parameter+0x97c>)
 80101a8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed800_shortest_mollifier.turn135out_L.t_acc = 34000;
 80101ac:	4b1c      	ldr	r3, [pc, #112]	; (8010220 <input_parameter+0x970>)
 80101ae:	4a20      	ldr	r2, [pc, #128]	; (8010230 <input_parameter+0x980>)
 80101b0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed800_shortest_mollifier.turn135out_L.f_ofset = 15;
 80101b4:	4b1a      	ldr	r3, [pc, #104]	; (8010220 <input_parameter+0x970>)
 80101b6:	4a1f      	ldr	r2, [pc, #124]	; (8010234 <input_parameter+0x984>)
 80101b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed800_shortest_mollifier.turn135out_L.e_ofset = 116;
 80101bc:	4b18      	ldr	r3, [pc, #96]	; (8010220 <input_parameter+0x970>)
 80101be:	4a1e      	ldr	r2, [pc, #120]	; (8010238 <input_parameter+0x988>)
 80101c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed800_shortest_mollifier.V90_R.g_speed = 800;
 80101c4:	4b16      	ldr	r3, [pc, #88]	; (8010220 <input_parameter+0x970>)
 80101c6:	4a18      	ldr	r2, [pc, #96]	; (8010228 <input_parameter+0x978>)
 80101c8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed800_shortest_mollifier.V90_R.t_speed = 1640;
 80101cc:	4b14      	ldr	r3, [pc, #80]	; (8010220 <input_parameter+0x970>)
 80101ce:	4a1b      	ldr	r2, [pc, #108]	; (801023c <input_parameter+0x98c>)
 80101d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed800_shortest_mollifier.V90_R.t_acc = 33000;
 80101d4:	4b12      	ldr	r3, [pc, #72]	; (8010220 <input_parameter+0x970>)
 80101d6:	4a1a      	ldr	r2, [pc, #104]	; (8010240 <input_parameter+0x990>)
 80101d8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed800_shortest_mollifier.V90_R.f_ofset = 20;
 80101dc:	4b10      	ldr	r3, [pc, #64]	; (8010220 <input_parameter+0x970>)
 80101de:	4a19      	ldr	r2, [pc, #100]	; (8010244 <input_parameter+0x994>)
 80101e0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed800_shortest_mollifier.V90_R.e_ofset = 72;
 80101e4:	4b0e      	ldr	r3, [pc, #56]	; (8010220 <input_parameter+0x970>)
 80101e6:	4a18      	ldr	r2, [pc, #96]	; (8010248 <input_parameter+0x998>)
 80101e8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed800_shortest_mollifier.V90_L.g_speed = 800;
 80101ec:	4b0c      	ldr	r3, [pc, #48]	; (8010220 <input_parameter+0x970>)
 80101ee:	4a0e      	ldr	r2, [pc, #56]	; (8010228 <input_parameter+0x978>)
 80101f0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed800_shortest_mollifier.V90_L.t_speed = 1640;
 80101f4:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <input_parameter+0x970>)
 80101f6:	4a11      	ldr	r2, [pc, #68]	; (801023c <input_parameter+0x98c>)
 80101f8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed800_shortest_mollifier.V90_L.t_acc = 33000;
 80101fc:	4b08      	ldr	r3, [pc, #32]	; (8010220 <input_parameter+0x970>)
 80101fe:	4a10      	ldr	r2, [pc, #64]	; (8010240 <input_parameter+0x990>)
 8010200:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed800_shortest_mollifier.V90_L.f_ofset = 20;
 8010204:	4b06      	ldr	r3, [pc, #24]	; (8010220 <input_parameter+0x970>)
 8010206:	4a0f      	ldr	r2, [pc, #60]	; (8010244 <input_parameter+0x994>)
 8010208:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed800_shortest_mollifier.V90_L.e_ofset = 72;
 801020c:	4b04      	ldr	r3, [pc, #16]	; (8010220 <input_parameter+0x970>)
 801020e:	4a0e      	ldr	r2, [pc, #56]	; (8010248 <input_parameter+0x998>)
 8010210:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



}
 8010214:	bf00      	nop
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr
 801021e:	bf00      	nop
 8010220:	2000c920 	.word	0x2000c920
 8010224:	42ec0000 	.word	0x42ec0000
 8010228:	44480000 	.word	0x44480000
 801022c:	44c1c000 	.word	0x44c1c000
 8010230:	4704d000 	.word	0x4704d000
 8010234:	41700000 	.word	0x41700000
 8010238:	42e80000 	.word	0x42e80000
 801023c:	44cd0000 	.word	0x44cd0000
 8010240:	4700e800 	.word	0x4700e800
 8010244:	41a00000 	.word	0x41a00000
 8010248:	42900000 	.word	0x42900000

0801024c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010250:	4b22      	ldr	r3, [pc, #136]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010252:	4a23      	ldr	r2, [pc, #140]	; (80102e0 <MX_USART1_UART_Init+0x94>)
 8010254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8010256:	4b21      	ldr	r3, [pc, #132]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801025c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801025e:	4b1f      	ldr	r3, [pc, #124]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010260:	2200      	movs	r2, #0
 8010262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010264:	4b1d      	ldr	r3, [pc, #116]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010266:	2200      	movs	r2, #0
 8010268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801026a:	4b1c      	ldr	r3, [pc, #112]	; (80102dc <MX_USART1_UART_Init+0x90>)
 801026c:	2200      	movs	r2, #0
 801026e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010270:	4b1a      	ldr	r3, [pc, #104]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010272:	220c      	movs	r2, #12
 8010274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010276:	4b19      	ldr	r3, [pc, #100]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010278:	2200      	movs	r2, #0
 801027a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801027c:	4b17      	ldr	r3, [pc, #92]	; (80102dc <MX_USART1_UART_Init+0x90>)
 801027e:	2200      	movs	r2, #0
 8010280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010282:	4b16      	ldr	r3, [pc, #88]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010284:	2200      	movs	r2, #0
 8010286:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8010288:	4b14      	ldr	r3, [pc, #80]	; (80102dc <MX_USART1_UART_Init+0x90>)
 801028a:	2200      	movs	r2, #0
 801028c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801028e:	4b13      	ldr	r3, [pc, #76]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010290:	2200      	movs	r2, #0
 8010292:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010294:	4811      	ldr	r0, [pc, #68]	; (80102dc <MX_USART1_UART_Init+0x90>)
 8010296:	f006 fabd 	bl	8016814 <HAL_UART_Init>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d001      	beq.n	80102a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80102a0:	f7f9 fd7b 	bl	8009d9a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80102a4:	2100      	movs	r1, #0
 80102a6:	480d      	ldr	r0, [pc, #52]	; (80102dc <MX_USART1_UART_Init+0x90>)
 80102a8:	f007 f884 	bl	80173b4 <HAL_UARTEx_SetTxFifoThreshold>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80102b2:	f7f9 fd72 	bl	8009d9a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80102b6:	2100      	movs	r1, #0
 80102b8:	4808      	ldr	r0, [pc, #32]	; (80102dc <MX_USART1_UART_Init+0x90>)
 80102ba:	f007 f8b9 	bl	8017430 <HAL_UARTEx_SetRxFifoThreshold>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d001      	beq.n	80102c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80102c4:	f7f9 fd69 	bl	8009d9a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80102c8:	4804      	ldr	r0, [pc, #16]	; (80102dc <MX_USART1_UART_Init+0x90>)
 80102ca:	f007 f83a 	bl	8017342 <HAL_UARTEx_DisableFifoMode>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d001      	beq.n	80102d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80102d4:	f7f9 fd61 	bl	8009d9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80102d8:	bf00      	nop
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	2000ca68 	.word	0x2000ca68
 80102e0:	40013800 	.word	0x40013800

080102e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b09e      	sub	sp, #120	; 0x78
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80102f0:	2200      	movs	r2, #0
 80102f2:	601a      	str	r2, [r3, #0]
 80102f4:	605a      	str	r2, [r3, #4]
 80102f6:	609a      	str	r2, [r3, #8]
 80102f8:	60da      	str	r2, [r3, #12]
 80102fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80102fc:	f107 0314 	add.w	r3, r7, #20
 8010300:	2250      	movs	r2, #80	; 0x50
 8010302:	2100      	movs	r1, #0
 8010304:	4618      	mov	r0, r3
 8010306:	f007 f957 	bl	80175b8 <memset>
  if(uartHandle->Instance==USART1)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a1f      	ldr	r2, [pc, #124]	; (801038c <HAL_UART_MspInit+0xa8>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d137      	bne.n	8010384 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8010314:	2301      	movs	r3, #1
 8010316:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010318:	2300      	movs	r3, #0
 801031a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801031c:	f107 0314 	add.w	r3, r7, #20
 8010320:	4618      	mov	r0, r3
 8010322:	f003 fe21 	bl	8013f68 <HAL_RCCEx_PeriphCLKConfig>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d001      	beq.n	8010330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 801032c:	f7f9 fd35 	bl	8009d9a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010330:	4b17      	ldr	r3, [pc, #92]	; (8010390 <HAL_UART_MspInit+0xac>)
 8010332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010334:	4a16      	ldr	r2, [pc, #88]	; (8010390 <HAL_UART_MspInit+0xac>)
 8010336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801033a:	6613      	str	r3, [r2, #96]	; 0x60
 801033c:	4b14      	ldr	r3, [pc, #80]	; (8010390 <HAL_UART_MspInit+0xac>)
 801033e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010344:	613b      	str	r3, [r7, #16]
 8010346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010348:	4b11      	ldr	r3, [pc, #68]	; (8010390 <HAL_UART_MspInit+0xac>)
 801034a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801034c:	4a10      	ldr	r2, [pc, #64]	; (8010390 <HAL_UART_MspInit+0xac>)
 801034e:	f043 0301 	orr.w	r3, r3, #1
 8010352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010354:	4b0e      	ldr	r3, [pc, #56]	; (8010390 <HAL_UART_MspInit+0xac>)
 8010356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010358:	f003 0301 	and.w	r3, r3, #1
 801035c:	60fb      	str	r3, [r7, #12]
 801035e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8010360:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010364:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010366:	2302      	movs	r3, #2
 8010368:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801036a:	2300      	movs	r3, #0
 801036c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801036e:	2300      	movs	r3, #0
 8010370:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010372:	2307      	movs	r3, #7
 8010374:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010376:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801037a:	4619      	mov	r1, r3
 801037c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010380:	f002 fe74 	bl	801306c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8010384:	bf00      	nop
 8010386:	3778      	adds	r7, #120	; 0x78
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	40013800 	.word	0x40013800
 8010390:	40021000 	.word	0x40021000

08010394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8010394:	480d      	ldr	r0, [pc, #52]	; (80103cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8010396:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010398:	480d      	ldr	r0, [pc, #52]	; (80103d0 <LoopForever+0x6>)
  ldr r1, =_edata
 801039a:	490e      	ldr	r1, [pc, #56]	; (80103d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 801039c:	4a0e      	ldr	r2, [pc, #56]	; (80103d8 <LoopForever+0xe>)
  movs r3, #0
 801039e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80103a0:	e002      	b.n	80103a8 <LoopCopyDataInit>

080103a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80103a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80103a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80103a6:	3304      	adds	r3, #4

080103a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80103a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80103aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80103ac:	d3f9      	bcc.n	80103a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80103ae:	4a0b      	ldr	r2, [pc, #44]	; (80103dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80103b0:	4c0b      	ldr	r4, [pc, #44]	; (80103e0 <LoopForever+0x16>)
  movs r3, #0
 80103b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80103b4:	e001      	b.n	80103ba <LoopFillZerobss>

080103b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80103b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80103b8:	3204      	adds	r2, #4

080103ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80103ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80103bc:	d3fb      	bcc.n	80103b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80103be:	f7ff f84f 	bl	800f460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80103c2:	f007 f8c7 	bl	8017554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80103c6:	f7f9 fbed 	bl	8009ba4 <main>

080103ca <LoopForever>:

LoopForever:
    b LoopForever
 80103ca:	e7fe      	b.n	80103ca <LoopForever>
  ldr   r0, =_estack
 80103cc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80103d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80103d4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80103d8:	0801aaa0 	.word	0x0801aaa0
  ldr r2, =_sbss
 80103dc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80103e0:	2000cb0c 	.word	0x2000cb0c

080103e4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80103e4:	e7fe      	b.n	80103e4 <ADC3_IRQHandler>

080103e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b082      	sub	sp, #8
 80103ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80103ec:	2300      	movs	r3, #0
 80103ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80103f0:	2003      	movs	r0, #3
 80103f2:	f002 fb2f 	bl	8012a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80103f6:	200f      	movs	r0, #15
 80103f8:	f000 f80e 	bl	8010418 <HAL_InitTick>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d002      	beq.n	8010408 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8010402:	2301      	movs	r3, #1
 8010404:	71fb      	strb	r3, [r7, #7]
 8010406:	e001      	b.n	801040c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8010408:	f7fe fed8 	bl	800f1bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801040c:	79fb      	ldrb	r3, [r7, #7]

}
 801040e:	4618      	mov	r0, r3
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
	...

08010418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8010424:	4b16      	ldr	r3, [pc, #88]	; (8010480 <HAL_InitTick+0x68>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d022      	beq.n	8010472 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 801042c:	4b15      	ldr	r3, [pc, #84]	; (8010484 <HAL_InitTick+0x6c>)
 801042e:	681a      	ldr	r2, [r3, #0]
 8010430:	4b13      	ldr	r3, [pc, #76]	; (8010480 <HAL_InitTick+0x68>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010438:	fbb1 f3f3 	udiv	r3, r1, r3
 801043c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010440:	4618      	mov	r0, r3
 8010442:	f002 fb3a 	bl	8012aba <HAL_SYSTICK_Config>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d10f      	bne.n	801046c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b0f      	cmp	r3, #15
 8010450:	d809      	bhi.n	8010466 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010452:	2200      	movs	r2, #0
 8010454:	6879      	ldr	r1, [r7, #4]
 8010456:	f04f 30ff 	mov.w	r0, #4294967295
 801045a:	f002 fb06 	bl	8012a6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801045e:	4a0a      	ldr	r2, [pc, #40]	; (8010488 <HAL_InitTick+0x70>)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6013      	str	r3, [r2, #0]
 8010464:	e007      	b.n	8010476 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8010466:	2301      	movs	r3, #1
 8010468:	73fb      	strb	r3, [r7, #15]
 801046a:	e004      	b.n	8010476 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 801046c:	2301      	movs	r3, #1
 801046e:	73fb      	strb	r3, [r7, #15]
 8010470:	e001      	b.n	8010476 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8010472:	2301      	movs	r3, #1
 8010474:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8010476:	7bfb      	ldrb	r3, [r7, #15]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	20000008 	.word	0x20000008
 8010484:	20000000 	.word	0x20000000
 8010488:	20000004 	.word	0x20000004

0801048c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801048c:	b480      	push	{r7}
 801048e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010490:	4b05      	ldr	r3, [pc, #20]	; (80104a8 <HAL_IncTick+0x1c>)
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	4b05      	ldr	r3, [pc, #20]	; (80104ac <HAL_IncTick+0x20>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4413      	add	r3, r2
 801049a:	4a03      	ldr	r2, [pc, #12]	; (80104a8 <HAL_IncTick+0x1c>)
 801049c:	6013      	str	r3, [r2, #0]
}
 801049e:	bf00      	nop
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr
 80104a8:	2000caf8 	.word	0x2000caf8
 80104ac:	20000008 	.word	0x20000008

080104b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0
  return uwTick;
 80104b4:	4b03      	ldr	r3, [pc, #12]	; (80104c4 <HAL_GetTick+0x14>)
 80104b6:	681b      	ldr	r3, [r3, #0]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	2000caf8 	.word	0x2000caf8

080104c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80104d0:	f7ff ffee 	bl	80104b0 <HAL_GetTick>
 80104d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e0:	d004      	beq.n	80104ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80104e2:	4b09      	ldr	r3, [pc, #36]	; (8010508 <HAL_Delay+0x40>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	68fa      	ldr	r2, [r7, #12]
 80104e8:	4413      	add	r3, r2
 80104ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80104ec:	bf00      	nop
 80104ee:	f7ff ffdf 	bl	80104b0 <HAL_GetTick>
 80104f2:	4602      	mov	r2, r0
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	68fa      	ldr	r2, [r7, #12]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d8f7      	bhi.n	80104ee <HAL_Delay+0x26>
  {
  }
}
 80104fe:	bf00      	nop
 8010500:	bf00      	nop
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	20000008 	.word	0x20000008

0801050c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	431a      	orrs	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	609a      	str	r2, [r3, #8]
}
 8010526:	bf00      	nop
 8010528:	370c      	adds	r7, #12
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr

08010532 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8010532:	b480      	push	{r7}
 8010534:	b083      	sub	sp, #12
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	431a      	orrs	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	609a      	str	r2, [r3, #8]
}
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	689b      	ldr	r3, [r3, #8]
 8010564:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8010568:	4618      	mov	r0, r3
 801056a:	370c      	adds	r7, #12
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr

08010574 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8010574:	b480      	push	{r7}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	3360      	adds	r3, #96	; 0x60
 8010586:	461a      	mov	r2, r3
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4413      	add	r3, r2
 801058e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	4b08      	ldr	r3, [pc, #32]	; (80105b8 <LL_ADC_SetOffset+0x44>)
 8010596:	4013      	ands	r3, r2
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801059e:	683a      	ldr	r2, [r7, #0]
 80105a0:	430a      	orrs	r2, r1
 80105a2:	4313      	orrs	r3, r2
 80105a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80105ac:	bf00      	nop
 80105ae:	371c      	adds	r7, #28
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr
 80105b8:	03fff000 	.word	0x03fff000

080105bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3360      	adds	r3, #96	; 0x60
 80105ca:	461a      	mov	r2, r3
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	4413      	add	r3, r2
 80105d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3714      	adds	r7, #20
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr

080105e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b087      	sub	sp, #28
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	3360      	adds	r3, #96	; 0x60
 80105f8:	461a      	mov	r2, r3
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	4413      	add	r3, r2
 8010600:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	431a      	orrs	r2, r3
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8010612:	bf00      	nop
 8010614:	371c      	adds	r7, #28
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr

0801061e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801061e:	b480      	push	{r7}
 8010620:	b087      	sub	sp, #28
 8010622:	af00      	add	r7, sp, #0
 8010624:	60f8      	str	r0, [r7, #12]
 8010626:	60b9      	str	r1, [r7, #8]
 8010628:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	3360      	adds	r3, #96	; 0x60
 801062e:	461a      	mov	r2, r3
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	4413      	add	r3, r2
 8010636:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	431a      	orrs	r2, r3
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8010648:	bf00      	nop
 801064a:	371c      	adds	r7, #28
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8010654:	b480      	push	{r7}
 8010656:	b087      	sub	sp, #28
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3360      	adds	r3, #96	; 0x60
 8010664:	461a      	mov	r2, r3
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	4413      	add	r3, r2
 801066c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	431a      	orrs	r2, r3
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 801067e:	bf00      	nop
 8010680:	371c      	adds	r7, #28
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr

0801068a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 801068a:	b480      	push	{r7}
 801068c:	b083      	sub	sp, #12
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
 8010692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	695b      	ldr	r3, [r3, #20]
 8010698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	431a      	orrs	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	615a      	str	r2, [r3, #20]
}
 80106a4:	bf00      	nop
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	68db      	ldr	r3, [r3, #12]
 80106bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d101      	bne.n	80106c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80106c4:	2301      	movs	r3, #1
 80106c6:	e000      	b.n	80106ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b087      	sub	sp, #28
 80106da:	af00      	add	r7, sp, #0
 80106dc:	60f8      	str	r0, [r7, #12]
 80106de:	60b9      	str	r1, [r7, #8]
 80106e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	3330      	adds	r3, #48	; 0x30
 80106e6:	461a      	mov	r2, r3
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	0a1b      	lsrs	r3, r3, #8
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	f003 030c 	and.w	r3, r3, #12
 80106f2:	4413      	add	r3, r2
 80106f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	f003 031f 	and.w	r3, r3, #31
 8010700:	211f      	movs	r1, #31
 8010702:	fa01 f303 	lsl.w	r3, r1, r3
 8010706:	43db      	mvns	r3, r3
 8010708:	401a      	ands	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	0e9b      	lsrs	r3, r3, #26
 801070e:	f003 011f 	and.w	r1, r3, #31
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	f003 031f 	and.w	r3, r3, #31
 8010718:	fa01 f303 	lsl.w	r3, r1, r3
 801071c:	431a      	orrs	r2, r3
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8010722:	bf00      	nop
 8010724:	371c      	adds	r7, #28
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr

0801072e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801072e:	b480      	push	{r7}
 8010730:	b083      	sub	sp, #12
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801073a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801073e:	2b00      	cmp	r3, #0
 8010740:	d101      	bne.n	8010746 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8010742:	2301      	movs	r3, #1
 8010744:	e000      	b.n	8010748 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8010754:	b480      	push	{r7}
 8010756:	b087      	sub	sp, #28
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	3314      	adds	r3, #20
 8010764:	461a      	mov	r2, r3
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	0e5b      	lsrs	r3, r3, #25
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	f003 0304 	and.w	r3, r3, #4
 8010770:	4413      	add	r3, r2
 8010772:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	0d1b      	lsrs	r3, r3, #20
 801077c:	f003 031f 	and.w	r3, r3, #31
 8010780:	2107      	movs	r1, #7
 8010782:	fa01 f303 	lsl.w	r3, r1, r3
 8010786:	43db      	mvns	r3, r3
 8010788:	401a      	ands	r2, r3
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	0d1b      	lsrs	r3, r3, #20
 801078e:	f003 031f 	and.w	r3, r3, #31
 8010792:	6879      	ldr	r1, [r7, #4]
 8010794:	fa01 f303 	lsl.w	r3, r1, r3
 8010798:	431a      	orrs	r2, r3
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801079e:	bf00      	nop
 80107a0:	371c      	adds	r7, #28
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr
	...

080107ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b085      	sub	sp, #20
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a0f      	ldr	r2, [pc, #60]	; (80107f8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d10a      	bne.n	80107d6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107cc:	431a      	orrs	r2, r3
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80107d4:	e00a      	b.n	80107ec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107e2:	43db      	mvns	r3, r3
 80107e4:	401a      	ands	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80107ec:	bf00      	nop
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr
 80107f8:	407f0000 	.word	0x407f0000

080107fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b083      	sub	sp, #12
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	f003 031f 	and.w	r3, r3, #31
}
 801080c:	4618      	mov	r0, r3
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8010828:	4618      	mov	r0, r3
 801082a:	370c      	adds	r7, #12
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr

08010834 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8010844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	6093      	str	r3, [r2, #8]
}
 801084c:	bf00      	nop
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801086c:	d101      	bne.n	8010872 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801086e:	2301      	movs	r3, #1
 8010870:	e000      	b.n	8010874 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8010890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 801089c:	bf00      	nop
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108bc:	d101      	bne.n	80108c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80108be:	2301      	movs	r3, #1
 80108c0:	e000      	b.n	80108c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80108e4:	f043 0201 	orr.w	r2, r3, #1
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80108ec:	bf00      	nop
 80108ee:	370c      	adds	r7, #12
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801090c:	f043 0202 	orr.w	r2, r3, #2
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8010914:	bf00      	nop
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	689b      	ldr	r3, [r3, #8]
 801092c:	f003 0301 	and.w	r3, r3, #1
 8010930:	2b01      	cmp	r3, #1
 8010932:	d101      	bne.n	8010938 <LL_ADC_IsEnabled+0x18>
 8010934:	2301      	movs	r3, #1
 8010936:	e000      	b.n	801093a <LL_ADC_IsEnabled+0x1a>
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8010946:	b480      	push	{r7}
 8010948:	b083      	sub	sp, #12
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	f003 0302 	and.w	r3, r3, #2
 8010956:	2b02      	cmp	r3, #2
 8010958:	d101      	bne.n	801095e <LL_ADC_IsDisableOngoing+0x18>
 801095a:	2301      	movs	r3, #1
 801095c:	e000      	b.n	8010960 <LL_ADC_IsDisableOngoing+0x1a>
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	689b      	ldr	r3, [r3, #8]
 8010978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801097c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010980:	f043 0204 	orr.w	r2, r3, #4
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80109a8:	f043 0210 	orr.w	r2, r3, #16
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80109b0:	bf00      	nop
 80109b2:	370c      	adds	r7, #12
 80109b4:	46bd      	mov	sp, r7
 80109b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ba:	4770      	bx	lr

080109bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	f003 0304 	and.w	r3, r3, #4
 80109cc:	2b04      	cmp	r3, #4
 80109ce:	d101      	bne.n	80109d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80109d0:	2301      	movs	r3, #1
 80109d2:	e000      	b.n	80109d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80109d4:	2300      	movs	r3, #0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	370c      	adds	r7, #12
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80109e2:	b480      	push	{r7}
 80109e4:	b083      	sub	sp, #12
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80109f6:	f043 0220 	orr.w	r2, r3, #32
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80109fe:	bf00      	nop
 8010a00:	370c      	adds	r7, #12
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b083      	sub	sp, #12
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	f003 0308 	and.w	r3, r3, #8
 8010a1a:	2b08      	cmp	r3, #8
 8010a1c:	d101      	bne.n	8010a22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e000      	b.n	8010a24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8010a30:	b590      	push	{r4, r7, lr}
 8010a32:	b089      	sub	sp, #36	; 0x24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d101      	bne.n	8010a4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	e1a1      	b.n	8010d8e <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	695b      	ldr	r3, [r3, #20]
 8010a4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d109      	bne.n	8010a6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f7f7 fb49 	bl	80080f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2200      	movs	r2, #0
 8010a62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7ff fef1 	bl	8010858 <LL_ADC_IsDeepPowerDownEnabled>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d004      	beq.n	8010a86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7ff fed7 	bl	8010834 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff ff0c 	bl	80108a8 <LL_ADC_IsInternalRegulatorEnabled>
 8010a90:	4603      	mov	r3, r0
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d115      	bne.n	8010ac2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7ff fef0 	bl	8010880 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8010aa0:	4b9a      	ldr	r3, [pc, #616]	; (8010d0c <HAL_ADC_Init+0x2dc>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	099b      	lsrs	r3, r3, #6
 8010aa6:	4a9a      	ldr	r2, [pc, #616]	; (8010d10 <HAL_ADC_Init+0x2e0>)
 8010aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8010aac:	099b      	lsrs	r3, r3, #6
 8010aae:	3301      	adds	r3, #1
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010ab4:	e002      	b.n	8010abc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1f9      	bne.n	8010ab6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7ff feee 	bl	80108a8 <LL_ADC_IsInternalRegulatorEnabled>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10d      	bne.n	8010aee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ad6:	f043 0210 	orr.w	r2, r3, #16
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ae2:	f043 0201 	orr.w	r2, r3, #1
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8010aea:	2301      	movs	r3, #1
 8010aec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff ff62 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 8010af8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010afe:	f003 0310 	and.w	r3, r3, #16
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f040 813a 	bne.w	8010d7c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f040 8136 	bne.w	8010d7c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8010b18:	f043 0202 	orr.w	r2, r3, #2
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7ff fefb 	bl	8010920 <LL_ADC_IsEnabled>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d137      	bne.n	8010ba0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b38:	d004      	beq.n	8010b44 <HAL_ADC_Init+0x114>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a75      	ldr	r2, [pc, #468]	; (8010d14 <HAL_ADC_Init+0x2e4>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d10f      	bne.n	8010b64 <HAL_ADC_Init+0x134>
 8010b44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8010b48:	f7ff feea 	bl	8010920 <LL_ADC_IsEnabled>
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	4871      	ldr	r0, [pc, #452]	; (8010d14 <HAL_ADC_Init+0x2e4>)
 8010b50:	f7ff fee6 	bl	8010920 <LL_ADC_IsEnabled>
 8010b54:	4603      	mov	r3, r0
 8010b56:	4323      	orrs	r3, r4
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	bf0c      	ite	eq
 8010b5c:	2301      	moveq	r3, #1
 8010b5e:	2300      	movne	r3, #0
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	e008      	b.n	8010b76 <HAL_ADC_Init+0x146>
 8010b64:	486c      	ldr	r0, [pc, #432]	; (8010d18 <HAL_ADC_Init+0x2e8>)
 8010b66:	f7ff fedb 	bl	8010920 <LL_ADC_IsEnabled>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	bf0c      	ite	eq
 8010b70:	2301      	moveq	r3, #1
 8010b72:	2300      	movne	r3, #0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d012      	beq.n	8010ba0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b82:	d004      	beq.n	8010b8e <HAL_ADC_Init+0x15e>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a62      	ldr	r2, [pc, #392]	; (8010d14 <HAL_ADC_Init+0x2e4>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d101      	bne.n	8010b92 <HAL_ADC_Init+0x162>
 8010b8e:	4a63      	ldr	r2, [pc, #396]	; (8010d1c <HAL_ADC_Init+0x2ec>)
 8010b90:	e000      	b.n	8010b94 <HAL_ADC_Init+0x164>
 8010b92:	4a63      	ldr	r2, [pc, #396]	; (8010d20 <HAL_ADC_Init+0x2f0>)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	f7ff fcb6 	bl	801050c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	7f5b      	ldrb	r3, [r3, #29]
 8010ba4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8010baa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8010bb0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8010bb6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010bbe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d106      	bne.n	8010bdc <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	045b      	lsls	r3, r3, #17
 8010bd6:	69ba      	ldr	r2, [r7, #24]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d009      	beq.n	8010bf8 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8010bf2:	69ba      	ldr	r2, [r7, #24]
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	68da      	ldr	r2, [r3, #12]
 8010bfe:	4b49      	ldr	r3, [pc, #292]	; (8010d24 <HAL_ADC_Init+0x2f4>)
 8010c00:	4013      	ands	r3, r2
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	6812      	ldr	r2, [r2, #0]
 8010c06:	69b9      	ldr	r1, [r7, #24]
 8010c08:	430b      	orrs	r3, r1
 8010c0a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	430a      	orrs	r2, r1
 8010c20:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7ff fec8 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 8010c2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7ff fee9 	bl	8010a0a <LL_ADC_INJ_IsConversionOngoing>
 8010c38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d17b      	bne.n	8010d38 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d178      	bne.n	8010d38 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8010c4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c52:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8010c54:	4313      	orrs	r3, r2
 8010c56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c62:	f023 0302 	bic.w	r3, r3, #2
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	6812      	ldr	r2, [r2, #0]
 8010c6a:	69b9      	ldr	r1, [r7, #24]
 8010c6c:	430b      	orrs	r3, r1
 8010c6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d017      	beq.n	8010ca8 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	691a      	ldr	r2, [r3, #16]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010c86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010c90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8010c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	6911      	ldr	r1, [r2, #16]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	6812      	ldr	r2, [r2, #0]
 8010ca0:	430b      	orrs	r3, r1
 8010ca2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8010ca6:	e013      	b.n	8010cd0 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	691a      	ldr	r2, [r3, #16]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010cb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	6812      	ldr	r2, [r2, #0]
 8010cc4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8010cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010ccc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d126      	bne.n	8010d28 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	691b      	ldr	r3, [r3, #16]
 8010ce0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010ce4:	f023 0304 	bic.w	r3, r3, #4
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010cf0:	4311      	orrs	r1, r2
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010cf6:	4311      	orrs	r1, r2
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010cfc:	430a      	orrs	r2, r1
 8010cfe:	431a      	orrs	r2, r3
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f042 0201 	orr.w	r2, r2, #1
 8010d08:	611a      	str	r2, [r3, #16]
 8010d0a:	e015      	b.n	8010d38 <HAL_ADC_Init+0x308>
 8010d0c:	20000000 	.word	0x20000000
 8010d10:	053e2d63 	.word	0x053e2d63
 8010d14:	50000100 	.word	0x50000100
 8010d18:	50000400 	.word	0x50000400
 8010d1c:	50000300 	.word	0x50000300
 8010d20:	50000700 	.word	0x50000700
 8010d24:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	691a      	ldr	r2, [r3, #16]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f022 0201 	bic.w	r2, r2, #1
 8010d36:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	695b      	ldr	r3, [r3, #20]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d10c      	bne.n	8010d5a <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d46:	f023 010f 	bic.w	r1, r3, #15
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6a1b      	ldr	r3, [r3, #32]
 8010d4e:	1e5a      	subs	r2, r3, #1
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	430a      	orrs	r2, r1
 8010d56:	631a      	str	r2, [r3, #48]	; 0x30
 8010d58:	e007      	b.n	8010d6a <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f022 020f 	bic.w	r2, r2, #15
 8010d68:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d6e:	f023 0303 	bic.w	r3, r3, #3
 8010d72:	f043 0201 	orr.w	r2, r3, #1
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	65da      	str	r2, [r3, #92]	; 0x5c
 8010d7a:	e007      	b.n	8010d8c <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d80:	f043 0210 	orr.w	r2, r3, #16
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8010d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3724      	adds	r7, #36	; 0x24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd90      	pop	{r4, r7, pc}
 8010d96:	bf00      	nop

08010d98 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b086      	sub	sp, #24
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010da8:	d004      	beq.n	8010db4 <HAL_ADC_Start+0x1c>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	4a5c      	ldr	r2, [pc, #368]	; (8010f20 <HAL_ADC_Start+0x188>)
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d101      	bne.n	8010db8 <HAL_ADC_Start+0x20>
 8010db4:	4b5b      	ldr	r3, [pc, #364]	; (8010f24 <HAL_ADC_Start+0x18c>)
 8010db6:	e000      	b.n	8010dba <HAL_ADC_Start+0x22>
 8010db8:	4b5b      	ldr	r3, [pc, #364]	; (8010f28 <HAL_ADC_Start+0x190>)
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7ff fd1e 	bl	80107fc <LL_ADC_GetMultimode>
 8010dc0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7ff fdf8 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f040 809f 	bne.w	8010f12 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d101      	bne.n	8010de2 <HAL_ADC_Start+0x4a>
 8010dde:	2302      	movs	r3, #2
 8010de0:	e09a      	b.n	8010f18 <HAL_ADC_Start+0x180>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2201      	movs	r2, #1
 8010de6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f001 fa3e 	bl	801226c <ADC_Enable>
 8010df0:	4603      	mov	r3, r0
 8010df2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f040 8086 	bne.w	8010f08 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010e04:	f023 0301 	bic.w	r3, r3, #1
 8010e08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4a42      	ldr	r2, [pc, #264]	; (8010f20 <HAL_ADC_Start+0x188>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d002      	beq.n	8010e20 <HAL_ADC_Start+0x88>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	e001      	b.n	8010e24 <HAL_ADC_Start+0x8c>
 8010e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8010e24:	687a      	ldr	r2, [r7, #4]
 8010e26:	6812      	ldr	r2, [r2, #0]
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d002      	beq.n	8010e32 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d105      	bne.n	8010e3e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e4a:	d106      	bne.n	8010e5a <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e50:	f023 0206 	bic.w	r2, r3, #6
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	661a      	str	r2, [r3, #96]	; 0x60
 8010e58:	e002      	b.n	8010e60 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	221c      	movs	r2, #28
 8010e66:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a2a      	ldr	r2, [pc, #168]	; (8010f20 <HAL_ADC_Start+0x188>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d002      	beq.n	8010e80 <HAL_ADC_Start+0xe8>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	e001      	b.n	8010e84 <HAL_ADC_Start+0xec>
 8010e80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	6812      	ldr	r2, [r2, #0]
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d008      	beq.n	8010e9e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d005      	beq.n	8010e9e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	2b05      	cmp	r3, #5
 8010e96:	d002      	beq.n	8010e9e <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	2b09      	cmp	r3, #9
 8010e9c:	d114      	bne.n	8010ec8 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d007      	beq.n	8010ebc <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010eb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ff fd53 	bl	801096c <LL_ADC_REG_StartConversion>
 8010ec6:	e026      	b.n	8010f16 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ecc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a11      	ldr	r2, [pc, #68]	; (8010f20 <HAL_ADC_Start+0x188>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d002      	beq.n	8010ee4 <HAL_ADC_Start+0x14c>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	e001      	b.n	8010ee8 <HAL_ADC_Start+0x150>
 8010ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8010ee8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00f      	beq.n	8010f16 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010efa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010efe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	65da      	str	r2, [r3, #92]	; 0x5c
 8010f06:	e006      	b.n	8010f16 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8010f10:	e001      	b.n	8010f16 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8010f12:	2302      	movs	r3, #2
 8010f14:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8010f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3718      	adds	r7, #24
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	50000100 	.word	0x50000100
 8010f24:	50000300 	.word	0x50000300
 8010f28:	50000700 	.word	0x50000700

08010f2c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d101      	bne.n	8010f42 <HAL_ADC_Stop+0x16>
 8010f3e:	2302      	movs	r3, #2
 8010f40:	e023      	b.n	8010f8a <HAL_ADC_Stop+0x5e>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2201      	movs	r2, #1
 8010f46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8010f4a:	2103      	movs	r1, #3
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f001 f8d1 	bl	80120f4 <ADC_ConversionStop>
 8010f52:	4603      	mov	r3, r0
 8010f54:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8010f56:	7bfb      	ldrb	r3, [r7, #15]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d111      	bne.n	8010f80 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f001 f9e7 	bl	8012330 <ADC_Disable>
 8010f62:	4603      	mov	r3, r0
 8010f64:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8010f66:	7bfb      	ldrb	r3, [r7, #15]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d109      	bne.n	8010f80 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010f74:	f023 0301 	bic.w	r3, r3, #1
 8010f78:	f043 0201 	orr.w	r2, r3, #1
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
	...

08010f94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b088      	sub	sp, #32
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010fa6:	d004      	beq.n	8010fb2 <HAL_ADC_PollForConversion+0x1e>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4a70      	ldr	r2, [pc, #448]	; (8011170 <HAL_ADC_PollForConversion+0x1dc>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d101      	bne.n	8010fb6 <HAL_ADC_PollForConversion+0x22>
 8010fb2:	4b70      	ldr	r3, [pc, #448]	; (8011174 <HAL_ADC_PollForConversion+0x1e0>)
 8010fb4:	e000      	b.n	8010fb8 <HAL_ADC_PollForConversion+0x24>
 8010fb6:	4b70      	ldr	r3, [pc, #448]	; (8011178 <HAL_ADC_PollForConversion+0x1e4>)
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff fc1f 	bl	80107fc <LL_ADC_GetMultimode>
 8010fbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	699b      	ldr	r3, [r3, #24]
 8010fc4:	2b08      	cmp	r3, #8
 8010fc6:	d102      	bne.n	8010fce <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8010fc8:	2308      	movs	r3, #8
 8010fca:	61fb      	str	r3, [r7, #28]
 8010fcc:	e037      	b.n	801103e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d005      	beq.n	8010fe0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2b05      	cmp	r3, #5
 8010fd8:	d002      	beq.n	8010fe0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2b09      	cmp	r3, #9
 8010fde:	d111      	bne.n	8011004 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	f003 0301 	and.w	r3, r3, #1
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d007      	beq.n	8010ffe <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ff2:	f043 0220 	orr.w	r2, r3, #32
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e0b3      	b.n	8011166 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8010ffe:	2304      	movs	r3, #4
 8011000:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8011002:	e01c      	b.n	801103e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801100c:	d004      	beq.n	8011018 <HAL_ADC_PollForConversion+0x84>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4a57      	ldr	r2, [pc, #348]	; (8011170 <HAL_ADC_PollForConversion+0x1dc>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d101      	bne.n	801101c <HAL_ADC_PollForConversion+0x88>
 8011018:	4b56      	ldr	r3, [pc, #344]	; (8011174 <HAL_ADC_PollForConversion+0x1e0>)
 801101a:	e000      	b.n	801101e <HAL_ADC_PollForConversion+0x8a>
 801101c:	4b56      	ldr	r3, [pc, #344]	; (8011178 <HAL_ADC_PollForConversion+0x1e4>)
 801101e:	4618      	mov	r0, r3
 8011020:	f7ff fbfa 	bl	8010818 <LL_ADC_GetMultiDMATransfer>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d007      	beq.n	801103a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801102e:	f043 0220 	orr.w	r2, r3, #32
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8011036:	2301      	movs	r3, #1
 8011038:	e095      	b.n	8011166 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801103a:	2304      	movs	r3, #4
 801103c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801103e:	f7ff fa37 	bl	80104b0 <HAL_GetTick>
 8011042:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011044:	e021      	b.n	801108a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801104c:	d01d      	beq.n	801108a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801104e:	f7ff fa2f 	bl	80104b0 <HAL_GetTick>
 8011052:	4602      	mov	r2, r0
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	1ad3      	subs	r3, r2, r3
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d302      	bcc.n	8011064 <HAL_ADC_PollForConversion+0xd0>
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d112      	bne.n	801108a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	4013      	ands	r3, r2
 801106e:	2b00      	cmp	r3, #0
 8011070:	d10b      	bne.n	801108a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011076:	f043 0204 	orr.w	r2, r3, #4
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2200      	movs	r2, #0
 8011082:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8011086:	2303      	movs	r3, #3
 8011088:	e06d      	b.n	8011166 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	4013      	ands	r3, r2
 8011094:	2b00      	cmp	r3, #0
 8011096:	d0d6      	beq.n	8011046 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801109c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff fb01 	bl	80106b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80110ae:	4603      	mov	r3, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d01c      	beq.n	80110ee <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	7f5b      	ldrb	r3, [r3, #29]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d118      	bne.n	80110ee <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f003 0308 	and.w	r3, r3, #8
 80110c6:	2b08      	cmp	r3, #8
 80110c8:	d111      	bne.n	80110ee <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d105      	bne.n	80110ee <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110e6:	f043 0201 	orr.w	r2, r3, #1
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4a1f      	ldr	r2, [pc, #124]	; (8011170 <HAL_ADC_PollForConversion+0x1dc>)
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d002      	beq.n	80110fe <HAL_ADC_PollForConversion+0x16a>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	e001      	b.n	8011102 <HAL_ADC_PollForConversion+0x16e>
 80110fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	6812      	ldr	r2, [r2, #0]
 8011106:	4293      	cmp	r3, r2
 8011108:	d008      	beq.n	801111c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d005      	beq.n	801111c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	2b05      	cmp	r3, #5
 8011114:	d002      	beq.n	801111c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	2b09      	cmp	r3, #9
 801111a:	d104      	bne.n	8011126 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	68db      	ldr	r3, [r3, #12]
 8011122:	61bb      	str	r3, [r7, #24]
 8011124:	e00d      	b.n	8011142 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a11      	ldr	r2, [pc, #68]	; (8011170 <HAL_ADC_PollForConversion+0x1dc>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d002      	beq.n	8011136 <HAL_ADC_PollForConversion+0x1a2>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	e001      	b.n	801113a <HAL_ADC_PollForConversion+0x1a6>
 8011136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801113a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	2b08      	cmp	r3, #8
 8011146:	d104      	bne.n	8011152 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2208      	movs	r2, #8
 801114e:	601a      	str	r2, [r3, #0]
 8011150:	e008      	b.n	8011164 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011158:	2b00      	cmp	r3, #0
 801115a:	d103      	bne.n	8011164 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	220c      	movs	r2, #12
 8011162:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	3720      	adds	r7, #32
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	50000100 	.word	0x50000100
 8011174:	50000300 	.word	0x50000300
 8011178:	50000700 	.word	0x50000700

0801117c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011190:	d004      	beq.n	801119c <HAL_ADC_Start_DMA+0x20>
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	4a57      	ldr	r2, [pc, #348]	; (80112f4 <HAL_ADC_Start_DMA+0x178>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d101      	bne.n	80111a0 <HAL_ADC_Start_DMA+0x24>
 801119c:	4b56      	ldr	r3, [pc, #344]	; (80112f8 <HAL_ADC_Start_DMA+0x17c>)
 801119e:	e000      	b.n	80111a2 <HAL_ADC_Start_DMA+0x26>
 80111a0:	4b56      	ldr	r3, [pc, #344]	; (80112fc <HAL_ADC_Start_DMA+0x180>)
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff fb2a 	bl	80107fc <LL_ADC_GetMultimode>
 80111a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7ff fc04 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f040 8094 	bne.w	80112e4 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d101      	bne.n	80111ca <HAL_ADC_Start_DMA+0x4e>
 80111c6:	2302      	movs	r3, #2
 80111c8:	e08f      	b.n	80112ea <HAL_ADC_Start_DMA+0x16e>
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2201      	movs	r2, #1
 80111ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	4a4a      	ldr	r2, [pc, #296]	; (8011300 <HAL_ADC_Start_DMA+0x184>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d008      	beq.n	80111ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d005      	beq.n	80111ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	2b05      	cmp	r3, #5
 80111e6:	d002      	beq.n	80111ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	2b09      	cmp	r3, #9
 80111ec:	d173      	bne.n	80112d6 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f001 f83c 	bl	801226c <ADC_Enable>
 80111f4:	4603      	mov	r3, r0
 80111f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80111f8:	7dfb      	ldrb	r3, [r7, #23]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d166      	bne.n	80112cc <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011202:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011206:	f023 0301 	bic.w	r3, r3, #1
 801120a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a37      	ldr	r2, [pc, #220]	; (80112f4 <HAL_ADC_Start_DMA+0x178>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d002      	beq.n	8011222 <HAL_ADC_Start_DMA+0xa6>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	e001      	b.n	8011226 <HAL_ADC_Start_DMA+0xaa>
 8011222:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8011226:	68fa      	ldr	r2, [r7, #12]
 8011228:	6812      	ldr	r2, [r2, #0]
 801122a:	4293      	cmp	r3, r2
 801122c:	d002      	beq.n	8011234 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d105      	bne.n	8011240 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011238:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011248:	2b00      	cmp	r3, #0
 801124a:	d006      	beq.n	801125a <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011250:	f023 0206 	bic.w	r2, r3, #6
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	661a      	str	r2, [r3, #96]	; 0x60
 8011258:	e002      	b.n	8011260 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2200      	movs	r2, #0
 801125e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011264:	4a27      	ldr	r2, [pc, #156]	; (8011304 <HAL_ADC_Start_DMA+0x188>)
 8011266:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801126c:	4a26      	ldr	r2, [pc, #152]	; (8011308 <HAL_ADC_Start_DMA+0x18c>)
 801126e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011274:	4a25      	ldr	r2, [pc, #148]	; (801130c <HAL_ADC_Start_DMA+0x190>)
 8011276:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	221c      	movs	r2, #28
 801127e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2200      	movs	r2, #0
 8011284:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	685a      	ldr	r2, [r3, #4]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f042 0210 	orr.w	r2, r2, #16
 8011296:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	68da      	ldr	r2, [r3, #12]
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f042 0201 	orr.w	r2, r2, #1
 80112a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	3340      	adds	r3, #64	; 0x40
 80112b2:	4619      	mov	r1, r3
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f001 fcb4 	bl	8012c24 <HAL_DMA_Start_IT>
 80112bc:	4603      	mov	r3, r0
 80112be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff fb51 	bl	801096c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80112ca:	e00d      	b.n	80112e8 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80112d4:	e008      	b.n	80112e8 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80112d6:	2301      	movs	r3, #1
 80112d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2200      	movs	r2, #0
 80112de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80112e2:	e001      	b.n	80112e8 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80112e4:	2302      	movs	r3, #2
 80112e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80112e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3718      	adds	r7, #24
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	50000100 	.word	0x50000100
 80112f8:	50000300 	.word	0x50000300
 80112fc:	50000700 	.word	0x50000700
 8011300:	50000400 	.word	0x50000400
 8011304:	080123ef 	.word	0x080123ef
 8011308:	080124c7 	.word	0x080124c7
 801130c:	080124e3 	.word	0x080124e3

08011310 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801131e:	2b01      	cmp	r3, #1
 8011320:	d101      	bne.n	8011326 <HAL_ADC_Stop_DMA+0x16>
 8011322:	2302      	movs	r3, #2
 8011324:	e051      	b.n	80113ca <HAL_ADC_Stop_DMA+0xba>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2201      	movs	r2, #1
 801132a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801132e:	2103      	movs	r1, #3
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f000 fedf 	bl	80120f4 <ADC_ConversionStop>
 8011336:	4603      	mov	r3, r0
 8011338:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801133a:	7bfb      	ldrb	r3, [r7, #15]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d13f      	bne.n	80113c0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68da      	ldr	r2, [r3, #12]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f022 0201 	bic.w	r2, r2, #1
 801134e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011358:	b2db      	uxtb	r3, r3
 801135a:	2b02      	cmp	r3, #2
 801135c:	d10f      	bne.n	801137e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011362:	4618      	mov	r0, r3
 8011364:	f001 fcd9 	bl	8012d1a <HAL_DMA_Abort>
 8011368:	4603      	mov	r3, r0
 801136a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 801136c:	7bfb      	ldrb	r3, [r7, #15]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d005      	beq.n	801137e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	685a      	ldr	r2, [r3, #4]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f022 0210 	bic.w	r2, r2, #16
 801138c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801138e:	7bfb      	ldrb	r3, [r7, #15]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d105      	bne.n	80113a0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f000 ffcb 	bl	8012330 <ADC_Disable>
 801139a:	4603      	mov	r3, r0
 801139c:	73fb      	strb	r3, [r7, #15]
 801139e:	e002      	b.n	80113a6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f000 ffc5 	bl	8012330 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80113a6:	7bfb      	ldrb	r3, [r7, #15]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d109      	bne.n	80113c0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80113b4:	f023 0301 	bic.w	r3, r3, #1
 80113b8:	f043 0201 	orr.w	r2, r3, #1
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80113c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}

080113d2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80113d2:	b480      	push	{r7}
 80113d4:	b083      	sub	sp, #12
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr

080113ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b08a      	sub	sp, #40	; 0x28
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80113f4:	2300      	movs	r3, #0
 80113f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011410:	d004      	beq.n	801141c <HAL_ADC_IRQHandler+0x30>
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	4a87      	ldr	r2, [pc, #540]	; (8011634 <HAL_ADC_IRQHandler+0x248>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d101      	bne.n	8011420 <HAL_ADC_IRQHandler+0x34>
 801141c:	4b86      	ldr	r3, [pc, #536]	; (8011638 <HAL_ADC_IRQHandler+0x24c>)
 801141e:	e000      	b.n	8011422 <HAL_ADC_IRQHandler+0x36>
 8011420:	4b86      	ldr	r3, [pc, #536]	; (801163c <HAL_ADC_IRQHandler+0x250>)
 8011422:	4618      	mov	r0, r3
 8011424:	f7ff f9ea 	bl	80107fc <LL_ADC_GetMultimode>
 8011428:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	f003 0302 	and.w	r3, r3, #2
 8011430:	2b00      	cmp	r3, #0
 8011432:	d017      	beq.n	8011464 <HAL_ADC_IRQHandler+0x78>
 8011434:	69bb      	ldr	r3, [r7, #24]
 8011436:	f003 0302 	and.w	r3, r3, #2
 801143a:	2b00      	cmp	r3, #0
 801143c:	d012      	beq.n	8011464 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011442:	f003 0310 	and.w	r3, r3, #16
 8011446:	2b00      	cmp	r3, #0
 8011448:	d105      	bne.n	8011456 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801144e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f001 f93a 	bl	80126d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2202      	movs	r2, #2
 8011462:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	f003 0304 	and.w	r3, r3, #4
 801146a:	2b00      	cmp	r3, #0
 801146c:	d004      	beq.n	8011478 <HAL_ADC_IRQHandler+0x8c>
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	f003 0304 	and.w	r3, r3, #4
 8011474:	2b00      	cmp	r3, #0
 8011476:	d10a      	bne.n	801148e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801147e:	2b00      	cmp	r3, #0
 8011480:	f000 8085 	beq.w	801158e <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	f003 0308 	and.w	r3, r3, #8
 801148a:	2b00      	cmp	r3, #0
 801148c:	d07f      	beq.n	801158e <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011492:	f003 0310 	and.w	r3, r3, #16
 8011496:	2b00      	cmp	r3, #0
 8011498:	d105      	bne.n	80114a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801149e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7ff f900 	bl	80106b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d064      	beq.n	8011580 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4a5e      	ldr	r2, [pc, #376]	; (8011634 <HAL_ADC_IRQHandler+0x248>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d002      	beq.n	80114c6 <HAL_ADC_IRQHandler+0xda>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	e001      	b.n	80114ca <HAL_ADC_IRQHandler+0xde>
 80114c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	6812      	ldr	r2, [r2, #0]
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d008      	beq.n	80114e4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d005      	beq.n	80114e4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	2b05      	cmp	r3, #5
 80114dc:	d002      	beq.n	80114e4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	2b09      	cmp	r3, #9
 80114e2:	d104      	bne.n	80114ee <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	68db      	ldr	r3, [r3, #12]
 80114ea:	623b      	str	r3, [r7, #32]
 80114ec:	e00d      	b.n	801150a <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4a50      	ldr	r2, [pc, #320]	; (8011634 <HAL_ADC_IRQHandler+0x248>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d002      	beq.n	80114fe <HAL_ADC_IRQHandler+0x112>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	e001      	b.n	8011502 <HAL_ADC_IRQHandler+0x116>
 80114fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8011502:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 801150a:	6a3b      	ldr	r3, [r7, #32]
 801150c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011510:	2b00      	cmp	r3, #0
 8011512:	d135      	bne.n	8011580 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f003 0308 	and.w	r3, r3, #8
 801151e:	2b08      	cmp	r3, #8
 8011520:	d12e      	bne.n	8011580 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fa48 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 801152c:	4603      	mov	r3, r0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d11a      	bne.n	8011568 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f022 020c 	bic.w	r2, r2, #12
 8011540:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011556:	2b00      	cmp	r3, #0
 8011558:	d112      	bne.n	8011580 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801155e:	f043 0201 	orr.w	r2, r3, #1
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	65da      	str	r2, [r3, #92]	; 0x5c
 8011566:	e00b      	b.n	8011580 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801156c:	f043 0210 	orr.w	r2, r3, #16
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011578:	f043 0201 	orr.w	r2, r3, #1
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7f6 fe5d 	bl	8008240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	220c      	movs	r2, #12
 801158c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	f003 0320 	and.w	r3, r3, #32
 8011594:	2b00      	cmp	r3, #0
 8011596:	d004      	beq.n	80115a2 <HAL_ADC_IRQHandler+0x1b6>
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	f003 0320 	and.w	r3, r3, #32
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d10b      	bne.n	80115ba <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80115a2:	69fb      	ldr	r3, [r7, #28]
 80115a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 80a1 	beq.w	80116f0 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80115ae:	69bb      	ldr	r3, [r7, #24]
 80115b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f000 809b 	beq.w	80116f0 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115be:	f003 0310 	and.w	r3, r3, #16
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d105      	bne.n	80115d2 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7ff f8a9 	bl	801072e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80115dc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff f864 	bl	80106b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80115e8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	4a11      	ldr	r2, [pc, #68]	; (8011634 <HAL_ADC_IRQHandler+0x248>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d002      	beq.n	80115fa <HAL_ADC_IRQHandler+0x20e>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	e001      	b.n	80115fe <HAL_ADC_IRQHandler+0x212>
 80115fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	6812      	ldr	r2, [r2, #0]
 8011602:	4293      	cmp	r3, r2
 8011604:	d008      	beq.n	8011618 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d005      	beq.n	8011618 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	2b06      	cmp	r3, #6
 8011610:	d002      	beq.n	8011618 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	2b07      	cmp	r3, #7
 8011616:	d104      	bne.n	8011622 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	623b      	str	r3, [r7, #32]
 8011620:	e014      	b.n	801164c <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	4a03      	ldr	r2, [pc, #12]	; (8011634 <HAL_ADC_IRQHandler+0x248>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d009      	beq.n	8011640 <HAL_ADC_IRQHandler+0x254>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	e008      	b.n	8011644 <HAL_ADC_IRQHandler+0x258>
 8011632:	bf00      	nop
 8011634:	50000100 	.word	0x50000100
 8011638:	50000300 	.word	0x50000300
 801163c:	50000700 	.word	0x50000700
 8011640:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8011644:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	68db      	ldr	r3, [r3, #12]
 801164a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d047      	beq.n	80116e2 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011658:	2b00      	cmp	r3, #0
 801165a:	d007      	beq.n	801166c <HAL_ADC_IRQHandler+0x280>
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d03f      	beq.n	80116e2 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8011662:	6a3b      	ldr	r3, [r7, #32]
 8011664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8011668:	2b00      	cmp	r3, #0
 801166a:	d13a      	bne.n	80116e2 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011676:	2b40      	cmp	r3, #64	; 0x40
 8011678:	d133      	bne.n	80116e2 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011680:	2b00      	cmp	r3, #0
 8011682:	d12e      	bne.n	80116e2 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff f9be 	bl	8010a0a <LL_ADC_INJ_IsConversionOngoing>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d11a      	bne.n	80116ca <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	685a      	ldr	r2, [r3, #4]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80116a2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d112      	bne.n	80116e2 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116c0:	f043 0201 	orr.w	r2, r3, #1
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80116c8:	e00b      	b.n	80116e2 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116ce:	f043 0210 	orr.w	r2, r3, #16
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80116da:	f043 0201 	orr.w	r2, r3, #1
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f000 ffcc 	bl	8012680 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2260      	movs	r2, #96	; 0x60
 80116ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d011      	beq.n	801171e <HAL_ADC_IRQHandler+0x332>
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00c      	beq.n	801171e <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011708:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 f8af 	bl	8011874 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2280      	movs	r2, #128	; 0x80
 801171c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 801171e:	69fb      	ldr	r3, [r7, #28]
 8011720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011724:	2b00      	cmp	r3, #0
 8011726:	d012      	beq.n	801174e <HAL_ADC_IRQHandler+0x362>
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00d      	beq.n	801174e <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 ffb2 	bl	80126a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f44f 7280 	mov.w	r2, #256	; 0x100
 801174c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801174e:	69fb      	ldr	r3, [r7, #28]
 8011750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011754:	2b00      	cmp	r3, #0
 8011756:	d012      	beq.n	801177e <HAL_ADC_IRQHandler+0x392>
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00d      	beq.n	801177e <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011766:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 ffa4 	bl	80126bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f44f 7200 	mov.w	r2, #512	; 0x200
 801177c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	f003 0310 	and.w	r3, r3, #16
 8011784:	2b00      	cmp	r3, #0
 8011786:	d043      	beq.n	8011810 <HAL_ADC_IRQHandler+0x424>
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	f003 0310 	and.w	r3, r3, #16
 801178e:	2b00      	cmp	r3, #0
 8011790:	d03e      	beq.n	8011810 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 801179a:	2301      	movs	r3, #1
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
 801179e:	e021      	b.n	80117e4 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d015      	beq.n	80117d2 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117ae:	d004      	beq.n	80117ba <HAL_ADC_IRQHandler+0x3ce>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	4a27      	ldr	r2, [pc, #156]	; (8011854 <HAL_ADC_IRQHandler+0x468>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d101      	bne.n	80117be <HAL_ADC_IRQHandler+0x3d2>
 80117ba:	4b27      	ldr	r3, [pc, #156]	; (8011858 <HAL_ADC_IRQHandler+0x46c>)
 80117bc:	e000      	b.n	80117c0 <HAL_ADC_IRQHandler+0x3d4>
 80117be:	4b27      	ldr	r3, [pc, #156]	; (801185c <HAL_ADC_IRQHandler+0x470>)
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff f829 	bl	8010818 <LL_ADC_GetMultiDMATransfer>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00b      	beq.n	80117e4 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80117cc:	2301      	movs	r3, #1
 80117ce:	627b      	str	r3, [r7, #36]	; 0x24
 80117d0:	e008      	b.n	80117e4 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	f003 0301 	and.w	r3, r3, #1
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d001      	beq.n	80117e4 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80117e0:	2301      	movs	r3, #1
 80117e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80117e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d10e      	bne.n	8011808 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117fa:	f043 0202 	orr.w	r2, r3, #2
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 f840 	bl	8011888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2210      	movs	r2, #16
 801180e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011816:	2b00      	cmp	r3, #0
 8011818:	d018      	beq.n	801184c <HAL_ADC_IRQHandler+0x460>
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011820:	2b00      	cmp	r3, #0
 8011822:	d013      	beq.n	801184c <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011828:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011834:	f043 0208 	orr.w	r2, r3, #8
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011844:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 ff24 	bl	8012694 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801184c:	bf00      	nop
 801184e:	3728      	adds	r7, #40	; 0x28
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	50000100 	.word	0x50000100
 8011858:	50000300 	.word	0x50000300
 801185c:	50000700 	.word	0x50000700

08011860 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8011860:	b480      	push	{r7}
 8011862:	b083      	sub	sp, #12
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8011868:	bf00      	nop
 801186a:	370c      	adds	r7, #12
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801187c:	bf00      	nop
 801187e:	370c      	adds	r7, #12
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8011890:	bf00      	nop
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr

0801189c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b0b6      	sub	sp, #216	; 0xd8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80118ac:	2300      	movs	r3, #0
 80118ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80118b6:	2b01      	cmp	r3, #1
 80118b8:	d102      	bne.n	80118c0 <HAL_ADC_ConfigChannel+0x24>
 80118ba:	2302      	movs	r3, #2
 80118bc:	f000 bc04 	b.w	80120c8 <HAL_ADC_ConfigChannel+0x82c>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2201      	movs	r2, #1
 80118c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff f875 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f040 83e8 	bne.w	80120aa <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6818      	ldr	r0, [r3, #0]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	6859      	ldr	r1, [r3, #4]
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	461a      	mov	r2, r3
 80118e8:	f7fe fef5 	bl	80106d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff f863 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 80118f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4618      	mov	r0, r3
 8011900:	f7ff f883 	bl	8010a0a <LL_ADC_INJ_IsConversionOngoing>
 8011904:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8011908:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801190c:	2b00      	cmp	r3, #0
 801190e:	f040 81d9 	bne.w	8011cc4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8011912:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011916:	2b00      	cmp	r3, #0
 8011918:	f040 81d4 	bne.w	8011cc4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011924:	d10f      	bne.n	8011946 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6818      	ldr	r0, [r3, #0]
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2200      	movs	r2, #0
 8011930:	4619      	mov	r1, r3
 8011932:	f7fe ff0f 	bl	8010754 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801193e:	4618      	mov	r0, r3
 8011940:	f7fe fea3 	bl	801068a <LL_ADC_SetSamplingTimeCommonConfig>
 8011944:	e00e      	b.n	8011964 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	6819      	ldr	r1, [r3, #0]
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	461a      	mov	r2, r3
 8011954:	f7fe fefe 	bl	8010754 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2100      	movs	r1, #0
 801195e:	4618      	mov	r0, r3
 8011960:	f7fe fe93 	bl	801068a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	695a      	ldr	r2, [r3, #20]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	08db      	lsrs	r3, r3, #3
 8011970:	f003 0303 	and.w	r3, r3, #3
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	fa02 f303 	lsl.w	r3, r2, r3
 801197a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	691b      	ldr	r3, [r3, #16]
 8011982:	2b04      	cmp	r3, #4
 8011984:	d022      	beq.n	80119cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6818      	ldr	r0, [r3, #0]
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	6919      	ldr	r1, [r3, #16]
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011996:	f7fe fded 	bl	8010574 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6818      	ldr	r0, [r3, #0]
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	6919      	ldr	r1, [r3, #16]
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	699b      	ldr	r3, [r3, #24]
 80119a6:	461a      	mov	r2, r3
 80119a8:	f7fe fe39 	bl	801061e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6818      	ldr	r0, [r3, #0]
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	6919      	ldr	r1, [r3, #16]
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	7f1b      	ldrb	r3, [r3, #28]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d102      	bne.n	80119c2 <HAL_ADC_ConfigChannel+0x126>
 80119bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80119c0:	e000      	b.n	80119c4 <HAL_ADC_ConfigChannel+0x128>
 80119c2:	2300      	movs	r3, #0
 80119c4:	461a      	mov	r2, r3
 80119c6:	f7fe fe45 	bl	8010654 <LL_ADC_SetOffsetSaturation>
 80119ca:	e17b      	b.n	8011cc4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	2100      	movs	r1, #0
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe fdf2 	bl	80105bc <LL_ADC_GetOffsetChannel>
 80119d8:	4603      	mov	r3, r0
 80119da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d10a      	bne.n	80119f8 <HAL_ADC_ConfigChannel+0x15c>
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	2100      	movs	r1, #0
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7fe fde7 	bl	80105bc <LL_ADC_GetOffsetChannel>
 80119ee:	4603      	mov	r3, r0
 80119f0:	0e9b      	lsrs	r3, r3, #26
 80119f2:	f003 021f 	and.w	r2, r3, #31
 80119f6:	e01e      	b.n	8011a36 <HAL_ADC_ConfigChannel+0x19a>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2100      	movs	r1, #0
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fe fddc 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011a04:	4603      	mov	r3, r0
 8011a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a0e:	fa93 f3a3 	rbit	r3, r3
 8011a12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8011a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8011a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d101      	bne.n	8011a2a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8011a26:	2320      	movs	r3, #32
 8011a28:	e004      	b.n	8011a34 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8011a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011a2e:	fab3 f383 	clz	r3, r3
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d105      	bne.n	8011a4e <HAL_ADC_ConfigChannel+0x1b2>
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	0e9b      	lsrs	r3, r3, #26
 8011a48:	f003 031f 	and.w	r3, r3, #31
 8011a4c:	e018      	b.n	8011a80 <HAL_ADC_ConfigChannel+0x1e4>
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011a5a:	fa93 f3a3 	rbit	r3, r3
 8011a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8011a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8011a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d101      	bne.n	8011a76 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8011a72:	2320      	movs	r3, #32
 8011a74:	e004      	b.n	8011a80 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8011a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a7a:	fab3 f383 	clz	r3, r3
 8011a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d106      	bne.n	8011a92 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7fe fdab 	bl	80105e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2101      	movs	r1, #1
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fe fd8f 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d10a      	bne.n	8011abe <HAL_ADC_ConfigChannel+0x222>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2101      	movs	r1, #1
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fe fd84 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	0e9b      	lsrs	r3, r3, #26
 8011ab8:	f003 021f 	and.w	r2, r3, #31
 8011abc:	e01e      	b.n	8011afc <HAL_ADC_ConfigChannel+0x260>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fe fd79 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011aca:	4603      	mov	r3, r0
 8011acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011ad4:	fa93 f3a3 	rbit	r3, r3
 8011ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8011adc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8011ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d101      	bne.n	8011af0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8011aec:	2320      	movs	r3, #32
 8011aee:	e004      	b.n	8011afa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8011af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011af4:	fab3 f383 	clz	r3, r3
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d105      	bne.n	8011b14 <HAL_ADC_ConfigChannel+0x278>
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	0e9b      	lsrs	r3, r3, #26
 8011b0e:	f003 031f 	and.w	r3, r3, #31
 8011b12:	e018      	b.n	8011b46 <HAL_ADC_ConfigChannel+0x2aa>
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b20:	fa93 f3a3 	rbit	r3, r3
 8011b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8011b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8011b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d101      	bne.n	8011b3c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8011b38:	2320      	movs	r3, #32
 8011b3a:	e004      	b.n	8011b46 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8011b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011b40:	fab3 f383 	clz	r3, r3
 8011b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d106      	bne.n	8011b58 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	2101      	movs	r1, #1
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fe fd48 	bl	80105e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2102      	movs	r1, #2
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fe fd2c 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011b64:	4603      	mov	r3, r0
 8011b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d10a      	bne.n	8011b84 <HAL_ADC_ConfigChannel+0x2e8>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	2102      	movs	r1, #2
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fe fd21 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	0e9b      	lsrs	r3, r3, #26
 8011b7e:	f003 021f 	and.w	r2, r3, #31
 8011b82:	e01e      	b.n	8011bc2 <HAL_ADC_ConfigChannel+0x326>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2102      	movs	r1, #2
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7fe fd16 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011b90:	4603      	mov	r3, r0
 8011b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b9a:	fa93 f3a3 	rbit	r3, r3
 8011b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8011ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8011baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d101      	bne.n	8011bb6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8011bb2:	2320      	movs	r3, #32
 8011bb4:	e004      	b.n	8011bc0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8011bb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011bba:	fab3 f383 	clz	r3, r3
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d105      	bne.n	8011bda <HAL_ADC_ConfigChannel+0x33e>
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	0e9b      	lsrs	r3, r3, #26
 8011bd4:	f003 031f 	and.w	r3, r3, #31
 8011bd8:	e016      	b.n	8011c08 <HAL_ADC_ConfigChannel+0x36c>
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011be6:	fa93 f3a3 	rbit	r3, r3
 8011bea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8011bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8011bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d101      	bne.n	8011bfe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8011bfa:	2320      	movs	r3, #32
 8011bfc:	e004      	b.n	8011c08 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8011bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c02:	fab3 f383 	clz	r3, r3
 8011c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d106      	bne.n	8011c1a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2200      	movs	r2, #0
 8011c12:	2102      	movs	r1, #2
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fe fce7 	bl	80105e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2103      	movs	r1, #3
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7fe fccb 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011c26:	4603      	mov	r3, r0
 8011c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d10a      	bne.n	8011c46 <HAL_ADC_ConfigChannel+0x3aa>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2103      	movs	r1, #3
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fcc0 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	0e9b      	lsrs	r3, r3, #26
 8011c40:	f003 021f 	and.w	r2, r3, #31
 8011c44:	e017      	b.n	8011c76 <HAL_ADC_ConfigChannel+0x3da>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2103      	movs	r1, #3
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fe fcb5 	bl	80105bc <LL_ADC_GetOffsetChannel>
 8011c52:	4603      	mov	r3, r0
 8011c54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c58:	fa93 f3a3 	rbit	r3, r3
 8011c5c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8011c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c60:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8011c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d101      	bne.n	8011c6c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8011c68:	2320      	movs	r3, #32
 8011c6a:	e003      	b.n	8011c74 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8011c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c6e:	fab3 f383 	clz	r3, r3
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d105      	bne.n	8011c8e <HAL_ADC_ConfigChannel+0x3f2>
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	0e9b      	lsrs	r3, r3, #26
 8011c88:	f003 031f 	and.w	r3, r3, #31
 8011c8c:	e011      	b.n	8011cb2 <HAL_ADC_ConfigChannel+0x416>
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c96:	fa93 f3a3 	rbit	r3, r3
 8011c9a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8011c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8011ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d101      	bne.n	8011caa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8011ca6:	2320      	movs	r3, #32
 8011ca8:	e003      	b.n	8011cb2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8011caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cac:	fab3 f383 	clz	r3, r3
 8011cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d106      	bne.n	8011cc4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	2103      	movs	r1, #3
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe fc92 	bl	80105e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fe fe29 	bl	8010920 <LL_ADC_IsEnabled>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f040 813d 	bne.w	8011f50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6818      	ldr	r0, [r3, #0]
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	6819      	ldr	r1, [r3, #0]
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	f7fe fd62 	bl	80107ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	4aa2      	ldr	r2, [pc, #648]	; (8011f78 <HAL_ADC_ConfigChannel+0x6dc>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	f040 812e 	bne.w	8011f50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d10b      	bne.n	8011d1c <HAL_ADC_ConfigChannel+0x480>
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	0e9b      	lsrs	r3, r3, #26
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	f003 031f 	and.w	r3, r3, #31
 8011d10:	2b09      	cmp	r3, #9
 8011d12:	bf94      	ite	ls
 8011d14:	2301      	movls	r3, #1
 8011d16:	2300      	movhi	r3, #0
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	e019      	b.n	8011d50 <HAL_ADC_ConfigChannel+0x4b4>
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d24:	fa93 f3a3 	rbit	r3, r3
 8011d28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8011d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8011d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d101      	bne.n	8011d38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8011d34:	2320      	movs	r3, #32
 8011d36:	e003      	b.n	8011d40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8011d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d3a:	fab3 f383 	clz	r3, r3
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	3301      	adds	r3, #1
 8011d42:	f003 031f 	and.w	r3, r3, #31
 8011d46:	2b09      	cmp	r3, #9
 8011d48:	bf94      	ite	ls
 8011d4a:	2301      	movls	r3, #1
 8011d4c:	2300      	movhi	r3, #0
 8011d4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d079      	beq.n	8011e48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d107      	bne.n	8011d70 <HAL_ADC_ConfigChannel+0x4d4>
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	0e9b      	lsrs	r3, r3, #26
 8011d66:	3301      	adds	r3, #1
 8011d68:	069b      	lsls	r3, r3, #26
 8011d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011d6e:	e015      	b.n	8011d9c <HAL_ADC_ConfigChannel+0x500>
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d78:	fa93 f3a3 	rbit	r3, r3
 8011d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8011d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8011d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d101      	bne.n	8011d8c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8011d88:	2320      	movs	r3, #32
 8011d8a:	e003      	b.n	8011d94 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8011d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d8e:	fab3 f383 	clz	r3, r3
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	3301      	adds	r3, #1
 8011d96:	069b      	lsls	r3, r3, #26
 8011d98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d109      	bne.n	8011dbc <HAL_ADC_ConfigChannel+0x520>
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	0e9b      	lsrs	r3, r3, #26
 8011dae:	3301      	adds	r3, #1
 8011db0:	f003 031f 	and.w	r3, r3, #31
 8011db4:	2101      	movs	r1, #1
 8011db6:	fa01 f303 	lsl.w	r3, r1, r3
 8011dba:	e017      	b.n	8011dec <HAL_ADC_ConfigChannel+0x550>
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dc4:	fa93 f3a3 	rbit	r3, r3
 8011dc8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8011dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8011dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d101      	bne.n	8011dd8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8011dd4:	2320      	movs	r3, #32
 8011dd6:	e003      	b.n	8011de0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8011dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dda:	fab3 f383 	clz	r3, r3
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	3301      	adds	r3, #1
 8011de2:	f003 031f 	and.w	r3, r3, #31
 8011de6:	2101      	movs	r1, #1
 8011de8:	fa01 f303 	lsl.w	r3, r1, r3
 8011dec:	ea42 0103 	orr.w	r1, r2, r3
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d10a      	bne.n	8011e12 <HAL_ADC_ConfigChannel+0x576>
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	0e9b      	lsrs	r3, r3, #26
 8011e02:	3301      	adds	r3, #1
 8011e04:	f003 021f 	and.w	r2, r3, #31
 8011e08:	4613      	mov	r3, r2
 8011e0a:	005b      	lsls	r3, r3, #1
 8011e0c:	4413      	add	r3, r2
 8011e0e:	051b      	lsls	r3, r3, #20
 8011e10:	e018      	b.n	8011e44 <HAL_ADC_ConfigChannel+0x5a8>
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1a:	fa93 f3a3 	rbit	r3, r3
 8011e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8011e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8011e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d101      	bne.n	8011e2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8011e2a:	2320      	movs	r3, #32
 8011e2c:	e003      	b.n	8011e36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8011e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e30:	fab3 f383 	clz	r3, r3
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	3301      	adds	r3, #1
 8011e38:	f003 021f 	and.w	r2, r3, #31
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	005b      	lsls	r3, r3, #1
 8011e40:	4413      	add	r3, r2
 8011e42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011e44:	430b      	orrs	r3, r1
 8011e46:	e07e      	b.n	8011f46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d107      	bne.n	8011e64 <HAL_ADC_ConfigChannel+0x5c8>
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	0e9b      	lsrs	r3, r3, #26
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	069b      	lsls	r3, r3, #26
 8011e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011e62:	e015      	b.n	8011e90 <HAL_ADC_ConfigChannel+0x5f4>
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6c:	fa93 f3a3 	rbit	r3, r3
 8011e70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8011e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8011e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d101      	bne.n	8011e80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8011e7c:	2320      	movs	r3, #32
 8011e7e:	e003      	b.n	8011e88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8011e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e82:	fab3 f383 	clz	r3, r3
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	3301      	adds	r3, #1
 8011e8a:	069b      	lsls	r3, r3, #26
 8011e8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d109      	bne.n	8011eb0 <HAL_ADC_ConfigChannel+0x614>
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	0e9b      	lsrs	r3, r3, #26
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	f003 031f 	and.w	r3, r3, #31
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8011eae:	e017      	b.n	8011ee0 <HAL_ADC_ConfigChannel+0x644>
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011eb6:	6a3b      	ldr	r3, [r7, #32]
 8011eb8:	fa93 f3a3 	rbit	r3, r3
 8011ebc:	61fb      	str	r3, [r7, #28]
  return result;
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d101      	bne.n	8011ecc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8011ec8:	2320      	movs	r3, #32
 8011eca:	e003      	b.n	8011ed4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8011ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ece:	fab3 f383 	clz	r3, r3
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	f003 031f 	and.w	r3, r3, #31
 8011eda:	2101      	movs	r1, #1
 8011edc:	fa01 f303 	lsl.w	r3, r1, r3
 8011ee0:	ea42 0103 	orr.w	r1, r2, r3
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10d      	bne.n	8011f0c <HAL_ADC_ConfigChannel+0x670>
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	0e9b      	lsrs	r3, r3, #26
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	f003 021f 	and.w	r2, r3, #31
 8011efc:	4613      	mov	r3, r2
 8011efe:	005b      	lsls	r3, r3, #1
 8011f00:	4413      	add	r3, r2
 8011f02:	3b1e      	subs	r3, #30
 8011f04:	051b      	lsls	r3, r3, #20
 8011f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011f0a:	e01b      	b.n	8011f44 <HAL_ADC_ConfigChannel+0x6a8>
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	fa93 f3a3 	rbit	r3, r3
 8011f18:	613b      	str	r3, [r7, #16]
  return result;
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d101      	bne.n	8011f28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8011f24:	2320      	movs	r3, #32
 8011f26:	e003      	b.n	8011f30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8011f28:	69bb      	ldr	r3, [r7, #24]
 8011f2a:	fab3 f383 	clz	r3, r3
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	3301      	adds	r3, #1
 8011f32:	f003 021f 	and.w	r2, r3, #31
 8011f36:	4613      	mov	r3, r2
 8011f38:	005b      	lsls	r3, r3, #1
 8011f3a:	4413      	add	r3, r2
 8011f3c:	3b1e      	subs	r3, #30
 8011f3e:	051b      	lsls	r3, r3, #20
 8011f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011f44:	430b      	orrs	r3, r1
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	6892      	ldr	r2, [r2, #8]
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	f7fe fc02 	bl	8010754 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	4b09      	ldr	r3, [pc, #36]	; (8011f7c <HAL_ADC_ConfigChannel+0x6e0>)
 8011f56:	4013      	ands	r3, r2
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 80af 	beq.w	80120bc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011f66:	d004      	beq.n	8011f72 <HAL_ADC_ConfigChannel+0x6d6>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a04      	ldr	r2, [pc, #16]	; (8011f80 <HAL_ADC_ConfigChannel+0x6e4>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d10a      	bne.n	8011f88 <HAL_ADC_ConfigChannel+0x6ec>
 8011f72:	4b04      	ldr	r3, [pc, #16]	; (8011f84 <HAL_ADC_ConfigChannel+0x6e8>)
 8011f74:	e009      	b.n	8011f8a <HAL_ADC_ConfigChannel+0x6ee>
 8011f76:	bf00      	nop
 8011f78:	407f0000 	.word	0x407f0000
 8011f7c:	80080000 	.word	0x80080000
 8011f80:	50000100 	.word	0x50000100
 8011f84:	50000300 	.word	0x50000300
 8011f88:	4b51      	ldr	r3, [pc, #324]	; (80120d0 <HAL_ADC_ConfigChannel+0x834>)
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fe fae4 	bl	8010558 <LL_ADC_GetCommonPathInternalCh>
 8011f90:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4a4e      	ldr	r2, [pc, #312]	; (80120d4 <HAL_ADC_ConfigChannel+0x838>)
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d004      	beq.n	8011fa8 <HAL_ADC_ConfigChannel+0x70c>
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	4a4d      	ldr	r2, [pc, #308]	; (80120d8 <HAL_ADC_ConfigChannel+0x83c>)
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d134      	bne.n	8012012 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8011fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d12e      	bne.n	8012012 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011fbc:	d17e      	bne.n	80120bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011fc6:	d004      	beq.n	8011fd2 <HAL_ADC_ConfigChannel+0x736>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a43      	ldr	r2, [pc, #268]	; (80120dc <HAL_ADC_ConfigChannel+0x840>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d101      	bne.n	8011fd6 <HAL_ADC_ConfigChannel+0x73a>
 8011fd2:	4a43      	ldr	r2, [pc, #268]	; (80120e0 <HAL_ADC_ConfigChannel+0x844>)
 8011fd4:	e000      	b.n	8011fd8 <HAL_ADC_ConfigChannel+0x73c>
 8011fd6:	4a3e      	ldr	r2, [pc, #248]	; (80120d0 <HAL_ADC_ConfigChannel+0x834>)
 8011fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011fdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	4610      	mov	r0, r2
 8011fe4:	f7fe faa5 	bl	8010532 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8011fe8:	4b3e      	ldr	r3, [pc, #248]	; (80120e4 <HAL_ADC_ConfigChannel+0x848>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	099b      	lsrs	r3, r3, #6
 8011fee:	4a3e      	ldr	r2, [pc, #248]	; (80120e8 <HAL_ADC_ConfigChannel+0x84c>)
 8011ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ff4:	099b      	lsrs	r3, r3, #6
 8011ff6:	1c5a      	adds	r2, r3, #1
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012002:	e002      	b.n	801200a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	3b01      	subs	r3, #1
 8012008:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d1f9      	bne.n	8012004 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012010:	e054      	b.n	80120bc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4a35      	ldr	r2, [pc, #212]	; (80120ec <HAL_ADC_ConfigChannel+0x850>)
 8012018:	4293      	cmp	r3, r2
 801201a:	d120      	bne.n	801205e <HAL_ADC_ConfigChannel+0x7c2>
 801201c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012024:	2b00      	cmp	r3, #0
 8012026:	d11a      	bne.n	801205e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012030:	d144      	bne.n	80120bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801203a:	d004      	beq.n	8012046 <HAL_ADC_ConfigChannel+0x7aa>
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	4a26      	ldr	r2, [pc, #152]	; (80120dc <HAL_ADC_ConfigChannel+0x840>)
 8012042:	4293      	cmp	r3, r2
 8012044:	d101      	bne.n	801204a <HAL_ADC_ConfigChannel+0x7ae>
 8012046:	4a26      	ldr	r2, [pc, #152]	; (80120e0 <HAL_ADC_ConfigChannel+0x844>)
 8012048:	e000      	b.n	801204c <HAL_ADC_ConfigChannel+0x7b0>
 801204a:	4a21      	ldr	r2, [pc, #132]	; (80120d0 <HAL_ADC_ConfigChannel+0x834>)
 801204c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012054:	4619      	mov	r1, r3
 8012056:	4610      	mov	r0, r2
 8012058:	f7fe fa6b 	bl	8010532 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801205c:	e02e      	b.n	80120bc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4a23      	ldr	r2, [pc, #140]	; (80120f0 <HAL_ADC_ConfigChannel+0x854>)
 8012064:	4293      	cmp	r3, r2
 8012066:	d129      	bne.n	80120bc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801206c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012070:	2b00      	cmp	r3, #0
 8012072:	d123      	bne.n	80120bc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	4a18      	ldr	r2, [pc, #96]	; (80120dc <HAL_ADC_ConfigChannel+0x840>)
 801207a:	4293      	cmp	r3, r2
 801207c:	d01e      	beq.n	80120bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012086:	d004      	beq.n	8012092 <HAL_ADC_ConfigChannel+0x7f6>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	4a13      	ldr	r2, [pc, #76]	; (80120dc <HAL_ADC_ConfigChannel+0x840>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d101      	bne.n	8012096 <HAL_ADC_ConfigChannel+0x7fa>
 8012092:	4a13      	ldr	r2, [pc, #76]	; (80120e0 <HAL_ADC_ConfigChannel+0x844>)
 8012094:	e000      	b.n	8012098 <HAL_ADC_ConfigChannel+0x7fc>
 8012096:	4a0e      	ldr	r2, [pc, #56]	; (80120d0 <HAL_ADC_ConfigChannel+0x834>)
 8012098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801209c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80120a0:	4619      	mov	r1, r3
 80120a2:	4610      	mov	r0, r2
 80120a4:	f7fe fa45 	bl	8010532 <LL_ADC_SetCommonPathInternalCh>
 80120a8:	e008      	b.n	80120bc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120ae:	f043 0220 	orr.w	r2, r3, #32
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80120b6:	2301      	movs	r3, #1
 80120b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80120c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	37d8      	adds	r7, #216	; 0xd8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	50000700 	.word	0x50000700
 80120d4:	c3210000 	.word	0xc3210000
 80120d8:	90c00010 	.word	0x90c00010
 80120dc:	50000100 	.word	0x50000100
 80120e0:	50000300 	.word	0x50000300
 80120e4:	20000000 	.word	0x20000000
 80120e8:	053e2d63 	.word	0x053e2d63
 80120ec:	c7520000 	.word	0xc7520000
 80120f0:	cb840000 	.word	0xcb840000

080120f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b088      	sub	sp, #32
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80120fe:	2300      	movs	r3, #0
 8012100:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4618      	mov	r0, r3
 801210c:	f7fe fc56 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 8012110:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4618      	mov	r0, r3
 8012118:	f7fe fc77 	bl	8010a0a <LL_ADC_INJ_IsConversionOngoing>
 801211c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d103      	bne.n	801212c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2b00      	cmp	r3, #0
 8012128:	f000 8098 	beq.w	801225c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012136:	2b00      	cmp	r3, #0
 8012138:	d02a      	beq.n	8012190 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	7f5b      	ldrb	r3, [r3, #29]
 801213e:	2b01      	cmp	r3, #1
 8012140:	d126      	bne.n	8012190 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	7f1b      	ldrb	r3, [r3, #28]
 8012146:	2b01      	cmp	r3, #1
 8012148:	d122      	bne.n	8012190 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801214a:	2301      	movs	r3, #1
 801214c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801214e:	e014      	b.n	801217a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	4a45      	ldr	r2, [pc, #276]	; (8012268 <ADC_ConversionStop+0x174>)
 8012154:	4293      	cmp	r3, r2
 8012156:	d90d      	bls.n	8012174 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801215c:	f043 0210 	orr.w	r2, r3, #16
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012168:	f043 0201 	orr.w	r2, r3, #1
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8012170:	2301      	movs	r3, #1
 8012172:	e074      	b.n	801225e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	3301      	adds	r3, #1
 8012178:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012184:	2b40      	cmp	r3, #64	; 0x40
 8012186:	d1e3      	bne.n	8012150 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2240      	movs	r2, #64	; 0x40
 801218e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8012190:	69bb      	ldr	r3, [r7, #24]
 8012192:	2b02      	cmp	r3, #2
 8012194:	d014      	beq.n	80121c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4618      	mov	r0, r3
 801219c:	f7fe fc0e 	bl	80109bc <LL_ADC_REG_IsConversionOngoing>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d00c      	beq.n	80121c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fe fbcb 	bl	8010946 <LL_ADC_IsDisableOngoing>
 80121b0:	4603      	mov	r3, r0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d104      	bne.n	80121c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fe fbea 	bl	8010994 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	2b01      	cmp	r3, #1
 80121c4:	d014      	beq.n	80121f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fe fc1d 	bl	8010a0a <LL_ADC_INJ_IsConversionOngoing>
 80121d0:	4603      	mov	r3, r0
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d00c      	beq.n	80121f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7fe fbb3 	bl	8010946 <LL_ADC_IsDisableOngoing>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d104      	bne.n	80121f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fe fbf9 	bl	80109e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	2b02      	cmp	r3, #2
 80121f4:	d005      	beq.n	8012202 <ADC_ConversionStop+0x10e>
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	2b03      	cmp	r3, #3
 80121fa:	d105      	bne.n	8012208 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80121fc:	230c      	movs	r3, #12
 80121fe:	617b      	str	r3, [r7, #20]
        break;
 8012200:	e005      	b.n	801220e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8012202:	2308      	movs	r3, #8
 8012204:	617b      	str	r3, [r7, #20]
        break;
 8012206:	e002      	b.n	801220e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8012208:	2304      	movs	r3, #4
 801220a:	617b      	str	r3, [r7, #20]
        break;
 801220c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801220e:	f7fe f94f 	bl	80104b0 <HAL_GetTick>
 8012212:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8012214:	e01b      	b.n	801224e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8012216:	f7fe f94b 	bl	80104b0 <HAL_GetTick>
 801221a:	4602      	mov	r2, r0
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	2b05      	cmp	r3, #5
 8012222:	d914      	bls.n	801224e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	689a      	ldr	r2, [r3, #8]
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	4013      	ands	r3, r2
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00d      	beq.n	801224e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012236:	f043 0210 	orr.w	r2, r3, #16
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012242:	f043 0201 	orr.w	r2, r3, #1
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801224a:	2301      	movs	r3, #1
 801224c:	e007      	b.n	801225e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	689a      	ldr	r2, [r3, #8]
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	4013      	ands	r3, r2
 8012258:	2b00      	cmp	r3, #0
 801225a:	d1dc      	bne.n	8012216 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801225c:	2300      	movs	r3, #0
}
 801225e:	4618      	mov	r0, r3
 8012260:	3720      	adds	r7, #32
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	a33fffff 	.word	0xa33fffff

0801226c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4618      	mov	r0, r3
 801227a:	f7fe fb51 	bl	8010920 <LL_ADC_IsEnabled>
 801227e:	4603      	mov	r3, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	d14d      	bne.n	8012320 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	689a      	ldr	r2, [r3, #8]
 801228a:	4b28      	ldr	r3, [pc, #160]	; (801232c <ADC_Enable+0xc0>)
 801228c:	4013      	ands	r3, r2
 801228e:	2b00      	cmp	r3, #0
 8012290:	d00d      	beq.n	80122ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012296:	f043 0210 	orr.w	r2, r3, #16
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80122a2:	f043 0201 	orr.w	r2, r3, #1
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80122aa:	2301      	movs	r3, #1
 80122ac:	e039      	b.n	8012322 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7fe fb0c 	bl	80108d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80122b8:	f7fe f8fa 	bl	80104b0 <HAL_GetTick>
 80122bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80122be:	e028      	b.n	8012312 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7fe fb2b 	bl	8010920 <LL_ADC_IsEnabled>
 80122ca:	4603      	mov	r3, r0
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d104      	bne.n	80122da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7fe fafb 	bl	80108d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80122da:	f7fe f8e9 	bl	80104b0 <HAL_GetTick>
 80122de:	4602      	mov	r2, r0
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	1ad3      	subs	r3, r2, r3
 80122e4:	2b02      	cmp	r3, #2
 80122e6:	d914      	bls.n	8012312 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f003 0301 	and.w	r3, r3, #1
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d00d      	beq.n	8012312 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122fa:	f043 0210 	orr.w	r2, r3, #16
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012306:	f043 0201 	orr.w	r2, r3, #1
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801230e:	2301      	movs	r3, #1
 8012310:	e007      	b.n	8012322 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f003 0301 	and.w	r3, r3, #1
 801231c:	2b01      	cmp	r3, #1
 801231e:	d1cf      	bne.n	80122c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	8000003f 	.word	0x8000003f

08012330 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4618      	mov	r0, r3
 801233e:	f7fe fb02 	bl	8010946 <LL_ADC_IsDisableOngoing>
 8012342:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	4618      	mov	r0, r3
 801234a:	f7fe fae9 	bl	8010920 <LL_ADC_IsEnabled>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d047      	beq.n	80123e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d144      	bne.n	80123e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	689b      	ldr	r3, [r3, #8]
 8012360:	f003 030d 	and.w	r3, r3, #13
 8012364:	2b01      	cmp	r3, #1
 8012366:	d10c      	bne.n	8012382 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4618      	mov	r0, r3
 801236e:	f7fe fac3 	bl	80108f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	2203      	movs	r2, #3
 8012378:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801237a:	f7fe f899 	bl	80104b0 <HAL_GetTick>
 801237e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012380:	e029      	b.n	80123d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012386:	f043 0210 	orr.w	r2, r3, #16
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012392:	f043 0201 	orr.w	r2, r3, #1
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801239a:	2301      	movs	r3, #1
 801239c:	e023      	b.n	80123e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801239e:	f7fe f887 	bl	80104b0 <HAL_GetTick>
 80123a2:	4602      	mov	r2, r0
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	2b02      	cmp	r3, #2
 80123aa:	d914      	bls.n	80123d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	689b      	ldr	r3, [r3, #8]
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00d      	beq.n	80123d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123be:	f043 0210 	orr.w	r2, r3, #16
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80123ca:	f043 0201 	orr.w	r2, r3, #1
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80123d2:	2301      	movs	r3, #1
 80123d4:	e007      	b.n	80123e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	689b      	ldr	r3, [r3, #8]
 80123dc:	f003 0301 	and.w	r3, r3, #1
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d1dc      	bne.n	801239e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80123e4:	2300      	movs	r3, #0
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3710      	adds	r7, #16
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b084      	sub	sp, #16
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012400:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012404:	2b00      	cmp	r3, #0
 8012406:	d14b      	bne.n	80124a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801240c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	f003 0308 	and.w	r3, r3, #8
 801241e:	2b00      	cmp	r3, #0
 8012420:	d021      	beq.n	8012466 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	4618      	mov	r0, r3
 8012428:	f7fe f942 	bl	80106b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d032      	beq.n	8012498 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	68db      	ldr	r3, [r3, #12]
 8012438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801243c:	2b00      	cmp	r3, #0
 801243e:	d12b      	bne.n	8012498 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012454:	2b00      	cmp	r3, #0
 8012456:	d11f      	bne.n	8012498 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801245c:	f043 0201 	orr.w	r2, r3, #1
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	65da      	str	r2, [r3, #92]	; 0x5c
 8012464:	e018      	b.n	8012498 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	f003 0302 	and.w	r3, r3, #2
 8012470:	2b00      	cmp	r3, #0
 8012472:	d111      	bne.n	8012498 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012478:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012488:	2b00      	cmp	r3, #0
 801248a:	d105      	bne.n	8012498 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012490:	f043 0201 	orr.w	r2, r3, #1
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7f5 fed1 	bl	8008240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801249e:	e00e      	b.n	80124be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124a4:	f003 0310 	and.w	r3, r3, #16
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d003      	beq.n	80124b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7ff f9eb 	bl	8011888 <HAL_ADC_ErrorCallback>
}
 80124b2:	e004      	b.n	80124be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	4798      	blx	r3
}
 80124be:	bf00      	nop
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b084      	sub	sp, #16
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f7ff f9c3 	bl	8011860 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80124da:	bf00      	nop
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b084      	sub	sp, #16
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012500:	f043 0204 	orr.w	r2, r3, #4
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	f7ff f9bd 	bl	8011888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801250e:	bf00      	nop
 8012510:	3710      	adds	r7, #16
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}

08012516 <LL_ADC_IsEnabled>:
{
 8012516:	b480      	push	{r7}
 8012518:	b083      	sub	sp, #12
 801251a:	af00      	add	r7, sp, #0
 801251c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	689b      	ldr	r3, [r3, #8]
 8012522:	f003 0301 	and.w	r3, r3, #1
 8012526:	2b01      	cmp	r3, #1
 8012528:	d101      	bne.n	801252e <LL_ADC_IsEnabled+0x18>
 801252a:	2301      	movs	r3, #1
 801252c:	e000      	b.n	8012530 <LL_ADC_IsEnabled+0x1a>
 801252e:	2300      	movs	r3, #0
}
 8012530:	4618      	mov	r0, r3
 8012532:	370c      	adds	r7, #12
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr

0801253c <LL_ADC_StartCalibration>:
{
 801253c:	b480      	push	{r7}
 801253e:	b083      	sub	sp, #12
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801254e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012552:	683a      	ldr	r2, [r7, #0]
 8012554:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8012558:	4313      	orrs	r3, r2
 801255a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	609a      	str	r2, [r3, #8]
}
 8012562:	bf00      	nop
 8012564:	370c      	adds	r7, #12
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr

0801256e <LL_ADC_IsCalibrationOnGoing>:
{
 801256e:	b480      	push	{r7}
 8012570:	b083      	sub	sp, #12
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	689b      	ldr	r3, [r3, #8]
 801257a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801257e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012582:	d101      	bne.n	8012588 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8012584:	2301      	movs	r3, #1
 8012586:	e000      	b.n	801258a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8012588:	2300      	movs	r3, #0
}
 801258a:	4618      	mov	r0, r3
 801258c:	370c      	adds	r7, #12
 801258e:	46bd      	mov	sp, r7
 8012590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012594:	4770      	bx	lr

08012596 <LL_ADC_REG_IsConversionOngoing>:
{
 8012596:	b480      	push	{r7}
 8012598:	b083      	sub	sp, #12
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	689b      	ldr	r3, [r3, #8]
 80125a2:	f003 0304 	and.w	r3, r3, #4
 80125a6:	2b04      	cmp	r3, #4
 80125a8:	d101      	bne.n	80125ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80125aa:	2301      	movs	r3, #1
 80125ac:	e000      	b.n	80125b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80125ae:	2300      	movs	r3, #0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80125c6:	2300      	movs	r3, #0
 80125c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d101      	bne.n	80125d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80125d4:	2302      	movs	r3, #2
 80125d6:	e04d      	b.n	8012674 <HAL_ADCEx_Calibration_Start+0xb8>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2201      	movs	r2, #1
 80125dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f7ff fea5 	bl	8012330 <ADC_Disable>
 80125e6:	4603      	mov	r3, r0
 80125e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80125ea:	7bfb      	ldrb	r3, [r7, #15]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d136      	bne.n	801265e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80125f8:	f023 0302 	bic.w	r3, r3, #2
 80125fc:	f043 0202 	orr.w	r2, r3, #2
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	6839      	ldr	r1, [r7, #0]
 801260a:	4618      	mov	r0, r3
 801260c:	f7ff ff96 	bl	801253c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8012610:	e014      	b.n	801263c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	3301      	adds	r3, #1
 8012616:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	4a18      	ldr	r2, [pc, #96]	; (801267c <HAL_ADCEx_Calibration_Start+0xc0>)
 801261c:	4293      	cmp	r3, r2
 801261e:	d90d      	bls.n	801263c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012624:	f023 0312 	bic.w	r3, r3, #18
 8012628:	f043 0210 	orr.w	r2, r3, #16
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2200      	movs	r2, #0
 8012634:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8012638:	2301      	movs	r3, #1
 801263a:	e01b      	b.n	8012674 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	4618      	mov	r0, r3
 8012642:	f7ff ff94 	bl	801256e <LL_ADC_IsCalibrationOnGoing>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1e2      	bne.n	8012612 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012650:	f023 0303 	bic.w	r3, r3, #3
 8012654:	f043 0201 	orr.w	r2, r3, #1
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	65da      	str	r2, [r3, #92]	; 0x5c
 801265c:	e005      	b.n	801266a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012662:	f043 0210 	orr.w	r2, r3, #16
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8012672:	7bfb      	ldrb	r3, [r7, #15]
}
 8012674:	4618      	mov	r0, r3
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	0004de01 	.word	0x0004de01

08012680 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8012688:	bf00      	nop
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801269c:	bf00      	nop
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr

080126a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80126b0:	bf00      	nop
 80126b2:	370c      	adds	r7, #12
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr

080126bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80126bc:	b480      	push	{r7}
 80126be:	b083      	sub	sp, #12
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80126c4:	bf00      	nop
 80126c6:	370c      	adds	r7, #12
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr

080126d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b083      	sub	sp, #12
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80126d8:	bf00      	nop
 80126da:	370c      	adds	r7, #12
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80126e4:	b590      	push	{r4, r7, lr}
 80126e6:	b0a1      	sub	sp, #132	; 0x84
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80126ee:	2300      	movs	r3, #0
 80126f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d101      	bne.n	8012702 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80126fe:	2302      	movs	r3, #2
 8012700:	e0cb      	b.n	801289a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2201      	movs	r2, #1
 8012706:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801270a:	2300      	movs	r3, #0
 801270c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801270e:	2300      	movs	r3, #0
 8012710:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801271a:	d102      	bne.n	8012722 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801271c:	4b61      	ldr	r3, [pc, #388]	; (80128a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801271e:	60bb      	str	r3, [r7, #8]
 8012720:	e001      	b.n	8012726 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8012722:	2300      	movs	r3, #0
 8012724:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d10b      	bne.n	8012744 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012730:	f043 0220 	orr.w	r2, r3, #32
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8012740:	2301      	movs	r3, #1
 8012742:	e0aa      	b.n	801289a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	4618      	mov	r0, r3
 8012748:	f7ff ff25 	bl	8012596 <LL_ADC_REG_IsConversionOngoing>
 801274c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	4618      	mov	r0, r3
 8012754:	f7ff ff1f 	bl	8012596 <LL_ADC_REG_IsConversionOngoing>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	f040 808c 	bne.w	8012878 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8012760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012762:	2b00      	cmp	r3, #0
 8012764:	f040 8088 	bne.w	8012878 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012770:	d004      	beq.n	801277c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	4a4b      	ldr	r2, [pc, #300]	; (80128a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8012778:	4293      	cmp	r3, r2
 801277a:	d101      	bne.n	8012780 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801277c:	4b4a      	ldr	r3, [pc, #296]	; (80128a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801277e:	e000      	b.n	8012782 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8012780:	4b4a      	ldr	r3, [pc, #296]	; (80128ac <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8012782:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d041      	beq.n	8012810 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801278c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	6859      	ldr	r1, [r3, #4]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801279e:	035b      	lsls	r3, r3, #13
 80127a0:	430b      	orrs	r3, r1
 80127a2:	431a      	orrs	r2, r3
 80127a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80127b0:	d004      	beq.n	80127bc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	4a3b      	ldr	r2, [pc, #236]	; (80128a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d10f      	bne.n	80127dc <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80127bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80127c0:	f7ff fea9 	bl	8012516 <LL_ADC_IsEnabled>
 80127c4:	4604      	mov	r4, r0
 80127c6:	4837      	ldr	r0, [pc, #220]	; (80128a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80127c8:	f7ff fea5 	bl	8012516 <LL_ADC_IsEnabled>
 80127cc:	4603      	mov	r3, r0
 80127ce:	4323      	orrs	r3, r4
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	bf0c      	ite	eq
 80127d4:	2301      	moveq	r3, #1
 80127d6:	2300      	movne	r3, #0
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	e008      	b.n	80127ee <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80127dc:	4834      	ldr	r0, [pc, #208]	; (80128b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80127de:	f7ff fe9a 	bl	8012516 <LL_ADC_IsEnabled>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	bf0c      	ite	eq
 80127e8:	2301      	moveq	r3, #1
 80127ea:	2300      	movne	r3, #0
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d04c      	beq.n	801288c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80127f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127f4:	689b      	ldr	r3, [r3, #8]
 80127f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80127fa:	f023 030f 	bic.w	r3, r3, #15
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	6811      	ldr	r1, [r2, #0]
 8012802:	683a      	ldr	r2, [r7, #0]
 8012804:	6892      	ldr	r2, [r2, #8]
 8012806:	430a      	orrs	r2, r1
 8012808:	431a      	orrs	r2, r3
 801280a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801280c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801280e:	e03d      	b.n	801288c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8012810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012812:	689b      	ldr	r3, [r3, #8]
 8012814:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801281a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012824:	d004      	beq.n	8012830 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4a1e      	ldr	r2, [pc, #120]	; (80128a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801282c:	4293      	cmp	r3, r2
 801282e:	d10f      	bne.n	8012850 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8012830:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8012834:	f7ff fe6f 	bl	8012516 <LL_ADC_IsEnabled>
 8012838:	4604      	mov	r4, r0
 801283a:	481a      	ldr	r0, [pc, #104]	; (80128a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801283c:	f7ff fe6b 	bl	8012516 <LL_ADC_IsEnabled>
 8012840:	4603      	mov	r3, r0
 8012842:	4323      	orrs	r3, r4
 8012844:	2b00      	cmp	r3, #0
 8012846:	bf0c      	ite	eq
 8012848:	2301      	moveq	r3, #1
 801284a:	2300      	movne	r3, #0
 801284c:	b2db      	uxtb	r3, r3
 801284e:	e008      	b.n	8012862 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8012850:	4817      	ldr	r0, [pc, #92]	; (80128b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8012852:	f7ff fe60 	bl	8012516 <LL_ADC_IsEnabled>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	bf0c      	ite	eq
 801285c:	2301      	moveq	r3, #1
 801285e:	2300      	movne	r3, #0
 8012860:	b2db      	uxtb	r3, r3
 8012862:	2b00      	cmp	r3, #0
 8012864:	d012      	beq.n	801288c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8012866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012868:	689b      	ldr	r3, [r3, #8]
 801286a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801286e:	f023 030f 	bic.w	r3, r3, #15
 8012872:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012874:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012876:	e009      	b.n	801288c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801287c:	f043 0220 	orr.w	r2, r3, #32
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8012884:	2301      	movs	r3, #1
 8012886:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801288a:	e000      	b.n	801288e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801288c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2200      	movs	r2, #0
 8012892:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8012896:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801289a:	4618      	mov	r0, r3
 801289c:	3784      	adds	r7, #132	; 0x84
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd90      	pop	{r4, r7, pc}
 80128a2:	bf00      	nop
 80128a4:	50000100 	.word	0x50000100
 80128a8:	50000300 	.word	0x50000300
 80128ac:	50000700 	.word	0x50000700
 80128b0:	50000400 	.word	0x50000400

080128b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b085      	sub	sp, #20
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f003 0307 	and.w	r3, r3, #7
 80128c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80128c4:	4b0c      	ldr	r3, [pc, #48]	; (80128f8 <__NVIC_SetPriorityGrouping+0x44>)
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80128d0:	4013      	ands	r3, r2
 80128d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80128dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80128e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80128e6:	4a04      	ldr	r2, [pc, #16]	; (80128f8 <__NVIC_SetPriorityGrouping+0x44>)
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	60d3      	str	r3, [r2, #12]
}
 80128ec:	bf00      	nop
 80128ee:	3714      	adds	r7, #20
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr
 80128f8:	e000ed00 	.word	0xe000ed00

080128fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80128fc:	b480      	push	{r7}
 80128fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012900:	4b04      	ldr	r3, [pc, #16]	; (8012914 <__NVIC_GetPriorityGrouping+0x18>)
 8012902:	68db      	ldr	r3, [r3, #12]
 8012904:	0a1b      	lsrs	r3, r3, #8
 8012906:	f003 0307 	and.w	r3, r3, #7
}
 801290a:	4618      	mov	r0, r3
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	e000ed00 	.word	0xe000ed00

08012918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012926:	2b00      	cmp	r3, #0
 8012928:	db0b      	blt.n	8012942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801292a:	79fb      	ldrb	r3, [r7, #7]
 801292c:	f003 021f 	and.w	r2, r3, #31
 8012930:	4907      	ldr	r1, [pc, #28]	; (8012950 <__NVIC_EnableIRQ+0x38>)
 8012932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012936:	095b      	lsrs	r3, r3, #5
 8012938:	2001      	movs	r0, #1
 801293a:	fa00 f202 	lsl.w	r2, r0, r2
 801293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8012942:	bf00      	nop
 8012944:	370c      	adds	r7, #12
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	e000e100 	.word	0xe000e100

08012954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	6039      	str	r1, [r7, #0]
 801295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012964:	2b00      	cmp	r3, #0
 8012966:	db0a      	blt.n	801297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	b2da      	uxtb	r2, r3
 801296c:	490c      	ldr	r1, [pc, #48]	; (80129a0 <__NVIC_SetPriority+0x4c>)
 801296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012972:	0112      	lsls	r2, r2, #4
 8012974:	b2d2      	uxtb	r2, r2
 8012976:	440b      	add	r3, r1
 8012978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801297c:	e00a      	b.n	8012994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	b2da      	uxtb	r2, r3
 8012982:	4908      	ldr	r1, [pc, #32]	; (80129a4 <__NVIC_SetPriority+0x50>)
 8012984:	79fb      	ldrb	r3, [r7, #7]
 8012986:	f003 030f 	and.w	r3, r3, #15
 801298a:	3b04      	subs	r3, #4
 801298c:	0112      	lsls	r2, r2, #4
 801298e:	b2d2      	uxtb	r2, r2
 8012990:	440b      	add	r3, r1
 8012992:	761a      	strb	r2, [r3, #24]
}
 8012994:	bf00      	nop
 8012996:	370c      	adds	r7, #12
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr
 80129a0:	e000e100 	.word	0xe000e100
 80129a4:	e000ed00 	.word	0xe000ed00

080129a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80129a8:	b480      	push	{r7}
 80129aa:	b089      	sub	sp, #36	; 0x24
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f003 0307 	and.w	r3, r3, #7
 80129ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	f1c3 0307 	rsb	r3, r3, #7
 80129c2:	2b04      	cmp	r3, #4
 80129c4:	bf28      	it	cs
 80129c6:	2304      	movcs	r3, #4
 80129c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80129ca:	69fb      	ldr	r3, [r7, #28]
 80129cc:	3304      	adds	r3, #4
 80129ce:	2b06      	cmp	r3, #6
 80129d0:	d902      	bls.n	80129d8 <NVIC_EncodePriority+0x30>
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	3b03      	subs	r3, #3
 80129d6:	e000      	b.n	80129da <NVIC_EncodePriority+0x32>
 80129d8:	2300      	movs	r3, #0
 80129da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80129dc:	f04f 32ff 	mov.w	r2, #4294967295
 80129e0:	69bb      	ldr	r3, [r7, #24]
 80129e2:	fa02 f303 	lsl.w	r3, r2, r3
 80129e6:	43da      	mvns	r2, r3
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	401a      	ands	r2, r3
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80129f0:	f04f 31ff 	mov.w	r1, #4294967295
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	fa01 f303 	lsl.w	r3, r1, r3
 80129fa:	43d9      	mvns	r1, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012a00:	4313      	orrs	r3, r2
         );
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3724      	adds	r7, #36	; 0x24
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr
	...

08012a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012a20:	d301      	bcc.n	8012a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012a22:	2301      	movs	r3, #1
 8012a24:	e00f      	b.n	8012a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012a26:	4a0a      	ldr	r2, [pc, #40]	; (8012a50 <SysTick_Config+0x40>)
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012a2e:	210f      	movs	r1, #15
 8012a30:	f04f 30ff 	mov.w	r0, #4294967295
 8012a34:	f7ff ff8e 	bl	8012954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012a38:	4b05      	ldr	r3, [pc, #20]	; (8012a50 <SysTick_Config+0x40>)
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012a3e:	4b04      	ldr	r3, [pc, #16]	; (8012a50 <SysTick_Config+0x40>)
 8012a40:	2207      	movs	r2, #7
 8012a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012a44:	2300      	movs	r3, #0
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	3708      	adds	r7, #8
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	e000e010 	.word	0xe000e010

08012a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f7ff ff29 	bl	80128b4 <__NVIC_SetPriorityGrouping>
}
 8012a62:	bf00      	nop
 8012a64:	3708      	adds	r7, #8
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b086      	sub	sp, #24
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	4603      	mov	r3, r0
 8012a72:	60b9      	str	r1, [r7, #8]
 8012a74:	607a      	str	r2, [r7, #4]
 8012a76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012a78:	f7ff ff40 	bl	80128fc <__NVIC_GetPriorityGrouping>
 8012a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012a7e:	687a      	ldr	r2, [r7, #4]
 8012a80:	68b9      	ldr	r1, [r7, #8]
 8012a82:	6978      	ldr	r0, [r7, #20]
 8012a84:	f7ff ff90 	bl	80129a8 <NVIC_EncodePriority>
 8012a88:	4602      	mov	r2, r0
 8012a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a8e:	4611      	mov	r1, r2
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7ff ff5f 	bl	8012954 <__NVIC_SetPriority>
}
 8012a96:	bf00      	nop
 8012a98:	3718      	adds	r7, #24
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b082      	sub	sp, #8
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7ff ff33 	bl	8012918 <__NVIC_EnableIRQ>
}
 8012ab2:	bf00      	nop
 8012ab4:	3708      	adds	r7, #8
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012aba:	b580      	push	{r7, lr}
 8012abc:	b082      	sub	sp, #8
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f7ff ffa4 	bl	8012a10 <SysTick_Config>
 8012ac8:	4603      	mov	r3, r0
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3708      	adds	r7, #8
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
	...

08012ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b084      	sub	sp, #16
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d101      	bne.n	8012ae6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e08d      	b.n	8012c02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	461a      	mov	r2, r3
 8012aec:	4b47      	ldr	r3, [pc, #284]	; (8012c0c <HAL_DMA_Init+0x138>)
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d80f      	bhi.n	8012b12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	461a      	mov	r2, r3
 8012af8:	4b45      	ldr	r3, [pc, #276]	; (8012c10 <HAL_DMA_Init+0x13c>)
 8012afa:	4413      	add	r3, r2
 8012afc:	4a45      	ldr	r2, [pc, #276]	; (8012c14 <HAL_DMA_Init+0x140>)
 8012afe:	fba2 2303 	umull	r2, r3, r2, r3
 8012b02:	091b      	lsrs	r3, r3, #4
 8012b04:	009a      	lsls	r2, r3, #2
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	4a42      	ldr	r2, [pc, #264]	; (8012c18 <HAL_DMA_Init+0x144>)
 8012b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8012b10:	e00e      	b.n	8012b30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	461a      	mov	r2, r3
 8012b18:	4b40      	ldr	r3, [pc, #256]	; (8012c1c <HAL_DMA_Init+0x148>)
 8012b1a:	4413      	add	r3, r2
 8012b1c:	4a3d      	ldr	r2, [pc, #244]	; (8012c14 <HAL_DMA_Init+0x140>)
 8012b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8012b22:	091b      	lsrs	r3, r3, #4
 8012b24:	009a      	lsls	r2, r3, #2
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4a3c      	ldr	r2, [pc, #240]	; (8012c20 <HAL_DMA_Init+0x14c>)
 8012b2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2202      	movs	r2, #2
 8012b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8012b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8012b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	691b      	ldr	r3, [r3, #16]
 8012b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	699b      	ldr	r3, [r3, #24]
 8012b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6a1b      	ldr	r3, [r3, #32]
 8012b72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	4313      	orrs	r3, r2
 8012b78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	68fa      	ldr	r2, [r7, #12]
 8012b80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f000 fa10 	bl	8012fa8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	689b      	ldr	r3, [r3, #8]
 8012b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012b90:	d102      	bne.n	8012b98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	685a      	ldr	r2, [r3, #4]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ba0:	b2d2      	uxtb	r2, r2
 8012ba2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012bac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d010      	beq.n	8012bd8 <HAL_DMA_Init+0x104>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	2b04      	cmp	r3, #4
 8012bbc:	d80c      	bhi.n	8012bd8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 fa30 	bl	8013024 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bc8:	2200      	movs	r2, #0
 8012bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012bd4:	605a      	str	r2, [r3, #4]
 8012bd6:	e008      	b.n	8012bea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2200      	movs	r2, #0
 8012be2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2200      	movs	r2, #0
 8012be8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2200      	movs	r2, #0
 8012bee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8012c00:	2300      	movs	r3, #0
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3710      	adds	r7, #16
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	40020407 	.word	0x40020407
 8012c10:	bffdfff8 	.word	0xbffdfff8
 8012c14:	cccccccd 	.word	0xcccccccd
 8012c18:	40020000 	.word	0x40020000
 8012c1c:	bffdfbf8 	.word	0xbffdfbf8
 8012c20:	40020400 	.word	0x40020400

08012c24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b086      	sub	sp, #24
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	60b9      	str	r1, [r7, #8]
 8012c2e:	607a      	str	r2, [r7, #4]
 8012c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012c32:	2300      	movs	r3, #0
 8012c34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d101      	bne.n	8012c44 <HAL_DMA_Start_IT+0x20>
 8012c40:	2302      	movs	r3, #2
 8012c42:	e066      	b.n	8012d12 <HAL_DMA_Start_IT+0xee>
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2201      	movs	r2, #1
 8012c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	2b01      	cmp	r3, #1
 8012c56:	d155      	bne.n	8012d04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2202      	movs	r2, #2
 8012c5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2200      	movs	r2, #0
 8012c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f022 0201 	bic.w	r2, r2, #1
 8012c74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	68b9      	ldr	r1, [r7, #8]
 8012c7c:	68f8      	ldr	r0, [r7, #12]
 8012c7e:	f000 f954 	bl	8012f2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d008      	beq.n	8012c9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f042 020e 	orr.w	r2, r2, #14
 8012c98:	601a      	str	r2, [r3, #0]
 8012c9a:	e00f      	b.n	8012cbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	f022 0204 	bic.w	r2, r2, #4
 8012caa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	f042 020a 	orr.w	r2, r2, #10
 8012cba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d007      	beq.n	8012cda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012cd8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d007      	beq.n	8012cf2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012cf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	681a      	ldr	r2, [r3, #0]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f042 0201 	orr.w	r2, r2, #1
 8012d00:	601a      	str	r2, [r3, #0]
 8012d02:	e005      	b.n	8012d10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2200      	movs	r2, #0
 8012d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8012d0c:	2302      	movs	r3, #2
 8012d0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8012d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}

08012d1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012d1a:	b480      	push	{r7}
 8012d1c:	b085      	sub	sp, #20
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012d22:	2300      	movs	r3, #0
 8012d24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	2b02      	cmp	r3, #2
 8012d30:	d005      	beq.n	8012d3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2204      	movs	r2, #4
 8012d36:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	73fb      	strb	r3, [r7, #15]
 8012d3c:	e037      	b.n	8012dae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f022 020e 	bic.w	r2, r2, #14
 8012d4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012d5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f022 0201 	bic.w	r2, r2, #1
 8012d6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d72:	f003 021f 	and.w	r2, r3, #31
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8012d80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012d8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d00c      	beq.n	8012dae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d98:	681a      	ldr	r2, [r3, #0]
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012da2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012dac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2201      	movs	r2, #1
 8012db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2200      	movs	r2, #0
 8012dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8012dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3714      	adds	r7, #20
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012de8:	f003 031f 	and.w	r3, r3, #31
 8012dec:	2204      	movs	r2, #4
 8012dee:	409a      	lsls	r2, r3
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	4013      	ands	r3, r2
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d026      	beq.n	8012e46 <HAL_DMA_IRQHandler+0x7a>
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	f003 0304 	and.w	r3, r3, #4
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d021      	beq.n	8012e46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	f003 0320 	and.w	r3, r3, #32
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d107      	bne.n	8012e20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f022 0204 	bic.w	r2, r2, #4
 8012e1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e24:	f003 021f 	and.w	r2, r3, #31
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e2c:	2104      	movs	r1, #4
 8012e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8012e32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d071      	beq.n	8012f20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8012e44:	e06c      	b.n	8012f20 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e4a:	f003 031f 	and.w	r3, r3, #31
 8012e4e:	2202      	movs	r2, #2
 8012e50:	409a      	lsls	r2, r3
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	4013      	ands	r3, r2
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d02e      	beq.n	8012eb8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	f003 0302 	and.w	r3, r3, #2
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d029      	beq.n	8012eb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f003 0320 	and.w	r3, r3, #32
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d10b      	bne.n	8012e8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f022 020a 	bic.w	r2, r2, #10
 8012e80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2201      	movs	r2, #1
 8012e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e8e:	f003 021f 	and.w	r2, r3, #31
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e96:	2102      	movs	r1, #2
 8012e98:	fa01 f202 	lsl.w	r2, r1, r2
 8012e9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d038      	beq.n	8012f20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8012eb6:	e033      	b.n	8012f20 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ebc:	f003 031f 	and.w	r3, r3, #31
 8012ec0:	2208      	movs	r2, #8
 8012ec2:	409a      	lsls	r2, r3
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	4013      	ands	r3, r2
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d02a      	beq.n	8012f22 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	f003 0308 	and.w	r3, r3, #8
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d025      	beq.n	8012f22 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	f022 020e 	bic.w	r2, r2, #14
 8012ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eea:	f003 021f 	and.w	r2, r3, #31
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef2:	2101      	movs	r1, #1
 8012ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8012ef8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2201      	movs	r2, #1
 8012efe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2201      	movs	r2, #1
 8012f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d004      	beq.n	8012f22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012f20:	bf00      	nop
 8012f22:	bf00      	nop
}
 8012f24:	3710      	adds	r7, #16
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}

08012f2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012f2a:	b480      	push	{r7}
 8012f2c:	b085      	sub	sp, #20
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	60f8      	str	r0, [r7, #12]
 8012f32:	60b9      	str	r1, [r7, #8]
 8012f34:	607a      	str	r2, [r7, #4]
 8012f36:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012f40:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d004      	beq.n	8012f54 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012f52:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f58:	f003 021f 	and.w	r2, r3, #31
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f60:	2101      	movs	r1, #1
 8012f62:	fa01 f202 	lsl.w	r2, r1, r2
 8012f66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	683a      	ldr	r2, [r7, #0]
 8012f6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	689b      	ldr	r3, [r3, #8]
 8012f74:	2b10      	cmp	r3, #16
 8012f76:	d108      	bne.n	8012f8a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	68ba      	ldr	r2, [r7, #8]
 8012f86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012f88:	e007      	b.n	8012f9a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	68ba      	ldr	r2, [r7, #8]
 8012f90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	60da      	str	r2, [r3, #12]
}
 8012f9a:	bf00      	nop
 8012f9c:	3714      	adds	r7, #20
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr
	...

08012fa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b087      	sub	sp, #28
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	4b16      	ldr	r3, [pc, #88]	; (8013010 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d802      	bhi.n	8012fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8012fbc:	4b15      	ldr	r3, [pc, #84]	; (8013014 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8012fbe:	617b      	str	r3, [r7, #20]
 8012fc0:	e001      	b.n	8012fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8012fc2:	4b15      	ldr	r3, [pc, #84]	; (8013018 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8012fc4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	3b08      	subs	r3, #8
 8012fd2:	4a12      	ldr	r2, [pc, #72]	; (801301c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8012fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8012fd8:	091b      	lsrs	r3, r3, #4
 8012fda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fe0:	089b      	lsrs	r3, r3, #2
 8012fe2:	009a      	lsls	r2, r3, #2
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	461a      	mov	r2, r3
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	4a0b      	ldr	r2, [pc, #44]	; (8013020 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8012ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f003 031f 	and.w	r3, r3, #31
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	409a      	lsls	r2, r3
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	651a      	str	r2, [r3, #80]	; 0x50
}
 8013002:	bf00      	nop
 8013004:	371c      	adds	r7, #28
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr
 801300e:	bf00      	nop
 8013010:	40020407 	.word	0x40020407
 8013014:	40020800 	.word	0x40020800
 8013018:	40020820 	.word	0x40020820
 801301c:	cccccccd 	.word	0xcccccccd
 8013020:	40020880 	.word	0x40020880

08013024 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013024:	b480      	push	{r7}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	b2db      	uxtb	r3, r3
 8013032:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8013034:	68fa      	ldr	r2, [r7, #12]
 8013036:	4b0b      	ldr	r3, [pc, #44]	; (8013064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8013038:	4413      	add	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	461a      	mov	r2, r3
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4a08      	ldr	r2, [pc, #32]	; (8013068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8013046:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	3b01      	subs	r3, #1
 801304c:	f003 031f 	and.w	r3, r3, #31
 8013050:	2201      	movs	r2, #1
 8013052:	409a      	lsls	r2, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8013058:	bf00      	nop
 801305a:	3714      	adds	r7, #20
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr
 8013064:	1000823f 	.word	0x1000823f
 8013068:	40020940 	.word	0x40020940

0801306c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801306c:	b480      	push	{r7}
 801306e:	b087      	sub	sp, #28
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8013076:	2300      	movs	r3, #0
 8013078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801307a:	e15a      	b.n	8013332 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	681a      	ldr	r2, [r3, #0]
 8013080:	2101      	movs	r1, #1
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	fa01 f303 	lsl.w	r3, r1, r3
 8013088:	4013      	ands	r3, r2
 801308a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2b00      	cmp	r3, #0
 8013090:	f000 814c 	beq.w	801332c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	f003 0303 	and.w	r3, r3, #3
 801309c:	2b01      	cmp	r3, #1
 801309e:	d005      	beq.n	80130ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80130a8:	2b02      	cmp	r3, #2
 80130aa:	d130      	bne.n	801310e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	005b      	lsls	r3, r3, #1
 80130b6:	2203      	movs	r2, #3
 80130b8:	fa02 f303 	lsl.w	r3, r2, r3
 80130bc:	43db      	mvns	r3, r3
 80130be:	693a      	ldr	r2, [r7, #16]
 80130c0:	4013      	ands	r3, r2
 80130c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	68da      	ldr	r2, [r3, #12]
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	fa02 f303 	lsl.w	r3, r2, r3
 80130d0:	693a      	ldr	r2, [r7, #16]
 80130d2:	4313      	orrs	r3, r2
 80130d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	693a      	ldr	r2, [r7, #16]
 80130da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80130e2:	2201      	movs	r2, #1
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	fa02 f303 	lsl.w	r3, r2, r3
 80130ea:	43db      	mvns	r3, r3
 80130ec:	693a      	ldr	r2, [r7, #16]
 80130ee:	4013      	ands	r3, r2
 80130f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	091b      	lsrs	r3, r3, #4
 80130f8:	f003 0201 	and.w	r2, r3, #1
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	fa02 f303 	lsl.w	r3, r2, r3
 8013102:	693a      	ldr	r2, [r7, #16]
 8013104:	4313      	orrs	r3, r2
 8013106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	693a      	ldr	r2, [r7, #16]
 801310c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	f003 0303 	and.w	r3, r3, #3
 8013116:	2b03      	cmp	r3, #3
 8013118:	d017      	beq.n	801314a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	005b      	lsls	r3, r3, #1
 8013124:	2203      	movs	r2, #3
 8013126:	fa02 f303 	lsl.w	r3, r2, r3
 801312a:	43db      	mvns	r3, r3
 801312c:	693a      	ldr	r2, [r7, #16]
 801312e:	4013      	ands	r3, r2
 8013130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	689a      	ldr	r2, [r3, #8]
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	005b      	lsls	r3, r3, #1
 801313a:	fa02 f303 	lsl.w	r3, r2, r3
 801313e:	693a      	ldr	r2, [r7, #16]
 8013140:	4313      	orrs	r3, r2
 8013142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	693a      	ldr	r2, [r7, #16]
 8013148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	f003 0303 	and.w	r3, r3, #3
 8013152:	2b02      	cmp	r3, #2
 8013154:	d123      	bne.n	801319e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	08da      	lsrs	r2, r3, #3
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	3208      	adds	r2, #8
 801315e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	f003 0307 	and.w	r3, r3, #7
 801316a:	009b      	lsls	r3, r3, #2
 801316c:	220f      	movs	r2, #15
 801316e:	fa02 f303 	lsl.w	r3, r2, r3
 8013172:	43db      	mvns	r3, r3
 8013174:	693a      	ldr	r2, [r7, #16]
 8013176:	4013      	ands	r3, r2
 8013178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	691a      	ldr	r2, [r3, #16]
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	f003 0307 	and.w	r3, r3, #7
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	fa02 f303 	lsl.w	r3, r2, r3
 801318a:	693a      	ldr	r2, [r7, #16]
 801318c:	4313      	orrs	r3, r2
 801318e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	08da      	lsrs	r2, r3, #3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	3208      	adds	r2, #8
 8013198:	6939      	ldr	r1, [r7, #16]
 801319a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	005b      	lsls	r3, r3, #1
 80131a8:	2203      	movs	r2, #3
 80131aa:	fa02 f303 	lsl.w	r3, r2, r3
 80131ae:	43db      	mvns	r3, r3
 80131b0:	693a      	ldr	r2, [r7, #16]
 80131b2:	4013      	ands	r3, r2
 80131b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	f003 0203 	and.w	r2, r3, #3
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	005b      	lsls	r3, r3, #1
 80131c2:	fa02 f303 	lsl.w	r3, r2, r3
 80131c6:	693a      	ldr	r2, [r7, #16]
 80131c8:	4313      	orrs	r3, r2
 80131ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	693a      	ldr	r2, [r7, #16]
 80131d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80131da:	2b00      	cmp	r3, #0
 80131dc:	f000 80a6 	beq.w	801332c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80131e0:	4b5b      	ldr	r3, [pc, #364]	; (8013350 <HAL_GPIO_Init+0x2e4>)
 80131e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131e4:	4a5a      	ldr	r2, [pc, #360]	; (8013350 <HAL_GPIO_Init+0x2e4>)
 80131e6:	f043 0301 	orr.w	r3, r3, #1
 80131ea:	6613      	str	r3, [r2, #96]	; 0x60
 80131ec:	4b58      	ldr	r3, [pc, #352]	; (8013350 <HAL_GPIO_Init+0x2e4>)
 80131ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131f0:	f003 0301 	and.w	r3, r3, #1
 80131f4:	60bb      	str	r3, [r7, #8]
 80131f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80131f8:	4a56      	ldr	r2, [pc, #344]	; (8013354 <HAL_GPIO_Init+0x2e8>)
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	089b      	lsrs	r3, r3, #2
 80131fe:	3302      	adds	r3, #2
 8013200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	f003 0303 	and.w	r3, r3, #3
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	220f      	movs	r2, #15
 8013210:	fa02 f303 	lsl.w	r3, r2, r3
 8013214:	43db      	mvns	r3, r3
 8013216:	693a      	ldr	r2, [r7, #16]
 8013218:	4013      	ands	r3, r2
 801321a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8013222:	d01f      	beq.n	8013264 <HAL_GPIO_Init+0x1f8>
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	4a4c      	ldr	r2, [pc, #304]	; (8013358 <HAL_GPIO_Init+0x2ec>)
 8013228:	4293      	cmp	r3, r2
 801322a:	d019      	beq.n	8013260 <HAL_GPIO_Init+0x1f4>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	4a4b      	ldr	r2, [pc, #300]	; (801335c <HAL_GPIO_Init+0x2f0>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d013      	beq.n	801325c <HAL_GPIO_Init+0x1f0>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	4a4a      	ldr	r2, [pc, #296]	; (8013360 <HAL_GPIO_Init+0x2f4>)
 8013238:	4293      	cmp	r3, r2
 801323a:	d00d      	beq.n	8013258 <HAL_GPIO_Init+0x1ec>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4a49      	ldr	r2, [pc, #292]	; (8013364 <HAL_GPIO_Init+0x2f8>)
 8013240:	4293      	cmp	r3, r2
 8013242:	d007      	beq.n	8013254 <HAL_GPIO_Init+0x1e8>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	4a48      	ldr	r2, [pc, #288]	; (8013368 <HAL_GPIO_Init+0x2fc>)
 8013248:	4293      	cmp	r3, r2
 801324a:	d101      	bne.n	8013250 <HAL_GPIO_Init+0x1e4>
 801324c:	2305      	movs	r3, #5
 801324e:	e00a      	b.n	8013266 <HAL_GPIO_Init+0x1fa>
 8013250:	2306      	movs	r3, #6
 8013252:	e008      	b.n	8013266 <HAL_GPIO_Init+0x1fa>
 8013254:	2304      	movs	r3, #4
 8013256:	e006      	b.n	8013266 <HAL_GPIO_Init+0x1fa>
 8013258:	2303      	movs	r3, #3
 801325a:	e004      	b.n	8013266 <HAL_GPIO_Init+0x1fa>
 801325c:	2302      	movs	r3, #2
 801325e:	e002      	b.n	8013266 <HAL_GPIO_Init+0x1fa>
 8013260:	2301      	movs	r3, #1
 8013262:	e000      	b.n	8013266 <HAL_GPIO_Init+0x1fa>
 8013264:	2300      	movs	r3, #0
 8013266:	697a      	ldr	r2, [r7, #20]
 8013268:	f002 0203 	and.w	r2, r2, #3
 801326c:	0092      	lsls	r2, r2, #2
 801326e:	4093      	lsls	r3, r2
 8013270:	693a      	ldr	r2, [r7, #16]
 8013272:	4313      	orrs	r3, r2
 8013274:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013276:	4937      	ldr	r1, [pc, #220]	; (8013354 <HAL_GPIO_Init+0x2e8>)
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	089b      	lsrs	r3, r3, #2
 801327c:	3302      	adds	r3, #2
 801327e:	693a      	ldr	r2, [r7, #16]
 8013280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013284:	4b39      	ldr	r3, [pc, #228]	; (801336c <HAL_GPIO_Init+0x300>)
 8013286:	689b      	ldr	r3, [r3, #8]
 8013288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	43db      	mvns	r3, r3
 801328e:	693a      	ldr	r2, [r7, #16]
 8013290:	4013      	ands	r3, r2
 8013292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801329c:	2b00      	cmp	r3, #0
 801329e:	d003      	beq.n	80132a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80132a0:	693a      	ldr	r2, [r7, #16]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	4313      	orrs	r3, r2
 80132a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80132a8:	4a30      	ldr	r2, [pc, #192]	; (801336c <HAL_GPIO_Init+0x300>)
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80132ae:	4b2f      	ldr	r3, [pc, #188]	; (801336c <HAL_GPIO_Init+0x300>)
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	43db      	mvns	r3, r3
 80132b8:	693a      	ldr	r2, [r7, #16]
 80132ba:	4013      	ands	r3, r2
 80132bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	685b      	ldr	r3, [r3, #4]
 80132c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d003      	beq.n	80132d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80132ca:	693a      	ldr	r2, [r7, #16]
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	4313      	orrs	r3, r2
 80132d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80132d2:	4a26      	ldr	r2, [pc, #152]	; (801336c <HAL_GPIO_Init+0x300>)
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80132d8:	4b24      	ldr	r3, [pc, #144]	; (801336c <HAL_GPIO_Init+0x300>)
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	43db      	mvns	r3, r3
 80132e2:	693a      	ldr	r2, [r7, #16]
 80132e4:	4013      	ands	r3, r2
 80132e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d003      	beq.n	80132fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80132f4:	693a      	ldr	r2, [r7, #16]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	4313      	orrs	r3, r2
 80132fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80132fc:	4a1b      	ldr	r2, [pc, #108]	; (801336c <HAL_GPIO_Init+0x300>)
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8013302:	4b1a      	ldr	r3, [pc, #104]	; (801336c <HAL_GPIO_Init+0x300>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	43db      	mvns	r3, r3
 801330c:	693a      	ldr	r2, [r7, #16]
 801330e:	4013      	ands	r3, r2
 8013310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801331a:	2b00      	cmp	r3, #0
 801331c:	d003      	beq.n	8013326 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801331e:	693a      	ldr	r2, [r7, #16]
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	4313      	orrs	r3, r2
 8013324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8013326:	4a11      	ldr	r2, [pc, #68]	; (801336c <HAL_GPIO_Init+0x300>)
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	3301      	adds	r3, #1
 8013330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	681a      	ldr	r2, [r3, #0]
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	fa22 f303 	lsr.w	r3, r2, r3
 801333c:	2b00      	cmp	r3, #0
 801333e:	f47f ae9d 	bne.w	801307c <HAL_GPIO_Init+0x10>
  }
}
 8013342:	bf00      	nop
 8013344:	bf00      	nop
 8013346:	371c      	adds	r7, #28
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr
 8013350:	40021000 	.word	0x40021000
 8013354:	40010000 	.word	0x40010000
 8013358:	48000400 	.word	0x48000400
 801335c:	48000800 	.word	0x48000800
 8013360:	48000c00 	.word	0x48000c00
 8013364:	48001000 	.word	0x48001000
 8013368:	48001400 	.word	0x48001400
 801336c:	40010400 	.word	0x40010400

08013370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013370:	b480      	push	{r7}
 8013372:	b083      	sub	sp, #12
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	807b      	strh	r3, [r7, #2]
 801337c:	4613      	mov	r3, r2
 801337e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013380:	787b      	ldrb	r3, [r7, #1]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d003      	beq.n	801338e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013386:	887a      	ldrh	r2, [r7, #2]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801338c:	e002      	b.n	8013394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801338e:	887a      	ldrh	r2, [r7, #2]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013394:	bf00      	nop
 8013396:	370c      	adds	r7, #12
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr

080133a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d141      	bne.n	8013432 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80133ae:	4b4b      	ldr	r3, [pc, #300]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80133b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133ba:	d131      	bne.n	8013420 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80133bc:	4b47      	ldr	r3, [pc, #284]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80133c2:	4a46      	ldr	r2, [pc, #280]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80133cc:	4b43      	ldr	r3, [pc, #268]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80133d4:	4a41      	ldr	r2, [pc, #260]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80133da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80133dc:	4b40      	ldr	r3, [pc, #256]	; (80134e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2232      	movs	r2, #50	; 0x32
 80133e2:	fb02 f303 	mul.w	r3, r2, r3
 80133e6:	4a3f      	ldr	r2, [pc, #252]	; (80134e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80133e8:	fba2 2303 	umull	r2, r3, r2, r3
 80133ec:	0c9b      	lsrs	r3, r3, #18
 80133ee:	3301      	adds	r3, #1
 80133f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80133f2:	e002      	b.n	80133fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	3b01      	subs	r3, #1
 80133f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80133fa:	4b38      	ldr	r3, [pc, #224]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133fc:	695b      	ldr	r3, [r3, #20]
 80133fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013406:	d102      	bne.n	801340e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d1f2      	bne.n	80133f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801340e:	4b33      	ldr	r3, [pc, #204]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013410:	695b      	ldr	r3, [r3, #20]
 8013412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801341a:	d158      	bne.n	80134ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801341c:	2303      	movs	r3, #3
 801341e:	e057      	b.n	80134d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013420:	4b2e      	ldr	r3, [pc, #184]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013426:	4a2d      	ldr	r2, [pc, #180]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801342c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8013430:	e04d      	b.n	80134ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013438:	d141      	bne.n	80134be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801343a:	4b28      	ldr	r3, [pc, #160]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013446:	d131      	bne.n	80134ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013448:	4b24      	ldr	r3, [pc, #144]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801344a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801344e:	4a23      	ldr	r2, [pc, #140]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013454:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8013458:	4b20      	ldr	r3, [pc, #128]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013460:	4a1e      	ldr	r2, [pc, #120]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013466:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8013468:	4b1d      	ldr	r3, [pc, #116]	; (80134e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	2232      	movs	r2, #50	; 0x32
 801346e:	fb02 f303 	mul.w	r3, r2, r3
 8013472:	4a1c      	ldr	r2, [pc, #112]	; (80134e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8013474:	fba2 2303 	umull	r2, r3, r2, r3
 8013478:	0c9b      	lsrs	r3, r3, #18
 801347a:	3301      	adds	r3, #1
 801347c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801347e:	e002      	b.n	8013486 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	3b01      	subs	r3, #1
 8013484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013486:	4b15      	ldr	r3, [pc, #84]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013488:	695b      	ldr	r3, [r3, #20]
 801348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013492:	d102      	bne.n	801349a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d1f2      	bne.n	8013480 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801349a:	4b10      	ldr	r3, [pc, #64]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801349c:	695b      	ldr	r3, [r3, #20]
 801349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80134a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80134a6:	d112      	bne.n	80134ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80134a8:	2303      	movs	r3, #3
 80134aa:	e011      	b.n	80134d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80134ac:	4b0b      	ldr	r3, [pc, #44]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80134ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134b2:	4a0a      	ldr	r2, [pc, #40]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80134b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80134bc:	e007      	b.n	80134ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80134be:	4b07      	ldr	r3, [pc, #28]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80134c6:	4a05      	ldr	r2, [pc, #20]	; (80134dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80134c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80134cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3714      	adds	r7, #20
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	40007000 	.word	0x40007000
 80134e0:	20000000 	.word	0x20000000
 80134e4:	431bde83 	.word	0x431bde83

080134e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80134e8:	b480      	push	{r7}
 80134ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80134ec:	4b05      	ldr	r3, [pc, #20]	; (8013504 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80134ee:	689b      	ldr	r3, [r3, #8]
 80134f0:	4a04      	ldr	r2, [pc, #16]	; (8013504 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80134f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80134f6:	6093      	str	r3, [r2, #8]
}
 80134f8:	bf00      	nop
 80134fa:	46bd      	mov	sp, r7
 80134fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013500:	4770      	bx	lr
 8013502:	bf00      	nop
 8013504:	40007000 	.word	0x40007000

08013508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b088      	sub	sp, #32
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d101      	bne.n	801351a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013516:	2301      	movs	r3, #1
 8013518:	e306      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f003 0301 	and.w	r3, r3, #1
 8013522:	2b00      	cmp	r3, #0
 8013524:	d075      	beq.n	8013612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013526:	4b97      	ldr	r3, [pc, #604]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	f003 030c 	and.w	r3, r3, #12
 801352e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013530:	4b94      	ldr	r3, [pc, #592]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	f003 0303 	and.w	r3, r3, #3
 8013538:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	2b0c      	cmp	r3, #12
 801353e:	d102      	bne.n	8013546 <HAL_RCC_OscConfig+0x3e>
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	2b03      	cmp	r3, #3
 8013544:	d002      	beq.n	801354c <HAL_RCC_OscConfig+0x44>
 8013546:	69bb      	ldr	r3, [r7, #24]
 8013548:	2b08      	cmp	r3, #8
 801354a:	d10b      	bne.n	8013564 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801354c:	4b8d      	ldr	r3, [pc, #564]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013554:	2b00      	cmp	r3, #0
 8013556:	d05b      	beq.n	8013610 <HAL_RCC_OscConfig+0x108>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d157      	bne.n	8013610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013560:	2301      	movs	r3, #1
 8013562:	e2e1      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801356c:	d106      	bne.n	801357c <HAL_RCC_OscConfig+0x74>
 801356e:	4b85      	ldr	r3, [pc, #532]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4a84      	ldr	r2, [pc, #528]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013578:	6013      	str	r3, [r2, #0]
 801357a:	e01d      	b.n	80135b8 <HAL_RCC_OscConfig+0xb0>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013584:	d10c      	bne.n	80135a0 <HAL_RCC_OscConfig+0x98>
 8013586:	4b7f      	ldr	r3, [pc, #508]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4a7e      	ldr	r2, [pc, #504]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013590:	6013      	str	r3, [r2, #0]
 8013592:	4b7c      	ldr	r3, [pc, #496]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	4a7b      	ldr	r2, [pc, #492]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801359c:	6013      	str	r3, [r2, #0]
 801359e:	e00b      	b.n	80135b8 <HAL_RCC_OscConfig+0xb0>
 80135a0:	4b78      	ldr	r3, [pc, #480]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4a77      	ldr	r2, [pc, #476]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80135a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80135aa:	6013      	str	r3, [r2, #0]
 80135ac:	4b75      	ldr	r3, [pc, #468]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4a74      	ldr	r2, [pc, #464]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80135b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80135b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d013      	beq.n	80135e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135c0:	f7fc ff76 	bl	80104b0 <HAL_GetTick>
 80135c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80135c6:	e008      	b.n	80135da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80135c8:	f7fc ff72 	bl	80104b0 <HAL_GetTick>
 80135cc:	4602      	mov	r2, r0
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	1ad3      	subs	r3, r2, r3
 80135d2:	2b64      	cmp	r3, #100	; 0x64
 80135d4:	d901      	bls.n	80135da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80135d6:	2303      	movs	r3, #3
 80135d8:	e2a6      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80135da:	4b6a      	ldr	r3, [pc, #424]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d0f0      	beq.n	80135c8 <HAL_RCC_OscConfig+0xc0>
 80135e6:	e014      	b.n	8013612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135e8:	f7fc ff62 	bl	80104b0 <HAL_GetTick>
 80135ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80135ee:	e008      	b.n	8013602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80135f0:	f7fc ff5e 	bl	80104b0 <HAL_GetTick>
 80135f4:	4602      	mov	r2, r0
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	2b64      	cmp	r3, #100	; 0x64
 80135fc:	d901      	bls.n	8013602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80135fe:	2303      	movs	r3, #3
 8013600:	e292      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013602:	4b60      	ldr	r3, [pc, #384]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801360a:	2b00      	cmp	r3, #0
 801360c:	d1f0      	bne.n	80135f0 <HAL_RCC_OscConfig+0xe8>
 801360e:	e000      	b.n	8013612 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f003 0302 	and.w	r3, r3, #2
 801361a:	2b00      	cmp	r3, #0
 801361c:	d075      	beq.n	801370a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801361e:	4b59      	ldr	r3, [pc, #356]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	f003 030c 	and.w	r3, r3, #12
 8013626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013628:	4b56      	ldr	r3, [pc, #344]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	f003 0303 	and.w	r3, r3, #3
 8013630:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8013632:	69bb      	ldr	r3, [r7, #24]
 8013634:	2b0c      	cmp	r3, #12
 8013636:	d102      	bne.n	801363e <HAL_RCC_OscConfig+0x136>
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	2b02      	cmp	r3, #2
 801363c:	d002      	beq.n	8013644 <HAL_RCC_OscConfig+0x13c>
 801363e:	69bb      	ldr	r3, [r7, #24]
 8013640:	2b04      	cmp	r3, #4
 8013642:	d11f      	bne.n	8013684 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013644:	4b4f      	ldr	r3, [pc, #316]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801364c:	2b00      	cmp	r3, #0
 801364e:	d005      	beq.n	801365c <HAL_RCC_OscConfig+0x154>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d101      	bne.n	801365c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8013658:	2301      	movs	r3, #1
 801365a:	e265      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801365c:	4b49      	ldr	r3, [pc, #292]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	691b      	ldr	r3, [r3, #16]
 8013668:	061b      	lsls	r3, r3, #24
 801366a:	4946      	ldr	r1, [pc, #280]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801366c:	4313      	orrs	r3, r2
 801366e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8013670:	4b45      	ldr	r3, [pc, #276]	; (8013788 <HAL_RCC_OscConfig+0x280>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4618      	mov	r0, r3
 8013676:	f7fc fecf 	bl	8010418 <HAL_InitTick>
 801367a:	4603      	mov	r3, r0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d043      	beq.n	8013708 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8013680:	2301      	movs	r3, #1
 8013682:	e251      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	68db      	ldr	r3, [r3, #12]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d023      	beq.n	80136d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801368c:	4b3d      	ldr	r3, [pc, #244]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4a3c      	ldr	r2, [pc, #240]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013698:	f7fc ff0a 	bl	80104b0 <HAL_GetTick>
 801369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801369e:	e008      	b.n	80136b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80136a0:	f7fc ff06 	bl	80104b0 <HAL_GetTick>
 80136a4:	4602      	mov	r2, r0
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	1ad3      	subs	r3, r2, r3
 80136aa:	2b02      	cmp	r3, #2
 80136ac:	d901      	bls.n	80136b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80136ae:	2303      	movs	r3, #3
 80136b0:	e23a      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80136b2:	4b34      	ldr	r3, [pc, #208]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d0f0      	beq.n	80136a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80136be:	4b31      	ldr	r3, [pc, #196]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	691b      	ldr	r3, [r3, #16]
 80136ca:	061b      	lsls	r3, r3, #24
 80136cc:	492d      	ldr	r1, [pc, #180]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80136ce:	4313      	orrs	r3, r2
 80136d0:	604b      	str	r3, [r1, #4]
 80136d2:	e01a      	b.n	801370a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80136d4:	4b2b      	ldr	r3, [pc, #172]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	4a2a      	ldr	r2, [pc, #168]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80136da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80136de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80136e0:	f7fc fee6 	bl	80104b0 <HAL_GetTick>
 80136e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80136e6:	e008      	b.n	80136fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80136e8:	f7fc fee2 	bl	80104b0 <HAL_GetTick>
 80136ec:	4602      	mov	r2, r0
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	1ad3      	subs	r3, r2, r3
 80136f2:	2b02      	cmp	r3, #2
 80136f4:	d901      	bls.n	80136fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80136f6:	2303      	movs	r3, #3
 80136f8:	e216      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80136fa:	4b22      	ldr	r3, [pc, #136]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1f0      	bne.n	80136e8 <HAL_RCC_OscConfig+0x1e0>
 8013706:	e000      	b.n	801370a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013708:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	f003 0308 	and.w	r3, r3, #8
 8013712:	2b00      	cmp	r3, #0
 8013714:	d041      	beq.n	801379a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	695b      	ldr	r3, [r3, #20]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d01c      	beq.n	8013758 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801371e:	4b19      	ldr	r3, [pc, #100]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013724:	4a17      	ldr	r2, [pc, #92]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013726:	f043 0301 	orr.w	r3, r3, #1
 801372a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801372e:	f7fc febf 	bl	80104b0 <HAL_GetTick>
 8013732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013734:	e008      	b.n	8013748 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013736:	f7fc febb 	bl	80104b0 <HAL_GetTick>
 801373a:	4602      	mov	r2, r0
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	2b02      	cmp	r3, #2
 8013742:	d901      	bls.n	8013748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013744:	2303      	movs	r3, #3
 8013746:	e1ef      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013748:	4b0e      	ldr	r3, [pc, #56]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801374e:	f003 0302 	and.w	r3, r3, #2
 8013752:	2b00      	cmp	r3, #0
 8013754:	d0ef      	beq.n	8013736 <HAL_RCC_OscConfig+0x22e>
 8013756:	e020      	b.n	801379a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013758:	4b0a      	ldr	r3, [pc, #40]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 801375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801375e:	4a09      	ldr	r2, [pc, #36]	; (8013784 <HAL_RCC_OscConfig+0x27c>)
 8013760:	f023 0301 	bic.w	r3, r3, #1
 8013764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013768:	f7fc fea2 	bl	80104b0 <HAL_GetTick>
 801376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801376e:	e00d      	b.n	801378c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013770:	f7fc fe9e 	bl	80104b0 <HAL_GetTick>
 8013774:	4602      	mov	r2, r0
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	1ad3      	subs	r3, r2, r3
 801377a:	2b02      	cmp	r3, #2
 801377c:	d906      	bls.n	801378c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801377e:	2303      	movs	r3, #3
 8013780:	e1d2      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
 8013782:	bf00      	nop
 8013784:	40021000 	.word	0x40021000
 8013788:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801378c:	4b8c      	ldr	r3, [pc, #560]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 801378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013792:	f003 0302 	and.w	r3, r3, #2
 8013796:	2b00      	cmp	r3, #0
 8013798:	d1ea      	bne.n	8013770 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f003 0304 	and.w	r3, r3, #4
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f000 80a6 	beq.w	80138f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80137a8:	2300      	movs	r3, #0
 80137aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80137ac:	4b84      	ldr	r3, [pc, #528]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80137ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d101      	bne.n	80137bc <HAL_RCC_OscConfig+0x2b4>
 80137b8:	2301      	movs	r3, #1
 80137ba:	e000      	b.n	80137be <HAL_RCC_OscConfig+0x2b6>
 80137bc:	2300      	movs	r3, #0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00d      	beq.n	80137de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80137c2:	4b7f      	ldr	r3, [pc, #508]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80137c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137c6:	4a7e      	ldr	r2, [pc, #504]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80137c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137cc:	6593      	str	r3, [r2, #88]	; 0x58
 80137ce:	4b7c      	ldr	r3, [pc, #496]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80137d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137d6:	60fb      	str	r3, [r7, #12]
 80137d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80137da:	2301      	movs	r3, #1
 80137dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80137de:	4b79      	ldr	r3, [pc, #484]	; (80139c4 <HAL_RCC_OscConfig+0x4bc>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d118      	bne.n	801381c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80137ea:	4b76      	ldr	r3, [pc, #472]	; (80139c4 <HAL_RCC_OscConfig+0x4bc>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	4a75      	ldr	r2, [pc, #468]	; (80139c4 <HAL_RCC_OscConfig+0x4bc>)
 80137f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80137f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80137f6:	f7fc fe5b 	bl	80104b0 <HAL_GetTick>
 80137fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80137fc:	e008      	b.n	8013810 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80137fe:	f7fc fe57 	bl	80104b0 <HAL_GetTick>
 8013802:	4602      	mov	r2, r0
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	1ad3      	subs	r3, r2, r3
 8013808:	2b02      	cmp	r3, #2
 801380a:	d901      	bls.n	8013810 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801380c:	2303      	movs	r3, #3
 801380e:	e18b      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013810:	4b6c      	ldr	r3, [pc, #432]	; (80139c4 <HAL_RCC_OscConfig+0x4bc>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013818:	2b00      	cmp	r3, #0
 801381a:	d0f0      	beq.n	80137fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	689b      	ldr	r3, [r3, #8]
 8013820:	2b01      	cmp	r3, #1
 8013822:	d108      	bne.n	8013836 <HAL_RCC_OscConfig+0x32e>
 8013824:	4b66      	ldr	r3, [pc, #408]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801382a:	4a65      	ldr	r2, [pc, #404]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 801382c:	f043 0301 	orr.w	r3, r3, #1
 8013830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013834:	e024      	b.n	8013880 <HAL_RCC_OscConfig+0x378>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	689b      	ldr	r3, [r3, #8]
 801383a:	2b05      	cmp	r3, #5
 801383c:	d110      	bne.n	8013860 <HAL_RCC_OscConfig+0x358>
 801383e:	4b60      	ldr	r3, [pc, #384]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013844:	4a5e      	ldr	r2, [pc, #376]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013846:	f043 0304 	orr.w	r3, r3, #4
 801384a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801384e:	4b5c      	ldr	r3, [pc, #368]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013854:	4a5a      	ldr	r2, [pc, #360]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013856:	f043 0301 	orr.w	r3, r3, #1
 801385a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801385e:	e00f      	b.n	8013880 <HAL_RCC_OscConfig+0x378>
 8013860:	4b57      	ldr	r3, [pc, #348]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013866:	4a56      	ldr	r2, [pc, #344]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013868:	f023 0301 	bic.w	r3, r3, #1
 801386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013870:	4b53      	ldr	r3, [pc, #332]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013876:	4a52      	ldr	r2, [pc, #328]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013878:	f023 0304 	bic.w	r3, r3, #4
 801387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	689b      	ldr	r3, [r3, #8]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d016      	beq.n	80138b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013888:	f7fc fe12 	bl	80104b0 <HAL_GetTick>
 801388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801388e:	e00a      	b.n	80138a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013890:	f7fc fe0e 	bl	80104b0 <HAL_GetTick>
 8013894:	4602      	mov	r2, r0
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	f241 3288 	movw	r2, #5000	; 0x1388
 801389e:	4293      	cmp	r3, r2
 80138a0:	d901      	bls.n	80138a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80138a2:	2303      	movs	r3, #3
 80138a4:	e140      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80138a6:	4b46      	ldr	r3, [pc, #280]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80138a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138ac:	f003 0302 	and.w	r3, r3, #2
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d0ed      	beq.n	8013890 <HAL_RCC_OscConfig+0x388>
 80138b4:	e015      	b.n	80138e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80138b6:	f7fc fdfb 	bl	80104b0 <HAL_GetTick>
 80138ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80138bc:	e00a      	b.n	80138d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80138be:	f7fc fdf7 	bl	80104b0 <HAL_GetTick>
 80138c2:	4602      	mov	r2, r0
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	1ad3      	subs	r3, r2, r3
 80138c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80138cc:	4293      	cmp	r3, r2
 80138ce:	d901      	bls.n	80138d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80138d0:	2303      	movs	r3, #3
 80138d2:	e129      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80138d4:	4b3a      	ldr	r3, [pc, #232]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80138d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138da:	f003 0302 	and.w	r3, r3, #2
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d1ed      	bne.n	80138be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80138e2:	7ffb      	ldrb	r3, [r7, #31]
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d105      	bne.n	80138f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80138e8:	4b35      	ldr	r3, [pc, #212]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80138ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138ec:	4a34      	ldr	r2, [pc, #208]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80138ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80138f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f003 0320 	and.w	r3, r3, #32
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d03c      	beq.n	801397a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	699b      	ldr	r3, [r3, #24]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d01c      	beq.n	8013942 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013908:	4b2d      	ldr	r3, [pc, #180]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 801390a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801390e:	4a2c      	ldr	r2, [pc, #176]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013910:	f043 0301 	orr.w	r3, r3, #1
 8013914:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013918:	f7fc fdca 	bl	80104b0 <HAL_GetTick>
 801391c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801391e:	e008      	b.n	8013932 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013920:	f7fc fdc6 	bl	80104b0 <HAL_GetTick>
 8013924:	4602      	mov	r2, r0
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	2b02      	cmp	r3, #2
 801392c:	d901      	bls.n	8013932 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801392e:	2303      	movs	r3, #3
 8013930:	e0fa      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8013932:	4b23      	ldr	r3, [pc, #140]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013938:	f003 0302 	and.w	r3, r3, #2
 801393c:	2b00      	cmp	r3, #0
 801393e:	d0ef      	beq.n	8013920 <HAL_RCC_OscConfig+0x418>
 8013940:	e01b      	b.n	801397a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013942:	4b1f      	ldr	r3, [pc, #124]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013948:	4a1d      	ldr	r2, [pc, #116]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 801394a:	f023 0301 	bic.w	r3, r3, #1
 801394e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013952:	f7fc fdad 	bl	80104b0 <HAL_GetTick>
 8013956:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8013958:	e008      	b.n	801396c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801395a:	f7fc fda9 	bl	80104b0 <HAL_GetTick>
 801395e:	4602      	mov	r2, r0
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	2b02      	cmp	r3, #2
 8013966:	d901      	bls.n	801396c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8013968:	2303      	movs	r3, #3
 801396a:	e0dd      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801396c:	4b14      	ldr	r3, [pc, #80]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 801396e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013972:	f003 0302 	and.w	r3, r3, #2
 8013976:	2b00      	cmp	r3, #0
 8013978:	d1ef      	bne.n	801395a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	69db      	ldr	r3, [r3, #28]
 801397e:	2b00      	cmp	r3, #0
 8013980:	f000 80d1 	beq.w	8013b26 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013984:	4b0e      	ldr	r3, [pc, #56]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 8013986:	689b      	ldr	r3, [r3, #8]
 8013988:	f003 030c 	and.w	r3, r3, #12
 801398c:	2b0c      	cmp	r3, #12
 801398e:	f000 808b 	beq.w	8013aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	69db      	ldr	r3, [r3, #28]
 8013996:	2b02      	cmp	r3, #2
 8013998:	d15e      	bne.n	8013a58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801399a:	4b09      	ldr	r3, [pc, #36]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	4a08      	ldr	r2, [pc, #32]	; (80139c0 <HAL_RCC_OscConfig+0x4b8>)
 80139a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80139a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139a6:	f7fc fd83 	bl	80104b0 <HAL_GetTick>
 80139aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80139ac:	e00c      	b.n	80139c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80139ae:	f7fc fd7f 	bl	80104b0 <HAL_GetTick>
 80139b2:	4602      	mov	r2, r0
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	1ad3      	subs	r3, r2, r3
 80139b8:	2b02      	cmp	r3, #2
 80139ba:	d905      	bls.n	80139c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80139bc:	2303      	movs	r3, #3
 80139be:	e0b3      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
 80139c0:	40021000 	.word	0x40021000
 80139c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80139c8:	4b59      	ldr	r3, [pc, #356]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d1ec      	bne.n	80139ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80139d4:	4b56      	ldr	r3, [pc, #344]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 80139d6:	68da      	ldr	r2, [r3, #12]
 80139d8:	4b56      	ldr	r3, [pc, #344]	; (8013b34 <HAL_RCC_OscConfig+0x62c>)
 80139da:	4013      	ands	r3, r2
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	6a11      	ldr	r1, [r2, #32]
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80139e4:	3a01      	subs	r2, #1
 80139e6:	0112      	lsls	r2, r2, #4
 80139e8:	4311      	orrs	r1, r2
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80139ee:	0212      	lsls	r2, r2, #8
 80139f0:	4311      	orrs	r1, r2
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80139f6:	0852      	lsrs	r2, r2, #1
 80139f8:	3a01      	subs	r2, #1
 80139fa:	0552      	lsls	r2, r2, #21
 80139fc:	4311      	orrs	r1, r2
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013a02:	0852      	lsrs	r2, r2, #1
 8013a04:	3a01      	subs	r2, #1
 8013a06:	0652      	lsls	r2, r2, #25
 8013a08:	4311      	orrs	r1, r2
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013a0e:	06d2      	lsls	r2, r2, #27
 8013a10:	430a      	orrs	r2, r1
 8013a12:	4947      	ldr	r1, [pc, #284]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a14:	4313      	orrs	r3, r2
 8013a16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013a18:	4b45      	ldr	r3, [pc, #276]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4a44      	ldr	r2, [pc, #272]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013a22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013a24:	4b42      	ldr	r3, [pc, #264]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	4a41      	ldr	r2, [pc, #260]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013a2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a30:	f7fc fd3e 	bl	80104b0 <HAL_GetTick>
 8013a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013a36:	e008      	b.n	8013a4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013a38:	f7fc fd3a 	bl	80104b0 <HAL_GetTick>
 8013a3c:	4602      	mov	r2, r0
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	2b02      	cmp	r3, #2
 8013a44:	d901      	bls.n	8013a4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8013a46:	2303      	movs	r3, #3
 8013a48:	e06e      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013a4a:	4b39      	ldr	r3, [pc, #228]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d0f0      	beq.n	8013a38 <HAL_RCC_OscConfig+0x530>
 8013a56:	e066      	b.n	8013b26 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013a58:	4b35      	ldr	r3, [pc, #212]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	4a34      	ldr	r2, [pc, #208]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013a62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8013a64:	4b32      	ldr	r3, [pc, #200]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	4a31      	ldr	r2, [pc, #196]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a6a:	f023 0303 	bic.w	r3, r3, #3
 8013a6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8013a70:	4b2f      	ldr	r3, [pc, #188]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	4a2e      	ldr	r2, [pc, #184]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8013a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a80:	f7fc fd16 	bl	80104b0 <HAL_GetTick>
 8013a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013a86:	e008      	b.n	8013a9a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013a88:	f7fc fd12 	bl	80104b0 <HAL_GetTick>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	1ad3      	subs	r3, r2, r3
 8013a92:	2b02      	cmp	r3, #2
 8013a94:	d901      	bls.n	8013a9a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8013a96:	2303      	movs	r3, #3
 8013a98:	e046      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013a9a:	4b25      	ldr	r3, [pc, #148]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1f0      	bne.n	8013a88 <HAL_RCC_OscConfig+0x580>
 8013aa6:	e03e      	b.n	8013b26 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	69db      	ldr	r3, [r3, #28]
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d101      	bne.n	8013ab4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e039      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8013ab4:	4b1e      	ldr	r3, [pc, #120]	; (8013b30 <HAL_RCC_OscConfig+0x628>)
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	f003 0203 	and.w	r2, r3, #3
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6a1b      	ldr	r3, [r3, #32]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d12c      	bne.n	8013b22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad2:	3b01      	subs	r3, #1
 8013ad4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d123      	bne.n	8013b22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ae4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d11b      	bne.n	8013b22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013af4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d113      	bne.n	8013b22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b04:	085b      	lsrs	r3, r3, #1
 8013b06:	3b01      	subs	r3, #1
 8013b08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d109      	bne.n	8013b22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b18:	085b      	lsrs	r3, r3, #1
 8013b1a:	3b01      	subs	r3, #1
 8013b1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d001      	beq.n	8013b26 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8013b22:	2301      	movs	r3, #1
 8013b24:	e000      	b.n	8013b28 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3720      	adds	r7, #32
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	40021000 	.word	0x40021000
 8013b34:	019f800c 	.word	0x019f800c

08013b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b086      	sub	sp, #24
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8013b42:	2300      	movs	r3, #0
 8013b44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d101      	bne.n	8013b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	e11e      	b.n	8013d8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013b50:	4b91      	ldr	r3, [pc, #580]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f003 030f 	and.w	r3, r3, #15
 8013b58:	683a      	ldr	r2, [r7, #0]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d910      	bls.n	8013b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013b5e:	4b8e      	ldr	r3, [pc, #568]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	f023 020f 	bic.w	r2, r3, #15
 8013b66:	498c      	ldr	r1, [pc, #560]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013b6e:	4b8a      	ldr	r3, [pc, #552]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	f003 030f 	and.w	r3, r3, #15
 8013b76:	683a      	ldr	r2, [r7, #0]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d001      	beq.n	8013b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	e106      	b.n	8013d8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	f003 0301 	and.w	r3, r3, #1
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d073      	beq.n	8013c74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	2b03      	cmp	r3, #3
 8013b92:	d129      	bne.n	8013be8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013b94:	4b81      	ldr	r3, [pc, #516]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d101      	bne.n	8013ba4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	e0f4      	b.n	8013d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8013ba4:	f000 f99c 	bl	8013ee0 <RCC_GetSysClockFreqFromPLLSource>
 8013ba8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	4a7c      	ldr	r2, [pc, #496]	; (8013da0 <HAL_RCC_ClockConfig+0x268>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d93f      	bls.n	8013c32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8013bb2:	4b7a      	ldr	r3, [pc, #488]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013bb4:	689b      	ldr	r3, [r3, #8]
 8013bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d009      	beq.n	8013bd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d033      	beq.n	8013c32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d12f      	bne.n	8013c32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8013bd2:	4b72      	ldr	r3, [pc, #456]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013bd4:	689b      	ldr	r3, [r3, #8]
 8013bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013bda:	4a70      	ldr	r2, [pc, #448]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013be0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8013be2:	2380      	movs	r3, #128	; 0x80
 8013be4:	617b      	str	r3, [r7, #20]
 8013be6:	e024      	b.n	8013c32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	2b02      	cmp	r3, #2
 8013bee:	d107      	bne.n	8013c00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013bf0:	4b6a      	ldr	r3, [pc, #424]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d109      	bne.n	8013c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	e0c6      	b.n	8013d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013c00:	4b66      	ldr	r3, [pc, #408]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d101      	bne.n	8013c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	e0be      	b.n	8013d8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8013c10:	f000 f8ce 	bl	8013db0 <HAL_RCC_GetSysClockFreq>
 8013c14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	4a61      	ldr	r2, [pc, #388]	; (8013da0 <HAL_RCC_ClockConfig+0x268>)
 8013c1a:	4293      	cmp	r3, r2
 8013c1c:	d909      	bls.n	8013c32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8013c1e:	4b5f      	ldr	r3, [pc, #380]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c20:	689b      	ldr	r3, [r3, #8]
 8013c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013c26:	4a5d      	ldr	r2, [pc, #372]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8013c2e:	2380      	movs	r3, #128	; 0x80
 8013c30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013c32:	4b5a      	ldr	r3, [pc, #360]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c34:	689b      	ldr	r3, [r3, #8]
 8013c36:	f023 0203 	bic.w	r2, r3, #3
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	4957      	ldr	r1, [pc, #348]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c40:	4313      	orrs	r3, r2
 8013c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013c44:	f7fc fc34 	bl	80104b0 <HAL_GetTick>
 8013c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013c4a:	e00a      	b.n	8013c62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013c4c:	f7fc fc30 	bl	80104b0 <HAL_GetTick>
 8013c50:	4602      	mov	r2, r0
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c5a:	4293      	cmp	r3, r2
 8013c5c:	d901      	bls.n	8013c62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8013c5e:	2303      	movs	r3, #3
 8013c60:	e095      	b.n	8013d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013c62:	4b4e      	ldr	r3, [pc, #312]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c64:	689b      	ldr	r3, [r3, #8]
 8013c66:	f003 020c 	and.w	r2, r3, #12
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	009b      	lsls	r3, r3, #2
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d1eb      	bne.n	8013c4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f003 0302 	and.w	r3, r3, #2
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d023      	beq.n	8013cc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f003 0304 	and.w	r3, r3, #4
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d005      	beq.n	8013c98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013c8c:	4b43      	ldr	r3, [pc, #268]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	4a42      	ldr	r2, [pc, #264]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013c92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8013c96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f003 0308 	and.w	r3, r3, #8
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d007      	beq.n	8013cb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8013ca4:	4b3d      	ldr	r3, [pc, #244]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013ca6:	689b      	ldr	r3, [r3, #8]
 8013ca8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013cac:	4a3b      	ldr	r2, [pc, #236]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8013cb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013cb4:	4b39      	ldr	r3, [pc, #228]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013cb6:	689b      	ldr	r3, [r3, #8]
 8013cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	4936      	ldr	r1, [pc, #216]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013cc2:	4313      	orrs	r3, r2
 8013cc4:	608b      	str	r3, [r1, #8]
 8013cc6:	e008      	b.n	8013cda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	2b80      	cmp	r3, #128	; 0x80
 8013ccc:	d105      	bne.n	8013cda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8013cce:	4b33      	ldr	r3, [pc, #204]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013cd0:	689b      	ldr	r3, [r3, #8]
 8013cd2:	4a32      	ldr	r2, [pc, #200]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013cd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013cda:	4b2f      	ldr	r3, [pc, #188]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f003 030f 	and.w	r3, r3, #15
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d21d      	bcs.n	8013d24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013ce8:	4b2b      	ldr	r3, [pc, #172]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f023 020f 	bic.w	r2, r3, #15
 8013cf0:	4929      	ldr	r1, [pc, #164]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	4313      	orrs	r3, r2
 8013cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8013cf8:	f7fc fbda 	bl	80104b0 <HAL_GetTick>
 8013cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013cfe:	e00a      	b.n	8013d16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013d00:	f7fc fbd6 	bl	80104b0 <HAL_GetTick>
 8013d04:	4602      	mov	r2, r0
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	1ad3      	subs	r3, r2, r3
 8013d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	d901      	bls.n	8013d16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8013d12:	2303      	movs	r3, #3
 8013d14:	e03b      	b.n	8013d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013d16:	4b20      	ldr	r3, [pc, #128]	; (8013d98 <HAL_RCC_ClockConfig+0x260>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f003 030f 	and.w	r3, r3, #15
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d1ed      	bne.n	8013d00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f003 0304 	and.w	r3, r3, #4
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d008      	beq.n	8013d42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013d30:	4b1a      	ldr	r3, [pc, #104]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	4917      	ldr	r1, [pc, #92]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	f003 0308 	and.w	r3, r3, #8
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d009      	beq.n	8013d62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013d4e:	4b13      	ldr	r3, [pc, #76]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013d50:	689b      	ldr	r3, [r3, #8]
 8013d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	691b      	ldr	r3, [r3, #16]
 8013d5a:	00db      	lsls	r3, r3, #3
 8013d5c:	490f      	ldr	r1, [pc, #60]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013d62:	f000 f825 	bl	8013db0 <HAL_RCC_GetSysClockFreq>
 8013d66:	4602      	mov	r2, r0
 8013d68:	4b0c      	ldr	r3, [pc, #48]	; (8013d9c <HAL_RCC_ClockConfig+0x264>)
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	091b      	lsrs	r3, r3, #4
 8013d6e:	f003 030f 	and.w	r3, r3, #15
 8013d72:	490c      	ldr	r1, [pc, #48]	; (8013da4 <HAL_RCC_ClockConfig+0x26c>)
 8013d74:	5ccb      	ldrb	r3, [r1, r3]
 8013d76:	f003 031f 	and.w	r3, r3, #31
 8013d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8013d7e:	4a0a      	ldr	r2, [pc, #40]	; (8013da8 <HAL_RCC_ClockConfig+0x270>)
 8013d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8013d82:	4b0a      	ldr	r3, [pc, #40]	; (8013dac <HAL_RCC_ClockConfig+0x274>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7fc fb46 	bl	8010418 <HAL_InitTick>
 8013d8c:	4603      	mov	r3, r0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3718      	adds	r7, #24
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	bf00      	nop
 8013d98:	40022000 	.word	0x40022000
 8013d9c:	40021000 	.word	0x40021000
 8013da0:	04c4b400 	.word	0x04c4b400
 8013da4:	0801a644 	.word	0x0801a644
 8013da8:	20000000 	.word	0x20000000
 8013dac:	20000004 	.word	0x20000004

08013db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b087      	sub	sp, #28
 8013db4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8013db6:	4b2c      	ldr	r3, [pc, #176]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013db8:	689b      	ldr	r3, [r3, #8]
 8013dba:	f003 030c 	and.w	r3, r3, #12
 8013dbe:	2b04      	cmp	r3, #4
 8013dc0:	d102      	bne.n	8013dc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8013dc2:	4b2a      	ldr	r3, [pc, #168]	; (8013e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8013dc4:	613b      	str	r3, [r7, #16]
 8013dc6:	e047      	b.n	8013e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8013dc8:	4b27      	ldr	r3, [pc, #156]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	f003 030c 	and.w	r3, r3, #12
 8013dd0:	2b08      	cmp	r3, #8
 8013dd2:	d102      	bne.n	8013dda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8013dd4:	4b25      	ldr	r3, [pc, #148]	; (8013e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8013dd6:	613b      	str	r3, [r7, #16]
 8013dd8:	e03e      	b.n	8013e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8013dda:	4b23      	ldr	r3, [pc, #140]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013ddc:	689b      	ldr	r3, [r3, #8]
 8013dde:	f003 030c 	and.w	r3, r3, #12
 8013de2:	2b0c      	cmp	r3, #12
 8013de4:	d136      	bne.n	8013e54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8013de6:	4b20      	ldr	r3, [pc, #128]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013de8:	68db      	ldr	r3, [r3, #12]
 8013dea:	f003 0303 	and.w	r3, r3, #3
 8013dee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013df0:	4b1d      	ldr	r3, [pc, #116]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013df2:	68db      	ldr	r3, [r3, #12]
 8013df4:	091b      	lsrs	r3, r3, #4
 8013df6:	f003 030f 	and.w	r3, r3, #15
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2b03      	cmp	r3, #3
 8013e02:	d10c      	bne.n	8013e1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013e04:	4a19      	ldr	r2, [pc, #100]	; (8013e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e0c:	4a16      	ldr	r2, [pc, #88]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013e0e:	68d2      	ldr	r2, [r2, #12]
 8013e10:	0a12      	lsrs	r2, r2, #8
 8013e12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013e16:	fb02 f303 	mul.w	r3, r2, r3
 8013e1a:	617b      	str	r3, [r7, #20]
      break;
 8013e1c:	e00c      	b.n	8013e38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013e1e:	4a13      	ldr	r2, [pc, #76]	; (8013e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e26:	4a10      	ldr	r2, [pc, #64]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013e28:	68d2      	ldr	r2, [r2, #12]
 8013e2a:	0a12      	lsrs	r2, r2, #8
 8013e2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013e30:	fb02 f303 	mul.w	r3, r2, r3
 8013e34:	617b      	str	r3, [r7, #20]
      break;
 8013e36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013e38:	4b0b      	ldr	r3, [pc, #44]	; (8013e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	0e5b      	lsrs	r3, r3, #25
 8013e3e:	f003 0303 	and.w	r3, r3, #3
 8013e42:	3301      	adds	r3, #1
 8013e44:	005b      	lsls	r3, r3, #1
 8013e46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8013e48:	697a      	ldr	r2, [r7, #20]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e50:	613b      	str	r3, [r7, #16]
 8013e52:	e001      	b.n	8013e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8013e54:	2300      	movs	r3, #0
 8013e56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8013e58:	693b      	ldr	r3, [r7, #16]
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	371c      	adds	r7, #28
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr
 8013e66:	bf00      	nop
 8013e68:	40021000 	.word	0x40021000
 8013e6c:	00f42400 	.word	0x00f42400

08013e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013e70:	b480      	push	{r7}
 8013e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013e74:	4b03      	ldr	r3, [pc, #12]	; (8013e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8013e76:	681b      	ldr	r3, [r3, #0]
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr
 8013e82:	bf00      	nop
 8013e84:	20000000 	.word	0x20000000

08013e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8013e8c:	f7ff fff0 	bl	8013e70 <HAL_RCC_GetHCLKFreq>
 8013e90:	4602      	mov	r2, r0
 8013e92:	4b06      	ldr	r3, [pc, #24]	; (8013eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8013e94:	689b      	ldr	r3, [r3, #8]
 8013e96:	0a1b      	lsrs	r3, r3, #8
 8013e98:	f003 0307 	and.w	r3, r3, #7
 8013e9c:	4904      	ldr	r1, [pc, #16]	; (8013eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013e9e:	5ccb      	ldrb	r3, [r1, r3]
 8013ea0:	f003 031f 	and.w	r3, r3, #31
 8013ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	40021000 	.word	0x40021000
 8013eb0:	0801a654 	.word	0x0801a654

08013eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8013eb8:	f7ff ffda 	bl	8013e70 <HAL_RCC_GetHCLKFreq>
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	4b06      	ldr	r3, [pc, #24]	; (8013ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013ec0:	689b      	ldr	r3, [r3, #8]
 8013ec2:	0adb      	lsrs	r3, r3, #11
 8013ec4:	f003 0307 	and.w	r3, r3, #7
 8013ec8:	4904      	ldr	r1, [pc, #16]	; (8013edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8013eca:	5ccb      	ldrb	r3, [r1, r3]
 8013ecc:	f003 031f 	and.w	r3, r3, #31
 8013ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	bd80      	pop	{r7, pc}
 8013ed8:	40021000 	.word	0x40021000
 8013edc:	0801a654 	.word	0x0801a654

08013ee0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8013ee0:	b480      	push	{r7}
 8013ee2:	b087      	sub	sp, #28
 8013ee4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8013ee6:	4b1e      	ldr	r3, [pc, #120]	; (8013f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	f003 0303 	and.w	r3, r3, #3
 8013eee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013ef0:	4b1b      	ldr	r3, [pc, #108]	; (8013f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	091b      	lsrs	r3, r3, #4
 8013ef6:	f003 030f 	and.w	r3, r3, #15
 8013efa:	3301      	adds	r3, #1
 8013efc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	2b03      	cmp	r3, #3
 8013f02:	d10c      	bne.n	8013f1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013f04:	4a17      	ldr	r2, [pc, #92]	; (8013f64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f0c:	4a14      	ldr	r2, [pc, #80]	; (8013f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013f0e:	68d2      	ldr	r2, [r2, #12]
 8013f10:	0a12      	lsrs	r2, r2, #8
 8013f12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013f16:	fb02 f303 	mul.w	r3, r2, r3
 8013f1a:	617b      	str	r3, [r7, #20]
    break;
 8013f1c:	e00c      	b.n	8013f38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013f1e:	4a11      	ldr	r2, [pc, #68]	; (8013f64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f26:	4a0e      	ldr	r2, [pc, #56]	; (8013f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013f28:	68d2      	ldr	r2, [r2, #12]
 8013f2a:	0a12      	lsrs	r2, r2, #8
 8013f2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013f30:	fb02 f303 	mul.w	r3, r2, r3
 8013f34:	617b      	str	r3, [r7, #20]
    break;
 8013f36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013f38:	4b09      	ldr	r3, [pc, #36]	; (8013f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	0e5b      	lsrs	r3, r3, #25
 8013f3e:	f003 0303 	and.w	r3, r3, #3
 8013f42:	3301      	adds	r3, #1
 8013f44:	005b      	lsls	r3, r3, #1
 8013f46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8013f48:	697a      	ldr	r2, [r7, #20]
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8013f52:	687b      	ldr	r3, [r7, #4]
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	371c      	adds	r7, #28
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	40021000 	.word	0x40021000
 8013f64:	00f42400 	.word	0x00f42400

08013f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b086      	sub	sp, #24
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013f70:	2300      	movs	r3, #0
 8013f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013f74:	2300      	movs	r3, #0
 8013f76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f000 8098 	beq.w	80140b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013f86:	2300      	movs	r3, #0
 8013f88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013f8a:	4b43      	ldr	r3, [pc, #268]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10d      	bne.n	8013fb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013f96:	4b40      	ldr	r3, [pc, #256]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f9a:	4a3f      	ldr	r2, [pc, #252]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8013fa2:	4b3d      	ldr	r3, [pc, #244]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013faa:	60bb      	str	r3, [r7, #8]
 8013fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013fb2:	4b3a      	ldr	r3, [pc, #232]	; (801409c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	4a39      	ldr	r2, [pc, #228]	; (801409c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8013fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013fbe:	f7fc fa77 	bl	80104b0 <HAL_GetTick>
 8013fc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013fc4:	e009      	b.n	8013fda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013fc6:	f7fc fa73 	bl	80104b0 <HAL_GetTick>
 8013fca:	4602      	mov	r2, r0
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	1ad3      	subs	r3, r2, r3
 8013fd0:	2b02      	cmp	r3, #2
 8013fd2:	d902      	bls.n	8013fda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8013fd4:	2303      	movs	r3, #3
 8013fd6:	74fb      	strb	r3, [r7, #19]
        break;
 8013fd8:	e005      	b.n	8013fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013fda:	4b30      	ldr	r3, [pc, #192]	; (801409c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d0ef      	beq.n	8013fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8013fe6:	7cfb      	ldrb	r3, [r7, #19]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d159      	bne.n	80140a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8013fec:	4b2a      	ldr	r3, [pc, #168]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013ff6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d01e      	beq.n	801403c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014002:	697a      	ldr	r2, [r7, #20]
 8014004:	429a      	cmp	r2, r3
 8014006:	d019      	beq.n	801403c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014008:	4b23      	ldr	r3, [pc, #140]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801400e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014014:	4b20      	ldr	r3, [pc, #128]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8014016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801401a:	4a1f      	ldr	r2, [pc, #124]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014024:	4b1c      	ldr	r3, [pc, #112]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8014026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801402a:	4a1b      	ldr	r2, [pc, #108]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801402c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8014034:	4a18      	ldr	r2, [pc, #96]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	f003 0301 	and.w	r3, r3, #1
 8014042:	2b00      	cmp	r3, #0
 8014044:	d016      	beq.n	8014074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014046:	f7fc fa33 	bl	80104b0 <HAL_GetTick>
 801404a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801404c:	e00b      	b.n	8014066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801404e:	f7fc fa2f 	bl	80104b0 <HAL_GetTick>
 8014052:	4602      	mov	r2, r0
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	1ad3      	subs	r3, r2, r3
 8014058:	f241 3288 	movw	r2, #5000	; 0x1388
 801405c:	4293      	cmp	r3, r2
 801405e:	d902      	bls.n	8014066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8014060:	2303      	movs	r3, #3
 8014062:	74fb      	strb	r3, [r7, #19]
            break;
 8014064:	e006      	b.n	8014074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014066:	4b0c      	ldr	r3, [pc, #48]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8014068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801406c:	f003 0302 	and.w	r3, r3, #2
 8014070:	2b00      	cmp	r3, #0
 8014072:	d0ec      	beq.n	801404e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8014074:	7cfb      	ldrb	r3, [r7, #19]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d10b      	bne.n	8014092 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801407a:	4b07      	ldr	r3, [pc, #28]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014088:	4903      	ldr	r1, [pc, #12]	; (8014098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801408a:	4313      	orrs	r3, r2
 801408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8014090:	e008      	b.n	80140a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014092:	7cfb      	ldrb	r3, [r7, #19]
 8014094:	74bb      	strb	r3, [r7, #18]
 8014096:	e005      	b.n	80140a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8014098:	40021000 	.word	0x40021000
 801409c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80140a0:	7cfb      	ldrb	r3, [r7, #19]
 80140a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80140a4:	7c7b      	ldrb	r3, [r7, #17]
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d105      	bne.n	80140b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80140aa:	4ba7      	ldr	r3, [pc, #668]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140ae:	4aa6      	ldr	r2, [pc, #664]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80140b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	f003 0301 	and.w	r3, r3, #1
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d00a      	beq.n	80140d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80140c2:	4ba1      	ldr	r3, [pc, #644]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140c8:	f023 0203 	bic.w	r2, r3, #3
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	499d      	ldr	r1, [pc, #628]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140d2:	4313      	orrs	r3, r2
 80140d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f003 0302 	and.w	r3, r3, #2
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d00a      	beq.n	80140fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80140e4:	4b98      	ldr	r3, [pc, #608]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140ea:	f023 020c 	bic.w	r2, r3, #12
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	689b      	ldr	r3, [r3, #8]
 80140f2:	4995      	ldr	r1, [pc, #596]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140f4:	4313      	orrs	r3, r2
 80140f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	f003 0304 	and.w	r3, r3, #4
 8014102:	2b00      	cmp	r3, #0
 8014104:	d00a      	beq.n	801411c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8014106:	4b90      	ldr	r3, [pc, #576]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801410c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	68db      	ldr	r3, [r3, #12]
 8014114:	498c      	ldr	r1, [pc, #560]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014116:	4313      	orrs	r3, r2
 8014118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f003 0308 	and.w	r3, r3, #8
 8014124:	2b00      	cmp	r3, #0
 8014126:	d00a      	beq.n	801413e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8014128:	4b87      	ldr	r3, [pc, #540]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801412e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	691b      	ldr	r3, [r3, #16]
 8014136:	4984      	ldr	r1, [pc, #528]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014138:	4313      	orrs	r3, r2
 801413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f003 0310 	and.w	r3, r3, #16
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00a      	beq.n	8014160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801414a:	4b7f      	ldr	r3, [pc, #508]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	695b      	ldr	r3, [r3, #20]
 8014158:	497b      	ldr	r1, [pc, #492]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801415a:	4313      	orrs	r3, r2
 801415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	f003 0320 	and.w	r3, r3, #32
 8014168:	2b00      	cmp	r3, #0
 801416a:	d00a      	beq.n	8014182 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801416c:	4b76      	ldr	r3, [pc, #472]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	699b      	ldr	r3, [r3, #24]
 801417a:	4973      	ldr	r1, [pc, #460]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801417c:	4313      	orrs	r3, r2
 801417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00a      	beq.n	80141a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801418e:	4b6e      	ldr	r3, [pc, #440]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	69db      	ldr	r3, [r3, #28]
 801419c:	496a      	ldr	r1, [pc, #424]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801419e:	4313      	orrs	r3, r2
 80141a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d00a      	beq.n	80141c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80141b0:	4b65      	ldr	r3, [pc, #404]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a1b      	ldr	r3, [r3, #32]
 80141be:	4962      	ldr	r1, [pc, #392]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141c0:	4313      	orrs	r3, r2
 80141c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d00a      	beq.n	80141e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80141d2:	4b5d      	ldr	r3, [pc, #372]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e0:	4959      	ldr	r1, [pc, #356]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141e2:	4313      	orrs	r3, r2
 80141e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d00a      	beq.n	801420a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80141f4:	4b54      	ldr	r3, [pc, #336]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014202:	4951      	ldr	r1, [pc, #324]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014204:	4313      	orrs	r3, r2
 8014206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014212:	2b00      	cmp	r3, #0
 8014214:	d015      	beq.n	8014242 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8014216:	4b4c      	ldr	r3, [pc, #304]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801421c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014224:	4948      	ldr	r1, [pc, #288]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014226:	4313      	orrs	r3, r2
 8014228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014234:	d105      	bne.n	8014242 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014236:	4b44      	ldr	r3, [pc, #272]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014238:	68db      	ldr	r3, [r3, #12]
 801423a:	4a43      	ldr	r2, [pc, #268]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801423c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014240:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801424a:	2b00      	cmp	r3, #0
 801424c:	d015      	beq.n	801427a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801424e:	4b3e      	ldr	r3, [pc, #248]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801425c:	493a      	ldr	r1, [pc, #232]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801425e:	4313      	orrs	r3, r2
 8014260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801426c:	d105      	bne.n	801427a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801426e:	4b36      	ldr	r3, [pc, #216]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	4a35      	ldr	r2, [pc, #212]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014278:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014282:	2b00      	cmp	r3, #0
 8014284:	d015      	beq.n	80142b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014286:	4b30      	ldr	r3, [pc, #192]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801428c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014294:	492c      	ldr	r1, [pc, #176]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014296:	4313      	orrs	r3, r2
 8014298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80142a4:	d105      	bne.n	80142b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80142a6:	4b28      	ldr	r3, [pc, #160]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142a8:	68db      	ldr	r3, [r3, #12]
 80142aa:	4a27      	ldr	r2, [pc, #156]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142b0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d015      	beq.n	80142ea <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80142be:	4b22      	ldr	r3, [pc, #136]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80142c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142cc:	491e      	ldr	r1, [pc, #120]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142ce:	4313      	orrs	r3, r2
 80142d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80142dc:	d105      	bne.n	80142ea <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80142de:	4b1a      	ldr	r3, [pc, #104]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142e0:	68db      	ldr	r3, [r3, #12]
 80142e2:	4a19      	ldr	r2, [pc, #100]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142e8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d015      	beq.n	8014322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80142f6:	4b14      	ldr	r3, [pc, #80]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80142fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014304:	4910      	ldr	r1, [pc, #64]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014306:	4313      	orrs	r3, r2
 8014308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014314:	d105      	bne.n	8014322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014316:	4b0c      	ldr	r3, [pc, #48]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	4a0b      	ldr	r2, [pc, #44]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801431c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014320:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801432a:	2b00      	cmp	r3, #0
 801432c:	d018      	beq.n	8014360 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801432e:	4b06      	ldr	r3, [pc, #24]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014334:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801433c:	4902      	ldr	r1, [pc, #8]	; (8014348 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801433e:	4313      	orrs	r3, r2
 8014340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	e001      	b.n	801434c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8014348:	40021000 	.word	0x40021000
 801434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801434e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014352:	d105      	bne.n	8014360 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8014354:	4b21      	ldr	r3, [pc, #132]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014356:	68db      	ldr	r3, [r3, #12]
 8014358:	4a20      	ldr	r2, [pc, #128]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801435e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014368:	2b00      	cmp	r3, #0
 801436a:	d015      	beq.n	8014398 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801436c:	4b1b      	ldr	r3, [pc, #108]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014372:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801437a:	4918      	ldr	r1, [pc, #96]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801437c:	4313      	orrs	r3, r2
 801437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801438a:	d105      	bne.n	8014398 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801438c:	4b13      	ldr	r3, [pc, #76]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	4a12      	ldr	r2, [pc, #72]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014396:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d015      	beq.n	80143d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80143a4:	4b0d      	ldr	r3, [pc, #52]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80143a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80143aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143b2:	490a      	ldr	r1, [pc, #40]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80143b4:	4313      	orrs	r3, r2
 80143b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80143c2:	d105      	bne.n	80143d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80143c4:	4b05      	ldr	r3, [pc, #20]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	4a04      	ldr	r2, [pc, #16]	; (80143dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80143ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80143d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3718      	adds	r7, #24
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	40021000 	.word	0x40021000

080143e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d101      	bne.n	80143f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80143ee:	2301      	movs	r3, #1
 80143f0:	e09d      	b.n	801452e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d108      	bne.n	801440c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014402:	d009      	beq.n	8014418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2200      	movs	r2, #0
 8014408:	61da      	str	r2, [r3, #28]
 801440a:	e005      	b.n	8014418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2200      	movs	r2, #0
 8014410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2200      	movs	r2, #0
 8014416:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2200      	movs	r2, #0
 801441c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014424:	b2db      	uxtb	r3, r3
 8014426:	2b00      	cmp	r3, #0
 8014428:	d106      	bne.n	8014438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f7fa fe2e 	bl	800f094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2202      	movs	r2, #2
 801443c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801444e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	68db      	ldr	r3, [r3, #12]
 8014454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014458:	d902      	bls.n	8014460 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801445a:	2300      	movs	r3, #0
 801445c:	60fb      	str	r3, [r7, #12]
 801445e:	e002      	b.n	8014466 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8014460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014464:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801446e:	d007      	beq.n	8014480 <HAL_SPI_Init+0xa0>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014478:	d002      	beq.n	8014480 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2200      	movs	r2, #0
 801447e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	689b      	ldr	r3, [r3, #8]
 801448c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8014490:	431a      	orrs	r2, r3
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	691b      	ldr	r3, [r3, #16]
 8014496:	f003 0302 	and.w	r3, r3, #2
 801449a:	431a      	orrs	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	695b      	ldr	r3, [r3, #20]
 80144a0:	f003 0301 	and.w	r3, r3, #1
 80144a4:	431a      	orrs	r2, r3
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	699b      	ldr	r3, [r3, #24]
 80144aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80144ae:	431a      	orrs	r2, r3
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	69db      	ldr	r3, [r3, #28]
 80144b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80144b8:	431a      	orrs	r2, r3
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6a1b      	ldr	r3, [r3, #32]
 80144be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144c2:	ea42 0103 	orr.w	r1, r2, r3
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	430a      	orrs	r2, r1
 80144d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	699b      	ldr	r3, [r3, #24]
 80144da:	0c1b      	lsrs	r3, r3, #16
 80144dc:	f003 0204 	and.w	r2, r3, #4
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144e4:	f003 0310 	and.w	r3, r3, #16
 80144e8:	431a      	orrs	r2, r3
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144ee:	f003 0308 	and.w	r3, r3, #8
 80144f2:	431a      	orrs	r2, r3
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80144fc:	ea42 0103 	orr.w	r1, r2, r3
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	430a      	orrs	r2, r1
 801450c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	69da      	ldr	r2, [r3, #28]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801451c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2201      	movs	r2, #1
 8014528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801452c:	2300      	movs	r3, #0
}
 801452e:	4618      	mov	r0, r3
 8014530:	3710      	adds	r7, #16
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}

08014536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014536:	b580      	push	{r7, lr}
 8014538:	b088      	sub	sp, #32
 801453a:	af00      	add	r7, sp, #0
 801453c:	60f8      	str	r0, [r7, #12]
 801453e:	60b9      	str	r1, [r7, #8]
 8014540:	603b      	str	r3, [r7, #0]
 8014542:	4613      	mov	r3, r2
 8014544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014546:	2300      	movs	r3, #0
 8014548:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014550:	2b01      	cmp	r3, #1
 8014552:	d101      	bne.n	8014558 <HAL_SPI_Transmit+0x22>
 8014554:	2302      	movs	r3, #2
 8014556:	e158      	b.n	801480a <HAL_SPI_Transmit+0x2d4>
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	2201      	movs	r2, #1
 801455c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014560:	f7fb ffa6 	bl	80104b0 <HAL_GetTick>
 8014564:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8014566:	88fb      	ldrh	r3, [r7, #6]
 8014568:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014570:	b2db      	uxtb	r3, r3
 8014572:	2b01      	cmp	r3, #1
 8014574:	d002      	beq.n	801457c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8014576:	2302      	movs	r3, #2
 8014578:	77fb      	strb	r3, [r7, #31]
    goto error;
 801457a:	e13d      	b.n	80147f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d002      	beq.n	8014588 <HAL_SPI_Transmit+0x52>
 8014582:	88fb      	ldrh	r3, [r7, #6]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d102      	bne.n	801458e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8014588:	2301      	movs	r3, #1
 801458a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801458c:	e134      	b.n	80147f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2203      	movs	r2, #3
 8014592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2200      	movs	r2, #0
 801459a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	68ba      	ldr	r2, [r7, #8]
 80145a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	88fa      	ldrh	r2, [r7, #6]
 80145a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	88fa      	ldrh	r2, [r7, #6]
 80145ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	2200      	movs	r2, #0
 80145b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2200      	movs	r2, #0
 80145b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	2200      	movs	r2, #0
 80145c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2200      	movs	r2, #0
 80145c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	2200      	movs	r2, #0
 80145ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	689b      	ldr	r3, [r3, #8]
 80145d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145d8:	d10f      	bne.n	80145fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80145e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80145f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014604:	2b40      	cmp	r3, #64	; 0x40
 8014606:	d007      	beq.n	8014618 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014620:	d94b      	bls.n	80146ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	685b      	ldr	r3, [r3, #4]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d002      	beq.n	8014630 <HAL_SPI_Transmit+0xfa>
 801462a:	8afb      	ldrh	r3, [r7, #22]
 801462c:	2b01      	cmp	r3, #1
 801462e:	d13e      	bne.n	80146ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014634:	881a      	ldrh	r2, [r3, #0]
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014640:	1c9a      	adds	r2, r3, #2
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801464a:	b29b      	uxth	r3, r3
 801464c:	3b01      	subs	r3, #1
 801464e:	b29a      	uxth	r2, r3
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8014654:	e02b      	b.n	80146ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	689b      	ldr	r3, [r3, #8]
 801465c:	f003 0302 	and.w	r3, r3, #2
 8014660:	2b02      	cmp	r3, #2
 8014662:	d112      	bne.n	801468a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014668:	881a      	ldrh	r2, [r3, #0]
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014674:	1c9a      	adds	r2, r3, #2
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801467e:	b29b      	uxth	r3, r3
 8014680:	3b01      	subs	r3, #1
 8014682:	b29a      	uxth	r2, r3
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014688:	e011      	b.n	80146ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801468a:	f7fb ff11 	bl	80104b0 <HAL_GetTick>
 801468e:	4602      	mov	r2, r0
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	1ad3      	subs	r3, r2, r3
 8014694:	683a      	ldr	r2, [r7, #0]
 8014696:	429a      	cmp	r2, r3
 8014698:	d803      	bhi.n	80146a2 <HAL_SPI_Transmit+0x16c>
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146a0:	d102      	bne.n	80146a8 <HAL_SPI_Transmit+0x172>
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d102      	bne.n	80146ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80146a8:	2303      	movs	r3, #3
 80146aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80146ac:	e0a4      	b.n	80147f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146b2:	b29b      	uxth	r3, r3
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d1ce      	bne.n	8014656 <HAL_SPI_Transmit+0x120>
 80146b8:	e07c      	b.n	80147b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d002      	beq.n	80146c8 <HAL_SPI_Transmit+0x192>
 80146c2:	8afb      	ldrh	r3, [r7, #22]
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d170      	bne.n	80147aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	2b01      	cmp	r3, #1
 80146d0:	d912      	bls.n	80146f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146d6:	881a      	ldrh	r2, [r3, #0]
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146e2:	1c9a      	adds	r2, r3, #2
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	3b02      	subs	r3, #2
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80146f6:	e058      	b.n	80147aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	330c      	adds	r3, #12
 8014702:	7812      	ldrb	r2, [r2, #0]
 8014704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801470a:	1c5a      	adds	r2, r3, #1
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014714:	b29b      	uxth	r3, r3
 8014716:	3b01      	subs	r3, #1
 8014718:	b29a      	uxth	r2, r3
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801471e:	e044      	b.n	80147aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	689b      	ldr	r3, [r3, #8]
 8014726:	f003 0302 	and.w	r3, r3, #2
 801472a:	2b02      	cmp	r3, #2
 801472c:	d12b      	bne.n	8014786 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014732:	b29b      	uxth	r3, r3
 8014734:	2b01      	cmp	r3, #1
 8014736:	d912      	bls.n	801475e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801473c:	881a      	ldrh	r2, [r3, #0]
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014748:	1c9a      	adds	r2, r3, #2
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014752:	b29b      	uxth	r3, r3
 8014754:	3b02      	subs	r3, #2
 8014756:	b29a      	uxth	r2, r3
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801475c:	e025      	b.n	80147aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	330c      	adds	r3, #12
 8014768:	7812      	ldrb	r2, [r2, #0]
 801476a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014770:	1c5a      	adds	r2, r3, #1
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801477a:	b29b      	uxth	r3, r3
 801477c:	3b01      	subs	r3, #1
 801477e:	b29a      	uxth	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014784:	e011      	b.n	80147aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014786:	f7fb fe93 	bl	80104b0 <HAL_GetTick>
 801478a:	4602      	mov	r2, r0
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	1ad3      	subs	r3, r2, r3
 8014790:	683a      	ldr	r2, [r7, #0]
 8014792:	429a      	cmp	r2, r3
 8014794:	d803      	bhi.n	801479e <HAL_SPI_Transmit+0x268>
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801479c:	d102      	bne.n	80147a4 <HAL_SPI_Transmit+0x26e>
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d102      	bne.n	80147aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80147a4:	2303      	movs	r3, #3
 80147a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80147a8:	e026      	b.n	80147f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d1b5      	bne.n	8014720 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80147b4:	69ba      	ldr	r2, [r7, #24]
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	68f8      	ldr	r0, [r7, #12]
 80147ba:	f000 fce3 	bl	8015184 <SPI_EndRxTxTransaction>
 80147be:	4603      	mov	r3, r0
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d002      	beq.n	80147ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2220      	movs	r2, #32
 80147c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	689b      	ldr	r3, [r3, #8]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d10a      	bne.n	80147e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80147d2:	2300      	movs	r3, #0
 80147d4:	613b      	str	r3, [r7, #16]
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	68db      	ldr	r3, [r3, #12]
 80147dc:	613b      	str	r3, [r7, #16]
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	613b      	str	r3, [r7, #16]
 80147e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d002      	beq.n	80147f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80147f0:	2301      	movs	r3, #1
 80147f2:	77fb      	strb	r3, [r7, #31]
 80147f4:	e000      	b.n	80147f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80147f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2201      	movs	r2, #1
 80147fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2200      	movs	r2, #0
 8014804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014808:	7ffb      	ldrb	r3, [r7, #31]
}
 801480a:	4618      	mov	r0, r3
 801480c:	3720      	adds	r7, #32
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}

08014812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014812:	b580      	push	{r7, lr}
 8014814:	b088      	sub	sp, #32
 8014816:	af02      	add	r7, sp, #8
 8014818:	60f8      	str	r0, [r7, #12]
 801481a:	60b9      	str	r1, [r7, #8]
 801481c:	603b      	str	r3, [r7, #0]
 801481e:	4613      	mov	r3, r2
 8014820:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014822:	2300      	movs	r3, #0
 8014824:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801482e:	d112      	bne.n	8014856 <HAL_SPI_Receive+0x44>
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	689b      	ldr	r3, [r3, #8]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d10e      	bne.n	8014856 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2204      	movs	r2, #4
 801483c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8014840:	88fa      	ldrh	r2, [r7, #6]
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	9300      	str	r3, [sp, #0]
 8014846:	4613      	mov	r3, r2
 8014848:	68ba      	ldr	r2, [r7, #8]
 801484a:	68b9      	ldr	r1, [r7, #8]
 801484c:	68f8      	ldr	r0, [r7, #12]
 801484e:	f000 f910 	bl	8014a72 <HAL_SPI_TransmitReceive>
 8014852:	4603      	mov	r3, r0
 8014854:	e109      	b.n	8014a6a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801485c:	2b01      	cmp	r3, #1
 801485e:	d101      	bne.n	8014864 <HAL_SPI_Receive+0x52>
 8014860:	2302      	movs	r3, #2
 8014862:	e102      	b.n	8014a6a <HAL_SPI_Receive+0x258>
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2201      	movs	r2, #1
 8014868:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801486c:	f7fb fe20 	bl	80104b0 <HAL_GetTick>
 8014870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014878:	b2db      	uxtb	r3, r3
 801487a:	2b01      	cmp	r3, #1
 801487c:	d002      	beq.n	8014884 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801487e:	2302      	movs	r3, #2
 8014880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014882:	e0e9      	b.n	8014a58 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d002      	beq.n	8014890 <HAL_SPI_Receive+0x7e>
 801488a:	88fb      	ldrh	r3, [r7, #6]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d102      	bne.n	8014896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8014890:	2301      	movs	r3, #1
 8014892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014894:	e0e0      	b.n	8014a58 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2204      	movs	r2, #4
 801489a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2200      	movs	r2, #0
 80148a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	68ba      	ldr	r2, [r7, #8]
 80148a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	88fa      	ldrh	r2, [r7, #6]
 80148ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	88fa      	ldrh	r2, [r7, #6]
 80148b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2200      	movs	r2, #0
 80148be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2200      	movs	r2, #0
 80148c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	2200      	movs	r2, #0
 80148ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2200      	movs	r2, #0
 80148d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2200      	movs	r2, #0
 80148d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80148e0:	d908      	bls.n	80148f4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	685a      	ldr	r2, [r3, #4]
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80148f0:	605a      	str	r2, [r3, #4]
 80148f2:	e007      	b.n	8014904 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	685a      	ldr	r2, [r3, #4]
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014902:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	689b      	ldr	r3, [r3, #8]
 8014908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801490c:	d10f      	bne.n	801492e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	681a      	ldr	r2, [r3, #0]
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801491c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801492c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014938:	2b40      	cmp	r3, #64	; 0x40
 801493a:	d007      	beq.n	801494c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801494a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	68db      	ldr	r3, [r3, #12]
 8014950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014954:	d867      	bhi.n	8014a26 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8014956:	e030      	b.n	80149ba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	689b      	ldr	r3, [r3, #8]
 801495e:	f003 0301 	and.w	r3, r3, #1
 8014962:	2b01      	cmp	r3, #1
 8014964:	d117      	bne.n	8014996 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	f103 020c 	add.w	r2, r3, #12
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014972:	7812      	ldrb	r2, [r2, #0]
 8014974:	b2d2      	uxtb	r2, r2
 8014976:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801497c:	1c5a      	adds	r2, r3, #1
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014988:	b29b      	uxth	r3, r3
 801498a:	3b01      	subs	r3, #1
 801498c:	b29a      	uxth	r2, r3
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8014994:	e011      	b.n	80149ba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014996:	f7fb fd8b 	bl	80104b0 <HAL_GetTick>
 801499a:	4602      	mov	r2, r0
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	1ad3      	subs	r3, r2, r3
 80149a0:	683a      	ldr	r2, [r7, #0]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d803      	bhi.n	80149ae <HAL_SPI_Receive+0x19c>
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ac:	d102      	bne.n	80149b4 <HAL_SPI_Receive+0x1a2>
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d102      	bne.n	80149ba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80149b4:	2303      	movs	r3, #3
 80149b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80149b8:	e04e      	b.n	8014a58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d1c8      	bne.n	8014958 <HAL_SPI_Receive+0x146>
 80149c6:	e034      	b.n	8014a32 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	689b      	ldr	r3, [r3, #8]
 80149ce:	f003 0301 	and.w	r3, r3, #1
 80149d2:	2b01      	cmp	r3, #1
 80149d4:	d115      	bne.n	8014a02 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	68da      	ldr	r2, [r3, #12]
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149e0:	b292      	uxth	r2, r2
 80149e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149e8:	1c9a      	adds	r2, r3, #2
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	3b01      	subs	r3, #1
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8014a00:	e011      	b.n	8014a26 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014a02:	f7fb fd55 	bl	80104b0 <HAL_GetTick>
 8014a06:	4602      	mov	r2, r0
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	683a      	ldr	r2, [r7, #0]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d803      	bhi.n	8014a1a <HAL_SPI_Receive+0x208>
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a18:	d102      	bne.n	8014a20 <HAL_SPI_Receive+0x20e>
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d102      	bne.n	8014a26 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8014a20:	2303      	movs	r3, #3
 8014a22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8014a24:	e018      	b.n	8014a58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014a2c:	b29b      	uxth	r3, r3
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1ca      	bne.n	80149c8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014a32:	693a      	ldr	r2, [r7, #16]
 8014a34:	6839      	ldr	r1, [r7, #0]
 8014a36:	68f8      	ldr	r0, [r7, #12]
 8014a38:	f000 fb4c 	bl	80150d4 <SPI_EndRxTransaction>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d002      	beq.n	8014a48 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2220      	movs	r2, #32
 8014a46:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d002      	beq.n	8014a56 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8014a50:	2301      	movs	r3, #1
 8014a52:	75fb      	strb	r3, [r7, #23]
 8014a54:	e000      	b.n	8014a58 <HAL_SPI_Receive+0x246>
  }

error :
 8014a56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	2200      	movs	r2, #0
 8014a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	3718      	adds	r7, #24
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}

08014a72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014a72:	b580      	push	{r7, lr}
 8014a74:	b08a      	sub	sp, #40	; 0x28
 8014a76:	af00      	add	r7, sp, #0
 8014a78:	60f8      	str	r0, [r7, #12]
 8014a7a:	60b9      	str	r1, [r7, #8]
 8014a7c:	607a      	str	r2, [r7, #4]
 8014a7e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014a80:	2301      	movs	r3, #1
 8014a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014a84:	2300      	movs	r3, #0
 8014a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	d101      	bne.n	8014a98 <HAL_SPI_TransmitReceive+0x26>
 8014a94:	2302      	movs	r3, #2
 8014a96:	e1fb      	b.n	8014e90 <HAL_SPI_TransmitReceive+0x41e>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	2201      	movs	r2, #1
 8014a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014aa0:	f7fb fd06 	bl	80104b0 <HAL_GetTick>
 8014aa4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014aac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8014ab4:	887b      	ldrh	r3, [r7, #2]
 8014ab6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8014ab8:	887b      	ldrh	r3, [r7, #2]
 8014aba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014abc:	7efb      	ldrb	r3, [r7, #27]
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	d00e      	beq.n	8014ae0 <HAL_SPI_TransmitReceive+0x6e>
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014ac8:	d106      	bne.n	8014ad8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d102      	bne.n	8014ad8 <HAL_SPI_TransmitReceive+0x66>
 8014ad2:	7efb      	ldrb	r3, [r7, #27]
 8014ad4:	2b04      	cmp	r3, #4
 8014ad6:	d003      	beq.n	8014ae0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8014ad8:	2302      	movs	r3, #2
 8014ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014ade:	e1cd      	b.n	8014e7c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d005      	beq.n	8014af2 <HAL_SPI_TransmitReceive+0x80>
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <HAL_SPI_TransmitReceive+0x80>
 8014aec:	887b      	ldrh	r3, [r7, #2]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d103      	bne.n	8014afa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8014af2:	2301      	movs	r3, #1
 8014af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014af8:	e1c0      	b.n	8014e7c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	2b04      	cmp	r3, #4
 8014b04:	d003      	beq.n	8014b0e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2205      	movs	r2, #5
 8014b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2200      	movs	r2, #0
 8014b12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	887a      	ldrh	r2, [r7, #2]
 8014b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	887a      	ldrh	r2, [r7, #2]
 8014b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	68ba      	ldr	r2, [r7, #8]
 8014b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	887a      	ldrh	r2, [r7, #2]
 8014b34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	887a      	ldrh	r2, [r7, #2]
 8014b3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	2200      	movs	r2, #0
 8014b46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	68db      	ldr	r3, [r3, #12]
 8014b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014b50:	d802      	bhi.n	8014b58 <HAL_SPI_TransmitReceive+0xe6>
 8014b52:	8a3b      	ldrh	r3, [r7, #16]
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d908      	bls.n	8014b6a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	685a      	ldr	r2, [r3, #4]
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014b66:	605a      	str	r2, [r3, #4]
 8014b68:	e007      	b.n	8014b7a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	685a      	ldr	r2, [r3, #4]
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014b78:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b84:	2b40      	cmp	r3, #64	; 0x40
 8014b86:	d007      	beq.n	8014b98 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	681a      	ldr	r2, [r3, #0]
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	68db      	ldr	r3, [r3, #12]
 8014b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014ba0:	d97c      	bls.n	8014c9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d002      	beq.n	8014bb0 <HAL_SPI_TransmitReceive+0x13e>
 8014baa:	8a7b      	ldrh	r3, [r7, #18]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d169      	bne.n	8014c84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bb4:	881a      	ldrh	r2, [r3, #0]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bc0:	1c9a      	adds	r2, r3, #2
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	b29a      	uxth	r2, r3
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014bd4:	e056      	b.n	8014c84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	689b      	ldr	r3, [r3, #8]
 8014bdc:	f003 0302 	and.w	r3, r3, #2
 8014be0:	2b02      	cmp	r3, #2
 8014be2:	d11b      	bne.n	8014c1c <HAL_SPI_TransmitReceive+0x1aa>
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d016      	beq.n	8014c1c <HAL_SPI_TransmitReceive+0x1aa>
 8014bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d113      	bne.n	8014c1c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bf8:	881a      	ldrh	r2, [r3, #0]
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c04:	1c9a      	adds	r2, r3, #2
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	3b01      	subs	r3, #1
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	689b      	ldr	r3, [r3, #8]
 8014c22:	f003 0301 	and.w	r3, r3, #1
 8014c26:	2b01      	cmp	r3, #1
 8014c28:	d11c      	bne.n	8014c64 <HAL_SPI_TransmitReceive+0x1f2>
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d016      	beq.n	8014c64 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	68da      	ldr	r2, [r3, #12]
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c40:	b292      	uxth	r2, r2
 8014c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c48:	1c9a      	adds	r2, r3, #2
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014c54:	b29b      	uxth	r3, r3
 8014c56:	3b01      	subs	r3, #1
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014c60:	2301      	movs	r3, #1
 8014c62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014c64:	f7fb fc24 	bl	80104b0 <HAL_GetTick>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	69fb      	ldr	r3, [r7, #28]
 8014c6c:	1ad3      	subs	r3, r2, r3
 8014c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d807      	bhi.n	8014c84 <HAL_SPI_TransmitReceive+0x212>
 8014c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c7a:	d003      	beq.n	8014c84 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8014c7c:	2303      	movs	r3, #3
 8014c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014c82:	e0fb      	b.n	8014e7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d1a3      	bne.n	8014bd6 <HAL_SPI_TransmitReceive+0x164>
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014c94:	b29b      	uxth	r3, r3
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d19d      	bne.n	8014bd6 <HAL_SPI_TransmitReceive+0x164>
 8014c9a:	e0df      	b.n	8014e5c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d003      	beq.n	8014cac <HAL_SPI_TransmitReceive+0x23a>
 8014ca4:	8a7b      	ldrh	r3, [r7, #18]
 8014ca6:	2b01      	cmp	r3, #1
 8014ca8:	f040 80cb 	bne.w	8014e42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d912      	bls.n	8014cdc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cba:	881a      	ldrh	r2, [r3, #0]
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cc6:	1c9a      	adds	r2, r3, #2
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	3b02      	subs	r3, #2
 8014cd4:	b29a      	uxth	r2, r3
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014cda:	e0b2      	b.n	8014e42 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	330c      	adds	r3, #12
 8014ce6:	7812      	ldrb	r2, [r2, #0]
 8014ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cee:	1c5a      	adds	r2, r3, #1
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	3b01      	subs	r3, #1
 8014cfc:	b29a      	uxth	r2, r3
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014d02:	e09e      	b.n	8014e42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	689b      	ldr	r3, [r3, #8]
 8014d0a:	f003 0302 	and.w	r3, r3, #2
 8014d0e:	2b02      	cmp	r3, #2
 8014d10:	d134      	bne.n	8014d7c <HAL_SPI_TransmitReceive+0x30a>
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d16:	b29b      	uxth	r3, r3
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d02f      	beq.n	8014d7c <HAL_SPI_TransmitReceive+0x30a>
 8014d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1e:	2b01      	cmp	r3, #1
 8014d20:	d12c      	bne.n	8014d7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	2b01      	cmp	r3, #1
 8014d2a:	d912      	bls.n	8014d52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d30:	881a      	ldrh	r2, [r3, #0]
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d3c:	1c9a      	adds	r2, r3, #2
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	3b02      	subs	r3, #2
 8014d4a:	b29a      	uxth	r2, r3
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014d50:	e012      	b.n	8014d78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	330c      	adds	r3, #12
 8014d5c:	7812      	ldrb	r2, [r2, #0]
 8014d5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d64:	1c5a      	adds	r2, r3, #1
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d6e:	b29b      	uxth	r3, r3
 8014d70:	3b01      	subs	r3, #1
 8014d72:	b29a      	uxth	r2, r3
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	689b      	ldr	r3, [r3, #8]
 8014d82:	f003 0301 	and.w	r3, r3, #1
 8014d86:	2b01      	cmp	r3, #1
 8014d88:	d148      	bne.n	8014e1c <HAL_SPI_TransmitReceive+0x3aa>
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d042      	beq.n	8014e1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	d923      	bls.n	8014dea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	68da      	ldr	r2, [r3, #12]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dac:	b292      	uxth	r2, r2
 8014dae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014db4:	1c9a      	adds	r2, r3, #2
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014dc0:	b29b      	uxth	r3, r3
 8014dc2:	3b02      	subs	r3, #2
 8014dc4:	b29a      	uxth	r2, r3
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	2b01      	cmp	r3, #1
 8014dd6:	d81f      	bhi.n	8014e18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	685a      	ldr	r2, [r3, #4]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014de6:	605a      	str	r2, [r3, #4]
 8014de8:	e016      	b.n	8014e18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f103 020c 	add.w	r2, r3, #12
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014df6:	7812      	ldrb	r2, [r2, #0]
 8014df8:	b2d2      	uxtb	r2, r2
 8014dfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e00:	1c5a      	adds	r2, r3, #1
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	3b01      	subs	r3, #1
 8014e10:	b29a      	uxth	r2, r3
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014e1c:	f7fb fb48 	bl	80104b0 <HAL_GetTick>
 8014e20:	4602      	mov	r2, r0
 8014e22:	69fb      	ldr	r3, [r7, #28]
 8014e24:	1ad3      	subs	r3, r2, r3
 8014e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d803      	bhi.n	8014e34 <HAL_SPI_TransmitReceive+0x3c2>
 8014e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e32:	d102      	bne.n	8014e3a <HAL_SPI_TransmitReceive+0x3c8>
 8014e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d103      	bne.n	8014e42 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8014e3a:	2303      	movs	r3, #3
 8014e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014e40:	e01c      	b.n	8014e7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	f47f af5b 	bne.w	8014d04 <HAL_SPI_TransmitReceive+0x292>
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f47f af54 	bne.w	8014d04 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014e5c:	69fa      	ldr	r2, [r7, #28]
 8014e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	f000 f98f 	bl	8015184 <SPI_EndRxTxTransaction>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d006      	beq.n	8014e7a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2220      	movs	r2, #32
 8014e76:	661a      	str	r2, [r3, #96]	; 0x60
 8014e78:	e000      	b.n	8014e7c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8014e7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	2201      	movs	r2, #1
 8014e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2200      	movs	r2, #0
 8014e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3728      	adds	r7, #40	; 0x28
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}

08014e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b088      	sub	sp, #32
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	60b9      	str	r1, [r7, #8]
 8014ea2:	603b      	str	r3, [r7, #0]
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014ea8:	f7fb fb02 	bl	80104b0 <HAL_GetTick>
 8014eac:	4602      	mov	r2, r0
 8014eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb0:	1a9b      	subs	r3, r3, r2
 8014eb2:	683a      	ldr	r2, [r7, #0]
 8014eb4:	4413      	add	r3, r2
 8014eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014eb8:	f7fb fafa 	bl	80104b0 <HAL_GetTick>
 8014ebc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014ebe:	4b39      	ldr	r3, [pc, #228]	; (8014fa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	015b      	lsls	r3, r3, #5
 8014ec4:	0d1b      	lsrs	r3, r3, #20
 8014ec6:	69fa      	ldr	r2, [r7, #28]
 8014ec8:	fb02 f303 	mul.w	r3, r2, r3
 8014ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014ece:	e054      	b.n	8014f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ed6:	d050      	beq.n	8014f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014ed8:	f7fb faea 	bl	80104b0 <HAL_GetTick>
 8014edc:	4602      	mov	r2, r0
 8014ede:	69bb      	ldr	r3, [r7, #24]
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	69fa      	ldr	r2, [r7, #28]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d902      	bls.n	8014eee <SPI_WaitFlagStateUntilTimeout+0x56>
 8014ee8:	69fb      	ldr	r3, [r7, #28]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d13d      	bne.n	8014f6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	685a      	ldr	r2, [r3, #4]
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014f06:	d111      	bne.n	8014f2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	689b      	ldr	r3, [r3, #8]
 8014f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f10:	d004      	beq.n	8014f1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	689b      	ldr	r3, [r3, #8]
 8014f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014f1a:	d107      	bne.n	8014f2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	681a      	ldr	r2, [r3, #0]
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014f34:	d10f      	bne.n	8014f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	681a      	ldr	r2, [r3, #0]
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014f44:	601a      	str	r2, [r3, #0]
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2201      	movs	r2, #1
 8014f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2200      	movs	r2, #0
 8014f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8014f66:	2303      	movs	r3, #3
 8014f68:	e017      	b.n	8014f9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d101      	bne.n	8014f74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014f70:	2300      	movs	r3, #0
 8014f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	3b01      	subs	r3, #1
 8014f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	689a      	ldr	r2, [r3, #8]
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	4013      	ands	r3, r2
 8014f84:	68ba      	ldr	r2, [r7, #8]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	bf0c      	ite	eq
 8014f8a:	2301      	moveq	r3, #1
 8014f8c:	2300      	movne	r3, #0
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	461a      	mov	r2, r3
 8014f92:	79fb      	ldrb	r3, [r7, #7]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	d19b      	bne.n	8014ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014f98:	2300      	movs	r3, #0
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3720      	adds	r7, #32
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	20000000 	.word	0x20000000

08014fa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b08a      	sub	sp, #40	; 0x28
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	60f8      	str	r0, [r7, #12]
 8014fb0:	60b9      	str	r1, [r7, #8]
 8014fb2:	607a      	str	r2, [r7, #4]
 8014fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8014fba:	f7fb fa79 	bl	80104b0 <HAL_GetTick>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc2:	1a9b      	subs	r3, r3, r2
 8014fc4:	683a      	ldr	r2, [r7, #0]
 8014fc6:	4413      	add	r3, r2
 8014fc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8014fca:	f7fb fa71 	bl	80104b0 <HAL_GetTick>
 8014fce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	330c      	adds	r3, #12
 8014fd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8014fd8:	4b3d      	ldr	r3, [pc, #244]	; (80150d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	4613      	mov	r3, r2
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	4413      	add	r3, r2
 8014fe2:	00da      	lsls	r2, r3, #3
 8014fe4:	1ad3      	subs	r3, r2, r3
 8014fe6:	0d1b      	lsrs	r3, r3, #20
 8014fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fea:	fb02 f303 	mul.w	r3, r2, r3
 8014fee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8014ff0:	e060      	b.n	80150b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8014ff2:	68bb      	ldr	r3, [r7, #8]
 8014ff4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8014ff8:	d107      	bne.n	801500a <SPI_WaitFifoStateUntilTimeout+0x62>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d104      	bne.n	801500a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	781b      	ldrb	r3, [r3, #0]
 8015004:	b2db      	uxtb	r3, r3
 8015006:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8015008:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015010:	d050      	beq.n	80150b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015012:	f7fb fa4d 	bl	80104b0 <HAL_GetTick>
 8015016:	4602      	mov	r2, r0
 8015018:	6a3b      	ldr	r3, [r7, #32]
 801501a:	1ad3      	subs	r3, r2, r3
 801501c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801501e:	429a      	cmp	r2, r3
 8015020:	d902      	bls.n	8015028 <SPI_WaitFifoStateUntilTimeout+0x80>
 8015022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015024:	2b00      	cmp	r3, #0
 8015026:	d13d      	bne.n	80150a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	685a      	ldr	r2, [r3, #4]
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015036:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015040:	d111      	bne.n	8015066 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	689b      	ldr	r3, [r3, #8]
 8015046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801504a:	d004      	beq.n	8015056 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	689b      	ldr	r3, [r3, #8]
 8015050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015054:	d107      	bne.n	8015066 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	681a      	ldr	r2, [r3, #0]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015064:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801506a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801506e:	d10f      	bne.n	8015090 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	681a      	ldr	r2, [r3, #0]
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801507e:	601a      	str	r2, [r3, #0]
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801508e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2201      	movs	r2, #1
 8015094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2200      	movs	r2, #0
 801509c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80150a0:	2303      	movs	r3, #3
 80150a2:	e010      	b.n	80150c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80150a4:	69bb      	ldr	r3, [r7, #24]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d101      	bne.n	80150ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80150aa:	2300      	movs	r3, #0
 80150ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80150ae:	69bb      	ldr	r3, [r7, #24]
 80150b0:	3b01      	subs	r3, #1
 80150b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	689a      	ldr	r2, [r3, #8]
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	4013      	ands	r3, r2
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d196      	bne.n	8014ff2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3728      	adds	r7, #40	; 0x28
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	20000000 	.word	0x20000000

080150d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b086      	sub	sp, #24
 80150d8:	af02      	add	r7, sp, #8
 80150da:	60f8      	str	r0, [r7, #12]
 80150dc:	60b9      	str	r1, [r7, #8]
 80150de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80150e8:	d111      	bne.n	801510e <SPI_EndRxTransaction+0x3a>
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	689b      	ldr	r3, [r3, #8]
 80150ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150f2:	d004      	beq.n	80150fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	689b      	ldr	r3, [r3, #8]
 80150f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150fc:	d107      	bne.n	801510e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801510c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	9300      	str	r3, [sp, #0]
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	2200      	movs	r2, #0
 8015116:	2180      	movs	r1, #128	; 0x80
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	f7ff febd 	bl	8014e98 <SPI_WaitFlagStateUntilTimeout>
 801511e:	4603      	mov	r3, r0
 8015120:	2b00      	cmp	r3, #0
 8015122:	d007      	beq.n	8015134 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015128:	f043 0220 	orr.w	r2, r3, #32
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015130:	2303      	movs	r3, #3
 8015132:	e023      	b.n	801517c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801513c:	d11d      	bne.n	801517a <SPI_EndRxTransaction+0xa6>
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	689b      	ldr	r3, [r3, #8]
 8015142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015146:	d004      	beq.n	8015152 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	689b      	ldr	r3, [r3, #8]
 801514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015150:	d113      	bne.n	801517a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	9300      	str	r3, [sp, #0]
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	2200      	movs	r2, #0
 801515a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801515e:	68f8      	ldr	r0, [r7, #12]
 8015160:	f7ff ff22 	bl	8014fa8 <SPI_WaitFifoStateUntilTimeout>
 8015164:	4603      	mov	r3, r0
 8015166:	2b00      	cmp	r3, #0
 8015168:	d007      	beq.n	801517a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801516e:	f043 0220 	orr.w	r2, r3, #32
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8015176:	2303      	movs	r3, #3
 8015178:	e000      	b.n	801517c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801517a:	2300      	movs	r3, #0
}
 801517c:	4618      	mov	r0, r3
 801517e:	3710      	adds	r7, #16
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}

08015184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b086      	sub	sp, #24
 8015188:	af02      	add	r7, sp, #8
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	9300      	str	r3, [sp, #0]
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	2200      	movs	r2, #0
 8015198:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801519c:	68f8      	ldr	r0, [r7, #12]
 801519e:	f7ff ff03 	bl	8014fa8 <SPI_WaitFifoStateUntilTimeout>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d007      	beq.n	80151b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80151ac:	f043 0220 	orr.w	r2, r3, #32
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80151b4:	2303      	movs	r3, #3
 80151b6:	e027      	b.n	8015208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	9300      	str	r3, [sp, #0]
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	2200      	movs	r2, #0
 80151c0:	2180      	movs	r1, #128	; 0x80
 80151c2:	68f8      	ldr	r0, [r7, #12]
 80151c4:	f7ff fe68 	bl	8014e98 <SPI_WaitFlagStateUntilTimeout>
 80151c8:	4603      	mov	r3, r0
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d007      	beq.n	80151de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80151d2:	f043 0220 	orr.w	r2, r3, #32
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80151da:	2303      	movs	r3, #3
 80151dc:	e014      	b.n	8015208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	2200      	movs	r2, #0
 80151e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80151ea:	68f8      	ldr	r0, [r7, #12]
 80151ec:	f7ff fedc 	bl	8014fa8 <SPI_WaitFifoStateUntilTimeout>
 80151f0:	4603      	mov	r3, r0
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d007      	beq.n	8015206 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80151fa:	f043 0220 	orr.w	r2, r3, #32
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015202:	2303      	movs	r3, #3
 8015204:	e000      	b.n	8015208 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8015206:	2300      	movs	r3, #0
}
 8015208:	4618      	mov	r0, r3
 801520a:	3710      	adds	r7, #16
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d101      	bne.n	8015222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801521e:	2301      	movs	r3, #1
 8015220:	e049      	b.n	80152b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015228:	b2db      	uxtb	r3, r3
 801522a:	2b00      	cmp	r3, #0
 801522c:	d106      	bne.n	801523c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2200      	movs	r2, #0
 8015232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f7fa fa72 	bl	800f720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2202      	movs	r2, #2
 8015240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	3304      	adds	r3, #4
 801524c:	4619      	mov	r1, r3
 801524e:	4610      	mov	r0, r2
 8015250:	f000 fd6c 	bl	8015d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2201      	movs	r2, #1
 8015258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2201      	movs	r2, #1
 8015260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2201      	movs	r2, #1
 8015268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	2201      	movs	r2, #1
 8015270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	2201      	movs	r2, #1
 8015278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2201      	movs	r2, #1
 8015280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2201      	movs	r2, #1
 8015288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2201      	movs	r2, #1
 8015290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2201      	movs	r2, #1
 8015298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2201      	movs	r2, #1
 80152a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2201      	movs	r2, #1
 80152a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2201      	movs	r2, #1
 80152b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80152b4:	2300      	movs	r3, #0
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
	...

080152c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b085      	sub	sp, #20
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d001      	beq.n	80152d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80152d4:	2301      	movs	r3, #1
 80152d6:	e04f      	b.n	8015378 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2202      	movs	r2, #2
 80152dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	68da      	ldr	r2, [r3, #12]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	f042 0201 	orr.w	r2, r2, #1
 80152ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	4a23      	ldr	r2, [pc, #140]	; (8015384 <HAL_TIM_Base_Start_IT+0xc4>)
 80152f6:	4293      	cmp	r3, r2
 80152f8:	d01d      	beq.n	8015336 <HAL_TIM_Base_Start_IT+0x76>
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015302:	d018      	beq.n	8015336 <HAL_TIM_Base_Start_IT+0x76>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	4a1f      	ldr	r2, [pc, #124]	; (8015388 <HAL_TIM_Base_Start_IT+0xc8>)
 801530a:	4293      	cmp	r3, r2
 801530c:	d013      	beq.n	8015336 <HAL_TIM_Base_Start_IT+0x76>
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4a1e      	ldr	r2, [pc, #120]	; (801538c <HAL_TIM_Base_Start_IT+0xcc>)
 8015314:	4293      	cmp	r3, r2
 8015316:	d00e      	beq.n	8015336 <HAL_TIM_Base_Start_IT+0x76>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	4a1c      	ldr	r2, [pc, #112]	; (8015390 <HAL_TIM_Base_Start_IT+0xd0>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d009      	beq.n	8015336 <HAL_TIM_Base_Start_IT+0x76>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	4a1b      	ldr	r2, [pc, #108]	; (8015394 <HAL_TIM_Base_Start_IT+0xd4>)
 8015328:	4293      	cmp	r3, r2
 801532a:	d004      	beq.n	8015336 <HAL_TIM_Base_Start_IT+0x76>
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	4a19      	ldr	r2, [pc, #100]	; (8015398 <HAL_TIM_Base_Start_IT+0xd8>)
 8015332:	4293      	cmp	r3, r2
 8015334:	d115      	bne.n	8015362 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	689a      	ldr	r2, [r3, #8]
 801533c:	4b17      	ldr	r3, [pc, #92]	; (801539c <HAL_TIM_Base_Start_IT+0xdc>)
 801533e:	4013      	ands	r3, r2
 8015340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	2b06      	cmp	r3, #6
 8015346:	d015      	beq.n	8015374 <HAL_TIM_Base_Start_IT+0xb4>
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801534e:	d011      	beq.n	8015374 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	f042 0201 	orr.w	r2, r2, #1
 801535e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015360:	e008      	b.n	8015374 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	681a      	ldr	r2, [r3, #0]
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f042 0201 	orr.w	r2, r2, #1
 8015370:	601a      	str	r2, [r3, #0]
 8015372:	e000      	b.n	8015376 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015376:	2300      	movs	r3, #0
}
 8015378:	4618      	mov	r0, r3
 801537a:	3714      	adds	r7, #20
 801537c:	46bd      	mov	sp, r7
 801537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015382:	4770      	bx	lr
 8015384:	40012c00 	.word	0x40012c00
 8015388:	40000400 	.word	0x40000400
 801538c:	40000800 	.word	0x40000800
 8015390:	40013400 	.word	0x40013400
 8015394:	40014000 	.word	0x40014000
 8015398:	40015000 	.word	0x40015000
 801539c:	00010007 	.word	0x00010007

080153a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d101      	bne.n	80153b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80153ae:	2301      	movs	r3, #1
 80153b0:	e049      	b.n	8015446 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d106      	bne.n	80153cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2200      	movs	r2, #0
 80153c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f7fa f9e4 	bl	800f794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2202      	movs	r2, #2
 80153d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	3304      	adds	r3, #4
 80153dc:	4619      	mov	r1, r3
 80153de:	4610      	mov	r0, r2
 80153e0:	f000 fca4 	bl	8015d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2201      	movs	r2, #1
 80153e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2201      	movs	r2, #1
 80153f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2201      	movs	r2, #1
 80153f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2201      	movs	r2, #1
 8015400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2201      	movs	r2, #1
 8015408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2201      	movs	r2, #1
 8015410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2201      	movs	r2, #1
 8015418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2201      	movs	r2, #1
 8015420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2201      	movs	r2, #1
 8015428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2201      	movs	r2, #1
 8015430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2201      	movs	r2, #1
 8015438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2201      	movs	r2, #1
 8015440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015444:	2300      	movs	r3, #0
}
 8015446:	4618      	mov	r0, r3
 8015448:	3708      	adds	r7, #8
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}
	...

08015450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b084      	sub	sp, #16
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d109      	bne.n	8015474 <HAL_TIM_PWM_Start+0x24>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015466:	b2db      	uxtb	r3, r3
 8015468:	2b01      	cmp	r3, #1
 801546a:	bf14      	ite	ne
 801546c:	2301      	movne	r3, #1
 801546e:	2300      	moveq	r3, #0
 8015470:	b2db      	uxtb	r3, r3
 8015472:	e03c      	b.n	80154ee <HAL_TIM_PWM_Start+0x9e>
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	2b04      	cmp	r3, #4
 8015478:	d109      	bne.n	801548e <HAL_TIM_PWM_Start+0x3e>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015480:	b2db      	uxtb	r3, r3
 8015482:	2b01      	cmp	r3, #1
 8015484:	bf14      	ite	ne
 8015486:	2301      	movne	r3, #1
 8015488:	2300      	moveq	r3, #0
 801548a:	b2db      	uxtb	r3, r3
 801548c:	e02f      	b.n	80154ee <HAL_TIM_PWM_Start+0x9e>
 801548e:	683b      	ldr	r3, [r7, #0]
 8015490:	2b08      	cmp	r3, #8
 8015492:	d109      	bne.n	80154a8 <HAL_TIM_PWM_Start+0x58>
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b01      	cmp	r3, #1
 801549e:	bf14      	ite	ne
 80154a0:	2301      	movne	r3, #1
 80154a2:	2300      	moveq	r3, #0
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	e022      	b.n	80154ee <HAL_TIM_PWM_Start+0x9e>
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	2b0c      	cmp	r3, #12
 80154ac:	d109      	bne.n	80154c2 <HAL_TIM_PWM_Start+0x72>
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	2b01      	cmp	r3, #1
 80154b8:	bf14      	ite	ne
 80154ba:	2301      	movne	r3, #1
 80154bc:	2300      	moveq	r3, #0
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	e015      	b.n	80154ee <HAL_TIM_PWM_Start+0x9e>
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	2b10      	cmp	r3, #16
 80154c6:	d109      	bne.n	80154dc <HAL_TIM_PWM_Start+0x8c>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	bf14      	ite	ne
 80154d4:	2301      	movne	r3, #1
 80154d6:	2300      	moveq	r3, #0
 80154d8:	b2db      	uxtb	r3, r3
 80154da:	e008      	b.n	80154ee <HAL_TIM_PWM_Start+0x9e>
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80154e2:	b2db      	uxtb	r3, r3
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	bf14      	ite	ne
 80154e8:	2301      	movne	r3, #1
 80154ea:	2300      	moveq	r3, #0
 80154ec:	b2db      	uxtb	r3, r3
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d001      	beq.n	80154f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80154f2:	2301      	movs	r3, #1
 80154f4:	e0a1      	b.n	801563a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d104      	bne.n	8015506 <HAL_TIM_PWM_Start+0xb6>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2202      	movs	r2, #2
 8015500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015504:	e023      	b.n	801554e <HAL_TIM_PWM_Start+0xfe>
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	2b04      	cmp	r3, #4
 801550a:	d104      	bne.n	8015516 <HAL_TIM_PWM_Start+0xc6>
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2202      	movs	r2, #2
 8015510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015514:	e01b      	b.n	801554e <HAL_TIM_PWM_Start+0xfe>
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	2b08      	cmp	r3, #8
 801551a:	d104      	bne.n	8015526 <HAL_TIM_PWM_Start+0xd6>
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2202      	movs	r2, #2
 8015520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015524:	e013      	b.n	801554e <HAL_TIM_PWM_Start+0xfe>
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	2b0c      	cmp	r3, #12
 801552a:	d104      	bne.n	8015536 <HAL_TIM_PWM_Start+0xe6>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2202      	movs	r2, #2
 8015530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015534:	e00b      	b.n	801554e <HAL_TIM_PWM_Start+0xfe>
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	2b10      	cmp	r3, #16
 801553a:	d104      	bne.n	8015546 <HAL_TIM_PWM_Start+0xf6>
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2202      	movs	r2, #2
 8015540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015544:	e003      	b.n	801554e <HAL_TIM_PWM_Start+0xfe>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2202      	movs	r2, #2
 801554a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	2201      	movs	r2, #1
 8015554:	6839      	ldr	r1, [r7, #0]
 8015556:	4618      	mov	r0, r3
 8015558:	f000 ffb0 	bl	80164bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	4a38      	ldr	r2, [pc, #224]	; (8015644 <HAL_TIM_PWM_Start+0x1f4>)
 8015562:	4293      	cmp	r3, r2
 8015564:	d018      	beq.n	8015598 <HAL_TIM_PWM_Start+0x148>
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	4a37      	ldr	r2, [pc, #220]	; (8015648 <HAL_TIM_PWM_Start+0x1f8>)
 801556c:	4293      	cmp	r3, r2
 801556e:	d013      	beq.n	8015598 <HAL_TIM_PWM_Start+0x148>
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	4a35      	ldr	r2, [pc, #212]	; (801564c <HAL_TIM_PWM_Start+0x1fc>)
 8015576:	4293      	cmp	r3, r2
 8015578:	d00e      	beq.n	8015598 <HAL_TIM_PWM_Start+0x148>
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	4a34      	ldr	r2, [pc, #208]	; (8015650 <HAL_TIM_PWM_Start+0x200>)
 8015580:	4293      	cmp	r3, r2
 8015582:	d009      	beq.n	8015598 <HAL_TIM_PWM_Start+0x148>
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	4a32      	ldr	r2, [pc, #200]	; (8015654 <HAL_TIM_PWM_Start+0x204>)
 801558a:	4293      	cmp	r3, r2
 801558c:	d004      	beq.n	8015598 <HAL_TIM_PWM_Start+0x148>
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	4a31      	ldr	r2, [pc, #196]	; (8015658 <HAL_TIM_PWM_Start+0x208>)
 8015594:	4293      	cmp	r3, r2
 8015596:	d101      	bne.n	801559c <HAL_TIM_PWM_Start+0x14c>
 8015598:	2301      	movs	r3, #1
 801559a:	e000      	b.n	801559e <HAL_TIM_PWM_Start+0x14e>
 801559c:	2300      	movs	r3, #0
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d007      	beq.n	80155b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80155b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	4a23      	ldr	r2, [pc, #140]	; (8015644 <HAL_TIM_PWM_Start+0x1f4>)
 80155b8:	4293      	cmp	r3, r2
 80155ba:	d01d      	beq.n	80155f8 <HAL_TIM_PWM_Start+0x1a8>
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80155c4:	d018      	beq.n	80155f8 <HAL_TIM_PWM_Start+0x1a8>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	4a24      	ldr	r2, [pc, #144]	; (801565c <HAL_TIM_PWM_Start+0x20c>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d013      	beq.n	80155f8 <HAL_TIM_PWM_Start+0x1a8>
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4a22      	ldr	r2, [pc, #136]	; (8015660 <HAL_TIM_PWM_Start+0x210>)
 80155d6:	4293      	cmp	r3, r2
 80155d8:	d00e      	beq.n	80155f8 <HAL_TIM_PWM_Start+0x1a8>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	4a1a      	ldr	r2, [pc, #104]	; (8015648 <HAL_TIM_PWM_Start+0x1f8>)
 80155e0:	4293      	cmp	r3, r2
 80155e2:	d009      	beq.n	80155f8 <HAL_TIM_PWM_Start+0x1a8>
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4a18      	ldr	r2, [pc, #96]	; (801564c <HAL_TIM_PWM_Start+0x1fc>)
 80155ea:	4293      	cmp	r3, r2
 80155ec:	d004      	beq.n	80155f8 <HAL_TIM_PWM_Start+0x1a8>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4a19      	ldr	r2, [pc, #100]	; (8015658 <HAL_TIM_PWM_Start+0x208>)
 80155f4:	4293      	cmp	r3, r2
 80155f6:	d115      	bne.n	8015624 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	689a      	ldr	r2, [r3, #8]
 80155fe:	4b19      	ldr	r3, [pc, #100]	; (8015664 <HAL_TIM_PWM_Start+0x214>)
 8015600:	4013      	ands	r3, r2
 8015602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	2b06      	cmp	r3, #6
 8015608:	d015      	beq.n	8015636 <HAL_TIM_PWM_Start+0x1e6>
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015610:	d011      	beq.n	8015636 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	f042 0201 	orr.w	r2, r2, #1
 8015620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015622:	e008      	b.n	8015636 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	f042 0201 	orr.w	r2, r2, #1
 8015632:	601a      	str	r2, [r3, #0]
 8015634:	e000      	b.n	8015638 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015638:	2300      	movs	r3, #0
}
 801563a:	4618      	mov	r0, r3
 801563c:	3710      	adds	r7, #16
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	40012c00 	.word	0x40012c00
 8015648:	40013400 	.word	0x40013400
 801564c:	40014000 	.word	0x40014000
 8015650:	40014400 	.word	0x40014400
 8015654:	40014800 	.word	0x40014800
 8015658:	40015000 	.word	0x40015000
 801565c:	40000400 	.word	0x40000400
 8015660:	40000800 	.word	0x40000800
 8015664:	00010007 	.word	0x00010007

08015668 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	2200      	movs	r2, #0
 8015678:	6839      	ldr	r1, [r7, #0]
 801567a:	4618      	mov	r0, r3
 801567c:	f000 ff1e 	bl	80164bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	4a40      	ldr	r2, [pc, #256]	; (8015788 <HAL_TIM_PWM_Stop+0x120>)
 8015686:	4293      	cmp	r3, r2
 8015688:	d018      	beq.n	80156bc <HAL_TIM_PWM_Stop+0x54>
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	4a3f      	ldr	r2, [pc, #252]	; (801578c <HAL_TIM_PWM_Stop+0x124>)
 8015690:	4293      	cmp	r3, r2
 8015692:	d013      	beq.n	80156bc <HAL_TIM_PWM_Stop+0x54>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	4a3d      	ldr	r2, [pc, #244]	; (8015790 <HAL_TIM_PWM_Stop+0x128>)
 801569a:	4293      	cmp	r3, r2
 801569c:	d00e      	beq.n	80156bc <HAL_TIM_PWM_Stop+0x54>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	4a3c      	ldr	r2, [pc, #240]	; (8015794 <HAL_TIM_PWM_Stop+0x12c>)
 80156a4:	4293      	cmp	r3, r2
 80156a6:	d009      	beq.n	80156bc <HAL_TIM_PWM_Stop+0x54>
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	4a3a      	ldr	r2, [pc, #232]	; (8015798 <HAL_TIM_PWM_Stop+0x130>)
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d004      	beq.n	80156bc <HAL_TIM_PWM_Stop+0x54>
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	4a39      	ldr	r2, [pc, #228]	; (801579c <HAL_TIM_PWM_Stop+0x134>)
 80156b8:	4293      	cmp	r3, r2
 80156ba:	d101      	bne.n	80156c0 <HAL_TIM_PWM_Stop+0x58>
 80156bc:	2301      	movs	r3, #1
 80156be:	e000      	b.n	80156c2 <HAL_TIM_PWM_Stop+0x5a>
 80156c0:	2300      	movs	r3, #0
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d017      	beq.n	80156f6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	6a1a      	ldr	r2, [r3, #32]
 80156cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80156d0:	4013      	ands	r3, r2
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d10f      	bne.n	80156f6 <HAL_TIM_PWM_Stop+0x8e>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	6a1a      	ldr	r2, [r3, #32]
 80156dc:	f244 4344 	movw	r3, #17476	; 0x4444
 80156e0:	4013      	ands	r3, r2
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d107      	bne.n	80156f6 <HAL_TIM_PWM_Stop+0x8e>
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80156f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	6a1a      	ldr	r2, [r3, #32]
 80156fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8015700:	4013      	ands	r3, r2
 8015702:	2b00      	cmp	r3, #0
 8015704:	d10f      	bne.n	8015726 <HAL_TIM_PWM_Stop+0xbe>
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	6a1a      	ldr	r2, [r3, #32]
 801570c:	f244 4344 	movw	r3, #17476	; 0x4444
 8015710:	4013      	ands	r3, r2
 8015712:	2b00      	cmp	r3, #0
 8015714:	d107      	bne.n	8015726 <HAL_TIM_PWM_Stop+0xbe>
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	f022 0201 	bic.w	r2, r2, #1
 8015724:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d104      	bne.n	8015736 <HAL_TIM_PWM_Stop+0xce>
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2201      	movs	r2, #1
 8015730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015734:	e023      	b.n	801577e <HAL_TIM_PWM_Stop+0x116>
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	2b04      	cmp	r3, #4
 801573a:	d104      	bne.n	8015746 <HAL_TIM_PWM_Stop+0xde>
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2201      	movs	r2, #1
 8015740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015744:	e01b      	b.n	801577e <HAL_TIM_PWM_Stop+0x116>
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	2b08      	cmp	r3, #8
 801574a:	d104      	bne.n	8015756 <HAL_TIM_PWM_Stop+0xee>
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2201      	movs	r2, #1
 8015750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015754:	e013      	b.n	801577e <HAL_TIM_PWM_Stop+0x116>
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	2b0c      	cmp	r3, #12
 801575a:	d104      	bne.n	8015766 <HAL_TIM_PWM_Stop+0xfe>
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2201      	movs	r2, #1
 8015760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015764:	e00b      	b.n	801577e <HAL_TIM_PWM_Stop+0x116>
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	2b10      	cmp	r3, #16
 801576a:	d104      	bne.n	8015776 <HAL_TIM_PWM_Stop+0x10e>
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2201      	movs	r2, #1
 8015770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015774:	e003      	b.n	801577e <HAL_TIM_PWM_Stop+0x116>
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2201      	movs	r2, #1
 801577a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801577e:	2300      	movs	r3, #0
}
 8015780:	4618      	mov	r0, r3
 8015782:	3708      	adds	r7, #8
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	40012c00 	.word	0x40012c00
 801578c:	40013400 	.word	0x40013400
 8015790:	40014000 	.word	0x40014000
 8015794:	40014400 	.word	0x40014400
 8015798:	40014800 	.word	0x40014800
 801579c:	40015000 	.word	0x40015000

080157a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	691b      	ldr	r3, [r3, #16]
 80157ae:	f003 0302 	and.w	r3, r3, #2
 80157b2:	2b02      	cmp	r3, #2
 80157b4:	d122      	bne.n	80157fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	f003 0302 	and.w	r3, r3, #2
 80157c0:	2b02      	cmp	r3, #2
 80157c2:	d11b      	bne.n	80157fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	f06f 0202 	mvn.w	r2, #2
 80157cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	2201      	movs	r2, #1
 80157d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	699b      	ldr	r3, [r3, #24]
 80157da:	f003 0303 	and.w	r3, r3, #3
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d003      	beq.n	80157ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fa84 	bl	8015cf0 <HAL_TIM_IC_CaptureCallback>
 80157e8:	e005      	b.n	80157f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 fa76 	bl	8015cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f000 fa87 	bl	8015d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2200      	movs	r2, #0
 80157fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	691b      	ldr	r3, [r3, #16]
 8015802:	f003 0304 	and.w	r3, r3, #4
 8015806:	2b04      	cmp	r3, #4
 8015808:	d122      	bne.n	8015850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	f003 0304 	and.w	r3, r3, #4
 8015814:	2b04      	cmp	r3, #4
 8015816:	d11b      	bne.n	8015850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	f06f 0204 	mvn.w	r2, #4
 8015820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	2202      	movs	r2, #2
 8015826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	699b      	ldr	r3, [r3, #24]
 801582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015832:	2b00      	cmp	r3, #0
 8015834:	d003      	beq.n	801583e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f000 fa5a 	bl	8015cf0 <HAL_TIM_IC_CaptureCallback>
 801583c:	e005      	b.n	801584a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f000 fa4c 	bl	8015cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f000 fa5d 	bl	8015d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2200      	movs	r2, #0
 801584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	691b      	ldr	r3, [r3, #16]
 8015856:	f003 0308 	and.w	r3, r3, #8
 801585a:	2b08      	cmp	r3, #8
 801585c:	d122      	bne.n	80158a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	f003 0308 	and.w	r3, r3, #8
 8015868:	2b08      	cmp	r3, #8
 801586a:	d11b      	bne.n	80158a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f06f 0208 	mvn.w	r2, #8
 8015874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2204      	movs	r2, #4
 801587a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	69db      	ldr	r3, [r3, #28]
 8015882:	f003 0303 	and.w	r3, r3, #3
 8015886:	2b00      	cmp	r3, #0
 8015888:	d003      	beq.n	8015892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f000 fa30 	bl	8015cf0 <HAL_TIM_IC_CaptureCallback>
 8015890:	e005      	b.n	801589e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f000 fa22 	bl	8015cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f000 fa33 	bl	8015d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2200      	movs	r2, #0
 80158a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	691b      	ldr	r3, [r3, #16]
 80158aa:	f003 0310 	and.w	r3, r3, #16
 80158ae:	2b10      	cmp	r3, #16
 80158b0:	d122      	bne.n	80158f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	f003 0310 	and.w	r3, r3, #16
 80158bc:	2b10      	cmp	r3, #16
 80158be:	d11b      	bne.n	80158f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	f06f 0210 	mvn.w	r2, #16
 80158c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2208      	movs	r2, #8
 80158ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	69db      	ldr	r3, [r3, #28]
 80158d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d003      	beq.n	80158e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f000 fa06 	bl	8015cf0 <HAL_TIM_IC_CaptureCallback>
 80158e4:	e005      	b.n	80158f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f000 f9f8 	bl	8015cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f000 fa09 	bl	8015d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2200      	movs	r2, #0
 80158f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	691b      	ldr	r3, [r3, #16]
 80158fe:	f003 0301 	and.w	r3, r3, #1
 8015902:	2b01      	cmp	r3, #1
 8015904:	d10e      	bne.n	8015924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	68db      	ldr	r3, [r3, #12]
 801590c:	f003 0301 	and.w	r3, r3, #1
 8015910:	2b01      	cmp	r3, #1
 8015912:	d107      	bne.n	8015924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	f06f 0201 	mvn.w	r2, #1
 801591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f000 f9d2 	bl	8015cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	691b      	ldr	r3, [r3, #16]
 801592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801592e:	2b80      	cmp	r3, #128	; 0x80
 8015930:	d10e      	bne.n	8015950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801593c:	2b80      	cmp	r3, #128	; 0x80
 801593e:	d107      	bne.n	8015950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f000 ff26 	bl	801679c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	691b      	ldr	r3, [r3, #16]
 8015956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801595a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801595e:	d10e      	bne.n	801597e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	68db      	ldr	r3, [r3, #12]
 8015966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801596a:	2b80      	cmp	r3, #128	; 0x80
 801596c:	d107      	bne.n	801597e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f000 ff19 	bl	80167b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	691b      	ldr	r3, [r3, #16]
 8015984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015988:	2b40      	cmp	r3, #64	; 0x40
 801598a:	d10e      	bne.n	80159aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015996:	2b40      	cmp	r3, #64	; 0x40
 8015998:	d107      	bne.n	80159aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80159a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f000 f9b7 	bl	8015d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	691b      	ldr	r3, [r3, #16]
 80159b0:	f003 0320 	and.w	r3, r3, #32
 80159b4:	2b20      	cmp	r3, #32
 80159b6:	d10e      	bne.n	80159d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	f003 0320 	and.w	r3, r3, #32
 80159c2:	2b20      	cmp	r3, #32
 80159c4:	d107      	bne.n	80159d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	f06f 0220 	mvn.w	r2, #32
 80159ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f000 fed9 	bl	8016788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	691b      	ldr	r3, [r3, #16]
 80159dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80159e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80159e4:	d10f      	bne.n	8015a06 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	68db      	ldr	r3, [r3, #12]
 80159ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80159f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80159f4:	d107      	bne.n	8015a06 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80159fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f000 fedf 	bl	80167c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	691b      	ldr	r3, [r3, #16]
 8015a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015a14:	d10f      	bne.n	8015a36 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	68db      	ldr	r3, [r3, #12]
 8015a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015a24:	d107      	bne.n	8015a36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8015a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f000 fed1 	bl	80167d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	691b      	ldr	r3, [r3, #16]
 8015a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015a44:	d10f      	bne.n	8015a66 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015a50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015a54:	d107      	bne.n	8015a66 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8015a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f000 fec3 	bl	80167ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	691b      	ldr	r3, [r3, #16]
 8015a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015a74:	d10f      	bne.n	8015a96 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	68db      	ldr	r3, [r3, #12]
 8015a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015a84:	d107      	bne.n	8015a96 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8015a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 feb5 	bl	8016800 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015a96:	bf00      	nop
 8015a98:	3708      	adds	r7, #8
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
	...

08015aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	60b9      	str	r1, [r7, #8]
 8015aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ab6:	2b01      	cmp	r3, #1
 8015ab8:	d101      	bne.n	8015abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8015aba:	2302      	movs	r3, #2
 8015abc:	e0ff      	b.n	8015cbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2201      	movs	r2, #1
 8015ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2b14      	cmp	r3, #20
 8015aca:	f200 80f0 	bhi.w	8015cae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8015ace:	a201      	add	r2, pc, #4	; (adr r2, 8015ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8015ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ad4:	08015b29 	.word	0x08015b29
 8015ad8:	08015caf 	.word	0x08015caf
 8015adc:	08015caf 	.word	0x08015caf
 8015ae0:	08015caf 	.word	0x08015caf
 8015ae4:	08015b69 	.word	0x08015b69
 8015ae8:	08015caf 	.word	0x08015caf
 8015aec:	08015caf 	.word	0x08015caf
 8015af0:	08015caf 	.word	0x08015caf
 8015af4:	08015bab 	.word	0x08015bab
 8015af8:	08015caf 	.word	0x08015caf
 8015afc:	08015caf 	.word	0x08015caf
 8015b00:	08015caf 	.word	0x08015caf
 8015b04:	08015beb 	.word	0x08015beb
 8015b08:	08015caf 	.word	0x08015caf
 8015b0c:	08015caf 	.word	0x08015caf
 8015b10:	08015caf 	.word	0x08015caf
 8015b14:	08015c2d 	.word	0x08015c2d
 8015b18:	08015caf 	.word	0x08015caf
 8015b1c:	08015caf 	.word	0x08015caf
 8015b20:	08015caf 	.word	0x08015caf
 8015b24:	08015c6d 	.word	0x08015c6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	68b9      	ldr	r1, [r7, #8]
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f000 f99a 	bl	8015e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	699a      	ldr	r2, [r3, #24]
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f042 0208 	orr.w	r2, r2, #8
 8015b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	699a      	ldr	r2, [r3, #24]
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	f022 0204 	bic.w	r2, r2, #4
 8015b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	6999      	ldr	r1, [r3, #24]
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	691a      	ldr	r2, [r3, #16]
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	430a      	orrs	r2, r1
 8015b64:	619a      	str	r2, [r3, #24]
      break;
 8015b66:	e0a5      	b.n	8015cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	68b9      	ldr	r1, [r7, #8]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f000 fa14 	bl	8015f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	699a      	ldr	r2, [r3, #24]
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	699a      	ldr	r2, [r3, #24]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	6999      	ldr	r1, [r3, #24]
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	691b      	ldr	r3, [r3, #16]
 8015b9e:	021a      	lsls	r2, r3, #8
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	430a      	orrs	r2, r1
 8015ba6:	619a      	str	r2, [r3, #24]
      break;
 8015ba8:	e084      	b.n	8015cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	68b9      	ldr	r1, [r7, #8]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f000 fa87 	bl	80160c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	69da      	ldr	r2, [r3, #28]
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	f042 0208 	orr.w	r2, r2, #8
 8015bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	69da      	ldr	r2, [r3, #28]
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	f022 0204 	bic.w	r2, r2, #4
 8015bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	69d9      	ldr	r1, [r3, #28]
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	691a      	ldr	r2, [r3, #16]
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	430a      	orrs	r2, r1
 8015be6:	61da      	str	r2, [r3, #28]
      break;
 8015be8:	e064      	b.n	8015cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	68b9      	ldr	r1, [r7, #8]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f000 faf9 	bl	80161e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	69da      	ldr	r2, [r3, #28]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	69da      	ldr	r2, [r3, #28]
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	69d9      	ldr	r1, [r3, #28]
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	691b      	ldr	r3, [r3, #16]
 8015c20:	021a      	lsls	r2, r3, #8
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	430a      	orrs	r2, r1
 8015c28:	61da      	str	r2, [r3, #28]
      break;
 8015c2a:	e043      	b.n	8015cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	68b9      	ldr	r1, [r7, #8]
 8015c32:	4618      	mov	r0, r3
 8015c34:	f000 fb6c 	bl	8016310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	f042 0208 	orr.w	r2, r2, #8
 8015c46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	f022 0204 	bic.w	r2, r2, #4
 8015c56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	691a      	ldr	r2, [r3, #16]
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	430a      	orrs	r2, r1
 8015c68:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8015c6a:	e023      	b.n	8015cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	68b9      	ldr	r1, [r7, #8]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 fbb6 	bl	80163e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015c86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015c96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	691b      	ldr	r3, [r3, #16]
 8015ca2:	021a      	lsls	r2, r3, #8
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	430a      	orrs	r2, r1
 8015caa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8015cac:	e002      	b.n	8015cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8015cae:	2301      	movs	r3, #1
 8015cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8015cb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3718      	adds	r7, #24
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop

08015cc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015cc8:	b480      	push	{r7}
 8015cca:	b083      	sub	sp, #12
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8015cd0:	bf00      	nop
 8015cd2:	370c      	adds	r7, #12
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr

08015cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b083      	sub	sp, #12
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015ce4:	bf00      	nop
 8015ce6:	370c      	adds	r7, #12
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr

08015cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015cf0:	b480      	push	{r7}
 8015cf2:	b083      	sub	sp, #12
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015cf8:	bf00      	nop
 8015cfa:	370c      	adds	r7, #12
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d02:	4770      	bx	lr

08015d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015d04:	b480      	push	{r7}
 8015d06:	b083      	sub	sp, #12
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015d0c:	bf00      	nop
 8015d0e:	370c      	adds	r7, #12
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr

08015d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015d18:	b480      	push	{r7}
 8015d1a:	b083      	sub	sp, #12
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015d20:	bf00      	nop
 8015d22:	370c      	adds	r7, #12
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr

08015d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015d2c:	b480      	push	{r7}
 8015d2e:	b085      	sub	sp, #20
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	4a42      	ldr	r2, [pc, #264]	; (8015e48 <TIM_Base_SetConfig+0x11c>)
 8015d40:	4293      	cmp	r3, r2
 8015d42:	d013      	beq.n	8015d6c <TIM_Base_SetConfig+0x40>
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d4a:	d00f      	beq.n	8015d6c <TIM_Base_SetConfig+0x40>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	4a3f      	ldr	r2, [pc, #252]	; (8015e4c <TIM_Base_SetConfig+0x120>)
 8015d50:	4293      	cmp	r3, r2
 8015d52:	d00b      	beq.n	8015d6c <TIM_Base_SetConfig+0x40>
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	4a3e      	ldr	r2, [pc, #248]	; (8015e50 <TIM_Base_SetConfig+0x124>)
 8015d58:	4293      	cmp	r3, r2
 8015d5a:	d007      	beq.n	8015d6c <TIM_Base_SetConfig+0x40>
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	4a3d      	ldr	r2, [pc, #244]	; (8015e54 <TIM_Base_SetConfig+0x128>)
 8015d60:	4293      	cmp	r3, r2
 8015d62:	d003      	beq.n	8015d6c <TIM_Base_SetConfig+0x40>
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	4a3c      	ldr	r2, [pc, #240]	; (8015e58 <TIM_Base_SetConfig+0x12c>)
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	d108      	bne.n	8015d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	68fa      	ldr	r2, [r7, #12]
 8015d7a:	4313      	orrs	r3, r2
 8015d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	4a31      	ldr	r2, [pc, #196]	; (8015e48 <TIM_Base_SetConfig+0x11c>)
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d01f      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d8c:	d01b      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	4a2e      	ldr	r2, [pc, #184]	; (8015e4c <TIM_Base_SetConfig+0x120>)
 8015d92:	4293      	cmp	r3, r2
 8015d94:	d017      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	4a2d      	ldr	r2, [pc, #180]	; (8015e50 <TIM_Base_SetConfig+0x124>)
 8015d9a:	4293      	cmp	r3, r2
 8015d9c:	d013      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	4a2c      	ldr	r2, [pc, #176]	; (8015e54 <TIM_Base_SetConfig+0x128>)
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d00f      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	4a2c      	ldr	r2, [pc, #176]	; (8015e5c <TIM_Base_SetConfig+0x130>)
 8015daa:	4293      	cmp	r3, r2
 8015dac:	d00b      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	4a2b      	ldr	r2, [pc, #172]	; (8015e60 <TIM_Base_SetConfig+0x134>)
 8015db2:	4293      	cmp	r3, r2
 8015db4:	d007      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	4a2a      	ldr	r2, [pc, #168]	; (8015e64 <TIM_Base_SetConfig+0x138>)
 8015dba:	4293      	cmp	r3, r2
 8015dbc:	d003      	beq.n	8015dc6 <TIM_Base_SetConfig+0x9a>
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	4a25      	ldr	r2, [pc, #148]	; (8015e58 <TIM_Base_SetConfig+0x12c>)
 8015dc2:	4293      	cmp	r3, r2
 8015dc4:	d108      	bne.n	8015dd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	68db      	ldr	r3, [r3, #12]
 8015dd2:	68fa      	ldr	r2, [r7, #12]
 8015dd4:	4313      	orrs	r3, r2
 8015dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	695b      	ldr	r3, [r3, #20]
 8015de2:	4313      	orrs	r3, r2
 8015de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	68fa      	ldr	r2, [r7, #12]
 8015dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	689a      	ldr	r2, [r3, #8]
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	681a      	ldr	r2, [r3, #0]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	4a12      	ldr	r2, [pc, #72]	; (8015e48 <TIM_Base_SetConfig+0x11c>)
 8015e00:	4293      	cmp	r3, r2
 8015e02:	d013      	beq.n	8015e2c <TIM_Base_SetConfig+0x100>
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	4a13      	ldr	r2, [pc, #76]	; (8015e54 <TIM_Base_SetConfig+0x128>)
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	d00f      	beq.n	8015e2c <TIM_Base_SetConfig+0x100>
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	4a13      	ldr	r2, [pc, #76]	; (8015e5c <TIM_Base_SetConfig+0x130>)
 8015e10:	4293      	cmp	r3, r2
 8015e12:	d00b      	beq.n	8015e2c <TIM_Base_SetConfig+0x100>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	4a12      	ldr	r2, [pc, #72]	; (8015e60 <TIM_Base_SetConfig+0x134>)
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	d007      	beq.n	8015e2c <TIM_Base_SetConfig+0x100>
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	4a11      	ldr	r2, [pc, #68]	; (8015e64 <TIM_Base_SetConfig+0x138>)
 8015e20:	4293      	cmp	r3, r2
 8015e22:	d003      	beq.n	8015e2c <TIM_Base_SetConfig+0x100>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	4a0c      	ldr	r2, [pc, #48]	; (8015e58 <TIM_Base_SetConfig+0x12c>)
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d103      	bne.n	8015e34 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	691a      	ldr	r2, [r3, #16]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2201      	movs	r2, #1
 8015e38:	615a      	str	r2, [r3, #20]
}
 8015e3a:	bf00      	nop
 8015e3c:	3714      	adds	r7, #20
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e44:	4770      	bx	lr
 8015e46:	bf00      	nop
 8015e48:	40012c00 	.word	0x40012c00
 8015e4c:	40000400 	.word	0x40000400
 8015e50:	40000800 	.word	0x40000800
 8015e54:	40013400 	.word	0x40013400
 8015e58:	40015000 	.word	0x40015000
 8015e5c:	40014000 	.word	0x40014000
 8015e60:	40014400 	.word	0x40014400
 8015e64:	40014800 	.word	0x40014800

08015e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015e68:	b480      	push	{r7}
 8015e6a:	b087      	sub	sp, #28
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	6a1b      	ldr	r3, [r3, #32]
 8015e76:	f023 0201 	bic.w	r2, r3, #1
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	6a1b      	ldr	r3, [r3, #32]
 8015e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	685b      	ldr	r3, [r3, #4]
 8015e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	699b      	ldr	r3, [r3, #24]
 8015e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	f023 0303 	bic.w	r3, r3, #3
 8015ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	68fa      	ldr	r2, [r7, #12]
 8015eaa:	4313      	orrs	r3, r2
 8015eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015eae:	697b      	ldr	r3, [r7, #20]
 8015eb0:	f023 0302 	bic.w	r3, r3, #2
 8015eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	689b      	ldr	r3, [r3, #8]
 8015eba:	697a      	ldr	r2, [r7, #20]
 8015ebc:	4313      	orrs	r3, r2
 8015ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	4a30      	ldr	r2, [pc, #192]	; (8015f84 <TIM_OC1_SetConfig+0x11c>)
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d013      	beq.n	8015ef0 <TIM_OC1_SetConfig+0x88>
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	4a2f      	ldr	r2, [pc, #188]	; (8015f88 <TIM_OC1_SetConfig+0x120>)
 8015ecc:	4293      	cmp	r3, r2
 8015ece:	d00f      	beq.n	8015ef0 <TIM_OC1_SetConfig+0x88>
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	4a2e      	ldr	r2, [pc, #184]	; (8015f8c <TIM_OC1_SetConfig+0x124>)
 8015ed4:	4293      	cmp	r3, r2
 8015ed6:	d00b      	beq.n	8015ef0 <TIM_OC1_SetConfig+0x88>
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	4a2d      	ldr	r2, [pc, #180]	; (8015f90 <TIM_OC1_SetConfig+0x128>)
 8015edc:	4293      	cmp	r3, r2
 8015ede:	d007      	beq.n	8015ef0 <TIM_OC1_SetConfig+0x88>
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	4a2c      	ldr	r2, [pc, #176]	; (8015f94 <TIM_OC1_SetConfig+0x12c>)
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d003      	beq.n	8015ef0 <TIM_OC1_SetConfig+0x88>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	4a2b      	ldr	r2, [pc, #172]	; (8015f98 <TIM_OC1_SetConfig+0x130>)
 8015eec:	4293      	cmp	r3, r2
 8015eee:	d10c      	bne.n	8015f0a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015ef0:	697b      	ldr	r3, [r7, #20]
 8015ef2:	f023 0308 	bic.w	r3, r3, #8
 8015ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	697a      	ldr	r2, [r7, #20]
 8015efe:	4313      	orrs	r3, r2
 8015f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015f02:	697b      	ldr	r3, [r7, #20]
 8015f04:	f023 0304 	bic.w	r3, r3, #4
 8015f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	4a1d      	ldr	r2, [pc, #116]	; (8015f84 <TIM_OC1_SetConfig+0x11c>)
 8015f0e:	4293      	cmp	r3, r2
 8015f10:	d013      	beq.n	8015f3a <TIM_OC1_SetConfig+0xd2>
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	4a1c      	ldr	r2, [pc, #112]	; (8015f88 <TIM_OC1_SetConfig+0x120>)
 8015f16:	4293      	cmp	r3, r2
 8015f18:	d00f      	beq.n	8015f3a <TIM_OC1_SetConfig+0xd2>
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	4a1b      	ldr	r2, [pc, #108]	; (8015f8c <TIM_OC1_SetConfig+0x124>)
 8015f1e:	4293      	cmp	r3, r2
 8015f20:	d00b      	beq.n	8015f3a <TIM_OC1_SetConfig+0xd2>
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	4a1a      	ldr	r2, [pc, #104]	; (8015f90 <TIM_OC1_SetConfig+0x128>)
 8015f26:	4293      	cmp	r3, r2
 8015f28:	d007      	beq.n	8015f3a <TIM_OC1_SetConfig+0xd2>
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	4a19      	ldr	r2, [pc, #100]	; (8015f94 <TIM_OC1_SetConfig+0x12c>)
 8015f2e:	4293      	cmp	r3, r2
 8015f30:	d003      	beq.n	8015f3a <TIM_OC1_SetConfig+0xd2>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	4a18      	ldr	r2, [pc, #96]	; (8015f98 <TIM_OC1_SetConfig+0x130>)
 8015f36:	4293      	cmp	r3, r2
 8015f38:	d111      	bne.n	8015f5e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	695b      	ldr	r3, [r3, #20]
 8015f4e:	693a      	ldr	r2, [r7, #16]
 8015f50:	4313      	orrs	r3, r2
 8015f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	699b      	ldr	r3, [r3, #24]
 8015f58:	693a      	ldr	r2, [r7, #16]
 8015f5a:	4313      	orrs	r3, r2
 8015f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	693a      	ldr	r2, [r7, #16]
 8015f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	68fa      	ldr	r2, [r7, #12]
 8015f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	685a      	ldr	r2, [r3, #4]
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	697a      	ldr	r2, [r7, #20]
 8015f76:	621a      	str	r2, [r3, #32]
}
 8015f78:	bf00      	nop
 8015f7a:	371c      	adds	r7, #28
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr
 8015f84:	40012c00 	.word	0x40012c00
 8015f88:	40013400 	.word	0x40013400
 8015f8c:	40014000 	.word	0x40014000
 8015f90:	40014400 	.word	0x40014400
 8015f94:	40014800 	.word	0x40014800
 8015f98:	40015000 	.word	0x40015000

08015f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b087      	sub	sp, #28
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6a1b      	ldr	r3, [r3, #32]
 8015faa:	f023 0210 	bic.w	r2, r3, #16
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6a1b      	ldr	r3, [r3, #32]
 8015fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	685b      	ldr	r3, [r3, #4]
 8015fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	699b      	ldr	r3, [r3, #24]
 8015fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	021b      	lsls	r3, r3, #8
 8015fde:	68fa      	ldr	r2, [r7, #12]
 8015fe0:	4313      	orrs	r3, r2
 8015fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015fe4:	697b      	ldr	r3, [r7, #20]
 8015fe6:	f023 0320 	bic.w	r3, r3, #32
 8015fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	689b      	ldr	r3, [r3, #8]
 8015ff0:	011b      	lsls	r3, r3, #4
 8015ff2:	697a      	ldr	r2, [r7, #20]
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	4a2c      	ldr	r2, [pc, #176]	; (80160ac <TIM_OC2_SetConfig+0x110>)
 8015ffc:	4293      	cmp	r3, r2
 8015ffe:	d007      	beq.n	8016010 <TIM_OC2_SetConfig+0x74>
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	4a2b      	ldr	r2, [pc, #172]	; (80160b0 <TIM_OC2_SetConfig+0x114>)
 8016004:	4293      	cmp	r3, r2
 8016006:	d003      	beq.n	8016010 <TIM_OC2_SetConfig+0x74>
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	4a2a      	ldr	r2, [pc, #168]	; (80160b4 <TIM_OC2_SetConfig+0x118>)
 801600c:	4293      	cmp	r3, r2
 801600e:	d10d      	bne.n	801602c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016018:	683b      	ldr	r3, [r7, #0]
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	011b      	lsls	r3, r3, #4
 801601e:	697a      	ldr	r2, [r7, #20]
 8016020:	4313      	orrs	r3, r2
 8016022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801602a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	4a1f      	ldr	r2, [pc, #124]	; (80160ac <TIM_OC2_SetConfig+0x110>)
 8016030:	4293      	cmp	r3, r2
 8016032:	d013      	beq.n	801605c <TIM_OC2_SetConfig+0xc0>
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	4a1e      	ldr	r2, [pc, #120]	; (80160b0 <TIM_OC2_SetConfig+0x114>)
 8016038:	4293      	cmp	r3, r2
 801603a:	d00f      	beq.n	801605c <TIM_OC2_SetConfig+0xc0>
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	4a1e      	ldr	r2, [pc, #120]	; (80160b8 <TIM_OC2_SetConfig+0x11c>)
 8016040:	4293      	cmp	r3, r2
 8016042:	d00b      	beq.n	801605c <TIM_OC2_SetConfig+0xc0>
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	4a1d      	ldr	r2, [pc, #116]	; (80160bc <TIM_OC2_SetConfig+0x120>)
 8016048:	4293      	cmp	r3, r2
 801604a:	d007      	beq.n	801605c <TIM_OC2_SetConfig+0xc0>
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	4a1c      	ldr	r2, [pc, #112]	; (80160c0 <TIM_OC2_SetConfig+0x124>)
 8016050:	4293      	cmp	r3, r2
 8016052:	d003      	beq.n	801605c <TIM_OC2_SetConfig+0xc0>
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	4a17      	ldr	r2, [pc, #92]	; (80160b4 <TIM_OC2_SetConfig+0x118>)
 8016058:	4293      	cmp	r3, r2
 801605a:	d113      	bne.n	8016084 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801606a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	695b      	ldr	r3, [r3, #20]
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	693a      	ldr	r2, [r7, #16]
 8016074:	4313      	orrs	r3, r2
 8016076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	699b      	ldr	r3, [r3, #24]
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	693a      	ldr	r2, [r7, #16]
 8016080:	4313      	orrs	r3, r2
 8016082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	693a      	ldr	r2, [r7, #16]
 8016088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	68fa      	ldr	r2, [r7, #12]
 801608e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	685a      	ldr	r2, [r3, #4]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	697a      	ldr	r2, [r7, #20]
 801609c:	621a      	str	r2, [r3, #32]
}
 801609e:	bf00      	nop
 80160a0:	371c      	adds	r7, #28
 80160a2:	46bd      	mov	sp, r7
 80160a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a8:	4770      	bx	lr
 80160aa:	bf00      	nop
 80160ac:	40012c00 	.word	0x40012c00
 80160b0:	40013400 	.word	0x40013400
 80160b4:	40015000 	.word	0x40015000
 80160b8:	40014000 	.word	0x40014000
 80160bc:	40014400 	.word	0x40014400
 80160c0:	40014800 	.word	0x40014800

080160c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80160c4:	b480      	push	{r7}
 80160c6:	b087      	sub	sp, #28
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6a1b      	ldr	r3, [r3, #32]
 80160d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6a1b      	ldr	r3, [r3, #32]
 80160de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	685b      	ldr	r3, [r3, #4]
 80160e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	69db      	ldr	r3, [r3, #28]
 80160ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80160f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80160f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	f023 0303 	bic.w	r3, r3, #3
 80160fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	68fa      	ldr	r2, [r7, #12]
 8016106:	4313      	orrs	r3, r2
 8016108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	689b      	ldr	r3, [r3, #8]
 8016116:	021b      	lsls	r3, r3, #8
 8016118:	697a      	ldr	r2, [r7, #20]
 801611a:	4313      	orrs	r3, r2
 801611c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	4a2b      	ldr	r2, [pc, #172]	; (80161d0 <TIM_OC3_SetConfig+0x10c>)
 8016122:	4293      	cmp	r3, r2
 8016124:	d007      	beq.n	8016136 <TIM_OC3_SetConfig+0x72>
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	4a2a      	ldr	r2, [pc, #168]	; (80161d4 <TIM_OC3_SetConfig+0x110>)
 801612a:	4293      	cmp	r3, r2
 801612c:	d003      	beq.n	8016136 <TIM_OC3_SetConfig+0x72>
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	4a29      	ldr	r2, [pc, #164]	; (80161d8 <TIM_OC3_SetConfig+0x114>)
 8016132:	4293      	cmp	r3, r2
 8016134:	d10d      	bne.n	8016152 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016136:	697b      	ldr	r3, [r7, #20]
 8016138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801613c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	68db      	ldr	r3, [r3, #12]
 8016142:	021b      	lsls	r3, r3, #8
 8016144:	697a      	ldr	r2, [r7, #20]
 8016146:	4313      	orrs	r3, r2
 8016148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	4a1e      	ldr	r2, [pc, #120]	; (80161d0 <TIM_OC3_SetConfig+0x10c>)
 8016156:	4293      	cmp	r3, r2
 8016158:	d013      	beq.n	8016182 <TIM_OC3_SetConfig+0xbe>
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	4a1d      	ldr	r2, [pc, #116]	; (80161d4 <TIM_OC3_SetConfig+0x110>)
 801615e:	4293      	cmp	r3, r2
 8016160:	d00f      	beq.n	8016182 <TIM_OC3_SetConfig+0xbe>
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	4a1d      	ldr	r2, [pc, #116]	; (80161dc <TIM_OC3_SetConfig+0x118>)
 8016166:	4293      	cmp	r3, r2
 8016168:	d00b      	beq.n	8016182 <TIM_OC3_SetConfig+0xbe>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	4a1c      	ldr	r2, [pc, #112]	; (80161e0 <TIM_OC3_SetConfig+0x11c>)
 801616e:	4293      	cmp	r3, r2
 8016170:	d007      	beq.n	8016182 <TIM_OC3_SetConfig+0xbe>
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	4a1b      	ldr	r2, [pc, #108]	; (80161e4 <TIM_OC3_SetConfig+0x120>)
 8016176:	4293      	cmp	r3, r2
 8016178:	d003      	beq.n	8016182 <TIM_OC3_SetConfig+0xbe>
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	4a16      	ldr	r2, [pc, #88]	; (80161d8 <TIM_OC3_SetConfig+0x114>)
 801617e:	4293      	cmp	r3, r2
 8016180:	d113      	bne.n	80161aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016182:	693b      	ldr	r3, [r7, #16]
 8016184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801618a:	693b      	ldr	r3, [r7, #16]
 801618c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	695b      	ldr	r3, [r3, #20]
 8016196:	011b      	lsls	r3, r3, #4
 8016198:	693a      	ldr	r2, [r7, #16]
 801619a:	4313      	orrs	r3, r2
 801619c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	699b      	ldr	r3, [r3, #24]
 80161a2:	011b      	lsls	r3, r3, #4
 80161a4:	693a      	ldr	r2, [r7, #16]
 80161a6:	4313      	orrs	r3, r2
 80161a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	693a      	ldr	r2, [r7, #16]
 80161ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	68fa      	ldr	r2, [r7, #12]
 80161b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	685a      	ldr	r2, [r3, #4]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	697a      	ldr	r2, [r7, #20]
 80161c2:	621a      	str	r2, [r3, #32]
}
 80161c4:	bf00      	nop
 80161c6:	371c      	adds	r7, #28
 80161c8:	46bd      	mov	sp, r7
 80161ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ce:	4770      	bx	lr
 80161d0:	40012c00 	.word	0x40012c00
 80161d4:	40013400 	.word	0x40013400
 80161d8:	40015000 	.word	0x40015000
 80161dc:	40014000 	.word	0x40014000
 80161e0:	40014400 	.word	0x40014400
 80161e4:	40014800 	.word	0x40014800

080161e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80161e8:	b480      	push	{r7}
 80161ea:	b087      	sub	sp, #28
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6a1b      	ldr	r3, [r3, #32]
 80161f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6a1b      	ldr	r3, [r3, #32]
 8016202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	69db      	ldr	r3, [r3, #28]
 801620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	021b      	lsls	r3, r3, #8
 801622a:	68fa      	ldr	r2, [r7, #12]
 801622c:	4313      	orrs	r3, r2
 801622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	689b      	ldr	r3, [r3, #8]
 801623c:	031b      	lsls	r3, r3, #12
 801623e:	697a      	ldr	r2, [r7, #20]
 8016240:	4313      	orrs	r3, r2
 8016242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	4a2c      	ldr	r2, [pc, #176]	; (80162f8 <TIM_OC4_SetConfig+0x110>)
 8016248:	4293      	cmp	r3, r2
 801624a:	d007      	beq.n	801625c <TIM_OC4_SetConfig+0x74>
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	4a2b      	ldr	r2, [pc, #172]	; (80162fc <TIM_OC4_SetConfig+0x114>)
 8016250:	4293      	cmp	r3, r2
 8016252:	d003      	beq.n	801625c <TIM_OC4_SetConfig+0x74>
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	4a2a      	ldr	r2, [pc, #168]	; (8016300 <TIM_OC4_SetConfig+0x118>)
 8016258:	4293      	cmp	r3, r2
 801625a:	d10d      	bne.n	8016278 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801625c:	697b      	ldr	r3, [r7, #20]
 801625e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	68db      	ldr	r3, [r3, #12]
 8016268:	031b      	lsls	r3, r3, #12
 801626a:	697a      	ldr	r2, [r7, #20]
 801626c:	4313      	orrs	r3, r2
 801626e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	4a1f      	ldr	r2, [pc, #124]	; (80162f8 <TIM_OC4_SetConfig+0x110>)
 801627c:	4293      	cmp	r3, r2
 801627e:	d013      	beq.n	80162a8 <TIM_OC4_SetConfig+0xc0>
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	4a1e      	ldr	r2, [pc, #120]	; (80162fc <TIM_OC4_SetConfig+0x114>)
 8016284:	4293      	cmp	r3, r2
 8016286:	d00f      	beq.n	80162a8 <TIM_OC4_SetConfig+0xc0>
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	4a1e      	ldr	r2, [pc, #120]	; (8016304 <TIM_OC4_SetConfig+0x11c>)
 801628c:	4293      	cmp	r3, r2
 801628e:	d00b      	beq.n	80162a8 <TIM_OC4_SetConfig+0xc0>
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	4a1d      	ldr	r2, [pc, #116]	; (8016308 <TIM_OC4_SetConfig+0x120>)
 8016294:	4293      	cmp	r3, r2
 8016296:	d007      	beq.n	80162a8 <TIM_OC4_SetConfig+0xc0>
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	4a1c      	ldr	r2, [pc, #112]	; (801630c <TIM_OC4_SetConfig+0x124>)
 801629c:	4293      	cmp	r3, r2
 801629e:	d003      	beq.n	80162a8 <TIM_OC4_SetConfig+0xc0>
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	4a17      	ldr	r2, [pc, #92]	; (8016300 <TIM_OC4_SetConfig+0x118>)
 80162a4:	4293      	cmp	r3, r2
 80162a6:	d113      	bne.n	80162d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80162a8:	693b      	ldr	r3, [r7, #16]
 80162aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80162ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80162b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	695b      	ldr	r3, [r3, #20]
 80162bc:	019b      	lsls	r3, r3, #6
 80162be:	693a      	ldr	r2, [r7, #16]
 80162c0:	4313      	orrs	r3, r2
 80162c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	699b      	ldr	r3, [r3, #24]
 80162c8:	019b      	lsls	r3, r3, #6
 80162ca:	693a      	ldr	r2, [r7, #16]
 80162cc:	4313      	orrs	r3, r2
 80162ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	693a      	ldr	r2, [r7, #16]
 80162d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	68fa      	ldr	r2, [r7, #12]
 80162da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80162dc:	683b      	ldr	r3, [r7, #0]
 80162de:	685a      	ldr	r2, [r3, #4]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	697a      	ldr	r2, [r7, #20]
 80162e8:	621a      	str	r2, [r3, #32]
}
 80162ea:	bf00      	nop
 80162ec:	371c      	adds	r7, #28
 80162ee:	46bd      	mov	sp, r7
 80162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f4:	4770      	bx	lr
 80162f6:	bf00      	nop
 80162f8:	40012c00 	.word	0x40012c00
 80162fc:	40013400 	.word	0x40013400
 8016300:	40015000 	.word	0x40015000
 8016304:	40014000 	.word	0x40014000
 8016308:	40014400 	.word	0x40014400
 801630c:	40014800 	.word	0x40014800

08016310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8016310:	b480      	push	{r7}
 8016312:	b087      	sub	sp, #28
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6a1b      	ldr	r3, [r3, #32]
 801631e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6a1b      	ldr	r3, [r3, #32]
 801632a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801633e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	68fa      	ldr	r2, [r7, #12]
 801634a:	4313      	orrs	r3, r2
 801634c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8016354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	689b      	ldr	r3, [r3, #8]
 801635a:	041b      	lsls	r3, r3, #16
 801635c:	693a      	ldr	r2, [r7, #16]
 801635e:	4313      	orrs	r3, r2
 8016360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	4a19      	ldr	r2, [pc, #100]	; (80163cc <TIM_OC5_SetConfig+0xbc>)
 8016366:	4293      	cmp	r3, r2
 8016368:	d013      	beq.n	8016392 <TIM_OC5_SetConfig+0x82>
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	4a18      	ldr	r2, [pc, #96]	; (80163d0 <TIM_OC5_SetConfig+0xc0>)
 801636e:	4293      	cmp	r3, r2
 8016370:	d00f      	beq.n	8016392 <TIM_OC5_SetConfig+0x82>
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	4a17      	ldr	r2, [pc, #92]	; (80163d4 <TIM_OC5_SetConfig+0xc4>)
 8016376:	4293      	cmp	r3, r2
 8016378:	d00b      	beq.n	8016392 <TIM_OC5_SetConfig+0x82>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	4a16      	ldr	r2, [pc, #88]	; (80163d8 <TIM_OC5_SetConfig+0xc8>)
 801637e:	4293      	cmp	r3, r2
 8016380:	d007      	beq.n	8016392 <TIM_OC5_SetConfig+0x82>
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	4a15      	ldr	r2, [pc, #84]	; (80163dc <TIM_OC5_SetConfig+0xcc>)
 8016386:	4293      	cmp	r3, r2
 8016388:	d003      	beq.n	8016392 <TIM_OC5_SetConfig+0x82>
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	4a14      	ldr	r2, [pc, #80]	; (80163e0 <TIM_OC5_SetConfig+0xd0>)
 801638e:	4293      	cmp	r3, r2
 8016390:	d109      	bne.n	80163a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	695b      	ldr	r3, [r3, #20]
 801639e:	021b      	lsls	r3, r3, #8
 80163a0:	697a      	ldr	r2, [r7, #20]
 80163a2:	4313      	orrs	r3, r2
 80163a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	697a      	ldr	r2, [r7, #20]
 80163aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	68fa      	ldr	r2, [r7, #12]
 80163b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	685a      	ldr	r2, [r3, #4]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	693a      	ldr	r2, [r7, #16]
 80163be:	621a      	str	r2, [r3, #32]
}
 80163c0:	bf00      	nop
 80163c2:	371c      	adds	r7, #28
 80163c4:	46bd      	mov	sp, r7
 80163c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ca:	4770      	bx	lr
 80163cc:	40012c00 	.word	0x40012c00
 80163d0:	40013400 	.word	0x40013400
 80163d4:	40014000 	.word	0x40014000
 80163d8:	40014400 	.word	0x40014400
 80163dc:	40014800 	.word	0x40014800
 80163e0:	40015000 	.word	0x40015000

080163e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80163e4:	b480      	push	{r7}
 80163e6:	b087      	sub	sp, #28
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	6a1b      	ldr	r3, [r3, #32]
 80163f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6a1b      	ldr	r3, [r3, #32]
 80163fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	685b      	ldr	r3, [r3, #4]
 8016404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	021b      	lsls	r3, r3, #8
 801641e:	68fa      	ldr	r2, [r7, #12]
 8016420:	4313      	orrs	r3, r2
 8016422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016424:	693b      	ldr	r3, [r7, #16]
 8016426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801642a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	689b      	ldr	r3, [r3, #8]
 8016430:	051b      	lsls	r3, r3, #20
 8016432:	693a      	ldr	r2, [r7, #16]
 8016434:	4313      	orrs	r3, r2
 8016436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	4a1a      	ldr	r2, [pc, #104]	; (80164a4 <TIM_OC6_SetConfig+0xc0>)
 801643c:	4293      	cmp	r3, r2
 801643e:	d013      	beq.n	8016468 <TIM_OC6_SetConfig+0x84>
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	4a19      	ldr	r2, [pc, #100]	; (80164a8 <TIM_OC6_SetConfig+0xc4>)
 8016444:	4293      	cmp	r3, r2
 8016446:	d00f      	beq.n	8016468 <TIM_OC6_SetConfig+0x84>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	4a18      	ldr	r2, [pc, #96]	; (80164ac <TIM_OC6_SetConfig+0xc8>)
 801644c:	4293      	cmp	r3, r2
 801644e:	d00b      	beq.n	8016468 <TIM_OC6_SetConfig+0x84>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	4a17      	ldr	r2, [pc, #92]	; (80164b0 <TIM_OC6_SetConfig+0xcc>)
 8016454:	4293      	cmp	r3, r2
 8016456:	d007      	beq.n	8016468 <TIM_OC6_SetConfig+0x84>
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	4a16      	ldr	r2, [pc, #88]	; (80164b4 <TIM_OC6_SetConfig+0xd0>)
 801645c:	4293      	cmp	r3, r2
 801645e:	d003      	beq.n	8016468 <TIM_OC6_SetConfig+0x84>
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	4a15      	ldr	r2, [pc, #84]	; (80164b8 <TIM_OC6_SetConfig+0xd4>)
 8016464:	4293      	cmp	r3, r2
 8016466:	d109      	bne.n	801647c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801646e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	695b      	ldr	r3, [r3, #20]
 8016474:	029b      	lsls	r3, r3, #10
 8016476:	697a      	ldr	r2, [r7, #20]
 8016478:	4313      	orrs	r3, r2
 801647a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	697a      	ldr	r2, [r7, #20]
 8016480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	68fa      	ldr	r2, [r7, #12]
 8016486:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	685a      	ldr	r2, [r3, #4]
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	693a      	ldr	r2, [r7, #16]
 8016494:	621a      	str	r2, [r3, #32]
}
 8016496:	bf00      	nop
 8016498:	371c      	adds	r7, #28
 801649a:	46bd      	mov	sp, r7
 801649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop
 80164a4:	40012c00 	.word	0x40012c00
 80164a8:	40013400 	.word	0x40013400
 80164ac:	40014000 	.word	0x40014000
 80164b0:	40014400 	.word	0x40014400
 80164b4:	40014800 	.word	0x40014800
 80164b8:	40015000 	.word	0x40015000

080164bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80164bc:	b480      	push	{r7}
 80164be:	b087      	sub	sp, #28
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	60b9      	str	r1, [r7, #8]
 80164c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	f003 031f 	and.w	r3, r3, #31
 80164ce:	2201      	movs	r2, #1
 80164d0:	fa02 f303 	lsl.w	r3, r2, r3
 80164d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	6a1a      	ldr	r2, [r3, #32]
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	43db      	mvns	r3, r3
 80164de:	401a      	ands	r2, r3
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	6a1a      	ldr	r2, [r3, #32]
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	f003 031f 	and.w	r3, r3, #31
 80164ee:	6879      	ldr	r1, [r7, #4]
 80164f0:	fa01 f303 	lsl.w	r3, r1, r3
 80164f4:	431a      	orrs	r2, r3
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	621a      	str	r2, [r3, #32]
}
 80164fa:	bf00      	nop
 80164fc:	371c      	adds	r7, #28
 80164fe:	46bd      	mov	sp, r7
 8016500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016504:	4770      	bx	lr
	...

08016508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016508:	b480      	push	{r7}
 801650a:	b085      	sub	sp, #20
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016518:	2b01      	cmp	r3, #1
 801651a:	d101      	bne.n	8016520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801651c:	2302      	movs	r3, #2
 801651e:	e06f      	b.n	8016600 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2201      	movs	r2, #1
 8016524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2202      	movs	r2, #2
 801652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	689b      	ldr	r3, [r3, #8]
 801653e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	4a31      	ldr	r2, [pc, #196]	; (801660c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016546:	4293      	cmp	r3, r2
 8016548:	d009      	beq.n	801655e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4a30      	ldr	r2, [pc, #192]	; (8016610 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8016550:	4293      	cmp	r3, r2
 8016552:	d004      	beq.n	801655e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	4a2e      	ldr	r2, [pc, #184]	; (8016614 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801655a:	4293      	cmp	r3, r2
 801655c:	d108      	bne.n	8016570 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8016564:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	685b      	ldr	r3, [r3, #4]
 801656a:	68fa      	ldr	r2, [r7, #12]
 801656c:	4313      	orrs	r3, r2
 801656e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8016576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801657a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	68fa      	ldr	r2, [r7, #12]
 8016582:	4313      	orrs	r3, r2
 8016584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	68fa      	ldr	r2, [r7, #12]
 801658c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	4a1e      	ldr	r2, [pc, #120]	; (801660c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016594:	4293      	cmp	r3, r2
 8016596:	d01d      	beq.n	80165d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80165a0:	d018      	beq.n	80165d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	4a1c      	ldr	r2, [pc, #112]	; (8016618 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80165a8:	4293      	cmp	r3, r2
 80165aa:	d013      	beq.n	80165d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4a1a      	ldr	r2, [pc, #104]	; (801661c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d00e      	beq.n	80165d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	4a15      	ldr	r2, [pc, #84]	; (8016610 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80165bc:	4293      	cmp	r3, r2
 80165be:	d009      	beq.n	80165d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	4a16      	ldr	r2, [pc, #88]	; (8016620 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80165c6:	4293      	cmp	r3, r2
 80165c8:	d004      	beq.n	80165d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	4a11      	ldr	r2, [pc, #68]	; (8016614 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80165d0:	4293      	cmp	r3, r2
 80165d2:	d10c      	bne.n	80165ee <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80165da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	689b      	ldr	r3, [r3, #8]
 80165e0:	68ba      	ldr	r2, [r7, #8]
 80165e2:	4313      	orrs	r3, r2
 80165e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	68ba      	ldr	r2, [r7, #8]
 80165ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	2201      	movs	r2, #1
 80165f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2200      	movs	r2, #0
 80165fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80165fe:	2300      	movs	r3, #0
}
 8016600:	4618      	mov	r0, r3
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr
 801660c:	40012c00 	.word	0x40012c00
 8016610:	40013400 	.word	0x40013400
 8016614:	40015000 	.word	0x40015000
 8016618:	40000400 	.word	0x40000400
 801661c:	40000800 	.word	0x40000800
 8016620:	40014000 	.word	0x40014000

08016624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8016624:	b480      	push	{r7}
 8016626:	b085      	sub	sp, #20
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801662e:	2300      	movs	r3, #0
 8016630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016638:	2b01      	cmp	r3, #1
 801663a:	d101      	bne.n	8016640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801663c:	2302      	movs	r3, #2
 801663e:	e096      	b.n	801676e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2201      	movs	r2, #1
 8016644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	4313      	orrs	r3, r2
 8016654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801665c:	683b      	ldr	r3, [r7, #0]
 801665e:	689b      	ldr	r3, [r3, #8]
 8016660:	4313      	orrs	r3, r2
 8016662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801666a:	683b      	ldr	r3, [r7, #0]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	4313      	orrs	r3, r2
 8016670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	4313      	orrs	r3, r2
 801667e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	691b      	ldr	r3, [r3, #16]
 801668a:	4313      	orrs	r3, r2
 801668c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8016694:	683b      	ldr	r3, [r7, #0]
 8016696:	695b      	ldr	r3, [r3, #20]
 8016698:	4313      	orrs	r3, r2
 801669a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166a6:	4313      	orrs	r3, r2
 80166a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80166b0:	683b      	ldr	r3, [r7, #0]
 80166b2:	699b      	ldr	r3, [r3, #24]
 80166b4:	041b      	lsls	r3, r3, #16
 80166b6:	4313      	orrs	r3, r2
 80166b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	4a2f      	ldr	r2, [pc, #188]	; (801677c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80166c0:	4293      	cmp	r3, r2
 80166c2:	d009      	beq.n	80166d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	4a2d      	ldr	r2, [pc, #180]	; (8016780 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80166ca:	4293      	cmp	r3, r2
 80166cc:	d004      	beq.n	80166d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	4a2c      	ldr	r2, [pc, #176]	; (8016784 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80166d4:	4293      	cmp	r3, r2
 80166d6:	d106      	bne.n	80166e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	69db      	ldr	r3, [r3, #28]
 80166e2:	4313      	orrs	r3, r2
 80166e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4a24      	ldr	r2, [pc, #144]	; (801677c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d009      	beq.n	8016704 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a22      	ldr	r2, [pc, #136]	; (8016780 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d004      	beq.n	8016704 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	4a21      	ldr	r2, [pc, #132]	; (8016784 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8016700:	4293      	cmp	r3, r2
 8016702:	d12b      	bne.n	801675c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801670e:	051b      	lsls	r3, r3, #20
 8016710:	4313      	orrs	r3, r2
 8016712:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	6a1b      	ldr	r3, [r3, #32]
 801671e:	4313      	orrs	r3, r2
 8016720:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8016728:	683b      	ldr	r3, [r7, #0]
 801672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801672c:	4313      	orrs	r3, r2
 801672e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	4a11      	ldr	r2, [pc, #68]	; (801677c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8016736:	4293      	cmp	r3, r2
 8016738:	d009      	beq.n	801674e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	4a10      	ldr	r2, [pc, #64]	; (8016780 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8016740:	4293      	cmp	r3, r2
 8016742:	d004      	beq.n	801674e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	4a0e      	ldr	r2, [pc, #56]	; (8016784 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801674a:	4293      	cmp	r3, r2
 801674c:	d106      	bne.n	801675c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016758:	4313      	orrs	r3, r2
 801675a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	68fa      	ldr	r2, [r7, #12]
 8016762:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2200      	movs	r2, #0
 8016768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801676c:	2300      	movs	r3, #0
}
 801676e:	4618      	mov	r0, r3
 8016770:	3714      	adds	r7, #20
 8016772:	46bd      	mov	sp, r7
 8016774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016778:	4770      	bx	lr
 801677a:	bf00      	nop
 801677c:	40012c00 	.word	0x40012c00
 8016780:	40013400 	.word	0x40013400
 8016784:	40015000 	.word	0x40015000

08016788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016788:	b480      	push	{r7}
 801678a:	b083      	sub	sp, #12
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016790:	bf00      	nop
 8016792:	370c      	adds	r7, #12
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr

0801679c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801679c:	b480      	push	{r7}
 801679e:	b083      	sub	sp, #12
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80167a4:	bf00      	nop
 80167a6:	370c      	adds	r7, #12
 80167a8:	46bd      	mov	sp, r7
 80167aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ae:	4770      	bx	lr

080167b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80167b0:	b480      	push	{r7}
 80167b2:	b083      	sub	sp, #12
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80167b8:	bf00      	nop
 80167ba:	370c      	adds	r7, #12
 80167bc:	46bd      	mov	sp, r7
 80167be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c2:	4770      	bx	lr

080167c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b083      	sub	sp, #12
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80167cc:	bf00      	nop
 80167ce:	370c      	adds	r7, #12
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr

080167d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80167d8:	b480      	push	{r7}
 80167da:	b083      	sub	sp, #12
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80167e0:	bf00      	nop
 80167e2:	370c      	adds	r7, #12
 80167e4:	46bd      	mov	sp, r7
 80167e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ea:	4770      	bx	lr

080167ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80167ec:	b480      	push	{r7}
 80167ee:	b083      	sub	sp, #12
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80167f4:	bf00      	nop
 80167f6:	370c      	adds	r7, #12
 80167f8:	46bd      	mov	sp, r7
 80167fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fe:	4770      	bx	lr

08016800 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8016800:	b480      	push	{r7}
 8016802:	b083      	sub	sp, #12
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8016808:	bf00      	nop
 801680a:	370c      	adds	r7, #12
 801680c:	46bd      	mov	sp, r7
 801680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016812:	4770      	bx	lr

08016814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d101      	bne.n	8016826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016822:	2301      	movs	r3, #1
 8016824:	e042      	b.n	80168ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801682c:	2b00      	cmp	r3, #0
 801682e:	d106      	bne.n	801683e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2200      	movs	r2, #0
 8016834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f7f9 fd53 	bl	80102e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	2224      	movs	r2, #36	; 0x24
 8016842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	681a      	ldr	r2, [r3, #0]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	f022 0201 	bic.w	r2, r2, #1
 8016854:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	f000 f8c2 	bl	80169e0 <UART_SetConfig>
 801685c:	4603      	mov	r3, r0
 801685e:	2b01      	cmp	r3, #1
 8016860:	d101      	bne.n	8016866 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8016862:	2301      	movs	r3, #1
 8016864:	e022      	b.n	80168ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801686a:	2b00      	cmp	r3, #0
 801686c:	d002      	beq.n	8016874 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f000 fbb2 	bl	8016fd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	685a      	ldr	r2, [r3, #4]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	689a      	ldr	r2, [r3, #8]
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	681a      	ldr	r2, [r3, #0]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	f042 0201 	orr.w	r2, r2, #1
 80168a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f000 fc39 	bl	801711c <UART_CheckIdleState>
 80168aa:	4603      	mov	r3, r0
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3708      	adds	r7, #8
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}

080168b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b08a      	sub	sp, #40	; 0x28
 80168b8:	af02      	add	r7, sp, #8
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	603b      	str	r3, [r7, #0]
 80168c0:	4613      	mov	r3, r2
 80168c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168ca:	2b20      	cmp	r3, #32
 80168cc:	f040 8083 	bne.w	80169d6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d002      	beq.n	80168dc <HAL_UART_Transmit+0x28>
 80168d6:	88fb      	ldrh	r3, [r7, #6]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d101      	bne.n	80168e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80168dc:	2301      	movs	r3, #1
 80168de:	e07b      	b.n	80169d8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80168e6:	2b01      	cmp	r3, #1
 80168e8:	d101      	bne.n	80168ee <HAL_UART_Transmit+0x3a>
 80168ea:	2302      	movs	r3, #2
 80168ec:	e074      	b.n	80169d8 <HAL_UART_Transmit+0x124>
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	2201      	movs	r2, #1
 80168f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	2200      	movs	r2, #0
 80168fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	2221      	movs	r2, #33	; 0x21
 8016902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016906:	f7f9 fdd3 	bl	80104b0 <HAL_GetTick>
 801690a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	88fa      	ldrh	r2, [r7, #6]
 8016910:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	88fa      	ldrh	r2, [r7, #6]
 8016918:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	689b      	ldr	r3, [r3, #8]
 8016920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016924:	d108      	bne.n	8016938 <HAL_UART_Transmit+0x84>
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	691b      	ldr	r3, [r3, #16]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d104      	bne.n	8016938 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801692e:	2300      	movs	r3, #0
 8016930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016932:	68bb      	ldr	r3, [r7, #8]
 8016934:	61bb      	str	r3, [r7, #24]
 8016936:	e003      	b.n	8016940 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801693c:	2300      	movs	r3, #0
 801693e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2200      	movs	r2, #0
 8016944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8016948:	e02c      	b.n	80169a4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	9300      	str	r3, [sp, #0]
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	2200      	movs	r2, #0
 8016952:	2180      	movs	r1, #128	; 0x80
 8016954:	68f8      	ldr	r0, [r7, #12]
 8016956:	f000 fc2c 	bl	80171b2 <UART_WaitOnFlagUntilTimeout>
 801695a:	4603      	mov	r3, r0
 801695c:	2b00      	cmp	r3, #0
 801695e:	d001      	beq.n	8016964 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8016960:	2303      	movs	r3, #3
 8016962:	e039      	b.n	80169d8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d10b      	bne.n	8016982 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801696a:	69bb      	ldr	r3, [r7, #24]
 801696c:	881b      	ldrh	r3, [r3, #0]
 801696e:	461a      	mov	r2, r3
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016978:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801697a:	69bb      	ldr	r3, [r7, #24]
 801697c:	3302      	adds	r3, #2
 801697e:	61bb      	str	r3, [r7, #24]
 8016980:	e007      	b.n	8016992 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	781a      	ldrb	r2, [r3, #0]
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	3301      	adds	r3, #1
 8016990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016998:	b29b      	uxth	r3, r3
 801699a:	3b01      	subs	r3, #1
 801699c:	b29a      	uxth	r2, r3
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80169aa:	b29b      	uxth	r3, r3
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d1cc      	bne.n	801694a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	9300      	str	r3, [sp, #0]
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	2200      	movs	r2, #0
 80169b8:	2140      	movs	r1, #64	; 0x40
 80169ba:	68f8      	ldr	r0, [r7, #12]
 80169bc:	f000 fbf9 	bl	80171b2 <UART_WaitOnFlagUntilTimeout>
 80169c0:	4603      	mov	r3, r0
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d001      	beq.n	80169ca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80169c6:	2303      	movs	r3, #3
 80169c8:	e006      	b.n	80169d8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	2220      	movs	r2, #32
 80169ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80169d2:	2300      	movs	r3, #0
 80169d4:	e000      	b.n	80169d8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80169d6:	2302      	movs	r3, #2
  }
}
 80169d8:	4618      	mov	r0, r3
 80169da:	3720      	adds	r7, #32
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd80      	pop	{r7, pc}

080169e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80169e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80169e4:	b08c      	sub	sp, #48	; 0x30
 80169e6:	af00      	add	r7, sp, #0
 80169e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80169ea:	2300      	movs	r3, #0
 80169ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	689a      	ldr	r2, [r3, #8]
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	691b      	ldr	r3, [r3, #16]
 80169f8:	431a      	orrs	r2, r3
 80169fa:	697b      	ldr	r3, [r7, #20]
 80169fc:	695b      	ldr	r3, [r3, #20]
 80169fe:	431a      	orrs	r2, r3
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	69db      	ldr	r3, [r3, #28]
 8016a04:	4313      	orrs	r3, r2
 8016a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016a08:	697b      	ldr	r3, [r7, #20]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	4baa      	ldr	r3, [pc, #680]	; (8016cb8 <UART_SetConfig+0x2d8>)
 8016a10:	4013      	ands	r3, r2
 8016a12:	697a      	ldr	r2, [r7, #20]
 8016a14:	6812      	ldr	r2, [r2, #0]
 8016a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a18:	430b      	orrs	r3, r1
 8016a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	685b      	ldr	r3, [r3, #4]
 8016a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	68da      	ldr	r2, [r3, #12]
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	430a      	orrs	r2, r1
 8016a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016a32:	697b      	ldr	r3, [r7, #20]
 8016a34:	699b      	ldr	r3, [r3, #24]
 8016a36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016a38:	697b      	ldr	r3, [r7, #20]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4a9f      	ldr	r2, [pc, #636]	; (8016cbc <UART_SetConfig+0x2dc>)
 8016a3e:	4293      	cmp	r3, r2
 8016a40:	d004      	beq.n	8016a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016a42:	697b      	ldr	r3, [r7, #20]
 8016a44:	6a1b      	ldr	r3, [r3, #32]
 8016a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	689b      	ldr	r3, [r3, #8]
 8016a52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8016a56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8016a5a:	697a      	ldr	r2, [r7, #20]
 8016a5c:	6812      	ldr	r2, [r2, #0]
 8016a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a60:	430b      	orrs	r3, r1
 8016a62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a6a:	f023 010f 	bic.w	r1, r3, #15
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	430a      	orrs	r2, r1
 8016a78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4a90      	ldr	r2, [pc, #576]	; (8016cc0 <UART_SetConfig+0x2e0>)
 8016a80:	4293      	cmp	r3, r2
 8016a82:	d125      	bne.n	8016ad0 <UART_SetConfig+0xf0>
 8016a84:	4b8f      	ldr	r3, [pc, #572]	; (8016cc4 <UART_SetConfig+0x2e4>)
 8016a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a8a:	f003 0303 	and.w	r3, r3, #3
 8016a8e:	2b03      	cmp	r3, #3
 8016a90:	d81a      	bhi.n	8016ac8 <UART_SetConfig+0xe8>
 8016a92:	a201      	add	r2, pc, #4	; (adr r2, 8016a98 <UART_SetConfig+0xb8>)
 8016a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a98:	08016aa9 	.word	0x08016aa9
 8016a9c:	08016ab9 	.word	0x08016ab9
 8016aa0:	08016ab1 	.word	0x08016ab1
 8016aa4:	08016ac1 	.word	0x08016ac1
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016aae:	e116      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ab0:	2302      	movs	r3, #2
 8016ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016ab6:	e112      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ab8:	2304      	movs	r3, #4
 8016aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016abe:	e10e      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ac0:	2308      	movs	r3, #8
 8016ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016ac6:	e10a      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ac8:	2310      	movs	r3, #16
 8016aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016ace:	e106      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	4a7c      	ldr	r2, [pc, #496]	; (8016cc8 <UART_SetConfig+0x2e8>)
 8016ad6:	4293      	cmp	r3, r2
 8016ad8:	d138      	bne.n	8016b4c <UART_SetConfig+0x16c>
 8016ada:	4b7a      	ldr	r3, [pc, #488]	; (8016cc4 <UART_SetConfig+0x2e4>)
 8016adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016ae0:	f003 030c 	and.w	r3, r3, #12
 8016ae4:	2b0c      	cmp	r3, #12
 8016ae6:	d82d      	bhi.n	8016b44 <UART_SetConfig+0x164>
 8016ae8:	a201      	add	r2, pc, #4	; (adr r2, 8016af0 <UART_SetConfig+0x110>)
 8016aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aee:	bf00      	nop
 8016af0:	08016b25 	.word	0x08016b25
 8016af4:	08016b45 	.word	0x08016b45
 8016af8:	08016b45 	.word	0x08016b45
 8016afc:	08016b45 	.word	0x08016b45
 8016b00:	08016b35 	.word	0x08016b35
 8016b04:	08016b45 	.word	0x08016b45
 8016b08:	08016b45 	.word	0x08016b45
 8016b0c:	08016b45 	.word	0x08016b45
 8016b10:	08016b2d 	.word	0x08016b2d
 8016b14:	08016b45 	.word	0x08016b45
 8016b18:	08016b45 	.word	0x08016b45
 8016b1c:	08016b45 	.word	0x08016b45
 8016b20:	08016b3d 	.word	0x08016b3d
 8016b24:	2300      	movs	r3, #0
 8016b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b2a:	e0d8      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b2c:	2302      	movs	r3, #2
 8016b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b32:	e0d4      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b34:	2304      	movs	r3, #4
 8016b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b3a:	e0d0      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b3c:	2308      	movs	r3, #8
 8016b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b42:	e0cc      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b44:	2310      	movs	r3, #16
 8016b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b4a:	e0c8      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4a5e      	ldr	r2, [pc, #376]	; (8016ccc <UART_SetConfig+0x2ec>)
 8016b52:	4293      	cmp	r3, r2
 8016b54:	d125      	bne.n	8016ba2 <UART_SetConfig+0x1c2>
 8016b56:	4b5b      	ldr	r3, [pc, #364]	; (8016cc4 <UART_SetConfig+0x2e4>)
 8016b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016b60:	2b30      	cmp	r3, #48	; 0x30
 8016b62:	d016      	beq.n	8016b92 <UART_SetConfig+0x1b2>
 8016b64:	2b30      	cmp	r3, #48	; 0x30
 8016b66:	d818      	bhi.n	8016b9a <UART_SetConfig+0x1ba>
 8016b68:	2b20      	cmp	r3, #32
 8016b6a:	d00a      	beq.n	8016b82 <UART_SetConfig+0x1a2>
 8016b6c:	2b20      	cmp	r3, #32
 8016b6e:	d814      	bhi.n	8016b9a <UART_SetConfig+0x1ba>
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d002      	beq.n	8016b7a <UART_SetConfig+0x19a>
 8016b74:	2b10      	cmp	r3, #16
 8016b76:	d008      	beq.n	8016b8a <UART_SetConfig+0x1aa>
 8016b78:	e00f      	b.n	8016b9a <UART_SetConfig+0x1ba>
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b80:	e0ad      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b82:	2302      	movs	r3, #2
 8016b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b88:	e0a9      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b8a:	2304      	movs	r3, #4
 8016b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b90:	e0a5      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b92:	2308      	movs	r3, #8
 8016b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b98:	e0a1      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016b9a:	2310      	movs	r3, #16
 8016b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016ba0:	e09d      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ba2:	697b      	ldr	r3, [r7, #20]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	4a4a      	ldr	r2, [pc, #296]	; (8016cd0 <UART_SetConfig+0x2f0>)
 8016ba8:	4293      	cmp	r3, r2
 8016baa:	d125      	bne.n	8016bf8 <UART_SetConfig+0x218>
 8016bac:	4b45      	ldr	r3, [pc, #276]	; (8016cc4 <UART_SetConfig+0x2e4>)
 8016bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016bb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8016bb8:	d016      	beq.n	8016be8 <UART_SetConfig+0x208>
 8016bba:	2bc0      	cmp	r3, #192	; 0xc0
 8016bbc:	d818      	bhi.n	8016bf0 <UART_SetConfig+0x210>
 8016bbe:	2b80      	cmp	r3, #128	; 0x80
 8016bc0:	d00a      	beq.n	8016bd8 <UART_SetConfig+0x1f8>
 8016bc2:	2b80      	cmp	r3, #128	; 0x80
 8016bc4:	d814      	bhi.n	8016bf0 <UART_SetConfig+0x210>
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d002      	beq.n	8016bd0 <UART_SetConfig+0x1f0>
 8016bca:	2b40      	cmp	r3, #64	; 0x40
 8016bcc:	d008      	beq.n	8016be0 <UART_SetConfig+0x200>
 8016bce:	e00f      	b.n	8016bf0 <UART_SetConfig+0x210>
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016bd6:	e082      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016bd8:	2302      	movs	r3, #2
 8016bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016bde:	e07e      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016be0:	2304      	movs	r3, #4
 8016be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016be6:	e07a      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016be8:	2308      	movs	r3, #8
 8016bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016bee:	e076      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016bf0:	2310      	movs	r3, #16
 8016bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016bf6:	e072      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016bf8:	697b      	ldr	r3, [r7, #20]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	4a35      	ldr	r2, [pc, #212]	; (8016cd4 <UART_SetConfig+0x2f4>)
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	d12a      	bne.n	8016c58 <UART_SetConfig+0x278>
 8016c02:	4b30      	ldr	r3, [pc, #192]	; (8016cc4 <UART_SetConfig+0x2e4>)
 8016c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016c10:	d01a      	beq.n	8016c48 <UART_SetConfig+0x268>
 8016c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016c16:	d81b      	bhi.n	8016c50 <UART_SetConfig+0x270>
 8016c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c1c:	d00c      	beq.n	8016c38 <UART_SetConfig+0x258>
 8016c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c22:	d815      	bhi.n	8016c50 <UART_SetConfig+0x270>
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d003      	beq.n	8016c30 <UART_SetConfig+0x250>
 8016c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c2c:	d008      	beq.n	8016c40 <UART_SetConfig+0x260>
 8016c2e:	e00f      	b.n	8016c50 <UART_SetConfig+0x270>
 8016c30:	2300      	movs	r3, #0
 8016c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c36:	e052      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016c38:	2302      	movs	r3, #2
 8016c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c3e:	e04e      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016c40:	2304      	movs	r3, #4
 8016c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c46:	e04a      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016c48:	2308      	movs	r3, #8
 8016c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c4e:	e046      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016c50:	2310      	movs	r3, #16
 8016c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c56:	e042      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016c58:	697b      	ldr	r3, [r7, #20]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	4a17      	ldr	r2, [pc, #92]	; (8016cbc <UART_SetConfig+0x2dc>)
 8016c5e:	4293      	cmp	r3, r2
 8016c60:	d13a      	bne.n	8016cd8 <UART_SetConfig+0x2f8>
 8016c62:	4b18      	ldr	r3, [pc, #96]	; (8016cc4 <UART_SetConfig+0x2e4>)
 8016c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016c70:	d01a      	beq.n	8016ca8 <UART_SetConfig+0x2c8>
 8016c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016c76:	d81b      	bhi.n	8016cb0 <UART_SetConfig+0x2d0>
 8016c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016c7c:	d00c      	beq.n	8016c98 <UART_SetConfig+0x2b8>
 8016c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016c82:	d815      	bhi.n	8016cb0 <UART_SetConfig+0x2d0>
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d003      	beq.n	8016c90 <UART_SetConfig+0x2b0>
 8016c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c8c:	d008      	beq.n	8016ca0 <UART_SetConfig+0x2c0>
 8016c8e:	e00f      	b.n	8016cb0 <UART_SetConfig+0x2d0>
 8016c90:	2300      	movs	r3, #0
 8016c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c96:	e022      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016c98:	2302      	movs	r3, #2
 8016c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c9e:	e01e      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ca0:	2304      	movs	r3, #4
 8016ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016ca6:	e01a      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016ca8:	2308      	movs	r3, #8
 8016caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016cae:	e016      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016cb0:	2310      	movs	r3, #16
 8016cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016cb6:	e012      	b.n	8016cde <UART_SetConfig+0x2fe>
 8016cb8:	cfff69f3 	.word	0xcfff69f3
 8016cbc:	40008000 	.word	0x40008000
 8016cc0:	40013800 	.word	0x40013800
 8016cc4:	40021000 	.word	0x40021000
 8016cc8:	40004400 	.word	0x40004400
 8016ccc:	40004800 	.word	0x40004800
 8016cd0:	40004c00 	.word	0x40004c00
 8016cd4:	40005000 	.word	0x40005000
 8016cd8:	2310      	movs	r3, #16
 8016cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	4aae      	ldr	r2, [pc, #696]	; (8016f9c <UART_SetConfig+0x5bc>)
 8016ce4:	4293      	cmp	r3, r2
 8016ce6:	f040 8097 	bne.w	8016e18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016cea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016cee:	2b08      	cmp	r3, #8
 8016cf0:	d823      	bhi.n	8016d3a <UART_SetConfig+0x35a>
 8016cf2:	a201      	add	r2, pc, #4	; (adr r2, 8016cf8 <UART_SetConfig+0x318>)
 8016cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cf8:	08016d1d 	.word	0x08016d1d
 8016cfc:	08016d3b 	.word	0x08016d3b
 8016d00:	08016d25 	.word	0x08016d25
 8016d04:	08016d3b 	.word	0x08016d3b
 8016d08:	08016d2b 	.word	0x08016d2b
 8016d0c:	08016d3b 	.word	0x08016d3b
 8016d10:	08016d3b 	.word	0x08016d3b
 8016d14:	08016d3b 	.word	0x08016d3b
 8016d18:	08016d33 	.word	0x08016d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016d1c:	f7fd f8b4 	bl	8013e88 <HAL_RCC_GetPCLK1Freq>
 8016d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016d22:	e010      	b.n	8016d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016d24:	4b9e      	ldr	r3, [pc, #632]	; (8016fa0 <UART_SetConfig+0x5c0>)
 8016d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016d28:	e00d      	b.n	8016d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016d2a:	f7fd f841 	bl	8013db0 <HAL_RCC_GetSysClockFreq>
 8016d2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016d30:	e009      	b.n	8016d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016d38:	e005      	b.n	8016d46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016d44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f000 8130 	beq.w	8016fae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d52:	4a94      	ldr	r2, [pc, #592]	; (8016fa4 <UART_SetConfig+0x5c4>)
 8016d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016d58:	461a      	mov	r2, r3
 8016d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	685a      	ldr	r2, [r3, #4]
 8016d66:	4613      	mov	r3, r2
 8016d68:	005b      	lsls	r3, r3, #1
 8016d6a:	4413      	add	r3, r2
 8016d6c:	69ba      	ldr	r2, [r7, #24]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d305      	bcc.n	8016d7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016d78:	69ba      	ldr	r2, [r7, #24]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d903      	bls.n	8016d86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8016d7e:	2301      	movs	r3, #1
 8016d80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8016d84:	e113      	b.n	8016fae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d88:	2200      	movs	r2, #0
 8016d8a:	60bb      	str	r3, [r7, #8]
 8016d8c:	60fa      	str	r2, [r7, #12]
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d92:	4a84      	ldr	r2, [pc, #528]	; (8016fa4 <UART_SetConfig+0x5c4>)
 8016d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	603b      	str	r3, [r7, #0]
 8016d9e:	607a      	str	r2, [r7, #4]
 8016da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016da4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016da8:	f7e9 ff76 	bl	8000c98 <__aeabi_uldivmod>
 8016dac:	4602      	mov	r2, r0
 8016dae:	460b      	mov	r3, r1
 8016db0:	4610      	mov	r0, r2
 8016db2:	4619      	mov	r1, r3
 8016db4:	f04f 0200 	mov.w	r2, #0
 8016db8:	f04f 0300 	mov.w	r3, #0
 8016dbc:	020b      	lsls	r3, r1, #8
 8016dbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016dc2:	0202      	lsls	r2, r0, #8
 8016dc4:	6979      	ldr	r1, [r7, #20]
 8016dc6:	6849      	ldr	r1, [r1, #4]
 8016dc8:	0849      	lsrs	r1, r1, #1
 8016dca:	2000      	movs	r0, #0
 8016dcc:	460c      	mov	r4, r1
 8016dce:	4605      	mov	r5, r0
 8016dd0:	eb12 0804 	adds.w	r8, r2, r4
 8016dd4:	eb43 0905 	adc.w	r9, r3, r5
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	469a      	mov	sl, r3
 8016de0:	4693      	mov	fp, r2
 8016de2:	4652      	mov	r2, sl
 8016de4:	465b      	mov	r3, fp
 8016de6:	4640      	mov	r0, r8
 8016de8:	4649      	mov	r1, r9
 8016dea:	f7e9 ff55 	bl	8000c98 <__aeabi_uldivmod>
 8016dee:	4602      	mov	r2, r0
 8016df0:	460b      	mov	r3, r1
 8016df2:	4613      	mov	r3, r2
 8016df4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016df6:	6a3b      	ldr	r3, [r7, #32]
 8016df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016dfc:	d308      	bcc.n	8016e10 <UART_SetConfig+0x430>
 8016dfe:	6a3b      	ldr	r3, [r7, #32]
 8016e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016e04:	d204      	bcs.n	8016e10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	6a3a      	ldr	r2, [r7, #32]
 8016e0c:	60da      	str	r2, [r3, #12]
 8016e0e:	e0ce      	b.n	8016fae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8016e10:	2301      	movs	r3, #1
 8016e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8016e16:	e0ca      	b.n	8016fae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016e18:	697b      	ldr	r3, [r7, #20]
 8016e1a:	69db      	ldr	r3, [r3, #28]
 8016e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016e20:	d166      	bne.n	8016ef0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8016e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e26:	2b08      	cmp	r3, #8
 8016e28:	d827      	bhi.n	8016e7a <UART_SetConfig+0x49a>
 8016e2a:	a201      	add	r2, pc, #4	; (adr r2, 8016e30 <UART_SetConfig+0x450>)
 8016e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e30:	08016e55 	.word	0x08016e55
 8016e34:	08016e5d 	.word	0x08016e5d
 8016e38:	08016e65 	.word	0x08016e65
 8016e3c:	08016e7b 	.word	0x08016e7b
 8016e40:	08016e6b 	.word	0x08016e6b
 8016e44:	08016e7b 	.word	0x08016e7b
 8016e48:	08016e7b 	.word	0x08016e7b
 8016e4c:	08016e7b 	.word	0x08016e7b
 8016e50:	08016e73 	.word	0x08016e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016e54:	f7fd f818 	bl	8013e88 <HAL_RCC_GetPCLK1Freq>
 8016e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016e5a:	e014      	b.n	8016e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016e5c:	f7fd f82a 	bl	8013eb4 <HAL_RCC_GetPCLK2Freq>
 8016e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016e62:	e010      	b.n	8016e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016e64:	4b4e      	ldr	r3, [pc, #312]	; (8016fa0 <UART_SetConfig+0x5c0>)
 8016e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016e68:	e00d      	b.n	8016e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016e6a:	f7fc ffa1 	bl	8013db0 <HAL_RCC_GetSysClockFreq>
 8016e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016e70:	e009      	b.n	8016e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016e78:	e005      	b.n	8016e86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8016e7e:	2301      	movs	r3, #1
 8016e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f000 8090 	beq.w	8016fae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e92:	4a44      	ldr	r2, [pc, #272]	; (8016fa4 <UART_SetConfig+0x5c4>)
 8016e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016e98:	461a      	mov	r2, r3
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ea0:	005a      	lsls	r2, r3, #1
 8016ea2:	697b      	ldr	r3, [r7, #20]
 8016ea4:	685b      	ldr	r3, [r3, #4]
 8016ea6:	085b      	lsrs	r3, r3, #1
 8016ea8:	441a      	add	r2, r3
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	685b      	ldr	r3, [r3, #4]
 8016eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8016eb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016eb4:	6a3b      	ldr	r3, [r7, #32]
 8016eb6:	2b0f      	cmp	r3, #15
 8016eb8:	d916      	bls.n	8016ee8 <UART_SetConfig+0x508>
 8016eba:	6a3b      	ldr	r3, [r7, #32]
 8016ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ec0:	d212      	bcs.n	8016ee8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016ec2:	6a3b      	ldr	r3, [r7, #32]
 8016ec4:	b29b      	uxth	r3, r3
 8016ec6:	f023 030f 	bic.w	r3, r3, #15
 8016eca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016ecc:	6a3b      	ldr	r3, [r7, #32]
 8016ece:	085b      	lsrs	r3, r3, #1
 8016ed0:	b29b      	uxth	r3, r3
 8016ed2:	f003 0307 	and.w	r3, r3, #7
 8016ed6:	b29a      	uxth	r2, r3
 8016ed8:	8bfb      	ldrh	r3, [r7, #30]
 8016eda:	4313      	orrs	r3, r2
 8016edc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	8bfa      	ldrh	r2, [r7, #30]
 8016ee4:	60da      	str	r2, [r3, #12]
 8016ee6:	e062      	b.n	8016fae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8016ee8:	2301      	movs	r3, #1
 8016eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8016eee:	e05e      	b.n	8016fae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016ef4:	2b08      	cmp	r3, #8
 8016ef6:	d828      	bhi.n	8016f4a <UART_SetConfig+0x56a>
 8016ef8:	a201      	add	r2, pc, #4	; (adr r2, 8016f00 <UART_SetConfig+0x520>)
 8016efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016efe:	bf00      	nop
 8016f00:	08016f25 	.word	0x08016f25
 8016f04:	08016f2d 	.word	0x08016f2d
 8016f08:	08016f35 	.word	0x08016f35
 8016f0c:	08016f4b 	.word	0x08016f4b
 8016f10:	08016f3b 	.word	0x08016f3b
 8016f14:	08016f4b 	.word	0x08016f4b
 8016f18:	08016f4b 	.word	0x08016f4b
 8016f1c:	08016f4b 	.word	0x08016f4b
 8016f20:	08016f43 	.word	0x08016f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016f24:	f7fc ffb0 	bl	8013e88 <HAL_RCC_GetPCLK1Freq>
 8016f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016f2a:	e014      	b.n	8016f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016f2c:	f7fc ffc2 	bl	8013eb4 <HAL_RCC_GetPCLK2Freq>
 8016f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016f32:	e010      	b.n	8016f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016f34:	4b1a      	ldr	r3, [pc, #104]	; (8016fa0 <UART_SetConfig+0x5c0>)
 8016f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016f38:	e00d      	b.n	8016f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016f3a:	f7fc ff39 	bl	8013db0 <HAL_RCC_GetSysClockFreq>
 8016f3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016f40:	e009      	b.n	8016f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016f48:	e005      	b.n	8016f56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8016f4e:	2301      	movs	r3, #1
 8016f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016f54:	bf00      	nop
    }

    if (pclk != 0U)
 8016f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d028      	beq.n	8016fae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016f5c:	697b      	ldr	r3, [r7, #20]
 8016f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f60:	4a10      	ldr	r2, [pc, #64]	; (8016fa4 <UART_SetConfig+0x5c4>)
 8016f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f66:	461a      	mov	r2, r3
 8016f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	685b      	ldr	r3, [r3, #4]
 8016f72:	085b      	lsrs	r3, r3, #1
 8016f74:	441a      	add	r2, r3
 8016f76:	697b      	ldr	r3, [r7, #20]
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016f80:	6a3b      	ldr	r3, [r7, #32]
 8016f82:	2b0f      	cmp	r3, #15
 8016f84:	d910      	bls.n	8016fa8 <UART_SetConfig+0x5c8>
 8016f86:	6a3b      	ldr	r3, [r7, #32]
 8016f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f8c:	d20c      	bcs.n	8016fa8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016f8e:	6a3b      	ldr	r3, [r7, #32]
 8016f90:	b29a      	uxth	r2, r3
 8016f92:	697b      	ldr	r3, [r7, #20]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	60da      	str	r2, [r3, #12]
 8016f98:	e009      	b.n	8016fae <UART_SetConfig+0x5ce>
 8016f9a:	bf00      	nop
 8016f9c:	40008000 	.word	0x40008000
 8016fa0:	00f42400 	.word	0x00f42400
 8016fa4:	0801a65c 	.word	0x0801a65c
      }
      else
      {
        ret = HAL_ERROR;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	2201      	movs	r2, #1
 8016fb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016fb6:	697b      	ldr	r3, [r7, #20]
 8016fb8:	2201      	movs	r2, #1
 8016fba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8016fca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	3730      	adds	r7, #48	; 0x30
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016fd8:	b480      	push	{r7}
 8016fda:	b083      	sub	sp, #12
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fe4:	f003 0301 	and.w	r3, r3, #1
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d00a      	beq.n	8017002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	685b      	ldr	r3, [r3, #4]
 8016ff2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	430a      	orrs	r2, r1
 8017000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017006:	f003 0302 	and.w	r3, r3, #2
 801700a:	2b00      	cmp	r3, #0
 801700c:	d00a      	beq.n	8017024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	430a      	orrs	r2, r1
 8017022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017028:	f003 0304 	and.w	r3, r3, #4
 801702c:	2b00      	cmp	r3, #0
 801702e:	d00a      	beq.n	8017046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	430a      	orrs	r2, r1
 8017044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801704a:	f003 0308 	and.w	r3, r3, #8
 801704e:	2b00      	cmp	r3, #0
 8017050:	d00a      	beq.n	8017068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	430a      	orrs	r2, r1
 8017066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801706c:	f003 0310 	and.w	r3, r3, #16
 8017070:	2b00      	cmp	r3, #0
 8017072:	d00a      	beq.n	801708a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	689b      	ldr	r3, [r3, #8]
 801707a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	430a      	orrs	r2, r1
 8017088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801708e:	f003 0320 	and.w	r3, r3, #32
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00a      	beq.n	80170ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	689b      	ldr	r3, [r3, #8]
 801709c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	430a      	orrs	r2, r1
 80170aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d01a      	beq.n	80170ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	430a      	orrs	r2, r1
 80170cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80170d6:	d10a      	bne.n	80170ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	685b      	ldr	r3, [r3, #4]
 80170de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	430a      	orrs	r2, r1
 80170ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d00a      	beq.n	8017110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	685b      	ldr	r3, [r3, #4]
 8017100:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	430a      	orrs	r2, r1
 801710e:	605a      	str	r2, [r3, #4]
  }
}
 8017110:	bf00      	nop
 8017112:	370c      	adds	r7, #12
 8017114:	46bd      	mov	sp, r7
 8017116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711a:	4770      	bx	lr

0801711c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b086      	sub	sp, #24
 8017120:	af02      	add	r7, sp, #8
 8017122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2200      	movs	r2, #0
 8017128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801712c:	f7f9 f9c0 	bl	80104b0 <HAL_GetTick>
 8017130:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	f003 0308 	and.w	r3, r3, #8
 801713c:	2b08      	cmp	r3, #8
 801713e:	d10e      	bne.n	801715e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8017144:	9300      	str	r3, [sp, #0]
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	2200      	movs	r2, #0
 801714a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 f82f 	bl	80171b2 <UART_WaitOnFlagUntilTimeout>
 8017154:	4603      	mov	r3, r0
 8017156:	2b00      	cmp	r3, #0
 8017158:	d001      	beq.n	801715e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801715a:	2303      	movs	r3, #3
 801715c:	e025      	b.n	80171aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	f003 0304 	and.w	r3, r3, #4
 8017168:	2b04      	cmp	r3, #4
 801716a:	d10e      	bne.n	801718a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801716c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8017170:	9300      	str	r3, [sp, #0]
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	2200      	movs	r2, #0
 8017176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f000 f819 	bl	80171b2 <UART_WaitOnFlagUntilTimeout>
 8017180:	4603      	mov	r3, r0
 8017182:	2b00      	cmp	r3, #0
 8017184:	d001      	beq.n	801718a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017186:	2303      	movs	r3, #3
 8017188:	e00f      	b.n	80171aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2220      	movs	r2, #32
 801718e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	2220      	movs	r2, #32
 8017196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2200      	movs	r2, #0
 801719e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	2200      	movs	r2, #0
 80171a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80171a8:	2300      	movs	r3, #0
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3710      	adds	r7, #16
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}

080171b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80171b2:	b580      	push	{r7, lr}
 80171b4:	b09c      	sub	sp, #112	; 0x70
 80171b6:	af00      	add	r7, sp, #0
 80171b8:	60f8      	str	r0, [r7, #12]
 80171ba:	60b9      	str	r1, [r7, #8]
 80171bc:	603b      	str	r3, [r7, #0]
 80171be:	4613      	mov	r3, r2
 80171c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80171c2:	e0a9      	b.n	8017318 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80171c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80171c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171ca:	f000 80a5 	beq.w	8017318 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80171ce:	f7f9 f96f 	bl	80104b0 <HAL_GetTick>
 80171d2:	4602      	mov	r2, r0
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	1ad3      	subs	r3, r2, r3
 80171d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80171da:	429a      	cmp	r2, r3
 80171dc:	d302      	bcc.n	80171e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80171de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d140      	bne.n	8017266 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171ec:	e853 3f00 	ldrex	r3, [r3]
 80171f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80171f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80171f8:	667b      	str	r3, [r7, #100]	; 0x64
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	461a      	mov	r2, r3
 8017200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017204:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017206:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017208:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801720a:	e841 2300 	strex	r3, r2, [r1]
 801720e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017212:	2b00      	cmp	r3, #0
 8017214:	d1e6      	bne.n	80171e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	3308      	adds	r3, #8
 801721c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017220:	e853 3f00 	ldrex	r3, [r3]
 8017224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017228:	f023 0301 	bic.w	r3, r3, #1
 801722c:	663b      	str	r3, [r7, #96]	; 0x60
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	3308      	adds	r3, #8
 8017234:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017236:	64ba      	str	r2, [r7, #72]	; 0x48
 8017238:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801723a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801723c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801723e:	e841 2300 	strex	r3, r2, [r1]
 8017242:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017246:	2b00      	cmp	r3, #0
 8017248:	d1e5      	bne.n	8017216 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	2220      	movs	r2, #32
 801724e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2220      	movs	r2, #32
 8017256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	2200      	movs	r2, #0
 801725e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8017262:	2303      	movs	r3, #3
 8017264:	e069      	b.n	801733a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	f003 0304 	and.w	r3, r3, #4
 8017270:	2b00      	cmp	r3, #0
 8017272:	d051      	beq.n	8017318 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	69db      	ldr	r3, [r3, #28]
 801727a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801727e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017282:	d149      	bne.n	8017318 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801728c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017296:	e853 3f00 	ldrex	r3, [r3]
 801729a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801729e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80172a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	461a      	mov	r2, r3
 80172aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172ac:	637b      	str	r3, [r7, #52]	; 0x34
 80172ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80172b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80172b4:	e841 2300 	strex	r3, r2, [r1]
 80172b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80172ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d1e6      	bne.n	801728e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	3308      	adds	r3, #8
 80172c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	e853 3f00 	ldrex	r3, [r3]
 80172ce:	613b      	str	r3, [r7, #16]
   return(result);
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	f023 0301 	bic.w	r3, r3, #1
 80172d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	3308      	adds	r3, #8
 80172de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80172e0:	623a      	str	r2, [r7, #32]
 80172e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172e4:	69f9      	ldr	r1, [r7, #28]
 80172e6:	6a3a      	ldr	r2, [r7, #32]
 80172e8:	e841 2300 	strex	r3, r2, [r1]
 80172ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d1e5      	bne.n	80172c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2220      	movs	r2, #32
 80172f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	2220      	movs	r2, #32
 8017300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	2220      	movs	r2, #32
 8017308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	2200      	movs	r2, #0
 8017310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8017314:	2303      	movs	r3, #3
 8017316:	e010      	b.n	801733a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	69da      	ldr	r2, [r3, #28]
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	4013      	ands	r3, r2
 8017322:	68ba      	ldr	r2, [r7, #8]
 8017324:	429a      	cmp	r2, r3
 8017326:	bf0c      	ite	eq
 8017328:	2301      	moveq	r3, #1
 801732a:	2300      	movne	r3, #0
 801732c:	b2db      	uxtb	r3, r3
 801732e:	461a      	mov	r2, r3
 8017330:	79fb      	ldrb	r3, [r7, #7]
 8017332:	429a      	cmp	r2, r3
 8017334:	f43f af46 	beq.w	80171c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017338:	2300      	movs	r3, #0
}
 801733a:	4618      	mov	r0, r3
 801733c:	3770      	adds	r7, #112	; 0x70
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}

08017342 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017342:	b480      	push	{r7}
 8017344:	b085      	sub	sp, #20
 8017346:	af00      	add	r7, sp, #0
 8017348:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8017350:	2b01      	cmp	r3, #1
 8017352:	d101      	bne.n	8017358 <HAL_UARTEx_DisableFifoMode+0x16>
 8017354:	2302      	movs	r3, #2
 8017356:	e027      	b.n	80173a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2201      	movs	r2, #1
 801735c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	2224      	movs	r2, #36	; 0x24
 8017364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	681a      	ldr	r2, [r3, #0]
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	f022 0201 	bic.w	r2, r2, #1
 801737e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017386:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2200      	movs	r2, #0
 801738c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	68fa      	ldr	r2, [r7, #12]
 8017394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	2220      	movs	r2, #32
 801739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2200      	movs	r2, #0
 80173a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80173a6:	2300      	movs	r3, #0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3714      	adds	r7, #20
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b084      	sub	sp, #16
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80173c4:	2b01      	cmp	r3, #1
 80173c6:	d101      	bne.n	80173cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80173c8:	2302      	movs	r3, #2
 80173ca:	e02d      	b.n	8017428 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2201      	movs	r2, #1
 80173d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	2224      	movs	r2, #36	; 0x24
 80173d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	681a      	ldr	r2, [r3, #0]
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	f022 0201 	bic.w	r2, r2, #1
 80173f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	689b      	ldr	r3, [r3, #8]
 80173fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	683a      	ldr	r2, [r7, #0]
 8017404:	430a      	orrs	r2, r1
 8017406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017408:	6878      	ldr	r0, [r7, #4]
 801740a:	f000 f84f 	bl	80174ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	68fa      	ldr	r2, [r7, #12]
 8017414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2220      	movs	r2, #32
 801741a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	2200      	movs	r2, #0
 8017422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017426:	2300      	movs	r3, #0
}
 8017428:	4618      	mov	r0, r3
 801742a:	3710      	adds	r7, #16
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}

08017430 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b084      	sub	sp, #16
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8017440:	2b01      	cmp	r3, #1
 8017442:	d101      	bne.n	8017448 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017444:	2302      	movs	r3, #2
 8017446:	e02d      	b.n	80174a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2201      	movs	r2, #1
 801744c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2224      	movs	r2, #36	; 0x24
 8017454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	f022 0201 	bic.w	r2, r2, #1
 801746e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	689b      	ldr	r3, [r3, #8]
 8017476:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	683a      	ldr	r2, [r7, #0]
 8017480:	430a      	orrs	r2, r1
 8017482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f000 f811 	bl	80174ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	68fa      	ldr	r2, [r7, #12]
 8017490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	2220      	movs	r2, #32
 8017496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	2200      	movs	r2, #0
 801749e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80174a2:	2300      	movs	r3, #0
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	3710      	adds	r7, #16
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd80      	pop	{r7, pc}

080174ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b085      	sub	sp, #20
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d108      	bne.n	80174ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2201      	movs	r2, #1
 80174c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	2201      	movs	r2, #1
 80174c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80174cc:	e031      	b.n	8017532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80174ce:	2308      	movs	r3, #8
 80174d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80174d2:	2308      	movs	r3, #8
 80174d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	689b      	ldr	r3, [r3, #8]
 80174dc:	0e5b      	lsrs	r3, r3, #25
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	f003 0307 	and.w	r3, r3, #7
 80174e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	689b      	ldr	r3, [r3, #8]
 80174ec:	0f5b      	lsrs	r3, r3, #29
 80174ee:	b2db      	uxtb	r3, r3
 80174f0:	f003 0307 	and.w	r3, r3, #7
 80174f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80174f6:	7bbb      	ldrb	r3, [r7, #14]
 80174f8:	7b3a      	ldrb	r2, [r7, #12]
 80174fa:	4911      	ldr	r1, [pc, #68]	; (8017540 <UARTEx_SetNbDataToProcess+0x94>)
 80174fc:	5c8a      	ldrb	r2, [r1, r2]
 80174fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8017502:	7b3a      	ldrb	r2, [r7, #12]
 8017504:	490f      	ldr	r1, [pc, #60]	; (8017544 <UARTEx_SetNbDataToProcess+0x98>)
 8017506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017508:	fb93 f3f2 	sdiv	r3, r3, r2
 801750c:	b29a      	uxth	r2, r3
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017514:	7bfb      	ldrb	r3, [r7, #15]
 8017516:	7b7a      	ldrb	r2, [r7, #13]
 8017518:	4909      	ldr	r1, [pc, #36]	; (8017540 <UARTEx_SetNbDataToProcess+0x94>)
 801751a:	5c8a      	ldrb	r2, [r1, r2]
 801751c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8017520:	7b7a      	ldrb	r2, [r7, #13]
 8017522:	4908      	ldr	r1, [pc, #32]	; (8017544 <UARTEx_SetNbDataToProcess+0x98>)
 8017524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017526:	fb93 f3f2 	sdiv	r3, r3, r2
 801752a:	b29a      	uxth	r2, r3
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8017532:	bf00      	nop
 8017534:	3714      	adds	r7, #20
 8017536:	46bd      	mov	sp, r7
 8017538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753c:	4770      	bx	lr
 801753e:	bf00      	nop
 8017540:	0801a674 	.word	0x0801a674
 8017544:	0801a67c 	.word	0x0801a67c

08017548 <__errno>:
 8017548:	4b01      	ldr	r3, [pc, #4]	; (8017550 <__errno+0x8>)
 801754a:	6818      	ldr	r0, [r3, #0]
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	2000000c 	.word	0x2000000c

08017554 <__libc_init_array>:
 8017554:	b570      	push	{r4, r5, r6, lr}
 8017556:	4d0d      	ldr	r5, [pc, #52]	; (801758c <__libc_init_array+0x38>)
 8017558:	4c0d      	ldr	r4, [pc, #52]	; (8017590 <__libc_init_array+0x3c>)
 801755a:	1b64      	subs	r4, r4, r5
 801755c:	10a4      	asrs	r4, r4, #2
 801755e:	2600      	movs	r6, #0
 8017560:	42a6      	cmp	r6, r4
 8017562:	d109      	bne.n	8017578 <__libc_init_array+0x24>
 8017564:	4d0b      	ldr	r5, [pc, #44]	; (8017594 <__libc_init_array+0x40>)
 8017566:	4c0c      	ldr	r4, [pc, #48]	; (8017598 <__libc_init_array+0x44>)
 8017568:	f002 ffb0 	bl	801a4cc <_init>
 801756c:	1b64      	subs	r4, r4, r5
 801756e:	10a4      	asrs	r4, r4, #2
 8017570:	2600      	movs	r6, #0
 8017572:	42a6      	cmp	r6, r4
 8017574:	d105      	bne.n	8017582 <__libc_init_array+0x2e>
 8017576:	bd70      	pop	{r4, r5, r6, pc}
 8017578:	f855 3b04 	ldr.w	r3, [r5], #4
 801757c:	4798      	blx	r3
 801757e:	3601      	adds	r6, #1
 8017580:	e7ee      	b.n	8017560 <__libc_init_array+0xc>
 8017582:	f855 3b04 	ldr.w	r3, [r5], #4
 8017586:	4798      	blx	r3
 8017588:	3601      	adds	r6, #1
 801758a:	e7f2      	b.n	8017572 <__libc_init_array+0x1e>
 801758c:	0801aa98 	.word	0x0801aa98
 8017590:	0801aa98 	.word	0x0801aa98
 8017594:	0801aa98 	.word	0x0801aa98
 8017598:	0801aa9c 	.word	0x0801aa9c

0801759c <memcpy>:
 801759c:	440a      	add	r2, r1
 801759e:	4291      	cmp	r1, r2
 80175a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80175a4:	d100      	bne.n	80175a8 <memcpy+0xc>
 80175a6:	4770      	bx	lr
 80175a8:	b510      	push	{r4, lr}
 80175aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80175b2:	4291      	cmp	r1, r2
 80175b4:	d1f9      	bne.n	80175aa <memcpy+0xe>
 80175b6:	bd10      	pop	{r4, pc}

080175b8 <memset>:
 80175b8:	4402      	add	r2, r0
 80175ba:	4603      	mov	r3, r0
 80175bc:	4293      	cmp	r3, r2
 80175be:	d100      	bne.n	80175c2 <memset+0xa>
 80175c0:	4770      	bx	lr
 80175c2:	f803 1b01 	strb.w	r1, [r3], #1
 80175c6:	e7f9      	b.n	80175bc <memset+0x4>

080175c8 <__cvt>:
 80175c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175cc:	ec55 4b10 	vmov	r4, r5, d0
 80175d0:	2d00      	cmp	r5, #0
 80175d2:	460e      	mov	r6, r1
 80175d4:	4619      	mov	r1, r3
 80175d6:	462b      	mov	r3, r5
 80175d8:	bfbb      	ittet	lt
 80175da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80175de:	461d      	movlt	r5, r3
 80175e0:	2300      	movge	r3, #0
 80175e2:	232d      	movlt	r3, #45	; 0x2d
 80175e4:	700b      	strb	r3, [r1, #0]
 80175e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80175ec:	4691      	mov	r9, r2
 80175ee:	f023 0820 	bic.w	r8, r3, #32
 80175f2:	bfbc      	itt	lt
 80175f4:	4622      	movlt	r2, r4
 80175f6:	4614      	movlt	r4, r2
 80175f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80175fc:	d005      	beq.n	801760a <__cvt+0x42>
 80175fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017602:	d100      	bne.n	8017606 <__cvt+0x3e>
 8017604:	3601      	adds	r6, #1
 8017606:	2102      	movs	r1, #2
 8017608:	e000      	b.n	801760c <__cvt+0x44>
 801760a:	2103      	movs	r1, #3
 801760c:	ab03      	add	r3, sp, #12
 801760e:	9301      	str	r3, [sp, #4]
 8017610:	ab02      	add	r3, sp, #8
 8017612:	9300      	str	r3, [sp, #0]
 8017614:	ec45 4b10 	vmov	d0, r4, r5
 8017618:	4653      	mov	r3, sl
 801761a:	4632      	mov	r2, r6
 801761c:	f000 fdb8 	bl	8018190 <_dtoa_r>
 8017620:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017624:	4607      	mov	r7, r0
 8017626:	d102      	bne.n	801762e <__cvt+0x66>
 8017628:	f019 0f01 	tst.w	r9, #1
 801762c:	d022      	beq.n	8017674 <__cvt+0xac>
 801762e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017632:	eb07 0906 	add.w	r9, r7, r6
 8017636:	d110      	bne.n	801765a <__cvt+0x92>
 8017638:	783b      	ldrb	r3, [r7, #0]
 801763a:	2b30      	cmp	r3, #48	; 0x30
 801763c:	d10a      	bne.n	8017654 <__cvt+0x8c>
 801763e:	2200      	movs	r2, #0
 8017640:	2300      	movs	r3, #0
 8017642:	4620      	mov	r0, r4
 8017644:	4629      	mov	r1, r5
 8017646:	f7e9 fa67 	bl	8000b18 <__aeabi_dcmpeq>
 801764a:	b918      	cbnz	r0, 8017654 <__cvt+0x8c>
 801764c:	f1c6 0601 	rsb	r6, r6, #1
 8017650:	f8ca 6000 	str.w	r6, [sl]
 8017654:	f8da 3000 	ldr.w	r3, [sl]
 8017658:	4499      	add	r9, r3
 801765a:	2200      	movs	r2, #0
 801765c:	2300      	movs	r3, #0
 801765e:	4620      	mov	r0, r4
 8017660:	4629      	mov	r1, r5
 8017662:	f7e9 fa59 	bl	8000b18 <__aeabi_dcmpeq>
 8017666:	b108      	cbz	r0, 801766c <__cvt+0xa4>
 8017668:	f8cd 900c 	str.w	r9, [sp, #12]
 801766c:	2230      	movs	r2, #48	; 0x30
 801766e:	9b03      	ldr	r3, [sp, #12]
 8017670:	454b      	cmp	r3, r9
 8017672:	d307      	bcc.n	8017684 <__cvt+0xbc>
 8017674:	9b03      	ldr	r3, [sp, #12]
 8017676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017678:	1bdb      	subs	r3, r3, r7
 801767a:	4638      	mov	r0, r7
 801767c:	6013      	str	r3, [r2, #0]
 801767e:	b004      	add	sp, #16
 8017680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017684:	1c59      	adds	r1, r3, #1
 8017686:	9103      	str	r1, [sp, #12]
 8017688:	701a      	strb	r2, [r3, #0]
 801768a:	e7f0      	b.n	801766e <__cvt+0xa6>

0801768c <__exponent>:
 801768c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801768e:	4603      	mov	r3, r0
 8017690:	2900      	cmp	r1, #0
 8017692:	bfb8      	it	lt
 8017694:	4249      	neglt	r1, r1
 8017696:	f803 2b02 	strb.w	r2, [r3], #2
 801769a:	bfb4      	ite	lt
 801769c:	222d      	movlt	r2, #45	; 0x2d
 801769e:	222b      	movge	r2, #43	; 0x2b
 80176a0:	2909      	cmp	r1, #9
 80176a2:	7042      	strb	r2, [r0, #1]
 80176a4:	dd2a      	ble.n	80176fc <__exponent+0x70>
 80176a6:	f10d 0407 	add.w	r4, sp, #7
 80176aa:	46a4      	mov	ip, r4
 80176ac:	270a      	movs	r7, #10
 80176ae:	46a6      	mov	lr, r4
 80176b0:	460a      	mov	r2, r1
 80176b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80176b6:	fb07 1516 	mls	r5, r7, r6, r1
 80176ba:	3530      	adds	r5, #48	; 0x30
 80176bc:	2a63      	cmp	r2, #99	; 0x63
 80176be:	f104 34ff 	add.w	r4, r4, #4294967295
 80176c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80176c6:	4631      	mov	r1, r6
 80176c8:	dcf1      	bgt.n	80176ae <__exponent+0x22>
 80176ca:	3130      	adds	r1, #48	; 0x30
 80176cc:	f1ae 0502 	sub.w	r5, lr, #2
 80176d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80176d4:	1c44      	adds	r4, r0, #1
 80176d6:	4629      	mov	r1, r5
 80176d8:	4561      	cmp	r1, ip
 80176da:	d30a      	bcc.n	80176f2 <__exponent+0x66>
 80176dc:	f10d 0209 	add.w	r2, sp, #9
 80176e0:	eba2 020e 	sub.w	r2, r2, lr
 80176e4:	4565      	cmp	r5, ip
 80176e6:	bf88      	it	hi
 80176e8:	2200      	movhi	r2, #0
 80176ea:	4413      	add	r3, r2
 80176ec:	1a18      	subs	r0, r3, r0
 80176ee:	b003      	add	sp, #12
 80176f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80176fa:	e7ed      	b.n	80176d8 <__exponent+0x4c>
 80176fc:	2330      	movs	r3, #48	; 0x30
 80176fe:	3130      	adds	r1, #48	; 0x30
 8017700:	7083      	strb	r3, [r0, #2]
 8017702:	70c1      	strb	r1, [r0, #3]
 8017704:	1d03      	adds	r3, r0, #4
 8017706:	e7f1      	b.n	80176ec <__exponent+0x60>

08017708 <_printf_float>:
 8017708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801770c:	ed2d 8b02 	vpush	{d8}
 8017710:	b08d      	sub	sp, #52	; 0x34
 8017712:	460c      	mov	r4, r1
 8017714:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017718:	4616      	mov	r6, r2
 801771a:	461f      	mov	r7, r3
 801771c:	4605      	mov	r5, r0
 801771e:	f001 fcdd 	bl	80190dc <_localeconv_r>
 8017722:	f8d0 a000 	ldr.w	sl, [r0]
 8017726:	4650      	mov	r0, sl
 8017728:	f7e8 fd7a 	bl	8000220 <strlen>
 801772c:	2300      	movs	r3, #0
 801772e:	930a      	str	r3, [sp, #40]	; 0x28
 8017730:	6823      	ldr	r3, [r4, #0]
 8017732:	9305      	str	r3, [sp, #20]
 8017734:	f8d8 3000 	ldr.w	r3, [r8]
 8017738:	f894 b018 	ldrb.w	fp, [r4, #24]
 801773c:	3307      	adds	r3, #7
 801773e:	f023 0307 	bic.w	r3, r3, #7
 8017742:	f103 0208 	add.w	r2, r3, #8
 8017746:	f8c8 2000 	str.w	r2, [r8]
 801774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017752:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017756:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801775a:	9307      	str	r3, [sp, #28]
 801775c:	f8cd 8018 	str.w	r8, [sp, #24]
 8017760:	ee08 0a10 	vmov	s16, r0
 8017764:	4b9f      	ldr	r3, [pc, #636]	; (80179e4 <_printf_float+0x2dc>)
 8017766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801776a:	f04f 32ff 	mov.w	r2, #4294967295
 801776e:	f7e9 fa05 	bl	8000b7c <__aeabi_dcmpun>
 8017772:	bb88      	cbnz	r0, 80177d8 <_printf_float+0xd0>
 8017774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017778:	4b9a      	ldr	r3, [pc, #616]	; (80179e4 <_printf_float+0x2dc>)
 801777a:	f04f 32ff 	mov.w	r2, #4294967295
 801777e:	f7e9 f9df 	bl	8000b40 <__aeabi_dcmple>
 8017782:	bb48      	cbnz	r0, 80177d8 <_printf_float+0xd0>
 8017784:	2200      	movs	r2, #0
 8017786:	2300      	movs	r3, #0
 8017788:	4640      	mov	r0, r8
 801778a:	4649      	mov	r1, r9
 801778c:	f7e9 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 8017790:	b110      	cbz	r0, 8017798 <_printf_float+0x90>
 8017792:	232d      	movs	r3, #45	; 0x2d
 8017794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017798:	4b93      	ldr	r3, [pc, #588]	; (80179e8 <_printf_float+0x2e0>)
 801779a:	4894      	ldr	r0, [pc, #592]	; (80179ec <_printf_float+0x2e4>)
 801779c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80177a0:	bf94      	ite	ls
 80177a2:	4698      	movls	r8, r3
 80177a4:	4680      	movhi	r8, r0
 80177a6:	2303      	movs	r3, #3
 80177a8:	6123      	str	r3, [r4, #16]
 80177aa:	9b05      	ldr	r3, [sp, #20]
 80177ac:	f023 0204 	bic.w	r2, r3, #4
 80177b0:	6022      	str	r2, [r4, #0]
 80177b2:	f04f 0900 	mov.w	r9, #0
 80177b6:	9700      	str	r7, [sp, #0]
 80177b8:	4633      	mov	r3, r6
 80177ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80177bc:	4621      	mov	r1, r4
 80177be:	4628      	mov	r0, r5
 80177c0:	f000 f9d8 	bl	8017b74 <_printf_common>
 80177c4:	3001      	adds	r0, #1
 80177c6:	f040 8090 	bne.w	80178ea <_printf_float+0x1e2>
 80177ca:	f04f 30ff 	mov.w	r0, #4294967295
 80177ce:	b00d      	add	sp, #52	; 0x34
 80177d0:	ecbd 8b02 	vpop	{d8}
 80177d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177d8:	4642      	mov	r2, r8
 80177da:	464b      	mov	r3, r9
 80177dc:	4640      	mov	r0, r8
 80177de:	4649      	mov	r1, r9
 80177e0:	f7e9 f9cc 	bl	8000b7c <__aeabi_dcmpun>
 80177e4:	b140      	cbz	r0, 80177f8 <_printf_float+0xf0>
 80177e6:	464b      	mov	r3, r9
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	bfbc      	itt	lt
 80177ec:	232d      	movlt	r3, #45	; 0x2d
 80177ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80177f2:	487f      	ldr	r0, [pc, #508]	; (80179f0 <_printf_float+0x2e8>)
 80177f4:	4b7f      	ldr	r3, [pc, #508]	; (80179f4 <_printf_float+0x2ec>)
 80177f6:	e7d1      	b.n	801779c <_printf_float+0x94>
 80177f8:	6863      	ldr	r3, [r4, #4]
 80177fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80177fe:	9206      	str	r2, [sp, #24]
 8017800:	1c5a      	adds	r2, r3, #1
 8017802:	d13f      	bne.n	8017884 <_printf_float+0x17c>
 8017804:	2306      	movs	r3, #6
 8017806:	6063      	str	r3, [r4, #4]
 8017808:	9b05      	ldr	r3, [sp, #20]
 801780a:	6861      	ldr	r1, [r4, #4]
 801780c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017810:	2300      	movs	r3, #0
 8017812:	9303      	str	r3, [sp, #12]
 8017814:	ab0a      	add	r3, sp, #40	; 0x28
 8017816:	e9cd b301 	strd	fp, r3, [sp, #4]
 801781a:	ab09      	add	r3, sp, #36	; 0x24
 801781c:	ec49 8b10 	vmov	d0, r8, r9
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	6022      	str	r2, [r4, #0]
 8017824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017828:	4628      	mov	r0, r5
 801782a:	f7ff fecd 	bl	80175c8 <__cvt>
 801782e:	9b06      	ldr	r3, [sp, #24]
 8017830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017832:	2b47      	cmp	r3, #71	; 0x47
 8017834:	4680      	mov	r8, r0
 8017836:	d108      	bne.n	801784a <_printf_float+0x142>
 8017838:	1cc8      	adds	r0, r1, #3
 801783a:	db02      	blt.n	8017842 <_printf_float+0x13a>
 801783c:	6863      	ldr	r3, [r4, #4]
 801783e:	4299      	cmp	r1, r3
 8017840:	dd41      	ble.n	80178c6 <_printf_float+0x1be>
 8017842:	f1ab 0b02 	sub.w	fp, fp, #2
 8017846:	fa5f fb8b 	uxtb.w	fp, fp
 801784a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801784e:	d820      	bhi.n	8017892 <_printf_float+0x18a>
 8017850:	3901      	subs	r1, #1
 8017852:	465a      	mov	r2, fp
 8017854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017858:	9109      	str	r1, [sp, #36]	; 0x24
 801785a:	f7ff ff17 	bl	801768c <__exponent>
 801785e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017860:	1813      	adds	r3, r2, r0
 8017862:	2a01      	cmp	r2, #1
 8017864:	4681      	mov	r9, r0
 8017866:	6123      	str	r3, [r4, #16]
 8017868:	dc02      	bgt.n	8017870 <_printf_float+0x168>
 801786a:	6822      	ldr	r2, [r4, #0]
 801786c:	07d2      	lsls	r2, r2, #31
 801786e:	d501      	bpl.n	8017874 <_printf_float+0x16c>
 8017870:	3301      	adds	r3, #1
 8017872:	6123      	str	r3, [r4, #16]
 8017874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017878:	2b00      	cmp	r3, #0
 801787a:	d09c      	beq.n	80177b6 <_printf_float+0xae>
 801787c:	232d      	movs	r3, #45	; 0x2d
 801787e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017882:	e798      	b.n	80177b6 <_printf_float+0xae>
 8017884:	9a06      	ldr	r2, [sp, #24]
 8017886:	2a47      	cmp	r2, #71	; 0x47
 8017888:	d1be      	bne.n	8017808 <_printf_float+0x100>
 801788a:	2b00      	cmp	r3, #0
 801788c:	d1bc      	bne.n	8017808 <_printf_float+0x100>
 801788e:	2301      	movs	r3, #1
 8017890:	e7b9      	b.n	8017806 <_printf_float+0xfe>
 8017892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017896:	d118      	bne.n	80178ca <_printf_float+0x1c2>
 8017898:	2900      	cmp	r1, #0
 801789a:	6863      	ldr	r3, [r4, #4]
 801789c:	dd0b      	ble.n	80178b6 <_printf_float+0x1ae>
 801789e:	6121      	str	r1, [r4, #16]
 80178a0:	b913      	cbnz	r3, 80178a8 <_printf_float+0x1a0>
 80178a2:	6822      	ldr	r2, [r4, #0]
 80178a4:	07d0      	lsls	r0, r2, #31
 80178a6:	d502      	bpl.n	80178ae <_printf_float+0x1a6>
 80178a8:	3301      	adds	r3, #1
 80178aa:	440b      	add	r3, r1
 80178ac:	6123      	str	r3, [r4, #16]
 80178ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80178b0:	f04f 0900 	mov.w	r9, #0
 80178b4:	e7de      	b.n	8017874 <_printf_float+0x16c>
 80178b6:	b913      	cbnz	r3, 80178be <_printf_float+0x1b6>
 80178b8:	6822      	ldr	r2, [r4, #0]
 80178ba:	07d2      	lsls	r2, r2, #31
 80178bc:	d501      	bpl.n	80178c2 <_printf_float+0x1ba>
 80178be:	3302      	adds	r3, #2
 80178c0:	e7f4      	b.n	80178ac <_printf_float+0x1a4>
 80178c2:	2301      	movs	r3, #1
 80178c4:	e7f2      	b.n	80178ac <_printf_float+0x1a4>
 80178c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80178ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178cc:	4299      	cmp	r1, r3
 80178ce:	db05      	blt.n	80178dc <_printf_float+0x1d4>
 80178d0:	6823      	ldr	r3, [r4, #0]
 80178d2:	6121      	str	r1, [r4, #16]
 80178d4:	07d8      	lsls	r0, r3, #31
 80178d6:	d5ea      	bpl.n	80178ae <_printf_float+0x1a6>
 80178d8:	1c4b      	adds	r3, r1, #1
 80178da:	e7e7      	b.n	80178ac <_printf_float+0x1a4>
 80178dc:	2900      	cmp	r1, #0
 80178de:	bfd4      	ite	le
 80178e0:	f1c1 0202 	rsble	r2, r1, #2
 80178e4:	2201      	movgt	r2, #1
 80178e6:	4413      	add	r3, r2
 80178e8:	e7e0      	b.n	80178ac <_printf_float+0x1a4>
 80178ea:	6823      	ldr	r3, [r4, #0]
 80178ec:	055a      	lsls	r2, r3, #21
 80178ee:	d407      	bmi.n	8017900 <_printf_float+0x1f8>
 80178f0:	6923      	ldr	r3, [r4, #16]
 80178f2:	4642      	mov	r2, r8
 80178f4:	4631      	mov	r1, r6
 80178f6:	4628      	mov	r0, r5
 80178f8:	47b8      	blx	r7
 80178fa:	3001      	adds	r0, #1
 80178fc:	d12c      	bne.n	8017958 <_printf_float+0x250>
 80178fe:	e764      	b.n	80177ca <_printf_float+0xc2>
 8017900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017904:	f240 80e0 	bls.w	8017ac8 <_printf_float+0x3c0>
 8017908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801790c:	2200      	movs	r2, #0
 801790e:	2300      	movs	r3, #0
 8017910:	f7e9 f902 	bl	8000b18 <__aeabi_dcmpeq>
 8017914:	2800      	cmp	r0, #0
 8017916:	d034      	beq.n	8017982 <_printf_float+0x27a>
 8017918:	4a37      	ldr	r2, [pc, #220]	; (80179f8 <_printf_float+0x2f0>)
 801791a:	2301      	movs	r3, #1
 801791c:	4631      	mov	r1, r6
 801791e:	4628      	mov	r0, r5
 8017920:	47b8      	blx	r7
 8017922:	3001      	adds	r0, #1
 8017924:	f43f af51 	beq.w	80177ca <_printf_float+0xc2>
 8017928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801792c:	429a      	cmp	r2, r3
 801792e:	db02      	blt.n	8017936 <_printf_float+0x22e>
 8017930:	6823      	ldr	r3, [r4, #0]
 8017932:	07d8      	lsls	r0, r3, #31
 8017934:	d510      	bpl.n	8017958 <_printf_float+0x250>
 8017936:	ee18 3a10 	vmov	r3, s16
 801793a:	4652      	mov	r2, sl
 801793c:	4631      	mov	r1, r6
 801793e:	4628      	mov	r0, r5
 8017940:	47b8      	blx	r7
 8017942:	3001      	adds	r0, #1
 8017944:	f43f af41 	beq.w	80177ca <_printf_float+0xc2>
 8017948:	f04f 0800 	mov.w	r8, #0
 801794c:	f104 091a 	add.w	r9, r4, #26
 8017950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017952:	3b01      	subs	r3, #1
 8017954:	4543      	cmp	r3, r8
 8017956:	dc09      	bgt.n	801796c <_printf_float+0x264>
 8017958:	6823      	ldr	r3, [r4, #0]
 801795a:	079b      	lsls	r3, r3, #30
 801795c:	f100 8105 	bmi.w	8017b6a <_printf_float+0x462>
 8017960:	68e0      	ldr	r0, [r4, #12]
 8017962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017964:	4298      	cmp	r0, r3
 8017966:	bfb8      	it	lt
 8017968:	4618      	movlt	r0, r3
 801796a:	e730      	b.n	80177ce <_printf_float+0xc6>
 801796c:	2301      	movs	r3, #1
 801796e:	464a      	mov	r2, r9
 8017970:	4631      	mov	r1, r6
 8017972:	4628      	mov	r0, r5
 8017974:	47b8      	blx	r7
 8017976:	3001      	adds	r0, #1
 8017978:	f43f af27 	beq.w	80177ca <_printf_float+0xc2>
 801797c:	f108 0801 	add.w	r8, r8, #1
 8017980:	e7e6      	b.n	8017950 <_printf_float+0x248>
 8017982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017984:	2b00      	cmp	r3, #0
 8017986:	dc39      	bgt.n	80179fc <_printf_float+0x2f4>
 8017988:	4a1b      	ldr	r2, [pc, #108]	; (80179f8 <_printf_float+0x2f0>)
 801798a:	2301      	movs	r3, #1
 801798c:	4631      	mov	r1, r6
 801798e:	4628      	mov	r0, r5
 8017990:	47b8      	blx	r7
 8017992:	3001      	adds	r0, #1
 8017994:	f43f af19 	beq.w	80177ca <_printf_float+0xc2>
 8017998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801799c:	4313      	orrs	r3, r2
 801799e:	d102      	bne.n	80179a6 <_printf_float+0x29e>
 80179a0:	6823      	ldr	r3, [r4, #0]
 80179a2:	07d9      	lsls	r1, r3, #31
 80179a4:	d5d8      	bpl.n	8017958 <_printf_float+0x250>
 80179a6:	ee18 3a10 	vmov	r3, s16
 80179aa:	4652      	mov	r2, sl
 80179ac:	4631      	mov	r1, r6
 80179ae:	4628      	mov	r0, r5
 80179b0:	47b8      	blx	r7
 80179b2:	3001      	adds	r0, #1
 80179b4:	f43f af09 	beq.w	80177ca <_printf_float+0xc2>
 80179b8:	f04f 0900 	mov.w	r9, #0
 80179bc:	f104 0a1a 	add.w	sl, r4, #26
 80179c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179c2:	425b      	negs	r3, r3
 80179c4:	454b      	cmp	r3, r9
 80179c6:	dc01      	bgt.n	80179cc <_printf_float+0x2c4>
 80179c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179ca:	e792      	b.n	80178f2 <_printf_float+0x1ea>
 80179cc:	2301      	movs	r3, #1
 80179ce:	4652      	mov	r2, sl
 80179d0:	4631      	mov	r1, r6
 80179d2:	4628      	mov	r0, r5
 80179d4:	47b8      	blx	r7
 80179d6:	3001      	adds	r0, #1
 80179d8:	f43f aef7 	beq.w	80177ca <_printf_float+0xc2>
 80179dc:	f109 0901 	add.w	r9, r9, #1
 80179e0:	e7ee      	b.n	80179c0 <_printf_float+0x2b8>
 80179e2:	bf00      	nop
 80179e4:	7fefffff 	.word	0x7fefffff
 80179e8:	0801a688 	.word	0x0801a688
 80179ec:	0801a68c 	.word	0x0801a68c
 80179f0:	0801a694 	.word	0x0801a694
 80179f4:	0801a690 	.word	0x0801a690
 80179f8:	0801a698 	.word	0x0801a698
 80179fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017a00:	429a      	cmp	r2, r3
 8017a02:	bfa8      	it	ge
 8017a04:	461a      	movge	r2, r3
 8017a06:	2a00      	cmp	r2, #0
 8017a08:	4691      	mov	r9, r2
 8017a0a:	dc37      	bgt.n	8017a7c <_printf_float+0x374>
 8017a0c:	f04f 0b00 	mov.w	fp, #0
 8017a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a14:	f104 021a 	add.w	r2, r4, #26
 8017a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017a1a:	9305      	str	r3, [sp, #20]
 8017a1c:	eba3 0309 	sub.w	r3, r3, r9
 8017a20:	455b      	cmp	r3, fp
 8017a22:	dc33      	bgt.n	8017a8c <_printf_float+0x384>
 8017a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	db3b      	blt.n	8017aa4 <_printf_float+0x39c>
 8017a2c:	6823      	ldr	r3, [r4, #0]
 8017a2e:	07da      	lsls	r2, r3, #31
 8017a30:	d438      	bmi.n	8017aa4 <_printf_float+0x39c>
 8017a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a34:	9a05      	ldr	r2, [sp, #20]
 8017a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017a38:	1a9a      	subs	r2, r3, r2
 8017a3a:	eba3 0901 	sub.w	r9, r3, r1
 8017a3e:	4591      	cmp	r9, r2
 8017a40:	bfa8      	it	ge
 8017a42:	4691      	movge	r9, r2
 8017a44:	f1b9 0f00 	cmp.w	r9, #0
 8017a48:	dc35      	bgt.n	8017ab6 <_printf_float+0x3ae>
 8017a4a:	f04f 0800 	mov.w	r8, #0
 8017a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a52:	f104 0a1a 	add.w	sl, r4, #26
 8017a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017a5a:	1a9b      	subs	r3, r3, r2
 8017a5c:	eba3 0309 	sub.w	r3, r3, r9
 8017a60:	4543      	cmp	r3, r8
 8017a62:	f77f af79 	ble.w	8017958 <_printf_float+0x250>
 8017a66:	2301      	movs	r3, #1
 8017a68:	4652      	mov	r2, sl
 8017a6a:	4631      	mov	r1, r6
 8017a6c:	4628      	mov	r0, r5
 8017a6e:	47b8      	blx	r7
 8017a70:	3001      	adds	r0, #1
 8017a72:	f43f aeaa 	beq.w	80177ca <_printf_float+0xc2>
 8017a76:	f108 0801 	add.w	r8, r8, #1
 8017a7a:	e7ec      	b.n	8017a56 <_printf_float+0x34e>
 8017a7c:	4613      	mov	r3, r2
 8017a7e:	4631      	mov	r1, r6
 8017a80:	4642      	mov	r2, r8
 8017a82:	4628      	mov	r0, r5
 8017a84:	47b8      	blx	r7
 8017a86:	3001      	adds	r0, #1
 8017a88:	d1c0      	bne.n	8017a0c <_printf_float+0x304>
 8017a8a:	e69e      	b.n	80177ca <_printf_float+0xc2>
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	4631      	mov	r1, r6
 8017a90:	4628      	mov	r0, r5
 8017a92:	9205      	str	r2, [sp, #20]
 8017a94:	47b8      	blx	r7
 8017a96:	3001      	adds	r0, #1
 8017a98:	f43f ae97 	beq.w	80177ca <_printf_float+0xc2>
 8017a9c:	9a05      	ldr	r2, [sp, #20]
 8017a9e:	f10b 0b01 	add.w	fp, fp, #1
 8017aa2:	e7b9      	b.n	8017a18 <_printf_float+0x310>
 8017aa4:	ee18 3a10 	vmov	r3, s16
 8017aa8:	4652      	mov	r2, sl
 8017aaa:	4631      	mov	r1, r6
 8017aac:	4628      	mov	r0, r5
 8017aae:	47b8      	blx	r7
 8017ab0:	3001      	adds	r0, #1
 8017ab2:	d1be      	bne.n	8017a32 <_printf_float+0x32a>
 8017ab4:	e689      	b.n	80177ca <_printf_float+0xc2>
 8017ab6:	9a05      	ldr	r2, [sp, #20]
 8017ab8:	464b      	mov	r3, r9
 8017aba:	4442      	add	r2, r8
 8017abc:	4631      	mov	r1, r6
 8017abe:	4628      	mov	r0, r5
 8017ac0:	47b8      	blx	r7
 8017ac2:	3001      	adds	r0, #1
 8017ac4:	d1c1      	bne.n	8017a4a <_printf_float+0x342>
 8017ac6:	e680      	b.n	80177ca <_printf_float+0xc2>
 8017ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017aca:	2a01      	cmp	r2, #1
 8017acc:	dc01      	bgt.n	8017ad2 <_printf_float+0x3ca>
 8017ace:	07db      	lsls	r3, r3, #31
 8017ad0:	d538      	bpl.n	8017b44 <_printf_float+0x43c>
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	4642      	mov	r2, r8
 8017ad6:	4631      	mov	r1, r6
 8017ad8:	4628      	mov	r0, r5
 8017ada:	47b8      	blx	r7
 8017adc:	3001      	adds	r0, #1
 8017ade:	f43f ae74 	beq.w	80177ca <_printf_float+0xc2>
 8017ae2:	ee18 3a10 	vmov	r3, s16
 8017ae6:	4652      	mov	r2, sl
 8017ae8:	4631      	mov	r1, r6
 8017aea:	4628      	mov	r0, r5
 8017aec:	47b8      	blx	r7
 8017aee:	3001      	adds	r0, #1
 8017af0:	f43f ae6b 	beq.w	80177ca <_printf_float+0xc2>
 8017af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017af8:	2200      	movs	r2, #0
 8017afa:	2300      	movs	r3, #0
 8017afc:	f7e9 f80c 	bl	8000b18 <__aeabi_dcmpeq>
 8017b00:	b9d8      	cbnz	r0, 8017b3a <_printf_float+0x432>
 8017b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b04:	f108 0201 	add.w	r2, r8, #1
 8017b08:	3b01      	subs	r3, #1
 8017b0a:	4631      	mov	r1, r6
 8017b0c:	4628      	mov	r0, r5
 8017b0e:	47b8      	blx	r7
 8017b10:	3001      	adds	r0, #1
 8017b12:	d10e      	bne.n	8017b32 <_printf_float+0x42a>
 8017b14:	e659      	b.n	80177ca <_printf_float+0xc2>
 8017b16:	2301      	movs	r3, #1
 8017b18:	4652      	mov	r2, sl
 8017b1a:	4631      	mov	r1, r6
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	47b8      	blx	r7
 8017b20:	3001      	adds	r0, #1
 8017b22:	f43f ae52 	beq.w	80177ca <_printf_float+0xc2>
 8017b26:	f108 0801 	add.w	r8, r8, #1
 8017b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b2c:	3b01      	subs	r3, #1
 8017b2e:	4543      	cmp	r3, r8
 8017b30:	dcf1      	bgt.n	8017b16 <_printf_float+0x40e>
 8017b32:	464b      	mov	r3, r9
 8017b34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017b38:	e6dc      	b.n	80178f4 <_printf_float+0x1ec>
 8017b3a:	f04f 0800 	mov.w	r8, #0
 8017b3e:	f104 0a1a 	add.w	sl, r4, #26
 8017b42:	e7f2      	b.n	8017b2a <_printf_float+0x422>
 8017b44:	2301      	movs	r3, #1
 8017b46:	4642      	mov	r2, r8
 8017b48:	e7df      	b.n	8017b0a <_printf_float+0x402>
 8017b4a:	2301      	movs	r3, #1
 8017b4c:	464a      	mov	r2, r9
 8017b4e:	4631      	mov	r1, r6
 8017b50:	4628      	mov	r0, r5
 8017b52:	47b8      	blx	r7
 8017b54:	3001      	adds	r0, #1
 8017b56:	f43f ae38 	beq.w	80177ca <_printf_float+0xc2>
 8017b5a:	f108 0801 	add.w	r8, r8, #1
 8017b5e:	68e3      	ldr	r3, [r4, #12]
 8017b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b62:	1a5b      	subs	r3, r3, r1
 8017b64:	4543      	cmp	r3, r8
 8017b66:	dcf0      	bgt.n	8017b4a <_printf_float+0x442>
 8017b68:	e6fa      	b.n	8017960 <_printf_float+0x258>
 8017b6a:	f04f 0800 	mov.w	r8, #0
 8017b6e:	f104 0919 	add.w	r9, r4, #25
 8017b72:	e7f4      	b.n	8017b5e <_printf_float+0x456>

08017b74 <_printf_common>:
 8017b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b78:	4616      	mov	r6, r2
 8017b7a:	4699      	mov	r9, r3
 8017b7c:	688a      	ldr	r2, [r1, #8]
 8017b7e:	690b      	ldr	r3, [r1, #16]
 8017b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017b84:	4293      	cmp	r3, r2
 8017b86:	bfb8      	it	lt
 8017b88:	4613      	movlt	r3, r2
 8017b8a:	6033      	str	r3, [r6, #0]
 8017b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b90:	4607      	mov	r7, r0
 8017b92:	460c      	mov	r4, r1
 8017b94:	b10a      	cbz	r2, 8017b9a <_printf_common+0x26>
 8017b96:	3301      	adds	r3, #1
 8017b98:	6033      	str	r3, [r6, #0]
 8017b9a:	6823      	ldr	r3, [r4, #0]
 8017b9c:	0699      	lsls	r1, r3, #26
 8017b9e:	bf42      	ittt	mi
 8017ba0:	6833      	ldrmi	r3, [r6, #0]
 8017ba2:	3302      	addmi	r3, #2
 8017ba4:	6033      	strmi	r3, [r6, #0]
 8017ba6:	6825      	ldr	r5, [r4, #0]
 8017ba8:	f015 0506 	ands.w	r5, r5, #6
 8017bac:	d106      	bne.n	8017bbc <_printf_common+0x48>
 8017bae:	f104 0a19 	add.w	sl, r4, #25
 8017bb2:	68e3      	ldr	r3, [r4, #12]
 8017bb4:	6832      	ldr	r2, [r6, #0]
 8017bb6:	1a9b      	subs	r3, r3, r2
 8017bb8:	42ab      	cmp	r3, r5
 8017bba:	dc26      	bgt.n	8017c0a <_printf_common+0x96>
 8017bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017bc0:	1e13      	subs	r3, r2, #0
 8017bc2:	6822      	ldr	r2, [r4, #0]
 8017bc4:	bf18      	it	ne
 8017bc6:	2301      	movne	r3, #1
 8017bc8:	0692      	lsls	r2, r2, #26
 8017bca:	d42b      	bmi.n	8017c24 <_printf_common+0xb0>
 8017bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017bd0:	4649      	mov	r1, r9
 8017bd2:	4638      	mov	r0, r7
 8017bd4:	47c0      	blx	r8
 8017bd6:	3001      	adds	r0, #1
 8017bd8:	d01e      	beq.n	8017c18 <_printf_common+0xa4>
 8017bda:	6823      	ldr	r3, [r4, #0]
 8017bdc:	68e5      	ldr	r5, [r4, #12]
 8017bde:	6832      	ldr	r2, [r6, #0]
 8017be0:	f003 0306 	and.w	r3, r3, #6
 8017be4:	2b04      	cmp	r3, #4
 8017be6:	bf08      	it	eq
 8017be8:	1aad      	subeq	r5, r5, r2
 8017bea:	68a3      	ldr	r3, [r4, #8]
 8017bec:	6922      	ldr	r2, [r4, #16]
 8017bee:	bf0c      	ite	eq
 8017bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017bf4:	2500      	movne	r5, #0
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	bfc4      	itt	gt
 8017bfa:	1a9b      	subgt	r3, r3, r2
 8017bfc:	18ed      	addgt	r5, r5, r3
 8017bfe:	2600      	movs	r6, #0
 8017c00:	341a      	adds	r4, #26
 8017c02:	42b5      	cmp	r5, r6
 8017c04:	d11a      	bne.n	8017c3c <_printf_common+0xc8>
 8017c06:	2000      	movs	r0, #0
 8017c08:	e008      	b.n	8017c1c <_printf_common+0xa8>
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	4652      	mov	r2, sl
 8017c0e:	4649      	mov	r1, r9
 8017c10:	4638      	mov	r0, r7
 8017c12:	47c0      	blx	r8
 8017c14:	3001      	adds	r0, #1
 8017c16:	d103      	bne.n	8017c20 <_printf_common+0xac>
 8017c18:	f04f 30ff 	mov.w	r0, #4294967295
 8017c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c20:	3501      	adds	r5, #1
 8017c22:	e7c6      	b.n	8017bb2 <_printf_common+0x3e>
 8017c24:	18e1      	adds	r1, r4, r3
 8017c26:	1c5a      	adds	r2, r3, #1
 8017c28:	2030      	movs	r0, #48	; 0x30
 8017c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017c2e:	4422      	add	r2, r4
 8017c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017c38:	3302      	adds	r3, #2
 8017c3a:	e7c7      	b.n	8017bcc <_printf_common+0x58>
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	4622      	mov	r2, r4
 8017c40:	4649      	mov	r1, r9
 8017c42:	4638      	mov	r0, r7
 8017c44:	47c0      	blx	r8
 8017c46:	3001      	adds	r0, #1
 8017c48:	d0e6      	beq.n	8017c18 <_printf_common+0xa4>
 8017c4a:	3601      	adds	r6, #1
 8017c4c:	e7d9      	b.n	8017c02 <_printf_common+0x8e>
	...

08017c50 <_printf_i>:
 8017c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c54:	7e0f      	ldrb	r7, [r1, #24]
 8017c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017c58:	2f78      	cmp	r7, #120	; 0x78
 8017c5a:	4691      	mov	r9, r2
 8017c5c:	4680      	mov	r8, r0
 8017c5e:	460c      	mov	r4, r1
 8017c60:	469a      	mov	sl, r3
 8017c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017c66:	d807      	bhi.n	8017c78 <_printf_i+0x28>
 8017c68:	2f62      	cmp	r7, #98	; 0x62
 8017c6a:	d80a      	bhi.n	8017c82 <_printf_i+0x32>
 8017c6c:	2f00      	cmp	r7, #0
 8017c6e:	f000 80d8 	beq.w	8017e22 <_printf_i+0x1d2>
 8017c72:	2f58      	cmp	r7, #88	; 0x58
 8017c74:	f000 80a3 	beq.w	8017dbe <_printf_i+0x16e>
 8017c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017c80:	e03a      	b.n	8017cf8 <_printf_i+0xa8>
 8017c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017c86:	2b15      	cmp	r3, #21
 8017c88:	d8f6      	bhi.n	8017c78 <_printf_i+0x28>
 8017c8a:	a101      	add	r1, pc, #4	; (adr r1, 8017c90 <_printf_i+0x40>)
 8017c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017c90:	08017ce9 	.word	0x08017ce9
 8017c94:	08017cfd 	.word	0x08017cfd
 8017c98:	08017c79 	.word	0x08017c79
 8017c9c:	08017c79 	.word	0x08017c79
 8017ca0:	08017c79 	.word	0x08017c79
 8017ca4:	08017c79 	.word	0x08017c79
 8017ca8:	08017cfd 	.word	0x08017cfd
 8017cac:	08017c79 	.word	0x08017c79
 8017cb0:	08017c79 	.word	0x08017c79
 8017cb4:	08017c79 	.word	0x08017c79
 8017cb8:	08017c79 	.word	0x08017c79
 8017cbc:	08017e09 	.word	0x08017e09
 8017cc0:	08017d2d 	.word	0x08017d2d
 8017cc4:	08017deb 	.word	0x08017deb
 8017cc8:	08017c79 	.word	0x08017c79
 8017ccc:	08017c79 	.word	0x08017c79
 8017cd0:	08017e2b 	.word	0x08017e2b
 8017cd4:	08017c79 	.word	0x08017c79
 8017cd8:	08017d2d 	.word	0x08017d2d
 8017cdc:	08017c79 	.word	0x08017c79
 8017ce0:	08017c79 	.word	0x08017c79
 8017ce4:	08017df3 	.word	0x08017df3
 8017ce8:	682b      	ldr	r3, [r5, #0]
 8017cea:	1d1a      	adds	r2, r3, #4
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	602a      	str	r2, [r5, #0]
 8017cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	e0a3      	b.n	8017e44 <_printf_i+0x1f4>
 8017cfc:	6820      	ldr	r0, [r4, #0]
 8017cfe:	6829      	ldr	r1, [r5, #0]
 8017d00:	0606      	lsls	r6, r0, #24
 8017d02:	f101 0304 	add.w	r3, r1, #4
 8017d06:	d50a      	bpl.n	8017d1e <_printf_i+0xce>
 8017d08:	680e      	ldr	r6, [r1, #0]
 8017d0a:	602b      	str	r3, [r5, #0]
 8017d0c:	2e00      	cmp	r6, #0
 8017d0e:	da03      	bge.n	8017d18 <_printf_i+0xc8>
 8017d10:	232d      	movs	r3, #45	; 0x2d
 8017d12:	4276      	negs	r6, r6
 8017d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d18:	485e      	ldr	r0, [pc, #376]	; (8017e94 <_printf_i+0x244>)
 8017d1a:	230a      	movs	r3, #10
 8017d1c:	e019      	b.n	8017d52 <_printf_i+0x102>
 8017d1e:	680e      	ldr	r6, [r1, #0]
 8017d20:	602b      	str	r3, [r5, #0]
 8017d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017d26:	bf18      	it	ne
 8017d28:	b236      	sxthne	r6, r6
 8017d2a:	e7ef      	b.n	8017d0c <_printf_i+0xbc>
 8017d2c:	682b      	ldr	r3, [r5, #0]
 8017d2e:	6820      	ldr	r0, [r4, #0]
 8017d30:	1d19      	adds	r1, r3, #4
 8017d32:	6029      	str	r1, [r5, #0]
 8017d34:	0601      	lsls	r1, r0, #24
 8017d36:	d501      	bpl.n	8017d3c <_printf_i+0xec>
 8017d38:	681e      	ldr	r6, [r3, #0]
 8017d3a:	e002      	b.n	8017d42 <_printf_i+0xf2>
 8017d3c:	0646      	lsls	r6, r0, #25
 8017d3e:	d5fb      	bpl.n	8017d38 <_printf_i+0xe8>
 8017d40:	881e      	ldrh	r6, [r3, #0]
 8017d42:	4854      	ldr	r0, [pc, #336]	; (8017e94 <_printf_i+0x244>)
 8017d44:	2f6f      	cmp	r7, #111	; 0x6f
 8017d46:	bf0c      	ite	eq
 8017d48:	2308      	moveq	r3, #8
 8017d4a:	230a      	movne	r3, #10
 8017d4c:	2100      	movs	r1, #0
 8017d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017d52:	6865      	ldr	r5, [r4, #4]
 8017d54:	60a5      	str	r5, [r4, #8]
 8017d56:	2d00      	cmp	r5, #0
 8017d58:	bfa2      	ittt	ge
 8017d5a:	6821      	ldrge	r1, [r4, #0]
 8017d5c:	f021 0104 	bicge.w	r1, r1, #4
 8017d60:	6021      	strge	r1, [r4, #0]
 8017d62:	b90e      	cbnz	r6, 8017d68 <_printf_i+0x118>
 8017d64:	2d00      	cmp	r5, #0
 8017d66:	d04d      	beq.n	8017e04 <_printf_i+0x1b4>
 8017d68:	4615      	mov	r5, r2
 8017d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8017d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8017d72:	5dc7      	ldrb	r7, [r0, r7]
 8017d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017d78:	4637      	mov	r7, r6
 8017d7a:	42bb      	cmp	r3, r7
 8017d7c:	460e      	mov	r6, r1
 8017d7e:	d9f4      	bls.n	8017d6a <_printf_i+0x11a>
 8017d80:	2b08      	cmp	r3, #8
 8017d82:	d10b      	bne.n	8017d9c <_printf_i+0x14c>
 8017d84:	6823      	ldr	r3, [r4, #0]
 8017d86:	07de      	lsls	r6, r3, #31
 8017d88:	d508      	bpl.n	8017d9c <_printf_i+0x14c>
 8017d8a:	6923      	ldr	r3, [r4, #16]
 8017d8c:	6861      	ldr	r1, [r4, #4]
 8017d8e:	4299      	cmp	r1, r3
 8017d90:	bfde      	ittt	le
 8017d92:	2330      	movle	r3, #48	; 0x30
 8017d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017d98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017d9c:	1b52      	subs	r2, r2, r5
 8017d9e:	6122      	str	r2, [r4, #16]
 8017da0:	f8cd a000 	str.w	sl, [sp]
 8017da4:	464b      	mov	r3, r9
 8017da6:	aa03      	add	r2, sp, #12
 8017da8:	4621      	mov	r1, r4
 8017daa:	4640      	mov	r0, r8
 8017dac:	f7ff fee2 	bl	8017b74 <_printf_common>
 8017db0:	3001      	adds	r0, #1
 8017db2:	d14c      	bne.n	8017e4e <_printf_i+0x1fe>
 8017db4:	f04f 30ff 	mov.w	r0, #4294967295
 8017db8:	b004      	add	sp, #16
 8017dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dbe:	4835      	ldr	r0, [pc, #212]	; (8017e94 <_printf_i+0x244>)
 8017dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017dc4:	6829      	ldr	r1, [r5, #0]
 8017dc6:	6823      	ldr	r3, [r4, #0]
 8017dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8017dcc:	6029      	str	r1, [r5, #0]
 8017dce:	061d      	lsls	r5, r3, #24
 8017dd0:	d514      	bpl.n	8017dfc <_printf_i+0x1ac>
 8017dd2:	07df      	lsls	r7, r3, #31
 8017dd4:	bf44      	itt	mi
 8017dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8017dda:	6023      	strmi	r3, [r4, #0]
 8017ddc:	b91e      	cbnz	r6, 8017de6 <_printf_i+0x196>
 8017dde:	6823      	ldr	r3, [r4, #0]
 8017de0:	f023 0320 	bic.w	r3, r3, #32
 8017de4:	6023      	str	r3, [r4, #0]
 8017de6:	2310      	movs	r3, #16
 8017de8:	e7b0      	b.n	8017d4c <_printf_i+0xfc>
 8017dea:	6823      	ldr	r3, [r4, #0]
 8017dec:	f043 0320 	orr.w	r3, r3, #32
 8017df0:	6023      	str	r3, [r4, #0]
 8017df2:	2378      	movs	r3, #120	; 0x78
 8017df4:	4828      	ldr	r0, [pc, #160]	; (8017e98 <_printf_i+0x248>)
 8017df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017dfa:	e7e3      	b.n	8017dc4 <_printf_i+0x174>
 8017dfc:	0659      	lsls	r1, r3, #25
 8017dfe:	bf48      	it	mi
 8017e00:	b2b6      	uxthmi	r6, r6
 8017e02:	e7e6      	b.n	8017dd2 <_printf_i+0x182>
 8017e04:	4615      	mov	r5, r2
 8017e06:	e7bb      	b.n	8017d80 <_printf_i+0x130>
 8017e08:	682b      	ldr	r3, [r5, #0]
 8017e0a:	6826      	ldr	r6, [r4, #0]
 8017e0c:	6961      	ldr	r1, [r4, #20]
 8017e0e:	1d18      	adds	r0, r3, #4
 8017e10:	6028      	str	r0, [r5, #0]
 8017e12:	0635      	lsls	r5, r6, #24
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	d501      	bpl.n	8017e1c <_printf_i+0x1cc>
 8017e18:	6019      	str	r1, [r3, #0]
 8017e1a:	e002      	b.n	8017e22 <_printf_i+0x1d2>
 8017e1c:	0670      	lsls	r0, r6, #25
 8017e1e:	d5fb      	bpl.n	8017e18 <_printf_i+0x1c8>
 8017e20:	8019      	strh	r1, [r3, #0]
 8017e22:	2300      	movs	r3, #0
 8017e24:	6123      	str	r3, [r4, #16]
 8017e26:	4615      	mov	r5, r2
 8017e28:	e7ba      	b.n	8017da0 <_printf_i+0x150>
 8017e2a:	682b      	ldr	r3, [r5, #0]
 8017e2c:	1d1a      	adds	r2, r3, #4
 8017e2e:	602a      	str	r2, [r5, #0]
 8017e30:	681d      	ldr	r5, [r3, #0]
 8017e32:	6862      	ldr	r2, [r4, #4]
 8017e34:	2100      	movs	r1, #0
 8017e36:	4628      	mov	r0, r5
 8017e38:	f7e8 f9fa 	bl	8000230 <memchr>
 8017e3c:	b108      	cbz	r0, 8017e42 <_printf_i+0x1f2>
 8017e3e:	1b40      	subs	r0, r0, r5
 8017e40:	6060      	str	r0, [r4, #4]
 8017e42:	6863      	ldr	r3, [r4, #4]
 8017e44:	6123      	str	r3, [r4, #16]
 8017e46:	2300      	movs	r3, #0
 8017e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e4c:	e7a8      	b.n	8017da0 <_printf_i+0x150>
 8017e4e:	6923      	ldr	r3, [r4, #16]
 8017e50:	462a      	mov	r2, r5
 8017e52:	4649      	mov	r1, r9
 8017e54:	4640      	mov	r0, r8
 8017e56:	47d0      	blx	sl
 8017e58:	3001      	adds	r0, #1
 8017e5a:	d0ab      	beq.n	8017db4 <_printf_i+0x164>
 8017e5c:	6823      	ldr	r3, [r4, #0]
 8017e5e:	079b      	lsls	r3, r3, #30
 8017e60:	d413      	bmi.n	8017e8a <_printf_i+0x23a>
 8017e62:	68e0      	ldr	r0, [r4, #12]
 8017e64:	9b03      	ldr	r3, [sp, #12]
 8017e66:	4298      	cmp	r0, r3
 8017e68:	bfb8      	it	lt
 8017e6a:	4618      	movlt	r0, r3
 8017e6c:	e7a4      	b.n	8017db8 <_printf_i+0x168>
 8017e6e:	2301      	movs	r3, #1
 8017e70:	4632      	mov	r2, r6
 8017e72:	4649      	mov	r1, r9
 8017e74:	4640      	mov	r0, r8
 8017e76:	47d0      	blx	sl
 8017e78:	3001      	adds	r0, #1
 8017e7a:	d09b      	beq.n	8017db4 <_printf_i+0x164>
 8017e7c:	3501      	adds	r5, #1
 8017e7e:	68e3      	ldr	r3, [r4, #12]
 8017e80:	9903      	ldr	r1, [sp, #12]
 8017e82:	1a5b      	subs	r3, r3, r1
 8017e84:	42ab      	cmp	r3, r5
 8017e86:	dcf2      	bgt.n	8017e6e <_printf_i+0x21e>
 8017e88:	e7eb      	b.n	8017e62 <_printf_i+0x212>
 8017e8a:	2500      	movs	r5, #0
 8017e8c:	f104 0619 	add.w	r6, r4, #25
 8017e90:	e7f5      	b.n	8017e7e <_printf_i+0x22e>
 8017e92:	bf00      	nop
 8017e94:	0801a69a 	.word	0x0801a69a
 8017e98:	0801a6ab 	.word	0x0801a6ab

08017e9c <iprintf>:
 8017e9c:	b40f      	push	{r0, r1, r2, r3}
 8017e9e:	4b0a      	ldr	r3, [pc, #40]	; (8017ec8 <iprintf+0x2c>)
 8017ea0:	b513      	push	{r0, r1, r4, lr}
 8017ea2:	681c      	ldr	r4, [r3, #0]
 8017ea4:	b124      	cbz	r4, 8017eb0 <iprintf+0x14>
 8017ea6:	69a3      	ldr	r3, [r4, #24]
 8017ea8:	b913      	cbnz	r3, 8017eb0 <iprintf+0x14>
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f001 f878 	bl	8018fa0 <__sinit>
 8017eb0:	ab05      	add	r3, sp, #20
 8017eb2:	9a04      	ldr	r2, [sp, #16]
 8017eb4:	68a1      	ldr	r1, [r4, #8]
 8017eb6:	9301      	str	r3, [sp, #4]
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f001 fe27 	bl	8019b0c <_vfiprintf_r>
 8017ebe:	b002      	add	sp, #8
 8017ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ec4:	b004      	add	sp, #16
 8017ec6:	4770      	bx	lr
 8017ec8:	2000000c 	.word	0x2000000c

08017ecc <putchar>:
 8017ecc:	4b09      	ldr	r3, [pc, #36]	; (8017ef4 <putchar+0x28>)
 8017ece:	b513      	push	{r0, r1, r4, lr}
 8017ed0:	681c      	ldr	r4, [r3, #0]
 8017ed2:	4601      	mov	r1, r0
 8017ed4:	b134      	cbz	r4, 8017ee4 <putchar+0x18>
 8017ed6:	69a3      	ldr	r3, [r4, #24]
 8017ed8:	b923      	cbnz	r3, 8017ee4 <putchar+0x18>
 8017eda:	9001      	str	r0, [sp, #4]
 8017edc:	4620      	mov	r0, r4
 8017ede:	f001 f85f 	bl	8018fa0 <__sinit>
 8017ee2:	9901      	ldr	r1, [sp, #4]
 8017ee4:	68a2      	ldr	r2, [r4, #8]
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	b002      	add	sp, #8
 8017eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017eee:	f001 bf3d 	b.w	8019d6c <_putc_r>
 8017ef2:	bf00      	nop
 8017ef4:	2000000c 	.word	0x2000000c

08017ef8 <__swbuf_r>:
 8017ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017efa:	460e      	mov	r6, r1
 8017efc:	4614      	mov	r4, r2
 8017efe:	4605      	mov	r5, r0
 8017f00:	b118      	cbz	r0, 8017f0a <__swbuf_r+0x12>
 8017f02:	6983      	ldr	r3, [r0, #24]
 8017f04:	b90b      	cbnz	r3, 8017f0a <__swbuf_r+0x12>
 8017f06:	f001 f84b 	bl	8018fa0 <__sinit>
 8017f0a:	4b21      	ldr	r3, [pc, #132]	; (8017f90 <__swbuf_r+0x98>)
 8017f0c:	429c      	cmp	r4, r3
 8017f0e:	d12b      	bne.n	8017f68 <__swbuf_r+0x70>
 8017f10:	686c      	ldr	r4, [r5, #4]
 8017f12:	69a3      	ldr	r3, [r4, #24]
 8017f14:	60a3      	str	r3, [r4, #8]
 8017f16:	89a3      	ldrh	r3, [r4, #12]
 8017f18:	071a      	lsls	r2, r3, #28
 8017f1a:	d52f      	bpl.n	8017f7c <__swbuf_r+0x84>
 8017f1c:	6923      	ldr	r3, [r4, #16]
 8017f1e:	b36b      	cbz	r3, 8017f7c <__swbuf_r+0x84>
 8017f20:	6923      	ldr	r3, [r4, #16]
 8017f22:	6820      	ldr	r0, [r4, #0]
 8017f24:	1ac0      	subs	r0, r0, r3
 8017f26:	6963      	ldr	r3, [r4, #20]
 8017f28:	b2f6      	uxtb	r6, r6
 8017f2a:	4283      	cmp	r3, r0
 8017f2c:	4637      	mov	r7, r6
 8017f2e:	dc04      	bgt.n	8017f3a <__swbuf_r+0x42>
 8017f30:	4621      	mov	r1, r4
 8017f32:	4628      	mov	r0, r5
 8017f34:	f000 ffa0 	bl	8018e78 <_fflush_r>
 8017f38:	bb30      	cbnz	r0, 8017f88 <__swbuf_r+0x90>
 8017f3a:	68a3      	ldr	r3, [r4, #8]
 8017f3c:	3b01      	subs	r3, #1
 8017f3e:	60a3      	str	r3, [r4, #8]
 8017f40:	6823      	ldr	r3, [r4, #0]
 8017f42:	1c5a      	adds	r2, r3, #1
 8017f44:	6022      	str	r2, [r4, #0]
 8017f46:	701e      	strb	r6, [r3, #0]
 8017f48:	6963      	ldr	r3, [r4, #20]
 8017f4a:	3001      	adds	r0, #1
 8017f4c:	4283      	cmp	r3, r0
 8017f4e:	d004      	beq.n	8017f5a <__swbuf_r+0x62>
 8017f50:	89a3      	ldrh	r3, [r4, #12]
 8017f52:	07db      	lsls	r3, r3, #31
 8017f54:	d506      	bpl.n	8017f64 <__swbuf_r+0x6c>
 8017f56:	2e0a      	cmp	r6, #10
 8017f58:	d104      	bne.n	8017f64 <__swbuf_r+0x6c>
 8017f5a:	4621      	mov	r1, r4
 8017f5c:	4628      	mov	r0, r5
 8017f5e:	f000 ff8b 	bl	8018e78 <_fflush_r>
 8017f62:	b988      	cbnz	r0, 8017f88 <__swbuf_r+0x90>
 8017f64:	4638      	mov	r0, r7
 8017f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f68:	4b0a      	ldr	r3, [pc, #40]	; (8017f94 <__swbuf_r+0x9c>)
 8017f6a:	429c      	cmp	r4, r3
 8017f6c:	d101      	bne.n	8017f72 <__swbuf_r+0x7a>
 8017f6e:	68ac      	ldr	r4, [r5, #8]
 8017f70:	e7cf      	b.n	8017f12 <__swbuf_r+0x1a>
 8017f72:	4b09      	ldr	r3, [pc, #36]	; (8017f98 <__swbuf_r+0xa0>)
 8017f74:	429c      	cmp	r4, r3
 8017f76:	bf08      	it	eq
 8017f78:	68ec      	ldreq	r4, [r5, #12]
 8017f7a:	e7ca      	b.n	8017f12 <__swbuf_r+0x1a>
 8017f7c:	4621      	mov	r1, r4
 8017f7e:	4628      	mov	r0, r5
 8017f80:	f000 f80c 	bl	8017f9c <__swsetup_r>
 8017f84:	2800      	cmp	r0, #0
 8017f86:	d0cb      	beq.n	8017f20 <__swbuf_r+0x28>
 8017f88:	f04f 37ff 	mov.w	r7, #4294967295
 8017f8c:	e7ea      	b.n	8017f64 <__swbuf_r+0x6c>
 8017f8e:	bf00      	nop
 8017f90:	0801a76c 	.word	0x0801a76c
 8017f94:	0801a78c 	.word	0x0801a78c
 8017f98:	0801a74c 	.word	0x0801a74c

08017f9c <__swsetup_r>:
 8017f9c:	4b32      	ldr	r3, [pc, #200]	; (8018068 <__swsetup_r+0xcc>)
 8017f9e:	b570      	push	{r4, r5, r6, lr}
 8017fa0:	681d      	ldr	r5, [r3, #0]
 8017fa2:	4606      	mov	r6, r0
 8017fa4:	460c      	mov	r4, r1
 8017fa6:	b125      	cbz	r5, 8017fb2 <__swsetup_r+0x16>
 8017fa8:	69ab      	ldr	r3, [r5, #24]
 8017faa:	b913      	cbnz	r3, 8017fb2 <__swsetup_r+0x16>
 8017fac:	4628      	mov	r0, r5
 8017fae:	f000 fff7 	bl	8018fa0 <__sinit>
 8017fb2:	4b2e      	ldr	r3, [pc, #184]	; (801806c <__swsetup_r+0xd0>)
 8017fb4:	429c      	cmp	r4, r3
 8017fb6:	d10f      	bne.n	8017fd8 <__swsetup_r+0x3c>
 8017fb8:	686c      	ldr	r4, [r5, #4]
 8017fba:	89a3      	ldrh	r3, [r4, #12]
 8017fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017fc0:	0719      	lsls	r1, r3, #28
 8017fc2:	d42c      	bmi.n	801801e <__swsetup_r+0x82>
 8017fc4:	06dd      	lsls	r5, r3, #27
 8017fc6:	d411      	bmi.n	8017fec <__swsetup_r+0x50>
 8017fc8:	2309      	movs	r3, #9
 8017fca:	6033      	str	r3, [r6, #0]
 8017fcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017fd0:	81a3      	strh	r3, [r4, #12]
 8017fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8017fd6:	e03e      	b.n	8018056 <__swsetup_r+0xba>
 8017fd8:	4b25      	ldr	r3, [pc, #148]	; (8018070 <__swsetup_r+0xd4>)
 8017fda:	429c      	cmp	r4, r3
 8017fdc:	d101      	bne.n	8017fe2 <__swsetup_r+0x46>
 8017fde:	68ac      	ldr	r4, [r5, #8]
 8017fe0:	e7eb      	b.n	8017fba <__swsetup_r+0x1e>
 8017fe2:	4b24      	ldr	r3, [pc, #144]	; (8018074 <__swsetup_r+0xd8>)
 8017fe4:	429c      	cmp	r4, r3
 8017fe6:	bf08      	it	eq
 8017fe8:	68ec      	ldreq	r4, [r5, #12]
 8017fea:	e7e6      	b.n	8017fba <__swsetup_r+0x1e>
 8017fec:	0758      	lsls	r0, r3, #29
 8017fee:	d512      	bpl.n	8018016 <__swsetup_r+0x7a>
 8017ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ff2:	b141      	cbz	r1, 8018006 <__swsetup_r+0x6a>
 8017ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ff8:	4299      	cmp	r1, r3
 8017ffa:	d002      	beq.n	8018002 <__swsetup_r+0x66>
 8017ffc:	4630      	mov	r0, r6
 8017ffe:	f001 fc7b 	bl	80198f8 <_free_r>
 8018002:	2300      	movs	r3, #0
 8018004:	6363      	str	r3, [r4, #52]	; 0x34
 8018006:	89a3      	ldrh	r3, [r4, #12]
 8018008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801800c:	81a3      	strh	r3, [r4, #12]
 801800e:	2300      	movs	r3, #0
 8018010:	6063      	str	r3, [r4, #4]
 8018012:	6923      	ldr	r3, [r4, #16]
 8018014:	6023      	str	r3, [r4, #0]
 8018016:	89a3      	ldrh	r3, [r4, #12]
 8018018:	f043 0308 	orr.w	r3, r3, #8
 801801c:	81a3      	strh	r3, [r4, #12]
 801801e:	6923      	ldr	r3, [r4, #16]
 8018020:	b94b      	cbnz	r3, 8018036 <__swsetup_r+0x9a>
 8018022:	89a3      	ldrh	r3, [r4, #12]
 8018024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801802c:	d003      	beq.n	8018036 <__swsetup_r+0x9a>
 801802e:	4621      	mov	r1, r4
 8018030:	4630      	mov	r0, r6
 8018032:	f001 f87f 	bl	8019134 <__smakebuf_r>
 8018036:	89a0      	ldrh	r0, [r4, #12]
 8018038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801803c:	f010 0301 	ands.w	r3, r0, #1
 8018040:	d00a      	beq.n	8018058 <__swsetup_r+0xbc>
 8018042:	2300      	movs	r3, #0
 8018044:	60a3      	str	r3, [r4, #8]
 8018046:	6963      	ldr	r3, [r4, #20]
 8018048:	425b      	negs	r3, r3
 801804a:	61a3      	str	r3, [r4, #24]
 801804c:	6923      	ldr	r3, [r4, #16]
 801804e:	b943      	cbnz	r3, 8018062 <__swsetup_r+0xc6>
 8018050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018054:	d1ba      	bne.n	8017fcc <__swsetup_r+0x30>
 8018056:	bd70      	pop	{r4, r5, r6, pc}
 8018058:	0781      	lsls	r1, r0, #30
 801805a:	bf58      	it	pl
 801805c:	6963      	ldrpl	r3, [r4, #20]
 801805e:	60a3      	str	r3, [r4, #8]
 8018060:	e7f4      	b.n	801804c <__swsetup_r+0xb0>
 8018062:	2000      	movs	r0, #0
 8018064:	e7f7      	b.n	8018056 <__swsetup_r+0xba>
 8018066:	bf00      	nop
 8018068:	2000000c 	.word	0x2000000c
 801806c:	0801a76c 	.word	0x0801a76c
 8018070:	0801a78c 	.word	0x0801a78c
 8018074:	0801a74c 	.word	0x0801a74c

08018078 <quorem>:
 8018078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	6903      	ldr	r3, [r0, #16]
 801807e:	690c      	ldr	r4, [r1, #16]
 8018080:	42a3      	cmp	r3, r4
 8018082:	4607      	mov	r7, r0
 8018084:	f2c0 8081 	blt.w	801818a <quorem+0x112>
 8018088:	3c01      	subs	r4, #1
 801808a:	f101 0814 	add.w	r8, r1, #20
 801808e:	f100 0514 	add.w	r5, r0, #20
 8018092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018096:	9301      	str	r3, [sp, #4]
 8018098:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801809c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80180a0:	3301      	adds	r3, #1
 80180a2:	429a      	cmp	r2, r3
 80180a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80180a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80180ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80180b0:	d331      	bcc.n	8018116 <quorem+0x9e>
 80180b2:	f04f 0e00 	mov.w	lr, #0
 80180b6:	4640      	mov	r0, r8
 80180b8:	46ac      	mov	ip, r5
 80180ba:	46f2      	mov	sl, lr
 80180bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80180c0:	b293      	uxth	r3, r2
 80180c2:	fb06 e303 	mla	r3, r6, r3, lr
 80180c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	ebaa 0303 	sub.w	r3, sl, r3
 80180d0:	f8dc a000 	ldr.w	sl, [ip]
 80180d4:	0c12      	lsrs	r2, r2, #16
 80180d6:	fa13 f38a 	uxtah	r3, r3, sl
 80180da:	fb06 e202 	mla	r2, r6, r2, lr
 80180de:	9300      	str	r3, [sp, #0]
 80180e0:	9b00      	ldr	r3, [sp, #0]
 80180e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80180e6:	b292      	uxth	r2, r2
 80180e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80180ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80180f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80180f4:	4581      	cmp	r9, r0
 80180f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180fa:	f84c 3b04 	str.w	r3, [ip], #4
 80180fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018102:	d2db      	bcs.n	80180bc <quorem+0x44>
 8018104:	f855 300b 	ldr.w	r3, [r5, fp]
 8018108:	b92b      	cbnz	r3, 8018116 <quorem+0x9e>
 801810a:	9b01      	ldr	r3, [sp, #4]
 801810c:	3b04      	subs	r3, #4
 801810e:	429d      	cmp	r5, r3
 8018110:	461a      	mov	r2, r3
 8018112:	d32e      	bcc.n	8018172 <quorem+0xfa>
 8018114:	613c      	str	r4, [r7, #16]
 8018116:	4638      	mov	r0, r7
 8018118:	f001 fad6 	bl	80196c8 <__mcmp>
 801811c:	2800      	cmp	r0, #0
 801811e:	db24      	blt.n	801816a <quorem+0xf2>
 8018120:	3601      	adds	r6, #1
 8018122:	4628      	mov	r0, r5
 8018124:	f04f 0c00 	mov.w	ip, #0
 8018128:	f858 2b04 	ldr.w	r2, [r8], #4
 801812c:	f8d0 e000 	ldr.w	lr, [r0]
 8018130:	b293      	uxth	r3, r2
 8018132:	ebac 0303 	sub.w	r3, ip, r3
 8018136:	0c12      	lsrs	r2, r2, #16
 8018138:	fa13 f38e 	uxtah	r3, r3, lr
 801813c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018144:	b29b      	uxth	r3, r3
 8018146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801814a:	45c1      	cmp	r9, r8
 801814c:	f840 3b04 	str.w	r3, [r0], #4
 8018150:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018154:	d2e8      	bcs.n	8018128 <quorem+0xb0>
 8018156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801815a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801815e:	b922      	cbnz	r2, 801816a <quorem+0xf2>
 8018160:	3b04      	subs	r3, #4
 8018162:	429d      	cmp	r5, r3
 8018164:	461a      	mov	r2, r3
 8018166:	d30a      	bcc.n	801817e <quorem+0x106>
 8018168:	613c      	str	r4, [r7, #16]
 801816a:	4630      	mov	r0, r6
 801816c:	b003      	add	sp, #12
 801816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018172:	6812      	ldr	r2, [r2, #0]
 8018174:	3b04      	subs	r3, #4
 8018176:	2a00      	cmp	r2, #0
 8018178:	d1cc      	bne.n	8018114 <quorem+0x9c>
 801817a:	3c01      	subs	r4, #1
 801817c:	e7c7      	b.n	801810e <quorem+0x96>
 801817e:	6812      	ldr	r2, [r2, #0]
 8018180:	3b04      	subs	r3, #4
 8018182:	2a00      	cmp	r2, #0
 8018184:	d1f0      	bne.n	8018168 <quorem+0xf0>
 8018186:	3c01      	subs	r4, #1
 8018188:	e7eb      	b.n	8018162 <quorem+0xea>
 801818a:	2000      	movs	r0, #0
 801818c:	e7ee      	b.n	801816c <quorem+0xf4>
	...

08018190 <_dtoa_r>:
 8018190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	ed2d 8b04 	vpush	{d8-d9}
 8018198:	ec57 6b10 	vmov	r6, r7, d0
 801819c:	b093      	sub	sp, #76	; 0x4c
 801819e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80181a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80181a4:	9106      	str	r1, [sp, #24]
 80181a6:	ee10 aa10 	vmov	sl, s0
 80181aa:	4604      	mov	r4, r0
 80181ac:	9209      	str	r2, [sp, #36]	; 0x24
 80181ae:	930c      	str	r3, [sp, #48]	; 0x30
 80181b0:	46bb      	mov	fp, r7
 80181b2:	b975      	cbnz	r5, 80181d2 <_dtoa_r+0x42>
 80181b4:	2010      	movs	r0, #16
 80181b6:	f000 fffd 	bl	80191b4 <malloc>
 80181ba:	4602      	mov	r2, r0
 80181bc:	6260      	str	r0, [r4, #36]	; 0x24
 80181be:	b920      	cbnz	r0, 80181ca <_dtoa_r+0x3a>
 80181c0:	4ba7      	ldr	r3, [pc, #668]	; (8018460 <_dtoa_r+0x2d0>)
 80181c2:	21ea      	movs	r1, #234	; 0xea
 80181c4:	48a7      	ldr	r0, [pc, #668]	; (8018464 <_dtoa_r+0x2d4>)
 80181c6:	f001 fe7f 	bl	8019ec8 <__assert_func>
 80181ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80181ce:	6005      	str	r5, [r0, #0]
 80181d0:	60c5      	str	r5, [r0, #12]
 80181d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181d4:	6819      	ldr	r1, [r3, #0]
 80181d6:	b151      	cbz	r1, 80181ee <_dtoa_r+0x5e>
 80181d8:	685a      	ldr	r2, [r3, #4]
 80181da:	604a      	str	r2, [r1, #4]
 80181dc:	2301      	movs	r3, #1
 80181de:	4093      	lsls	r3, r2
 80181e0:	608b      	str	r3, [r1, #8]
 80181e2:	4620      	mov	r0, r4
 80181e4:	f001 f82e 	bl	8019244 <_Bfree>
 80181e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181ea:	2200      	movs	r2, #0
 80181ec:	601a      	str	r2, [r3, #0]
 80181ee:	1e3b      	subs	r3, r7, #0
 80181f0:	bfaa      	itet	ge
 80181f2:	2300      	movge	r3, #0
 80181f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80181f8:	f8c8 3000 	strge.w	r3, [r8]
 80181fc:	4b9a      	ldr	r3, [pc, #616]	; (8018468 <_dtoa_r+0x2d8>)
 80181fe:	bfbc      	itt	lt
 8018200:	2201      	movlt	r2, #1
 8018202:	f8c8 2000 	strlt.w	r2, [r8]
 8018206:	ea33 030b 	bics.w	r3, r3, fp
 801820a:	d11b      	bne.n	8018244 <_dtoa_r+0xb4>
 801820c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801820e:	f242 730f 	movw	r3, #9999	; 0x270f
 8018212:	6013      	str	r3, [r2, #0]
 8018214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018218:	4333      	orrs	r3, r6
 801821a:	f000 8592 	beq.w	8018d42 <_dtoa_r+0xbb2>
 801821e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018220:	b963      	cbnz	r3, 801823c <_dtoa_r+0xac>
 8018222:	4b92      	ldr	r3, [pc, #584]	; (801846c <_dtoa_r+0x2dc>)
 8018224:	e022      	b.n	801826c <_dtoa_r+0xdc>
 8018226:	4b92      	ldr	r3, [pc, #584]	; (8018470 <_dtoa_r+0x2e0>)
 8018228:	9301      	str	r3, [sp, #4]
 801822a:	3308      	adds	r3, #8
 801822c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801822e:	6013      	str	r3, [r2, #0]
 8018230:	9801      	ldr	r0, [sp, #4]
 8018232:	b013      	add	sp, #76	; 0x4c
 8018234:	ecbd 8b04 	vpop	{d8-d9}
 8018238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823c:	4b8b      	ldr	r3, [pc, #556]	; (801846c <_dtoa_r+0x2dc>)
 801823e:	9301      	str	r3, [sp, #4]
 8018240:	3303      	adds	r3, #3
 8018242:	e7f3      	b.n	801822c <_dtoa_r+0x9c>
 8018244:	2200      	movs	r2, #0
 8018246:	2300      	movs	r3, #0
 8018248:	4650      	mov	r0, sl
 801824a:	4659      	mov	r1, fp
 801824c:	f7e8 fc64 	bl	8000b18 <__aeabi_dcmpeq>
 8018250:	ec4b ab19 	vmov	d9, sl, fp
 8018254:	4680      	mov	r8, r0
 8018256:	b158      	cbz	r0, 8018270 <_dtoa_r+0xe0>
 8018258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801825a:	2301      	movs	r3, #1
 801825c:	6013      	str	r3, [r2, #0]
 801825e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018260:	2b00      	cmp	r3, #0
 8018262:	f000 856b 	beq.w	8018d3c <_dtoa_r+0xbac>
 8018266:	4883      	ldr	r0, [pc, #524]	; (8018474 <_dtoa_r+0x2e4>)
 8018268:	6018      	str	r0, [r3, #0]
 801826a:	1e43      	subs	r3, r0, #1
 801826c:	9301      	str	r3, [sp, #4]
 801826e:	e7df      	b.n	8018230 <_dtoa_r+0xa0>
 8018270:	ec4b ab10 	vmov	d0, sl, fp
 8018274:	aa10      	add	r2, sp, #64	; 0x40
 8018276:	a911      	add	r1, sp, #68	; 0x44
 8018278:	4620      	mov	r0, r4
 801827a:	f001 facb 	bl	8019814 <__d2b>
 801827e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8018282:	ee08 0a10 	vmov	s16, r0
 8018286:	2d00      	cmp	r5, #0
 8018288:	f000 8084 	beq.w	8018394 <_dtoa_r+0x204>
 801828c:	ee19 3a90 	vmov	r3, s19
 8018290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018294:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018298:	4656      	mov	r6, sl
 801829a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801829e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80182a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80182a6:	4b74      	ldr	r3, [pc, #464]	; (8018478 <_dtoa_r+0x2e8>)
 80182a8:	2200      	movs	r2, #0
 80182aa:	4630      	mov	r0, r6
 80182ac:	4639      	mov	r1, r7
 80182ae:	f7e8 f813 	bl	80002d8 <__aeabi_dsub>
 80182b2:	a365      	add	r3, pc, #404	; (adr r3, 8018448 <_dtoa_r+0x2b8>)
 80182b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b8:	f7e8 f9c6 	bl	8000648 <__aeabi_dmul>
 80182bc:	a364      	add	r3, pc, #400	; (adr r3, 8018450 <_dtoa_r+0x2c0>)
 80182be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182c2:	f7e8 f80b 	bl	80002dc <__adddf3>
 80182c6:	4606      	mov	r6, r0
 80182c8:	4628      	mov	r0, r5
 80182ca:	460f      	mov	r7, r1
 80182cc:	f7e8 f952 	bl	8000574 <__aeabi_i2d>
 80182d0:	a361      	add	r3, pc, #388	; (adr r3, 8018458 <_dtoa_r+0x2c8>)
 80182d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182d6:	f7e8 f9b7 	bl	8000648 <__aeabi_dmul>
 80182da:	4602      	mov	r2, r0
 80182dc:	460b      	mov	r3, r1
 80182de:	4630      	mov	r0, r6
 80182e0:	4639      	mov	r1, r7
 80182e2:	f7e7 fffb 	bl	80002dc <__adddf3>
 80182e6:	4606      	mov	r6, r0
 80182e8:	460f      	mov	r7, r1
 80182ea:	f7e8 fc5d 	bl	8000ba8 <__aeabi_d2iz>
 80182ee:	2200      	movs	r2, #0
 80182f0:	9000      	str	r0, [sp, #0]
 80182f2:	2300      	movs	r3, #0
 80182f4:	4630      	mov	r0, r6
 80182f6:	4639      	mov	r1, r7
 80182f8:	f7e8 fc18 	bl	8000b2c <__aeabi_dcmplt>
 80182fc:	b150      	cbz	r0, 8018314 <_dtoa_r+0x184>
 80182fe:	9800      	ldr	r0, [sp, #0]
 8018300:	f7e8 f938 	bl	8000574 <__aeabi_i2d>
 8018304:	4632      	mov	r2, r6
 8018306:	463b      	mov	r3, r7
 8018308:	f7e8 fc06 	bl	8000b18 <__aeabi_dcmpeq>
 801830c:	b910      	cbnz	r0, 8018314 <_dtoa_r+0x184>
 801830e:	9b00      	ldr	r3, [sp, #0]
 8018310:	3b01      	subs	r3, #1
 8018312:	9300      	str	r3, [sp, #0]
 8018314:	9b00      	ldr	r3, [sp, #0]
 8018316:	2b16      	cmp	r3, #22
 8018318:	d85a      	bhi.n	80183d0 <_dtoa_r+0x240>
 801831a:	9a00      	ldr	r2, [sp, #0]
 801831c:	4b57      	ldr	r3, [pc, #348]	; (801847c <_dtoa_r+0x2ec>)
 801831e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018326:	ec51 0b19 	vmov	r0, r1, d9
 801832a:	f7e8 fbff 	bl	8000b2c <__aeabi_dcmplt>
 801832e:	2800      	cmp	r0, #0
 8018330:	d050      	beq.n	80183d4 <_dtoa_r+0x244>
 8018332:	9b00      	ldr	r3, [sp, #0]
 8018334:	3b01      	subs	r3, #1
 8018336:	9300      	str	r3, [sp, #0]
 8018338:	2300      	movs	r3, #0
 801833a:	930b      	str	r3, [sp, #44]	; 0x2c
 801833c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801833e:	1b5d      	subs	r5, r3, r5
 8018340:	1e6b      	subs	r3, r5, #1
 8018342:	9305      	str	r3, [sp, #20]
 8018344:	bf45      	ittet	mi
 8018346:	f1c5 0301 	rsbmi	r3, r5, #1
 801834a:	9304      	strmi	r3, [sp, #16]
 801834c:	2300      	movpl	r3, #0
 801834e:	2300      	movmi	r3, #0
 8018350:	bf4c      	ite	mi
 8018352:	9305      	strmi	r3, [sp, #20]
 8018354:	9304      	strpl	r3, [sp, #16]
 8018356:	9b00      	ldr	r3, [sp, #0]
 8018358:	2b00      	cmp	r3, #0
 801835a:	db3d      	blt.n	80183d8 <_dtoa_r+0x248>
 801835c:	9b05      	ldr	r3, [sp, #20]
 801835e:	9a00      	ldr	r2, [sp, #0]
 8018360:	920a      	str	r2, [sp, #40]	; 0x28
 8018362:	4413      	add	r3, r2
 8018364:	9305      	str	r3, [sp, #20]
 8018366:	2300      	movs	r3, #0
 8018368:	9307      	str	r3, [sp, #28]
 801836a:	9b06      	ldr	r3, [sp, #24]
 801836c:	2b09      	cmp	r3, #9
 801836e:	f200 8089 	bhi.w	8018484 <_dtoa_r+0x2f4>
 8018372:	2b05      	cmp	r3, #5
 8018374:	bfc4      	itt	gt
 8018376:	3b04      	subgt	r3, #4
 8018378:	9306      	strgt	r3, [sp, #24]
 801837a:	9b06      	ldr	r3, [sp, #24]
 801837c:	f1a3 0302 	sub.w	r3, r3, #2
 8018380:	bfcc      	ite	gt
 8018382:	2500      	movgt	r5, #0
 8018384:	2501      	movle	r5, #1
 8018386:	2b03      	cmp	r3, #3
 8018388:	f200 8087 	bhi.w	801849a <_dtoa_r+0x30a>
 801838c:	e8df f003 	tbb	[pc, r3]
 8018390:	59383a2d 	.word	0x59383a2d
 8018394:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8018398:	441d      	add	r5, r3
 801839a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801839e:	2b20      	cmp	r3, #32
 80183a0:	bfc1      	itttt	gt
 80183a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80183a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80183aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80183ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80183b2:	bfda      	itte	le
 80183b4:	f1c3 0320 	rsble	r3, r3, #32
 80183b8:	fa06 f003 	lslle.w	r0, r6, r3
 80183bc:	4318      	orrgt	r0, r3
 80183be:	f7e8 f8c9 	bl	8000554 <__aeabi_ui2d>
 80183c2:	2301      	movs	r3, #1
 80183c4:	4606      	mov	r6, r0
 80183c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80183ca:	3d01      	subs	r5, #1
 80183cc:	930e      	str	r3, [sp, #56]	; 0x38
 80183ce:	e76a      	b.n	80182a6 <_dtoa_r+0x116>
 80183d0:	2301      	movs	r3, #1
 80183d2:	e7b2      	b.n	801833a <_dtoa_r+0x1aa>
 80183d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80183d6:	e7b1      	b.n	801833c <_dtoa_r+0x1ac>
 80183d8:	9b04      	ldr	r3, [sp, #16]
 80183da:	9a00      	ldr	r2, [sp, #0]
 80183dc:	1a9b      	subs	r3, r3, r2
 80183de:	9304      	str	r3, [sp, #16]
 80183e0:	4253      	negs	r3, r2
 80183e2:	9307      	str	r3, [sp, #28]
 80183e4:	2300      	movs	r3, #0
 80183e6:	930a      	str	r3, [sp, #40]	; 0x28
 80183e8:	e7bf      	b.n	801836a <_dtoa_r+0x1da>
 80183ea:	2300      	movs	r3, #0
 80183ec:	9308      	str	r3, [sp, #32]
 80183ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	dc55      	bgt.n	80184a0 <_dtoa_r+0x310>
 80183f4:	2301      	movs	r3, #1
 80183f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80183fa:	461a      	mov	r2, r3
 80183fc:	9209      	str	r2, [sp, #36]	; 0x24
 80183fe:	e00c      	b.n	801841a <_dtoa_r+0x28a>
 8018400:	2301      	movs	r3, #1
 8018402:	e7f3      	b.n	80183ec <_dtoa_r+0x25c>
 8018404:	2300      	movs	r3, #0
 8018406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018408:	9308      	str	r3, [sp, #32]
 801840a:	9b00      	ldr	r3, [sp, #0]
 801840c:	4413      	add	r3, r2
 801840e:	9302      	str	r3, [sp, #8]
 8018410:	3301      	adds	r3, #1
 8018412:	2b01      	cmp	r3, #1
 8018414:	9303      	str	r3, [sp, #12]
 8018416:	bfb8      	it	lt
 8018418:	2301      	movlt	r3, #1
 801841a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801841c:	2200      	movs	r2, #0
 801841e:	6042      	str	r2, [r0, #4]
 8018420:	2204      	movs	r2, #4
 8018422:	f102 0614 	add.w	r6, r2, #20
 8018426:	429e      	cmp	r6, r3
 8018428:	6841      	ldr	r1, [r0, #4]
 801842a:	d93d      	bls.n	80184a8 <_dtoa_r+0x318>
 801842c:	4620      	mov	r0, r4
 801842e:	f000 fec9 	bl	80191c4 <_Balloc>
 8018432:	9001      	str	r0, [sp, #4]
 8018434:	2800      	cmp	r0, #0
 8018436:	d13b      	bne.n	80184b0 <_dtoa_r+0x320>
 8018438:	4b11      	ldr	r3, [pc, #68]	; (8018480 <_dtoa_r+0x2f0>)
 801843a:	4602      	mov	r2, r0
 801843c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018440:	e6c0      	b.n	80181c4 <_dtoa_r+0x34>
 8018442:	2301      	movs	r3, #1
 8018444:	e7df      	b.n	8018406 <_dtoa_r+0x276>
 8018446:	bf00      	nop
 8018448:	636f4361 	.word	0x636f4361
 801844c:	3fd287a7 	.word	0x3fd287a7
 8018450:	8b60c8b3 	.word	0x8b60c8b3
 8018454:	3fc68a28 	.word	0x3fc68a28
 8018458:	509f79fb 	.word	0x509f79fb
 801845c:	3fd34413 	.word	0x3fd34413
 8018460:	0801a6c9 	.word	0x0801a6c9
 8018464:	0801a6e0 	.word	0x0801a6e0
 8018468:	7ff00000 	.word	0x7ff00000
 801846c:	0801a6c5 	.word	0x0801a6c5
 8018470:	0801a6bc 	.word	0x0801a6bc
 8018474:	0801a699 	.word	0x0801a699
 8018478:	3ff80000 	.word	0x3ff80000
 801847c:	0801a830 	.word	0x0801a830
 8018480:	0801a73b 	.word	0x0801a73b
 8018484:	2501      	movs	r5, #1
 8018486:	2300      	movs	r3, #0
 8018488:	9306      	str	r3, [sp, #24]
 801848a:	9508      	str	r5, [sp, #32]
 801848c:	f04f 33ff 	mov.w	r3, #4294967295
 8018490:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018494:	2200      	movs	r2, #0
 8018496:	2312      	movs	r3, #18
 8018498:	e7b0      	b.n	80183fc <_dtoa_r+0x26c>
 801849a:	2301      	movs	r3, #1
 801849c:	9308      	str	r3, [sp, #32]
 801849e:	e7f5      	b.n	801848c <_dtoa_r+0x2fc>
 80184a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80184a6:	e7b8      	b.n	801841a <_dtoa_r+0x28a>
 80184a8:	3101      	adds	r1, #1
 80184aa:	6041      	str	r1, [r0, #4]
 80184ac:	0052      	lsls	r2, r2, #1
 80184ae:	e7b8      	b.n	8018422 <_dtoa_r+0x292>
 80184b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80184b2:	9a01      	ldr	r2, [sp, #4]
 80184b4:	601a      	str	r2, [r3, #0]
 80184b6:	9b03      	ldr	r3, [sp, #12]
 80184b8:	2b0e      	cmp	r3, #14
 80184ba:	f200 809d 	bhi.w	80185f8 <_dtoa_r+0x468>
 80184be:	2d00      	cmp	r5, #0
 80184c0:	f000 809a 	beq.w	80185f8 <_dtoa_r+0x468>
 80184c4:	9b00      	ldr	r3, [sp, #0]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	dd32      	ble.n	8018530 <_dtoa_r+0x3a0>
 80184ca:	4ab7      	ldr	r2, [pc, #732]	; (80187a8 <_dtoa_r+0x618>)
 80184cc:	f003 030f 	and.w	r3, r3, #15
 80184d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80184d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80184d8:	9b00      	ldr	r3, [sp, #0]
 80184da:	05d8      	lsls	r0, r3, #23
 80184dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80184e0:	d516      	bpl.n	8018510 <_dtoa_r+0x380>
 80184e2:	4bb2      	ldr	r3, [pc, #712]	; (80187ac <_dtoa_r+0x61c>)
 80184e4:	ec51 0b19 	vmov	r0, r1, d9
 80184e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80184ec:	f7e8 f9d6 	bl	800089c <__aeabi_ddiv>
 80184f0:	f007 070f 	and.w	r7, r7, #15
 80184f4:	4682      	mov	sl, r0
 80184f6:	468b      	mov	fp, r1
 80184f8:	2503      	movs	r5, #3
 80184fa:	4eac      	ldr	r6, [pc, #688]	; (80187ac <_dtoa_r+0x61c>)
 80184fc:	b957      	cbnz	r7, 8018514 <_dtoa_r+0x384>
 80184fe:	4642      	mov	r2, r8
 8018500:	464b      	mov	r3, r9
 8018502:	4650      	mov	r0, sl
 8018504:	4659      	mov	r1, fp
 8018506:	f7e8 f9c9 	bl	800089c <__aeabi_ddiv>
 801850a:	4682      	mov	sl, r0
 801850c:	468b      	mov	fp, r1
 801850e:	e028      	b.n	8018562 <_dtoa_r+0x3d2>
 8018510:	2502      	movs	r5, #2
 8018512:	e7f2      	b.n	80184fa <_dtoa_r+0x36a>
 8018514:	07f9      	lsls	r1, r7, #31
 8018516:	d508      	bpl.n	801852a <_dtoa_r+0x39a>
 8018518:	4640      	mov	r0, r8
 801851a:	4649      	mov	r1, r9
 801851c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018520:	f7e8 f892 	bl	8000648 <__aeabi_dmul>
 8018524:	3501      	adds	r5, #1
 8018526:	4680      	mov	r8, r0
 8018528:	4689      	mov	r9, r1
 801852a:	107f      	asrs	r7, r7, #1
 801852c:	3608      	adds	r6, #8
 801852e:	e7e5      	b.n	80184fc <_dtoa_r+0x36c>
 8018530:	f000 809b 	beq.w	801866a <_dtoa_r+0x4da>
 8018534:	9b00      	ldr	r3, [sp, #0]
 8018536:	4f9d      	ldr	r7, [pc, #628]	; (80187ac <_dtoa_r+0x61c>)
 8018538:	425e      	negs	r6, r3
 801853a:	4b9b      	ldr	r3, [pc, #620]	; (80187a8 <_dtoa_r+0x618>)
 801853c:	f006 020f 	and.w	r2, r6, #15
 8018540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018548:	ec51 0b19 	vmov	r0, r1, d9
 801854c:	f7e8 f87c 	bl	8000648 <__aeabi_dmul>
 8018550:	1136      	asrs	r6, r6, #4
 8018552:	4682      	mov	sl, r0
 8018554:	468b      	mov	fp, r1
 8018556:	2300      	movs	r3, #0
 8018558:	2502      	movs	r5, #2
 801855a:	2e00      	cmp	r6, #0
 801855c:	d17a      	bne.n	8018654 <_dtoa_r+0x4c4>
 801855e:	2b00      	cmp	r3, #0
 8018560:	d1d3      	bne.n	801850a <_dtoa_r+0x37a>
 8018562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018564:	2b00      	cmp	r3, #0
 8018566:	f000 8082 	beq.w	801866e <_dtoa_r+0x4de>
 801856a:	4b91      	ldr	r3, [pc, #580]	; (80187b0 <_dtoa_r+0x620>)
 801856c:	2200      	movs	r2, #0
 801856e:	4650      	mov	r0, sl
 8018570:	4659      	mov	r1, fp
 8018572:	f7e8 fadb 	bl	8000b2c <__aeabi_dcmplt>
 8018576:	2800      	cmp	r0, #0
 8018578:	d079      	beq.n	801866e <_dtoa_r+0x4de>
 801857a:	9b03      	ldr	r3, [sp, #12]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d076      	beq.n	801866e <_dtoa_r+0x4de>
 8018580:	9b02      	ldr	r3, [sp, #8]
 8018582:	2b00      	cmp	r3, #0
 8018584:	dd36      	ble.n	80185f4 <_dtoa_r+0x464>
 8018586:	9b00      	ldr	r3, [sp, #0]
 8018588:	4650      	mov	r0, sl
 801858a:	4659      	mov	r1, fp
 801858c:	1e5f      	subs	r7, r3, #1
 801858e:	2200      	movs	r2, #0
 8018590:	4b88      	ldr	r3, [pc, #544]	; (80187b4 <_dtoa_r+0x624>)
 8018592:	f7e8 f859 	bl	8000648 <__aeabi_dmul>
 8018596:	9e02      	ldr	r6, [sp, #8]
 8018598:	4682      	mov	sl, r0
 801859a:	468b      	mov	fp, r1
 801859c:	3501      	adds	r5, #1
 801859e:	4628      	mov	r0, r5
 80185a0:	f7e7 ffe8 	bl	8000574 <__aeabi_i2d>
 80185a4:	4652      	mov	r2, sl
 80185a6:	465b      	mov	r3, fp
 80185a8:	f7e8 f84e 	bl	8000648 <__aeabi_dmul>
 80185ac:	4b82      	ldr	r3, [pc, #520]	; (80187b8 <_dtoa_r+0x628>)
 80185ae:	2200      	movs	r2, #0
 80185b0:	f7e7 fe94 	bl	80002dc <__adddf3>
 80185b4:	46d0      	mov	r8, sl
 80185b6:	46d9      	mov	r9, fp
 80185b8:	4682      	mov	sl, r0
 80185ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80185be:	2e00      	cmp	r6, #0
 80185c0:	d158      	bne.n	8018674 <_dtoa_r+0x4e4>
 80185c2:	4b7e      	ldr	r3, [pc, #504]	; (80187bc <_dtoa_r+0x62c>)
 80185c4:	2200      	movs	r2, #0
 80185c6:	4640      	mov	r0, r8
 80185c8:	4649      	mov	r1, r9
 80185ca:	f7e7 fe85 	bl	80002d8 <__aeabi_dsub>
 80185ce:	4652      	mov	r2, sl
 80185d0:	465b      	mov	r3, fp
 80185d2:	4680      	mov	r8, r0
 80185d4:	4689      	mov	r9, r1
 80185d6:	f7e8 fac7 	bl	8000b68 <__aeabi_dcmpgt>
 80185da:	2800      	cmp	r0, #0
 80185dc:	f040 8295 	bne.w	8018b0a <_dtoa_r+0x97a>
 80185e0:	4652      	mov	r2, sl
 80185e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80185e6:	4640      	mov	r0, r8
 80185e8:	4649      	mov	r1, r9
 80185ea:	f7e8 fa9f 	bl	8000b2c <__aeabi_dcmplt>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	f040 8289 	bne.w	8018b06 <_dtoa_r+0x976>
 80185f4:	ec5b ab19 	vmov	sl, fp, d9
 80185f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	f2c0 8148 	blt.w	8018890 <_dtoa_r+0x700>
 8018600:	9a00      	ldr	r2, [sp, #0]
 8018602:	2a0e      	cmp	r2, #14
 8018604:	f300 8144 	bgt.w	8018890 <_dtoa_r+0x700>
 8018608:	4b67      	ldr	r3, [pc, #412]	; (80187a8 <_dtoa_r+0x618>)
 801860a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801860e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018614:	2b00      	cmp	r3, #0
 8018616:	f280 80d5 	bge.w	80187c4 <_dtoa_r+0x634>
 801861a:	9b03      	ldr	r3, [sp, #12]
 801861c:	2b00      	cmp	r3, #0
 801861e:	f300 80d1 	bgt.w	80187c4 <_dtoa_r+0x634>
 8018622:	f040 826f 	bne.w	8018b04 <_dtoa_r+0x974>
 8018626:	4b65      	ldr	r3, [pc, #404]	; (80187bc <_dtoa_r+0x62c>)
 8018628:	2200      	movs	r2, #0
 801862a:	4640      	mov	r0, r8
 801862c:	4649      	mov	r1, r9
 801862e:	f7e8 f80b 	bl	8000648 <__aeabi_dmul>
 8018632:	4652      	mov	r2, sl
 8018634:	465b      	mov	r3, fp
 8018636:	f7e8 fa8d 	bl	8000b54 <__aeabi_dcmpge>
 801863a:	9e03      	ldr	r6, [sp, #12]
 801863c:	4637      	mov	r7, r6
 801863e:	2800      	cmp	r0, #0
 8018640:	f040 8245 	bne.w	8018ace <_dtoa_r+0x93e>
 8018644:	9d01      	ldr	r5, [sp, #4]
 8018646:	2331      	movs	r3, #49	; 0x31
 8018648:	f805 3b01 	strb.w	r3, [r5], #1
 801864c:	9b00      	ldr	r3, [sp, #0]
 801864e:	3301      	adds	r3, #1
 8018650:	9300      	str	r3, [sp, #0]
 8018652:	e240      	b.n	8018ad6 <_dtoa_r+0x946>
 8018654:	07f2      	lsls	r2, r6, #31
 8018656:	d505      	bpl.n	8018664 <_dtoa_r+0x4d4>
 8018658:	e9d7 2300 	ldrd	r2, r3, [r7]
 801865c:	f7e7 fff4 	bl	8000648 <__aeabi_dmul>
 8018660:	3501      	adds	r5, #1
 8018662:	2301      	movs	r3, #1
 8018664:	1076      	asrs	r6, r6, #1
 8018666:	3708      	adds	r7, #8
 8018668:	e777      	b.n	801855a <_dtoa_r+0x3ca>
 801866a:	2502      	movs	r5, #2
 801866c:	e779      	b.n	8018562 <_dtoa_r+0x3d2>
 801866e:	9f00      	ldr	r7, [sp, #0]
 8018670:	9e03      	ldr	r6, [sp, #12]
 8018672:	e794      	b.n	801859e <_dtoa_r+0x40e>
 8018674:	9901      	ldr	r1, [sp, #4]
 8018676:	4b4c      	ldr	r3, [pc, #304]	; (80187a8 <_dtoa_r+0x618>)
 8018678:	4431      	add	r1, r6
 801867a:	910d      	str	r1, [sp, #52]	; 0x34
 801867c:	9908      	ldr	r1, [sp, #32]
 801867e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018686:	2900      	cmp	r1, #0
 8018688:	d043      	beq.n	8018712 <_dtoa_r+0x582>
 801868a:	494d      	ldr	r1, [pc, #308]	; (80187c0 <_dtoa_r+0x630>)
 801868c:	2000      	movs	r0, #0
 801868e:	f7e8 f905 	bl	800089c <__aeabi_ddiv>
 8018692:	4652      	mov	r2, sl
 8018694:	465b      	mov	r3, fp
 8018696:	f7e7 fe1f 	bl	80002d8 <__aeabi_dsub>
 801869a:	9d01      	ldr	r5, [sp, #4]
 801869c:	4682      	mov	sl, r0
 801869e:	468b      	mov	fp, r1
 80186a0:	4649      	mov	r1, r9
 80186a2:	4640      	mov	r0, r8
 80186a4:	f7e8 fa80 	bl	8000ba8 <__aeabi_d2iz>
 80186a8:	4606      	mov	r6, r0
 80186aa:	f7e7 ff63 	bl	8000574 <__aeabi_i2d>
 80186ae:	4602      	mov	r2, r0
 80186b0:	460b      	mov	r3, r1
 80186b2:	4640      	mov	r0, r8
 80186b4:	4649      	mov	r1, r9
 80186b6:	f7e7 fe0f 	bl	80002d8 <__aeabi_dsub>
 80186ba:	3630      	adds	r6, #48	; 0x30
 80186bc:	f805 6b01 	strb.w	r6, [r5], #1
 80186c0:	4652      	mov	r2, sl
 80186c2:	465b      	mov	r3, fp
 80186c4:	4680      	mov	r8, r0
 80186c6:	4689      	mov	r9, r1
 80186c8:	f7e8 fa30 	bl	8000b2c <__aeabi_dcmplt>
 80186cc:	2800      	cmp	r0, #0
 80186ce:	d163      	bne.n	8018798 <_dtoa_r+0x608>
 80186d0:	4642      	mov	r2, r8
 80186d2:	464b      	mov	r3, r9
 80186d4:	4936      	ldr	r1, [pc, #216]	; (80187b0 <_dtoa_r+0x620>)
 80186d6:	2000      	movs	r0, #0
 80186d8:	f7e7 fdfe 	bl	80002d8 <__aeabi_dsub>
 80186dc:	4652      	mov	r2, sl
 80186de:	465b      	mov	r3, fp
 80186e0:	f7e8 fa24 	bl	8000b2c <__aeabi_dcmplt>
 80186e4:	2800      	cmp	r0, #0
 80186e6:	f040 80b5 	bne.w	8018854 <_dtoa_r+0x6c4>
 80186ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186ec:	429d      	cmp	r5, r3
 80186ee:	d081      	beq.n	80185f4 <_dtoa_r+0x464>
 80186f0:	4b30      	ldr	r3, [pc, #192]	; (80187b4 <_dtoa_r+0x624>)
 80186f2:	2200      	movs	r2, #0
 80186f4:	4650      	mov	r0, sl
 80186f6:	4659      	mov	r1, fp
 80186f8:	f7e7 ffa6 	bl	8000648 <__aeabi_dmul>
 80186fc:	4b2d      	ldr	r3, [pc, #180]	; (80187b4 <_dtoa_r+0x624>)
 80186fe:	4682      	mov	sl, r0
 8018700:	468b      	mov	fp, r1
 8018702:	4640      	mov	r0, r8
 8018704:	4649      	mov	r1, r9
 8018706:	2200      	movs	r2, #0
 8018708:	f7e7 ff9e 	bl	8000648 <__aeabi_dmul>
 801870c:	4680      	mov	r8, r0
 801870e:	4689      	mov	r9, r1
 8018710:	e7c6      	b.n	80186a0 <_dtoa_r+0x510>
 8018712:	4650      	mov	r0, sl
 8018714:	4659      	mov	r1, fp
 8018716:	f7e7 ff97 	bl	8000648 <__aeabi_dmul>
 801871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801871c:	9d01      	ldr	r5, [sp, #4]
 801871e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018720:	4682      	mov	sl, r0
 8018722:	468b      	mov	fp, r1
 8018724:	4649      	mov	r1, r9
 8018726:	4640      	mov	r0, r8
 8018728:	f7e8 fa3e 	bl	8000ba8 <__aeabi_d2iz>
 801872c:	4606      	mov	r6, r0
 801872e:	f7e7 ff21 	bl	8000574 <__aeabi_i2d>
 8018732:	3630      	adds	r6, #48	; 0x30
 8018734:	4602      	mov	r2, r0
 8018736:	460b      	mov	r3, r1
 8018738:	4640      	mov	r0, r8
 801873a:	4649      	mov	r1, r9
 801873c:	f7e7 fdcc 	bl	80002d8 <__aeabi_dsub>
 8018740:	f805 6b01 	strb.w	r6, [r5], #1
 8018744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018746:	429d      	cmp	r5, r3
 8018748:	4680      	mov	r8, r0
 801874a:	4689      	mov	r9, r1
 801874c:	f04f 0200 	mov.w	r2, #0
 8018750:	d124      	bne.n	801879c <_dtoa_r+0x60c>
 8018752:	4b1b      	ldr	r3, [pc, #108]	; (80187c0 <_dtoa_r+0x630>)
 8018754:	4650      	mov	r0, sl
 8018756:	4659      	mov	r1, fp
 8018758:	f7e7 fdc0 	bl	80002dc <__adddf3>
 801875c:	4602      	mov	r2, r0
 801875e:	460b      	mov	r3, r1
 8018760:	4640      	mov	r0, r8
 8018762:	4649      	mov	r1, r9
 8018764:	f7e8 fa00 	bl	8000b68 <__aeabi_dcmpgt>
 8018768:	2800      	cmp	r0, #0
 801876a:	d173      	bne.n	8018854 <_dtoa_r+0x6c4>
 801876c:	4652      	mov	r2, sl
 801876e:	465b      	mov	r3, fp
 8018770:	4913      	ldr	r1, [pc, #76]	; (80187c0 <_dtoa_r+0x630>)
 8018772:	2000      	movs	r0, #0
 8018774:	f7e7 fdb0 	bl	80002d8 <__aeabi_dsub>
 8018778:	4602      	mov	r2, r0
 801877a:	460b      	mov	r3, r1
 801877c:	4640      	mov	r0, r8
 801877e:	4649      	mov	r1, r9
 8018780:	f7e8 f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8018784:	2800      	cmp	r0, #0
 8018786:	f43f af35 	beq.w	80185f4 <_dtoa_r+0x464>
 801878a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801878c:	1e6b      	subs	r3, r5, #1
 801878e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018790:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018794:	2b30      	cmp	r3, #48	; 0x30
 8018796:	d0f8      	beq.n	801878a <_dtoa_r+0x5fa>
 8018798:	9700      	str	r7, [sp, #0]
 801879a:	e049      	b.n	8018830 <_dtoa_r+0x6a0>
 801879c:	4b05      	ldr	r3, [pc, #20]	; (80187b4 <_dtoa_r+0x624>)
 801879e:	f7e7 ff53 	bl	8000648 <__aeabi_dmul>
 80187a2:	4680      	mov	r8, r0
 80187a4:	4689      	mov	r9, r1
 80187a6:	e7bd      	b.n	8018724 <_dtoa_r+0x594>
 80187a8:	0801a830 	.word	0x0801a830
 80187ac:	0801a808 	.word	0x0801a808
 80187b0:	3ff00000 	.word	0x3ff00000
 80187b4:	40240000 	.word	0x40240000
 80187b8:	401c0000 	.word	0x401c0000
 80187bc:	40140000 	.word	0x40140000
 80187c0:	3fe00000 	.word	0x3fe00000
 80187c4:	9d01      	ldr	r5, [sp, #4]
 80187c6:	4656      	mov	r6, sl
 80187c8:	465f      	mov	r7, fp
 80187ca:	4642      	mov	r2, r8
 80187cc:	464b      	mov	r3, r9
 80187ce:	4630      	mov	r0, r6
 80187d0:	4639      	mov	r1, r7
 80187d2:	f7e8 f863 	bl	800089c <__aeabi_ddiv>
 80187d6:	f7e8 f9e7 	bl	8000ba8 <__aeabi_d2iz>
 80187da:	4682      	mov	sl, r0
 80187dc:	f7e7 feca 	bl	8000574 <__aeabi_i2d>
 80187e0:	4642      	mov	r2, r8
 80187e2:	464b      	mov	r3, r9
 80187e4:	f7e7 ff30 	bl	8000648 <__aeabi_dmul>
 80187e8:	4602      	mov	r2, r0
 80187ea:	460b      	mov	r3, r1
 80187ec:	4630      	mov	r0, r6
 80187ee:	4639      	mov	r1, r7
 80187f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80187f4:	f7e7 fd70 	bl	80002d8 <__aeabi_dsub>
 80187f8:	f805 6b01 	strb.w	r6, [r5], #1
 80187fc:	9e01      	ldr	r6, [sp, #4]
 80187fe:	9f03      	ldr	r7, [sp, #12]
 8018800:	1bae      	subs	r6, r5, r6
 8018802:	42b7      	cmp	r7, r6
 8018804:	4602      	mov	r2, r0
 8018806:	460b      	mov	r3, r1
 8018808:	d135      	bne.n	8018876 <_dtoa_r+0x6e6>
 801880a:	f7e7 fd67 	bl	80002dc <__adddf3>
 801880e:	4642      	mov	r2, r8
 8018810:	464b      	mov	r3, r9
 8018812:	4606      	mov	r6, r0
 8018814:	460f      	mov	r7, r1
 8018816:	f7e8 f9a7 	bl	8000b68 <__aeabi_dcmpgt>
 801881a:	b9d0      	cbnz	r0, 8018852 <_dtoa_r+0x6c2>
 801881c:	4642      	mov	r2, r8
 801881e:	464b      	mov	r3, r9
 8018820:	4630      	mov	r0, r6
 8018822:	4639      	mov	r1, r7
 8018824:	f7e8 f978 	bl	8000b18 <__aeabi_dcmpeq>
 8018828:	b110      	cbz	r0, 8018830 <_dtoa_r+0x6a0>
 801882a:	f01a 0f01 	tst.w	sl, #1
 801882e:	d110      	bne.n	8018852 <_dtoa_r+0x6c2>
 8018830:	4620      	mov	r0, r4
 8018832:	ee18 1a10 	vmov	r1, s16
 8018836:	f000 fd05 	bl	8019244 <_Bfree>
 801883a:	2300      	movs	r3, #0
 801883c:	9800      	ldr	r0, [sp, #0]
 801883e:	702b      	strb	r3, [r5, #0]
 8018840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018842:	3001      	adds	r0, #1
 8018844:	6018      	str	r0, [r3, #0]
 8018846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018848:	2b00      	cmp	r3, #0
 801884a:	f43f acf1 	beq.w	8018230 <_dtoa_r+0xa0>
 801884e:	601d      	str	r5, [r3, #0]
 8018850:	e4ee      	b.n	8018230 <_dtoa_r+0xa0>
 8018852:	9f00      	ldr	r7, [sp, #0]
 8018854:	462b      	mov	r3, r5
 8018856:	461d      	mov	r5, r3
 8018858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801885c:	2a39      	cmp	r2, #57	; 0x39
 801885e:	d106      	bne.n	801886e <_dtoa_r+0x6de>
 8018860:	9a01      	ldr	r2, [sp, #4]
 8018862:	429a      	cmp	r2, r3
 8018864:	d1f7      	bne.n	8018856 <_dtoa_r+0x6c6>
 8018866:	9901      	ldr	r1, [sp, #4]
 8018868:	2230      	movs	r2, #48	; 0x30
 801886a:	3701      	adds	r7, #1
 801886c:	700a      	strb	r2, [r1, #0]
 801886e:	781a      	ldrb	r2, [r3, #0]
 8018870:	3201      	adds	r2, #1
 8018872:	701a      	strb	r2, [r3, #0]
 8018874:	e790      	b.n	8018798 <_dtoa_r+0x608>
 8018876:	4ba6      	ldr	r3, [pc, #664]	; (8018b10 <_dtoa_r+0x980>)
 8018878:	2200      	movs	r2, #0
 801887a:	f7e7 fee5 	bl	8000648 <__aeabi_dmul>
 801887e:	2200      	movs	r2, #0
 8018880:	2300      	movs	r3, #0
 8018882:	4606      	mov	r6, r0
 8018884:	460f      	mov	r7, r1
 8018886:	f7e8 f947 	bl	8000b18 <__aeabi_dcmpeq>
 801888a:	2800      	cmp	r0, #0
 801888c:	d09d      	beq.n	80187ca <_dtoa_r+0x63a>
 801888e:	e7cf      	b.n	8018830 <_dtoa_r+0x6a0>
 8018890:	9a08      	ldr	r2, [sp, #32]
 8018892:	2a00      	cmp	r2, #0
 8018894:	f000 80d7 	beq.w	8018a46 <_dtoa_r+0x8b6>
 8018898:	9a06      	ldr	r2, [sp, #24]
 801889a:	2a01      	cmp	r2, #1
 801889c:	f300 80ba 	bgt.w	8018a14 <_dtoa_r+0x884>
 80188a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188a2:	2a00      	cmp	r2, #0
 80188a4:	f000 80b2 	beq.w	8018a0c <_dtoa_r+0x87c>
 80188a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80188ac:	9e07      	ldr	r6, [sp, #28]
 80188ae:	9d04      	ldr	r5, [sp, #16]
 80188b0:	9a04      	ldr	r2, [sp, #16]
 80188b2:	441a      	add	r2, r3
 80188b4:	9204      	str	r2, [sp, #16]
 80188b6:	9a05      	ldr	r2, [sp, #20]
 80188b8:	2101      	movs	r1, #1
 80188ba:	441a      	add	r2, r3
 80188bc:	4620      	mov	r0, r4
 80188be:	9205      	str	r2, [sp, #20]
 80188c0:	f000 fd78 	bl	80193b4 <__i2b>
 80188c4:	4607      	mov	r7, r0
 80188c6:	2d00      	cmp	r5, #0
 80188c8:	dd0c      	ble.n	80188e4 <_dtoa_r+0x754>
 80188ca:	9b05      	ldr	r3, [sp, #20]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	dd09      	ble.n	80188e4 <_dtoa_r+0x754>
 80188d0:	42ab      	cmp	r3, r5
 80188d2:	9a04      	ldr	r2, [sp, #16]
 80188d4:	bfa8      	it	ge
 80188d6:	462b      	movge	r3, r5
 80188d8:	1ad2      	subs	r2, r2, r3
 80188da:	9204      	str	r2, [sp, #16]
 80188dc:	9a05      	ldr	r2, [sp, #20]
 80188de:	1aed      	subs	r5, r5, r3
 80188e0:	1ad3      	subs	r3, r2, r3
 80188e2:	9305      	str	r3, [sp, #20]
 80188e4:	9b07      	ldr	r3, [sp, #28]
 80188e6:	b31b      	cbz	r3, 8018930 <_dtoa_r+0x7a0>
 80188e8:	9b08      	ldr	r3, [sp, #32]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	f000 80af 	beq.w	8018a4e <_dtoa_r+0x8be>
 80188f0:	2e00      	cmp	r6, #0
 80188f2:	dd13      	ble.n	801891c <_dtoa_r+0x78c>
 80188f4:	4639      	mov	r1, r7
 80188f6:	4632      	mov	r2, r6
 80188f8:	4620      	mov	r0, r4
 80188fa:	f000 fe1b 	bl	8019534 <__pow5mult>
 80188fe:	ee18 2a10 	vmov	r2, s16
 8018902:	4601      	mov	r1, r0
 8018904:	4607      	mov	r7, r0
 8018906:	4620      	mov	r0, r4
 8018908:	f000 fd6a 	bl	80193e0 <__multiply>
 801890c:	ee18 1a10 	vmov	r1, s16
 8018910:	4680      	mov	r8, r0
 8018912:	4620      	mov	r0, r4
 8018914:	f000 fc96 	bl	8019244 <_Bfree>
 8018918:	ee08 8a10 	vmov	s16, r8
 801891c:	9b07      	ldr	r3, [sp, #28]
 801891e:	1b9a      	subs	r2, r3, r6
 8018920:	d006      	beq.n	8018930 <_dtoa_r+0x7a0>
 8018922:	ee18 1a10 	vmov	r1, s16
 8018926:	4620      	mov	r0, r4
 8018928:	f000 fe04 	bl	8019534 <__pow5mult>
 801892c:	ee08 0a10 	vmov	s16, r0
 8018930:	2101      	movs	r1, #1
 8018932:	4620      	mov	r0, r4
 8018934:	f000 fd3e 	bl	80193b4 <__i2b>
 8018938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801893a:	2b00      	cmp	r3, #0
 801893c:	4606      	mov	r6, r0
 801893e:	f340 8088 	ble.w	8018a52 <_dtoa_r+0x8c2>
 8018942:	461a      	mov	r2, r3
 8018944:	4601      	mov	r1, r0
 8018946:	4620      	mov	r0, r4
 8018948:	f000 fdf4 	bl	8019534 <__pow5mult>
 801894c:	9b06      	ldr	r3, [sp, #24]
 801894e:	2b01      	cmp	r3, #1
 8018950:	4606      	mov	r6, r0
 8018952:	f340 8081 	ble.w	8018a58 <_dtoa_r+0x8c8>
 8018956:	f04f 0800 	mov.w	r8, #0
 801895a:	6933      	ldr	r3, [r6, #16]
 801895c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018960:	6918      	ldr	r0, [r3, #16]
 8018962:	f000 fcd7 	bl	8019314 <__hi0bits>
 8018966:	f1c0 0020 	rsb	r0, r0, #32
 801896a:	9b05      	ldr	r3, [sp, #20]
 801896c:	4418      	add	r0, r3
 801896e:	f010 001f 	ands.w	r0, r0, #31
 8018972:	f000 8092 	beq.w	8018a9a <_dtoa_r+0x90a>
 8018976:	f1c0 0320 	rsb	r3, r0, #32
 801897a:	2b04      	cmp	r3, #4
 801897c:	f340 808a 	ble.w	8018a94 <_dtoa_r+0x904>
 8018980:	f1c0 001c 	rsb	r0, r0, #28
 8018984:	9b04      	ldr	r3, [sp, #16]
 8018986:	4403      	add	r3, r0
 8018988:	9304      	str	r3, [sp, #16]
 801898a:	9b05      	ldr	r3, [sp, #20]
 801898c:	4403      	add	r3, r0
 801898e:	4405      	add	r5, r0
 8018990:	9305      	str	r3, [sp, #20]
 8018992:	9b04      	ldr	r3, [sp, #16]
 8018994:	2b00      	cmp	r3, #0
 8018996:	dd07      	ble.n	80189a8 <_dtoa_r+0x818>
 8018998:	ee18 1a10 	vmov	r1, s16
 801899c:	461a      	mov	r2, r3
 801899e:	4620      	mov	r0, r4
 80189a0:	f000 fe22 	bl	80195e8 <__lshift>
 80189a4:	ee08 0a10 	vmov	s16, r0
 80189a8:	9b05      	ldr	r3, [sp, #20]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	dd05      	ble.n	80189ba <_dtoa_r+0x82a>
 80189ae:	4631      	mov	r1, r6
 80189b0:	461a      	mov	r2, r3
 80189b2:	4620      	mov	r0, r4
 80189b4:	f000 fe18 	bl	80195e8 <__lshift>
 80189b8:	4606      	mov	r6, r0
 80189ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d06e      	beq.n	8018a9e <_dtoa_r+0x90e>
 80189c0:	ee18 0a10 	vmov	r0, s16
 80189c4:	4631      	mov	r1, r6
 80189c6:	f000 fe7f 	bl	80196c8 <__mcmp>
 80189ca:	2800      	cmp	r0, #0
 80189cc:	da67      	bge.n	8018a9e <_dtoa_r+0x90e>
 80189ce:	9b00      	ldr	r3, [sp, #0]
 80189d0:	3b01      	subs	r3, #1
 80189d2:	ee18 1a10 	vmov	r1, s16
 80189d6:	9300      	str	r3, [sp, #0]
 80189d8:	220a      	movs	r2, #10
 80189da:	2300      	movs	r3, #0
 80189dc:	4620      	mov	r0, r4
 80189de:	f000 fc53 	bl	8019288 <__multadd>
 80189e2:	9b08      	ldr	r3, [sp, #32]
 80189e4:	ee08 0a10 	vmov	s16, r0
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	f000 81b1 	beq.w	8018d50 <_dtoa_r+0xbc0>
 80189ee:	2300      	movs	r3, #0
 80189f0:	4639      	mov	r1, r7
 80189f2:	220a      	movs	r2, #10
 80189f4:	4620      	mov	r0, r4
 80189f6:	f000 fc47 	bl	8019288 <__multadd>
 80189fa:	9b02      	ldr	r3, [sp, #8]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	4607      	mov	r7, r0
 8018a00:	f300 808e 	bgt.w	8018b20 <_dtoa_r+0x990>
 8018a04:	9b06      	ldr	r3, [sp, #24]
 8018a06:	2b02      	cmp	r3, #2
 8018a08:	dc51      	bgt.n	8018aae <_dtoa_r+0x91e>
 8018a0a:	e089      	b.n	8018b20 <_dtoa_r+0x990>
 8018a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018a12:	e74b      	b.n	80188ac <_dtoa_r+0x71c>
 8018a14:	9b03      	ldr	r3, [sp, #12]
 8018a16:	1e5e      	subs	r6, r3, #1
 8018a18:	9b07      	ldr	r3, [sp, #28]
 8018a1a:	42b3      	cmp	r3, r6
 8018a1c:	bfbf      	itttt	lt
 8018a1e:	9b07      	ldrlt	r3, [sp, #28]
 8018a20:	9607      	strlt	r6, [sp, #28]
 8018a22:	1af2      	sublt	r2, r6, r3
 8018a24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018a26:	bfb6      	itet	lt
 8018a28:	189b      	addlt	r3, r3, r2
 8018a2a:	1b9e      	subge	r6, r3, r6
 8018a2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018a2e:	9b03      	ldr	r3, [sp, #12]
 8018a30:	bfb8      	it	lt
 8018a32:	2600      	movlt	r6, #0
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	bfb7      	itett	lt
 8018a38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8018a3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8018a40:	1a9d      	sublt	r5, r3, r2
 8018a42:	2300      	movlt	r3, #0
 8018a44:	e734      	b.n	80188b0 <_dtoa_r+0x720>
 8018a46:	9e07      	ldr	r6, [sp, #28]
 8018a48:	9d04      	ldr	r5, [sp, #16]
 8018a4a:	9f08      	ldr	r7, [sp, #32]
 8018a4c:	e73b      	b.n	80188c6 <_dtoa_r+0x736>
 8018a4e:	9a07      	ldr	r2, [sp, #28]
 8018a50:	e767      	b.n	8018922 <_dtoa_r+0x792>
 8018a52:	9b06      	ldr	r3, [sp, #24]
 8018a54:	2b01      	cmp	r3, #1
 8018a56:	dc18      	bgt.n	8018a8a <_dtoa_r+0x8fa>
 8018a58:	f1ba 0f00 	cmp.w	sl, #0
 8018a5c:	d115      	bne.n	8018a8a <_dtoa_r+0x8fa>
 8018a5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a62:	b993      	cbnz	r3, 8018a8a <_dtoa_r+0x8fa>
 8018a64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018a68:	0d1b      	lsrs	r3, r3, #20
 8018a6a:	051b      	lsls	r3, r3, #20
 8018a6c:	b183      	cbz	r3, 8018a90 <_dtoa_r+0x900>
 8018a6e:	9b04      	ldr	r3, [sp, #16]
 8018a70:	3301      	adds	r3, #1
 8018a72:	9304      	str	r3, [sp, #16]
 8018a74:	9b05      	ldr	r3, [sp, #20]
 8018a76:	3301      	adds	r3, #1
 8018a78:	9305      	str	r3, [sp, #20]
 8018a7a:	f04f 0801 	mov.w	r8, #1
 8018a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f47f af6a 	bne.w	801895a <_dtoa_r+0x7ca>
 8018a86:	2001      	movs	r0, #1
 8018a88:	e76f      	b.n	801896a <_dtoa_r+0x7da>
 8018a8a:	f04f 0800 	mov.w	r8, #0
 8018a8e:	e7f6      	b.n	8018a7e <_dtoa_r+0x8ee>
 8018a90:	4698      	mov	r8, r3
 8018a92:	e7f4      	b.n	8018a7e <_dtoa_r+0x8ee>
 8018a94:	f43f af7d 	beq.w	8018992 <_dtoa_r+0x802>
 8018a98:	4618      	mov	r0, r3
 8018a9a:	301c      	adds	r0, #28
 8018a9c:	e772      	b.n	8018984 <_dtoa_r+0x7f4>
 8018a9e:	9b03      	ldr	r3, [sp, #12]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	dc37      	bgt.n	8018b14 <_dtoa_r+0x984>
 8018aa4:	9b06      	ldr	r3, [sp, #24]
 8018aa6:	2b02      	cmp	r3, #2
 8018aa8:	dd34      	ble.n	8018b14 <_dtoa_r+0x984>
 8018aaa:	9b03      	ldr	r3, [sp, #12]
 8018aac:	9302      	str	r3, [sp, #8]
 8018aae:	9b02      	ldr	r3, [sp, #8]
 8018ab0:	b96b      	cbnz	r3, 8018ace <_dtoa_r+0x93e>
 8018ab2:	4631      	mov	r1, r6
 8018ab4:	2205      	movs	r2, #5
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	f000 fbe6 	bl	8019288 <__multadd>
 8018abc:	4601      	mov	r1, r0
 8018abe:	4606      	mov	r6, r0
 8018ac0:	ee18 0a10 	vmov	r0, s16
 8018ac4:	f000 fe00 	bl	80196c8 <__mcmp>
 8018ac8:	2800      	cmp	r0, #0
 8018aca:	f73f adbb 	bgt.w	8018644 <_dtoa_r+0x4b4>
 8018ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ad0:	9d01      	ldr	r5, [sp, #4]
 8018ad2:	43db      	mvns	r3, r3
 8018ad4:	9300      	str	r3, [sp, #0]
 8018ad6:	f04f 0800 	mov.w	r8, #0
 8018ada:	4631      	mov	r1, r6
 8018adc:	4620      	mov	r0, r4
 8018ade:	f000 fbb1 	bl	8019244 <_Bfree>
 8018ae2:	2f00      	cmp	r7, #0
 8018ae4:	f43f aea4 	beq.w	8018830 <_dtoa_r+0x6a0>
 8018ae8:	f1b8 0f00 	cmp.w	r8, #0
 8018aec:	d005      	beq.n	8018afa <_dtoa_r+0x96a>
 8018aee:	45b8      	cmp	r8, r7
 8018af0:	d003      	beq.n	8018afa <_dtoa_r+0x96a>
 8018af2:	4641      	mov	r1, r8
 8018af4:	4620      	mov	r0, r4
 8018af6:	f000 fba5 	bl	8019244 <_Bfree>
 8018afa:	4639      	mov	r1, r7
 8018afc:	4620      	mov	r0, r4
 8018afe:	f000 fba1 	bl	8019244 <_Bfree>
 8018b02:	e695      	b.n	8018830 <_dtoa_r+0x6a0>
 8018b04:	2600      	movs	r6, #0
 8018b06:	4637      	mov	r7, r6
 8018b08:	e7e1      	b.n	8018ace <_dtoa_r+0x93e>
 8018b0a:	9700      	str	r7, [sp, #0]
 8018b0c:	4637      	mov	r7, r6
 8018b0e:	e599      	b.n	8018644 <_dtoa_r+0x4b4>
 8018b10:	40240000 	.word	0x40240000
 8018b14:	9b08      	ldr	r3, [sp, #32]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	f000 80ca 	beq.w	8018cb0 <_dtoa_r+0xb20>
 8018b1c:	9b03      	ldr	r3, [sp, #12]
 8018b1e:	9302      	str	r3, [sp, #8]
 8018b20:	2d00      	cmp	r5, #0
 8018b22:	dd05      	ble.n	8018b30 <_dtoa_r+0x9a0>
 8018b24:	4639      	mov	r1, r7
 8018b26:	462a      	mov	r2, r5
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f000 fd5d 	bl	80195e8 <__lshift>
 8018b2e:	4607      	mov	r7, r0
 8018b30:	f1b8 0f00 	cmp.w	r8, #0
 8018b34:	d05b      	beq.n	8018bee <_dtoa_r+0xa5e>
 8018b36:	6879      	ldr	r1, [r7, #4]
 8018b38:	4620      	mov	r0, r4
 8018b3a:	f000 fb43 	bl	80191c4 <_Balloc>
 8018b3e:	4605      	mov	r5, r0
 8018b40:	b928      	cbnz	r0, 8018b4e <_dtoa_r+0x9be>
 8018b42:	4b87      	ldr	r3, [pc, #540]	; (8018d60 <_dtoa_r+0xbd0>)
 8018b44:	4602      	mov	r2, r0
 8018b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018b4a:	f7ff bb3b 	b.w	80181c4 <_dtoa_r+0x34>
 8018b4e:	693a      	ldr	r2, [r7, #16]
 8018b50:	3202      	adds	r2, #2
 8018b52:	0092      	lsls	r2, r2, #2
 8018b54:	f107 010c 	add.w	r1, r7, #12
 8018b58:	300c      	adds	r0, #12
 8018b5a:	f7fe fd1f 	bl	801759c <memcpy>
 8018b5e:	2201      	movs	r2, #1
 8018b60:	4629      	mov	r1, r5
 8018b62:	4620      	mov	r0, r4
 8018b64:	f000 fd40 	bl	80195e8 <__lshift>
 8018b68:	9b01      	ldr	r3, [sp, #4]
 8018b6a:	f103 0901 	add.w	r9, r3, #1
 8018b6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018b72:	4413      	add	r3, r2
 8018b74:	9305      	str	r3, [sp, #20]
 8018b76:	f00a 0301 	and.w	r3, sl, #1
 8018b7a:	46b8      	mov	r8, r7
 8018b7c:	9304      	str	r3, [sp, #16]
 8018b7e:	4607      	mov	r7, r0
 8018b80:	4631      	mov	r1, r6
 8018b82:	ee18 0a10 	vmov	r0, s16
 8018b86:	f7ff fa77 	bl	8018078 <quorem>
 8018b8a:	4641      	mov	r1, r8
 8018b8c:	9002      	str	r0, [sp, #8]
 8018b8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018b92:	ee18 0a10 	vmov	r0, s16
 8018b96:	f000 fd97 	bl	80196c8 <__mcmp>
 8018b9a:	463a      	mov	r2, r7
 8018b9c:	9003      	str	r0, [sp, #12]
 8018b9e:	4631      	mov	r1, r6
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	f000 fdad 	bl	8019700 <__mdiff>
 8018ba6:	68c2      	ldr	r2, [r0, #12]
 8018ba8:	f109 3bff 	add.w	fp, r9, #4294967295
 8018bac:	4605      	mov	r5, r0
 8018bae:	bb02      	cbnz	r2, 8018bf2 <_dtoa_r+0xa62>
 8018bb0:	4601      	mov	r1, r0
 8018bb2:	ee18 0a10 	vmov	r0, s16
 8018bb6:	f000 fd87 	bl	80196c8 <__mcmp>
 8018bba:	4602      	mov	r2, r0
 8018bbc:	4629      	mov	r1, r5
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	9207      	str	r2, [sp, #28]
 8018bc2:	f000 fb3f 	bl	8019244 <_Bfree>
 8018bc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018bca:	ea43 0102 	orr.w	r1, r3, r2
 8018bce:	9b04      	ldr	r3, [sp, #16]
 8018bd0:	430b      	orrs	r3, r1
 8018bd2:	464d      	mov	r5, r9
 8018bd4:	d10f      	bne.n	8018bf6 <_dtoa_r+0xa66>
 8018bd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018bda:	d02a      	beq.n	8018c32 <_dtoa_r+0xaa2>
 8018bdc:	9b03      	ldr	r3, [sp, #12]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	dd02      	ble.n	8018be8 <_dtoa_r+0xa58>
 8018be2:	9b02      	ldr	r3, [sp, #8]
 8018be4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018be8:	f88b a000 	strb.w	sl, [fp]
 8018bec:	e775      	b.n	8018ada <_dtoa_r+0x94a>
 8018bee:	4638      	mov	r0, r7
 8018bf0:	e7ba      	b.n	8018b68 <_dtoa_r+0x9d8>
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	e7e2      	b.n	8018bbc <_dtoa_r+0xa2c>
 8018bf6:	9b03      	ldr	r3, [sp, #12]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	db04      	blt.n	8018c06 <_dtoa_r+0xa76>
 8018bfc:	9906      	ldr	r1, [sp, #24]
 8018bfe:	430b      	orrs	r3, r1
 8018c00:	9904      	ldr	r1, [sp, #16]
 8018c02:	430b      	orrs	r3, r1
 8018c04:	d122      	bne.n	8018c4c <_dtoa_r+0xabc>
 8018c06:	2a00      	cmp	r2, #0
 8018c08:	ddee      	ble.n	8018be8 <_dtoa_r+0xa58>
 8018c0a:	ee18 1a10 	vmov	r1, s16
 8018c0e:	2201      	movs	r2, #1
 8018c10:	4620      	mov	r0, r4
 8018c12:	f000 fce9 	bl	80195e8 <__lshift>
 8018c16:	4631      	mov	r1, r6
 8018c18:	ee08 0a10 	vmov	s16, r0
 8018c1c:	f000 fd54 	bl	80196c8 <__mcmp>
 8018c20:	2800      	cmp	r0, #0
 8018c22:	dc03      	bgt.n	8018c2c <_dtoa_r+0xa9c>
 8018c24:	d1e0      	bne.n	8018be8 <_dtoa_r+0xa58>
 8018c26:	f01a 0f01 	tst.w	sl, #1
 8018c2a:	d0dd      	beq.n	8018be8 <_dtoa_r+0xa58>
 8018c2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018c30:	d1d7      	bne.n	8018be2 <_dtoa_r+0xa52>
 8018c32:	2339      	movs	r3, #57	; 0x39
 8018c34:	f88b 3000 	strb.w	r3, [fp]
 8018c38:	462b      	mov	r3, r5
 8018c3a:	461d      	mov	r5, r3
 8018c3c:	3b01      	subs	r3, #1
 8018c3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018c42:	2a39      	cmp	r2, #57	; 0x39
 8018c44:	d071      	beq.n	8018d2a <_dtoa_r+0xb9a>
 8018c46:	3201      	adds	r2, #1
 8018c48:	701a      	strb	r2, [r3, #0]
 8018c4a:	e746      	b.n	8018ada <_dtoa_r+0x94a>
 8018c4c:	2a00      	cmp	r2, #0
 8018c4e:	dd07      	ble.n	8018c60 <_dtoa_r+0xad0>
 8018c50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018c54:	d0ed      	beq.n	8018c32 <_dtoa_r+0xaa2>
 8018c56:	f10a 0301 	add.w	r3, sl, #1
 8018c5a:	f88b 3000 	strb.w	r3, [fp]
 8018c5e:	e73c      	b.n	8018ada <_dtoa_r+0x94a>
 8018c60:	9b05      	ldr	r3, [sp, #20]
 8018c62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018c66:	4599      	cmp	r9, r3
 8018c68:	d047      	beq.n	8018cfa <_dtoa_r+0xb6a>
 8018c6a:	ee18 1a10 	vmov	r1, s16
 8018c6e:	2300      	movs	r3, #0
 8018c70:	220a      	movs	r2, #10
 8018c72:	4620      	mov	r0, r4
 8018c74:	f000 fb08 	bl	8019288 <__multadd>
 8018c78:	45b8      	cmp	r8, r7
 8018c7a:	ee08 0a10 	vmov	s16, r0
 8018c7e:	f04f 0300 	mov.w	r3, #0
 8018c82:	f04f 020a 	mov.w	r2, #10
 8018c86:	4641      	mov	r1, r8
 8018c88:	4620      	mov	r0, r4
 8018c8a:	d106      	bne.n	8018c9a <_dtoa_r+0xb0a>
 8018c8c:	f000 fafc 	bl	8019288 <__multadd>
 8018c90:	4680      	mov	r8, r0
 8018c92:	4607      	mov	r7, r0
 8018c94:	f109 0901 	add.w	r9, r9, #1
 8018c98:	e772      	b.n	8018b80 <_dtoa_r+0x9f0>
 8018c9a:	f000 faf5 	bl	8019288 <__multadd>
 8018c9e:	4639      	mov	r1, r7
 8018ca0:	4680      	mov	r8, r0
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	220a      	movs	r2, #10
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	f000 faee 	bl	8019288 <__multadd>
 8018cac:	4607      	mov	r7, r0
 8018cae:	e7f1      	b.n	8018c94 <_dtoa_r+0xb04>
 8018cb0:	9b03      	ldr	r3, [sp, #12]
 8018cb2:	9302      	str	r3, [sp, #8]
 8018cb4:	9d01      	ldr	r5, [sp, #4]
 8018cb6:	ee18 0a10 	vmov	r0, s16
 8018cba:	4631      	mov	r1, r6
 8018cbc:	f7ff f9dc 	bl	8018078 <quorem>
 8018cc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018cc4:	9b01      	ldr	r3, [sp, #4]
 8018cc6:	f805 ab01 	strb.w	sl, [r5], #1
 8018cca:	1aea      	subs	r2, r5, r3
 8018ccc:	9b02      	ldr	r3, [sp, #8]
 8018cce:	4293      	cmp	r3, r2
 8018cd0:	dd09      	ble.n	8018ce6 <_dtoa_r+0xb56>
 8018cd2:	ee18 1a10 	vmov	r1, s16
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	220a      	movs	r2, #10
 8018cda:	4620      	mov	r0, r4
 8018cdc:	f000 fad4 	bl	8019288 <__multadd>
 8018ce0:	ee08 0a10 	vmov	s16, r0
 8018ce4:	e7e7      	b.n	8018cb6 <_dtoa_r+0xb26>
 8018ce6:	9b02      	ldr	r3, [sp, #8]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	bfc8      	it	gt
 8018cec:	461d      	movgt	r5, r3
 8018cee:	9b01      	ldr	r3, [sp, #4]
 8018cf0:	bfd8      	it	le
 8018cf2:	2501      	movle	r5, #1
 8018cf4:	441d      	add	r5, r3
 8018cf6:	f04f 0800 	mov.w	r8, #0
 8018cfa:	ee18 1a10 	vmov	r1, s16
 8018cfe:	2201      	movs	r2, #1
 8018d00:	4620      	mov	r0, r4
 8018d02:	f000 fc71 	bl	80195e8 <__lshift>
 8018d06:	4631      	mov	r1, r6
 8018d08:	ee08 0a10 	vmov	s16, r0
 8018d0c:	f000 fcdc 	bl	80196c8 <__mcmp>
 8018d10:	2800      	cmp	r0, #0
 8018d12:	dc91      	bgt.n	8018c38 <_dtoa_r+0xaa8>
 8018d14:	d102      	bne.n	8018d1c <_dtoa_r+0xb8c>
 8018d16:	f01a 0f01 	tst.w	sl, #1
 8018d1a:	d18d      	bne.n	8018c38 <_dtoa_r+0xaa8>
 8018d1c:	462b      	mov	r3, r5
 8018d1e:	461d      	mov	r5, r3
 8018d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018d24:	2a30      	cmp	r2, #48	; 0x30
 8018d26:	d0fa      	beq.n	8018d1e <_dtoa_r+0xb8e>
 8018d28:	e6d7      	b.n	8018ada <_dtoa_r+0x94a>
 8018d2a:	9a01      	ldr	r2, [sp, #4]
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	d184      	bne.n	8018c3a <_dtoa_r+0xaaa>
 8018d30:	9b00      	ldr	r3, [sp, #0]
 8018d32:	3301      	adds	r3, #1
 8018d34:	9300      	str	r3, [sp, #0]
 8018d36:	2331      	movs	r3, #49	; 0x31
 8018d38:	7013      	strb	r3, [r2, #0]
 8018d3a:	e6ce      	b.n	8018ada <_dtoa_r+0x94a>
 8018d3c:	4b09      	ldr	r3, [pc, #36]	; (8018d64 <_dtoa_r+0xbd4>)
 8018d3e:	f7ff ba95 	b.w	801826c <_dtoa_r+0xdc>
 8018d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	f47f aa6e 	bne.w	8018226 <_dtoa_r+0x96>
 8018d4a:	4b07      	ldr	r3, [pc, #28]	; (8018d68 <_dtoa_r+0xbd8>)
 8018d4c:	f7ff ba8e 	b.w	801826c <_dtoa_r+0xdc>
 8018d50:	9b02      	ldr	r3, [sp, #8]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	dcae      	bgt.n	8018cb4 <_dtoa_r+0xb24>
 8018d56:	9b06      	ldr	r3, [sp, #24]
 8018d58:	2b02      	cmp	r3, #2
 8018d5a:	f73f aea8 	bgt.w	8018aae <_dtoa_r+0x91e>
 8018d5e:	e7a9      	b.n	8018cb4 <_dtoa_r+0xb24>
 8018d60:	0801a73b 	.word	0x0801a73b
 8018d64:	0801a698 	.word	0x0801a698
 8018d68:	0801a6bc 	.word	0x0801a6bc

08018d6c <__sflush_r>:
 8018d6c:	898a      	ldrh	r2, [r1, #12]
 8018d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d72:	4605      	mov	r5, r0
 8018d74:	0710      	lsls	r0, r2, #28
 8018d76:	460c      	mov	r4, r1
 8018d78:	d458      	bmi.n	8018e2c <__sflush_r+0xc0>
 8018d7a:	684b      	ldr	r3, [r1, #4]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	dc05      	bgt.n	8018d8c <__sflush_r+0x20>
 8018d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	dc02      	bgt.n	8018d8c <__sflush_r+0x20>
 8018d86:	2000      	movs	r0, #0
 8018d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d8e:	2e00      	cmp	r6, #0
 8018d90:	d0f9      	beq.n	8018d86 <__sflush_r+0x1a>
 8018d92:	2300      	movs	r3, #0
 8018d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018d98:	682f      	ldr	r7, [r5, #0]
 8018d9a:	602b      	str	r3, [r5, #0]
 8018d9c:	d032      	beq.n	8018e04 <__sflush_r+0x98>
 8018d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018da0:	89a3      	ldrh	r3, [r4, #12]
 8018da2:	075a      	lsls	r2, r3, #29
 8018da4:	d505      	bpl.n	8018db2 <__sflush_r+0x46>
 8018da6:	6863      	ldr	r3, [r4, #4]
 8018da8:	1ac0      	subs	r0, r0, r3
 8018daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018dac:	b10b      	cbz	r3, 8018db2 <__sflush_r+0x46>
 8018dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018db0:	1ac0      	subs	r0, r0, r3
 8018db2:	2300      	movs	r3, #0
 8018db4:	4602      	mov	r2, r0
 8018db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018db8:	6a21      	ldr	r1, [r4, #32]
 8018dba:	4628      	mov	r0, r5
 8018dbc:	47b0      	blx	r6
 8018dbe:	1c43      	adds	r3, r0, #1
 8018dc0:	89a3      	ldrh	r3, [r4, #12]
 8018dc2:	d106      	bne.n	8018dd2 <__sflush_r+0x66>
 8018dc4:	6829      	ldr	r1, [r5, #0]
 8018dc6:	291d      	cmp	r1, #29
 8018dc8:	d82c      	bhi.n	8018e24 <__sflush_r+0xb8>
 8018dca:	4a2a      	ldr	r2, [pc, #168]	; (8018e74 <__sflush_r+0x108>)
 8018dcc:	40ca      	lsrs	r2, r1
 8018dce:	07d6      	lsls	r6, r2, #31
 8018dd0:	d528      	bpl.n	8018e24 <__sflush_r+0xb8>
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	6062      	str	r2, [r4, #4]
 8018dd6:	04d9      	lsls	r1, r3, #19
 8018dd8:	6922      	ldr	r2, [r4, #16]
 8018dda:	6022      	str	r2, [r4, #0]
 8018ddc:	d504      	bpl.n	8018de8 <__sflush_r+0x7c>
 8018dde:	1c42      	adds	r2, r0, #1
 8018de0:	d101      	bne.n	8018de6 <__sflush_r+0x7a>
 8018de2:	682b      	ldr	r3, [r5, #0]
 8018de4:	b903      	cbnz	r3, 8018de8 <__sflush_r+0x7c>
 8018de6:	6560      	str	r0, [r4, #84]	; 0x54
 8018de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018dea:	602f      	str	r7, [r5, #0]
 8018dec:	2900      	cmp	r1, #0
 8018dee:	d0ca      	beq.n	8018d86 <__sflush_r+0x1a>
 8018df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018df4:	4299      	cmp	r1, r3
 8018df6:	d002      	beq.n	8018dfe <__sflush_r+0x92>
 8018df8:	4628      	mov	r0, r5
 8018dfa:	f000 fd7d 	bl	80198f8 <_free_r>
 8018dfe:	2000      	movs	r0, #0
 8018e00:	6360      	str	r0, [r4, #52]	; 0x34
 8018e02:	e7c1      	b.n	8018d88 <__sflush_r+0x1c>
 8018e04:	6a21      	ldr	r1, [r4, #32]
 8018e06:	2301      	movs	r3, #1
 8018e08:	4628      	mov	r0, r5
 8018e0a:	47b0      	blx	r6
 8018e0c:	1c41      	adds	r1, r0, #1
 8018e0e:	d1c7      	bne.n	8018da0 <__sflush_r+0x34>
 8018e10:	682b      	ldr	r3, [r5, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d0c4      	beq.n	8018da0 <__sflush_r+0x34>
 8018e16:	2b1d      	cmp	r3, #29
 8018e18:	d001      	beq.n	8018e1e <__sflush_r+0xb2>
 8018e1a:	2b16      	cmp	r3, #22
 8018e1c:	d101      	bne.n	8018e22 <__sflush_r+0xb6>
 8018e1e:	602f      	str	r7, [r5, #0]
 8018e20:	e7b1      	b.n	8018d86 <__sflush_r+0x1a>
 8018e22:	89a3      	ldrh	r3, [r4, #12]
 8018e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e28:	81a3      	strh	r3, [r4, #12]
 8018e2a:	e7ad      	b.n	8018d88 <__sflush_r+0x1c>
 8018e2c:	690f      	ldr	r7, [r1, #16]
 8018e2e:	2f00      	cmp	r7, #0
 8018e30:	d0a9      	beq.n	8018d86 <__sflush_r+0x1a>
 8018e32:	0793      	lsls	r3, r2, #30
 8018e34:	680e      	ldr	r6, [r1, #0]
 8018e36:	bf08      	it	eq
 8018e38:	694b      	ldreq	r3, [r1, #20]
 8018e3a:	600f      	str	r7, [r1, #0]
 8018e3c:	bf18      	it	ne
 8018e3e:	2300      	movne	r3, #0
 8018e40:	eba6 0807 	sub.w	r8, r6, r7
 8018e44:	608b      	str	r3, [r1, #8]
 8018e46:	f1b8 0f00 	cmp.w	r8, #0
 8018e4a:	dd9c      	ble.n	8018d86 <__sflush_r+0x1a>
 8018e4c:	6a21      	ldr	r1, [r4, #32]
 8018e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018e50:	4643      	mov	r3, r8
 8018e52:	463a      	mov	r2, r7
 8018e54:	4628      	mov	r0, r5
 8018e56:	47b0      	blx	r6
 8018e58:	2800      	cmp	r0, #0
 8018e5a:	dc06      	bgt.n	8018e6a <__sflush_r+0xfe>
 8018e5c:	89a3      	ldrh	r3, [r4, #12]
 8018e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e62:	81a3      	strh	r3, [r4, #12]
 8018e64:	f04f 30ff 	mov.w	r0, #4294967295
 8018e68:	e78e      	b.n	8018d88 <__sflush_r+0x1c>
 8018e6a:	4407      	add	r7, r0
 8018e6c:	eba8 0800 	sub.w	r8, r8, r0
 8018e70:	e7e9      	b.n	8018e46 <__sflush_r+0xda>
 8018e72:	bf00      	nop
 8018e74:	20400001 	.word	0x20400001

08018e78 <_fflush_r>:
 8018e78:	b538      	push	{r3, r4, r5, lr}
 8018e7a:	690b      	ldr	r3, [r1, #16]
 8018e7c:	4605      	mov	r5, r0
 8018e7e:	460c      	mov	r4, r1
 8018e80:	b913      	cbnz	r3, 8018e88 <_fflush_r+0x10>
 8018e82:	2500      	movs	r5, #0
 8018e84:	4628      	mov	r0, r5
 8018e86:	bd38      	pop	{r3, r4, r5, pc}
 8018e88:	b118      	cbz	r0, 8018e92 <_fflush_r+0x1a>
 8018e8a:	6983      	ldr	r3, [r0, #24]
 8018e8c:	b90b      	cbnz	r3, 8018e92 <_fflush_r+0x1a>
 8018e8e:	f000 f887 	bl	8018fa0 <__sinit>
 8018e92:	4b14      	ldr	r3, [pc, #80]	; (8018ee4 <_fflush_r+0x6c>)
 8018e94:	429c      	cmp	r4, r3
 8018e96:	d11b      	bne.n	8018ed0 <_fflush_r+0x58>
 8018e98:	686c      	ldr	r4, [r5, #4]
 8018e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d0ef      	beq.n	8018e82 <_fflush_r+0xa>
 8018ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018ea4:	07d0      	lsls	r0, r2, #31
 8018ea6:	d404      	bmi.n	8018eb2 <_fflush_r+0x3a>
 8018ea8:	0599      	lsls	r1, r3, #22
 8018eaa:	d402      	bmi.n	8018eb2 <_fflush_r+0x3a>
 8018eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018eae:	f000 f91a 	bl	80190e6 <__retarget_lock_acquire_recursive>
 8018eb2:	4628      	mov	r0, r5
 8018eb4:	4621      	mov	r1, r4
 8018eb6:	f7ff ff59 	bl	8018d6c <__sflush_r>
 8018eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ebc:	07da      	lsls	r2, r3, #31
 8018ebe:	4605      	mov	r5, r0
 8018ec0:	d4e0      	bmi.n	8018e84 <_fflush_r+0xc>
 8018ec2:	89a3      	ldrh	r3, [r4, #12]
 8018ec4:	059b      	lsls	r3, r3, #22
 8018ec6:	d4dd      	bmi.n	8018e84 <_fflush_r+0xc>
 8018ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018eca:	f000 f90d 	bl	80190e8 <__retarget_lock_release_recursive>
 8018ece:	e7d9      	b.n	8018e84 <_fflush_r+0xc>
 8018ed0:	4b05      	ldr	r3, [pc, #20]	; (8018ee8 <_fflush_r+0x70>)
 8018ed2:	429c      	cmp	r4, r3
 8018ed4:	d101      	bne.n	8018eda <_fflush_r+0x62>
 8018ed6:	68ac      	ldr	r4, [r5, #8]
 8018ed8:	e7df      	b.n	8018e9a <_fflush_r+0x22>
 8018eda:	4b04      	ldr	r3, [pc, #16]	; (8018eec <_fflush_r+0x74>)
 8018edc:	429c      	cmp	r4, r3
 8018ede:	bf08      	it	eq
 8018ee0:	68ec      	ldreq	r4, [r5, #12]
 8018ee2:	e7da      	b.n	8018e9a <_fflush_r+0x22>
 8018ee4:	0801a76c 	.word	0x0801a76c
 8018ee8:	0801a78c 	.word	0x0801a78c
 8018eec:	0801a74c 	.word	0x0801a74c

08018ef0 <std>:
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	b510      	push	{r4, lr}
 8018ef4:	4604      	mov	r4, r0
 8018ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8018efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018efe:	6083      	str	r3, [r0, #8]
 8018f00:	8181      	strh	r1, [r0, #12]
 8018f02:	6643      	str	r3, [r0, #100]	; 0x64
 8018f04:	81c2      	strh	r2, [r0, #14]
 8018f06:	6183      	str	r3, [r0, #24]
 8018f08:	4619      	mov	r1, r3
 8018f0a:	2208      	movs	r2, #8
 8018f0c:	305c      	adds	r0, #92	; 0x5c
 8018f0e:	f7fe fb53 	bl	80175b8 <memset>
 8018f12:	4b05      	ldr	r3, [pc, #20]	; (8018f28 <std+0x38>)
 8018f14:	6263      	str	r3, [r4, #36]	; 0x24
 8018f16:	4b05      	ldr	r3, [pc, #20]	; (8018f2c <std+0x3c>)
 8018f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8018f1a:	4b05      	ldr	r3, [pc, #20]	; (8018f30 <std+0x40>)
 8018f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018f1e:	4b05      	ldr	r3, [pc, #20]	; (8018f34 <std+0x44>)
 8018f20:	6224      	str	r4, [r4, #32]
 8018f22:	6323      	str	r3, [r4, #48]	; 0x30
 8018f24:	bd10      	pop	{r4, pc}
 8018f26:	bf00      	nop
 8018f28:	08019e1d 	.word	0x08019e1d
 8018f2c:	08019e3f 	.word	0x08019e3f
 8018f30:	08019e77 	.word	0x08019e77
 8018f34:	08019e9b 	.word	0x08019e9b

08018f38 <_cleanup_r>:
 8018f38:	4901      	ldr	r1, [pc, #4]	; (8018f40 <_cleanup_r+0x8>)
 8018f3a:	f000 b8af 	b.w	801909c <_fwalk_reent>
 8018f3e:	bf00      	nop
 8018f40:	08018e79 	.word	0x08018e79

08018f44 <__sfmoreglue>:
 8018f44:	b570      	push	{r4, r5, r6, lr}
 8018f46:	2268      	movs	r2, #104	; 0x68
 8018f48:	1e4d      	subs	r5, r1, #1
 8018f4a:	4355      	muls	r5, r2
 8018f4c:	460e      	mov	r6, r1
 8018f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018f52:	f000 fd3d 	bl	80199d0 <_malloc_r>
 8018f56:	4604      	mov	r4, r0
 8018f58:	b140      	cbz	r0, 8018f6c <__sfmoreglue+0x28>
 8018f5a:	2100      	movs	r1, #0
 8018f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8018f60:	300c      	adds	r0, #12
 8018f62:	60a0      	str	r0, [r4, #8]
 8018f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018f68:	f7fe fb26 	bl	80175b8 <memset>
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	bd70      	pop	{r4, r5, r6, pc}

08018f70 <__sfp_lock_acquire>:
 8018f70:	4801      	ldr	r0, [pc, #4]	; (8018f78 <__sfp_lock_acquire+0x8>)
 8018f72:	f000 b8b8 	b.w	80190e6 <__retarget_lock_acquire_recursive>
 8018f76:	bf00      	nop
 8018f78:	2000cafd 	.word	0x2000cafd

08018f7c <__sfp_lock_release>:
 8018f7c:	4801      	ldr	r0, [pc, #4]	; (8018f84 <__sfp_lock_release+0x8>)
 8018f7e:	f000 b8b3 	b.w	80190e8 <__retarget_lock_release_recursive>
 8018f82:	bf00      	nop
 8018f84:	2000cafd 	.word	0x2000cafd

08018f88 <__sinit_lock_acquire>:
 8018f88:	4801      	ldr	r0, [pc, #4]	; (8018f90 <__sinit_lock_acquire+0x8>)
 8018f8a:	f000 b8ac 	b.w	80190e6 <__retarget_lock_acquire_recursive>
 8018f8e:	bf00      	nop
 8018f90:	2000cafe 	.word	0x2000cafe

08018f94 <__sinit_lock_release>:
 8018f94:	4801      	ldr	r0, [pc, #4]	; (8018f9c <__sinit_lock_release+0x8>)
 8018f96:	f000 b8a7 	b.w	80190e8 <__retarget_lock_release_recursive>
 8018f9a:	bf00      	nop
 8018f9c:	2000cafe 	.word	0x2000cafe

08018fa0 <__sinit>:
 8018fa0:	b510      	push	{r4, lr}
 8018fa2:	4604      	mov	r4, r0
 8018fa4:	f7ff fff0 	bl	8018f88 <__sinit_lock_acquire>
 8018fa8:	69a3      	ldr	r3, [r4, #24]
 8018faa:	b11b      	cbz	r3, 8018fb4 <__sinit+0x14>
 8018fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fb0:	f7ff bff0 	b.w	8018f94 <__sinit_lock_release>
 8018fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8018fba:	4b13      	ldr	r3, [pc, #76]	; (8019008 <__sinit+0x68>)
 8018fbc:	4a13      	ldr	r2, [pc, #76]	; (801900c <__sinit+0x6c>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8018fc2:	42a3      	cmp	r3, r4
 8018fc4:	bf04      	itt	eq
 8018fc6:	2301      	moveq	r3, #1
 8018fc8:	61a3      	streq	r3, [r4, #24]
 8018fca:	4620      	mov	r0, r4
 8018fcc:	f000 f820 	bl	8019010 <__sfp>
 8018fd0:	6060      	str	r0, [r4, #4]
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	f000 f81c 	bl	8019010 <__sfp>
 8018fd8:	60a0      	str	r0, [r4, #8]
 8018fda:	4620      	mov	r0, r4
 8018fdc:	f000 f818 	bl	8019010 <__sfp>
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	60e0      	str	r0, [r4, #12]
 8018fe4:	2104      	movs	r1, #4
 8018fe6:	6860      	ldr	r0, [r4, #4]
 8018fe8:	f7ff ff82 	bl	8018ef0 <std>
 8018fec:	68a0      	ldr	r0, [r4, #8]
 8018fee:	2201      	movs	r2, #1
 8018ff0:	2109      	movs	r1, #9
 8018ff2:	f7ff ff7d 	bl	8018ef0 <std>
 8018ff6:	68e0      	ldr	r0, [r4, #12]
 8018ff8:	2202      	movs	r2, #2
 8018ffa:	2112      	movs	r1, #18
 8018ffc:	f7ff ff78 	bl	8018ef0 <std>
 8019000:	2301      	movs	r3, #1
 8019002:	61a3      	str	r3, [r4, #24]
 8019004:	e7d2      	b.n	8018fac <__sinit+0xc>
 8019006:	bf00      	nop
 8019008:	0801a684 	.word	0x0801a684
 801900c:	08018f39 	.word	0x08018f39

08019010 <__sfp>:
 8019010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019012:	4607      	mov	r7, r0
 8019014:	f7ff ffac 	bl	8018f70 <__sfp_lock_acquire>
 8019018:	4b1e      	ldr	r3, [pc, #120]	; (8019094 <__sfp+0x84>)
 801901a:	681e      	ldr	r6, [r3, #0]
 801901c:	69b3      	ldr	r3, [r6, #24]
 801901e:	b913      	cbnz	r3, 8019026 <__sfp+0x16>
 8019020:	4630      	mov	r0, r6
 8019022:	f7ff ffbd 	bl	8018fa0 <__sinit>
 8019026:	3648      	adds	r6, #72	; 0x48
 8019028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801902c:	3b01      	subs	r3, #1
 801902e:	d503      	bpl.n	8019038 <__sfp+0x28>
 8019030:	6833      	ldr	r3, [r6, #0]
 8019032:	b30b      	cbz	r3, 8019078 <__sfp+0x68>
 8019034:	6836      	ldr	r6, [r6, #0]
 8019036:	e7f7      	b.n	8019028 <__sfp+0x18>
 8019038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801903c:	b9d5      	cbnz	r5, 8019074 <__sfp+0x64>
 801903e:	4b16      	ldr	r3, [pc, #88]	; (8019098 <__sfp+0x88>)
 8019040:	60e3      	str	r3, [r4, #12]
 8019042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019046:	6665      	str	r5, [r4, #100]	; 0x64
 8019048:	f000 f84c 	bl	80190e4 <__retarget_lock_init_recursive>
 801904c:	f7ff ff96 	bl	8018f7c <__sfp_lock_release>
 8019050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019058:	6025      	str	r5, [r4, #0]
 801905a:	61a5      	str	r5, [r4, #24]
 801905c:	2208      	movs	r2, #8
 801905e:	4629      	mov	r1, r5
 8019060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019064:	f7fe faa8 	bl	80175b8 <memset>
 8019068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801906c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019070:	4620      	mov	r0, r4
 8019072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019074:	3468      	adds	r4, #104	; 0x68
 8019076:	e7d9      	b.n	801902c <__sfp+0x1c>
 8019078:	2104      	movs	r1, #4
 801907a:	4638      	mov	r0, r7
 801907c:	f7ff ff62 	bl	8018f44 <__sfmoreglue>
 8019080:	4604      	mov	r4, r0
 8019082:	6030      	str	r0, [r6, #0]
 8019084:	2800      	cmp	r0, #0
 8019086:	d1d5      	bne.n	8019034 <__sfp+0x24>
 8019088:	f7ff ff78 	bl	8018f7c <__sfp_lock_release>
 801908c:	230c      	movs	r3, #12
 801908e:	603b      	str	r3, [r7, #0]
 8019090:	e7ee      	b.n	8019070 <__sfp+0x60>
 8019092:	bf00      	nop
 8019094:	0801a684 	.word	0x0801a684
 8019098:	ffff0001 	.word	0xffff0001

0801909c <_fwalk_reent>:
 801909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190a0:	4606      	mov	r6, r0
 80190a2:	4688      	mov	r8, r1
 80190a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80190a8:	2700      	movs	r7, #0
 80190aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80190ae:	f1b9 0901 	subs.w	r9, r9, #1
 80190b2:	d505      	bpl.n	80190c0 <_fwalk_reent+0x24>
 80190b4:	6824      	ldr	r4, [r4, #0]
 80190b6:	2c00      	cmp	r4, #0
 80190b8:	d1f7      	bne.n	80190aa <_fwalk_reent+0xe>
 80190ba:	4638      	mov	r0, r7
 80190bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190c0:	89ab      	ldrh	r3, [r5, #12]
 80190c2:	2b01      	cmp	r3, #1
 80190c4:	d907      	bls.n	80190d6 <_fwalk_reent+0x3a>
 80190c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80190ca:	3301      	adds	r3, #1
 80190cc:	d003      	beq.n	80190d6 <_fwalk_reent+0x3a>
 80190ce:	4629      	mov	r1, r5
 80190d0:	4630      	mov	r0, r6
 80190d2:	47c0      	blx	r8
 80190d4:	4307      	orrs	r7, r0
 80190d6:	3568      	adds	r5, #104	; 0x68
 80190d8:	e7e9      	b.n	80190ae <_fwalk_reent+0x12>
	...

080190dc <_localeconv_r>:
 80190dc:	4800      	ldr	r0, [pc, #0]	; (80190e0 <_localeconv_r+0x4>)
 80190de:	4770      	bx	lr
 80190e0:	20000160 	.word	0x20000160

080190e4 <__retarget_lock_init_recursive>:
 80190e4:	4770      	bx	lr

080190e6 <__retarget_lock_acquire_recursive>:
 80190e6:	4770      	bx	lr

080190e8 <__retarget_lock_release_recursive>:
 80190e8:	4770      	bx	lr

080190ea <__swhatbuf_r>:
 80190ea:	b570      	push	{r4, r5, r6, lr}
 80190ec:	460e      	mov	r6, r1
 80190ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190f2:	2900      	cmp	r1, #0
 80190f4:	b096      	sub	sp, #88	; 0x58
 80190f6:	4614      	mov	r4, r2
 80190f8:	461d      	mov	r5, r3
 80190fa:	da08      	bge.n	801910e <__swhatbuf_r+0x24>
 80190fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019100:	2200      	movs	r2, #0
 8019102:	602a      	str	r2, [r5, #0]
 8019104:	061a      	lsls	r2, r3, #24
 8019106:	d410      	bmi.n	801912a <__swhatbuf_r+0x40>
 8019108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801910c:	e00e      	b.n	801912c <__swhatbuf_r+0x42>
 801910e:	466a      	mov	r2, sp
 8019110:	f000 ff1a 	bl	8019f48 <_fstat_r>
 8019114:	2800      	cmp	r0, #0
 8019116:	dbf1      	blt.n	80190fc <__swhatbuf_r+0x12>
 8019118:	9a01      	ldr	r2, [sp, #4]
 801911a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801911e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019122:	425a      	negs	r2, r3
 8019124:	415a      	adcs	r2, r3
 8019126:	602a      	str	r2, [r5, #0]
 8019128:	e7ee      	b.n	8019108 <__swhatbuf_r+0x1e>
 801912a:	2340      	movs	r3, #64	; 0x40
 801912c:	2000      	movs	r0, #0
 801912e:	6023      	str	r3, [r4, #0]
 8019130:	b016      	add	sp, #88	; 0x58
 8019132:	bd70      	pop	{r4, r5, r6, pc}

08019134 <__smakebuf_r>:
 8019134:	898b      	ldrh	r3, [r1, #12]
 8019136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019138:	079d      	lsls	r5, r3, #30
 801913a:	4606      	mov	r6, r0
 801913c:	460c      	mov	r4, r1
 801913e:	d507      	bpl.n	8019150 <__smakebuf_r+0x1c>
 8019140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019144:	6023      	str	r3, [r4, #0]
 8019146:	6123      	str	r3, [r4, #16]
 8019148:	2301      	movs	r3, #1
 801914a:	6163      	str	r3, [r4, #20]
 801914c:	b002      	add	sp, #8
 801914e:	bd70      	pop	{r4, r5, r6, pc}
 8019150:	ab01      	add	r3, sp, #4
 8019152:	466a      	mov	r2, sp
 8019154:	f7ff ffc9 	bl	80190ea <__swhatbuf_r>
 8019158:	9900      	ldr	r1, [sp, #0]
 801915a:	4605      	mov	r5, r0
 801915c:	4630      	mov	r0, r6
 801915e:	f000 fc37 	bl	80199d0 <_malloc_r>
 8019162:	b948      	cbnz	r0, 8019178 <__smakebuf_r+0x44>
 8019164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019168:	059a      	lsls	r2, r3, #22
 801916a:	d4ef      	bmi.n	801914c <__smakebuf_r+0x18>
 801916c:	f023 0303 	bic.w	r3, r3, #3
 8019170:	f043 0302 	orr.w	r3, r3, #2
 8019174:	81a3      	strh	r3, [r4, #12]
 8019176:	e7e3      	b.n	8019140 <__smakebuf_r+0xc>
 8019178:	4b0d      	ldr	r3, [pc, #52]	; (80191b0 <__smakebuf_r+0x7c>)
 801917a:	62b3      	str	r3, [r6, #40]	; 0x28
 801917c:	89a3      	ldrh	r3, [r4, #12]
 801917e:	6020      	str	r0, [r4, #0]
 8019180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019184:	81a3      	strh	r3, [r4, #12]
 8019186:	9b00      	ldr	r3, [sp, #0]
 8019188:	6163      	str	r3, [r4, #20]
 801918a:	9b01      	ldr	r3, [sp, #4]
 801918c:	6120      	str	r0, [r4, #16]
 801918e:	b15b      	cbz	r3, 80191a8 <__smakebuf_r+0x74>
 8019190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019194:	4630      	mov	r0, r6
 8019196:	f000 fee9 	bl	8019f6c <_isatty_r>
 801919a:	b128      	cbz	r0, 80191a8 <__smakebuf_r+0x74>
 801919c:	89a3      	ldrh	r3, [r4, #12]
 801919e:	f023 0303 	bic.w	r3, r3, #3
 80191a2:	f043 0301 	orr.w	r3, r3, #1
 80191a6:	81a3      	strh	r3, [r4, #12]
 80191a8:	89a0      	ldrh	r0, [r4, #12]
 80191aa:	4305      	orrs	r5, r0
 80191ac:	81a5      	strh	r5, [r4, #12]
 80191ae:	e7cd      	b.n	801914c <__smakebuf_r+0x18>
 80191b0:	08018f39 	.word	0x08018f39

080191b4 <malloc>:
 80191b4:	4b02      	ldr	r3, [pc, #8]	; (80191c0 <malloc+0xc>)
 80191b6:	4601      	mov	r1, r0
 80191b8:	6818      	ldr	r0, [r3, #0]
 80191ba:	f000 bc09 	b.w	80199d0 <_malloc_r>
 80191be:	bf00      	nop
 80191c0:	2000000c 	.word	0x2000000c

080191c4 <_Balloc>:
 80191c4:	b570      	push	{r4, r5, r6, lr}
 80191c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80191c8:	4604      	mov	r4, r0
 80191ca:	460d      	mov	r5, r1
 80191cc:	b976      	cbnz	r6, 80191ec <_Balloc+0x28>
 80191ce:	2010      	movs	r0, #16
 80191d0:	f7ff fff0 	bl	80191b4 <malloc>
 80191d4:	4602      	mov	r2, r0
 80191d6:	6260      	str	r0, [r4, #36]	; 0x24
 80191d8:	b920      	cbnz	r0, 80191e4 <_Balloc+0x20>
 80191da:	4b18      	ldr	r3, [pc, #96]	; (801923c <_Balloc+0x78>)
 80191dc:	4818      	ldr	r0, [pc, #96]	; (8019240 <_Balloc+0x7c>)
 80191de:	2166      	movs	r1, #102	; 0x66
 80191e0:	f000 fe72 	bl	8019ec8 <__assert_func>
 80191e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80191e8:	6006      	str	r6, [r0, #0]
 80191ea:	60c6      	str	r6, [r0, #12]
 80191ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80191ee:	68f3      	ldr	r3, [r6, #12]
 80191f0:	b183      	cbz	r3, 8019214 <_Balloc+0x50>
 80191f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191f4:	68db      	ldr	r3, [r3, #12]
 80191f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80191fa:	b9b8      	cbnz	r0, 801922c <_Balloc+0x68>
 80191fc:	2101      	movs	r1, #1
 80191fe:	fa01 f605 	lsl.w	r6, r1, r5
 8019202:	1d72      	adds	r2, r6, #5
 8019204:	0092      	lsls	r2, r2, #2
 8019206:	4620      	mov	r0, r4
 8019208:	f000 fb60 	bl	80198cc <_calloc_r>
 801920c:	b160      	cbz	r0, 8019228 <_Balloc+0x64>
 801920e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019212:	e00e      	b.n	8019232 <_Balloc+0x6e>
 8019214:	2221      	movs	r2, #33	; 0x21
 8019216:	2104      	movs	r1, #4
 8019218:	4620      	mov	r0, r4
 801921a:	f000 fb57 	bl	80198cc <_calloc_r>
 801921e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019220:	60f0      	str	r0, [r6, #12]
 8019222:	68db      	ldr	r3, [r3, #12]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d1e4      	bne.n	80191f2 <_Balloc+0x2e>
 8019228:	2000      	movs	r0, #0
 801922a:	bd70      	pop	{r4, r5, r6, pc}
 801922c:	6802      	ldr	r2, [r0, #0]
 801922e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019232:	2300      	movs	r3, #0
 8019234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019238:	e7f7      	b.n	801922a <_Balloc+0x66>
 801923a:	bf00      	nop
 801923c:	0801a6c9 	.word	0x0801a6c9
 8019240:	0801a7ac 	.word	0x0801a7ac

08019244 <_Bfree>:
 8019244:	b570      	push	{r4, r5, r6, lr}
 8019246:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019248:	4605      	mov	r5, r0
 801924a:	460c      	mov	r4, r1
 801924c:	b976      	cbnz	r6, 801926c <_Bfree+0x28>
 801924e:	2010      	movs	r0, #16
 8019250:	f7ff ffb0 	bl	80191b4 <malloc>
 8019254:	4602      	mov	r2, r0
 8019256:	6268      	str	r0, [r5, #36]	; 0x24
 8019258:	b920      	cbnz	r0, 8019264 <_Bfree+0x20>
 801925a:	4b09      	ldr	r3, [pc, #36]	; (8019280 <_Bfree+0x3c>)
 801925c:	4809      	ldr	r0, [pc, #36]	; (8019284 <_Bfree+0x40>)
 801925e:	218a      	movs	r1, #138	; 0x8a
 8019260:	f000 fe32 	bl	8019ec8 <__assert_func>
 8019264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019268:	6006      	str	r6, [r0, #0]
 801926a:	60c6      	str	r6, [r0, #12]
 801926c:	b13c      	cbz	r4, 801927e <_Bfree+0x3a>
 801926e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019270:	6862      	ldr	r2, [r4, #4]
 8019272:	68db      	ldr	r3, [r3, #12]
 8019274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019278:	6021      	str	r1, [r4, #0]
 801927a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801927e:	bd70      	pop	{r4, r5, r6, pc}
 8019280:	0801a6c9 	.word	0x0801a6c9
 8019284:	0801a7ac 	.word	0x0801a7ac

08019288 <__multadd>:
 8019288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801928c:	690d      	ldr	r5, [r1, #16]
 801928e:	4607      	mov	r7, r0
 8019290:	460c      	mov	r4, r1
 8019292:	461e      	mov	r6, r3
 8019294:	f101 0c14 	add.w	ip, r1, #20
 8019298:	2000      	movs	r0, #0
 801929a:	f8dc 3000 	ldr.w	r3, [ip]
 801929e:	b299      	uxth	r1, r3
 80192a0:	fb02 6101 	mla	r1, r2, r1, r6
 80192a4:	0c1e      	lsrs	r6, r3, #16
 80192a6:	0c0b      	lsrs	r3, r1, #16
 80192a8:	fb02 3306 	mla	r3, r2, r6, r3
 80192ac:	b289      	uxth	r1, r1
 80192ae:	3001      	adds	r0, #1
 80192b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80192b4:	4285      	cmp	r5, r0
 80192b6:	f84c 1b04 	str.w	r1, [ip], #4
 80192ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80192be:	dcec      	bgt.n	801929a <__multadd+0x12>
 80192c0:	b30e      	cbz	r6, 8019306 <__multadd+0x7e>
 80192c2:	68a3      	ldr	r3, [r4, #8]
 80192c4:	42ab      	cmp	r3, r5
 80192c6:	dc19      	bgt.n	80192fc <__multadd+0x74>
 80192c8:	6861      	ldr	r1, [r4, #4]
 80192ca:	4638      	mov	r0, r7
 80192cc:	3101      	adds	r1, #1
 80192ce:	f7ff ff79 	bl	80191c4 <_Balloc>
 80192d2:	4680      	mov	r8, r0
 80192d4:	b928      	cbnz	r0, 80192e2 <__multadd+0x5a>
 80192d6:	4602      	mov	r2, r0
 80192d8:	4b0c      	ldr	r3, [pc, #48]	; (801930c <__multadd+0x84>)
 80192da:	480d      	ldr	r0, [pc, #52]	; (8019310 <__multadd+0x88>)
 80192dc:	21b5      	movs	r1, #181	; 0xb5
 80192de:	f000 fdf3 	bl	8019ec8 <__assert_func>
 80192e2:	6922      	ldr	r2, [r4, #16]
 80192e4:	3202      	adds	r2, #2
 80192e6:	f104 010c 	add.w	r1, r4, #12
 80192ea:	0092      	lsls	r2, r2, #2
 80192ec:	300c      	adds	r0, #12
 80192ee:	f7fe f955 	bl	801759c <memcpy>
 80192f2:	4621      	mov	r1, r4
 80192f4:	4638      	mov	r0, r7
 80192f6:	f7ff ffa5 	bl	8019244 <_Bfree>
 80192fa:	4644      	mov	r4, r8
 80192fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019300:	3501      	adds	r5, #1
 8019302:	615e      	str	r6, [r3, #20]
 8019304:	6125      	str	r5, [r4, #16]
 8019306:	4620      	mov	r0, r4
 8019308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801930c:	0801a73b 	.word	0x0801a73b
 8019310:	0801a7ac 	.word	0x0801a7ac

08019314 <__hi0bits>:
 8019314:	0c03      	lsrs	r3, r0, #16
 8019316:	041b      	lsls	r3, r3, #16
 8019318:	b9d3      	cbnz	r3, 8019350 <__hi0bits+0x3c>
 801931a:	0400      	lsls	r0, r0, #16
 801931c:	2310      	movs	r3, #16
 801931e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019322:	bf04      	itt	eq
 8019324:	0200      	lsleq	r0, r0, #8
 8019326:	3308      	addeq	r3, #8
 8019328:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801932c:	bf04      	itt	eq
 801932e:	0100      	lsleq	r0, r0, #4
 8019330:	3304      	addeq	r3, #4
 8019332:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019336:	bf04      	itt	eq
 8019338:	0080      	lsleq	r0, r0, #2
 801933a:	3302      	addeq	r3, #2
 801933c:	2800      	cmp	r0, #0
 801933e:	db05      	blt.n	801934c <__hi0bits+0x38>
 8019340:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019344:	f103 0301 	add.w	r3, r3, #1
 8019348:	bf08      	it	eq
 801934a:	2320      	moveq	r3, #32
 801934c:	4618      	mov	r0, r3
 801934e:	4770      	bx	lr
 8019350:	2300      	movs	r3, #0
 8019352:	e7e4      	b.n	801931e <__hi0bits+0xa>

08019354 <__lo0bits>:
 8019354:	6803      	ldr	r3, [r0, #0]
 8019356:	f013 0207 	ands.w	r2, r3, #7
 801935a:	4601      	mov	r1, r0
 801935c:	d00b      	beq.n	8019376 <__lo0bits+0x22>
 801935e:	07da      	lsls	r2, r3, #31
 8019360:	d423      	bmi.n	80193aa <__lo0bits+0x56>
 8019362:	0798      	lsls	r0, r3, #30
 8019364:	bf49      	itett	mi
 8019366:	085b      	lsrmi	r3, r3, #1
 8019368:	089b      	lsrpl	r3, r3, #2
 801936a:	2001      	movmi	r0, #1
 801936c:	600b      	strmi	r3, [r1, #0]
 801936e:	bf5c      	itt	pl
 8019370:	600b      	strpl	r3, [r1, #0]
 8019372:	2002      	movpl	r0, #2
 8019374:	4770      	bx	lr
 8019376:	b298      	uxth	r0, r3
 8019378:	b9a8      	cbnz	r0, 80193a6 <__lo0bits+0x52>
 801937a:	0c1b      	lsrs	r3, r3, #16
 801937c:	2010      	movs	r0, #16
 801937e:	b2da      	uxtb	r2, r3
 8019380:	b90a      	cbnz	r2, 8019386 <__lo0bits+0x32>
 8019382:	3008      	adds	r0, #8
 8019384:	0a1b      	lsrs	r3, r3, #8
 8019386:	071a      	lsls	r2, r3, #28
 8019388:	bf04      	itt	eq
 801938a:	091b      	lsreq	r3, r3, #4
 801938c:	3004      	addeq	r0, #4
 801938e:	079a      	lsls	r2, r3, #30
 8019390:	bf04      	itt	eq
 8019392:	089b      	lsreq	r3, r3, #2
 8019394:	3002      	addeq	r0, #2
 8019396:	07da      	lsls	r2, r3, #31
 8019398:	d403      	bmi.n	80193a2 <__lo0bits+0x4e>
 801939a:	085b      	lsrs	r3, r3, #1
 801939c:	f100 0001 	add.w	r0, r0, #1
 80193a0:	d005      	beq.n	80193ae <__lo0bits+0x5a>
 80193a2:	600b      	str	r3, [r1, #0]
 80193a4:	4770      	bx	lr
 80193a6:	4610      	mov	r0, r2
 80193a8:	e7e9      	b.n	801937e <__lo0bits+0x2a>
 80193aa:	2000      	movs	r0, #0
 80193ac:	4770      	bx	lr
 80193ae:	2020      	movs	r0, #32
 80193b0:	4770      	bx	lr
	...

080193b4 <__i2b>:
 80193b4:	b510      	push	{r4, lr}
 80193b6:	460c      	mov	r4, r1
 80193b8:	2101      	movs	r1, #1
 80193ba:	f7ff ff03 	bl	80191c4 <_Balloc>
 80193be:	4602      	mov	r2, r0
 80193c0:	b928      	cbnz	r0, 80193ce <__i2b+0x1a>
 80193c2:	4b05      	ldr	r3, [pc, #20]	; (80193d8 <__i2b+0x24>)
 80193c4:	4805      	ldr	r0, [pc, #20]	; (80193dc <__i2b+0x28>)
 80193c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80193ca:	f000 fd7d 	bl	8019ec8 <__assert_func>
 80193ce:	2301      	movs	r3, #1
 80193d0:	6144      	str	r4, [r0, #20]
 80193d2:	6103      	str	r3, [r0, #16]
 80193d4:	bd10      	pop	{r4, pc}
 80193d6:	bf00      	nop
 80193d8:	0801a73b 	.word	0x0801a73b
 80193dc:	0801a7ac 	.word	0x0801a7ac

080193e0 <__multiply>:
 80193e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e4:	4691      	mov	r9, r2
 80193e6:	690a      	ldr	r2, [r1, #16]
 80193e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80193ec:	429a      	cmp	r2, r3
 80193ee:	bfb8      	it	lt
 80193f0:	460b      	movlt	r3, r1
 80193f2:	460c      	mov	r4, r1
 80193f4:	bfbc      	itt	lt
 80193f6:	464c      	movlt	r4, r9
 80193f8:	4699      	movlt	r9, r3
 80193fa:	6927      	ldr	r7, [r4, #16]
 80193fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019400:	68a3      	ldr	r3, [r4, #8]
 8019402:	6861      	ldr	r1, [r4, #4]
 8019404:	eb07 060a 	add.w	r6, r7, sl
 8019408:	42b3      	cmp	r3, r6
 801940a:	b085      	sub	sp, #20
 801940c:	bfb8      	it	lt
 801940e:	3101      	addlt	r1, #1
 8019410:	f7ff fed8 	bl	80191c4 <_Balloc>
 8019414:	b930      	cbnz	r0, 8019424 <__multiply+0x44>
 8019416:	4602      	mov	r2, r0
 8019418:	4b44      	ldr	r3, [pc, #272]	; (801952c <__multiply+0x14c>)
 801941a:	4845      	ldr	r0, [pc, #276]	; (8019530 <__multiply+0x150>)
 801941c:	f240 115d 	movw	r1, #349	; 0x15d
 8019420:	f000 fd52 	bl	8019ec8 <__assert_func>
 8019424:	f100 0514 	add.w	r5, r0, #20
 8019428:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801942c:	462b      	mov	r3, r5
 801942e:	2200      	movs	r2, #0
 8019430:	4543      	cmp	r3, r8
 8019432:	d321      	bcc.n	8019478 <__multiply+0x98>
 8019434:	f104 0314 	add.w	r3, r4, #20
 8019438:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801943c:	f109 0314 	add.w	r3, r9, #20
 8019440:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019444:	9202      	str	r2, [sp, #8]
 8019446:	1b3a      	subs	r2, r7, r4
 8019448:	3a15      	subs	r2, #21
 801944a:	f022 0203 	bic.w	r2, r2, #3
 801944e:	3204      	adds	r2, #4
 8019450:	f104 0115 	add.w	r1, r4, #21
 8019454:	428f      	cmp	r7, r1
 8019456:	bf38      	it	cc
 8019458:	2204      	movcc	r2, #4
 801945a:	9201      	str	r2, [sp, #4]
 801945c:	9a02      	ldr	r2, [sp, #8]
 801945e:	9303      	str	r3, [sp, #12]
 8019460:	429a      	cmp	r2, r3
 8019462:	d80c      	bhi.n	801947e <__multiply+0x9e>
 8019464:	2e00      	cmp	r6, #0
 8019466:	dd03      	ble.n	8019470 <__multiply+0x90>
 8019468:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801946c:	2b00      	cmp	r3, #0
 801946e:	d05a      	beq.n	8019526 <__multiply+0x146>
 8019470:	6106      	str	r6, [r0, #16]
 8019472:	b005      	add	sp, #20
 8019474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019478:	f843 2b04 	str.w	r2, [r3], #4
 801947c:	e7d8      	b.n	8019430 <__multiply+0x50>
 801947e:	f8b3 a000 	ldrh.w	sl, [r3]
 8019482:	f1ba 0f00 	cmp.w	sl, #0
 8019486:	d024      	beq.n	80194d2 <__multiply+0xf2>
 8019488:	f104 0e14 	add.w	lr, r4, #20
 801948c:	46a9      	mov	r9, r5
 801948e:	f04f 0c00 	mov.w	ip, #0
 8019492:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019496:	f8d9 1000 	ldr.w	r1, [r9]
 801949a:	fa1f fb82 	uxth.w	fp, r2
 801949e:	b289      	uxth	r1, r1
 80194a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80194a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80194a8:	f8d9 2000 	ldr.w	r2, [r9]
 80194ac:	4461      	add	r1, ip
 80194ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80194b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80194b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80194ba:	b289      	uxth	r1, r1
 80194bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80194c0:	4577      	cmp	r7, lr
 80194c2:	f849 1b04 	str.w	r1, [r9], #4
 80194c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80194ca:	d8e2      	bhi.n	8019492 <__multiply+0xb2>
 80194cc:	9a01      	ldr	r2, [sp, #4]
 80194ce:	f845 c002 	str.w	ip, [r5, r2]
 80194d2:	9a03      	ldr	r2, [sp, #12]
 80194d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80194d8:	3304      	adds	r3, #4
 80194da:	f1b9 0f00 	cmp.w	r9, #0
 80194de:	d020      	beq.n	8019522 <__multiply+0x142>
 80194e0:	6829      	ldr	r1, [r5, #0]
 80194e2:	f104 0c14 	add.w	ip, r4, #20
 80194e6:	46ae      	mov	lr, r5
 80194e8:	f04f 0a00 	mov.w	sl, #0
 80194ec:	f8bc b000 	ldrh.w	fp, [ip]
 80194f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80194f4:	fb09 220b 	mla	r2, r9, fp, r2
 80194f8:	4492      	add	sl, r2
 80194fa:	b289      	uxth	r1, r1
 80194fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019500:	f84e 1b04 	str.w	r1, [lr], #4
 8019504:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019508:	f8be 1000 	ldrh.w	r1, [lr]
 801950c:	0c12      	lsrs	r2, r2, #16
 801950e:	fb09 1102 	mla	r1, r9, r2, r1
 8019512:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019516:	4567      	cmp	r7, ip
 8019518:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801951c:	d8e6      	bhi.n	80194ec <__multiply+0x10c>
 801951e:	9a01      	ldr	r2, [sp, #4]
 8019520:	50a9      	str	r1, [r5, r2]
 8019522:	3504      	adds	r5, #4
 8019524:	e79a      	b.n	801945c <__multiply+0x7c>
 8019526:	3e01      	subs	r6, #1
 8019528:	e79c      	b.n	8019464 <__multiply+0x84>
 801952a:	bf00      	nop
 801952c:	0801a73b 	.word	0x0801a73b
 8019530:	0801a7ac 	.word	0x0801a7ac

08019534 <__pow5mult>:
 8019534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019538:	4615      	mov	r5, r2
 801953a:	f012 0203 	ands.w	r2, r2, #3
 801953e:	4606      	mov	r6, r0
 8019540:	460f      	mov	r7, r1
 8019542:	d007      	beq.n	8019554 <__pow5mult+0x20>
 8019544:	4c25      	ldr	r4, [pc, #148]	; (80195dc <__pow5mult+0xa8>)
 8019546:	3a01      	subs	r2, #1
 8019548:	2300      	movs	r3, #0
 801954a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801954e:	f7ff fe9b 	bl	8019288 <__multadd>
 8019552:	4607      	mov	r7, r0
 8019554:	10ad      	asrs	r5, r5, #2
 8019556:	d03d      	beq.n	80195d4 <__pow5mult+0xa0>
 8019558:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801955a:	b97c      	cbnz	r4, 801957c <__pow5mult+0x48>
 801955c:	2010      	movs	r0, #16
 801955e:	f7ff fe29 	bl	80191b4 <malloc>
 8019562:	4602      	mov	r2, r0
 8019564:	6270      	str	r0, [r6, #36]	; 0x24
 8019566:	b928      	cbnz	r0, 8019574 <__pow5mult+0x40>
 8019568:	4b1d      	ldr	r3, [pc, #116]	; (80195e0 <__pow5mult+0xac>)
 801956a:	481e      	ldr	r0, [pc, #120]	; (80195e4 <__pow5mult+0xb0>)
 801956c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019570:	f000 fcaa 	bl	8019ec8 <__assert_func>
 8019574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019578:	6004      	str	r4, [r0, #0]
 801957a:	60c4      	str	r4, [r0, #12]
 801957c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019584:	b94c      	cbnz	r4, 801959a <__pow5mult+0x66>
 8019586:	f240 2171 	movw	r1, #625	; 0x271
 801958a:	4630      	mov	r0, r6
 801958c:	f7ff ff12 	bl	80193b4 <__i2b>
 8019590:	2300      	movs	r3, #0
 8019592:	f8c8 0008 	str.w	r0, [r8, #8]
 8019596:	4604      	mov	r4, r0
 8019598:	6003      	str	r3, [r0, #0]
 801959a:	f04f 0900 	mov.w	r9, #0
 801959e:	07eb      	lsls	r3, r5, #31
 80195a0:	d50a      	bpl.n	80195b8 <__pow5mult+0x84>
 80195a2:	4639      	mov	r1, r7
 80195a4:	4622      	mov	r2, r4
 80195a6:	4630      	mov	r0, r6
 80195a8:	f7ff ff1a 	bl	80193e0 <__multiply>
 80195ac:	4639      	mov	r1, r7
 80195ae:	4680      	mov	r8, r0
 80195b0:	4630      	mov	r0, r6
 80195b2:	f7ff fe47 	bl	8019244 <_Bfree>
 80195b6:	4647      	mov	r7, r8
 80195b8:	106d      	asrs	r5, r5, #1
 80195ba:	d00b      	beq.n	80195d4 <__pow5mult+0xa0>
 80195bc:	6820      	ldr	r0, [r4, #0]
 80195be:	b938      	cbnz	r0, 80195d0 <__pow5mult+0x9c>
 80195c0:	4622      	mov	r2, r4
 80195c2:	4621      	mov	r1, r4
 80195c4:	4630      	mov	r0, r6
 80195c6:	f7ff ff0b 	bl	80193e0 <__multiply>
 80195ca:	6020      	str	r0, [r4, #0]
 80195cc:	f8c0 9000 	str.w	r9, [r0]
 80195d0:	4604      	mov	r4, r0
 80195d2:	e7e4      	b.n	801959e <__pow5mult+0x6a>
 80195d4:	4638      	mov	r0, r7
 80195d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195da:	bf00      	nop
 80195dc:	0801a8f8 	.word	0x0801a8f8
 80195e0:	0801a6c9 	.word	0x0801a6c9
 80195e4:	0801a7ac 	.word	0x0801a7ac

080195e8 <__lshift>:
 80195e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195ec:	460c      	mov	r4, r1
 80195ee:	6849      	ldr	r1, [r1, #4]
 80195f0:	6923      	ldr	r3, [r4, #16]
 80195f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80195f6:	68a3      	ldr	r3, [r4, #8]
 80195f8:	4607      	mov	r7, r0
 80195fa:	4691      	mov	r9, r2
 80195fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019600:	f108 0601 	add.w	r6, r8, #1
 8019604:	42b3      	cmp	r3, r6
 8019606:	db0b      	blt.n	8019620 <__lshift+0x38>
 8019608:	4638      	mov	r0, r7
 801960a:	f7ff fddb 	bl	80191c4 <_Balloc>
 801960e:	4605      	mov	r5, r0
 8019610:	b948      	cbnz	r0, 8019626 <__lshift+0x3e>
 8019612:	4602      	mov	r2, r0
 8019614:	4b2a      	ldr	r3, [pc, #168]	; (80196c0 <__lshift+0xd8>)
 8019616:	482b      	ldr	r0, [pc, #172]	; (80196c4 <__lshift+0xdc>)
 8019618:	f240 11d9 	movw	r1, #473	; 0x1d9
 801961c:	f000 fc54 	bl	8019ec8 <__assert_func>
 8019620:	3101      	adds	r1, #1
 8019622:	005b      	lsls	r3, r3, #1
 8019624:	e7ee      	b.n	8019604 <__lshift+0x1c>
 8019626:	2300      	movs	r3, #0
 8019628:	f100 0114 	add.w	r1, r0, #20
 801962c:	f100 0210 	add.w	r2, r0, #16
 8019630:	4618      	mov	r0, r3
 8019632:	4553      	cmp	r3, sl
 8019634:	db37      	blt.n	80196a6 <__lshift+0xbe>
 8019636:	6920      	ldr	r0, [r4, #16]
 8019638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801963c:	f104 0314 	add.w	r3, r4, #20
 8019640:	f019 091f 	ands.w	r9, r9, #31
 8019644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019648:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801964c:	d02f      	beq.n	80196ae <__lshift+0xc6>
 801964e:	f1c9 0e20 	rsb	lr, r9, #32
 8019652:	468a      	mov	sl, r1
 8019654:	f04f 0c00 	mov.w	ip, #0
 8019658:	681a      	ldr	r2, [r3, #0]
 801965a:	fa02 f209 	lsl.w	r2, r2, r9
 801965e:	ea42 020c 	orr.w	r2, r2, ip
 8019662:	f84a 2b04 	str.w	r2, [sl], #4
 8019666:	f853 2b04 	ldr.w	r2, [r3], #4
 801966a:	4298      	cmp	r0, r3
 801966c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019670:	d8f2      	bhi.n	8019658 <__lshift+0x70>
 8019672:	1b03      	subs	r3, r0, r4
 8019674:	3b15      	subs	r3, #21
 8019676:	f023 0303 	bic.w	r3, r3, #3
 801967a:	3304      	adds	r3, #4
 801967c:	f104 0215 	add.w	r2, r4, #21
 8019680:	4290      	cmp	r0, r2
 8019682:	bf38      	it	cc
 8019684:	2304      	movcc	r3, #4
 8019686:	f841 c003 	str.w	ip, [r1, r3]
 801968a:	f1bc 0f00 	cmp.w	ip, #0
 801968e:	d001      	beq.n	8019694 <__lshift+0xac>
 8019690:	f108 0602 	add.w	r6, r8, #2
 8019694:	3e01      	subs	r6, #1
 8019696:	4638      	mov	r0, r7
 8019698:	612e      	str	r6, [r5, #16]
 801969a:	4621      	mov	r1, r4
 801969c:	f7ff fdd2 	bl	8019244 <_Bfree>
 80196a0:	4628      	mov	r0, r5
 80196a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80196aa:	3301      	adds	r3, #1
 80196ac:	e7c1      	b.n	8019632 <__lshift+0x4a>
 80196ae:	3904      	subs	r1, #4
 80196b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80196b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80196b8:	4298      	cmp	r0, r3
 80196ba:	d8f9      	bhi.n	80196b0 <__lshift+0xc8>
 80196bc:	e7ea      	b.n	8019694 <__lshift+0xac>
 80196be:	bf00      	nop
 80196c0:	0801a73b 	.word	0x0801a73b
 80196c4:	0801a7ac 	.word	0x0801a7ac

080196c8 <__mcmp>:
 80196c8:	b530      	push	{r4, r5, lr}
 80196ca:	6902      	ldr	r2, [r0, #16]
 80196cc:	690c      	ldr	r4, [r1, #16]
 80196ce:	1b12      	subs	r2, r2, r4
 80196d0:	d10e      	bne.n	80196f0 <__mcmp+0x28>
 80196d2:	f100 0314 	add.w	r3, r0, #20
 80196d6:	3114      	adds	r1, #20
 80196d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80196dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80196e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80196e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80196e8:	42a5      	cmp	r5, r4
 80196ea:	d003      	beq.n	80196f4 <__mcmp+0x2c>
 80196ec:	d305      	bcc.n	80196fa <__mcmp+0x32>
 80196ee:	2201      	movs	r2, #1
 80196f0:	4610      	mov	r0, r2
 80196f2:	bd30      	pop	{r4, r5, pc}
 80196f4:	4283      	cmp	r3, r0
 80196f6:	d3f3      	bcc.n	80196e0 <__mcmp+0x18>
 80196f8:	e7fa      	b.n	80196f0 <__mcmp+0x28>
 80196fa:	f04f 32ff 	mov.w	r2, #4294967295
 80196fe:	e7f7      	b.n	80196f0 <__mcmp+0x28>

08019700 <__mdiff>:
 8019700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019704:	460c      	mov	r4, r1
 8019706:	4606      	mov	r6, r0
 8019708:	4611      	mov	r1, r2
 801970a:	4620      	mov	r0, r4
 801970c:	4690      	mov	r8, r2
 801970e:	f7ff ffdb 	bl	80196c8 <__mcmp>
 8019712:	1e05      	subs	r5, r0, #0
 8019714:	d110      	bne.n	8019738 <__mdiff+0x38>
 8019716:	4629      	mov	r1, r5
 8019718:	4630      	mov	r0, r6
 801971a:	f7ff fd53 	bl	80191c4 <_Balloc>
 801971e:	b930      	cbnz	r0, 801972e <__mdiff+0x2e>
 8019720:	4b3a      	ldr	r3, [pc, #232]	; (801980c <__mdiff+0x10c>)
 8019722:	4602      	mov	r2, r0
 8019724:	f240 2132 	movw	r1, #562	; 0x232
 8019728:	4839      	ldr	r0, [pc, #228]	; (8019810 <__mdiff+0x110>)
 801972a:	f000 fbcd 	bl	8019ec8 <__assert_func>
 801972e:	2301      	movs	r3, #1
 8019730:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019738:	bfa4      	itt	ge
 801973a:	4643      	movge	r3, r8
 801973c:	46a0      	movge	r8, r4
 801973e:	4630      	mov	r0, r6
 8019740:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019744:	bfa6      	itte	ge
 8019746:	461c      	movge	r4, r3
 8019748:	2500      	movge	r5, #0
 801974a:	2501      	movlt	r5, #1
 801974c:	f7ff fd3a 	bl	80191c4 <_Balloc>
 8019750:	b920      	cbnz	r0, 801975c <__mdiff+0x5c>
 8019752:	4b2e      	ldr	r3, [pc, #184]	; (801980c <__mdiff+0x10c>)
 8019754:	4602      	mov	r2, r0
 8019756:	f44f 7110 	mov.w	r1, #576	; 0x240
 801975a:	e7e5      	b.n	8019728 <__mdiff+0x28>
 801975c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019760:	6926      	ldr	r6, [r4, #16]
 8019762:	60c5      	str	r5, [r0, #12]
 8019764:	f104 0914 	add.w	r9, r4, #20
 8019768:	f108 0514 	add.w	r5, r8, #20
 801976c:	f100 0e14 	add.w	lr, r0, #20
 8019770:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019774:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019778:	f108 0210 	add.w	r2, r8, #16
 801977c:	46f2      	mov	sl, lr
 801977e:	2100      	movs	r1, #0
 8019780:	f859 3b04 	ldr.w	r3, [r9], #4
 8019784:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019788:	fa1f f883 	uxth.w	r8, r3
 801978c:	fa11 f18b 	uxtah	r1, r1, fp
 8019790:	0c1b      	lsrs	r3, r3, #16
 8019792:	eba1 0808 	sub.w	r8, r1, r8
 8019796:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801979a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801979e:	fa1f f888 	uxth.w	r8, r8
 80197a2:	1419      	asrs	r1, r3, #16
 80197a4:	454e      	cmp	r6, r9
 80197a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80197aa:	f84a 3b04 	str.w	r3, [sl], #4
 80197ae:	d8e7      	bhi.n	8019780 <__mdiff+0x80>
 80197b0:	1b33      	subs	r3, r6, r4
 80197b2:	3b15      	subs	r3, #21
 80197b4:	f023 0303 	bic.w	r3, r3, #3
 80197b8:	3304      	adds	r3, #4
 80197ba:	3415      	adds	r4, #21
 80197bc:	42a6      	cmp	r6, r4
 80197be:	bf38      	it	cc
 80197c0:	2304      	movcc	r3, #4
 80197c2:	441d      	add	r5, r3
 80197c4:	4473      	add	r3, lr
 80197c6:	469e      	mov	lr, r3
 80197c8:	462e      	mov	r6, r5
 80197ca:	4566      	cmp	r6, ip
 80197cc:	d30e      	bcc.n	80197ec <__mdiff+0xec>
 80197ce:	f10c 0203 	add.w	r2, ip, #3
 80197d2:	1b52      	subs	r2, r2, r5
 80197d4:	f022 0203 	bic.w	r2, r2, #3
 80197d8:	3d03      	subs	r5, #3
 80197da:	45ac      	cmp	ip, r5
 80197dc:	bf38      	it	cc
 80197de:	2200      	movcc	r2, #0
 80197e0:	441a      	add	r2, r3
 80197e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80197e6:	b17b      	cbz	r3, 8019808 <__mdiff+0x108>
 80197e8:	6107      	str	r7, [r0, #16]
 80197ea:	e7a3      	b.n	8019734 <__mdiff+0x34>
 80197ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80197f0:	fa11 f288 	uxtah	r2, r1, r8
 80197f4:	1414      	asrs	r4, r2, #16
 80197f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80197fa:	b292      	uxth	r2, r2
 80197fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019800:	f84e 2b04 	str.w	r2, [lr], #4
 8019804:	1421      	asrs	r1, r4, #16
 8019806:	e7e0      	b.n	80197ca <__mdiff+0xca>
 8019808:	3f01      	subs	r7, #1
 801980a:	e7ea      	b.n	80197e2 <__mdiff+0xe2>
 801980c:	0801a73b 	.word	0x0801a73b
 8019810:	0801a7ac 	.word	0x0801a7ac

08019814 <__d2b>:
 8019814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019818:	4689      	mov	r9, r1
 801981a:	2101      	movs	r1, #1
 801981c:	ec57 6b10 	vmov	r6, r7, d0
 8019820:	4690      	mov	r8, r2
 8019822:	f7ff fccf 	bl	80191c4 <_Balloc>
 8019826:	4604      	mov	r4, r0
 8019828:	b930      	cbnz	r0, 8019838 <__d2b+0x24>
 801982a:	4602      	mov	r2, r0
 801982c:	4b25      	ldr	r3, [pc, #148]	; (80198c4 <__d2b+0xb0>)
 801982e:	4826      	ldr	r0, [pc, #152]	; (80198c8 <__d2b+0xb4>)
 8019830:	f240 310a 	movw	r1, #778	; 0x30a
 8019834:	f000 fb48 	bl	8019ec8 <__assert_func>
 8019838:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801983c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019840:	bb35      	cbnz	r5, 8019890 <__d2b+0x7c>
 8019842:	2e00      	cmp	r6, #0
 8019844:	9301      	str	r3, [sp, #4]
 8019846:	d028      	beq.n	801989a <__d2b+0x86>
 8019848:	4668      	mov	r0, sp
 801984a:	9600      	str	r6, [sp, #0]
 801984c:	f7ff fd82 	bl	8019354 <__lo0bits>
 8019850:	9900      	ldr	r1, [sp, #0]
 8019852:	b300      	cbz	r0, 8019896 <__d2b+0x82>
 8019854:	9a01      	ldr	r2, [sp, #4]
 8019856:	f1c0 0320 	rsb	r3, r0, #32
 801985a:	fa02 f303 	lsl.w	r3, r2, r3
 801985e:	430b      	orrs	r3, r1
 8019860:	40c2      	lsrs	r2, r0
 8019862:	6163      	str	r3, [r4, #20]
 8019864:	9201      	str	r2, [sp, #4]
 8019866:	9b01      	ldr	r3, [sp, #4]
 8019868:	61a3      	str	r3, [r4, #24]
 801986a:	2b00      	cmp	r3, #0
 801986c:	bf14      	ite	ne
 801986e:	2202      	movne	r2, #2
 8019870:	2201      	moveq	r2, #1
 8019872:	6122      	str	r2, [r4, #16]
 8019874:	b1d5      	cbz	r5, 80198ac <__d2b+0x98>
 8019876:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801987a:	4405      	add	r5, r0
 801987c:	f8c9 5000 	str.w	r5, [r9]
 8019880:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019884:	f8c8 0000 	str.w	r0, [r8]
 8019888:	4620      	mov	r0, r4
 801988a:	b003      	add	sp, #12
 801988c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019894:	e7d5      	b.n	8019842 <__d2b+0x2e>
 8019896:	6161      	str	r1, [r4, #20]
 8019898:	e7e5      	b.n	8019866 <__d2b+0x52>
 801989a:	a801      	add	r0, sp, #4
 801989c:	f7ff fd5a 	bl	8019354 <__lo0bits>
 80198a0:	9b01      	ldr	r3, [sp, #4]
 80198a2:	6163      	str	r3, [r4, #20]
 80198a4:	2201      	movs	r2, #1
 80198a6:	6122      	str	r2, [r4, #16]
 80198a8:	3020      	adds	r0, #32
 80198aa:	e7e3      	b.n	8019874 <__d2b+0x60>
 80198ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80198b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80198b4:	f8c9 0000 	str.w	r0, [r9]
 80198b8:	6918      	ldr	r0, [r3, #16]
 80198ba:	f7ff fd2b 	bl	8019314 <__hi0bits>
 80198be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80198c2:	e7df      	b.n	8019884 <__d2b+0x70>
 80198c4:	0801a73b 	.word	0x0801a73b
 80198c8:	0801a7ac 	.word	0x0801a7ac

080198cc <_calloc_r>:
 80198cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198ce:	fba1 2402 	umull	r2, r4, r1, r2
 80198d2:	b94c      	cbnz	r4, 80198e8 <_calloc_r+0x1c>
 80198d4:	4611      	mov	r1, r2
 80198d6:	9201      	str	r2, [sp, #4]
 80198d8:	f000 f87a 	bl	80199d0 <_malloc_r>
 80198dc:	9a01      	ldr	r2, [sp, #4]
 80198de:	4605      	mov	r5, r0
 80198e0:	b930      	cbnz	r0, 80198f0 <_calloc_r+0x24>
 80198e2:	4628      	mov	r0, r5
 80198e4:	b003      	add	sp, #12
 80198e6:	bd30      	pop	{r4, r5, pc}
 80198e8:	220c      	movs	r2, #12
 80198ea:	6002      	str	r2, [r0, #0]
 80198ec:	2500      	movs	r5, #0
 80198ee:	e7f8      	b.n	80198e2 <_calloc_r+0x16>
 80198f0:	4621      	mov	r1, r4
 80198f2:	f7fd fe61 	bl	80175b8 <memset>
 80198f6:	e7f4      	b.n	80198e2 <_calloc_r+0x16>

080198f8 <_free_r>:
 80198f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198fa:	2900      	cmp	r1, #0
 80198fc:	d044      	beq.n	8019988 <_free_r+0x90>
 80198fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019902:	9001      	str	r0, [sp, #4]
 8019904:	2b00      	cmp	r3, #0
 8019906:	f1a1 0404 	sub.w	r4, r1, #4
 801990a:	bfb8      	it	lt
 801990c:	18e4      	addlt	r4, r4, r3
 801990e:	f000 fb61 	bl	8019fd4 <__malloc_lock>
 8019912:	4a1e      	ldr	r2, [pc, #120]	; (801998c <_free_r+0x94>)
 8019914:	9801      	ldr	r0, [sp, #4]
 8019916:	6813      	ldr	r3, [r2, #0]
 8019918:	b933      	cbnz	r3, 8019928 <_free_r+0x30>
 801991a:	6063      	str	r3, [r4, #4]
 801991c:	6014      	str	r4, [r2, #0]
 801991e:	b003      	add	sp, #12
 8019920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019924:	f000 bb5c 	b.w	8019fe0 <__malloc_unlock>
 8019928:	42a3      	cmp	r3, r4
 801992a:	d908      	bls.n	801993e <_free_r+0x46>
 801992c:	6825      	ldr	r5, [r4, #0]
 801992e:	1961      	adds	r1, r4, r5
 8019930:	428b      	cmp	r3, r1
 8019932:	bf01      	itttt	eq
 8019934:	6819      	ldreq	r1, [r3, #0]
 8019936:	685b      	ldreq	r3, [r3, #4]
 8019938:	1949      	addeq	r1, r1, r5
 801993a:	6021      	streq	r1, [r4, #0]
 801993c:	e7ed      	b.n	801991a <_free_r+0x22>
 801993e:	461a      	mov	r2, r3
 8019940:	685b      	ldr	r3, [r3, #4]
 8019942:	b10b      	cbz	r3, 8019948 <_free_r+0x50>
 8019944:	42a3      	cmp	r3, r4
 8019946:	d9fa      	bls.n	801993e <_free_r+0x46>
 8019948:	6811      	ldr	r1, [r2, #0]
 801994a:	1855      	adds	r5, r2, r1
 801994c:	42a5      	cmp	r5, r4
 801994e:	d10b      	bne.n	8019968 <_free_r+0x70>
 8019950:	6824      	ldr	r4, [r4, #0]
 8019952:	4421      	add	r1, r4
 8019954:	1854      	adds	r4, r2, r1
 8019956:	42a3      	cmp	r3, r4
 8019958:	6011      	str	r1, [r2, #0]
 801995a:	d1e0      	bne.n	801991e <_free_r+0x26>
 801995c:	681c      	ldr	r4, [r3, #0]
 801995e:	685b      	ldr	r3, [r3, #4]
 8019960:	6053      	str	r3, [r2, #4]
 8019962:	4421      	add	r1, r4
 8019964:	6011      	str	r1, [r2, #0]
 8019966:	e7da      	b.n	801991e <_free_r+0x26>
 8019968:	d902      	bls.n	8019970 <_free_r+0x78>
 801996a:	230c      	movs	r3, #12
 801996c:	6003      	str	r3, [r0, #0]
 801996e:	e7d6      	b.n	801991e <_free_r+0x26>
 8019970:	6825      	ldr	r5, [r4, #0]
 8019972:	1961      	adds	r1, r4, r5
 8019974:	428b      	cmp	r3, r1
 8019976:	bf04      	itt	eq
 8019978:	6819      	ldreq	r1, [r3, #0]
 801997a:	685b      	ldreq	r3, [r3, #4]
 801997c:	6063      	str	r3, [r4, #4]
 801997e:	bf04      	itt	eq
 8019980:	1949      	addeq	r1, r1, r5
 8019982:	6021      	streq	r1, [r4, #0]
 8019984:	6054      	str	r4, [r2, #4]
 8019986:	e7ca      	b.n	801991e <_free_r+0x26>
 8019988:	b003      	add	sp, #12
 801998a:	bd30      	pop	{r4, r5, pc}
 801998c:	2000cb00 	.word	0x2000cb00

08019990 <sbrk_aligned>:
 8019990:	b570      	push	{r4, r5, r6, lr}
 8019992:	4e0e      	ldr	r6, [pc, #56]	; (80199cc <sbrk_aligned+0x3c>)
 8019994:	460c      	mov	r4, r1
 8019996:	6831      	ldr	r1, [r6, #0]
 8019998:	4605      	mov	r5, r0
 801999a:	b911      	cbnz	r1, 80199a2 <sbrk_aligned+0x12>
 801999c:	f000 fa2e 	bl	8019dfc <_sbrk_r>
 80199a0:	6030      	str	r0, [r6, #0]
 80199a2:	4621      	mov	r1, r4
 80199a4:	4628      	mov	r0, r5
 80199a6:	f000 fa29 	bl	8019dfc <_sbrk_r>
 80199aa:	1c43      	adds	r3, r0, #1
 80199ac:	d00a      	beq.n	80199c4 <sbrk_aligned+0x34>
 80199ae:	1cc4      	adds	r4, r0, #3
 80199b0:	f024 0403 	bic.w	r4, r4, #3
 80199b4:	42a0      	cmp	r0, r4
 80199b6:	d007      	beq.n	80199c8 <sbrk_aligned+0x38>
 80199b8:	1a21      	subs	r1, r4, r0
 80199ba:	4628      	mov	r0, r5
 80199bc:	f000 fa1e 	bl	8019dfc <_sbrk_r>
 80199c0:	3001      	adds	r0, #1
 80199c2:	d101      	bne.n	80199c8 <sbrk_aligned+0x38>
 80199c4:	f04f 34ff 	mov.w	r4, #4294967295
 80199c8:	4620      	mov	r0, r4
 80199ca:	bd70      	pop	{r4, r5, r6, pc}
 80199cc:	2000cb04 	.word	0x2000cb04

080199d0 <_malloc_r>:
 80199d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199d4:	1ccd      	adds	r5, r1, #3
 80199d6:	f025 0503 	bic.w	r5, r5, #3
 80199da:	3508      	adds	r5, #8
 80199dc:	2d0c      	cmp	r5, #12
 80199de:	bf38      	it	cc
 80199e0:	250c      	movcc	r5, #12
 80199e2:	2d00      	cmp	r5, #0
 80199e4:	4607      	mov	r7, r0
 80199e6:	db01      	blt.n	80199ec <_malloc_r+0x1c>
 80199e8:	42a9      	cmp	r1, r5
 80199ea:	d905      	bls.n	80199f8 <_malloc_r+0x28>
 80199ec:	230c      	movs	r3, #12
 80199ee:	603b      	str	r3, [r7, #0]
 80199f0:	2600      	movs	r6, #0
 80199f2:	4630      	mov	r0, r6
 80199f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199f8:	4e2e      	ldr	r6, [pc, #184]	; (8019ab4 <_malloc_r+0xe4>)
 80199fa:	f000 faeb 	bl	8019fd4 <__malloc_lock>
 80199fe:	6833      	ldr	r3, [r6, #0]
 8019a00:	461c      	mov	r4, r3
 8019a02:	bb34      	cbnz	r4, 8019a52 <_malloc_r+0x82>
 8019a04:	4629      	mov	r1, r5
 8019a06:	4638      	mov	r0, r7
 8019a08:	f7ff ffc2 	bl	8019990 <sbrk_aligned>
 8019a0c:	1c43      	adds	r3, r0, #1
 8019a0e:	4604      	mov	r4, r0
 8019a10:	d14d      	bne.n	8019aae <_malloc_r+0xde>
 8019a12:	6834      	ldr	r4, [r6, #0]
 8019a14:	4626      	mov	r6, r4
 8019a16:	2e00      	cmp	r6, #0
 8019a18:	d140      	bne.n	8019a9c <_malloc_r+0xcc>
 8019a1a:	6823      	ldr	r3, [r4, #0]
 8019a1c:	4631      	mov	r1, r6
 8019a1e:	4638      	mov	r0, r7
 8019a20:	eb04 0803 	add.w	r8, r4, r3
 8019a24:	f000 f9ea 	bl	8019dfc <_sbrk_r>
 8019a28:	4580      	cmp	r8, r0
 8019a2a:	d13a      	bne.n	8019aa2 <_malloc_r+0xd2>
 8019a2c:	6821      	ldr	r1, [r4, #0]
 8019a2e:	3503      	adds	r5, #3
 8019a30:	1a6d      	subs	r5, r5, r1
 8019a32:	f025 0503 	bic.w	r5, r5, #3
 8019a36:	3508      	adds	r5, #8
 8019a38:	2d0c      	cmp	r5, #12
 8019a3a:	bf38      	it	cc
 8019a3c:	250c      	movcc	r5, #12
 8019a3e:	4629      	mov	r1, r5
 8019a40:	4638      	mov	r0, r7
 8019a42:	f7ff ffa5 	bl	8019990 <sbrk_aligned>
 8019a46:	3001      	adds	r0, #1
 8019a48:	d02b      	beq.n	8019aa2 <_malloc_r+0xd2>
 8019a4a:	6823      	ldr	r3, [r4, #0]
 8019a4c:	442b      	add	r3, r5
 8019a4e:	6023      	str	r3, [r4, #0]
 8019a50:	e00e      	b.n	8019a70 <_malloc_r+0xa0>
 8019a52:	6822      	ldr	r2, [r4, #0]
 8019a54:	1b52      	subs	r2, r2, r5
 8019a56:	d41e      	bmi.n	8019a96 <_malloc_r+0xc6>
 8019a58:	2a0b      	cmp	r2, #11
 8019a5a:	d916      	bls.n	8019a8a <_malloc_r+0xba>
 8019a5c:	1961      	adds	r1, r4, r5
 8019a5e:	42a3      	cmp	r3, r4
 8019a60:	6025      	str	r5, [r4, #0]
 8019a62:	bf18      	it	ne
 8019a64:	6059      	strne	r1, [r3, #4]
 8019a66:	6863      	ldr	r3, [r4, #4]
 8019a68:	bf08      	it	eq
 8019a6a:	6031      	streq	r1, [r6, #0]
 8019a6c:	5162      	str	r2, [r4, r5]
 8019a6e:	604b      	str	r3, [r1, #4]
 8019a70:	4638      	mov	r0, r7
 8019a72:	f104 060b 	add.w	r6, r4, #11
 8019a76:	f000 fab3 	bl	8019fe0 <__malloc_unlock>
 8019a7a:	f026 0607 	bic.w	r6, r6, #7
 8019a7e:	1d23      	adds	r3, r4, #4
 8019a80:	1af2      	subs	r2, r6, r3
 8019a82:	d0b6      	beq.n	80199f2 <_malloc_r+0x22>
 8019a84:	1b9b      	subs	r3, r3, r6
 8019a86:	50a3      	str	r3, [r4, r2]
 8019a88:	e7b3      	b.n	80199f2 <_malloc_r+0x22>
 8019a8a:	6862      	ldr	r2, [r4, #4]
 8019a8c:	42a3      	cmp	r3, r4
 8019a8e:	bf0c      	ite	eq
 8019a90:	6032      	streq	r2, [r6, #0]
 8019a92:	605a      	strne	r2, [r3, #4]
 8019a94:	e7ec      	b.n	8019a70 <_malloc_r+0xa0>
 8019a96:	4623      	mov	r3, r4
 8019a98:	6864      	ldr	r4, [r4, #4]
 8019a9a:	e7b2      	b.n	8019a02 <_malloc_r+0x32>
 8019a9c:	4634      	mov	r4, r6
 8019a9e:	6876      	ldr	r6, [r6, #4]
 8019aa0:	e7b9      	b.n	8019a16 <_malloc_r+0x46>
 8019aa2:	230c      	movs	r3, #12
 8019aa4:	603b      	str	r3, [r7, #0]
 8019aa6:	4638      	mov	r0, r7
 8019aa8:	f000 fa9a 	bl	8019fe0 <__malloc_unlock>
 8019aac:	e7a1      	b.n	80199f2 <_malloc_r+0x22>
 8019aae:	6025      	str	r5, [r4, #0]
 8019ab0:	e7de      	b.n	8019a70 <_malloc_r+0xa0>
 8019ab2:	bf00      	nop
 8019ab4:	2000cb00 	.word	0x2000cb00

08019ab8 <__sfputc_r>:
 8019ab8:	6893      	ldr	r3, [r2, #8]
 8019aba:	3b01      	subs	r3, #1
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	b410      	push	{r4}
 8019ac0:	6093      	str	r3, [r2, #8]
 8019ac2:	da08      	bge.n	8019ad6 <__sfputc_r+0x1e>
 8019ac4:	6994      	ldr	r4, [r2, #24]
 8019ac6:	42a3      	cmp	r3, r4
 8019ac8:	db01      	blt.n	8019ace <__sfputc_r+0x16>
 8019aca:	290a      	cmp	r1, #10
 8019acc:	d103      	bne.n	8019ad6 <__sfputc_r+0x1e>
 8019ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ad2:	f7fe ba11 	b.w	8017ef8 <__swbuf_r>
 8019ad6:	6813      	ldr	r3, [r2, #0]
 8019ad8:	1c58      	adds	r0, r3, #1
 8019ada:	6010      	str	r0, [r2, #0]
 8019adc:	7019      	strb	r1, [r3, #0]
 8019ade:	4608      	mov	r0, r1
 8019ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ae4:	4770      	bx	lr

08019ae6 <__sfputs_r>:
 8019ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ae8:	4606      	mov	r6, r0
 8019aea:	460f      	mov	r7, r1
 8019aec:	4614      	mov	r4, r2
 8019aee:	18d5      	adds	r5, r2, r3
 8019af0:	42ac      	cmp	r4, r5
 8019af2:	d101      	bne.n	8019af8 <__sfputs_r+0x12>
 8019af4:	2000      	movs	r0, #0
 8019af6:	e007      	b.n	8019b08 <__sfputs_r+0x22>
 8019af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019afc:	463a      	mov	r2, r7
 8019afe:	4630      	mov	r0, r6
 8019b00:	f7ff ffda 	bl	8019ab8 <__sfputc_r>
 8019b04:	1c43      	adds	r3, r0, #1
 8019b06:	d1f3      	bne.n	8019af0 <__sfputs_r+0xa>
 8019b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019b0c <_vfiprintf_r>:
 8019b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b10:	460d      	mov	r5, r1
 8019b12:	b09d      	sub	sp, #116	; 0x74
 8019b14:	4614      	mov	r4, r2
 8019b16:	4698      	mov	r8, r3
 8019b18:	4606      	mov	r6, r0
 8019b1a:	b118      	cbz	r0, 8019b24 <_vfiprintf_r+0x18>
 8019b1c:	6983      	ldr	r3, [r0, #24]
 8019b1e:	b90b      	cbnz	r3, 8019b24 <_vfiprintf_r+0x18>
 8019b20:	f7ff fa3e 	bl	8018fa0 <__sinit>
 8019b24:	4b89      	ldr	r3, [pc, #548]	; (8019d4c <_vfiprintf_r+0x240>)
 8019b26:	429d      	cmp	r5, r3
 8019b28:	d11b      	bne.n	8019b62 <_vfiprintf_r+0x56>
 8019b2a:	6875      	ldr	r5, [r6, #4]
 8019b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b2e:	07d9      	lsls	r1, r3, #31
 8019b30:	d405      	bmi.n	8019b3e <_vfiprintf_r+0x32>
 8019b32:	89ab      	ldrh	r3, [r5, #12]
 8019b34:	059a      	lsls	r2, r3, #22
 8019b36:	d402      	bmi.n	8019b3e <_vfiprintf_r+0x32>
 8019b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b3a:	f7ff fad4 	bl	80190e6 <__retarget_lock_acquire_recursive>
 8019b3e:	89ab      	ldrh	r3, [r5, #12]
 8019b40:	071b      	lsls	r3, r3, #28
 8019b42:	d501      	bpl.n	8019b48 <_vfiprintf_r+0x3c>
 8019b44:	692b      	ldr	r3, [r5, #16]
 8019b46:	b9eb      	cbnz	r3, 8019b84 <_vfiprintf_r+0x78>
 8019b48:	4629      	mov	r1, r5
 8019b4a:	4630      	mov	r0, r6
 8019b4c:	f7fe fa26 	bl	8017f9c <__swsetup_r>
 8019b50:	b1c0      	cbz	r0, 8019b84 <_vfiprintf_r+0x78>
 8019b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b54:	07dc      	lsls	r4, r3, #31
 8019b56:	d50e      	bpl.n	8019b76 <_vfiprintf_r+0x6a>
 8019b58:	f04f 30ff 	mov.w	r0, #4294967295
 8019b5c:	b01d      	add	sp, #116	; 0x74
 8019b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b62:	4b7b      	ldr	r3, [pc, #492]	; (8019d50 <_vfiprintf_r+0x244>)
 8019b64:	429d      	cmp	r5, r3
 8019b66:	d101      	bne.n	8019b6c <_vfiprintf_r+0x60>
 8019b68:	68b5      	ldr	r5, [r6, #8]
 8019b6a:	e7df      	b.n	8019b2c <_vfiprintf_r+0x20>
 8019b6c:	4b79      	ldr	r3, [pc, #484]	; (8019d54 <_vfiprintf_r+0x248>)
 8019b6e:	429d      	cmp	r5, r3
 8019b70:	bf08      	it	eq
 8019b72:	68f5      	ldreq	r5, [r6, #12]
 8019b74:	e7da      	b.n	8019b2c <_vfiprintf_r+0x20>
 8019b76:	89ab      	ldrh	r3, [r5, #12]
 8019b78:	0598      	lsls	r0, r3, #22
 8019b7a:	d4ed      	bmi.n	8019b58 <_vfiprintf_r+0x4c>
 8019b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b7e:	f7ff fab3 	bl	80190e8 <__retarget_lock_release_recursive>
 8019b82:	e7e9      	b.n	8019b58 <_vfiprintf_r+0x4c>
 8019b84:	2300      	movs	r3, #0
 8019b86:	9309      	str	r3, [sp, #36]	; 0x24
 8019b88:	2320      	movs	r3, #32
 8019b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b92:	2330      	movs	r3, #48	; 0x30
 8019b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019d58 <_vfiprintf_r+0x24c>
 8019b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b9c:	f04f 0901 	mov.w	r9, #1
 8019ba0:	4623      	mov	r3, r4
 8019ba2:	469a      	mov	sl, r3
 8019ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ba8:	b10a      	cbz	r2, 8019bae <_vfiprintf_r+0xa2>
 8019baa:	2a25      	cmp	r2, #37	; 0x25
 8019bac:	d1f9      	bne.n	8019ba2 <_vfiprintf_r+0x96>
 8019bae:	ebba 0b04 	subs.w	fp, sl, r4
 8019bb2:	d00b      	beq.n	8019bcc <_vfiprintf_r+0xc0>
 8019bb4:	465b      	mov	r3, fp
 8019bb6:	4622      	mov	r2, r4
 8019bb8:	4629      	mov	r1, r5
 8019bba:	4630      	mov	r0, r6
 8019bbc:	f7ff ff93 	bl	8019ae6 <__sfputs_r>
 8019bc0:	3001      	adds	r0, #1
 8019bc2:	f000 80aa 	beq.w	8019d1a <_vfiprintf_r+0x20e>
 8019bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bc8:	445a      	add	r2, fp
 8019bca:	9209      	str	r2, [sp, #36]	; 0x24
 8019bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	f000 80a2 	beq.w	8019d1a <_vfiprintf_r+0x20e>
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8019bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019be0:	f10a 0a01 	add.w	sl, sl, #1
 8019be4:	9304      	str	r3, [sp, #16]
 8019be6:	9307      	str	r3, [sp, #28]
 8019be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019bec:	931a      	str	r3, [sp, #104]	; 0x68
 8019bee:	4654      	mov	r4, sl
 8019bf0:	2205      	movs	r2, #5
 8019bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bf6:	4858      	ldr	r0, [pc, #352]	; (8019d58 <_vfiprintf_r+0x24c>)
 8019bf8:	f7e6 fb1a 	bl	8000230 <memchr>
 8019bfc:	9a04      	ldr	r2, [sp, #16]
 8019bfe:	b9d8      	cbnz	r0, 8019c38 <_vfiprintf_r+0x12c>
 8019c00:	06d1      	lsls	r1, r2, #27
 8019c02:	bf44      	itt	mi
 8019c04:	2320      	movmi	r3, #32
 8019c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c0a:	0713      	lsls	r3, r2, #28
 8019c0c:	bf44      	itt	mi
 8019c0e:	232b      	movmi	r3, #43	; 0x2b
 8019c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c14:	f89a 3000 	ldrb.w	r3, [sl]
 8019c18:	2b2a      	cmp	r3, #42	; 0x2a
 8019c1a:	d015      	beq.n	8019c48 <_vfiprintf_r+0x13c>
 8019c1c:	9a07      	ldr	r2, [sp, #28]
 8019c1e:	4654      	mov	r4, sl
 8019c20:	2000      	movs	r0, #0
 8019c22:	f04f 0c0a 	mov.w	ip, #10
 8019c26:	4621      	mov	r1, r4
 8019c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c2c:	3b30      	subs	r3, #48	; 0x30
 8019c2e:	2b09      	cmp	r3, #9
 8019c30:	d94e      	bls.n	8019cd0 <_vfiprintf_r+0x1c4>
 8019c32:	b1b0      	cbz	r0, 8019c62 <_vfiprintf_r+0x156>
 8019c34:	9207      	str	r2, [sp, #28]
 8019c36:	e014      	b.n	8019c62 <_vfiprintf_r+0x156>
 8019c38:	eba0 0308 	sub.w	r3, r0, r8
 8019c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8019c40:	4313      	orrs	r3, r2
 8019c42:	9304      	str	r3, [sp, #16]
 8019c44:	46a2      	mov	sl, r4
 8019c46:	e7d2      	b.n	8019bee <_vfiprintf_r+0xe2>
 8019c48:	9b03      	ldr	r3, [sp, #12]
 8019c4a:	1d19      	adds	r1, r3, #4
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	9103      	str	r1, [sp, #12]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	bfbb      	ittet	lt
 8019c54:	425b      	neglt	r3, r3
 8019c56:	f042 0202 	orrlt.w	r2, r2, #2
 8019c5a:	9307      	strge	r3, [sp, #28]
 8019c5c:	9307      	strlt	r3, [sp, #28]
 8019c5e:	bfb8      	it	lt
 8019c60:	9204      	strlt	r2, [sp, #16]
 8019c62:	7823      	ldrb	r3, [r4, #0]
 8019c64:	2b2e      	cmp	r3, #46	; 0x2e
 8019c66:	d10c      	bne.n	8019c82 <_vfiprintf_r+0x176>
 8019c68:	7863      	ldrb	r3, [r4, #1]
 8019c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8019c6c:	d135      	bne.n	8019cda <_vfiprintf_r+0x1ce>
 8019c6e:	9b03      	ldr	r3, [sp, #12]
 8019c70:	1d1a      	adds	r2, r3, #4
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	9203      	str	r2, [sp, #12]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	bfb8      	it	lt
 8019c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c7e:	3402      	adds	r4, #2
 8019c80:	9305      	str	r3, [sp, #20]
 8019c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019d68 <_vfiprintf_r+0x25c>
 8019c86:	7821      	ldrb	r1, [r4, #0]
 8019c88:	2203      	movs	r2, #3
 8019c8a:	4650      	mov	r0, sl
 8019c8c:	f7e6 fad0 	bl	8000230 <memchr>
 8019c90:	b140      	cbz	r0, 8019ca4 <_vfiprintf_r+0x198>
 8019c92:	2340      	movs	r3, #64	; 0x40
 8019c94:	eba0 000a 	sub.w	r0, r0, sl
 8019c98:	fa03 f000 	lsl.w	r0, r3, r0
 8019c9c:	9b04      	ldr	r3, [sp, #16]
 8019c9e:	4303      	orrs	r3, r0
 8019ca0:	3401      	adds	r4, #1
 8019ca2:	9304      	str	r3, [sp, #16]
 8019ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ca8:	482c      	ldr	r0, [pc, #176]	; (8019d5c <_vfiprintf_r+0x250>)
 8019caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019cae:	2206      	movs	r2, #6
 8019cb0:	f7e6 fabe 	bl	8000230 <memchr>
 8019cb4:	2800      	cmp	r0, #0
 8019cb6:	d03f      	beq.n	8019d38 <_vfiprintf_r+0x22c>
 8019cb8:	4b29      	ldr	r3, [pc, #164]	; (8019d60 <_vfiprintf_r+0x254>)
 8019cba:	bb1b      	cbnz	r3, 8019d04 <_vfiprintf_r+0x1f8>
 8019cbc:	9b03      	ldr	r3, [sp, #12]
 8019cbe:	3307      	adds	r3, #7
 8019cc0:	f023 0307 	bic.w	r3, r3, #7
 8019cc4:	3308      	adds	r3, #8
 8019cc6:	9303      	str	r3, [sp, #12]
 8019cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cca:	443b      	add	r3, r7
 8019ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8019cce:	e767      	b.n	8019ba0 <_vfiprintf_r+0x94>
 8019cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8019cd4:	460c      	mov	r4, r1
 8019cd6:	2001      	movs	r0, #1
 8019cd8:	e7a5      	b.n	8019c26 <_vfiprintf_r+0x11a>
 8019cda:	2300      	movs	r3, #0
 8019cdc:	3401      	adds	r4, #1
 8019cde:	9305      	str	r3, [sp, #20]
 8019ce0:	4619      	mov	r1, r3
 8019ce2:	f04f 0c0a 	mov.w	ip, #10
 8019ce6:	4620      	mov	r0, r4
 8019ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019cec:	3a30      	subs	r2, #48	; 0x30
 8019cee:	2a09      	cmp	r2, #9
 8019cf0:	d903      	bls.n	8019cfa <_vfiprintf_r+0x1ee>
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d0c5      	beq.n	8019c82 <_vfiprintf_r+0x176>
 8019cf6:	9105      	str	r1, [sp, #20]
 8019cf8:	e7c3      	b.n	8019c82 <_vfiprintf_r+0x176>
 8019cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8019cfe:	4604      	mov	r4, r0
 8019d00:	2301      	movs	r3, #1
 8019d02:	e7f0      	b.n	8019ce6 <_vfiprintf_r+0x1da>
 8019d04:	ab03      	add	r3, sp, #12
 8019d06:	9300      	str	r3, [sp, #0]
 8019d08:	462a      	mov	r2, r5
 8019d0a:	4b16      	ldr	r3, [pc, #88]	; (8019d64 <_vfiprintf_r+0x258>)
 8019d0c:	a904      	add	r1, sp, #16
 8019d0e:	4630      	mov	r0, r6
 8019d10:	f7fd fcfa 	bl	8017708 <_printf_float>
 8019d14:	4607      	mov	r7, r0
 8019d16:	1c78      	adds	r0, r7, #1
 8019d18:	d1d6      	bne.n	8019cc8 <_vfiprintf_r+0x1bc>
 8019d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d1c:	07d9      	lsls	r1, r3, #31
 8019d1e:	d405      	bmi.n	8019d2c <_vfiprintf_r+0x220>
 8019d20:	89ab      	ldrh	r3, [r5, #12]
 8019d22:	059a      	lsls	r2, r3, #22
 8019d24:	d402      	bmi.n	8019d2c <_vfiprintf_r+0x220>
 8019d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d28:	f7ff f9de 	bl	80190e8 <__retarget_lock_release_recursive>
 8019d2c:	89ab      	ldrh	r3, [r5, #12]
 8019d2e:	065b      	lsls	r3, r3, #25
 8019d30:	f53f af12 	bmi.w	8019b58 <_vfiprintf_r+0x4c>
 8019d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d36:	e711      	b.n	8019b5c <_vfiprintf_r+0x50>
 8019d38:	ab03      	add	r3, sp, #12
 8019d3a:	9300      	str	r3, [sp, #0]
 8019d3c:	462a      	mov	r2, r5
 8019d3e:	4b09      	ldr	r3, [pc, #36]	; (8019d64 <_vfiprintf_r+0x258>)
 8019d40:	a904      	add	r1, sp, #16
 8019d42:	4630      	mov	r0, r6
 8019d44:	f7fd ff84 	bl	8017c50 <_printf_i>
 8019d48:	e7e4      	b.n	8019d14 <_vfiprintf_r+0x208>
 8019d4a:	bf00      	nop
 8019d4c:	0801a76c 	.word	0x0801a76c
 8019d50:	0801a78c 	.word	0x0801a78c
 8019d54:	0801a74c 	.word	0x0801a74c
 8019d58:	0801a904 	.word	0x0801a904
 8019d5c:	0801a90e 	.word	0x0801a90e
 8019d60:	08017709 	.word	0x08017709
 8019d64:	08019ae7 	.word	0x08019ae7
 8019d68:	0801a90a 	.word	0x0801a90a

08019d6c <_putc_r>:
 8019d6c:	b570      	push	{r4, r5, r6, lr}
 8019d6e:	460d      	mov	r5, r1
 8019d70:	4614      	mov	r4, r2
 8019d72:	4606      	mov	r6, r0
 8019d74:	b118      	cbz	r0, 8019d7e <_putc_r+0x12>
 8019d76:	6983      	ldr	r3, [r0, #24]
 8019d78:	b90b      	cbnz	r3, 8019d7e <_putc_r+0x12>
 8019d7a:	f7ff f911 	bl	8018fa0 <__sinit>
 8019d7e:	4b1c      	ldr	r3, [pc, #112]	; (8019df0 <_putc_r+0x84>)
 8019d80:	429c      	cmp	r4, r3
 8019d82:	d124      	bne.n	8019dce <_putc_r+0x62>
 8019d84:	6874      	ldr	r4, [r6, #4]
 8019d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d88:	07d8      	lsls	r0, r3, #31
 8019d8a:	d405      	bmi.n	8019d98 <_putc_r+0x2c>
 8019d8c:	89a3      	ldrh	r3, [r4, #12]
 8019d8e:	0599      	lsls	r1, r3, #22
 8019d90:	d402      	bmi.n	8019d98 <_putc_r+0x2c>
 8019d92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d94:	f7ff f9a7 	bl	80190e6 <__retarget_lock_acquire_recursive>
 8019d98:	68a3      	ldr	r3, [r4, #8]
 8019d9a:	3b01      	subs	r3, #1
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	60a3      	str	r3, [r4, #8]
 8019da0:	da05      	bge.n	8019dae <_putc_r+0x42>
 8019da2:	69a2      	ldr	r2, [r4, #24]
 8019da4:	4293      	cmp	r3, r2
 8019da6:	db1c      	blt.n	8019de2 <_putc_r+0x76>
 8019da8:	b2eb      	uxtb	r3, r5
 8019daa:	2b0a      	cmp	r3, #10
 8019dac:	d019      	beq.n	8019de2 <_putc_r+0x76>
 8019dae:	6823      	ldr	r3, [r4, #0]
 8019db0:	1c5a      	adds	r2, r3, #1
 8019db2:	6022      	str	r2, [r4, #0]
 8019db4:	701d      	strb	r5, [r3, #0]
 8019db6:	b2ed      	uxtb	r5, r5
 8019db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019dba:	07da      	lsls	r2, r3, #31
 8019dbc:	d405      	bmi.n	8019dca <_putc_r+0x5e>
 8019dbe:	89a3      	ldrh	r3, [r4, #12]
 8019dc0:	059b      	lsls	r3, r3, #22
 8019dc2:	d402      	bmi.n	8019dca <_putc_r+0x5e>
 8019dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019dc6:	f7ff f98f 	bl	80190e8 <__retarget_lock_release_recursive>
 8019dca:	4628      	mov	r0, r5
 8019dcc:	bd70      	pop	{r4, r5, r6, pc}
 8019dce:	4b09      	ldr	r3, [pc, #36]	; (8019df4 <_putc_r+0x88>)
 8019dd0:	429c      	cmp	r4, r3
 8019dd2:	d101      	bne.n	8019dd8 <_putc_r+0x6c>
 8019dd4:	68b4      	ldr	r4, [r6, #8]
 8019dd6:	e7d6      	b.n	8019d86 <_putc_r+0x1a>
 8019dd8:	4b07      	ldr	r3, [pc, #28]	; (8019df8 <_putc_r+0x8c>)
 8019dda:	429c      	cmp	r4, r3
 8019ddc:	bf08      	it	eq
 8019dde:	68f4      	ldreq	r4, [r6, #12]
 8019de0:	e7d1      	b.n	8019d86 <_putc_r+0x1a>
 8019de2:	4629      	mov	r1, r5
 8019de4:	4622      	mov	r2, r4
 8019de6:	4630      	mov	r0, r6
 8019de8:	f7fe f886 	bl	8017ef8 <__swbuf_r>
 8019dec:	4605      	mov	r5, r0
 8019dee:	e7e3      	b.n	8019db8 <_putc_r+0x4c>
 8019df0:	0801a76c 	.word	0x0801a76c
 8019df4:	0801a78c 	.word	0x0801a78c
 8019df8:	0801a74c 	.word	0x0801a74c

08019dfc <_sbrk_r>:
 8019dfc:	b538      	push	{r3, r4, r5, lr}
 8019dfe:	4d06      	ldr	r5, [pc, #24]	; (8019e18 <_sbrk_r+0x1c>)
 8019e00:	2300      	movs	r3, #0
 8019e02:	4604      	mov	r4, r0
 8019e04:	4608      	mov	r0, r1
 8019e06:	602b      	str	r3, [r5, #0]
 8019e08:	f7f5 faf4 	bl	800f3f4 <_sbrk>
 8019e0c:	1c43      	adds	r3, r0, #1
 8019e0e:	d102      	bne.n	8019e16 <_sbrk_r+0x1a>
 8019e10:	682b      	ldr	r3, [r5, #0]
 8019e12:	b103      	cbz	r3, 8019e16 <_sbrk_r+0x1a>
 8019e14:	6023      	str	r3, [r4, #0]
 8019e16:	bd38      	pop	{r3, r4, r5, pc}
 8019e18:	2000cb08 	.word	0x2000cb08

08019e1c <__sread>:
 8019e1c:	b510      	push	{r4, lr}
 8019e1e:	460c      	mov	r4, r1
 8019e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e24:	f000 f8e2 	bl	8019fec <_read_r>
 8019e28:	2800      	cmp	r0, #0
 8019e2a:	bfab      	itete	ge
 8019e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8019e30:	181b      	addge	r3, r3, r0
 8019e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019e36:	bfac      	ite	ge
 8019e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8019e3a:	81a3      	strhlt	r3, [r4, #12]
 8019e3c:	bd10      	pop	{r4, pc}

08019e3e <__swrite>:
 8019e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e42:	461f      	mov	r7, r3
 8019e44:	898b      	ldrh	r3, [r1, #12]
 8019e46:	05db      	lsls	r3, r3, #23
 8019e48:	4605      	mov	r5, r0
 8019e4a:	460c      	mov	r4, r1
 8019e4c:	4616      	mov	r6, r2
 8019e4e:	d505      	bpl.n	8019e5c <__swrite+0x1e>
 8019e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e54:	2302      	movs	r3, #2
 8019e56:	2200      	movs	r2, #0
 8019e58:	f000 f898 	bl	8019f8c <_lseek_r>
 8019e5c:	89a3      	ldrh	r3, [r4, #12]
 8019e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019e66:	81a3      	strh	r3, [r4, #12]
 8019e68:	4632      	mov	r2, r6
 8019e6a:	463b      	mov	r3, r7
 8019e6c:	4628      	mov	r0, r5
 8019e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e72:	f000 b817 	b.w	8019ea4 <_write_r>

08019e76 <__sseek>:
 8019e76:	b510      	push	{r4, lr}
 8019e78:	460c      	mov	r4, r1
 8019e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e7e:	f000 f885 	bl	8019f8c <_lseek_r>
 8019e82:	1c43      	adds	r3, r0, #1
 8019e84:	89a3      	ldrh	r3, [r4, #12]
 8019e86:	bf15      	itete	ne
 8019e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8019e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019e92:	81a3      	strheq	r3, [r4, #12]
 8019e94:	bf18      	it	ne
 8019e96:	81a3      	strhne	r3, [r4, #12]
 8019e98:	bd10      	pop	{r4, pc}

08019e9a <__sclose>:
 8019e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e9e:	f000 b831 	b.w	8019f04 <_close_r>
	...

08019ea4 <_write_r>:
 8019ea4:	b538      	push	{r3, r4, r5, lr}
 8019ea6:	4d07      	ldr	r5, [pc, #28]	; (8019ec4 <_write_r+0x20>)
 8019ea8:	4604      	mov	r4, r0
 8019eaa:	4608      	mov	r0, r1
 8019eac:	4611      	mov	r1, r2
 8019eae:	2200      	movs	r2, #0
 8019eb0:	602a      	str	r2, [r5, #0]
 8019eb2:	461a      	mov	r2, r3
 8019eb4:	f7f5 fa4a 	bl	800f34c <_write>
 8019eb8:	1c43      	adds	r3, r0, #1
 8019eba:	d102      	bne.n	8019ec2 <_write_r+0x1e>
 8019ebc:	682b      	ldr	r3, [r5, #0]
 8019ebe:	b103      	cbz	r3, 8019ec2 <_write_r+0x1e>
 8019ec0:	6023      	str	r3, [r4, #0]
 8019ec2:	bd38      	pop	{r3, r4, r5, pc}
 8019ec4:	2000cb08 	.word	0x2000cb08

08019ec8 <__assert_func>:
 8019ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019eca:	4614      	mov	r4, r2
 8019ecc:	461a      	mov	r2, r3
 8019ece:	4b09      	ldr	r3, [pc, #36]	; (8019ef4 <__assert_func+0x2c>)
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	4605      	mov	r5, r0
 8019ed4:	68d8      	ldr	r0, [r3, #12]
 8019ed6:	b14c      	cbz	r4, 8019eec <__assert_func+0x24>
 8019ed8:	4b07      	ldr	r3, [pc, #28]	; (8019ef8 <__assert_func+0x30>)
 8019eda:	9100      	str	r1, [sp, #0]
 8019edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ee0:	4906      	ldr	r1, [pc, #24]	; (8019efc <__assert_func+0x34>)
 8019ee2:	462b      	mov	r3, r5
 8019ee4:	f000 f81e 	bl	8019f24 <fiprintf>
 8019ee8:	f000 f89f 	bl	801a02a <abort>
 8019eec:	4b04      	ldr	r3, [pc, #16]	; (8019f00 <__assert_func+0x38>)
 8019eee:	461c      	mov	r4, r3
 8019ef0:	e7f3      	b.n	8019eda <__assert_func+0x12>
 8019ef2:	bf00      	nop
 8019ef4:	2000000c 	.word	0x2000000c
 8019ef8:	0801a915 	.word	0x0801a915
 8019efc:	0801a922 	.word	0x0801a922
 8019f00:	0801a950 	.word	0x0801a950

08019f04 <_close_r>:
 8019f04:	b538      	push	{r3, r4, r5, lr}
 8019f06:	4d06      	ldr	r5, [pc, #24]	; (8019f20 <_close_r+0x1c>)
 8019f08:	2300      	movs	r3, #0
 8019f0a:	4604      	mov	r4, r0
 8019f0c:	4608      	mov	r0, r1
 8019f0e:	602b      	str	r3, [r5, #0]
 8019f10:	f7f5 fa3c 	bl	800f38c <_close>
 8019f14:	1c43      	adds	r3, r0, #1
 8019f16:	d102      	bne.n	8019f1e <_close_r+0x1a>
 8019f18:	682b      	ldr	r3, [r5, #0]
 8019f1a:	b103      	cbz	r3, 8019f1e <_close_r+0x1a>
 8019f1c:	6023      	str	r3, [r4, #0]
 8019f1e:	bd38      	pop	{r3, r4, r5, pc}
 8019f20:	2000cb08 	.word	0x2000cb08

08019f24 <fiprintf>:
 8019f24:	b40e      	push	{r1, r2, r3}
 8019f26:	b503      	push	{r0, r1, lr}
 8019f28:	4601      	mov	r1, r0
 8019f2a:	ab03      	add	r3, sp, #12
 8019f2c:	4805      	ldr	r0, [pc, #20]	; (8019f44 <fiprintf+0x20>)
 8019f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f32:	6800      	ldr	r0, [r0, #0]
 8019f34:	9301      	str	r3, [sp, #4]
 8019f36:	f7ff fde9 	bl	8019b0c <_vfiprintf_r>
 8019f3a:	b002      	add	sp, #8
 8019f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f40:	b003      	add	sp, #12
 8019f42:	4770      	bx	lr
 8019f44:	2000000c 	.word	0x2000000c

08019f48 <_fstat_r>:
 8019f48:	b538      	push	{r3, r4, r5, lr}
 8019f4a:	4d07      	ldr	r5, [pc, #28]	; (8019f68 <_fstat_r+0x20>)
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	4604      	mov	r4, r0
 8019f50:	4608      	mov	r0, r1
 8019f52:	4611      	mov	r1, r2
 8019f54:	602b      	str	r3, [r5, #0]
 8019f56:	f7f5 fa25 	bl	800f3a4 <_fstat>
 8019f5a:	1c43      	adds	r3, r0, #1
 8019f5c:	d102      	bne.n	8019f64 <_fstat_r+0x1c>
 8019f5e:	682b      	ldr	r3, [r5, #0]
 8019f60:	b103      	cbz	r3, 8019f64 <_fstat_r+0x1c>
 8019f62:	6023      	str	r3, [r4, #0]
 8019f64:	bd38      	pop	{r3, r4, r5, pc}
 8019f66:	bf00      	nop
 8019f68:	2000cb08 	.word	0x2000cb08

08019f6c <_isatty_r>:
 8019f6c:	b538      	push	{r3, r4, r5, lr}
 8019f6e:	4d06      	ldr	r5, [pc, #24]	; (8019f88 <_isatty_r+0x1c>)
 8019f70:	2300      	movs	r3, #0
 8019f72:	4604      	mov	r4, r0
 8019f74:	4608      	mov	r0, r1
 8019f76:	602b      	str	r3, [r5, #0]
 8019f78:	f7f5 fa24 	bl	800f3c4 <_isatty>
 8019f7c:	1c43      	adds	r3, r0, #1
 8019f7e:	d102      	bne.n	8019f86 <_isatty_r+0x1a>
 8019f80:	682b      	ldr	r3, [r5, #0]
 8019f82:	b103      	cbz	r3, 8019f86 <_isatty_r+0x1a>
 8019f84:	6023      	str	r3, [r4, #0]
 8019f86:	bd38      	pop	{r3, r4, r5, pc}
 8019f88:	2000cb08 	.word	0x2000cb08

08019f8c <_lseek_r>:
 8019f8c:	b538      	push	{r3, r4, r5, lr}
 8019f8e:	4d07      	ldr	r5, [pc, #28]	; (8019fac <_lseek_r+0x20>)
 8019f90:	4604      	mov	r4, r0
 8019f92:	4608      	mov	r0, r1
 8019f94:	4611      	mov	r1, r2
 8019f96:	2200      	movs	r2, #0
 8019f98:	602a      	str	r2, [r5, #0]
 8019f9a:	461a      	mov	r2, r3
 8019f9c:	f7f5 fa1d 	bl	800f3da <_lseek>
 8019fa0:	1c43      	adds	r3, r0, #1
 8019fa2:	d102      	bne.n	8019faa <_lseek_r+0x1e>
 8019fa4:	682b      	ldr	r3, [r5, #0]
 8019fa6:	b103      	cbz	r3, 8019faa <_lseek_r+0x1e>
 8019fa8:	6023      	str	r3, [r4, #0]
 8019faa:	bd38      	pop	{r3, r4, r5, pc}
 8019fac:	2000cb08 	.word	0x2000cb08

08019fb0 <__ascii_mbtowc>:
 8019fb0:	b082      	sub	sp, #8
 8019fb2:	b901      	cbnz	r1, 8019fb6 <__ascii_mbtowc+0x6>
 8019fb4:	a901      	add	r1, sp, #4
 8019fb6:	b142      	cbz	r2, 8019fca <__ascii_mbtowc+0x1a>
 8019fb8:	b14b      	cbz	r3, 8019fce <__ascii_mbtowc+0x1e>
 8019fba:	7813      	ldrb	r3, [r2, #0]
 8019fbc:	600b      	str	r3, [r1, #0]
 8019fbe:	7812      	ldrb	r2, [r2, #0]
 8019fc0:	1e10      	subs	r0, r2, #0
 8019fc2:	bf18      	it	ne
 8019fc4:	2001      	movne	r0, #1
 8019fc6:	b002      	add	sp, #8
 8019fc8:	4770      	bx	lr
 8019fca:	4610      	mov	r0, r2
 8019fcc:	e7fb      	b.n	8019fc6 <__ascii_mbtowc+0x16>
 8019fce:	f06f 0001 	mvn.w	r0, #1
 8019fd2:	e7f8      	b.n	8019fc6 <__ascii_mbtowc+0x16>

08019fd4 <__malloc_lock>:
 8019fd4:	4801      	ldr	r0, [pc, #4]	; (8019fdc <__malloc_lock+0x8>)
 8019fd6:	f7ff b886 	b.w	80190e6 <__retarget_lock_acquire_recursive>
 8019fda:	bf00      	nop
 8019fdc:	2000cafc 	.word	0x2000cafc

08019fe0 <__malloc_unlock>:
 8019fe0:	4801      	ldr	r0, [pc, #4]	; (8019fe8 <__malloc_unlock+0x8>)
 8019fe2:	f7ff b881 	b.w	80190e8 <__retarget_lock_release_recursive>
 8019fe6:	bf00      	nop
 8019fe8:	2000cafc 	.word	0x2000cafc

08019fec <_read_r>:
 8019fec:	b538      	push	{r3, r4, r5, lr}
 8019fee:	4d07      	ldr	r5, [pc, #28]	; (801a00c <_read_r+0x20>)
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	4608      	mov	r0, r1
 8019ff4:	4611      	mov	r1, r2
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	602a      	str	r2, [r5, #0]
 8019ffa:	461a      	mov	r2, r3
 8019ffc:	f7f5 f989 	bl	800f312 <_read>
 801a000:	1c43      	adds	r3, r0, #1
 801a002:	d102      	bne.n	801a00a <_read_r+0x1e>
 801a004:	682b      	ldr	r3, [r5, #0]
 801a006:	b103      	cbz	r3, 801a00a <_read_r+0x1e>
 801a008:	6023      	str	r3, [r4, #0]
 801a00a:	bd38      	pop	{r3, r4, r5, pc}
 801a00c:	2000cb08 	.word	0x2000cb08

0801a010 <__ascii_wctomb>:
 801a010:	b149      	cbz	r1, 801a026 <__ascii_wctomb+0x16>
 801a012:	2aff      	cmp	r2, #255	; 0xff
 801a014:	bf85      	ittet	hi
 801a016:	238a      	movhi	r3, #138	; 0x8a
 801a018:	6003      	strhi	r3, [r0, #0]
 801a01a:	700a      	strbls	r2, [r1, #0]
 801a01c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a020:	bf98      	it	ls
 801a022:	2001      	movls	r0, #1
 801a024:	4770      	bx	lr
 801a026:	4608      	mov	r0, r1
 801a028:	4770      	bx	lr

0801a02a <abort>:
 801a02a:	b508      	push	{r3, lr}
 801a02c:	2006      	movs	r0, #6
 801a02e:	f000 f82b 	bl	801a088 <raise>
 801a032:	2001      	movs	r0, #1
 801a034:	f7f5 f963 	bl	800f2fe <_exit>

0801a038 <_raise_r>:
 801a038:	291f      	cmp	r1, #31
 801a03a:	b538      	push	{r3, r4, r5, lr}
 801a03c:	4604      	mov	r4, r0
 801a03e:	460d      	mov	r5, r1
 801a040:	d904      	bls.n	801a04c <_raise_r+0x14>
 801a042:	2316      	movs	r3, #22
 801a044:	6003      	str	r3, [r0, #0]
 801a046:	f04f 30ff 	mov.w	r0, #4294967295
 801a04a:	bd38      	pop	{r3, r4, r5, pc}
 801a04c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a04e:	b112      	cbz	r2, 801a056 <_raise_r+0x1e>
 801a050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a054:	b94b      	cbnz	r3, 801a06a <_raise_r+0x32>
 801a056:	4620      	mov	r0, r4
 801a058:	f000 f830 	bl	801a0bc <_getpid_r>
 801a05c:	462a      	mov	r2, r5
 801a05e:	4601      	mov	r1, r0
 801a060:	4620      	mov	r0, r4
 801a062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a066:	f000 b817 	b.w	801a098 <_kill_r>
 801a06a:	2b01      	cmp	r3, #1
 801a06c:	d00a      	beq.n	801a084 <_raise_r+0x4c>
 801a06e:	1c59      	adds	r1, r3, #1
 801a070:	d103      	bne.n	801a07a <_raise_r+0x42>
 801a072:	2316      	movs	r3, #22
 801a074:	6003      	str	r3, [r0, #0]
 801a076:	2001      	movs	r0, #1
 801a078:	e7e7      	b.n	801a04a <_raise_r+0x12>
 801a07a:	2400      	movs	r4, #0
 801a07c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a080:	4628      	mov	r0, r5
 801a082:	4798      	blx	r3
 801a084:	2000      	movs	r0, #0
 801a086:	e7e0      	b.n	801a04a <_raise_r+0x12>

0801a088 <raise>:
 801a088:	4b02      	ldr	r3, [pc, #8]	; (801a094 <raise+0xc>)
 801a08a:	4601      	mov	r1, r0
 801a08c:	6818      	ldr	r0, [r3, #0]
 801a08e:	f7ff bfd3 	b.w	801a038 <_raise_r>
 801a092:	bf00      	nop
 801a094:	2000000c 	.word	0x2000000c

0801a098 <_kill_r>:
 801a098:	b538      	push	{r3, r4, r5, lr}
 801a09a:	4d07      	ldr	r5, [pc, #28]	; (801a0b8 <_kill_r+0x20>)
 801a09c:	2300      	movs	r3, #0
 801a09e:	4604      	mov	r4, r0
 801a0a0:	4608      	mov	r0, r1
 801a0a2:	4611      	mov	r1, r2
 801a0a4:	602b      	str	r3, [r5, #0]
 801a0a6:	f7f5 f91a 	bl	800f2de <_kill>
 801a0aa:	1c43      	adds	r3, r0, #1
 801a0ac:	d102      	bne.n	801a0b4 <_kill_r+0x1c>
 801a0ae:	682b      	ldr	r3, [r5, #0]
 801a0b0:	b103      	cbz	r3, 801a0b4 <_kill_r+0x1c>
 801a0b2:	6023      	str	r3, [r4, #0]
 801a0b4:	bd38      	pop	{r3, r4, r5, pc}
 801a0b6:	bf00      	nop
 801a0b8:	2000cb08 	.word	0x2000cb08

0801a0bc <_getpid_r>:
 801a0bc:	f7f5 b907 	b.w	800f2ce <_getpid>

0801a0c0 <exp>:
 801a0c0:	b538      	push	{r3, r4, r5, lr}
 801a0c2:	ed2d 8b02 	vpush	{d8}
 801a0c6:	ec55 4b10 	vmov	r4, r5, d0
 801a0ca:	f000 f841 	bl	801a150 <__ieee754_exp>
 801a0ce:	eeb0 8a40 	vmov.f32	s16, s0
 801a0d2:	eef0 8a60 	vmov.f32	s17, s1
 801a0d6:	ec45 4b10 	vmov	d0, r4, r5
 801a0da:	f000 f9eb 	bl	801a4b4 <finite>
 801a0de:	b168      	cbz	r0, 801a0fc <exp+0x3c>
 801a0e0:	a317      	add	r3, pc, #92	; (adr r3, 801a140 <exp+0x80>)
 801a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	4629      	mov	r1, r5
 801a0ea:	f7e6 fd3d 	bl	8000b68 <__aeabi_dcmpgt>
 801a0ee:	b160      	cbz	r0, 801a10a <exp+0x4a>
 801a0f0:	f7fd fa2a 	bl	8017548 <__errno>
 801a0f4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 801a130 <exp+0x70>
 801a0f8:	2322      	movs	r3, #34	; 0x22
 801a0fa:	6003      	str	r3, [r0, #0]
 801a0fc:	eeb0 0a48 	vmov.f32	s0, s16
 801a100:	eef0 0a68 	vmov.f32	s1, s17
 801a104:	ecbd 8b02 	vpop	{d8}
 801a108:	bd38      	pop	{r3, r4, r5, pc}
 801a10a:	a30f      	add	r3, pc, #60	; (adr r3, 801a148 <exp+0x88>)
 801a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a110:	4620      	mov	r0, r4
 801a112:	4629      	mov	r1, r5
 801a114:	f7e6 fd0a 	bl	8000b2c <__aeabi_dcmplt>
 801a118:	2800      	cmp	r0, #0
 801a11a:	d0ef      	beq.n	801a0fc <exp+0x3c>
 801a11c:	f7fd fa14 	bl	8017548 <__errno>
 801a120:	2322      	movs	r3, #34	; 0x22
 801a122:	ed9f 8b05 	vldr	d8, [pc, #20]	; 801a138 <exp+0x78>
 801a126:	6003      	str	r3, [r0, #0]
 801a128:	e7e8      	b.n	801a0fc <exp+0x3c>
 801a12a:	bf00      	nop
 801a12c:	f3af 8000 	nop.w
 801a130:	00000000 	.word	0x00000000
 801a134:	7ff00000 	.word	0x7ff00000
	...
 801a140:	fefa39ef 	.word	0xfefa39ef
 801a144:	40862e42 	.word	0x40862e42
 801a148:	d52d3051 	.word	0xd52d3051
 801a14c:	c0874910 	.word	0xc0874910

0801a150 <__ieee754_exp>:
 801a150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a154:	ec55 4b10 	vmov	r4, r5, d0
 801a158:	49b5      	ldr	r1, [pc, #724]	; (801a430 <__ieee754_exp+0x2e0>)
 801a15a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a15e:	428b      	cmp	r3, r1
 801a160:	ed2d 8b04 	vpush	{d8-d9}
 801a164:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801a168:	d93d      	bls.n	801a1e6 <__ieee754_exp+0x96>
 801a16a:	49b2      	ldr	r1, [pc, #712]	; (801a434 <__ieee754_exp+0x2e4>)
 801a16c:	428b      	cmp	r3, r1
 801a16e:	d918      	bls.n	801a1a2 <__ieee754_exp+0x52>
 801a170:	ee10 3a10 	vmov	r3, s0
 801a174:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801a178:	4313      	orrs	r3, r2
 801a17a:	d009      	beq.n	801a190 <__ieee754_exp+0x40>
 801a17c:	ee10 2a10 	vmov	r2, s0
 801a180:	462b      	mov	r3, r5
 801a182:	4620      	mov	r0, r4
 801a184:	4629      	mov	r1, r5
 801a186:	f7e6 f8a9 	bl	80002dc <__adddf3>
 801a18a:	4604      	mov	r4, r0
 801a18c:	460d      	mov	r5, r1
 801a18e:	e002      	b.n	801a196 <__ieee754_exp+0x46>
 801a190:	b10e      	cbz	r6, 801a196 <__ieee754_exp+0x46>
 801a192:	2400      	movs	r4, #0
 801a194:	2500      	movs	r5, #0
 801a196:	ecbd 8b04 	vpop	{d8-d9}
 801a19a:	ec45 4b10 	vmov	d0, r4, r5
 801a19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1a2:	a38d      	add	r3, pc, #564	; (adr r3, 801a3d8 <__ieee754_exp+0x288>)
 801a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1a8:	ee10 0a10 	vmov	r0, s0
 801a1ac:	4629      	mov	r1, r5
 801a1ae:	f7e6 fcdb 	bl	8000b68 <__aeabi_dcmpgt>
 801a1b2:	4607      	mov	r7, r0
 801a1b4:	b130      	cbz	r0, 801a1c4 <__ieee754_exp+0x74>
 801a1b6:	ecbd 8b04 	vpop	{d8-d9}
 801a1ba:	2000      	movs	r0, #0
 801a1bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c0:	f000 b96f 	b.w	801a4a2 <__math_oflow>
 801a1c4:	a386      	add	r3, pc, #536	; (adr r3, 801a3e0 <__ieee754_exp+0x290>)
 801a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ca:	4620      	mov	r0, r4
 801a1cc:	4629      	mov	r1, r5
 801a1ce:	f7e6 fcad 	bl	8000b2c <__aeabi_dcmplt>
 801a1d2:	2800      	cmp	r0, #0
 801a1d4:	f000 808b 	beq.w	801a2ee <__ieee754_exp+0x19e>
 801a1d8:	ecbd 8b04 	vpop	{d8-d9}
 801a1dc:	4638      	mov	r0, r7
 801a1de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1e2:	f000 b955 	b.w	801a490 <__math_uflow>
 801a1e6:	4a94      	ldr	r2, [pc, #592]	; (801a438 <__ieee754_exp+0x2e8>)
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	f240 80ac 	bls.w	801a346 <__ieee754_exp+0x1f6>
 801a1ee:	4a93      	ldr	r2, [pc, #588]	; (801a43c <__ieee754_exp+0x2ec>)
 801a1f0:	4293      	cmp	r3, r2
 801a1f2:	d87c      	bhi.n	801a2ee <__ieee754_exp+0x19e>
 801a1f4:	4b92      	ldr	r3, [pc, #584]	; (801a440 <__ieee754_exp+0x2f0>)
 801a1f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1fe:	ee10 0a10 	vmov	r0, s0
 801a202:	4629      	mov	r1, r5
 801a204:	f7e6 f868 	bl	80002d8 <__aeabi_dsub>
 801a208:	4b8e      	ldr	r3, [pc, #568]	; (801a444 <__ieee754_exp+0x2f4>)
 801a20a:	00f7      	lsls	r7, r6, #3
 801a20c:	443b      	add	r3, r7
 801a20e:	ed93 7b00 	vldr	d7, [r3]
 801a212:	f1c6 0a01 	rsb	sl, r6, #1
 801a216:	4680      	mov	r8, r0
 801a218:	4689      	mov	r9, r1
 801a21a:	ebaa 0a06 	sub.w	sl, sl, r6
 801a21e:	eeb0 8a47 	vmov.f32	s16, s14
 801a222:	eef0 8a67 	vmov.f32	s17, s15
 801a226:	ec53 2b18 	vmov	r2, r3, d8
 801a22a:	4640      	mov	r0, r8
 801a22c:	4649      	mov	r1, r9
 801a22e:	f7e6 f853 	bl	80002d8 <__aeabi_dsub>
 801a232:	4604      	mov	r4, r0
 801a234:	460d      	mov	r5, r1
 801a236:	4622      	mov	r2, r4
 801a238:	462b      	mov	r3, r5
 801a23a:	4620      	mov	r0, r4
 801a23c:	4629      	mov	r1, r5
 801a23e:	f7e6 fa03 	bl	8000648 <__aeabi_dmul>
 801a242:	a369      	add	r3, pc, #420	; (adr r3, 801a3e8 <__ieee754_exp+0x298>)
 801a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a248:	4606      	mov	r6, r0
 801a24a:	460f      	mov	r7, r1
 801a24c:	f7e6 f9fc 	bl	8000648 <__aeabi_dmul>
 801a250:	a367      	add	r3, pc, #412	; (adr r3, 801a3f0 <__ieee754_exp+0x2a0>)
 801a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a256:	f7e6 f83f 	bl	80002d8 <__aeabi_dsub>
 801a25a:	4632      	mov	r2, r6
 801a25c:	463b      	mov	r3, r7
 801a25e:	f7e6 f9f3 	bl	8000648 <__aeabi_dmul>
 801a262:	a365      	add	r3, pc, #404	; (adr r3, 801a3f8 <__ieee754_exp+0x2a8>)
 801a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a268:	f7e6 f838 	bl	80002dc <__adddf3>
 801a26c:	4632      	mov	r2, r6
 801a26e:	463b      	mov	r3, r7
 801a270:	f7e6 f9ea 	bl	8000648 <__aeabi_dmul>
 801a274:	a362      	add	r3, pc, #392	; (adr r3, 801a400 <__ieee754_exp+0x2b0>)
 801a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27a:	f7e6 f82d 	bl	80002d8 <__aeabi_dsub>
 801a27e:	4632      	mov	r2, r6
 801a280:	463b      	mov	r3, r7
 801a282:	f7e6 f9e1 	bl	8000648 <__aeabi_dmul>
 801a286:	a360      	add	r3, pc, #384	; (adr r3, 801a408 <__ieee754_exp+0x2b8>)
 801a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28c:	f7e6 f826 	bl	80002dc <__adddf3>
 801a290:	4632      	mov	r2, r6
 801a292:	463b      	mov	r3, r7
 801a294:	f7e6 f9d8 	bl	8000648 <__aeabi_dmul>
 801a298:	4602      	mov	r2, r0
 801a29a:	460b      	mov	r3, r1
 801a29c:	4620      	mov	r0, r4
 801a29e:	4629      	mov	r1, r5
 801a2a0:	f7e6 f81a 	bl	80002d8 <__aeabi_dsub>
 801a2a4:	4602      	mov	r2, r0
 801a2a6:	460b      	mov	r3, r1
 801a2a8:	4606      	mov	r6, r0
 801a2aa:	460f      	mov	r7, r1
 801a2ac:	4620      	mov	r0, r4
 801a2ae:	4629      	mov	r1, r5
 801a2b0:	f7e6 f9ca 	bl	8000648 <__aeabi_dmul>
 801a2b4:	ec41 0b19 	vmov	d9, r0, r1
 801a2b8:	f1ba 0f00 	cmp.w	sl, #0
 801a2bc:	d15d      	bne.n	801a37a <__ieee754_exp+0x22a>
 801a2be:	2200      	movs	r2, #0
 801a2c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a2c4:	4630      	mov	r0, r6
 801a2c6:	4639      	mov	r1, r7
 801a2c8:	f7e6 f806 	bl	80002d8 <__aeabi_dsub>
 801a2cc:	4602      	mov	r2, r0
 801a2ce:	460b      	mov	r3, r1
 801a2d0:	ec51 0b19 	vmov	r0, r1, d9
 801a2d4:	f7e6 fae2 	bl	800089c <__aeabi_ddiv>
 801a2d8:	4622      	mov	r2, r4
 801a2da:	462b      	mov	r3, r5
 801a2dc:	f7e5 fffc 	bl	80002d8 <__aeabi_dsub>
 801a2e0:	4602      	mov	r2, r0
 801a2e2:	460b      	mov	r3, r1
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	4958      	ldr	r1, [pc, #352]	; (801a448 <__ieee754_exp+0x2f8>)
 801a2e8:	f7e5 fff6 	bl	80002d8 <__aeabi_dsub>
 801a2ec:	e74d      	b.n	801a18a <__ieee754_exp+0x3a>
 801a2ee:	4857      	ldr	r0, [pc, #348]	; (801a44c <__ieee754_exp+0x2fc>)
 801a2f0:	a347      	add	r3, pc, #284	; (adr r3, 801a410 <__ieee754_exp+0x2c0>)
 801a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801a2fa:	4629      	mov	r1, r5
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	f7e6 f9a3 	bl	8000648 <__aeabi_dmul>
 801a302:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a306:	f7e5 ffe9 	bl	80002dc <__adddf3>
 801a30a:	f7e6 fc4d 	bl	8000ba8 <__aeabi_d2iz>
 801a30e:	4682      	mov	sl, r0
 801a310:	f7e6 f930 	bl	8000574 <__aeabi_i2d>
 801a314:	a340      	add	r3, pc, #256	; (adr r3, 801a418 <__ieee754_exp+0x2c8>)
 801a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a31a:	4606      	mov	r6, r0
 801a31c:	460f      	mov	r7, r1
 801a31e:	f7e6 f993 	bl	8000648 <__aeabi_dmul>
 801a322:	4602      	mov	r2, r0
 801a324:	460b      	mov	r3, r1
 801a326:	4620      	mov	r0, r4
 801a328:	4629      	mov	r1, r5
 801a32a:	f7e5 ffd5 	bl	80002d8 <__aeabi_dsub>
 801a32e:	a33c      	add	r3, pc, #240	; (adr r3, 801a420 <__ieee754_exp+0x2d0>)
 801a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a334:	4680      	mov	r8, r0
 801a336:	4689      	mov	r9, r1
 801a338:	4630      	mov	r0, r6
 801a33a:	4639      	mov	r1, r7
 801a33c:	f7e6 f984 	bl	8000648 <__aeabi_dmul>
 801a340:	ec41 0b18 	vmov	d8, r0, r1
 801a344:	e76f      	b.n	801a226 <__ieee754_exp+0xd6>
 801a346:	4a42      	ldr	r2, [pc, #264]	; (801a450 <__ieee754_exp+0x300>)
 801a348:	4293      	cmp	r3, r2
 801a34a:	d811      	bhi.n	801a370 <__ieee754_exp+0x220>
 801a34c:	a336      	add	r3, pc, #216	; (adr r3, 801a428 <__ieee754_exp+0x2d8>)
 801a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a352:	ee10 0a10 	vmov	r0, s0
 801a356:	4629      	mov	r1, r5
 801a358:	f7e5 ffc0 	bl	80002dc <__adddf3>
 801a35c:	4b3a      	ldr	r3, [pc, #232]	; (801a448 <__ieee754_exp+0x2f8>)
 801a35e:	2200      	movs	r2, #0
 801a360:	f7e6 fc02 	bl	8000b68 <__aeabi_dcmpgt>
 801a364:	b138      	cbz	r0, 801a376 <__ieee754_exp+0x226>
 801a366:	4b38      	ldr	r3, [pc, #224]	; (801a448 <__ieee754_exp+0x2f8>)
 801a368:	2200      	movs	r2, #0
 801a36a:	4620      	mov	r0, r4
 801a36c:	4629      	mov	r1, r5
 801a36e:	e70a      	b.n	801a186 <__ieee754_exp+0x36>
 801a370:	f04f 0a00 	mov.w	sl, #0
 801a374:	e75f      	b.n	801a236 <__ieee754_exp+0xe6>
 801a376:	4682      	mov	sl, r0
 801a378:	e75d      	b.n	801a236 <__ieee754_exp+0xe6>
 801a37a:	4632      	mov	r2, r6
 801a37c:	463b      	mov	r3, r7
 801a37e:	2000      	movs	r0, #0
 801a380:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801a384:	f7e5 ffa8 	bl	80002d8 <__aeabi_dsub>
 801a388:	4602      	mov	r2, r0
 801a38a:	460b      	mov	r3, r1
 801a38c:	ec51 0b19 	vmov	r0, r1, d9
 801a390:	f7e6 fa84 	bl	800089c <__aeabi_ddiv>
 801a394:	4602      	mov	r2, r0
 801a396:	460b      	mov	r3, r1
 801a398:	ec51 0b18 	vmov	r0, r1, d8
 801a39c:	f7e5 ff9c 	bl	80002d8 <__aeabi_dsub>
 801a3a0:	4642      	mov	r2, r8
 801a3a2:	464b      	mov	r3, r9
 801a3a4:	f7e5 ff98 	bl	80002d8 <__aeabi_dsub>
 801a3a8:	4602      	mov	r2, r0
 801a3aa:	460b      	mov	r3, r1
 801a3ac:	2000      	movs	r0, #0
 801a3ae:	4926      	ldr	r1, [pc, #152]	; (801a448 <__ieee754_exp+0x2f8>)
 801a3b0:	f7e5 ff92 	bl	80002d8 <__aeabi_dsub>
 801a3b4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801a3b8:	4592      	cmp	sl, r2
 801a3ba:	db02      	blt.n	801a3c2 <__ieee754_exp+0x272>
 801a3bc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a3c0:	e6e3      	b.n	801a18a <__ieee754_exp+0x3a>
 801a3c2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801a3c6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801a3d0:	f7e6 f93a 	bl	8000648 <__aeabi_dmul>
 801a3d4:	e6d9      	b.n	801a18a <__ieee754_exp+0x3a>
 801a3d6:	bf00      	nop
 801a3d8:	fefa39ef 	.word	0xfefa39ef
 801a3dc:	40862e42 	.word	0x40862e42
 801a3e0:	d52d3051 	.word	0xd52d3051
 801a3e4:	c0874910 	.word	0xc0874910
 801a3e8:	72bea4d0 	.word	0x72bea4d0
 801a3ec:	3e663769 	.word	0x3e663769
 801a3f0:	c5d26bf1 	.word	0xc5d26bf1
 801a3f4:	3ebbbd41 	.word	0x3ebbbd41
 801a3f8:	af25de2c 	.word	0xaf25de2c
 801a3fc:	3f11566a 	.word	0x3f11566a
 801a400:	16bebd93 	.word	0x16bebd93
 801a404:	3f66c16c 	.word	0x3f66c16c
 801a408:	5555553e 	.word	0x5555553e
 801a40c:	3fc55555 	.word	0x3fc55555
 801a410:	652b82fe 	.word	0x652b82fe
 801a414:	3ff71547 	.word	0x3ff71547
 801a418:	fee00000 	.word	0xfee00000
 801a41c:	3fe62e42 	.word	0x3fe62e42
 801a420:	35793c76 	.word	0x35793c76
 801a424:	3dea39ef 	.word	0x3dea39ef
 801a428:	8800759c 	.word	0x8800759c
 801a42c:	7e37e43c 	.word	0x7e37e43c
 801a430:	40862e41 	.word	0x40862e41
 801a434:	7fefffff 	.word	0x7fefffff
 801a438:	3fd62e42 	.word	0x3fd62e42
 801a43c:	3ff0a2b1 	.word	0x3ff0a2b1
 801a440:	0801aa70 	.word	0x0801aa70
 801a444:	0801aa80 	.word	0x0801aa80
 801a448:	3ff00000 	.word	0x3ff00000
 801a44c:	0801aa60 	.word	0x0801aa60
 801a450:	3defffff 	.word	0x3defffff

0801a454 <with_errno>:
 801a454:	b570      	push	{r4, r5, r6, lr}
 801a456:	4604      	mov	r4, r0
 801a458:	460d      	mov	r5, r1
 801a45a:	4616      	mov	r6, r2
 801a45c:	f7fd f874 	bl	8017548 <__errno>
 801a460:	4629      	mov	r1, r5
 801a462:	6006      	str	r6, [r0, #0]
 801a464:	4620      	mov	r0, r4
 801a466:	bd70      	pop	{r4, r5, r6, pc}

0801a468 <xflow>:
 801a468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a46a:	4614      	mov	r4, r2
 801a46c:	461d      	mov	r5, r3
 801a46e:	b108      	cbz	r0, 801a474 <xflow+0xc>
 801a470:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a474:	e9cd 2300 	strd	r2, r3, [sp]
 801a478:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a47c:	4620      	mov	r0, r4
 801a47e:	4629      	mov	r1, r5
 801a480:	f7e6 f8e2 	bl	8000648 <__aeabi_dmul>
 801a484:	2222      	movs	r2, #34	; 0x22
 801a486:	b003      	add	sp, #12
 801a488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a48c:	f7ff bfe2 	b.w	801a454 <with_errno>

0801a490 <__math_uflow>:
 801a490:	b508      	push	{r3, lr}
 801a492:	2200      	movs	r2, #0
 801a494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a498:	f7ff ffe6 	bl	801a468 <xflow>
 801a49c:	ec41 0b10 	vmov	d0, r0, r1
 801a4a0:	bd08      	pop	{r3, pc}

0801a4a2 <__math_oflow>:
 801a4a2:	b508      	push	{r3, lr}
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a4aa:	f7ff ffdd 	bl	801a468 <xflow>
 801a4ae:	ec41 0b10 	vmov	d0, r0, r1
 801a4b2:	bd08      	pop	{r3, pc}

0801a4b4 <finite>:
 801a4b4:	b082      	sub	sp, #8
 801a4b6:	ed8d 0b00 	vstr	d0, [sp]
 801a4ba:	9801      	ldr	r0, [sp, #4]
 801a4bc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a4c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a4c4:	0fc0      	lsrs	r0, r0, #31
 801a4c6:	b002      	add	sp, #8
 801a4c8:	4770      	bx	lr
	...

0801a4cc <_init>:
 801a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ce:	bf00      	nop
 801a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4d2:	bc08      	pop	{r3}
 801a4d4:	469e      	mov	lr, r3
 801a4d6:	4770      	bx	lr

0801a4d8 <_fini>:
 801a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4da:	bf00      	nop
 801a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4de:	bc08      	pop	{r3}
 801a4e0:	469e      	mov	lr, r3
 801a4e2:	4770      	bx	lr
