
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021e24  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08022008  08022008  00032008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022730  08022730  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08022730  08022730  00032730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022738  08022738  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022738  08022738  00032738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802273c  0802273c  0003273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08022740  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ddac  200001fc  0802293c  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dfa8  0802293c  0004dfa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279c1  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006056  00000000  00000000  00067bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  0006dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  0006fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028511  00000000  00000000  00071918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031cd3  00000000  00000000  00099e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2bc  00000000  00000000  000cbafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6db8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009808  00000000  00000000  001b6e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021fec 	.word	0x08021fec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08021fec 	.word	0x08021fec

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <reset_speed+0x34>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <reset_speed+0x38>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <reset_speed+0x3c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <reset_speed+0x40>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <reset_speed+0x44>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <reset_speed+0x48>)
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000248 	.word	0x20000248
 8001050:	2000024c 	.word	0x2000024c
 8001054:	20000258 	.word	0x20000258
 8001058:	2000025c 	.word	0x2000025c
 800105c:	20000260 	.word	0x20000260
 8001060:	3f266666 	.word	0x3f266666
 8001064:	00000000 	.word	0x00000000

08001068 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 800106e:	4bd0      	ldr	r3, [pc, #832]	; (80013b0 <interupt_calEncoder+0x348>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013b8 <interupt_calEncoder+0x350>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd07      	ble.n	80010a4 <interupt_calEncoder+0x3c>
 8001094:	edd7 7a01 	vldr	s15, [r7, #4]
 8001098:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013bc <interupt_calEncoder+0x354>
 800109c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013c0 <interupt_calEncoder+0x358>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d507      	bpl.n	80010c6 <interupt_calEncoder+0x5e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013bc <interupt_calEncoder+0x354>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010c6:	4bbf      	ldr	r3, [pc, #764]	; (80013c4 <interupt_calEncoder+0x35c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4bbe      	ldr	r3, [pc, #760]	; (80013c8 <interupt_calEncoder+0x360>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eef1 7a67 	vneg.f32	s15, s15
 80010da:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013b8 <interupt_calEncoder+0x350>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd07      	ble.n	8001100 <interupt_calEncoder+0x98>
 80010f0:	edd7 7a00 	vldr	s15, [r7]
 80010f4:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013bc <interupt_calEncoder+0x354>
 80010f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013c0 <interupt_calEncoder+0x358>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d507      	bpl.n	8001122 <interupt_calEncoder+0xba>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013bc <interupt_calEncoder+0x354>
 800111a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	a391      	add	r3, pc, #580	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa8b 	bl	8000648 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <interupt_calEncoder+0x364>)
 8001140:	f7ff fbac 	bl	800089c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	a38a      	add	r3, pc, #552	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a388      	add	r3, pc, #544	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	a385      	add	r3, pc, #532	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa67 	bl	8000648 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a383      	add	r3, pc, #524	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb88 	bl	800089c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <interupt_calEncoder+0x368>)
 800119a:	f7ff fa55 	bl	8000648 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a37c      	add	r3, pc, #496	; (adr r3, 8001398 <interupt_calEncoder+0x330>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fb76 	bl	800089c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <interupt_calEncoder+0x36c>)
 80011d2:	f7ff fa39 	bl	8000648 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a370      	add	r3, pc, #448	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb5a 	bl	800089c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd02 	bl	8000bf8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <interupt_calEncoder+0x370>)
 80011f8:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f9cc 	bl	8000598 <__aeabi_f2d>
 8001200:	a35b      	add	r3, pc, #364	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <interupt_calEncoder+0x364>)
 8001218:	f7ff fb40 	bl	800089c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a354      	add	r3, pc, #336	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa0d 	bl	8000648 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a352      	add	r3, pc, #328	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a34f      	add	r3, pc, #316	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a34d      	add	r3, pc, #308	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fb1c 	bl	800089c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <interupt_calEncoder+0x368>)
 8001272:	f7ff f9e9 	bl	8000648 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a34a      	add	r3, pc, #296	; (adr r3, 80013a8 <interupt_calEncoder+0x340>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fb0a 	bl	800089c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	f7ff fb00 	bl	800089c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <interupt_calEncoder+0x36c>)
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a33a      	add	r3, pc, #232	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff faee 	bl	800089c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc96 	bl	8000bf8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <interupt_calEncoder+0x374>)
 80012d0:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <interupt_calEncoder+0x378>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f95e 	bl	8000598 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <interupt_calEncoder+0x370>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	a32d      	add	r3, pc, #180	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f9aa 	bl	8000648 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffee 	bl	80002dc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc76 	bl	8000bf8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <interupt_calEncoder+0x378>)
 8001310:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <interupt_calEncoder+0x374>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	a31d      	add	r3, pc, #116	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f98a 	bl	8000648 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffce 	bl	80002dc <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc56 	bl	8000bf8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001350:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <interupt_calEncoder+0x35c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <interupt_calEncoder+0x360>)
 8001358:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <interupt_calEncoder+0x348>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001360:	6013      	str	r3, [r2, #0]

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	54411744 	.word	0x54411744
 8001374:	400921fb 	.word	0x400921fb
 8001378:	4e70a65b 	.word	0x4e70a65b
 800137c:	3f882f36 	.word	0x3f882f36
 8001380:	a858793e 	.word	0xa858793e
 8001384:	3ff1cd35 	.word	0x3ff1cd35
 8001388:	00000000 	.word	0x00000000
 800138c:	4078c000 	.word	0x4078c000
 8001390:	147ae148 	.word	0x147ae148
 8001394:	4078fbae 	.word	0x4078fbae
 8001398:	0a3d70a4 	.word	0x0a3d70a4
 800139c:	4078efd7 	.word	0x4078efd7
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	5c28f5c3 	.word	0x5c28f5c3
 80013ac:	40792a8f 	.word	0x40792a8f
 80013b0:	200006d8 	.word	0x200006d8
 80013b4:	20000218 	.word	0x20000218
 80013b8:	43340000 	.word	0x43340000
 80013bc:	43b40000 	.word	0x43b40000
 80013c0:	c3340000 	.word	0xc3340000
 80013c4:	200006dc 	.word	0x200006dc
 80013c8:	2000021c 	.word	0x2000021c
 80013cc:	40668000 	.word	0x40668000
 80013d0:	40790000 	.word	0x40790000
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	20000228 	.word	0x20000228
 80013dc:	2000022c 	.word	0x2000022c
 80013e0:	20000220 	.word	0x20000220
 80013e4:	20000224 	.word	0x20000224

080013e8 <interupt_calFusion>:


void interupt_calFusion(void) {
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80013ee:	4bca      	ldr	r3, [pc, #808]	; (8001718 <interupt_calFusion+0x330>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <interupt_calFusion+0x334>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	4bc6      	ldr	r3, [pc, #792]	; (8001718 <interupt_calFusion+0x330>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140c:	4bc4      	ldr	r3, [pc, #784]	; (8001720 <interupt_calFusion+0x338>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4bc0      	ldr	r3, [pc, #768]	; (800171c <interupt_calFusion+0x334>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001420:	4bbd      	ldr	r3, [pc, #756]	; (8001718 <interupt_calFusion+0x330>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4bbf      	ldr	r3, [pc, #764]	; (8001724 <interupt_calFusion+0x33c>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	4bb9      	ldr	r3, [pc, #740]	; (8001718 <interupt_calFusion+0x330>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800143a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143e:	4bba      	ldr	r3, [pc, #744]	; (8001728 <interupt_calFusion+0x340>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4bb5      	ldr	r3, [pc, #724]	; (8001724 <interupt_calFusion+0x33c>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 8001452:	4bb6      	ldr	r3, [pc, #728]	; (800172c <interupt_calFusion+0x344>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f89e 	bl	8000598 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4bae      	ldr	r3, [pc, #696]	; (800171c <interupt_calFusion+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8ea 	bl	8000648 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ff2e 	bl	80002dc <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fbb6 	bl	8000bf8 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4aa7      	ldr	r2, [pc, #668]	; (800172c <interupt_calFusion+0x344>)
 8001490:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 8001492:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <interupt_calFusion+0x348>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f87e 	bl	8000598 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <interupt_calFusion+0x33c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f877 	bl	8000598 <__aeabi_f2d>
 80014aa:	a399      	add	r3, pc, #612	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8ca 	bl	8000648 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe ff0e 	bl	80002dc <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a98      	ldr	r2, [pc, #608]	; (8001730 <interupt_calFusion+0x348>)
 80014d0:	6013      	str	r3, [r2, #0]


	G_hpf_speedL = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 80014d2:	4b91      	ldr	r3, [pc, #580]	; (8001718 <interupt_calFusion+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4b94      	ldr	r3, [pc, #592]	; (8001734 <interupt_calFusion+0x34c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <interupt_calFusion+0x350>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	a385      	add	r3, pc, #532	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f8a3 	bl	8000648 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4640      	mov	r0, r8
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fee7 	bl	80002dc <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb69 	bl	8000bf8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	4a82      	ldr	r2, [pc, #520]	; (8001734 <interupt_calFusion+0x34c>)
 800152a:	6013      	str	r3, [r2, #0]
	G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 800152c:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <interupt_calFusion+0x330>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f831 	bl	8000598 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <interupt_calFusion+0x34c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f82a 	bl	8000598 <__aeabi_f2d>
 8001544:	4680      	mov	r8, r0
 8001546:	4689      	mov	r9, r1
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <interupt_calFusion+0x350>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f823 	bl	8000598 <__aeabi_f2d>
 8001552:	a36f      	add	r3, pc, #444	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f876 	bl	8000648 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7fe feba 	bl	80002dc <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f86a 	bl	8000648 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fb3c 	bl	8000bf8 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <interupt_calFusion+0x354>)
 8001584:	6013      	str	r3, [r2, #0]
	G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <interupt_calFusion+0x358>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <interupt_calFusion+0x34c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	a35c      	add	r3, pc, #368	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe94 	bl	80002dc <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb1c 	bl	8000bf8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <interupt_calFusion+0x358>)
 80015c4:	6013      	str	r3, [r2, #0]
	G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <interupt_calFusion+0x35c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffe4 	bl	8000598 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <interupt_calFusion+0x354>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffdd 	bl	8000598 <__aeabi_f2d>
 80015de:	a34c      	add	r3, pc, #304	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f830 	bl	8000648 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe74 	bl	80002dc <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fafc 	bl	8000bf8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a50      	ldr	r2, [pc, #320]	; (8001744 <interupt_calFusion+0x35c>)
 8001604:	6013      	str	r3, [r2, #0]


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <interupt_calFusion+0x330>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <interupt_calFusion+0x360>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffbd 	bl	8000598 <__aeabi_f2d>
 800161e:	4680      	mov	r8, r0
 8001620:	4689      	mov	r9, r1
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <interupt_calFusion+0x350>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffb6 	bl	8000598 <__aeabi_f2d>
 800162c:	a338      	add	r3, pc, #224	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f809 	bl	8000648 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4640      	mov	r0, r8
 800163c:	4649      	mov	r1, r9
 800163e:	f7fe fe4d 	bl	80002dc <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fffd 	bl	8000648 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4614      	mov	r4, r2
 8001654:	461d      	mov	r5, r3
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <interupt_calFusion+0x330>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <interupt_calFusion+0x338>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff91 	bl	8000598 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe2d 	bl	80002dc <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fab5 	bl	8000bf8 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <interupt_calFusion+0x360>)
 8001692:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <interupt_calFusion+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff7d 	bl	8000598 <__aeabi_f2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <interupt_calFusion+0x360>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff76 	bl	8000598 <__aeabi_f2d>
 80016ac:	4680      	mov	r8, r0
 80016ae:	4689      	mov	r9, r1
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <interupt_calFusion+0x350>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	a315      	add	r3, pc, #84	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffc2 	bl	8000648 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4640      	mov	r0, r8
 80016ca:	4649      	mov	r1, r9
 80016cc:	f7fe fe06 	bl	80002dc <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ffb6 	bl	8000648 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <interupt_calFusion+0x330>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <interupt_calFusion+0x340>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	ee17 0a90 	vmov	r0, s15
 8001700:	f7fe ff4a 	bl	8000598 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	e01e      	b.n	800174c <interupt_calFusion+0x364>
 800170e:	bf00      	nop
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	3f50624d 	.word	0x3f50624d
 8001718:	20000260 	.word	0x20000260
 800171c:	20000238 	.word	0x20000238
 8001720:	20000228 	.word	0x20000228
 8001724:	2000023c 	.word	0x2000023c
 8001728:	2000022c 	.word	0x2000022c
 800172c:	20000230 	.word	0x20000230
 8001730:	20000234 	.word	0x20000234
 8001734:	20000248 	.word	0x20000248
 8001738:	20000280 	.word	0x20000280
 800173c:	2000024c 	.word	0x2000024c
 8001740:	20000240 	.word	0x20000240
 8001744:	20000244 	.word	0x20000244
 8001748:	20000258 	.word	0x20000258
 800174c:	f7fe fdc6 	bl	80002dc <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa4e 	bl	8000bf8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <interupt_calFusion+0x408>)
 8001760:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <interupt_calFusion+0x40c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <interupt_calFusion+0x410>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff0f 	bl	8000598 <__aeabi_f2d>
 800177a:	a31b      	add	r3, pc, #108	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff62 	bl	8000648 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fda6 	bl	80002dc <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa2e 	bl	8000bf8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <interupt_calFusion+0x40c>)
 80017a0:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <interupt_calFusion+0x414>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fef6 	bl	8000598 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <interupt_calFusion+0x408>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe feef 	bl	8000598 <__aeabi_f2d>
 80017ba:	a30b      	add	r3, pc, #44	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff42 	bl	8000648 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd86 	bl	80002dc <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fa0e 	bl	8000bf8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <interupt_calFusion+0x414>)
 80017e0:	6013      	str	r3, [r2, #0]

}
 80017e2:	bf00      	nop
 80017e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ec:	3f50624d 	.word	0x3f50624d
 80017f0:	2000025c 	.word	0x2000025c
 80017f4:	20000250 	.word	0x20000250
 80017f8:	20000258 	.word	0x20000258
 80017fc:	20000254 	.word	0x20000254

08001800 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	int s = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	angle = 0;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <reset_gyro+0xfc>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <reset_gyro+0x100>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e026      	b.n	800186e <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <reset_gyro+0x104>)
 8001822:	ed93 7a02 	vldr	s14, [r3, #8]
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <reset_gyro+0x100>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <reset_gyro+0x100>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <reset_gyro+0x104>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <reset_gyro+0x108>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <reset_gyro+0x108>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <reset_gyro+0x104>)
 800184e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <reset_gyro+0x10c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <reset_gyro+0x10c>)
 800185e:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f006 fd84 	bl	8008370 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	ddd4      	ble.n	8001820 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <reset_gyro+0x100>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001910 <reset_gyro+0x110>
 8001880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <reset_gyro+0x100>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <reset_gyro+0x108>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001910 <reset_gyro+0x110>
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <reset_gyro+0x108>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <reset_gyro+0x10c>)
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001910 <reset_gyro+0x110>
 80018a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <reset_gyro+0x10c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <reset_gyro+0xfc>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	anglex = 0;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <reset_gyro+0x114>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <reset_gyro+0x118>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <reset_gyro+0x11c>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e009      	b.n	80018ec <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <reset_gyro+0x120>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	ddf2      	ble.n	80018d8 <reset_gyro+0xd8>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000264 	.word	0x20000264
 8001900:	20000288 	.word	0x20000288
 8001904:	200006e4 	.word	0x200006e4
 8001908:	20000284 	.word	0x20000284
 800190c:	2000028c 	.word	0x2000028c
 8001910:	447a0000 	.word	0x447a0000
 8001914:	2000026c 	.word	0x2000026c
 8001918:	20000278 	.word	0x20000278
 800191c:	2000027c 	.word	0x2000027c
 8001920:	20000290 	.word	0x20000290
 8001924:	00000000 	.word	0x00000000

08001928 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	int j = 9;
 800192e:	2309      	movs	r3, #9
 8001930:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001932:	2309      	movs	r3, #9
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e00d      	b.n	8001954 <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	4aa6      	ldr	r2, [pc, #664]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	49a4      	ldr	r1, [pc, #656]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dcee      	bgt.n	8001938 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 800195a:	4ba0      	ldr	r3, [pc, #640]	; (8001bdc <interrupt_calGyro+0x2b4>)
 800195c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001960:	4b9f      	ldr	r3, [pc, #636]	; (8001be0 <interrupt_calGyro+0x2b8>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a387      	add	r3, pc, #540	; (adr r3, 8001b90 <interrupt_calGyro+0x268>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a384      	add	r3, pc, #528	; (adr r3, 8001b98 <interrupt_calGyro+0x270>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe5d 	bl	8000648 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	a382      	add	r3, pc, #520	; (adr r3, 8001ba0 <interrupt_calGyro+0x278>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe ff7e 	bl	800089c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7ff f926 	bl	8000bf8 <__aeabi_d2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a8a      	ldr	r2, [pc, #552]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b0:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a8b      	ldr	r2, [pc, #556]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019b8:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 80019ba:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a8a      	ldr	r2, [pc, #552]	; (8001be8 <interrupt_calGyro+0x2c0>)
 80019c0:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 80019c2:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <interrupt_calGyro+0x2c4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <interrupt_calGyro+0x2c8>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 80019d8:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fddb 	bl	8000598 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdd4 	bl	8000598 <__aeabi_f2d>
 80019f0:	a36d      	add	r3, pc, #436	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe27 	bl	8000648 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc6b 	bl	80002dc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8f3 	bl	8000bf8 <__aeabi_d2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 8001a16:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001a18:	4b77      	ldr	r3, [pc, #476]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fdbb 	bl	8000598 <__aeabi_f2d>
 8001a22:	4604      	mov	r4, r0
 8001a24:	460d      	mov	r5, r1
 8001a26:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <interrupt_calGyro+0x2c4>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	ee17 0a90 	vmov	r0, s15
 8001a3a:	f7fe fdad 	bl	8000598 <__aeabi_f2d>
 8001a3e:	a35a      	add	r3, pc, #360	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fe00 	bl	8000648 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fc44 	bl	80002dc <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8cc 	bl	8000bf8 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a64:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a68:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <interrupt_calGyro+0x2d4>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	ee17 0a90 	vmov	r0, s15
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	a34c      	add	r3, pc, #304	; (adr r3, 8001bb0 <interrupt_calGyro+0x288>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fde0 	bl	8000648 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	a349      	add	r3, pc, #292	; (adr r3, 8001bb8 <interrupt_calGyro+0x290>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fdd7 	bl	8000648 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	a347      	add	r3, pc, #284	; (adr r3, 8001bc0 <interrupt_calGyro+0x298>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fef8 	bl	800089c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <interrupt_calGyro+0x2d8>)
 8001aba:	f7fe fdc5 	bl	8000648 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a340      	add	r3, pc, #256	; (adr r3, 8001bc8 <interrupt_calGyro+0x2a0>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <interrupt_calGyro+0x2dc>)
 8001ade:	f7fe fdb3 	bl	8000648 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a339      	add	r3, pc, #228	; (adr r3, 8001bd0 <interrupt_calGyro+0x2a8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fdaa 	bl	8000648 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f87c 	bl	8000bf8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b04:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd44 	bl	8000598 <__aeabi_f2d>
 8001b10:	4604      	mov	r4, r0
 8001b12:	460d      	mov	r5, r1
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	a322      	add	r3, pc, #136	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b44:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a312      	add	r3, pc, #72	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b84:	6013      	str	r3, [r2, #0]




}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	70a3d70a 	.word	0x70a3d70a
 8001b94:	3fef0a3d 	.word	0x3fef0a3d
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40acd400 	.word	0x40acd400
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40ac2000 	.word	0x40ac2000
 8001ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bac:	3f50624d 	.word	0x3f50624d
 8001bb0:	0fcf80dc 	.word	0x0fcf80dc
 8001bb4:	3ff0a423 	.word	0x3ff0a423
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	4078c000 	.word	0x4078c000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	4077d000 	.word	0x4077d000
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	407a7000 	.word	0x407a7000
 8001bd0:	3a92a305 	.word	0x3a92a305
 8001bd4:	40239d01 	.word	0x40239d01
 8001bd8:	20000290 	.word	0x20000290
 8001bdc:	200006e4 	.word	0x200006e4
 8001be0:	20000288 	.word	0x20000288
 8001be4:	20000268 	.word	0x20000268
 8001be8:	20000270 	.word	0x20000270
 8001bec:	20000284 	.word	0x20000284
 8001bf0:	20000274 	.word	0x20000274
 8001bf4:	20000264 	.word	0x20000264
 8001bf8:	2000026c 	.word	0x2000026c
 8001bfc:	2000028c 	.word	0x2000028c
 8001c00:	40790000 	.word	0x40790000
 8001c04:	408f4000 	.word	0x408f4000
 8001c08:	20000280 	.word	0x20000280
 8001c0c:	20000278 	.word	0x20000278
 8001c10:	2000027c 	.word	0x2000027c
 8001c14:	00000000 	.word	0x00000000

08001c18 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e00f      	b.n	8001c44 <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001c24:	f006 f964 	bl	8007ef0 <pl_getbatt>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <battcheak+0xe8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f006 fb55 	bl	80082e8 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b13      	cmp	r3, #19
 8001c48:	ddec      	ble.n	8001c24 <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <battcheak+0xec>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e010      	b.n	8001c7a <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <battcheak+0xe8>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <battcheak+0xec>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <battcheak+0xec>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b13      	cmp	r3, #19
 8001c7e:	ddeb      	ble.n	8001c58 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <battcheak+0xec>)
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <battcheak+0xec>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <battcheak+0xec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc7d 	bl	8000598 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <battcheak+0xf0>)
 8001ca4:	f01d fe12 	bl	801f8cc <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <battcheak+0xec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc73 	bl	8000598 <__aeabi_f2d>
 8001cb2:	a311      	add	r3, pc, #68	; (adr r3, 8001cf8 <battcheak+0xe0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe ff42 	bl	8000b40 <__aeabi_dcmple>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001cc2:	e014      	b.n	8001cee <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f005 fb81 	bl	80073cc <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f005 fb90 	bl	80073f0 <pl_l_blue_LED>
		wait_ms(500);
 8001cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd4:	f006 fb08 	bl	80082e8 <wait_ms>
		pl_r_blue_LED(OFF);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f005 fb77 	bl	80073cc <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f005 fb86 	bl	80073f0 <pl_l_blue_LED>
		wait_ms(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce8:	f006 fafe 	bl	80082e8 <wait_ms>
		pl_r_blue_LED(ON);
 8001cec:	e7ea      	b.n	8001cc4 <battcheak+0xac>
}
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	9999999a 	.word	0x9999999a
 8001cfc:	400d9999 	.word	0x400d9999
 8001d00:	20000484 	.word	0x20000484
 8001d04:	200004d4 	.word	0x200004d4
 8001d08:	08022008 	.word	0x08022008

08001d0c <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001d12:	f006 fa8b 	bl	800822c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001d16:	2313      	movs	r3, #19
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	e037      	b.n	8001d8c <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d26:	4960      	ldr	r1, [pc, #384]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d34:	3314      	adds	r3, #20
 8001d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3a:	495b      	ldr	r1, [pc, #364]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d4a:	3328      	adds	r3, #40	; 0x28
 8001d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d50:	4955      	ldr	r1, [pc, #340]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d66:	4950      	ldr	r1, [pc, #320]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	333c      	adds	r3, #60	; 0x3c
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d76:	3350      	adds	r3, #80	; 0x50
 8001d78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d7c:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3350      	adds	r3, #80	; 0x50
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dcc4      	bgt.n	8001d1c <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <interupt_calSensor+0x1a0>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001da0:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <interupt_calSensor+0x1a0>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001db0:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <interupt_calSensor+0x1a0>)
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dc0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dc6:	88db      	ldrh	r3, [r3, #6]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dcc:	88db      	ldrh	r3, [r3, #6]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dde:	891b      	ldrh	r3, [r3, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e053      	b.n	8001e96 <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001dee:	492e      	ldr	r1, [pc, #184]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	440b      	add	r3, r1
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	482a      	ldr	r0, [pc, #168]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4403      	add	r3, r0
 8001e0c:	332c      	adds	r3, #44	; 0x2c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1aca      	subs	r2, r1, r3
 8001e12:	4928      	ldr	r1, [pc, #160]	; (8001eb4 <interupt_calSensor+0x1a8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
 8001e1a:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	440b      	add	r3, r1
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4403      	add	r3, r0
 8001e38:	3318      	adds	r3, #24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1aca      	subs	r2, r1, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <interupt_calSensor+0x1ac>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001e46:	4918      	ldr	r1, [pc, #96]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	440b      	add	r3, r1
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4403      	add	r3, r0
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4419      	add	r1, r3
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4403      	add	r3, r0
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	440b      	add	r3, r1
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <interupt_calSensor+0x1b0>)
 8001e80:	fb82 1203 	smull	r1, r2, r2, r3
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <interupt_calSensor+0x1b4>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	dda8      	ble.n	8001dee <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002b8 	.word	0x200002b8
 8001eac:	2000070c 	.word	0x2000070c
 8001eb0:	20000718 	.word	0x20000718
 8001eb4:	20000448 	.word	0x20000448
 8001eb8:	2000045c 	.word	0x2000045c
 8001ebc:	55555556 	.word	0x55555556
 8001ec0:	20000470 	.word	0x20000470

08001ec4 <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Control_mode_Init+0x28>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Control_mode_Init+0x2c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <Control_mode_Init+0x30>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <Control_mode_Init+0x34>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]

}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000528 	.word	0x20000528
 8001ef0:	20000805 	.word	0x20000805
 8001ef4:	20000800 	.word	0x20000800
 8001ef8:	20000529 	.word	0x20000529

08001efc <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	db14      	blt.n	8001f46 <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f005 ff1b 	bl	8007d58 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <get_duty+0x11c>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f30:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800201c <get_duty+0x120>
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3c:	ee17 2a90 	vmov	r2, s15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e015      	b.n	8001f72 <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f005 ff06 	bl	8007d58 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f50:	eef1 6a67 	vneg.f32	s13, s15
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <get_duty+0x11c>)
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800201c <get_duty+0x120>
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	ee17 2a90 	vmov	r2, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	db14      	blt.n	8001faa <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f005 ff11 	bl	8007da8 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <get_duty+0x11c>)
 8001f88:	ed93 7a00 	vldr	s14, [r3]
 8001f8c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800201c <get_duty+0x120>
 8001f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa0:	ee17 2a90 	vmov	r2, s15
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e015      	b.n	8001fd6 <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001faa:	2002      	movs	r0, #2
 8001fac:	f005 fefc 	bl	8007da8 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb4:	eef1 6a67 	vneg.f32	s13, s15
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <get_duty+0x11c>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800201c <get_duty+0x120>
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fce:	ee17 2a90 	vmov	r2, s15
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f240 628c 	movw	r2, #1676	; 0x68c
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	dd03      	ble.n	8001ffa <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ff8:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f240 628c 	movw	r2, #1676	; 0x68c
 8002002:	4293      	cmp	r3, r2
 8002004:	dd03      	ble.n	800200e <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f240 628d 	movw	r2, #1677	; 0x68d
 800200c:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200004d4 	.word	0x200004d4
 800201c:	44d1e000 	.word	0x44d1e000

08002020 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002024:	b08c      	sub	sp, #48	; 0x30
 8002026:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 800204e:	4bd2      	ldr	r3, [pc, #840]	; (8002398 <interupt_DriveMotor+0x378>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8002056:	4bd1      	ldr	r3, [pc, #836]	; (800239c <interupt_DriveMotor+0x37c>)
 8002058:	2204      	movs	r2, #4
 800205a:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 800205c:	4bd0      	ldr	r3, [pc, #832]	; (80023a0 <interupt_DriveMotor+0x380>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002062:	4bd0      	ldr	r3, [pc, #832]	; (80023a4 <interupt_DriveMotor+0x384>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8002068:	4bcb      	ldr	r3, [pc, #812]	; (8002398 <interupt_DriveMotor+0x378>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 828f 	bne.w	8002590 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8002072:	4bcc      	ldr	r3, [pc, #816]	; (80023a4 <interupt_DriveMotor+0x384>)
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002078:	4bcb      	ldr	r3, [pc, #812]	; (80023a8 <interupt_DriveMotor+0x388>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4aca      	ldr	r2, [pc, #808]	; (80023a8 <interupt_DriveMotor+0x388>)
 8002080:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002082:	4bca      	ldr	r3, [pc, #808]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa86 	bl	8000598 <__aeabi_f2d>
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
 8002090:	4bc6      	ldr	r3, [pc, #792]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa7f 	bl	8000598 <__aeabi_f2d>
 800209a:	a3bb      	add	r3, pc, #748	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fad2 	bl	8000648 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4690      	mov	r8, r2
 80020aa:	4699      	mov	r9, r3
 80020ac:	4bbf      	ldr	r3, [pc, #764]	; (80023ac <interupt_DriveMotor+0x38c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa71 	bl	8000598 <__aeabi_f2d>
 80020b6:	a3b4      	add	r3, pc, #720	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fac4 	bl	8000648 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	a3af      	add	r3, pc, #700	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fabb 	bl	8000648 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e2:	f7fe fbdb 	bl	800089c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4640      	mov	r0, r8
 80020ec:	4649      	mov	r1, r9
 80020ee:	f7fe f8f5 	bl	80002dc <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe f8ef 	bl	80002dc <__adddf3>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd77 	bl	8000bf8 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4aa7      	ldr	r2, [pc, #668]	; (80023ac <interupt_DriveMotor+0x38c>)
 800210e:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002110:	4ba6      	ldr	r3, [pc, #664]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa3f 	bl	8000598 <__aeabi_f2d>
 800211a:	4604      	mov	r4, r0
 800211c:	460d      	mov	r5, r1
 800211e:	4ba3      	ldr	r3, [pc, #652]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa38 	bl	8000598 <__aeabi_f2d>
 8002128:	a397      	add	r3, pc, #604	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fa8b 	bl	8000648 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f8cf 	bl	80002dc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd57 	bl	8000bf8 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4a97      	ldr	r2, [pc, #604]	; (80023ac <interupt_DriveMotor+0x38c>)
 800214e:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002150:	4b97      	ldr	r3, [pc, #604]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fa1f 	bl	8000598 <__aeabi_f2d>
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa18 	bl	8000598 <__aeabi_f2d>
 8002168:	a387      	add	r3, pc, #540	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa6b 	bl	8000648 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4690      	mov	r8, r2
 8002178:	4699      	mov	r9, r3
 800217a:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <interupt_DriveMotor+0x390>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fa0a 	bl	8000598 <__aeabi_f2d>
 8002184:	a380      	add	r3, pc, #512	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa5d 	bl	8000648 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	a37c      	add	r3, pc, #496	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe fa54 	bl	8000648 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b0:	f7fe fb74 	bl	800089c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4640      	mov	r0, r8
 80021ba:	4649      	mov	r1, r9
 80021bc:	f7fe f88e 	bl	80002dc <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	f7fe f888 	bl	80002dc <__adddf3>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fd10 	bl	8000bf8 <__aeabi_d2f>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a75      	ldr	r2, [pc, #468]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021dc:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80021de:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9d8 	bl	8000598 <__aeabi_f2d>
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9d1 	bl	8000598 <__aeabi_f2d>
 80021f6:	a364      	add	r3, pc, #400	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe fa24 	bl	8000648 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe f868 	bl	80002dc <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fcf0 	bl	8000bf8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	4a65      	ldr	r2, [pc, #404]	; (80023b0 <interupt_DriveMotor+0x390>)
 800221c:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 800221e:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <interupt_DriveMotor+0x394>)
 8002220:	4a62      	ldr	r2, [pc, #392]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002222:	9201      	str	r2, [sp, #4]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	f006 fa5b 	bl	80086e4 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	eef0 0a47 	vmov.f32	s1, s14
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fc85 	bl	8004b5c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002252:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <interupt_DriveMotor+0x398>)
 8002254:	ed93 7a00 	vldr	s14, [r3]
 8002258:	4b58      	ldr	r3, [pc, #352]	; (80023bc <interupt_DriveMotor+0x39c>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002262:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <interupt_DriveMotor+0x38c>)
 800226c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <interupt_DriveMotor+0x3a0>)
 8002272:	edd3 6a00 	vldr	s13, [r3]
 8002276:	4b4e      	ldr	r3, [pc, #312]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002278:	ed93 6a01 	vldr	s12, [r3, #4]
 800227c:	1d3a      	adds	r2, r7, #4
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	eef0 1a46 	vmov.f32	s3, s12
 8002286:	eeb0 1a66 	vmov.f32	s2, s13
 800228a:	4611      	mov	r1, r2
 800228c:	eef0 0a67 	vmov.f32	s1, s15
 8002290:	eeb0 0a47 	vmov.f32	s0, s14
 8002294:	4618      	mov	r0, r3
 8002296:	f002 f9bb 	bl	8004610 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 800229a:	f002 fe49 	bl	8004f30 <calWallConrol>
 800229e:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80022a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80022b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022be:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80022ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022de:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ee:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80022f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	ee17 0a90 	vmov	r0, s15
 8002302:	f7fe f949 	bl	8000598 <__aeabi_f2d>
 8002306:	4604      	mov	r4, r0
 8002308:	460d      	mov	r5, r1
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <interupt_DriveMotor+0x3a4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f942 	bl	8000598 <__aeabi_f2d>
 8002314:	a31e      	add	r3, pc, #120	; (adr r3, 8002390 <interupt_DriveMotor+0x370>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f995 	bl	8000648 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4620      	mov	r0, r4
 8002324:	4629      	mov	r1, r5
 8002326:	f7fe fc1f 	bl	8000b68 <__aeabi_dcmpgt>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 808d 	beq.w	800244c <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002334:	f7fe f930 	bl	8000598 <__aeabi_f2d>
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <interupt_DriveMotor+0x3a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f929 	bl	8000598 <__aeabi_f2d>
 8002346:	a312      	add	r3, pc, #72	; (adr r3, 8002390 <interupt_DriveMotor+0x370>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f97c 	bl	8000648 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4690      	mov	r8, r2
 8002356:	4699      	mov	r9, r3
 8002358:	ed97 7a04 	vldr	s14, [r7, #16]
 800235c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002364:	ee17 0a90 	vmov	r0, s15
 8002368:	f7fe f916 	bl	8000598 <__aeabi_f2d>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4640      	mov	r0, r8
 8002372:	4649      	mov	r1, r9
 8002374:	f7fd ffb0 	bl	80002d8 <__aeabi_dsub>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	e022      	b.n	80023c8 <interupt_DriveMotor+0x3a8>
 8002382:	bf00      	nop
 8002384:	f3af 8000 	nop.w
 8002388:	d2f1a9fc 	.word	0xd2f1a9fc
 800238c:	3f50624d 	.word	0x3f50624d
 8002390:	d916872b 	.word	0xd916872b
 8002394:	3feff7ce 	.word	0x3feff7ce
 8002398:	20000528 	.word	0x20000528
 800239c:	20000804 	.word	0x20000804
 80023a0:	20000590 	.word	0x20000590
 80023a4:	20000592 	.word	0x20000592
 80023a8:	20000524 	.word	0x20000524
 80023ac:	200004d8 	.word	0x200004d8
 80023b0:	200004e4 	.word	0x200004e4
 80023b4:	200004f0 	.word	0x200004f0
 80023b8:	20000238 	.word	0x20000238
 80023bc:	2000023c 	.word	0x2000023c
 80023c0:	20000268 	.word	0x20000268
 80023c4:	200004d4 	.word	0x200004d4
 80023c8:	f7fd ff88 	bl	80002dc <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fc10 	bl	8000bf8 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023dc:	6a38      	ldr	r0, [r7, #32]
 80023de:	f7fe f8db 	bl	8000598 <__aeabi_f2d>
 80023e2:	4604      	mov	r4, r0
 80023e4:	460d      	mov	r5, r1
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <interupt_DriveMotor+0x428>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8d4 	bl	8000598 <__aeabi_f2d>
 80023f0:	a313      	add	r3, pc, #76	; (adr r3, 8002440 <interupt_DriveMotor+0x420>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f927 	bl	8000648 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4690      	mov	r8, r2
 8002400:	4699      	mov	r9, r3
 8002402:	ed97 7a04 	vldr	s14, [r7, #16]
 8002406:	edd7 7a02 	vldr	s15, [r7, #8]
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	ee17 0a90 	vmov	r0, s15
 8002412:	f7fe f8c1 	bl	8000598 <__aeabi_f2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4640      	mov	r0, r8
 800241c:	4649      	mov	r1, r9
 800241e:	f7fd ff5b 	bl	80002d8 <__aeabi_dsub>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fd ff57 	bl	80002dc <__adddf3>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fbdf 	bl	8000bf8 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e095      	b.n	800256c <interupt_DriveMotor+0x54c>
 8002440:	d916872b 	.word	0xd916872b
 8002444:	3feff7ce 	.word	0x3feff7ce
 8002448:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800244c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	ee17 0a90 	vmov	r0, s15
 800245c:	f7fe f89c 	bl	8000598 <__aeabi_f2d>
 8002460:	4604      	mov	r4, r0
 8002462:	460d      	mov	r5, r1
 8002464:	4bce      	ldr	r3, [pc, #824]	; (80027a0 <interupt_DriveMotor+0x780>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	eef1 7a67 	vneg.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f890 	bl	8000598 <__aeabi_f2d>
 8002478:	a3c5      	add	r3, pc, #788	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe f8e3 	bl	8000648 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4620      	mov	r0, r4
 8002488:	4629      	mov	r1, r5
 800248a:	f7fe fb4f 	bl	8000b2c <__aeabi_dcmplt>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d06b      	beq.n	800256c <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002496:	f7fe f87f 	bl	8000598 <__aeabi_f2d>
 800249a:	4604      	mov	r4, r0
 800249c:	460d      	mov	r5, r1
 800249e:	4bc0      	ldr	r3, [pc, #768]	; (80027a0 <interupt_DriveMotor+0x780>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eef1 7a67 	vneg.f32	s15, s15
 80024a8:	ee17 3a90 	vmov	r3, s15
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f873 	bl	8000598 <__aeabi_f2d>
 80024b2:	a3b7      	add	r3, pc, #732	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f8c6 	bl	8000648 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4690      	mov	r8, r2
 80024c2:	4699      	mov	r9, r3
 80024c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80024c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	ee17 0a90 	vmov	r0, s15
 80024d4:	f7fe f860 	bl	8000598 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4640      	mov	r0, r8
 80024de:	4649      	mov	r1, r9
 80024e0:	f7fd fefa 	bl	80002d8 <__aeabi_dsub>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4620      	mov	r0, r4
 80024ea:	4629      	mov	r1, r5
 80024ec:	f7fd fef6 	bl	80002dc <__adddf3>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe fb7e 	bl	8000bf8 <__aeabi_d2f>
 80024fc:	4603      	mov	r3, r0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002500:	6a38      	ldr	r0, [r7, #32]
 8002502:	f7fe f849 	bl	8000598 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	4ba5      	ldr	r3, [pc, #660]	; (80027a0 <interupt_DriveMotor+0x780>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eef1 7a67 	vneg.f32	s15, s15
 8002514:	ee17 3a90 	vmov	r3, s15
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f83d 	bl	8000598 <__aeabi_f2d>
 800251e:	a39c      	add	r3, pc, #624	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f890 	bl	8000648 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4690      	mov	r8, r2
 800252e:	4699      	mov	r9, r3
 8002530:	ed97 7a04 	vldr	s14, [r7, #16]
 8002534:	edd7 7a02 	vldr	s15, [r7, #8]
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	ee17 0a90 	vmov	r0, s15
 8002540:	f7fe f82a 	bl	8000598 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4640      	mov	r0, r8
 800254a:	4649      	mov	r1, r9
 800254c:	f7fd fec4 	bl	80002d8 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4620      	mov	r0, r4
 8002556:	4629      	mov	r1, r5
 8002558:	f7fd fec0 	bl	80002dc <__adddf3>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fb48 	bl	8000bf8 <__aeabi_d2f>
 8002568:	4603      	mov	r3, r0
 800256a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800256c:	f107 0214 	add.w	r2, r7, #20
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	edd7 0a08 	vldr	s1, [r7, #32]
 800257c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002580:	f7ff fcbc 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f005 fc4e 	bl	8007e2c <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002590:	4b84      	ldr	r3, [pc, #528]	; (80027a4 <interupt_DriveMotor+0x784>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d004      	beq.n	80025a2 <interupt_DriveMotor+0x582>
 8002598:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <interupt_DriveMotor+0x784>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b04      	cmp	r3, #4
 800259e:	f040 8287 	bne.w	8002ab0 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80025a2:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <interupt_DriveMotor+0x788>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <interupt_DriveMotor+0x78c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80025ae:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <interupt_DriveMotor+0x790>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <interupt_DriveMotor+0x790>)
 80025b6:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffeb 	bl	8000598 <__aeabi_f2d>
 80025c2:	4604      	mov	r4, r0
 80025c4:	460d      	mov	r5, r1
 80025c6:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffe4 	bl	8000598 <__aeabi_f2d>
 80025d0:	a371      	add	r3, pc, #452	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f837 	bl	8000648 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4690      	mov	r8, r2
 80025e0:	4699      	mov	r9, r3
 80025e2:	4b74      	ldr	r3, [pc, #464]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffd6 	bl	8000598 <__aeabi_f2d>
 80025ec:	a36a      	add	r3, pc, #424	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f829 	bl	8000648 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	a366      	add	r3, pc, #408	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f820 	bl	8000648 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002618:	f7fe f940 	bl	800089c <__aeabi_ddiv>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fd fe5a 	bl	80002dc <__adddf3>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe54 	bl	80002dc <__adddf3>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fadc 	bl	8000bf8 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002644:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002646:	4b5b      	ldr	r3, [pc, #364]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ffa4 	bl	8000598 <__aeabi_f2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff9d 	bl	8000598 <__aeabi_f2d>
 800265e:	a34e      	add	r3, pc, #312	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fd fff0 	bl	8000648 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd fe34 	bl	80002dc <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fabc 	bl	8000bf8 <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
 8002682:	4a4c      	ldr	r2, [pc, #304]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002684:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002686:	4b4c      	ldr	r3, [pc, #304]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff84 	bl	8000598 <__aeabi_f2d>
 8002690:	4604      	mov	r4, r0
 8002692:	460d      	mov	r5, r1
 8002694:	4b48      	ldr	r3, [pc, #288]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff7d 	bl	8000598 <__aeabi_f2d>
 800269e:	a33e      	add	r3, pc, #248	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ffd0 	bl	8000648 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4690      	mov	r8, r2
 80026ae:	4699      	mov	r9, r3
 80026b0:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <interupt_DriveMotor+0x798>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff6f 	bl	8000598 <__aeabi_f2d>
 80026ba:	a337      	add	r3, pc, #220	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd ffc2 	bl	8000648 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	a332      	add	r3, pc, #200	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd ffb9 	bl	8000648 <__aeabi_dmul>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e6:	f7fe f8d9 	bl	800089c <__aeabi_ddiv>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4640      	mov	r0, r8
 80026f0:	4649      	mov	r1, r9
 80026f2:	f7fd fdf3 	bl	80002dc <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fd fded 	bl	80002dc <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa75 	bl	8000bf8 <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002712:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002714:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff3d 	bl	8000598 <__aeabi_f2d>
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd ff36 	bl	8000598 <__aeabi_f2d>
 800272c:	a31a      	add	r3, pc, #104	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd ff89 	bl	8000648 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4620      	mov	r0, r4
 800273c:	4629      	mov	r1, r5
 800273e:	f7fd fdcd 	bl	80002dc <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa55 	bl	8000bf8 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002752:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <interupt_DriveMotor+0x79c>)
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002760:	f005 ffc0 	bl	80086e4 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <interupt_DriveMotor+0x798>)
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	f107 020c 	add.w	r2, r7, #12
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	eef0 0a47 	vmov.f32	s1, s14
 800277c:	eeb0 0a67 	vmov.f32	s0, s15
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f002 f9ea 	bl	8004b5c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <interupt_DriveMotor+0x7a0>)
 800278a:	ed93 7a00 	vldr	s14, [r3]
 800278e:	e019      	b.n	80027c4 <interupt_DriveMotor+0x7a4>
 8002790:	d916872b 	.word	0xd916872b
 8002794:	3feff7ce 	.word	0x3feff7ce
 8002798:	d2f1a9fc 	.word	0xd2f1a9fc
 800279c:	3f50624d 	.word	0x3f50624d
 80027a0:	200004d4 	.word	0x200004d4
 80027a4:	20000528 	.word	0x20000528
 80027a8:	20000590 	.word	0x20000590
 80027ac:	20000592 	.word	0x20000592
 80027b0:	20000524 	.word	0x20000524
 80027b4:	200004d8 	.word	0x200004d8
 80027b8:	200004e4 	.word	0x200004e4
 80027bc:	20000504 	.word	0x20000504
 80027c0:	20000238 	.word	0x20000238
 80027c4:	4b64      	ldr	r3, [pc, #400]	; (8002958 <interupt_DriveMotor+0x938>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <interupt_DriveMotor+0x93c>)
 80027d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80027dc:	4b60      	ldr	r3, [pc, #384]	; (8002960 <interupt_DriveMotor+0x940>)
 80027de:	edd3 6a00 	vldr	s13, [r3]
 80027e2:	4b60      	ldr	r3, [pc, #384]	; (8002964 <interupt_DriveMotor+0x944>)
 80027e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80027e8:	1d3a      	adds	r2, r7, #4
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	eef0 1a46 	vmov.f32	s3, s12
 80027f2:	eeb0 1a66 	vmov.f32	s2, s13
 80027f6:	4611      	mov	r1, r2
 80027f8:	eef0 0a67 	vmov.f32	s1, s15
 80027fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002800:	4618      	mov	r0, r3
 8002802:	f001 ff05 	bl	8004610 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002806:	ed97 7a04 	vldr	s14, [r7, #16]
 800280a:	edd7 7a03 	vldr	s15, [r7, #12]
 800280e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002812:	edd7 7a02 	vldr	s15, [r7, #8]
 8002816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281a:	edd7 7a01 	vldr	s15, [r7, #4]
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002826:	ed97 7a04 	vldr	s14, [r7, #16]
 800282a:	edd7 7a03 	vldr	s15, [r7, #12]
 800282e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002832:	edd7 7a02 	vldr	s15, [r7, #8]
 8002836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283a:	edd7 7a01 	vldr	s15, [r7, #4]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002846:	ed97 7a04 	vldr	s14, [r7, #16]
 800284a:	edd7 7a02 	vldr	s15, [r7, #8]
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	ee17 0a90 	vmov	r0, s15
 8002856:	f7fd fe9f 	bl	8000598 <__aeabi_f2d>
 800285a:	4604      	mov	r4, r0
 800285c:	460d      	mov	r5, r1
 800285e:	4b42      	ldr	r3, [pc, #264]	; (8002968 <interupt_DriveMotor+0x948>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe98 	bl	8000598 <__aeabi_f2d>
 8002868:	a339      	add	r3, pc, #228	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd feeb 	bl	8000648 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fe f975 	bl	8000b68 <__aeabi_dcmpgt>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d073      	beq.n	800296c <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002886:	f7fd fe87 	bl	8000598 <__aeabi_f2d>
 800288a:	4604      	mov	r4, r0
 800288c:	460d      	mov	r5, r1
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <interupt_DriveMotor+0x948>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe80 	bl	8000598 <__aeabi_f2d>
 8002898:	a32d      	add	r3, pc, #180	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd fed3 	bl	8000648 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4690      	mov	r8, r2
 80028a8:	4699      	mov	r9, r3
 80028aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	ee17 0a90 	vmov	r0, s15
 80028ba:	f7fd fe6d 	bl	8000598 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4640      	mov	r0, r8
 80028c4:	4649      	mov	r1, r9
 80028c6:	f7fd fd07 	bl	80002d8 <__aeabi_dsub>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7fd fd03 	bl	80002dc <__adddf3>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f7fe f98b 	bl	8000bf8 <__aeabi_d2f>
 80028e2:	4603      	mov	r3, r0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028e6:	6a38      	ldr	r0, [r7, #32]
 80028e8:	f7fd fe56 	bl	8000598 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <interupt_DriveMotor+0x948>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe4f 	bl	8000598 <__aeabi_f2d>
 80028fa:	a315      	add	r3, pc, #84	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fea2 	bl	8000648 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4690      	mov	r8, r2
 800290a:	4699      	mov	r9, r3
 800290c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002910:	edd7 7a02 	vldr	s15, [r7, #8]
 8002914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002918:	ee17 0a90 	vmov	r0, s15
 800291c:	f7fd fe3c 	bl	8000598 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4640      	mov	r0, r8
 8002926:	4649      	mov	r1, r9
 8002928:	f7fd fcd6 	bl	80002d8 <__aeabi_dsub>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7fd fcd2 	bl	80002dc <__adddf3>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f95a 	bl	8000bf8 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	e0a0      	b.n	8002a8c <interupt_DriveMotor+0xa6c>
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	d916872b 	.word	0xd916872b
 8002954:	3feff7ce 	.word	0x3feff7ce
 8002958:	2000023c 	.word	0x2000023c
 800295c:	200004d8 	.word	0x200004d8
 8002960:	20000268 	.word	0x20000268
 8002964:	200004e4 	.word	0x200004e4
 8002968:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800296c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002970:	edd7 7a02 	vldr	s15, [r7, #8]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	ee17 0a90 	vmov	r0, s15
 800297c:	f7fd fe0c 	bl	8000598 <__aeabi_f2d>
 8002980:	4604      	mov	r4, r0
 8002982:	460d      	mov	r5, r1
 8002984:	4bd6      	ldr	r3, [pc, #856]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eef1 7a67 	vneg.f32	s15, s15
 800298e:	ee17 3a90 	vmov	r3, s15
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fe00 	bl	8000598 <__aeabi_f2d>
 8002998:	a3cd      	add	r3, pc, #820	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fe53 	bl	8000648 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fe f8bf 	bl	8000b2c <__aeabi_dcmplt>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d06b      	beq.n	8002a8c <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80029b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029b6:	f7fd fdef 	bl	8000598 <__aeabi_f2d>
 80029ba:	4604      	mov	r4, r0
 80029bc:	460d      	mov	r5, r1
 80029be:	4bc8      	ldr	r3, [pc, #800]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eef1 7a67 	vneg.f32	s15, s15
 80029c8:	ee17 3a90 	vmov	r3, s15
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fde3 	bl	8000598 <__aeabi_f2d>
 80029d2:	a3bf      	add	r3, pc, #764	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fe36 	bl	8000648 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4690      	mov	r8, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fdd0 	bl	8000598 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4640      	mov	r0, r8
 80029fe:	4649      	mov	r1, r9
 8002a00:	f7fd fc6a 	bl	80002d8 <__aeabi_dsub>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc66 	bl	80002dc <__adddf3>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8ee 	bl	8000bf8 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002a20:	6a38      	ldr	r0, [r7, #32]
 8002a22:	f7fd fdb9 	bl	8000598 <__aeabi_f2d>
 8002a26:	4604      	mov	r4, r0
 8002a28:	460d      	mov	r5, r1
 8002a2a:	4bad      	ldr	r3, [pc, #692]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eef1 7a67 	vneg.f32	s15, s15
 8002a34:	ee17 3a90 	vmov	r3, s15
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fdad 	bl	8000598 <__aeabi_f2d>
 8002a3e:	a3a4      	add	r3, pc, #656	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fe00 	bl	8000648 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	ee17 0a90 	vmov	r0, s15
 8002a60:	f7fd fd9a 	bl	8000598 <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4640      	mov	r0, r8
 8002a6a:	4649      	mov	r1, r9
 8002a6c:	f7fd fc34 	bl	80002d8 <__aeabi_dsub>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fc30 	bl	80002dc <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f8b8 	bl	8000bf8 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002a8c:	f107 0214 	add.w	r2, r7, #20
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a9c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002aa0:	f7ff fa2c 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 f9be 	bl	8007e2c <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <interupt_DriveMotor+0xcc4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	f040 8137 	bne.w	8002d28 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <interupt_DriveMotor+0xcc8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <interupt_DriveMotor+0xccc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002ac6:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <interupt_DriveMotor+0xcd0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a88      	ldr	r2, [pc, #544]	; (8002cf0 <interupt_DriveMotor+0xcd0>)
 8002ace:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad0:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd5f 	bl	8000598 <__aeabi_f2d>
 8002ada:	4604      	mov	r4, r0
 8002adc:	460d      	mov	r5, r1
 8002ade:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd58 	bl	8000598 <__aeabi_f2d>
 8002ae8:	a37b      	add	r3, pc, #492	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fdab 	bl	8000648 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4b7e      	ldr	r3, [pc, #504]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fd4a 	bl	8000598 <__aeabi_f2d>
 8002b04:	a374      	add	r3, pc, #464	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fd9d 	bl	8000648 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	a370      	add	r3, pc, #448	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fd94 	bl	8000648 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b30:	f7fd feb4 	bl	800089c <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4640      	mov	r0, r8
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	f7fd fbce 	bl	80002dc <__adddf3>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fbc8 	bl	80002dc <__adddf3>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f850 	bl	8000bf8 <__aeabi_d2f>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b5c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd18 	bl	8000598 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fd11 	bl	8000598 <__aeabi_f2d>
 8002b76:	a358      	add	r3, pc, #352	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd64 	bl	8000648 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fba8 	bl	80002dc <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f830 	bl	8000bf8 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4a56      	ldr	r2, [pc, #344]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b9c:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002b9e:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcf8 	bl	8000598 <__aeabi_f2d>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460d      	mov	r5, r1
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fcf1 	bl	8000598 <__aeabi_f2d>
 8002bb6:	a348      	add	r3, pc, #288	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fd44 	bl	8000648 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fce3 	bl	8000598 <__aeabi_f2d>
 8002bd2:	a341      	add	r3, pc, #260	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f7fd fd36 	bl	8000648 <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	a33c      	add	r3, pc, #240	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fd2d 	bl	8000648 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bfe:	f7fd fe4d 	bl	800089c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4640      	mov	r0, r8
 8002c08:	4649      	mov	r1, r9
 8002c0a:	f7fd fb67 	bl	80002dc <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fb61 	bl	80002dc <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ffe9 	bl	8000bf8 <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c2a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fcb1 	bl	8000598 <__aeabi_f2d>
 8002c36:	4604      	mov	r4, r0
 8002c38:	460d      	mov	r5, r1
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fcaa 	bl	8000598 <__aeabi_f2d>
 8002c44:	a324      	add	r3, pc, #144	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fcfd 	bl	8000648 <__aeabi_dmul>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	f7fd fb41 	bl	80002dc <__adddf3>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7fd ffc9 	bl	8000bf8 <__aeabi_d2f>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c6a:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c74:	ed93 7a00 	vldr	s14, [r3]
 8002c78:	f107 020c 	add.w	r2, r7, #12
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	eef0 0a47 	vmov.f32	s1, s14
 8002c84:	eeb0 0a67 	vmov.f32	s0, s15
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 ff66 	bl	8004b5c <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c90:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002cb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cc8:	e018      	b.n	8002cfc <interupt_DriveMotor+0xcdc>
 8002cca:	bf00      	nop
 8002ccc:	f3af 8000 	nop.w
 8002cd0:	d916872b 	.word	0xd916872b
 8002cd4:	3feff7ce 	.word	0x3feff7ce
 8002cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cdc:	3f50624d 	.word	0x3f50624d
 8002ce0:	200004d4 	.word	0x200004d4
 8002ce4:	20000528 	.word	0x20000528
 8002ce8:	20000590 	.word	0x20000590
 8002cec:	20000592 	.word	0x20000592
 8002cf0:	20000524 	.word	0x20000524
 8002cf4:	200004d8 	.word	0x200004d8
 8002cf8:	200004e4 	.word	0x200004e4
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d04:	f107 0214 	add.w	r2, r7, #20
 8002d08:	f107 0318 	add.w	r3, r7, #24
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d14:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d18:	f7ff f8f0 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 f882 	bl	8007e2c <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002d28:	4bd3      	ldr	r3, [pc, #844]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d137      	bne.n	8002da0 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002d30:	4bd2      	ldr	r3, [pc, #840]	; (800307c <interupt_DriveMotor+0x105c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002d36:	4bd2      	ldr	r3, [pc, #840]	; (8003080 <interupt_DriveMotor+0x1060>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002d3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002d5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d7c:	f107 0214 	add.w	r2, r7, #20
 8002d80:	f107 0318 	add.w	r3, r7, #24
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d8c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d90:	f7ff f8b4 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f005 f846 	bl	8007e2c <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002da0:	4bb5      	ldr	r3, [pc, #724]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	f040 8105 	bne.w	8002fb4 <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002daa:	4bb4      	ldr	r3, [pc, #720]	; (800307c <interupt_DriveMotor+0x105c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002db0:	4bb3      	ldr	r3, [pc, #716]	; (8003080 <interupt_DriveMotor+0x1060>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002db6:	4bb3      	ldr	r3, [pc, #716]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fbec 	bl	8000598 <__aeabi_f2d>
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	4baf      	ldr	r3, [pc, #700]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbe5 	bl	8000598 <__aeabi_f2d>
 8002dce:	a3a8      	add	r3, pc, #672	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fc38 	bl	8000648 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4690      	mov	r8, r2
 8002dde:	4699      	mov	r9, r3
 8002de0:	4ba8      	ldr	r3, [pc, #672]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fbd7 	bl	8000598 <__aeabi_f2d>
 8002dea:	a3a1      	add	r3, pc, #644	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f7fd fc2a 	bl	8000648 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	a39c      	add	r3, pc, #624	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fc21 	bl	8000648 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e16:	f7fd fd41 	bl	800089c <__aeabi_ddiv>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fa5b 	bl	80002dc <__adddf3>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fa55 	bl	80002dc <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fedd 	bl	8000bf8 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a90      	ldr	r2, [pc, #576]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e42:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002e44:	4b8f      	ldr	r3, [pc, #572]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fba5 	bl	8000598 <__aeabi_f2d>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	4b8c      	ldr	r3, [pc, #560]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb9e 	bl	8000598 <__aeabi_f2d>
 8002e5c:	a384      	add	r3, pc, #528	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fbf1 	bl	8000648 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fa35 	bl	80002dc <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd febd 	bl	8000bf8 <__aeabi_d2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4a80      	ldr	r2, [pc, #512]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e82:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002e84:	4b80      	ldr	r3, [pc, #512]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb85 	bl	8000598 <__aeabi_f2d>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	460d      	mov	r5, r1
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb7e 	bl	8000598 <__aeabi_f2d>
 8002e9c:	a374      	add	r3, pc, #464	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fbd1 	bl	8000648 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4620      	mov	r0, r4
 8002eac:	4629      	mov	r1, r5
 8002eae:	f7fd fa15 	bl	80002dc <__adddf3>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f7fd fe9d 	bl	8000bf8 <__aeabi_d2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4a71      	ldr	r2, [pc, #452]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002ec2:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002ec4:	4b71      	ldr	r3, [pc, #452]	; (800308c <interupt_DriveMotor+0x106c>)
 8002ec6:	edd3 6a00 	vldr	s13, [r3]
 8002eca:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ece:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ed2:	486d      	ldr	r0, [pc, #436]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002ed4:	eeb0 0a66 	vmov.f32	s0, s13
 8002ed8:	eef0 0a47 	vmov.f32	s1, s14
 8002edc:	eeb0 1a67 	vmov.f32	s2, s15
 8002ee0:	f005 ff5a 	bl	8008d98 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ee4:	4b67      	ldr	r3, [pc, #412]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	4b67      	ldr	r3, [pc, #412]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002eec:	ed93 7a00 	vldr	s14, [r3]
 8002ef0:	f107 020c 	add.w	r2, r7, #12
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	eef0 0a47 	vmov.f32	s1, s14
 8002efc:	eeb0 0a67 	vmov.f32	s0, s15
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fe2a 	bl	8004b5c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002f08:	4b61      	ldr	r3, [pc, #388]	; (8003090 <interupt_DriveMotor+0x1070>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	4b61      	ldr	r3, [pc, #388]	; (8003094 <interupt_DriveMotor+0x1074>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <interupt_DriveMotor+0x1078>)
 8002f28:	edd3 6a00 	vldr	s13, [r3]
 8002f2c:	4b56      	ldr	r3, [pc, #344]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002f2e:	ed93 6a01 	vldr	s12, [r3, #4]
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	f107 0308 	add.w	r3, r7, #8
 8002f38:	eef0 1a46 	vmov.f32	s3, s12
 8002f3c:	eeb0 1a66 	vmov.f32	s2, s13
 8002f40:	4611      	mov	r1, r2
 8002f42:	eef0 0a67 	vmov.f32	s1, s15
 8002f46:	eeb0 0a47 	vmov.f32	s0, s14
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fb60 	bl	8004610 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f50:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f70:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8c:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f90:	f107 0214 	add.w	r2, r7, #20
 8002f94:	f107 0318 	add.w	r3, r7, #24
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002fa0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002fa4:	f7fe ffaa 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 ff3c 	bl	8007e2c <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b64      	cmp	r3, #100	; 0x64
 8002fba:	d14b      	bne.n	8003054 <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002fd4:	ed93 7a00 	vldr	s14, [r3]
 8002fd8:	f107 020c 	add.w	r2, r7, #12
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	eef0 0a47 	vmov.f32	s1, s14
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fdb6 	bl	8004b5c <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003004:	edd7 7a01 	vldr	s15, [r7, #4]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003010:	ed97 7a04 	vldr	s14, [r7, #16]
 8003014:	edd7 7a03 	vldr	s15, [r7, #12]
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003024:	edd7 7a01 	vldr	s15, [r7, #4]
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302c:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003030:	f107 0214 	add.w	r2, r7, #20
 8003034:	f107 0318 	add.w	r3, r7, #24
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	edd7 0a08 	vldr	s1, [r7, #32]
 8003040:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003044:	f7fe ff5a 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f004 feec 	bl	8007e2c <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <interupt_DriveMotor+0x107c>)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <interupt_DriveMotor+0x1080>)
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	6013      	str	r3, [r2, #0]



}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w
 8003070:	d2f1a9fc 	.word	0xd2f1a9fc
 8003074:	3f50624d 	.word	0x3f50624d
 8003078:	20000528 	.word	0x20000528
 800307c:	20000590 	.word	0x20000590
 8003080:	20000592 	.word	0x20000592
 8003084:	200004d8 	.word	0x200004d8
 8003088:	200004e4 	.word	0x200004e4
 800308c:	20000518 	.word	0x20000518
 8003090:	20000238 	.word	0x20000238
 8003094:	2000023c 	.word	0x2000023c
 8003098:	20000268 	.word	0x20000268
 800309c:	2000052c 	.word	0x2000052c
 80030a0:	20000530 	.word	0x20000530

080030a4 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80030ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80030b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80030b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80030ba:	ed87 2a01 	vstr	s4, [r7, #4]
 80030be:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80030c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80030c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80030cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030d0:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80030d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80030d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80030dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80030e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d505      	bpl.n	8003102 <straight_table2+0x5e>
 80030f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fa:	eef1 7a67 	vneg.f32	s15, s15
 80030fe:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 8003102:	4bb4      	ldr	r3, [pc, #720]	; (80033d4 <straight_table2+0x330>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 800310a:	2300      	movs	r3, #0
 800310c:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 800310e:	4ab2      	ldr	r2, [pc, #712]	; (80033d8 <straight_table2+0x334>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003114:	4ab0      	ldr	r2, [pc, #704]	; (80033d8 <straight_table2+0x334>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 800311a:	4aaf      	ldr	r2, [pc, #700]	; (80033d8 <straight_table2+0x334>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003120:	4aad      	ldr	r2, [pc, #692]	; (80033d8 <straight_table2+0x334>)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003126:	4aac      	ldr	r2, [pc, #688]	; (80033d8 <straight_table2+0x334>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800312c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003138:	db03      	blt.n	8003142 <straight_table2+0x9e>
 800313a:	4aa8      	ldr	r2, [pc, #672]	; (80033dc <straight_table2+0x338>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6053      	str	r3, [r2, #4]
 8003140:	e006      	b.n	8003150 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 8003142:	edd7 7a01 	vldr	s15, [r7, #4]
 8003146:	eef1 7a67 	vneg.f32	s15, s15
 800314a:	4ba4      	ldr	r3, [pc, #656]	; (80033dc <straight_table2+0x338>)
 800314c:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003150:	4aa2      	ldr	r2, [pc, #648]	; (80033dc <straight_table2+0x338>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003156:	4ba1      	ldr	r3, [pc, #644]	; (80033dc <straight_table2+0x338>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 800315e:	4ba0      	ldr	r3, [pc, #640]	; (80033e0 <straight_table2+0x33c>)
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003166:	4b9e      	ldr	r3, [pc, #632]	; (80033e0 <straight_table2+0x33c>)
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800316e:	4b9c      	ldr	r3, [pc, #624]	; (80033e0 <straight_table2+0x33c>)
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003176:	4b9b      	ldr	r3, [pc, #620]	; (80033e4 <straight_table2+0x340>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800317c:	4b9a      	ldr	r3, [pc, #616]	; (80033e8 <straight_table2+0x344>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003182:	edd7 7a05 	vldr	s15, [r7, #20]
 8003186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	dd0e      	ble.n	80031ae <straight_table2+0x10a>
 8003190:	ed97 7a07 	vldr	s14, [r7, #28]
 8003194:	edd7 7a05 	vldr	s15, [r7, #20]
 8003198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a0:	dd05      	ble.n	80031ae <straight_table2+0x10a>
 80031a2:	4b91      	ldr	r3, [pc, #580]	; (80033e8 <straight_table2+0x344>)
 80031a4:	2205      	movs	r2, #5
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	4a8c      	ldr	r2, [pc, #560]	; (80033dc <straight_table2+0x338>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80031ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	dd14      	ble.n	80031e6 <straight_table2+0x142>
 80031bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80031c0:	eef1 7a67 	vneg.f32	s15, s15
 80031c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80031c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d509      	bpl.n	80031e6 <straight_table2+0x142>
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <straight_table2+0x344>)
 80031d4:	2206      	movs	r2, #6
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031dc:	eef1 7a67 	vneg.f32	s15, s15
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <straight_table2+0x338>)
 80031e2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80031e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d514      	bpl.n	800321e <straight_table2+0x17a>
 80031f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f8:	eef1 7a67 	vneg.f32	s15, s15
 80031fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	dd09      	ble.n	800321e <straight_table2+0x17a>
 800320a:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <straight_table2+0x344>)
 800320c:	2205      	movs	r2, #5
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	edd7 7a01 	vldr	s15, [r7, #4]
 8003214:	eef1 7a67 	vneg.f32	s15, s15
 8003218:	4b70      	ldr	r3, [pc, #448]	; (80033dc <straight_table2+0x338>)
 800321a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800321e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d50e      	bpl.n	800324a <straight_table2+0x1a6>
 800322c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003230:	edd7 7a05 	vldr	s15, [r7, #20]
 8003234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d505      	bpl.n	800324a <straight_table2+0x1a6>
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <straight_table2+0x344>)
 8003240:	2206      	movs	r2, #6
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <straight_table2+0x338>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 800324a:	4b68      	ldr	r3, [pc, #416]	; (80033ec <straight_table2+0x348>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003250:	783a      	ldrb	r2, [r7, #0]
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <straight_table2+0x34c>)
 8003254:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003256:	f004 fdcd 	bl	8007df4 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 80d3 	bne.w	8003408 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003262:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <straight_table2+0x350>)
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <straight_table2+0x344>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003270:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <straight_table2+0x338>)
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003278:	bf00      	nop
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <straight_table2+0x354>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d409      	bmi.n	80032a2 <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <straight_table2+0x354>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003294:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80033fc <straight_table2+0x358>
 8003298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	dd18      	ble.n	80032d4 <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <straight_table2+0x35c>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80032a8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80032ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b4:	d409      	bmi.n	80032ca <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80032b6:	4b52      	ldr	r3, [pc, #328]	; (8003400 <straight_table2+0x35c>)
 80032b8:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80032bc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80033fc <straight_table2+0x358>
 80032c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	dd04      	ble.n	80032d4 <straight_table2+0x230>
			  front_wall_break_90==0){}
 80032ca:	4b4e      	ldr	r3, [pc, #312]	; (8003404 <straight_table2+0x360>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0d2      	beq.n	800327a <straight_table2+0x1d6>
		straight.displacement=0;
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <straight_table2+0x338>)
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80032dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	db03      	blt.n	80032f2 <straight_table2+0x24e>
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <straight_table2+0x338>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6053      	str	r3, [r2, #4]
 80032f0:	e006      	b.n	8003300 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 80032f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f6:	eef1 7a67 	vneg.f32	s15, s15
 80032fa:	4b38      	ldr	r3, [pc, #224]	; (80033dc <straight_table2+0x338>)
 80032fc:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <straight_table2+0x344>)
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003306:	edd7 7a05 	vldr	s15, [r7, #20]
 800330a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	dd0e      	ble.n	8003332 <straight_table2+0x28e>
 8003314:	ed97 7a07 	vldr	s14, [r7, #28]
 8003318:	edd7 7a05 	vldr	s15, [r7, #20]
 800331c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	dd05      	ble.n	8003332 <straight_table2+0x28e>
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <straight_table2+0x344>)
 8003328:	2205      	movs	r2, #5
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <straight_table2+0x338>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003332:	edd7 7a05 	vldr	s15, [r7, #20]
 8003336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	dd14      	ble.n	800336a <straight_table2+0x2c6>
 8003340:	edd7 7a05 	vldr	s15, [r7, #20]
 8003344:	eef1 7a67 	vneg.f32	s15, s15
 8003348:	ed97 7a07 	vldr	s14, [r7, #28]
 800334c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	d509      	bpl.n	800336a <straight_table2+0x2c6>
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <straight_table2+0x344>)
 8003358:	2206      	movs	r2, #6
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003360:	eef1 7a67 	vneg.f32	s15, s15
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <straight_table2+0x338>)
 8003366:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800336a:	edd7 7a05 	vldr	s15, [r7, #20]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	d514      	bpl.n	80033a2 <straight_table2+0x2fe>
 8003378:	edd7 7a05 	vldr	s15, [r7, #20]
 800337c:	eef1 7a67 	vneg.f32	s15, s15
 8003380:	ed97 7a07 	vldr	s14, [r7, #28]
 8003384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	dd09      	ble.n	80033a2 <straight_table2+0x2fe>
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <straight_table2+0x344>)
 8003390:	2205      	movs	r2, #5
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	edd7 7a01 	vldr	s15, [r7, #4]
 8003398:	eef1 7a67 	vneg.f32	s15, s15
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <straight_table2+0x338>)
 800339e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80033a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80033a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	f140 825b 	bpl.w	8003868 <straight_table2+0x7c4>
 80033b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80033b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	f140 8251 	bpl.w	8003868 <straight_table2+0x7c4>
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <straight_table2+0x344>)
 80033c8:	2206      	movs	r2, #6
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <straight_table2+0x338>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6053      	str	r3, [r2, #4]
 80033d2:	e249      	b.n	8003868 <straight_table2+0x7c4>
 80033d4:	20000529 	.word	0x20000529
 80033d8:	200004f0 	.word	0x200004f0
 80033dc:	200004d8 	.word	0x200004d8
 80033e0:	200004e4 	.word	0x200004e4
 80033e4:	20000805 	.word	0x20000805
 80033e8:	20000804 	.word	0x20000804
 80033ec:	20000528 	.word	0x20000528
 80033f0:	20000590 	.word	0x20000590
 80033f4:	20000534 	.word	0x20000534
 80033f8:	200005cc 	.word	0x200005cc
 80033fc:	425c0000 	.word	0x425c0000
 8003400:	200005d0 	.word	0x200005d0
 8003404:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	2b02      	cmp	r3, #2
 800340c:	f040 80c9 	bne.w	80035a2 <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003410:	4bb8      	ldr	r3, [pc, #736]	; (80036f4 <straight_table2+0x650>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003418:	4bb7      	ldr	r3, [pc, #732]	; (80036f8 <straight_table2+0x654>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800341e:	4bb7      	ldr	r3, [pc, #732]	; (80036fc <straight_table2+0x658>)
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003426:	bf00      	nop
 8003428:	4bb5      	ldr	r3, [pc, #724]	; (8003700 <straight_table2+0x65c>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	d913      	bls.n	8003460 <straight_table2+0x3bc>
 8003438:	4bb1      	ldr	r3, [pc, #708]	; (8003700 <straight_table2+0x65c>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	d909      	bls.n	8003460 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800344c:	4bac      	ldr	r3, [pc, #688]	; (8003700 <straight_table2+0x65c>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003452:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003704 <straight_table2+0x660>
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	db20      	blt.n	80034a2 <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003460:	4ba9      	ldr	r3, [pc, #676]	; (8003708 <straight_table2+0x664>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	d913      	bls.n	8003498 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003470:	4ba5      	ldr	r3, [pc, #660]	; (8003708 <straight_table2+0x664>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800347a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d909      	bls.n	8003498 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003484:	4ba0      	ldr	r3, [pc, #640]	; (8003708 <straight_table2+0x664>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800348a:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003704 <straight_table2+0x660>
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	db04      	blt.n	80034a2 <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 8003498:	4b9c      	ldr	r3, [pc, #624]	; (800370c <straight_table2+0x668>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0c2      	beq.n	8003428 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 80034a2:	4b96      	ldr	r3, [pc, #600]	; (80036fc <straight_table2+0x658>)
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	db03      	blt.n	80034c0 <straight_table2+0x41c>
 80034b8:	4a90      	ldr	r2, [pc, #576]	; (80036fc <straight_table2+0x658>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6053      	str	r3, [r2, #4]
 80034be:	e006      	b.n	80034ce <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80034c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c4:	eef1 7a67 	vneg.f32	s15, s15
 80034c8:	4b8c      	ldr	r3, [pc, #560]	; (80036fc <straight_table2+0x658>)
 80034ca:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80034ce:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <straight_table2+0x654>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80034d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80034d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	dd0e      	ble.n	8003500 <straight_table2+0x45c>
 80034e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80034e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f2:	dd05      	ble.n	8003500 <straight_table2+0x45c>
 80034f4:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <straight_table2+0x654>)
 80034f6:	2205      	movs	r2, #5
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	4a80      	ldr	r2, [pc, #512]	; (80036fc <straight_table2+0x658>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003500:	edd7 7a05 	vldr	s15, [r7, #20]
 8003504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	dd14      	ble.n	8003538 <straight_table2+0x494>
 800350e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003512:	eef1 7a67 	vneg.f32	s15, s15
 8003516:	ed97 7a07 	vldr	s14, [r7, #28]
 800351a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	d509      	bpl.n	8003538 <straight_table2+0x494>
 8003524:	4b74      	ldr	r3, [pc, #464]	; (80036f8 <straight_table2+0x654>)
 8003526:	2206      	movs	r2, #6
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	edd7 7a01 	vldr	s15, [r7, #4]
 800352e:	eef1 7a67 	vneg.f32	s15, s15
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <straight_table2+0x658>)
 8003534:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003538:	edd7 7a05 	vldr	s15, [r7, #20]
 800353c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	d514      	bpl.n	8003570 <straight_table2+0x4cc>
 8003546:	edd7 7a05 	vldr	s15, [r7, #20]
 800354a:	eef1 7a67 	vneg.f32	s15, s15
 800354e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355a:	dd09      	ble.n	8003570 <straight_table2+0x4cc>
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <straight_table2+0x654>)
 800355e:	2205      	movs	r2, #5
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	edd7 7a01 	vldr	s15, [r7, #4]
 8003566:	eef1 7a67 	vneg.f32	s15, s15
 800356a:	4b64      	ldr	r3, [pc, #400]	; (80036fc <straight_table2+0x658>)
 800356c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	f140 8174 	bpl.w	8003868 <straight_table2+0x7c4>
 8003580:	ed97 7a07 	vldr	s14, [r7, #28]
 8003584:	edd7 7a05 	vldr	s15, [r7, #20]
 8003588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	f140 816a 	bpl.w	8003868 <straight_table2+0x7c4>
 8003594:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <straight_table2+0x654>)
 8003596:	2206      	movs	r2, #6
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	4a58      	ldr	r2, [pc, #352]	; (80036fc <straight_table2+0x658>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6053      	str	r3, [r2, #4]
 80035a0:	e162      	b.n	8003868 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	f040 80b9 	bne.w	800371c <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035aa:	4b52      	ldr	r3, [pc, #328]	; (80036f4 <straight_table2+0x650>)
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035b2:	4b51      	ldr	r3, [pc, #324]	; (80036f8 <straight_table2+0x654>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <straight_table2+0x658>)
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80035c0:	bf00      	nop
 80035c2:	4b53      	ldr	r3, [pc, #332]	; (8003710 <straight_table2+0x66c>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80035cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d4:	d409      	bmi.n	80035ea <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80035d6:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <straight_table2+0x66c>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80035dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003714 <straight_table2+0x670>
 80035e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	dd04      	ble.n	80035f4 <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <straight_table2+0x674>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0e6      	beq.n	80035c2 <straight_table2+0x51e>
		straight.displacement=0;
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <straight_table2+0x658>)
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80035fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	db03      	blt.n	8003612 <straight_table2+0x56e>
 800360a:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <straight_table2+0x658>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6053      	str	r3, [r2, #4]
 8003610:	e006      	b.n	8003620 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 8003612:	edd7 7a01 	vldr	s15, [r7, #4]
 8003616:	eef1 7a67 	vneg.f32	s15, s15
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <straight_table2+0x658>)
 800361c:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <straight_table2+0x654>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003626:	edd7 7a05 	vldr	s15, [r7, #20]
 800362a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003632:	dd0e      	ble.n	8003652 <straight_table2+0x5ae>
 8003634:	ed97 7a07 	vldr	s14, [r7, #28]
 8003638:	edd7 7a05 	vldr	s15, [r7, #20]
 800363c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	dd05      	ble.n	8003652 <straight_table2+0x5ae>
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <straight_table2+0x654>)
 8003648:	2205      	movs	r2, #5
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <straight_table2+0x658>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003652:	edd7 7a05 	vldr	s15, [r7, #20]
 8003656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	dd14      	ble.n	800368a <straight_table2+0x5e6>
 8003660:	edd7 7a05 	vldr	s15, [r7, #20]
 8003664:	eef1 7a67 	vneg.f32	s15, s15
 8003668:	ed97 7a07 	vldr	s14, [r7, #28]
 800366c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	d509      	bpl.n	800368a <straight_table2+0x5e6>
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <straight_table2+0x654>)
 8003678:	2206      	movs	r2, #6
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003680:	eef1 7a67 	vneg.f32	s15, s15
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <straight_table2+0x658>)
 8003686:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800368a:	edd7 7a05 	vldr	s15, [r7, #20]
 800368e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d514      	bpl.n	80036c2 <straight_table2+0x61e>
 8003698:	edd7 7a05 	vldr	s15, [r7, #20]
 800369c:	eef1 7a67 	vneg.f32	s15, s15
 80036a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80036a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	dd09      	ble.n	80036c2 <straight_table2+0x61e>
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <straight_table2+0x654>)
 80036b0:	2205      	movs	r2, #5
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b8:	eef1 7a67 	vneg.f32	s15, s15
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <straight_table2+0x658>)
 80036be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80036c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	f140 80cb 	bpl.w	8003868 <straight_table2+0x7c4>
 80036d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	f140 80c1 	bpl.w	8003868 <straight_table2+0x7c4>
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <straight_table2+0x654>)
 80036e8:	2206      	movs	r2, #6
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	4a03      	ldr	r2, [pc, #12]	; (80036fc <straight_table2+0x658>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6053      	str	r3, [r2, #4]
 80036f2:	e0b9      	b.n	8003868 <straight_table2+0x7c4>
 80036f4:	20000534 	.word	0x20000534
 80036f8:	20000804 	.word	0x20000804
 80036fc:	200004d8 	.word	0x200004d8
 8003700:	200005d4 	.word	0x200005d4
 8003704:	42000000 	.word	0x42000000
 8003708:	200005d8 	.word	0x200005d8
 800370c:	200005f3 	.word	0x200005f3
 8003710:	200005e4 	.word	0x200005e4
 8003714:	420c0000 	.word	0x420c0000
 8003718:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	2b04      	cmp	r3, #4
 8003720:	f040 80a2 	bne.w	8003868 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003724:	4ba6      	ldr	r3, [pc, #664]	; (80039c0 <straight_table2+0x91c>)
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800372c:	4ba5      	ldr	r3, [pc, #660]	; (80039c4 <straight_table2+0x920>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003732:	4ba5      	ldr	r3, [pc, #660]	; (80039c8 <straight_table2+0x924>)
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800373a:	bf00      	nop
 800373c:	4ba3      	ldr	r3, [pc, #652]	; (80039cc <straight_table2+0x928>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d409      	bmi.n	8003764 <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003750:	4b9e      	ldr	r3, [pc, #632]	; (80039cc <straight_table2+0x928>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003756:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80039d0 <straight_table2+0x92c>
 800375a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	dd04      	ble.n	800376e <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 8003764:	4b9b      	ldr	r3, [pc, #620]	; (80039d4 <straight_table2+0x930>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0e6      	beq.n	800373c <straight_table2+0x698>
		straight.displacement=0;
 800376e:	4b96      	ldr	r3, [pc, #600]	; (80039c8 <straight_table2+0x924>)
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003776:	edd7 7a02 	vldr	s15, [r7, #8]
 800377a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	db03      	blt.n	800378c <straight_table2+0x6e8>
 8003784:	4a90      	ldr	r2, [pc, #576]	; (80039c8 <straight_table2+0x924>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6053      	str	r3, [r2, #4]
 800378a:	e006      	b.n	800379a <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 800378c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003790:	eef1 7a67 	vneg.f32	s15, s15
 8003794:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <straight_table2+0x924>)
 8003796:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800379a:	4b8a      	ldr	r3, [pc, #552]	; (80039c4 <straight_table2+0x920>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80037a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	dd0e      	ble.n	80037cc <straight_table2+0x728>
 80037ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80037b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	dd05      	ble.n	80037cc <straight_table2+0x728>
 80037c0:	4b80      	ldr	r3, [pc, #512]	; (80039c4 <straight_table2+0x920>)
 80037c2:	2205      	movs	r2, #5
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	4a80      	ldr	r2, [pc, #512]	; (80039c8 <straight_table2+0x924>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	dd14      	ble.n	8003804 <straight_table2+0x760>
 80037da:	edd7 7a05 	vldr	s15, [r7, #20]
 80037de:	eef1 7a67 	vneg.f32	s15, s15
 80037e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80037e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	d509      	bpl.n	8003804 <straight_table2+0x760>
 80037f0:	4b74      	ldr	r3, [pc, #464]	; (80039c4 <straight_table2+0x920>)
 80037f2:	2206      	movs	r2, #6
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037fa:	eef1 7a67 	vneg.f32	s15, s15
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <straight_table2+0x924>)
 8003800:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003804:	edd7 7a05 	vldr	s15, [r7, #20]
 8003808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d514      	bpl.n	800383c <straight_table2+0x798>
 8003812:	edd7 7a05 	vldr	s15, [r7, #20]
 8003816:	eef1 7a67 	vneg.f32	s15, s15
 800381a:	ed97 7a07 	vldr	s14, [r7, #28]
 800381e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	dd09      	ble.n	800383c <straight_table2+0x798>
 8003828:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <straight_table2+0x920>)
 800382a:	2205      	movs	r2, #5
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003832:	eef1 7a67 	vneg.f32	s15, s15
 8003836:	4b64      	ldr	r3, [pc, #400]	; (80039c8 <straight_table2+0x924>)
 8003838:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800383c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d50e      	bpl.n	8003868 <straight_table2+0x7c4>
 800384a:	ed97 7a07 	vldr	s14, [r7, #28]
 800384e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	d505      	bpl.n	8003868 <straight_table2+0x7c4>
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <straight_table2+0x920>)
 800385e:	2206      	movs	r2, #6
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	4a59      	ldr	r2, [pc, #356]	; (80039c8 <straight_table2+0x924>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003868:	78bb      	ldrb	r3, [r7, #2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 809e 	bne.w	80039ac <straight_table2+0x908>
	while (g_acc_flag!=4){
 8003870:	e074      	b.n	800395c <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d120      	bne.n	80038ba <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003878:	edd7 7a05 	vldr	s15, [r7, #20]
 800387c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003884:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <straight_table2+0x934>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	d90e      	bls.n	80038b2 <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8003894:	edd7 7a05 	vldr	s15, [r7, #20]
 8003898:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800389c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038a0:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <straight_table2+0x938>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d900      	bls.n	80038b2 <straight_table2+0x80e>
 80038b0:	e054      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 80038b2:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <straight_table2+0x920>)
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
				break;
 80038b8:	e055      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d121      	bne.n	8003904 <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80038c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80038c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038cc:	4b44      	ldr	r3, [pc, #272]	; (80039e0 <straight_table2+0x93c>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d900      	bls.n	80038de <straight_table2+0x83a>
 80038dc:	e03e      	b.n	800395c <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 80038de:	edd7 7a05 	vldr	s15, [r7, #20]
 80038e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <straight_table2+0x940>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80038f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	d900      	bls.n	80038fc <straight_table2+0x858>
 80038fa:	e02f      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <straight_table2+0x920>)
 80038fe:	2204      	movs	r2, #4
 8003900:	701a      	strb	r2, [r3, #0]
				break;
 8003902:	e030      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d112      	bne.n	8003930 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 800390a:	edd7 7a05 	vldr	s15, [r7, #20]
 800390e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <straight_table2+0x944>)
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	d900      	bls.n	8003928 <straight_table2+0x884>
 8003926:	e019      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <straight_table2+0x920>)
 800392a:	2204      	movs	r2, #4
 800392c:	701a      	strb	r2, [r3, #0]
				break;
 800392e:	e01a      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d112      	bne.n	800395c <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8003936:	edd7 7a05 	vldr	s15, [r7, #20]
 800393a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <straight_table2+0x928>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d900      	bls.n	8003954 <straight_table2+0x8b0>
 8003952:	e003      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <straight_table2+0x920>)
 8003956:	2204      	movs	r2, #4
 8003958:	701a      	strb	r2, [r3, #0]
				break;
 800395a:	e004      	b.n	8003966 <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <straight_table2+0x920>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b04      	cmp	r3, #4
 8003964:	d185      	bne.n	8003872 <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8003966:	edd7 7a03 	vldr	s15, [r7, #12]
 800396a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	d105      	bne.n	8003980 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 8003974:	2064      	movs	r0, #100	; 0x64
 8003976:	f004 fcfb 	bl	8008370 <wait_ms_NoReset>
		modeacc = 0;
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <straight_table2+0x948>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <straight_table2+0x94c>)
 8003982:	ed93 7a00 	vldr	s14, [r3]
 8003986:	edd7 7a05 	vldr	s15, [r7, #20]
 800398a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <straight_table2+0x94c>)
 8003990:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <straight_table2+0x950>)
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	edd7 7a05 	vldr	s15, [r7, #20]
 800399e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <straight_table2+0x950>)
 80039a4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039a8:	f004 fa32 	bl	8007e10 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <straight_table2+0x924>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	ee07 3a90 	vmov	s15, r3



}
 80039b4:	eeb0 0a67 	vmov.f32	s0, s15
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000534 	.word	0x20000534
 80039c4:	20000804 	.word	0x20000804
 80039c8:	200004d8 	.word	0x200004d8
 80039cc:	200005e8 	.word	0x200005e8
 80039d0:	420c0000 	.word	0x420c0000
 80039d4:	200005f4 	.word	0x200005f4
 80039d8:	200005d0 	.word	0x200005d0
 80039dc:	200005cc 	.word	0x200005cc
 80039e0:	200005d8 	.word	0x200005d8
 80039e4:	200005d4 	.word	0x200005d4
 80039e8:	200005e4 	.word	0x200005e4
 80039ec:	20000528 	.word	0x20000528
 80039f0:	20000220 	.word	0x20000220
 80039f4:	20000224 	.word	0x20000224

080039f8 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a02:	60b8      	str	r0, [r7, #8]
 8003a04:	460b      	mov	r3, r1
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 8003a0c:	e02f      	b.n	8003a6e <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	f083 0301 	eor.w	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <End_straight+0x2e>
 8003a1a:	79bb      	ldrb	r3, [r7, #6]
 8003a1c:	f083 0301 	eor.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d023      	beq.n	8003a6e <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d120      	bne.n	8003a6e <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a30:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a38:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <End_straight+0xb4>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d90e      	bls.n	8003a66 <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a4c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <End_straight+0xb8>)
 8003a56:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	d900      	bls.n	8003a66 <End_straight+0x6e>
 8003a64:	e003      	b.n	8003a6e <End_straight+0x76>
						g_acc_flag=4;
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <End_straight+0xbc>)
 8003a68:	2204      	movs	r2, #4
 8003a6a:	701a      	strb	r2, [r3, #0]
						break;
 8003a6c:	e004      	b.n	8003a78 <End_straight+0x80>
	while (g_acc_flag!=4){
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <End_straight+0xbc>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d1ca      	bne.n	8003a0e <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <End_straight+0xc0>)
 8003a7a:	ed93 7a00 	vldr	s14, [r3]
 8003a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <End_straight+0xc0>)
 8003a88:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <End_straight+0xc4>)
 8003a8e:	ed93 7a00 	vldr	s14, [r3]
 8003a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <End_straight+0xc4>)
 8003a9c:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003aa0:	f004 f9b6 	bl	8007e10 <pl_DriveMotor_stop>
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200005d0 	.word	0x200005d0
 8003ab0:	200005cc 	.word	0x200005cc
 8003ab4:	20000804 	.word	0x20000804
 8003ab8:	20000220 	.word	0x20000220
 8003abc:	20000224 	.word	0x20000224

08003ac0 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003aca:	edc7 0a04 	vstr	s1, [r7, #16]
 8003ace:	ed87 1a03 	vstr	s2, [r7, #12]
 8003ad2:	edc7 1a02 	vstr	s3, [r7, #8]
 8003ad6:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ade:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ae6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003aea:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003aee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003af2:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003af6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	d505      	bpl.n	8003b1c <turning_table2+0x5c>
 8003b10:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b14:	eef1 7a67 	vneg.f32	s15, s15
 8003b18:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003b1c:	4a69      	ldr	r2, [pc, #420]	; (8003cc4 <turning_table2+0x204>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003b22:	4a68      	ldr	r2, [pc, #416]	; (8003cc4 <turning_table2+0x204>)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003b28:	4a66      	ldr	r2, [pc, #408]	; (8003cc4 <turning_table2+0x204>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003b2e:	4a65      	ldr	r2, [pc, #404]	; (8003cc4 <turning_table2+0x204>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003b34:	4a63      	ldr	r2, [pc, #396]	; (8003cc4 <turning_table2+0x204>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003b3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	db03      	blt.n	8003b50 <turning_table2+0x90>
 8003b48:	4a5f      	ldr	r2, [pc, #380]	; (8003cc8 <turning_table2+0x208>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6053      	str	r3, [r2, #4]
 8003b4e:	e006      	b.n	8003b5e <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b54:	eef1 7a67 	vneg.f32	s15, s15
 8003b58:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <turning_table2+0x208>)
 8003b5a:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003b5e:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <turning_table2+0x208>)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003b64:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <turning_table2+0x208>)
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003b6c:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <turning_table2+0x20c>)
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003b74:	4b55      	ldr	r3, [pc, #340]	; (8003ccc <turning_table2+0x20c>)
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003b7c:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <turning_table2+0x20c>)
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003b84:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <turning_table2+0x210>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003b8a:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <turning_table2+0x214>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	dd0e      	ble.n	8003bbc <turning_table2+0xfc>
 8003b9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	dd05      	ble.n	8003bbc <turning_table2+0xfc>
 8003bb0:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <turning_table2+0x214>)
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <turning_table2+0x208>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003bbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc8:	dd14      	ble.n	8003bf4 <turning_table2+0x134>
 8003bca:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bce:	eef1 7a67 	vneg.f32	s15, s15
 8003bd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bde:	d509      	bpl.n	8003bf4 <turning_table2+0x134>
 8003be0:	4b3c      	ldr	r3, [pc, #240]	; (8003cd4 <turning_table2+0x214>)
 8003be2:	2206      	movs	r2, #6
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bea:	eef1 7a67 	vneg.f32	s15, s15
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <turning_table2+0x208>)
 8003bf0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003bf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	d514      	bpl.n	8003c2c <turning_table2+0x16c>
 8003c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c06:	eef1 7a67 	vneg.f32	s15, s15
 8003c0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	dd09      	ble.n	8003c2c <turning_table2+0x16c>
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <turning_table2+0x214>)
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c22:	eef1 7a67 	vneg.f32	s15, s15
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <turning_table2+0x208>)
 8003c28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003c2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	d50e      	bpl.n	8003c58 <turning_table2+0x198>
 8003c3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	d505      	bpl.n	8003c58 <turning_table2+0x198>
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <turning_table2+0x214>)
 8003c4e:	2206      	movs	r2, #6
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <turning_table2+0x208>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <turning_table2+0x218>)
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003c5e:	f004 f8c9 	bl	8007df4 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003c62:	bf00      	nop
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <turning_table2+0x214>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d1fa      	bne.n	8003c64 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d106      	bne.n	8003c8a <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003c7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c80:	f004 fb76 	bl	8008370 <wait_ms_NoReset>
		modeacc = 0;
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <turning_table2+0x218>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <turning_table2+0x21c>)
 8003c8c:	ed93 7a00 	vldr	s14, [r3]
 8003c90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <turning_table2+0x21c>)
 8003c9a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003c9e:	f004 f8b7 	bl	8007e10 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <turning_table2+0x220>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <turning_table2+0x224>)
 8003ca8:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <turning_table2+0x228>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a0f      	ldr	r2, [pc, #60]	; (8003cec <turning_table2+0x22c>)
 8003cb0:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <turning_table2+0x208>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	ee07 3a90 	vmov	s15, r3
}
 8003cba:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000504 	.word	0x20000504
 8003cc8:	200004e4 	.word	0x200004e4
 8003ccc:	200004d8 	.word	0x200004d8
 8003cd0:	20000805 	.word	0x20000805
 8003cd4:	20000804 	.word	0x20000804
 8003cd8:	20000528 	.word	0x20000528
 8003cdc:	20000264 	.word	0x20000264
 8003ce0:	20000228 	.word	0x20000228
 8003ce4:	20000258 	.word	0x20000258
 8003ce8:	2000022c 	.word	0x2000022c
 8003cec:	2000025c 	.word	0x2000025c

08003cf0 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003cfa:	edc7 0a04 	vstr	s1, [r7, #16]
 8003cfe:	ed87 1a03 	vstr	s2, [r7, #12]
 8003d02:	edc7 1a02 	vstr	s3, [r7, #8]
 8003d06:	ed87 2a01 	vstr	s4, [r7, #4]
 8003d0a:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d12:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003d22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003d26:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003d2a:	ed97 7a00 	vldr	s14, [r7]
 8003d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d32:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003d36:	edd7 7a00 	vldr	s15, [r7]
 8003d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	d505      	bpl.n	8003d50 <slalom_table2+0x60>
 8003d44:	edd7 7a00 	vldr	s15, [r7]
 8003d48:	eef1 7a67 	vneg.f32	s15, s15
 8003d4c:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003d50:	4a5e      	ldr	r2, [pc, #376]	; (8003ecc <slalom_table2+0x1dc>)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003d56:	4a5d      	ldr	r2, [pc, #372]	; (8003ecc <slalom_table2+0x1dc>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003d5c:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <slalom_table2+0x1dc>)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003d62:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <slalom_table2+0x1dc>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003d68:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <slalom_table2+0x1dc>)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	db03      	blt.n	8003d84 <slalom_table2+0x94>
 8003d7c:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6053      	str	r3, [r2, #4]
 8003d82:	e006      	b.n	8003d92 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003d84:	edd7 7a00 	vldr	s15, [r7]
 8003d88:	eef1 7a67 	vneg.f32	s15, s15
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d8e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003d92:	4a4f      	ldr	r2, [pc, #316]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <slalom_table2+0x1e0>)
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003da0:	4a4c      	ldr	r2, [pc, #304]	; (8003ed4 <slalom_table2+0x1e4>)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003da6:	4b4b      	ldr	r3, [pc, #300]	; (8003ed4 <slalom_table2+0x1e4>)
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003dae:	4b49      	ldr	r3, [pc, #292]	; (8003ed4 <slalom_table2+0x1e4>)
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003db6:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <slalom_table2+0x1e8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <slalom_table2+0x1ec>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	dd0e      	ble.n	8003dee <slalom_table2+0xfe>
 8003dd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	dd05      	ble.n	8003dee <slalom_table2+0xfe>
 8003de2:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <slalom_table2+0x1ec>)
 8003de4:	2205      	movs	r2, #5
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	4a39      	ldr	r2, [pc, #228]	; (8003ed0 <slalom_table2+0x1e0>)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003dee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	dd14      	ble.n	8003e26 <slalom_table2+0x136>
 8003dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e00:	eef1 7a67 	vneg.f32	s15, s15
 8003e04:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	d509      	bpl.n	8003e26 <slalom_table2+0x136>
 8003e12:	4b32      	ldr	r3, [pc, #200]	; (8003edc <slalom_table2+0x1ec>)
 8003e14:	2206      	movs	r2, #6
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	edd7 7a00 	vldr	s15, [r7]
 8003e1c:	eef1 7a67 	vneg.f32	s15, s15
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <slalom_table2+0x1e0>)
 8003e22:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e32:	d514      	bpl.n	8003e5e <slalom_table2+0x16e>
 8003e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e38:	eef1 7a67 	vneg.f32	s15, s15
 8003e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e48:	dd09      	ble.n	8003e5e <slalom_table2+0x16e>
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <slalom_table2+0x1ec>)
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	edd7 7a00 	vldr	s15, [r7]
 8003e54:	eef1 7a67 	vneg.f32	s15, s15
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <slalom_table2+0x1e0>)
 8003e5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	d50e      	bpl.n	8003e8a <slalom_table2+0x19a>
 8003e6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e70:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	d505      	bpl.n	8003e8a <slalom_table2+0x19a>
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <slalom_table2+0x1ec>)
 8003e80:	2206      	movs	r2, #6
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <slalom_table2+0x1e0>)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <slalom_table2+0x1f0>)
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003e90:	f003 ffb0 	bl	8007df4 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003e94:	bf00      	nop
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <slalom_table2+0x1ec>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d1fa      	bne.n	8003e96 <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <slalom_table2+0x1f4>)
 8003ea2:	ed93 7a00 	vldr	s14, [r3]
 8003ea6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <slalom_table2+0x1f4>)
 8003eb0:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003eb4:	f003 ffac 	bl	8007e10 <pl_DriveMotor_stop>

	return turning.velocity;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <slalom_table2+0x1e0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	ee07 3a90 	vmov	s15, r3
}
 8003ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000504 	.word	0x20000504
 8003ed0:	200004e4 	.word	0x200004e4
 8003ed4:	200004d8 	.word	0x200004d8
 8003ed8:	20000805 	.word	0x20000805
 8003edc:	20000804 	.word	0x20000804
 8003ee0:	20000528 	.word	0x20000528
 8003ee4:	20000264 	.word	0x20000264

08003ee8 <no_angle>:

void no_angle(void){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <no_angle+0x88>)
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <no_angle+0x88>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <no_angle+0x88>)
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <no_angle+0x8c>)
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <no_angle+0x8c>)
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <no_angle+0x8c>)
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <no_angle+0x90>)
 8003f1e:	2203      	movs	r2, #3
 8003f20:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f22:	f003 ff67 	bl	8007df4 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003f26:	e002      	b.n	8003f2e <no_angle+0x46>
		HAL_Delay(1);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f013 fd7d 	bl	8017a28 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <no_angle+0x94>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f36:	ddf7      	ble.n	8003f28 <no_angle+0x40>
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <no_angle+0x94>)
 8003f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f3e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f42:	ddf1      	ble.n	8003f28 <no_angle+0x40>
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <no_angle+0x94>)
 8003f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003f4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f4e:	ddeb      	ble.n	8003f28 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <no_angle+0x90>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003f56:	f003 ff5b 	bl	8007e10 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <no_angle+0x98>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <no_angle+0x9c>)
 8003f60:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <no_angle+0xa0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <no_angle+0xa4>)
 8003f68:	6013      	str	r3, [r2, #0]

}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200004e4 	.word	0x200004e4
 8003f74:	200004d8 	.word	0x200004d8
 8003f78:	20000528 	.word	0x20000528
 8003f7c:	200002b8 	.word	0x200002b8
 8003f80:	20000228 	.word	0x20000228
 8003f84:	20000258 	.word	0x20000258
 8003f88:	2000022c 	.word	0x2000022c
 8003f8c:	2000025c 	.word	0x2000025c

08003f90 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f9e:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003fa2:	4a3d      	ldr	r2, [pc, #244]	; (8004098 <mollifier_slalom_table+0x108>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003fa8:	4a3b      	ldr	r2, [pc, #236]	; (8004098 <mollifier_slalom_table+0x108>)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003fae:	4a3a      	ldr	r2, [pc, #232]	; (8004098 <mollifier_slalom_table+0x108>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <mollifier_slalom_table+0x10c>)
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003fbc:	4b37      	ldr	r3, [pc, #220]	; (800409c <mollifier_slalom_table+0x10c>)
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003fc4:	4a36      	ldr	r2, [pc, #216]	; (80040a0 <mollifier_slalom_table+0x110>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003fca:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <mollifier_slalom_table+0x110>)
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003fd2:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <mollifier_slalom_table+0x110>)
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003fda:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <mollifier_slalom_table+0x114>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <mollifier_slalom_table+0x118>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fea:	eef0 7ae7 	vabs.f32	s15, s15
 8003fee:	ee17 0a90 	vmov	r0, s15
 8003ff2:	f7fc fad1 	bl	8000598 <__aeabi_f2d>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004000:	a321      	add	r3, pc, #132	; (adr r3, 8004088 <mollifier_slalom_table+0xf8>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc fc47 	bl	800089c <__aeabi_ddiv>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	a31e      	add	r3, pc, #120	; (adr r3, 8004090 <mollifier_slalom_table+0x100>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc fb14 	bl	8000648 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4614      	mov	r4, r2
 8004026:	461d      	mov	r5, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc fab5 	bl	8000598 <__aeabi_f2d>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4620      	mov	r0, r4
 8004034:	4629      	mov	r1, r5
 8004036:	f7fc fc31 	bl	800089c <__aeabi_ddiv>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f7fc fdd9 	bl	8000bf8 <__aeabi_d2f>
 8004046:	4603      	mov	r3, r0
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <mollifier_slalom_table+0x11c>)
 800404a:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <mollifier_slalom_table+0x120>)
 800404e:	2206      	movs	r2, #6
 8004050:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004052:	f003 fecf 	bl	8007df4 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004056:	bf00      	nop
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <mollifier_slalom_table+0x118>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b04      	cmp	r3, #4
 8004060:	d1fa      	bne.n	8004058 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <mollifier_slalom_table+0x124>)
 8004064:	ed93 7a00 	vldr	s14, [r3]
 8004068:	edd7 7a02 	vldr	s15, [r7, #8]
 800406c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <mollifier_slalom_table+0x124>)
 8004072:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004076:	f003 fecb 	bl	8007e10 <pl_DriveMotor_stop>

}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bdb0      	pop	{r4, r5, r7, pc}
 8004082:	bf00      	nop
 8004084:	f3af 8000 	nop.w
 8004088:	f9db22d1 	.word	0xf9db22d1
 800408c:	3fdc6a7e 	.word	0x3fdc6a7e
 8004090:	362cef38 	.word	0x362cef38
 8004094:	3fd78b56 	.word	0x3fd78b56
 8004098:	20000518 	.word	0x20000518
 800409c:	200004e4 	.word	0x200004e4
 80040a0:	200004d8 	.word	0x200004d8
 80040a4:	20000805 	.word	0x20000805
 80040a8:	20000804 	.word	0x20000804
 80040ac:	20000800 	.word	0x20000800
 80040b0:	20000528 	.word	0x20000528
 80040b4:	20000264 	.word	0x20000264

080040b8 <no_frontwall_straight>:


void no_frontwall_straight(void){
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 80040bc:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <no_frontwall_straight+0x70>)
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <no_frontwall_straight+0x70>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <no_frontwall_straight+0x70>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <no_frontwall_straight+0x74>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <no_frontwall_straight+0x74>)
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <no_frontwall_straight+0x74>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <no_frontwall_straight+0x78>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <no_frontwall_straight+0x7c>)
 80040f4:	2205      	movs	r2, #5
 80040f6:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80040f8:	f003 fe7c 	bl	8007df4 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 80040fc:	2096      	movs	r0, #150	; 0x96
 80040fe:	f004 f937 	bl	8008370 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <no_frontwall_straight+0x78>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <no_frontwall_straight+0x7c>)
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 800410e:	f003 fe7f 	bl	8007e10 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <no_frontwall_straight+0x80>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <no_frontwall_straight+0x84>)
 8004118:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <no_frontwall_straight+0x88>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <no_frontwall_straight+0x8c>)
 8004120:	6013      	str	r3, [r2, #0]

}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200004e4 	.word	0x200004e4
 800412c:	200004d8 	.word	0x200004d8
 8004130:	20000591 	.word	0x20000591
 8004134:	20000528 	.word	0x20000528
 8004138:	20000228 	.word	0x20000228
 800413c:	20000258 	.word	0x20000258
 8004140:	2000022c 	.word	0x2000022c
 8004144:	2000025c 	.word	0x2000025c

08004148 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004152:	edc7 0a04 	vstr	s1, [r7, #16]
 8004156:	ed87 1a03 	vstr	s2, [r7, #12]
 800415a:	edc7 1a02 	vstr	s3, [r7, #8]
 800415e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004162:	edd7 7a03 	vldr	s15, [r7, #12]
 8004166:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800416a:	edd7 7a04 	vldr	s15, [r7, #16]
 800416e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004172:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004176:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800417a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800417e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800418a:	edd7 7a01 	vldr	s15, [r7, #4]
 800418e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	d505      	bpl.n	80041a4 <straight_table_ff+0x5c>
 8004198:	edd7 7a01 	vldr	s15, [r7, #4]
 800419c:	eef1 7a67 	vneg.f32	s15, s15
 80041a0:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <straight_table_ff+0x238>)
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 80041ac:	4b75      	ldr	r3, [pc, #468]	; (8004384 <straight_table_ff+0x23c>)
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 80041b4:	4b74      	ldr	r3, [pc, #464]	; (8004388 <straight_table_ff+0x240>)
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 80041bc:	4b73      	ldr	r3, [pc, #460]	; (800438c <straight_table_ff+0x244>)
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 80041c4:	4b72      	ldr	r3, [pc, #456]	; (8004390 <straight_table_ff+0x248>)
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 80041cc:	4b71      	ldr	r3, [pc, #452]	; (8004394 <straight_table_ff+0x24c>)
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 80041d4:	4a70      	ldr	r2, [pc, #448]	; (8004398 <straight_table_ff+0x250>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80041da:	4a6f      	ldr	r2, [pc, #444]	; (8004398 <straight_table_ff+0x250>)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80041e0:	4a6d      	ldr	r2, [pc, #436]	; (8004398 <straight_table_ff+0x250>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80041e6:	4a6c      	ldr	r2, [pc, #432]	; (8004398 <straight_table_ff+0x250>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80041ec:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <straight_table_ff+0x250>)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80041f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	db03      	blt.n	8004208 <straight_table_ff+0xc0>
 8004200:	4a66      	ldr	r2, [pc, #408]	; (800439c <straight_table_ff+0x254>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6053      	str	r3, [r2, #4]
 8004206:	e006      	b.n	8004216 <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 8004208:	edd7 7a01 	vldr	s15, [r7, #4]
 800420c:	eef1 7a67 	vneg.f32	s15, s15
 8004210:	4b62      	ldr	r3, [pc, #392]	; (800439c <straight_table_ff+0x254>)
 8004212:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8004216:	4a61      	ldr	r2, [pc, #388]	; (800439c <straight_table_ff+0x254>)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800421c:	4b5f      	ldr	r3, [pc, #380]	; (800439c <straight_table_ff+0x254>)
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8004224:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <straight_table_ff+0x258>)
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800422c:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <straight_table_ff+0x258>)
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8004234:	4b5a      	ldr	r3, [pc, #360]	; (80043a0 <straight_table_ff+0x258>)
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800423c:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <straight_table_ff+0x25c>)
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004242:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <straight_table_ff+0x260>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004248:	edd7 7a05 	vldr	s15, [r7, #20]
 800424c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	dd0e      	ble.n	8004274 <straight_table_ff+0x12c>
 8004256:	ed97 7a07 	vldr	s14, [r7, #28]
 800425a:	edd7 7a05 	vldr	s15, [r7, #20]
 800425e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	dd05      	ble.n	8004274 <straight_table_ff+0x12c>
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <straight_table_ff+0x260>)
 800426a:	2205      	movs	r2, #5
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	4a4b      	ldr	r2, [pc, #300]	; (800439c <straight_table_ff+0x254>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004274:	edd7 7a05 	vldr	s15, [r7, #20]
 8004278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	dd14      	ble.n	80042ac <straight_table_ff+0x164>
 8004282:	edd7 7a05 	vldr	s15, [r7, #20]
 8004286:	eef1 7a67 	vneg.f32	s15, s15
 800428a:	ed97 7a07 	vldr	s14, [r7, #28]
 800428e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	d509      	bpl.n	80042ac <straight_table_ff+0x164>
 8004298:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <straight_table_ff+0x260>)
 800429a:	2206      	movs	r2, #6
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	edd7 7a01 	vldr	s15, [r7, #4]
 80042a2:	eef1 7a67 	vneg.f32	s15, s15
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <straight_table_ff+0x254>)
 80042a8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80042ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80042b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	d514      	bpl.n	80042e4 <straight_table_ff+0x19c>
 80042ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80042be:	eef1 7a67 	vneg.f32	s15, s15
 80042c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80042c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ce:	dd09      	ble.n	80042e4 <straight_table_ff+0x19c>
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <straight_table_ff+0x260>)
 80042d2:	2205      	movs	r2, #5
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80042da:	eef1 7a67 	vneg.f32	s15, s15
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <straight_table_ff+0x254>)
 80042e0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80042e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d50e      	bpl.n	8004310 <straight_table_ff+0x1c8>
 80042f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80042f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	d505      	bpl.n	8004310 <straight_table_ff+0x1c8>
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <straight_table_ff+0x260>)
 8004306:	2206      	movs	r2, #6
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	4a24      	ldr	r2, [pc, #144]	; (800439c <straight_table_ff+0x254>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <straight_table_ff+0x264>)
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8004316:	f003 fd6d 	bl	8007df4 <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 800431a:	bf00      	nop
 800431c:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <straight_table_ff+0x260>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b04      	cmp	r3, #4
 8004324:	d1fa      	bne.n	800431c <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 8004326:	edd7 7a03 	vldr	s15, [r7, #12]
 800432a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	d105      	bne.n	8004340 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	f004 f81b 	bl	8008370 <wait_ms_NoReset>
		modeacc = 0;
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <straight_table_ff+0x264>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <straight_table_ff+0x268>)
 8004342:	ed93 7a00 	vldr	s14, [r3]
 8004346:	edd7 7a05 	vldr	s15, [r7, #20]
 800434a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <straight_table_ff+0x268>)
 8004350:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004354:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <straight_table_ff+0x26c>)
 8004356:	ed93 7a00 	vldr	s14, [r3]
 800435a:	edd7 7a05 	vldr	s15, [r7, #20]
 800435e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <straight_table_ff+0x26c>)
 8004364:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004368:	f003 fd52 	bl	8007e10 <pl_DriveMotor_stop>



	return straight.velocity;
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <straight_table_ff+0x254>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	ee07 3a90 	vmov	s15, r3



}
 8004374:	eeb0 0a67 	vmov.f32	s0, s15
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000554 	.word	0x20000554
 8004384:	20000558 	.word	0x20000558
 8004388:	2000055c 	.word	0x2000055c
 800438c:	20000560 	.word	0x20000560
 8004390:	20000564 	.word	0x20000564
 8004394:	20000568 	.word	0x20000568
 8004398:	200004f0 	.word	0x200004f0
 800439c:	200004d8 	.word	0x200004d8
 80043a0:	200004e4 	.word	0x200004e4
 80043a4:	20000805 	.word	0x20000805
 80043a8:	20000804 	.word	0x20000804
 80043ac:	20000528 	.word	0x20000528
 80043b0:	20000220 	.word	0x20000220
 80043b4:	20000224 	.word	0x20000224

080043b8 <turning_table_ff>:



float turning_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	ed87 0a05 	vstr	s0, [r7, #20]
 80043c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80043c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80043ca:	edc7 1a02 	vstr	s3, [r7, #8]
 80043ce:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80043d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80043da:	edd7 7a04 	vldr	s15, [r7, #16]
 80043de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043e2:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80043e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80043ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80043f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80043fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80043fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004406:	d505      	bpl.n	8004414 <turning_table_ff+0x5c>
 8004408:	edd7 7a01 	vldr	s15, [r7, #4]
 800440c:	eef1 7a67 	vneg.f32	s15, s15
 8004410:	edc7 7a01 	vstr	s15, [r7, #4]

	Ksp = 0;//3//P項の制御量直進*****************************************************
 8004414:	4b71      	ldr	r3, [pc, #452]	; (80045dc <turning_table_ff+0x224>)
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
		Ksi = 0;//5//43//I項の制御量直進*****************************************************
 800441c:	4b70      	ldr	r3, [pc, #448]	; (80045e0 <turning_table_ff+0x228>)
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
		Ksd = 0;//D項の制御量直進*****************************************************
 8004424:	4b6f      	ldr	r3, [pc, #444]	; (80045e4 <turning_table_ff+0x22c>)
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
		Ktp = 0;//295//P項の制御量旋回*****************************************************
 800442c:	4b6e      	ldr	r3, [pc, #440]	; (80045e8 <turning_table_ff+0x230>)
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
		Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 8004434:	4b6d      	ldr	r3, [pc, #436]	; (80045ec <turning_table_ff+0x234>)
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
	//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
		Ktd = 0;
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <turning_table_ff+0x238>)
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

	Trapezoid_turning.displacement = input_displacement;
 8004444:	4a6b      	ldr	r2, [pc, #428]	; (80045f4 <turning_table_ff+0x23c>)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 800444a:	4a6a      	ldr	r2, [pc, #424]	; (80045f4 <turning_table_ff+0x23c>)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004450:	4a68      	ldr	r2, [pc, #416]	; (80045f4 <turning_table_ff+0x23c>)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004456:	4a67      	ldr	r2, [pc, #412]	; (80045f4 <turning_table_ff+0x23c>)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 800445c:	4a65      	ldr	r2, [pc, #404]	; (80045f4 <turning_table_ff+0x23c>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8004462:	edd7 7a02 	vldr	s15, [r7, #8]
 8004466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	db03      	blt.n	8004478 <turning_table_ff+0xc0>
 8004470:	4a61      	ldr	r2, [pc, #388]	; (80045f8 <turning_table_ff+0x240>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6053      	str	r3, [r2, #4]
 8004476:	e006      	b.n	8004486 <turning_table_ff+0xce>
	}else{turning.acceleration = -input_acceleration;}
 8004478:	edd7 7a01 	vldr	s15, [r7, #4]
 800447c:	eef1 7a67 	vneg.f32	s15, s15
 8004480:	4b5d      	ldr	r3, [pc, #372]	; (80045f8 <turning_table_ff+0x240>)
 8004482:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8004486:	4a5c      	ldr	r2, [pc, #368]	; (80045f8 <turning_table_ff+0x240>)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 800448c:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <turning_table_ff+0x240>)
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004494:	4b59      	ldr	r3, [pc, #356]	; (80045fc <turning_table_ff+0x244>)
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 800449c:	4b57      	ldr	r3, [pc, #348]	; (80045fc <turning_table_ff+0x244>)
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80044a4:	4b55      	ldr	r3, [pc, #340]	; (80045fc <turning_table_ff+0x244>)
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80044ac:	4b54      	ldr	r3, [pc, #336]	; (8004600 <turning_table_ff+0x248>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80044b2:	4b54      	ldr	r3, [pc, #336]	; (8004604 <turning_table_ff+0x24c>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 80044b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c4:	dd0e      	ble.n	80044e4 <turning_table_ff+0x12c>
 80044c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80044ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	dd05      	ble.n	80044e4 <turning_table_ff+0x12c>
 80044d8:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <turning_table_ff+0x24c>)
 80044da:	2205      	movs	r2, #5
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	4a46      	ldr	r2, [pc, #280]	; (80045f8 <turning_table_ff+0x240>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80044e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f0:	dd14      	ble.n	800451c <turning_table_ff+0x164>
 80044f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f6:	eef1 7a67 	vneg.f32	s15, s15
 80044fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80044fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004506:	d509      	bpl.n	800451c <turning_table_ff+0x164>
 8004508:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <turning_table_ff+0x24c>)
 800450a:	2206      	movs	r2, #6
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004512:	eef1 7a67 	vneg.f32	s15, s15
 8004516:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <turning_table_ff+0x240>)
 8004518:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 800451c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	d514      	bpl.n	8004554 <turning_table_ff+0x19c>
 800452a:	edd7 7a05 	vldr	s15, [r7, #20]
 800452e:	eef1 7a67 	vneg.f32	s15, s15
 8004532:	ed97 7a07 	vldr	s14, [r7, #28]
 8004536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453e:	dd09      	ble.n	8004554 <turning_table_ff+0x19c>
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <turning_table_ff+0x24c>)
 8004542:	2205      	movs	r2, #5
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	edd7 7a01 	vldr	s15, [r7, #4]
 800454a:	eef1 7a67 	vneg.f32	s15, s15
 800454e:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <turning_table_ff+0x240>)
 8004550:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004554:	edd7 7a05 	vldr	s15, [r7, #20]
 8004558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004560:	d50e      	bpl.n	8004580 <turning_table_ff+0x1c8>
 8004562:	ed97 7a07 	vldr	s14, [r7, #28]
 8004566:	edd7 7a05 	vldr	s15, [r7, #20]
 800456a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	d505      	bpl.n	8004580 <turning_table_ff+0x1c8>
 8004574:	4b23      	ldr	r3, [pc, #140]	; (8004604 <turning_table_ff+0x24c>)
 8004576:	2206      	movs	r2, #6
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <turning_table_ff+0x240>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <turning_table_ff+0x250>)
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004586:	f003 fc35 	bl	8007df4 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 800458a:	bf00      	nop
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <turning_table_ff+0x24c>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b04      	cmp	r3, #4
 8004594:	d1fa      	bne.n	800458c <turning_table_ff+0x1d4>

	}
	if(input_end_velocity==0){//BREAK
 8004596:	edd7 7a03 	vldr	s15, [r7, #12]
 800459a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	d106      	bne.n	80045b2 <turning_table_ff+0x1fa>
		wait_ms_NoReset(300);
 80045a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80045a8:	f003 fee2 	bl	8008370 <wait_ms_NoReset>
		modeacc = 0;
 80045ac:	4b16      	ldr	r3, [pc, #88]	; (8004608 <turning_table_ff+0x250>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <turning_table_ff+0x254>)
 80045b4:	ed93 7a00 	vldr	s14, [r3]
 80045b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80045bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c0:	4b12      	ldr	r3, [pc, #72]	; (800460c <turning_table_ff+0x254>)
 80045c2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 80045c6:	f003 fc23 	bl	8007e10 <pl_DriveMotor_stop>

	return turning.velocity;
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <turning_table_ff+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	ee07 3a90 	vmov	s15, r3
}
 80045d2:	eeb0 0a67 	vmov.f32	s0, s15
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000554 	.word	0x20000554
 80045e0:	20000558 	.word	0x20000558
 80045e4:	2000055c 	.word	0x2000055c
 80045e8:	20000560 	.word	0x20000560
 80045ec:	20000564 	.word	0x20000564
 80045f0:	20000568 	.word	0x20000568
 80045f4:	20000504 	.word	0x20000504
 80045f8:	200004e4 	.word	0x200004e4
 80045fc:	200004d8 	.word	0x200004d8
 8004600:	20000805 	.word	0x20000805
 8004604:	20000804 	.word	0x20000804
 8004608:	20000528 	.word	0x20000528
 800460c:	20000264 	.word	0x20000264

08004610 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004610:	b5b0      	push	{r4, r5, r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6178      	str	r0, [r7, #20]
 8004618:	ed87 0a04 	vstr	s0, [r7, #16]
 800461c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	ed87 1a01 	vstr	s2, [r7, #4]
 8004626:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 800462a:	edd7 7a04 	vldr	s15, [r7, #16]
 800462e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004636:	db7c      	blt.n	8004732 <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7fb ffad 	bl	8000598 <__aeabi_f2d>
 800463e:	a3c8      	add	r3, pc, #800	; (adr r3, 8004960 <feedforward_const_accel+0x350>)
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f7fc f800 	bl	8000648 <__aeabi_dmul>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	4bc6      	ldr	r3, [pc, #792]	; (8004970 <feedforward_const_accel+0x360>)
 8004656:	f7fc f921 	bl	800089c <__aeabi_ddiv>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004662:	a3b5      	add	r3, pc, #724	; (adr r3, 8004938 <feedforward_const_accel+0x328>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fc f918 	bl	800089c <__aeabi_ddiv>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800467c:	f7fc f90e 	bl	800089c <__aeabi_ddiv>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	a3ad      	add	r3, pc, #692	; (adr r3, 8004940 <feedforward_const_accel+0x330>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fb fe25 	bl	80002dc <__adddf3>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	a3ab      	add	r3, pc, #684	; (adr r3, 8004948 <feedforward_const_accel+0x338>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fb ffd2 	bl	8000648 <__aeabi_dmul>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4610      	mov	r0, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	a3a8      	add	r3, pc, #672	; (adr r3, 8004950 <feedforward_const_accel+0x340>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fc f8f3 	bl	800089c <__aeabi_ddiv>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4614      	mov	r4, r2
 80046bc:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80046be:	ed97 7a04 	vldr	s14, [r7, #16]
 80046c2:	eddf 6aac 	vldr	s13, [pc, #688]	; 8004974 <feedforward_const_accel+0x364>
 80046c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046ca:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8004978 <feedforward_const_accel+0x368>
 80046ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80046d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046da:	ee16 0a90 	vmov	r0, s13
 80046de:	f7fb ff5b 	bl	8000598 <__aeabi_f2d>
 80046e2:	a39d      	add	r3, pc, #628	; (adr r3, 8004958 <feedforward_const_accel+0x348>)
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f7fb ffae 	bl	8000648 <__aeabi_dmul>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	a390      	add	r3, pc, #576	; (adr r3, 8004938 <feedforward_const_accel+0x328>)
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	f7fc f8cf 	bl	800089c <__aeabi_ddiv>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4610      	mov	r0, r2
 8004704:	4619      	mov	r1, r3
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800470e:	f7fc f8c5 	bl	800089c <__aeabi_ddiv>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4620      	mov	r0, r4
 8004718:	4629      	mov	r1, r5
 800471a:	f7fb fddf 	bl	80002dc <__adddf3>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	f7fc fa67 	bl	8000bf8 <__aeabi_d2f>
 800472a:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e07b      	b.n	800482a <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7fb ff30 	bl	8000598 <__aeabi_f2d>
 8004738:	a389      	add	r3, pc, #548	; (adr r3, 8004960 <feedforward_const_accel+0x350>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb ff83 	bl	8000648 <__aeabi_dmul>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	4b88      	ldr	r3, [pc, #544]	; (8004970 <feedforward_const_accel+0x360>)
 8004750:	f7fc f8a4 	bl	800089c <__aeabi_ddiv>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800475c:	a376      	add	r3, pc, #472	; (adr r3, 8004938 <feedforward_const_accel+0x328>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f7fc f89b 	bl	800089c <__aeabi_ddiv>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004776:	f7fc f891 	bl	800089c <__aeabi_ddiv>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	a36f      	add	r3, pc, #444	; (adr r3, 8004940 <feedforward_const_accel+0x330>)
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f7fb fda6 	bl	80002d8 <__aeabi_dsub>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	a36c      	add	r3, pc, #432	; (adr r3, 8004948 <feedforward_const_accel+0x338>)
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f7fb ff55 	bl	8000648 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	a36a      	add	r3, pc, #424	; (adr r3, 8004950 <feedforward_const_accel+0x340>)
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f7fc f876 	bl	800089c <__aeabi_ddiv>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4614      	mov	r4, r2
 80047b6:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80047b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80047bc:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8004974 <feedforward_const_accel+0x364>
 80047c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047c4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004978 <feedforward_const_accel+0x368>
 80047c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047cc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80047d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047d4:	ee16 0a90 	vmov	r0, s13
 80047d8:	f7fb fede 	bl	8000598 <__aeabi_f2d>
 80047dc:	a35e      	add	r3, pc, #376	; (adr r3, 8004958 <feedforward_const_accel+0x348>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb ff31 	bl	8000648 <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	a352      	add	r3, pc, #328	; (adr r3, 8004938 <feedforward_const_accel+0x328>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f7fc f852 	bl	800089c <__aeabi_ddiv>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004808:	f7fc f848 	bl	800089c <__aeabi_ddiv>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4620      	mov	r0, r4
 8004812:	4629      	mov	r1, r5
 8004814:	f7fb fd62 	bl	80002dc <__adddf3>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	f7fc f9ea 	bl	8000bf8 <__aeabi_d2f>
 8004824:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 800482a:	edd7 7a01 	vldr	s15, [r7, #4]
 800482e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	f2c0 80a1 	blt.w	800497c <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800483a:	6838      	ldr	r0, [r7, #0]
 800483c:	f7fb feac 	bl	8000598 <__aeabi_f2d>
 8004840:	a349      	add	r3, pc, #292	; (adr r3, 8004968 <feedforward_const_accel+0x358>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f7fb feff 	bl	8000648 <__aeabi_dmul>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4610      	mov	r0, r2
 8004850:	4619      	mov	r1, r3
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	4b46      	ldr	r3, [pc, #280]	; (8004970 <feedforward_const_accel+0x360>)
 8004858:	f7fc f820 	bl	800089c <__aeabi_ddiv>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004864:	a334      	add	r3, pc, #208	; (adr r3, 8004938 <feedforward_const_accel+0x328>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fc f817 	bl	800089c <__aeabi_ddiv>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800487e:	f7fc f80d 	bl	800089c <__aeabi_ddiv>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	a32d      	add	r3, pc, #180	; (adr r3, 8004940 <feedforward_const_accel+0x330>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f7fb fd24 	bl	80002dc <__adddf3>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	a32a      	add	r3, pc, #168	; (adr r3, 8004948 <feedforward_const_accel+0x338>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fed1 	bl	8000648 <__aeabi_dmul>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	a328      	add	r3, pc, #160	; (adr r3, 8004950 <feedforward_const_accel+0x340>)
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f7fb fff2 	bl	800089c <__aeabi_ddiv>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4614      	mov	r4, r2
 80048be:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80048c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80048c4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004974 <feedforward_const_accel+0x364>
 80048c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048cc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004978 <feedforward_const_accel+0x368>
 80048d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048d4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80048d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048dc:	ee16 0a90 	vmov	r0, s13
 80048e0:	f7fb fe5a 	bl	8000598 <__aeabi_f2d>
 80048e4:	a31c      	add	r3, pc, #112	; (adr r3, 8004958 <feedforward_const_accel+0x348>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f7fb fead 	bl	8000648 <__aeabi_dmul>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	a310      	add	r3, pc, #64	; (adr r3, 8004938 <feedforward_const_accel+0x328>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb ffce 	bl	800089c <__aeabi_ddiv>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004910:	f7fb ffc4 	bl	800089c <__aeabi_ddiv>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4620      	mov	r0, r4
 800491a:	4629      	mov	r1, r5
 800491c:	f7fb fcde 	bl	80002dc <__adddf3>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f7fc f966 	bl	8000bf8 <__aeabi_d2f>
 800492c:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 8004932:	e09f      	b.n	8004a74 <feedforward_const_accel+0x464>
 8004934:	f3af 8000 	nop.w
 8004938:	99e4ac6e 	.word	0x99e4ac6e
 800493c:	3f9a9a29 	.word	0x3f9a9a29
 8004940:	eb1c432d 	.word	0xeb1c432d
 8004944:	3f1a36e2 	.word	0x3f1a36e2
 8004948:	51eb851f 	.word	0x51eb851f
 800494c:	3ff11eb8 	.word	0x3ff11eb8
 8004950:	b7952d23 	.word	0xb7952d23
 8004954:	3f569c23 	.word	0x3f569c23
 8004958:	761b0f50 	.word	0x761b0f50
 800495c:	3f66bf29 	.word	0x3f66bf29
 8004960:	7df8b79b 	.word	0x7df8b79b
 8004964:	3ed5fdfc 	.word	0x3ed5fdfc
 8004968:	1bbe04ec 	.word	0x1bbe04ec
 800496c:	3eb45b3a 	.word	0x3eb45b3a
 8004970:	408f4000 	.word	0x408f4000
 8004974:	447a0000 	.word	0x447a0000
 8004978:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800497c:	6838      	ldr	r0, [r7, #0]
 800497e:	f7fb fe0b 	bl	8000598 <__aeabi_f2d>
 8004982:	a34c      	add	r3, pc, #304	; (adr r3, 8004ab4 <feedforward_const_accel+0x4a4>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fe5e 	bl	8000648 <__aeabi_dmul>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <feedforward_const_accel+0x498>)
 800499a:	f7fb ff7f 	bl	800089c <__aeabi_ddiv>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80049a6:	a336      	add	r3, pc, #216	; (adr r3, 8004a80 <feedforward_const_accel+0x470>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f7fb ff76 	bl	800089c <__aeabi_ddiv>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049c0:	f7fb ff6c 	bl	800089c <__aeabi_ddiv>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	a32e      	add	r3, pc, #184	; (adr r3, 8004a88 <feedforward_const_accel+0x478>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f7fb fc81 	bl	80002d8 <__aeabi_dsub>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	a32c      	add	r3, pc, #176	; (adr r3, 8004a90 <feedforward_const_accel+0x480>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fe30 	bl	8000648 <__aeabi_dmul>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	a329      	add	r3, pc, #164	; (adr r3, 8004a98 <feedforward_const_accel+0x488>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb ff51 	bl	800089c <__aeabi_ddiv>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4614      	mov	r4, r2
 8004a00:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004a02:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a06:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004aac <feedforward_const_accel+0x49c>
 8004a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a0e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004ab0 <feedforward_const_accel+0x4a0>
 8004a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a16:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004a1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a1e:	ee16 0a90 	vmov	r0, s13
 8004a22:	f7fb fdb9 	bl	8000598 <__aeabi_f2d>
 8004a26:	a31e      	add	r3, pc, #120	; (adr r3, 8004aa0 <feedforward_const_accel+0x490>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fe0c 	bl	8000648 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	a311      	add	r3, pc, #68	; (adr r3, 8004a80 <feedforward_const_accel+0x470>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb ff2d 	bl	800089c <__aeabi_ddiv>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a52:	f7fb ff23 	bl	800089c <__aeabi_ddiv>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f7fb fc3d 	bl	80002dc <__adddf3>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f7fc f8c5 	bl	8000bf8 <__aeabi_d2f>
 8004a6e:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7c:	f3af 8000 	nop.w
 8004a80:	99e4ac6e 	.word	0x99e4ac6e
 8004a84:	3f9a9a29 	.word	0x3f9a9a29
 8004a88:	eb1c432d 	.word	0xeb1c432d
 8004a8c:	3f1a36e2 	.word	0x3f1a36e2
 8004a90:	51eb851f 	.word	0x51eb851f
 8004a94:	3ff11eb8 	.word	0x3ff11eb8
 8004a98:	b7952d23 	.word	0xb7952d23
 8004a9c:	3f569c23 	.word	0x3f569c23
 8004aa0:	761b0f50 	.word	0x761b0f50
 8004aa4:	3f66bf29 	.word	0x3f66bf29
 8004aa8:	408f4000 	.word	0x408f4000
 8004aac:	447a0000 	.word	0x447a0000
 8004ab0:	421c0000 	.word	0x421c0000
 8004ab4:	1bbe04ec 	.word	0x1bbe04ec
 8004ab8:	3eb45b3a 	.word	0x3eb45b3a

08004abc <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <PID_Init+0x44>)
 8004ac2:	4a10      	ldr	r2, [pc, #64]	; (8004b04 <PID_Init+0x48>)
 8004ac4:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <PID_Init+0x4c>)
 8004ac8:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <PID_Init+0x50>)
 8004aca:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <PID_Init+0x54>)
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <PID_Init+0x58>)
 8004ad6:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <PID_Init+0x5c>)
 8004ad8:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <PID_Init+0x60>)
 8004adc:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <PID_Init+0x64>)
 8004ade:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004ae0:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <PID_Init+0x68>)
 8004ae2:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <PID_Init+0x6c>)
 8004ae4:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <PID_Init+0x70>)
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <PID_Init+0x74>)
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]

}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000554 	.word	0x20000554
 8004b04:	40466666 	.word	0x40466666
 8004b08:	20000558 	.word	0x20000558
 8004b0c:	3da3d70a 	.word	0x3da3d70a
 8004b10:	2000055c 	.word	0x2000055c
 8004b14:	20000560 	.word	0x20000560
 8004b18:	3fcccccd 	.word	0x3fcccccd
 8004b1c:	20000564 	.word	0x20000564
 8004b20:	3d4ccccd 	.word	0x3d4ccccd
 8004b24:	20000568 	.word	0x20000568
 8004b28:	3b03126f 	.word	0x3b03126f
 8004b2c:	20000534 	.word	0x20000534
 8004b30:	20000544 	.word	0x20000544

08004b34 <clear_Ierror>:

void clear_Ierror(void) {
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <clear_Ierror+0x20>)
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <clear_Ierror+0x24>)
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20000534 	.word	0x20000534
 8004b58:	20000544 	.word	0x20000544

08004b5c <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b6a:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 8004b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d101      	bne.n	8004b8c <EncoderGyro_PID+0x30>
		reset_speed();
 8004b88:	f7fc fa46 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100) {
 8004b8c:	4b6e      	ldr	r3, [pc, #440]	; (8004d48 <EncoderGyro_PID+0x1ec>)
 8004b8e:	edd3 7a00 	vldr	s15, [r3]
 8004b92:	eef0 7ae7 	vabs.f32	s15, s15
 8004b96:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004d4c <EncoderGyro_PID+0x1f0>
 8004b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	d51c      	bpl.n	8004bde <EncoderGyro_PID+0x82>
 8004ba4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ba8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004d50 <EncoderGyro_PID+0x1f4>
 8004bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	db13      	blt.n	8004bde <EncoderGyro_PID+0x82>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004bb6:	4b67      	ldr	r3, [pc, #412]	; (8004d54 <EncoderGyro_PID+0x1f8>)
 8004bb8:	ed93 7a00 	vldr	s14, [r3]
 8004bbc:	4b66      	ldr	r3, [pc, #408]	; (8004d58 <EncoderGyro_PID+0x1fc>)
 8004bbe:	edd3 7a00 	vldr	s15, [r3]
 8004bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bc6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd6:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004bd8:	edc3 7a00 	vstr	s15, [r3]
 8004bdc:	e01a      	b.n	8004c14 <EncoderGyro_PID+0xb8>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004bde:	4b60      	ldr	r3, [pc, #384]	; (8004d60 <EncoderGyro_PID+0x204>)
 8004be0:	ed93 7a00 	vldr	s14, [r3]
 8004be4:	4b5f      	ldr	r3, [pc, #380]	; (8004d64 <EncoderGyro_PID+0x208>)
 8004be6:	edd3 7a00 	vldr	s15, [r3]
 8004bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bf6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bfe:	4b57      	ldr	r3, [pc, #348]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c00:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_speedL;
 8004c04:	4b57      	ldr	r3, [pc, #348]	; (8004d64 <EncoderGyro_PID+0x208>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a53      	ldr	r2, [pc, #332]	; (8004d58 <EncoderGyro_PID+0x1fc>)
 8004c0a:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_speedR;
 8004c0c:	4b54      	ldr	r3, [pc, #336]	; (8004d60 <EncoderGyro_PID+0x204>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a50      	ldr	r2, [pc, #320]	; (8004d54 <EncoderGyro_PID+0x1f8>)
 8004c12:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8004c14:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c16:	ed93 7a00 	vldr	s14, [r3]
 8004c1a:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c26:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8004c2a:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a4b      	ldr	r2, [pc, #300]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c30:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8004c32:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c34:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c38:	4b48      	ldr	r3, [pc, #288]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
 8004c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c42:	4b46      	ldr	r3, [pc, #280]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c44:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8004c48:	4b44      	ldr	r3, [pc, #272]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c4a:	ed93 7a00 	vldr	s14, [r3]
 8004c4e:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <EncoderGyro_PID+0x20c>)
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c58:	4b40      	ldr	r3, [pc, #256]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c5e:	4b43      	ldr	r3, [pc, #268]	; (8004d6c <EncoderGyro_PID+0x210>)
 8004c60:	edd3 7a00 	vldr	s15, [r3]
 8004c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <EncoderGyro_PID+0x200>)
 8004c6e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c72:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <EncoderGyro_PID+0x214>)
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c80:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004c84:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <EncoderGyro_PID+0x1ec>)
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	ed97 7a00 	vldr	s14, [r7]
 8004c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004c94:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004c98:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004c9a:	ed93 7a00 	vldr	s14, [r3]
 8004c9e:	4b35      	ldr	r3, [pc, #212]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004caa:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a30      	ldr	r2, [pc, #192]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cb4:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cb8:	ed93 7a02 	vldr	s14, [r3, #8]
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cc8:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004ccc:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cce:	ed93 7a00 	vldr	s14, [r3]
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <EncoderGyro_PID+0x21c>)
 8004cd4:	edd3 7a00 	vldr	s15, [r3]
 8004cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cde:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <EncoderGyro_PID+0x220>)
 8004ce4:	edd3 7a00 	vldr	s15, [r3]
 8004ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cec:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004cf0:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <EncoderGyro_PID+0x218>)
 8004cf2:	edd3 6a03 	vldr	s13, [r3, #12]
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <EncoderGyro_PID+0x224>)
 8004cf8:	edd3 7a00 	vldr	s15, [r3]
 8004cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d04:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d0c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8004d84 <EncoderGyro_PID+0x228>
 8004d10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d14:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <EncoderGyro_PID+0x22c>)
 8004d16:	edd3 7a00 	vldr	s15, [r3]
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004d24:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d28:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004d84 <EncoderGyro_PID+0x228>
 8004d2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <EncoderGyro_PID+0x22c>)
 8004d32:	edd3 7a00 	vldr	s15, [r3]
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	edc3 7a00 	vstr	s15, [r3]

}
 8004d40:	bf00      	nop
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000268 	.word	0x20000268
 8004d4c:	42f00000 	.word	0x42f00000
 8004d50:	42c80000 	.word	0x42c80000
 8004d54:	2000025c 	.word	0x2000025c
 8004d58:	20000258 	.word	0x20000258
 8004d5c:	20000534 	.word	0x20000534
 8004d60:	2000022c 	.word	0x2000022c
 8004d64:	20000228 	.word	0x20000228
 8004d68:	20000554 	.word	0x20000554
 8004d6c:	20000558 	.word	0x20000558
 8004d70:	2000055c 	.word	0x2000055c
 8004d74:	20000544 	.word	0x20000544
 8004d78:	20000560 	.word	0x20000560
 8004d7c:	20000564 	.word	0x20000564
 8004d80:	20000568 	.word	0x20000568
 8004d84:	44d1e000 	.word	0x44d1e000
 8004d88:	200004d4 	.word	0x200004d4

08004d8c <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004d90:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <init_WallControl+0x104>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004d96:	4b3f      	ldr	r3, [pc, #252]	; (8004e94 <init_WallControl+0x108>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004d9c:	4b3e      	ldr	r3, [pc, #248]	; (8004e98 <init_WallControl+0x10c>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004da2:	4b3e      	ldr	r3, [pc, #248]	; (8004e9c <init_WallControl+0x110>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004da8:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <init_WallControl+0x114>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <init_WallControl+0x118>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004db4:	4b3c      	ldr	r3, [pc, #240]	; (8004ea8 <init_WallControl+0x11c>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004dba:	4b3c      	ldr	r3, [pc, #240]	; (8004eac <init_WallControl+0x120>)
 8004dbc:	4a3c      	ldr	r2, [pc, #240]	; (8004eb0 <init_WallControl+0x124>)
 8004dbe:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004dc0:	4b3c      	ldr	r3, [pc, #240]	; (8004eb4 <init_WallControl+0x128>)
 8004dc2:	4a3d      	ldr	r2, [pc, #244]	; (8004eb8 <init_WallControl+0x12c>)
 8004dc4:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004dc6:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <init_WallControl+0x130>)
 8004dc8:	4a3d      	ldr	r2, [pc, #244]	; (8004ec0 <init_WallControl+0x134>)
 8004dca:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004dcc:	4b3d      	ldr	r3, [pc, #244]	; (8004ec4 <init_WallControl+0x138>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004dd2:	4b3d      	ldr	r3, [pc, #244]	; (8004ec8 <init_WallControl+0x13c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004dd8:	4b3c      	ldr	r3, [pc, #240]	; (8004ecc <init_WallControl+0x140>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004dde:	4b3c      	ldr	r3, [pc, #240]	; (8004ed0 <init_WallControl+0x144>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <init_WallControl+0x148>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004dea:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <init_WallControl+0x14c>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004df0:	4b3a      	ldr	r3, [pc, #232]	; (8004edc <init_WallControl+0x150>)
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <init_WallControl+0x154>)
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004e00:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <init_WallControl+0x158>)
 8004e02:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004e06:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004e08:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <init_WallControl+0x15c>)
 8004e0a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004e0e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004e10:	4b36      	ldr	r3, [pc, #216]	; (8004eec <init_WallControl+0x160>)
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004e18:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <init_WallControl+0x164>)
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004e20:	4b34      	ldr	r3, [pc, #208]	; (8004ef4 <init_WallControl+0x168>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004e28:	4b33      	ldr	r3, [pc, #204]	; (8004ef8 <init_WallControl+0x16c>)
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004e30:	4b32      	ldr	r3, [pc, #200]	; (8004efc <init_WallControl+0x170>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004e36:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <init_WallControl+0x174>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004e3c:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <init_WallControl+0x178>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004e42:	4b31      	ldr	r3, [pc, #196]	; (8004f08 <init_WallControl+0x17c>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004e48:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <init_WallControl+0x180>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004e4e:	4b30      	ldr	r3, [pc, #192]	; (8004f10 <init_WallControl+0x184>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004e54:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <init_WallControl+0x188>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004e5a:	4b2f      	ldr	r3, [pc, #188]	; (8004f18 <init_WallControl+0x18c>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004e60:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <init_WallControl+0x190>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004e66:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <init_WallControl+0x194>)
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004e6e:	4b2d      	ldr	r3, [pc, #180]	; (8004f24 <init_WallControl+0x198>)
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004e76:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <init_WallControl+0x19c>)
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <init_WallControl+0x1a0>)
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	20000590 	.word	0x20000590
 8004e94:	20000591 	.word	0x20000591
 8004e98:	20000593 	.word	0x20000593
 8004e9c:	20000592 	.word	0x20000592
 8004ea0:	20000595 	.word	0x20000595
 8004ea4:	20000596 	.word	0x20000596
 8004ea8:	20000597 	.word	0x20000597
 8004eac:	20000598 	.word	0x20000598
 8004eb0:	44d2a000 	.word	0x44d2a000
 8004eb4:	2000059c 	.word	0x2000059c
 8004eb8:	449a6000 	.word	0x449a6000
 8004ebc:	200005a0 	.word	0x200005a0
 8004ec0:	420c0000 	.word	0x420c0000
 8004ec4:	200005b8 	.word	0x200005b8
 8004ec8:	200005b4 	.word	0x200005b4
 8004ecc:	200005c0 	.word	0x200005c0
 8004ed0:	200005bc 	.word	0x200005bc
 8004ed4:	200005c8 	.word	0x200005c8
 8004ed8:	200005c4 	.word	0x200005c4
 8004edc:	200005d0 	.word	0x200005d0
 8004ee0:	200005cc 	.word	0x200005cc
 8004ee4:	200005d8 	.word	0x200005d8
 8004ee8:	200005d4 	.word	0x200005d4
 8004eec:	200005e0 	.word	0x200005e0
 8004ef0:	200005dc 	.word	0x200005dc
 8004ef4:	200005e8 	.word	0x200005e8
 8004ef8:	200005e4 	.word	0x200005e4
 8004efc:	200005ec 	.word	0x200005ec
 8004f00:	200005ed 	.word	0x200005ed
 8004f04:	200005ee 	.word	0x200005ee
 8004f08:	200005ef 	.word	0x200005ef
 8004f0c:	200005f0 	.word	0x200005f0
 8004f10:	200005f1 	.word	0x200005f1
 8004f14:	200005f2 	.word	0x200005f2
 8004f18:	200005f3 	.word	0x200005f3
 8004f1c:	200005f4 	.word	0x200005f4
 8004f20:	200005f8 	.word	0x200005f8
 8004f24:	200005fc 	.word	0x200005fc
 8004f28:	20000600 	.word	0x20000600
 8004f2c:	20000604 	.word	0x20000604

08004f30 <calWallConrol>:


float calWallConrol(void) {
 8004f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f34:	b0aa      	sub	sp, #168	; 0xa8
 8004f36:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004f38:	4b9b      	ldr	r3, [pc, #620]	; (80051a8 <calWallConrol+0x278>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d13d      	bne.n	8004fbc <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004f40:	4b9a      	ldr	r3, [pc, #616]	; (80051ac <calWallConrol+0x27c>)
 8004f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004f46:	4b9a      	ldr	r3, [pc, #616]	; (80051b0 <calWallConrol+0x280>)
 8004f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004f4c:	4b99      	ldr	r3, [pc, #612]	; (80051b4 <calWallConrol+0x284>)
 8004f4e:	edd3 7a00 	vldr	s15, [r3]
 8004f52:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80051b8 <calWallConrol+0x288>
 8004f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5e:	dd06      	ble.n	8004f6e <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004f60:	4b96      	ldr	r3, [pc, #600]	; (80051bc <calWallConrol+0x28c>)
 8004f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004f66:	4b96      	ldr	r3, [pc, #600]	; (80051c0 <calWallConrol+0x290>)
 8004f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f6c:	e048      	b.n	8005000 <calWallConrol+0xd0>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004f6e:	4b91      	ldr	r3, [pc, #580]	; (80051b4 <calWallConrol+0x284>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fb fb10 	bl	8000598 <__aeabi_f2d>
 8004f78:	a385      	add	r3, pc, #532	; (adr r3, 8005190 <calWallConrol+0x260>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb fb63 	bl	8000648 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fb fe35 	bl	8000bf8 <__aeabi_d2f>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004f94:	4b87      	ldr	r3, [pc, #540]	; (80051b4 <calWallConrol+0x284>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb fafd 	bl	8000598 <__aeabi_f2d>
 8004f9e:	a37e      	add	r3, pc, #504	; (adr r3, 8005198 <calWallConrol+0x268>)
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f7fb fb50 	bl	8000648 <__aeabi_dmul>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f7fb fe22 	bl	8000bf8 <__aeabi_d2f>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fba:	e021      	b.n	8005000 <calWallConrol+0xd0>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004fbc:	4b81      	ldr	r3, [pc, #516]	; (80051c4 <calWallConrol+0x294>)
 8004fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004fc2:	4b81      	ldr	r3, [pc, #516]	; (80051c8 <calWallConrol+0x298>)
 8004fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004fc8:	4b7a      	ldr	r3, [pc, #488]	; (80051b4 <calWallConrol+0x284>)
 8004fca:	edd3 7a00 	vldr	s15, [r3]
 8004fce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004fda:	4b76      	ldr	r3, [pc, #472]	; (80051b4 <calWallConrol+0x284>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb fada 	bl	8000598 <__aeabi_f2d>
 8004fe4:	a36e      	add	r3, pc, #440	; (adr r3, 80051a0 <calWallConrol+0x270>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f7fb fb2d 	bl	8000648 <__aeabi_dmul>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f7fb fdff 	bl	8000bf8 <__aeabi_d2f>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8005000:	4b72      	ldr	r3, [pc, #456]	; (80051cc <calWallConrol+0x29c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8005008:	da03      	bge.n	8005012 <calWallConrol+0xe2>
		sensorWall_L = SENSOR_L_MIN;
 800500a:	4b71      	ldr	r3, [pc, #452]	; (80051d0 <calWallConrol+0x2a0>)
 800500c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005010:	e011      	b.n	8005036 <calWallConrol+0x106>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8005012:	4b6e      	ldr	r3, [pc, #440]	; (80051cc <calWallConrol+0x29c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800501a:	4293      	cmp	r3, r2
 800501c:	dd03      	ble.n	8005026 <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MAX;
 800501e:	4b6d      	ldr	r3, [pc, #436]	; (80051d4 <calWallConrol+0x2a4>)
 8005020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005024:	e007      	b.n	8005036 <calWallConrol+0x106>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8005026:	4b69      	ldr	r3, [pc, #420]	; (80051cc <calWallConrol+0x29c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005032:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8005036:	4b65      	ldr	r3, [pc, #404]	; (80051cc <calWallConrol+0x29c>)
 8005038:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800503c:	f240 2289 	movw	r2, #649	; 0x289
 8005040:	4293      	cmp	r3, r2
 8005042:	dc03      	bgt.n	800504c <calWallConrol+0x11c>
		sensorWall_R = SENSOR_R_MIN;
 8005044:	4b64      	ldr	r3, [pc, #400]	; (80051d8 <calWallConrol+0x2a8>)
 8005046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800504a:	e012      	b.n	8005072 <calWallConrol+0x142>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 800504c:	4b5f      	ldr	r3, [pc, #380]	; (80051cc <calWallConrol+0x29c>)
 800504e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005052:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005056:	dd03      	ble.n	8005060 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MAX;
 8005058:	4b60      	ldr	r3, [pc, #384]	; (80051dc <calWallConrol+0x2ac>)
 800505a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800505e:	e008      	b.n	8005072 <calWallConrol+0x142>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005060:	4b5a      	ldr	r3, [pc, #360]	; (80051cc <calWallConrol+0x29c>)
 8005062:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800506e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8005080:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <calWallConrol+0x2b0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11c      	bne.n	80050c2 <calWallConrol+0x192>
		g_WallControlStatus = 0;
 8005088:	4b56      	ldr	r3, [pc, #344]	; (80051e4 <calWallConrol+0x2b4>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 800508e:	4b56      	ldr	r3, [pc, #344]	; (80051e8 <calWallConrol+0x2b8>)
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8005094:	4b55      	ldr	r3, [pc, #340]	; (80051ec <calWallConrol+0x2bc>)
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 800509a:	4b55      	ldr	r3, [pc, #340]	; (80051f0 <calWallConrol+0x2c0>)
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 80050a0:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <calWallConrol+0x2c4>)
 80050a2:	4a55      	ldr	r2, [pc, #340]	; (80051f8 <calWallConrol+0x2c8>)
 80050a4:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 80050a6:	4b55      	ldr	r3, [pc, #340]	; (80051fc <calWallConrol+0x2cc>)
 80050a8:	4a55      	ldr	r2, [pc, #340]	; (8005200 <calWallConrol+0x2d0>)
 80050aa:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 80050ac:	4b55      	ldr	r3, [pc, #340]	; (8005204 <calWallConrol+0x2d4>)
 80050ae:	4a56      	ldr	r2, [pc, #344]	; (8005208 <calWallConrol+0x2d8>)
 80050b0:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 80050ba:	f002 f89d 	bl	80071f8 <pl_yellow_LED_off>
 80050be:	f001 ba46 	b.w	800654e <calWallConrol+0x161e>

	} else if (g_WallControl_mode == 1) {
 80050c2:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <calWallConrol+0x2b0>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	f040 82eb 	bne.w	80056a2 <calWallConrol+0x772>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 80050cc:	4b45      	ldr	r3, [pc, #276]	; (80051e4 <calWallConrol+0x2b4>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 809b 	beq.w	8005210 <calWallConrol+0x2e0>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 80050da:	4b3c      	ldr	r3, [pc, #240]	; (80051cc <calWallConrol+0x29c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80050e2:	db16      	blt.n	8005112 <calWallConrol+0x1e2>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 80050e4:	4b49      	ldr	r3, [pc, #292]	; (800520c <calWallConrol+0x2dc>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fb fa43 	bl	8000574 <__aeabi_i2d>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4690      	mov	r8, r2
 80050f4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80050f8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80050fc:	f7fb fa4c 	bl	8000598 <__aeabi_f2d>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4640      	mov	r0, r8
 8005106:	4649      	mov	r1, r9
 8005108:	f7fb fd2e 	bl	8000b68 <__aeabi_dcmpgt>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d037      	beq.n	8005182 <calWallConrol+0x252>
				g_WallControlStatus = g_WallControlStatus - 1;
 8005112:	4b34      	ldr	r3, [pc, #208]	; (80051e4 <calWallConrol+0x2b4>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b32      	ldr	r3, [pc, #200]	; (80051e4 <calWallConrol+0x2b4>)
 800511c:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 800511e:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <calWallConrol+0x2c4>)
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800512c:	e021      	b.n	8005172 <calWallConrol+0x242>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 800512e:	4a27      	ldr	r2, [pc, #156]	; (80051cc <calWallConrol+0x29c>)
 8005130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005140:	4b2c      	ldr	r3, [pc, #176]	; (80051f4 <calWallConrol+0x2c4>)
 8005142:	edd3 7a00 	vldr	s15, [r3]
 8005146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514e:	dd0b      	ble.n	8005168 <calWallConrol+0x238>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8005150:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <calWallConrol+0x29c>)
 8005152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <calWallConrol+0x2c4>)
 8005164:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800516c:	3301      	adds	r3, #1
 800516e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005176:	2b13      	cmp	r3, #19
 8005178:	ddd9      	ble.n	800512e <calWallConrol+0x1fe>
					}
				}
				g_skewer_displacement = 0;
 800517a:	4b22      	ldr	r3, [pc, #136]	; (8005204 <calWallConrol+0x2d4>)
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8005182:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <calWallConrol+0x2bc>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e064      	b.n	8005254 <calWallConrol+0x324>
 800518a:	bf00      	nop
 800518c:	f3af 8000 	nop.w
 8005190:	9999999a 	.word	0x9999999a
 8005194:	3fd99999 	.word	0x3fd99999
 8005198:	47ae147b 	.word	0x47ae147b
 800519c:	bf847ae1 	.word	0xbf847ae1
 80051a0:	bc6a7efa 	.word	0xbc6a7efa
 80051a4:	3f789374 	.word	0x3f789374
 80051a8:	20000808 	.word	0x20000808
 80051ac:	43340000 	.word	0x43340000
 80051b0:	43020000 	.word	0x43020000
 80051b4:	200004d8 	.word	0x200004d8
 80051b8:	44fa0000 	.word	0x44fa0000
 80051bc:	44480000 	.word	0x44480000
 80051c0:	c1a00000 	.word	0xc1a00000
 80051c4:	431d0000 	.word	0x431d0000
 80051c8:	42dc0000 	.word	0x42dc0000
 80051cc:	200002b8 	.word	0x200002b8
 80051d0:	44390000 	.word	0x44390000
 80051d4:	450fc000 	.word	0x450fc000
 80051d8:	44228000 	.word	0x44228000
 80051dc:	44e10000 	.word	0x44e10000
 80051e0:	20000590 	.word	0x20000590
 80051e4:	20000593 	.word	0x20000593
 80051e8:	20000595 	.word	0x20000595
 80051ec:	20000596 	.word	0x20000596
 80051f0:	20000597 	.word	0x20000597
 80051f4:	20000598 	.word	0x20000598
 80051f8:	44d2a000 	.word	0x44d2a000
 80051fc:	2000059c 	.word	0x2000059c
 8005200:	449a6000 	.word	0x449a6000
 8005204:	200005a0 	.word	0x200005a0
 8005208:	420c0000 	.word	0x420c0000
 800520c:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8005210:	4bbd      	ldr	r3, [pc, #756]	; (8005508 <calWallConrol+0x5d8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005218:	dd1c      	ble.n	8005254 <calWallConrol+0x324>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 800521a:	4bbc      	ldr	r3, [pc, #752]	; (800550c <calWallConrol+0x5dc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb f9a8 	bl	8000574 <__aeabi_i2d>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4614      	mov	r4, r2
 800522a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800522e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005232:	f7fb f9b1 	bl	8000598 <__aeabi_f2d>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	f7fb fc75 	bl	8000b2c <__aeabi_dcmplt>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <calWallConrol+0x324>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005248:	4bb1      	ldr	r3, [pc, #708]	; (8005510 <calWallConrol+0x5e0>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	b2da      	uxtb	r2, r3
 8005250:	4baf      	ldr	r3, [pc, #700]	; (8005510 <calWallConrol+0x5e0>)
 8005252:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8005254:	4bae      	ldr	r3, [pc, #696]	; (8005510 <calWallConrol+0x5e0>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05b      	beq.n	800531c <calWallConrol+0x3ec>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8005264:	4ba8      	ldr	r3, [pc, #672]	; (8005508 <calWallConrol+0x5d8>)
 8005266:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800526a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800526e:	db17      	blt.n	80052a0 <calWallConrol+0x370>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005270:	4ba6      	ldr	r3, [pc, #664]	; (800550c <calWallConrol+0x5dc>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f97d 	bl	8000574 <__aeabi_i2d>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	613a      	str	r2, [r7, #16]
 8005280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005284:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8005286:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800528a:	f7fb f985 	bl	8000598 <__aeabi_f2d>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005292:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005296:	f7fb fc67 	bl	8000b68 <__aeabi_dcmpgt>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d039      	beq.n	8005314 <calWallConrol+0x3e4>
				g_WallControlStatus = g_WallControlStatus - 2;
 80052a0:	4b9b      	ldr	r3, [pc, #620]	; (8005510 <calWallConrol+0x5e0>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	3b02      	subs	r3, #2
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	4b99      	ldr	r3, [pc, #612]	; (8005510 <calWallConrol+0x5e0>)
 80052aa:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 80052ac:	4b99      	ldr	r3, [pc, #612]	; (8005514 <calWallConrol+0x5e4>)
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052ba:	e023      	b.n	8005304 <calWallConrol+0x3d4>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 80052bc:	4a92      	ldr	r2, [pc, #584]	; (8005508 <calWallConrol+0x5d8>)
 80052be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c2:	3350      	adds	r3, #80	; 0x50
 80052c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052d0:	4b90      	ldr	r3, [pc, #576]	; (8005514 <calWallConrol+0x5e4>)
 80052d2:	edd3 7a00 	vldr	s15, [r3]
 80052d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	dd0c      	ble.n	80052fa <calWallConrol+0x3ca>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 80052e0:	4a89      	ldr	r2, [pc, #548]	; (8005508 <calWallConrol+0x5d8>)
 80052e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e6:	3350      	adds	r3, #80	; 0x50
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f4:	4b87      	ldr	r3, [pc, #540]	; (8005514 <calWallConrol+0x5e4>)
 80052f6:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80052fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052fe:	3301      	adds	r3, #1
 8005300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005308:	2b13      	cmp	r3, #19
 800530a:	ddd7      	ble.n	80052bc <calWallConrol+0x38c>
					}
				}
				g_skewer_displacement = 0;
 800530c:	4b82      	ldr	r3, [pc, #520]	; (8005518 <calWallConrol+0x5e8>)
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8005314:	4b81      	ldr	r3, [pc, #516]	; (800551c <calWallConrol+0x5ec>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e023      	b.n	8005364 <calWallConrol+0x434>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 800531c:	4b7a      	ldr	r3, [pc, #488]	; (8005508 <calWallConrol+0x5d8>)
 800531e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005322:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005326:	dd1d      	ble.n	8005364 <calWallConrol+0x434>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005328:	4b78      	ldr	r3, [pc, #480]	; (800550c <calWallConrol+0x5dc>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4618      	mov	r0, r3
 800532e:	f7fb f921 	bl	8000574 <__aeabi_i2d>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	60ba      	str	r2, [r7, #8]
 8005338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533c:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 800533e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005342:	f7fb f929 	bl	8000598 <__aeabi_f2d>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 800534a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800534e:	f7fb fbed 	bl	8000b2c <__aeabi_dcmplt>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <calWallConrol+0x434>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8005358:	4b6d      	ldr	r3, [pc, #436]	; (8005510 <calWallConrol+0x5e0>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	3302      	adds	r3, #2
 800535e:	b2da      	uxtb	r2, r3
 8005360:	4b6b      	ldr	r3, [pc, #428]	; (8005510 <calWallConrol+0x5e0>)
 8005362:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8005364:	4b6a      	ldr	r3, [pc, #424]	; (8005510 <calWallConrol+0x5e0>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b03      	cmp	r3, #3
 800536a:	f201 80f0 	bhi.w	800654e <calWallConrol+0x161e>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <calWallConrol+0x444>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005385 	.word	0x08005385
 8005378:	0800548b 	.word	0x0800548b
 800537c:	08005539 	.word	0x08005539
 8005380:	080055a3 	.word	0x080055a3
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8005384:	4b64      	ldr	r3, [pc, #400]	; (8005518 <calWallConrol+0x5e8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb f905 	bl	8000598 <__aeabi_f2d>
 800538e:	4604      	mov	r4, r0
 8005390:	460d      	mov	r5, r1
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <calWallConrol+0x5f0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb f8fe 	bl	8000598 <__aeabi_f2d>
 800539c:	a356      	add	r3, pc, #344	; (adr r3, 80054f8 <calWallConrol+0x5c8>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f7fb f951 	bl	8000648 <__aeabi_dmul>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fa ff95 	bl	80002dc <__adddf3>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	f7fb fc1d 	bl	8000bf8 <__aeabi_d2f>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a55      	ldr	r2, [pc, #340]	; (8005518 <calWallConrol+0x5e8>)
 80053c2:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 80053c4:	4b54      	ldr	r3, [pc, #336]	; (8005518 <calWallConrol+0x5e8>)
 80053c6:	edd3 7a00 	vldr	s15, [r3]
 80053ca:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005524 <calWallConrol+0x5f4>
 80053ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d6:	d52e      	bpl.n	8005436 <calWallConrol+0x506>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 80053d8:	4b53      	ldr	r3, [pc, #332]	; (8005528 <calWallConrol+0x5f8>)
 80053da:	edd3 7a00 	vldr	s15, [r3]
 80053de:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800552c <calWallConrol+0x5fc>
 80053e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053e6:	eef1 6a67 	vneg.f32	s13, s15
 80053ea:	4b4f      	ldr	r3, [pc, #316]	; (8005528 <calWallConrol+0x5f8>)
 80053ec:	edd3 7a00 	vldr	s15, [r3]
 80053f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 80053f4:	4b47      	ldr	r3, [pc, #284]	; (8005514 <calWallConrol+0x5e4>)
 80053f6:	edd3 7a00 	vldr	s15, [r3]
 80053fa:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005534 <calWallConrol+0x604>
 80053fe:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8005402:	4b44      	ldr	r3, [pc, #272]	; (8005514 <calWallConrol+0x5e4>)
 8005404:	edd3 6a00 	vldr	s13, [r3]
 8005408:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800540c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005410:	ee17 0a90 	vmov	r0, s15
 8005414:	f7fb f8c0 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005418:	a339      	add	r3, pc, #228	; (adr r3, 8005500 <calWallConrol+0x5d0>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fb f913 	bl	8000648 <__aeabi_dmul>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4610      	mov	r0, r2
 8005428:	4619      	mov	r1, r3
 800542a:	f7fb fbe5 	bl	8000bf8 <__aeabi_d2f>
 800542e:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005430:	4a3f      	ldr	r2, [pc, #252]	; (8005530 <calWallConrol+0x600>)
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	e003      	b.n	800543e <calWallConrol+0x50e>
			} else {
				wall_normal.error = 0;
 8005436:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <calWallConrol+0x600>)
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800543e:	4b3c      	ldr	r3, [pc, #240]	; (8005530 <calWallConrol+0x600>)
 8005440:	ed93 7a00 	vldr	s14, [r3]
 8005444:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <calWallConrol+0x600>)
 8005446:	edd3 7a01 	vldr	s15, [r3, #4]
 800544a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800544e:	4b38      	ldr	r3, [pc, #224]	; (8005530 <calWallConrol+0x600>)
 8005450:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005454:	4b36      	ldr	r3, [pc, #216]	; (8005530 <calWallConrol+0x600>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a35      	ldr	r2, [pc, #212]	; (8005530 <calWallConrol+0x600>)
 800545a:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800545c:	4b34      	ldr	r3, [pc, #208]	; (8005530 <calWallConrol+0x600>)
 800545e:	ed93 7a00 	vldr	s14, [r3]
 8005462:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005466:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800546a:	4b31      	ldr	r3, [pc, #196]	; (8005530 <calWallConrol+0x600>)
 800546c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005470:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005474:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005480:	2000      	movs	r0, #0
 8005482:	f001 fef3 	bl	800726c <pl_yellow_LED_count>
			break;
 8005486:	f001 b862 	b.w	800654e <calWallConrol+0x161e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 800548a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800548e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800552c <calWallConrol+0x5fc>
 8005492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005496:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800549a:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 800549e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80054a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <calWallConrol+0x600>)
 80054a8:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80054ac:	4b20      	ldr	r3, [pc, #128]	; (8005530 <calWallConrol+0x600>)
 80054ae:	ed93 7a00 	vldr	s14, [r3]
 80054b2:	4b1f      	ldr	r3, [pc, #124]	; (8005530 <calWallConrol+0x600>)
 80054b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80054b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054bc:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <calWallConrol+0x600>)
 80054be:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <calWallConrol+0x600>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <calWallConrol+0x600>)
 80054c8:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80054ca:	4b19      	ldr	r3, [pc, #100]	; (8005530 <calWallConrol+0x600>)
 80054cc:	ed93 7a00 	vldr	s14, [r3]
 80054d0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054d4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80054d8:	4b15      	ldr	r3, [pc, #84]	; (8005530 <calWallConrol+0x600>)
 80054da:	edd3 6a02 	vldr	s13, [r3, #8]
 80054de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80054e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ea:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(240);
 80054ee:	20f0      	movs	r0, #240	; 0xf0
 80054f0:	f001 febc 	bl	800726c <pl_yellow_LED_count>
			break;
 80054f4:	f001 b82b 	b.w	800654e <calWallConrol+0x161e>
 80054f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80054fc:	3f50624d 	.word	0x3f50624d
 8005500:	66666666 	.word	0x66666666
 8005504:	3fe66666 	.word	0x3fe66666
 8005508:	200002b8 	.word	0x200002b8
 800550c:	20000448 	.word	0x20000448
 8005510:	20000593 	.word	0x20000593
 8005514:	2000059c 	.word	0x2000059c
 8005518:	200005a0 	.word	0x200005a0
 800551c:	20000597 	.word	0x20000597
 8005520:	200004d8 	.word	0x200004d8
 8005524:	420c0000 	.word	0x420c0000
 8005528:	20000598 	.word	0x20000598
 800552c:	44d2a000 	.word	0x44d2a000
 8005530:	2000056c 	.word	0x2000056c
 8005534:	449a6000 	.word	0x449a6000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005538:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800553c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005534 <calWallConrol+0x604>
 8005540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005544:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005548:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800554c:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005550:	4ba9      	ldr	r3, [pc, #676]	; (80057f8 <calWallConrol+0x8c8>)
 8005552:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005556:	4ba8      	ldr	r3, [pc, #672]	; (80057f8 <calWallConrol+0x8c8>)
 8005558:	ed93 7a00 	vldr	s14, [r3]
 800555c:	4ba6      	ldr	r3, [pc, #664]	; (80057f8 <calWallConrol+0x8c8>)
 800555e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005566:	4ba4      	ldr	r3, [pc, #656]	; (80057f8 <calWallConrol+0x8c8>)
 8005568:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800556c:	4ba2      	ldr	r3, [pc, #648]	; (80057f8 <calWallConrol+0x8c8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4aa1      	ldr	r2, [pc, #644]	; (80057f8 <calWallConrol+0x8c8>)
 8005572:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005574:	4ba0      	ldr	r3, [pc, #640]	; (80057f8 <calWallConrol+0x8c8>)
 8005576:	ed93 7a00 	vldr	s14, [r3]
 800557a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800557e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005582:	4b9d      	ldr	r3, [pc, #628]	; (80057f8 <calWallConrol+0x8c8>)
 8005584:	edd3 6a02 	vldr	s13, [r3, #8]
 8005588:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800558c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005594:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(15);
 8005598:	200f      	movs	r0, #15
 800559a:	f001 fe67 	bl	800726c <pl_yellow_LED_count>
			break;
 800559e:	f000 bfd6 	b.w	800654e <calWallConrol+0x161e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 80055a2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80055a6:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80057fc <calWallConrol+0x8cc>
 80055aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055ae:	eef1 6a67 	vneg.f32	s13, s15
 80055b2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 80055ba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80055be:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005800 <calWallConrol+0x8d0>
 80055c2:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 80055c6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80055ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 80055ce:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 80055d2:	4b89      	ldr	r3, [pc, #548]	; (80057f8 <calWallConrol+0x8c8>)
 80055d4:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80055d8:	4b87      	ldr	r3, [pc, #540]	; (80057f8 <calWallConrol+0x8c8>)
 80055da:	ed93 7a00 	vldr	s14, [r3]
 80055de:	4b86      	ldr	r3, [pc, #536]	; (80057f8 <calWallConrol+0x8c8>)
 80055e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80055e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e8:	4b83      	ldr	r3, [pc, #524]	; (80057f8 <calWallConrol+0x8c8>)
 80055ea:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80055ee:	4b82      	ldr	r3, [pc, #520]	; (80057f8 <calWallConrol+0x8c8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a81      	ldr	r2, [pc, #516]	; (80057f8 <calWallConrol+0x8c8>)
 80055f4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80055f6:	4b80      	ldr	r3, [pc, #512]	; (80057f8 <calWallConrol+0x8c8>)
 80055f8:	ed93 7a00 	vldr	s14, [r3]
 80055fc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005600:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005604:	4b7c      	ldr	r3, [pc, #496]	; (80057f8 <calWallConrol+0x8c8>)
 8005606:	edd3 6a02 	vldr	s13, [r3, #8]
 800560a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800560e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005616:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(255);
 800561a:	20ff      	movs	r0, #255	; 0xff
 800561c:	f001 fe26 	bl	800726c <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005620:	4b78      	ldr	r3, [pc, #480]	; (8005804 <calWallConrol+0x8d4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7fa ffa5 	bl	8000574 <__aeabi_i2d>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	603a      	str	r2, [r7, #0]
 8005630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	4b73      	ldr	r3, [pc, #460]	; (8005808 <calWallConrol+0x8d8>)
 800563c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005640:	f7fb fa74 	bl	8000b2c <__aeabi_dcmplt>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01a      	beq.n	8005680 <calWallConrol+0x750>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 800564a:	4b6e      	ldr	r3, [pc, #440]	; (8005804 <calWallConrol+0x8d4>)
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fa ff90 	bl	8000574 <__aeabi_i2d>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4692      	mov	sl, r2
 800565a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	4b69      	ldr	r3, [pc, #420]	; (8005808 <calWallConrol+0x8d8>)
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	f7fb fa60 	bl	8000b2c <__aeabi_dcmplt>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <calWallConrol+0x750>
				StabilityCount_reset++;
 8005672:	4b66      	ldr	r3, [pc, #408]	; (800580c <calWallConrol+0x8dc>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4b64      	ldr	r3, [pc, #400]	; (800580c <calWallConrol+0x8dc>)
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e002      	b.n	8005686 <calWallConrol+0x756>
			} else {
				StabilityCount_reset = 0;
 8005680:	4b62      	ldr	r3, [pc, #392]	; (800580c <calWallConrol+0x8dc>)
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8005686:	4b61      	ldr	r3, [pc, #388]	; (800580c <calWallConrol+0x8dc>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b18      	cmp	r3, #24
 800568c:	f240 875e 	bls.w	800654c <calWallConrol+0x161c>
				Gyro.sigma_error = 0;
 8005690:	4b5f      	ldr	r3, [pc, #380]	; (8005810 <calWallConrol+0x8e0>)
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005698:	4b5c      	ldr	r3, [pc, #368]	; (800580c <calWallConrol+0x8dc>)
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800569e:	f000 bf55 	b.w	800654c <calWallConrol+0x161c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 80056a2:	4b5c      	ldr	r3, [pc, #368]	; (8005814 <calWallConrol+0x8e4>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	f000 8751 	beq.w	800654e <calWallConrol+0x161e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 80056ac:	4b59      	ldr	r3, [pc, #356]	; (8005814 <calWallConrol+0x8e4>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	f040 874c 	bne.w	800654e <calWallConrol+0x161e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 80056b6:	4b58      	ldr	r3, [pc, #352]	; (8005818 <calWallConrol+0x8e8>)
 80056b8:	edd3 7a00 	vldr	s15, [r3]
 80056bc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800581c <calWallConrol+0x8ec>
 80056c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c8:	dd05      	ble.n	80056d6 <calWallConrol+0x7a6>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 80056ca:	4b55      	ldr	r3, [pc, #340]	; (8005820 <calWallConrol+0x8f0>)
 80056cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 80056d0:	4b54      	ldr	r3, [pc, #336]	; (8005824 <calWallConrol+0x8f4>)
 80056d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056d4:	e024      	b.n	8005720 <calWallConrol+0x7f0>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80056d6:	4b50      	ldr	r3, [pc, #320]	; (8005818 <calWallConrol+0x8e8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fa ff5c 	bl	8000598 <__aeabi_f2d>
 80056e0:	a341      	add	r3, pc, #260	; (adr r3, 80057e8 <calWallConrol+0x8b8>)
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f7fa ffaf 	bl	8000648 <__aeabi_dmul>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7fb fa81 	bl	8000bf8 <__aeabi_d2f>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80056fc:	4b46      	ldr	r3, [pc, #280]	; (8005818 <calWallConrol+0x8e8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7fa ff49 	bl	8000598 <__aeabi_f2d>
 8005706:	a33a      	add	r3, pc, #232	; (adr r3, 80057f0 <calWallConrol+0x8c0>)
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f7fa ff9c 	bl	8000648 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4610      	mov	r0, r2
 8005716:	4619      	mov	r1, r3
 8005718:	f7fb fa6e 	bl	8000bf8 <__aeabi_d2f>
 800571c:	4603      	mov	r3, r0
 800571e:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005720:	4b41      	ldr	r3, [pc, #260]	; (8005828 <calWallConrol+0x8f8>)
 8005722:	edd3 7a00 	vldr	s15, [r3]
 8005726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800572a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800572e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005732:	dd12      	ble.n	800575a <calWallConrol+0x82a>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005734:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <calWallConrol+0x8f8>)
 8005736:	edd3 7a00 	vldr	s15, [r3]
 800573a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800573e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005746:	d808      	bhi.n	800575a <calWallConrol+0x82a>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005748:	4b38      	ldr	r3, [pc, #224]	; (800582c <calWallConrol+0x8fc>)
 800574a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 800574c:	4b38      	ldr	r3, [pc, #224]	; (8005830 <calWallConrol+0x900>)
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005750:	4b38      	ldr	r3, [pc, #224]	; (8005834 <calWallConrol+0x904>)
 8005752:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005754:	4b38      	ldr	r3, [pc, #224]	; (8005838 <calWallConrol+0x908>)
 8005756:	657b      	str	r3, [r7, #84]	; 0x54
 8005758:	e0a5      	b.n	80058a6 <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 800575a:	4b33      	ldr	r3, [pc, #204]	; (8005828 <calWallConrol+0x8f8>)
 800575c:	edd3 7a00 	vldr	s15, [r3]
 8005760:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800583c <calWallConrol+0x90c>
 8005764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576c:	dd12      	ble.n	8005794 <calWallConrol+0x864>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 800576e:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <calWallConrol+0x8f8>)
 8005770:	edd3 7a00 	vldr	s15, [r3]
 8005774:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005840 <calWallConrol+0x910>
 8005778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005780:	d808      	bhi.n	8005794 <calWallConrol+0x864>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005782:	4b30      	ldr	r3, [pc, #192]	; (8005844 <calWallConrol+0x914>)
 8005784:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005786:	4b30      	ldr	r3, [pc, #192]	; (8005848 <calWallConrol+0x918>)
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800578a:	4b30      	ldr	r3, [pc, #192]	; (800584c <calWallConrol+0x91c>)
 800578c:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 800578e:	4b30      	ldr	r3, [pc, #192]	; (8005850 <calWallConrol+0x920>)
 8005790:	657b      	str	r3, [r7, #84]	; 0x54
 8005792:	e088      	b.n	80058a6 <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005794:	4b24      	ldr	r3, [pc, #144]	; (8005828 <calWallConrol+0x8f8>)
 8005796:	edd3 7a00 	vldr	s15, [r3]
 800579a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005854 <calWallConrol+0x924>
 800579e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a6:	dd12      	ble.n	80057ce <calWallConrol+0x89e>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <calWallConrol+0x8f8>)
 80057aa:	edd3 7a00 	vldr	s15, [r3]
 80057ae:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005858 <calWallConrol+0x928>
 80057b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ba:	d808      	bhi.n	80057ce <calWallConrol+0x89e>
			coefficientR[0] = COEFFICIENT_R2_0;
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <calWallConrol+0x92c>)
 80057be:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 80057c0:	4b27      	ldr	r3, [pc, #156]	; (8005860 <calWallConrol+0x930>)
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <calWallConrol+0x934>)
 80057c6:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <calWallConrol+0x938>)
 80057ca:	657b      	str	r3, [r7, #84]	; 0x54
 80057cc:	e06b      	b.n	80058a6 <calWallConrol+0x976>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <calWallConrol+0x93c>)
 80057d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80057d4:	2b5a      	cmp	r3, #90	; 0x5a
 80057d6:	dd4d      	ble.n	8005874 <calWallConrol+0x944>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <calWallConrol+0x940>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b23      	ldr	r3, [pc, #140]	; (8005870 <calWallConrol+0x940>)
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e04c      	b.n	8005882 <calWallConrol+0x952>
 80057e8:	66666666 	.word	0x66666666
 80057ec:	3fee6666 	.word	0x3fee6666
 80057f0:	47ae147b 	.word	0x47ae147b
 80057f4:	bfb47ae1 	.word	0xbfb47ae1
 80057f8:	2000056c 	.word	0x2000056c
 80057fc:	44d2a000 	.word	0x44d2a000
 8005800:	449a6000 	.word	0x449a6000
 8005804:	20000448 	.word	0x20000448
 8005808:	403e0000 	.word	0x403e0000
 800580c:	20000595 	.word	0x20000595
 8005810:	20000544 	.word	0x20000544
 8005814:	20000590 	.word	0x20000590
 8005818:	200004d8 	.word	0x200004d8
 800581c:	44fa0000 	.word	0x44fa0000
 8005820:	44ed8000 	.word	0x44ed8000
 8005824:	c3200000 	.word	0xc3200000
 8005828:	200005dc 	.word	0x200005dc
 800582c:	4414c13c 	.word	0x4414c13c
 8005830:	421e1fdd 	.word	0x421e1fdd
 8005834:	beb05045 	.word	0xbeb05045
 8005838:	3e051eb8 	.word	0x3e051eb8
 800583c:	420c0000 	.word	0x420c0000
 8005840:	42700000 	.word	0x42700000
 8005844:	45b20ce1 	.word	0x45b20ce1
 8005848:	c393746d 	.word	0xc393746d
 800584c:	40afa404 	.word	0x40afa404
 8005850:	bd0f0328 	.word	0xbd0f0328
 8005854:	42c80000 	.word	0x42c80000
 8005858:	42f00000 	.word	0x42f00000
 800585c:	46e1460a 	.word	0x46e1460a
 8005860:	c43ee954 	.word	0xc43ee954
 8005864:	40d673d9 	.word	0x40d673d9
 8005868:	bc9d4952 	.word	0xbc9d4952
 800586c:	200002b8 	.word	0x200002b8
 8005870:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005874:	4b79      	ldr	r3, [pc, #484]	; (8005a5c <calWallConrol+0xb2c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f023 0302 	bic.w	r3, r3, #2
 800587c:	b2da      	uxtb	r2, r3
 800587e:	4b77      	ldr	r3, [pc, #476]	; (8005a5c <calWallConrol+0xb2c>)
 8005880:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005882:	4b77      	ldr	r3, [pc, #476]	; (8005a60 <calWallConrol+0xb30>)
 8005884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005890:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 80058a6:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <calWallConrol+0xb34>)
 80058a8:	edd3 7a00 	vldr	s15, [r3]
 80058ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b8:	dd12      	ble.n	80058e0 <calWallConrol+0x9b0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80058ba:	4b6a      	ldr	r3, [pc, #424]	; (8005a64 <calWallConrol+0xb34>)
 80058bc:	edd3 7a00 	vldr	s15, [r3]
 80058c0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80058c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058cc:	d808      	bhi.n	80058e0 <calWallConrol+0x9b0>
			coefficientL[0] = COEFFICIENT_L0_0;
 80058ce:	4b66      	ldr	r3, [pc, #408]	; (8005a68 <calWallConrol+0xb38>)
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80058d2:	4b66      	ldr	r3, [pc, #408]	; (8005a6c <calWallConrol+0xb3c>)
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80058d6:	4b66      	ldr	r3, [pc, #408]	; (8005a70 <calWallConrol+0xb40>)
 80058d8:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80058da:	4b66      	ldr	r3, [pc, #408]	; (8005a74 <calWallConrol+0xb44>)
 80058dc:	647b      	str	r3, [r7, #68]	; 0x44
 80058de:	e05d      	b.n	800599c <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80058e0:	4b60      	ldr	r3, [pc, #384]	; (8005a64 <calWallConrol+0xb34>)
 80058e2:	edd3 7a00 	vldr	s15, [r3]
 80058e6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005a78 <calWallConrol+0xb48>
 80058ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	dd12      	ble.n	800591a <calWallConrol+0x9ea>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80058f4:	4b5b      	ldr	r3, [pc, #364]	; (8005a64 <calWallConrol+0xb34>)
 80058f6:	edd3 7a00 	vldr	s15, [r3]
 80058fa:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005a7c <calWallConrol+0xb4c>
 80058fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005906:	d808      	bhi.n	800591a <calWallConrol+0x9ea>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005908:	4b5d      	ldr	r3, [pc, #372]	; (8005a80 <calWallConrol+0xb50>)
 800590a:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 800590c:	4b5d      	ldr	r3, [pc, #372]	; (8005a84 <calWallConrol+0xb54>)
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005910:	4b5d      	ldr	r3, [pc, #372]	; (8005a88 <calWallConrol+0xb58>)
 8005912:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8005914:	4b5d      	ldr	r3, [pc, #372]	; (8005a8c <calWallConrol+0xb5c>)
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
 8005918:	e040      	b.n	800599c <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800591a:	4b52      	ldr	r3, [pc, #328]	; (8005a64 <calWallConrol+0xb34>)
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005a90 <calWallConrol+0xb60>
 8005924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592c:	dd12      	ble.n	8005954 <calWallConrol+0xa24>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 800592e:	4b4d      	ldr	r3, [pc, #308]	; (8005a64 <calWallConrol+0xb34>)
 8005930:	edd3 7a00 	vldr	s15, [r3]
 8005934:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005a94 <calWallConrol+0xb64>
 8005938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	d808      	bhi.n	8005954 <calWallConrol+0xa24>
			coefficientL[0] = COEFFICIENT_L2_0;
 8005942:	4b55      	ldr	r3, [pc, #340]	; (8005a98 <calWallConrol+0xb68>)
 8005944:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8005946:	4b55      	ldr	r3, [pc, #340]	; (8005a9c <calWallConrol+0xb6c>)
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800594a:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <calWallConrol+0xb70>)
 800594c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800594e:	4b55      	ldr	r3, [pc, #340]	; (8005aa4 <calWallConrol+0xb74>)
 8005950:	647b      	str	r3, [r7, #68]	; 0x44
 8005952:	e023      	b.n	800599c <calWallConrol+0xa6c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8005954:	4b42      	ldr	r3, [pc, #264]	; (8005a60 <calWallConrol+0xb30>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b5a      	cmp	r3, #90	; 0x5a
 800595a:	dd07      	ble.n	800596c <calWallConrol+0xa3c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800595c:	4b3f      	ldr	r3, [pc, #252]	; (8005a5c <calWallConrol+0xb2c>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	b2da      	uxtb	r2, r3
 8005966:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <calWallConrol+0xb2c>)
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e006      	b.n	800597a <calWallConrol+0xa4a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800596c:	4b3b      	ldr	r3, [pc, #236]	; (8005a5c <calWallConrol+0xb2c>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <calWallConrol+0xb2c>)
 8005978:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800597a:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <calWallConrol+0xb30>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005986:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800599c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 80059a0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80059a4:	4b40      	ldr	r3, [pc, #256]	; (8005aa8 <calWallConrol+0xb78>)
 80059a6:	edd3 7a00 	vldr	s15, [r3]
 80059aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ae:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80059b2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80059b6:	4b3c      	ldr	r3, [pc, #240]	; (8005aa8 <calWallConrol+0xb78>)
 80059b8:	edd3 7a00 	vldr	s15, [r3]
 80059bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80059c0:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <calWallConrol+0xb78>)
 80059c2:	edd3 7a00 	vldr	s15, [r3]
 80059c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80059ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80059ce:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80059d2:	4b35      	ldr	r3, [pc, #212]	; (8005aa8 <calWallConrol+0xb78>)
 80059d4:	edd3 7a00 	vldr	s15, [r3]
 80059d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80059dc:	4b32      	ldr	r3, [pc, #200]	; (8005aa8 <calWallConrol+0xb78>)
 80059de:	edd3 7a00 	vldr	s15, [r3]
 80059e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80059e6:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <calWallConrol+0xb78>)
 80059e8:	edd3 7a00 	vldr	s15, [r3]
 80059ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80059f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80059f8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80059fc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005a00:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <calWallConrol+0xb34>)
 8005a02:	edd3 7a00 	vldr	s15, [r3]
 8005a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005a0e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005a12:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <calWallConrol+0xb34>)
 8005a14:	edd3 7a00 	vldr	s15, [r3]
 8005a18:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005a1c:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <calWallConrol+0xb34>)
 8005a1e:	edd3 7a00 	vldr	s15, [r3]
 8005a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005a26:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 8005a2a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <calWallConrol+0xb34>)
 8005a30:	edd3 7a00 	vldr	s15, [r3]
 8005a34:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <calWallConrol+0xb34>)
 8005a3a:	edd3 7a00 	vldr	s15, [r3]
 8005a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <calWallConrol+0xb34>)
 8005a44:	edd3 7a00 	vldr	s15, [r3]
 8005a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 8005a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a50:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8005a54:	230b      	movs	r3, #11
 8005a56:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a58:	e041      	b.n	8005ade <calWallConrol+0xbae>
 8005a5a:	bf00      	nop
 8005a5c:	20000593 	.word	0x20000593
 8005a60:	200002b8 	.word	0x200002b8
 8005a64:	200005e0 	.word	0x200005e0
 8005a68:	4423732b 	.word	0x4423732b
 8005a6c:	421079e6 	.word	0x421079e6
 8005a70:	bdf88e7f 	.word	0xbdf88e7f
 8005a74:	3e11c34f 	.word	0x3e11c34f
 8005a78:	420c0000 	.word	0x420c0000
 8005a7c:	42700000 	.word	0x42700000
 8005a80:	45e16e07 	.word	0x45e16e07
 8005a84:	c39f206f 	.word	0xc39f206f
 8005a88:	40a20d2f 	.word	0x40a20d2f
 8005a8c:	bce5a3f5 	.word	0xbce5a3f5
 8005a90:	42c80000 	.word	0x42c80000
 8005a94:	42f00000 	.word	0x42f00000
 8005a98:	459f8cbb 	.word	0x459f8cbb
 8005a9c:	c2f1ade0 	.word	0xc2f1ade0
 8005aa0:	3f6ae698 	.word	0x3f6ae698
 8005aa4:	bafba882 	.word	0xbafba882
 8005aa8:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	4a9c      	ldr	r2, [pc, #624]	; (8005d24 <calWallConrol+0xdf4>)
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	499a      	ldr	r1, [pc, #616]	; (8005d24 <calWallConrol+0xdf4>)
 8005aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8005ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4a98      	ldr	r2, [pc, #608]	; (8005d28 <calWallConrol+0xdf8>)
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4996      	ldr	r1, [pc, #600]	; (8005d28 <calWallConrol+0xdf8>)
 8005ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ada:	3b01      	subs	r3, #1
 8005adc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dce3      	bgt.n	8005aac <calWallConrol+0xb7c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 8005ae4:	4a8f      	ldr	r2, [pc, #572]	; (8005d24 <calWallConrol+0xdf4>)
 8005ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ae8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005aea:	4a8f      	ldr	r2, [pc, #572]	; (8005d28 <calWallConrol+0xdf8>)
 8005aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aee:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005af0:	4b8c      	ldr	r3, [pc, #560]	; (8005d24 <calWallConrol+0xdf4>)
 8005af2:	ed93 7a00 	vldr	s14, [r3]
 8005af6:	4b8b      	ldr	r3, [pc, #556]	; (8005d24 <calWallConrol+0xdf4>)
 8005af8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b00:	4b8a      	ldr	r3, [pc, #552]	; (8005d2c <calWallConrol+0xdfc>)
 8005b02:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 8005b06:	4b88      	ldr	r3, [pc, #544]	; (8005d28 <calWallConrol+0xdf8>)
 8005b08:	ed93 7a00 	vldr	s14, [r3]
 8005b0c:	4b86      	ldr	r3, [pc, #536]	; (8005d28 <calWallConrol+0xdf8>)
 8005b0e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b16:	4b86      	ldr	r3, [pc, #536]	; (8005d30 <calWallConrol+0xe00>)
 8005b18:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005b1c:	4b85      	ldr	r3, [pc, #532]	; (8005d34 <calWallConrol+0xe04>)
 8005b1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b22:	2b5a      	cmp	r3, #90	; 0x5a
 8005b24:	dd1a      	ble.n	8005b5c <calWallConrol+0xc2c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005b26:	4b84      	ldr	r3, [pc, #528]	; (8005d38 <calWallConrol+0xe08>)
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b32:	4b7e      	ldr	r3, [pc, #504]	; (8005d2c <calWallConrol+0xdfc>)
 8005b34:	edd3 7a00 	vldr	s15, [r3]
 8005b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b3c:	eef0 7ae7 	vabs.f32	s15, s15
 8005b40:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005d3c <calWallConrol+0xe0c>
 8005b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4c:	d506      	bpl.n	8005b5c <calWallConrol+0xc2c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005b4e:	4b7c      	ldr	r3, [pc, #496]	; (8005d40 <calWallConrol+0xe10>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f043 0302 	orr.w	r3, r3, #2
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	4b79      	ldr	r3, [pc, #484]	; (8005d40 <calWallConrol+0xe10>)
 8005b5a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005b5c:	4b75      	ldr	r3, [pc, #468]	; (8005d34 <calWallConrol+0xe04>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b5a      	cmp	r3, #90	; 0x5a
 8005b62:	dd1a      	ble.n	8005b9a <calWallConrol+0xc6a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005b64:	4b74      	ldr	r3, [pc, #464]	; (8005d38 <calWallConrol+0xe08>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b70:	4b6f      	ldr	r3, [pc, #444]	; (8005d30 <calWallConrol+0xe00>)
 8005b72:	edd3 7a00 	vldr	s15, [r3]
 8005b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b7a:	eef0 7ae7 	vabs.f32	s15, s15
 8005b7e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005d3c <calWallConrol+0xe0c>
 8005b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8a:	d506      	bpl.n	8005b9a <calWallConrol+0xc6a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005b8c:	4b6c      	ldr	r3, [pc, #432]	; (8005d40 <calWallConrol+0xe10>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <calWallConrol+0xe10>)
 8005b98:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005b9a:	4b66      	ldr	r3, [pc, #408]	; (8005d34 <calWallConrol+0xe04>)
 8005b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ba0:	2b59      	cmp	r3, #89	; 0x59
 8005ba2:	dd13      	ble.n	8005bcc <calWallConrol+0xc9c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005ba4:	4b64      	ldr	r3, [pc, #400]	; (8005d38 <calWallConrol+0xe08>)
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	ee07 3a90 	vmov	s15, r3
 8005bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bb0:	4b5e      	ldr	r3, [pc, #376]	; (8005d2c <calWallConrol+0xdfc>)
 8005bb2:	edd3 7a00 	vldr	s15, [r3]
 8005bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bba:	eef0 7ae7 	vabs.f32	s15, s15
 8005bbe:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005d3c <calWallConrol+0xe0c>
 8005bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bca:	dd06      	ble.n	8005bda <calWallConrol+0xcaa>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005bcc:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <calWallConrol+0xe10>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f023 0302 	bic.w	r3, r3, #2
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	4b5a      	ldr	r3, [pc, #360]	; (8005d40 <calWallConrol+0xe10>)
 8005bd8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005bda:	4b56      	ldr	r3, [pc, #344]	; (8005d34 <calWallConrol+0xe04>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b59      	cmp	r3, #89	; 0x59
 8005be0:	dd13      	ble.n	8005c0a <calWallConrol+0xcda>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005be2:	4b55      	ldr	r3, [pc, #340]	; (8005d38 <calWallConrol+0xe08>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bee:	4b50      	ldr	r3, [pc, #320]	; (8005d30 <calWallConrol+0xe00>)
 8005bf0:	edd3 7a00 	vldr	s15, [r3]
 8005bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf8:	eef0 7ae7 	vabs.f32	s15, s15
 8005bfc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005d3c <calWallConrol+0xe0c>
 8005c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	dd06      	ble.n	8005c18 <calWallConrol+0xce8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005c0a:	4b4d      	ldr	r3, [pc, #308]	; (8005d40 <calWallConrol+0xe10>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <calWallConrol+0xe10>)
 8005c16:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005c18:	4b49      	ldr	r3, [pc, #292]	; (8005d40 <calWallConrol+0xe10>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	f200 813d 	bhi.w	8005e9c <calWallConrol+0xf6c>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <calWallConrol+0xcf8>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c8d 	.word	0x08005c8d
 8005c30:	08005d51 	.word	0x08005d51
 8005c34:	08005de7 	.word	0x08005de7
		case 0:			//両壁なし
			PID_wall = 0;
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005c40:	2000      	movs	r0, #0
 8005c42:	f001 fa91 	bl	8007168 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005c46:	2000      	movs	r0, #0
 8005c48:	f001 fac4 	bl	80071d4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005c4c:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <calWallConrol+0xe04>)
 8005c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5a:	4b3a      	ldr	r3, [pc, #232]	; (8005d44 <calWallConrol+0xe14>)
 8005c5c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005c60:	4b34      	ldr	r3, [pc, #208]	; (8005d34 <calWallConrol+0xe04>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6c:	4b36      	ldr	r3, [pc, #216]	; (8005d48 <calWallConrol+0xe18>)
 8005c6e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005c72:	4b36      	ldr	r3, [pc, #216]	; (8005d4c <calWallConrol+0xe1c>)
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005c7a:	4b34      	ldr	r3, [pc, #208]	; (8005d4c <calWallConrol+0xe1c>)
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005c82:	4b32      	ldr	r3, [pc, #200]	; (8005d4c <calWallConrol+0xe1c>)
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
			break;
 8005c8a:	e107      	b.n	8005e9c <calWallConrol+0xf6c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f001 fa6b 	bl	8007168 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005c92:	2001      	movs	r0, #1
 8005c94:	f001 fa9e 	bl	80071d4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005c98:	4b26      	ldr	r3, [pc, #152]	; (8005d34 <calWallConrol+0xe04>)
 8005c9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca6:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <calWallConrol+0xe14>)
 8005ca8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005cac:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <calWallConrol+0xe18>)
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <calWallConrol+0xe04>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cbe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc6:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005cca:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <calWallConrol+0xe04>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005cda:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <calWallConrol+0xe1c>)
 8005cdc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <calWallConrol+0xe1c>)
 8005ce2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005ce6:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <calWallConrol+0xe1c>)
 8005ce8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005cec:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005cf0:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <calWallConrol+0xe1c>)
 8005cf2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005cf6:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <calWallConrol+0xe1c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <calWallConrol+0xe1c>)
 8005cfc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005cfe:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <calWallConrol+0xe1c>)
 8005d00:	ed93 7a00 	vldr	s14, [r3]
 8005d04:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d08:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <calWallConrol+0xe1c>)
 8005d0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d12:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d1e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005d22:	e0bb      	b.n	8005e9c <calWallConrol+0xf6c>
 8005d24:	20000608 	.word	0x20000608
 8005d28:	20000638 	.word	0x20000638
 8005d2c:	200006c8 	.word	0x200006c8
 8005d30:	200006cc 	.word	0x200006cc
 8005d34:	200002b8 	.word	0x200002b8
 8005d38:	20000448 	.word	0x20000448
 8005d3c:	42a00000 	.word	0x42a00000
 8005d40:	20000593 	.word	0x20000593
 8005d44:	200005ac 	.word	0x200005ac
 8005d48:	200005b0 	.word	0x200005b0
 8005d4c:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005d50:	2001      	movs	r0, #1
 8005d52:	f001 fa09 	bl	8007168 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005d56:	2000      	movs	r0, #0
 8005d58:	f001 fa3c 	bl	80071d4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005d5c:	4aa4      	ldr	r2, [pc, #656]	; (8005ff0 <calWallConrol+0x10c0>)
 8005d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d60:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005d62:	4ba4      	ldr	r3, [pc, #656]	; (8005ff4 <calWallConrol+0x10c4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d6e:	4ba2      	ldr	r3, [pc, #648]	; (8005ff8 <calWallConrol+0x10c8>)
 8005d70:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005d74:	4b9f      	ldr	r3, [pc, #636]	; (8005ff4 <calWallConrol+0x10c4>)
 8005d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d82:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005d86:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005d8a:	4b9a      	ldr	r3, [pc, #616]	; (8005ff4 <calWallConrol+0x10c4>)
 8005d8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005d9c:	4b97      	ldr	r3, [pc, #604]	; (8005ffc <calWallConrol+0x10cc>)
 8005d9e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005da2:	4b96      	ldr	r3, [pc, #600]	; (8005ffc <calWallConrol+0x10cc>)
 8005da4:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005da8:	4b94      	ldr	r3, [pc, #592]	; (8005ffc <calWallConrol+0x10cc>)
 8005daa:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dae:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005db2:	4b92      	ldr	r3, [pc, #584]	; (8005ffc <calWallConrol+0x10cc>)
 8005db4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005db8:	4b90      	ldr	r3, [pc, #576]	; (8005ffc <calWallConrol+0x10cc>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a8f      	ldr	r2, [pc, #572]	; (8005ffc <calWallConrol+0x10cc>)
 8005dbe:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005dc0:	4b8e      	ldr	r3, [pc, #568]	; (8005ffc <calWallConrol+0x10cc>)
 8005dc2:	ed93 7a00 	vldr	s14, [r3]
 8005dc6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005dca:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005dce:	4b8b      	ldr	r3, [pc, #556]	; (8005ffc <calWallConrol+0x10cc>)
 8005dd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dd4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005de4:	e05a      	b.n	8005e9c <calWallConrol+0xf6c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005de6:	2001      	movs	r0, #1
 8005de8:	f001 f9be 	bl	8007168 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005dec:	2001      	movs	r0, #1
 8005dee:	f001 f9f1 	bl	80071d4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005df2:	4a7f      	ldr	r2, [pc, #508]	; (8005ff0 <calWallConrol+0x10c0>)
 8005df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005df8:	4a7f      	ldr	r2, [pc, #508]	; (8005ff8 <calWallConrol+0x10c8>)
 8005dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfc:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005dfe:	4b7d      	ldr	r3, [pc, #500]	; (8005ff4 <calWallConrol+0x10c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e0a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e12:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005e16:	4b77      	ldr	r3, [pc, #476]	; (8005ff4 <calWallConrol+0x10c4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005e26:	4b73      	ldr	r3, [pc, #460]	; (8005ff4 <calWallConrol+0x10c4>)
 8005e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e34:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005e38:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005e3c:	4b6d      	ldr	r3, [pc, #436]	; (8005ff4 <calWallConrol+0x10c4>)
 8005e3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e4a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005e52:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <calWallConrol+0x10cc>)
 8005e54:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005e58:	4b68      	ldr	r3, [pc, #416]	; (8005ffc <calWallConrol+0x10cc>)
 8005e5a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005e5e:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <calWallConrol+0x10cc>)
 8005e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e64:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005e68:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <calWallConrol+0x10cc>)
 8005e6a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005e6e:	4b63      	ldr	r3, [pc, #396]	; (8005ffc <calWallConrol+0x10cc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a62      	ldr	r2, [pc, #392]	; (8005ffc <calWallConrol+0x10cc>)
 8005e74:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005e76:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <calWallConrol+0x10cc>)
 8005e78:	ed93 7a00 	vldr	s14, [r3]
 8005e7c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005e80:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005e84:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <calWallConrol+0x10cc>)
 8005e86:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e8a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e96:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005e9a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005e9c:	4b58      	ldr	r3, [pc, #352]	; (8006000 <calWallConrol+0x10d0>)
 8005e9e:	edd3 7a00 	vldr	s15, [r3]
 8005ea2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006004 <calWallConrol+0x10d4>
 8005ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eae:	dd04      	ble.n	8005eba <calWallConrol+0xf8a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005eb0:	4b55      	ldr	r3, [pc, #340]	; (8006008 <calWallConrol+0x10d8>)
 8005eb2:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005eb4:	4b55      	ldr	r3, [pc, #340]	; (800600c <calWallConrol+0x10dc>)
 8005eb6:	673b      	str	r3, [r7, #112]	; 0x70
 8005eb8:	e023      	b.n	8005f02 <calWallConrol+0xfd2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005eba:	4b51      	ldr	r3, [pc, #324]	; (8006000 <calWallConrol+0x10d0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fa fb6a 	bl	8000598 <__aeabi_f2d>
 8005ec4:	a346      	add	r3, pc, #280	; (adr r3, 8005fe0 <calWallConrol+0x10b0>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa fbbd 	bl	8000648 <__aeabi_dmul>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f7fa fe8f 	bl	8000bf8 <__aeabi_d2f>
 8005eda:	4603      	mov	r3, r0
 8005edc:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005ede:	4b48      	ldr	r3, [pc, #288]	; (8006000 <calWallConrol+0x10d0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fa fb58 	bl	8000598 <__aeabi_f2d>
 8005ee8:	a33f      	add	r3, pc, #252	; (adr r3, 8005fe8 <calWallConrol+0x10b8>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fbab 	bl	8000648 <__aeabi_dmul>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	f7fa fe7d 	bl	8000bf8 <__aeabi_d2f>
 8005efe:	4603      	mov	r3, r0
 8005f00:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005f02:	4b43      	ldr	r3, [pc, #268]	; (8006010 <calWallConrol+0x10e0>)
 8005f04:	edd3 7a00 	vldr	s15, [r3]
 8005f08:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	dd12      	ble.n	8005f3c <calWallConrol+0x100c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005f16:	4b3e      	ldr	r3, [pc, #248]	; (8006010 <calWallConrol+0x10e0>)
 8005f18:	edd3 7a00 	vldr	s15, [r3]
 8005f1c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8006014 <calWallConrol+0x10e4>
 8005f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f28:	d808      	bhi.n	8005f3c <calWallConrol+0x100c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005f2a:	4b3b      	ldr	r3, [pc, #236]	; (8006018 <calWallConrol+0x10e8>)
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005f2e:	4b3b      	ldr	r3, [pc, #236]	; (800601c <calWallConrol+0x10ec>)
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005f32:	4b3b      	ldr	r3, [pc, #236]	; (8006020 <calWallConrol+0x10f0>)
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005f36:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <calWallConrol+0x10f4>)
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3a:	e025      	b.n	8005f88 <calWallConrol+0x1058>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <calWallConrol+0x10c4>)
 8005f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f42:	2b82      	cmp	r3, #130	; 0x82
 8005f44:	dd07      	ble.n	8005f56 <calWallConrol+0x1026>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005f46:	4b38      	ldr	r3, [pc, #224]	; (8006028 <calWallConrol+0x10f8>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f043 0302 	orr.w	r3, r3, #2
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	4b35      	ldr	r3, [pc, #212]	; (8006028 <calWallConrol+0x10f8>)
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e006      	b.n	8005f64 <calWallConrol+0x1034>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005f56:	4b34      	ldr	r3, [pc, #208]	; (8006028 <calWallConrol+0x10f8>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f023 0302 	bic.w	r3, r3, #2
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	4b31      	ldr	r3, [pc, #196]	; (8006028 <calWallConrol+0x10f8>)
 8005f62:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005f64:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <calWallConrol+0x10c4>)
 8005f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f72:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005f88:	4b28      	ldr	r3, [pc, #160]	; (800602c <calWallConrol+0x10fc>)
 8005f8a:	edd3 7a00 	vldr	s15, [r3]
 8005f8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9a:	dd12      	ble.n	8005fc2 <calWallConrol+0x1092>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005f9c:	4b23      	ldr	r3, [pc, #140]	; (800602c <calWallConrol+0x10fc>)
 8005f9e:	edd3 7a00 	vldr	s15, [r3]
 8005fa2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006014 <calWallConrol+0x10e4>
 8005fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fae:	d808      	bhi.n	8005fc2 <calWallConrol+0x1092>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005fb0:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <calWallConrol+0x1100>)
 8005fb2:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005fb4:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <calWallConrol+0x1104>)
 8005fb6:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005fb8:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <calWallConrol+0x1108>)
 8005fba:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005fbc:	4b1f      	ldr	r3, [pc, #124]	; (800603c <calWallConrol+0x110c>)
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc0:	e056      	b.n	8006070 <calWallConrol+0x1140>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <calWallConrol+0x10c4>)
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	2b82      	cmp	r3, #130	; 0x82
 8005fc8:	dd3a      	ble.n	8006040 <calWallConrol+0x1110>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <calWallConrol+0x10f8>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	4b14      	ldr	r3, [pc, #80]	; (8006028 <calWallConrol+0x10f8>)
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e039      	b.n	800604e <calWallConrol+0x111e>
 8005fda:	bf00      	nop
 8005fdc:	f3af 8000 	nop.w
 8005fe0:	9999999a 	.word	0x9999999a
 8005fe4:	3fe99999 	.word	0x3fe99999
 8005fe8:	47ae147b 	.word	0x47ae147b
 8005fec:	bfb47ae1 	.word	0xbfb47ae1
 8005ff0:	200005ac 	.word	0x200005ac
 8005ff4:	200002b8 	.word	0x200002b8
 8005ff8:	200005b0 	.word	0x200005b0
 8005ffc:	20000578 	.word	0x20000578
 8006000:	200004d8 	.word	0x200004d8
 8006004:	44fa0000 	.word	0x44fa0000
 8006008:	44c80000 	.word	0x44c80000
 800600c:	c3200000 	.word	0xc3200000
 8006010:	200005dc 	.word	0x200005dc
 8006014:	42a00000 	.word	0x42a00000
 8006018:	438d4c33 	.word	0x438d4c33
 800601c:	bfa66ddb 	.word	0xbfa66ddb
 8006020:	3d2e0737 	.word	0x3d2e0737
 8006024:	39c521de 	.word	0x39c521de
 8006028:	20000594 	.word	0x20000594
 800602c:	200005e0 	.word	0x200005e0
 8006030:	43774cf8 	.word	0x43774cf8
 8006034:	3e27920b 	.word	0x3e27920b
 8006038:	bd0ad094 	.word	0xbd0ad094
 800603c:	3a5f1fa4 	.word	0x3a5f1fa4
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006040:	4bb5      	ldr	r3, [pc, #724]	; (8006318 <calWallConrol+0x13e8>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	4bb3      	ldr	r3, [pc, #716]	; (8006318 <calWallConrol+0x13e8>)
 800604c:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 800604e:	4bb3      	ldr	r3, [pc, #716]	; (800631c <calWallConrol+0x13ec>)
 8006050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800605a:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8006070:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8006074:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006078:	4ba9      	ldr	r3, [pc, #676]	; (8006320 <calWallConrol+0x13f0>)
 800607a:	edd3 7a00 	vldr	s15, [r3]
 800607e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006082:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8006086:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800608a:	4ba5      	ldr	r3, [pc, #660]	; (8006320 <calWallConrol+0x13f0>)
 800608c:	edd3 7a00 	vldr	s15, [r3]
 8006090:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006094:	4ba2      	ldr	r3, [pc, #648]	; (8006320 <calWallConrol+0x13f0>)
 8006096:	edd3 7a00 	vldr	s15, [r3]
 800609a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 800609e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 80060a2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80060a6:	4b9e      	ldr	r3, [pc, #632]	; (8006320 <calWallConrol+0x13f0>)
 80060a8:	edd3 7a00 	vldr	s15, [r3]
 80060ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80060b0:	4b9b      	ldr	r3, [pc, #620]	; (8006320 <calWallConrol+0x13f0>)
 80060b2:	edd3 7a00 	vldr	s15, [r3]
 80060b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80060ba:	4b99      	ldr	r3, [pc, #612]	; (8006320 <calWallConrol+0x13f0>)
 80060bc:	edd3 7a00 	vldr	s15, [r3]
 80060c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 80060c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 80060cc:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 80060d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060d4:	4b93      	ldr	r3, [pc, #588]	; (8006324 <calWallConrol+0x13f4>)
 80060d6:	edd3 7a00 	vldr	s15, [r3]
 80060da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060de:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80060e2:	edd7 6a08 	vldr	s13, [r7, #32]
 80060e6:	4b8f      	ldr	r3, [pc, #572]	; (8006324 <calWallConrol+0x13f4>)
 80060e8:	edd3 7a00 	vldr	s15, [r3]
 80060ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80060f0:	4b8c      	ldr	r3, [pc, #560]	; (8006324 <calWallConrol+0x13f4>)
 80060f2:	edd3 7a00 	vldr	s15, [r3]
 80060f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80060fa:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 80060fe:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006102:	4b88      	ldr	r3, [pc, #544]	; (8006324 <calWallConrol+0x13f4>)
 8006104:	edd3 7a00 	vldr	s15, [r3]
 8006108:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800610c:	4b85      	ldr	r3, [pc, #532]	; (8006324 <calWallConrol+0x13f4>)
 800610e:	edd3 7a00 	vldr	s15, [r3]
 8006112:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8006116:	4b83      	ldr	r3, [pc, #524]	; (8006324 <calWallConrol+0x13f4>)
 8006118:	edd3 7a00 	vldr	s15, [r3]
 800611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8006120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006124:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8006128:	230b      	movs	r3, #11
 800612a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800612c:	e018      	b.n	8006160 <calWallConrol+0x1230>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 800612e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006130:	3b01      	subs	r3, #1
 8006132:	4a7d      	ldr	r2, [pc, #500]	; (8006328 <calWallConrol+0x13f8>)
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	497b      	ldr	r1, [pc, #492]	; (8006328 <calWallConrol+0x13f8>)
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8006144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006146:	3b01      	subs	r3, #1
 8006148:	4a78      	ldr	r2, [pc, #480]	; (800632c <calWallConrol+0x13fc>)
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4976      	ldr	r1, [pc, #472]	; (800632c <calWallConrol+0x13fc>)
 8006152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	3b01      	subs	r3, #1
 800615e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006162:	2b00      	cmp	r3, #0
 8006164:	dce3      	bgt.n	800612e <calWallConrol+0x11fe>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8006166:	4a70      	ldr	r2, [pc, #448]	; (8006328 <calWallConrol+0x13f8>)
 8006168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800616a:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 800616c:	4a6f      	ldr	r2, [pc, #444]	; (800632c <calWallConrol+0x13fc>)
 800616e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006170:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8006172:	4b6d      	ldr	r3, [pc, #436]	; (8006328 <calWallConrol+0x13f8>)
 8006174:	ed93 7a00 	vldr	s14, [r3]
 8006178:	4b6b      	ldr	r3, [pc, #428]	; (8006328 <calWallConrol+0x13f8>)
 800617a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800617e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006182:	4b6b      	ldr	r3, [pc, #428]	; (8006330 <calWallConrol+0x1400>)
 8006184:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8006188:	4b68      	ldr	r3, [pc, #416]	; (800632c <calWallConrol+0x13fc>)
 800618a:	ed93 7a00 	vldr	s14, [r3]
 800618e:	4b67      	ldr	r3, [pc, #412]	; (800632c <calWallConrol+0x13fc>)
 8006190:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006198:	4b66      	ldr	r3, [pc, #408]	; (8006334 <calWallConrol+0x1404>)
 800619a:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 800619e:	4b5f      	ldr	r3, [pc, #380]	; (800631c <calWallConrol+0x13ec>)
 80061a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061a4:	2b82      	cmp	r3, #130	; 0x82
 80061a6:	dd1a      	ble.n	80061de <calWallConrol+0x12ae>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 80061a8:	4b63      	ldr	r3, [pc, #396]	; (8006338 <calWallConrol+0x1408>)
 80061aa:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061b4:	4b5e      	ldr	r3, [pc, #376]	; (8006330 <calWallConrol+0x1400>)
 80061b6:	edd3 7a00 	vldr	s15, [r3]
 80061ba:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80061be:	eef0 7ae7 	vabs.f32	s15, s15
 80061c2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800633c <calWallConrol+0x140c>
 80061c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ce:	d506      	bpl.n	80061de <calWallConrol+0x12ae>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 80061d0:	4b51      	ldr	r3, [pc, #324]	; (8006318 <calWallConrol+0x13e8>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f043 0302 	orr.w	r3, r3, #2
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	4b4f      	ldr	r3, [pc, #316]	; (8006318 <calWallConrol+0x13e8>)
 80061dc:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 80061de:	4b4f      	ldr	r3, [pc, #316]	; (800631c <calWallConrol+0x13ec>)
 80061e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e2:	2b82      	cmp	r3, #130	; 0x82
 80061e4:	dd1a      	ble.n	800621c <calWallConrol+0x12ec>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80061e6:	4b54      	ldr	r3, [pc, #336]	; (8006338 <calWallConrol+0x1408>)
 80061e8:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061f2:	4b50      	ldr	r3, [pc, #320]	; (8006334 <calWallConrol+0x1404>)
 80061f4:	edd3 7a00 	vldr	s15, [r3]
 80061f8:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80061fc:	eef0 7ae7 	vabs.f32	s15, s15
 8006200:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800633c <calWallConrol+0x140c>
 8006204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	d506      	bpl.n	800621c <calWallConrol+0x12ec>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 800620e:	4b42      	ldr	r3, [pc, #264]	; (8006318 <calWallConrol+0x13e8>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <calWallConrol+0x13e8>)
 800621a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 800621c:	4b3f      	ldr	r3, [pc, #252]	; (800631c <calWallConrol+0x13ec>)
 800621e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006222:	2b81      	cmp	r3, #129	; 0x81
 8006224:	dd13      	ble.n	800624e <calWallConrol+0x131e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8006226:	4b44      	ldr	r3, [pc, #272]	; (8006338 <calWallConrol+0x1408>)
 8006228:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006232:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <calWallConrol+0x1400>)
 8006234:	edd3 7a00 	vldr	s15, [r3]
 8006238:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800623c:	eef0 7ae7 	vabs.f32	s15, s15
 8006240:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800633c <calWallConrol+0x140c>
 8006244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624c:	dd06      	ble.n	800625c <calWallConrol+0x132c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 800624e:	4b32      	ldr	r3, [pc, #200]	; (8006318 <calWallConrol+0x13e8>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	f023 0302 	bic.w	r3, r3, #2
 8006256:	b2da      	uxtb	r2, r3
 8006258:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <calWallConrol+0x13e8>)
 800625a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 800625c:	4b2f      	ldr	r3, [pc, #188]	; (800631c <calWallConrol+0x13ec>)
 800625e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006260:	2b81      	cmp	r3, #129	; 0x81
 8006262:	dd13      	ble.n	800628c <calWallConrol+0x135c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8006264:	4b34      	ldr	r3, [pc, #208]	; (8006338 <calWallConrol+0x1408>)
 8006266:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006270:	4b30      	ldr	r3, [pc, #192]	; (8006334 <calWallConrol+0x1404>)
 8006272:	edd3 7a00 	vldr	s15, [r3]
 8006276:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800627a:	eef0 7ae7 	vabs.f32	s15, s15
 800627e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800633c <calWallConrol+0x140c>
 8006282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628a:	dd06      	ble.n	800629a <calWallConrol+0x136a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <calWallConrol+0x13e8>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	b2da      	uxtb	r2, r3
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <calWallConrol+0x13e8>)
 8006298:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 800629a:	4b1f      	ldr	r3, [pc, #124]	; (8006318 <calWallConrol+0x13e8>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	f200 8155 	bhi.w	800654e <calWallConrol+0x161e>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <calWallConrol+0x137c>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	08006351 	.word	0x08006351
 80062b4:	080063f1 	.word	0x080063f1
 80062b8:	0800648f 	.word	0x0800648f
		case 0:			//両壁なし
			PID_wall += 0;
 80062bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80062c0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006340 <calWallConrol+0x1410>
 80062c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062c8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 80062cc:	2000      	movs	r0, #0
 80062ce:	f000 ff5d 	bl	800718c <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80062d2:	2000      	movs	r0, #0
 80062d4:	f000 ff6c 	bl	80071b0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <calWallConrol+0x13ec>)
 80062da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e6:	4b17      	ldr	r3, [pc, #92]	; (8006344 <calWallConrol+0x1414>)
 80062e8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <calWallConrol+0x13ec>)
 80062ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062f8:	4b13      	ldr	r3, [pc, #76]	; (8006348 <calWallConrol+0x1418>)
 80062fa:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <calWallConrol+0x141c>)
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <calWallConrol+0x141c>)
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 800630e:	4b0f      	ldr	r3, [pc, #60]	; (800634c <calWallConrol+0x141c>)
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	605a      	str	r2, [r3, #4]
			break;
 8006316:	e11a      	b.n	800654e <calWallConrol+0x161e>
 8006318:	20000594 	.word	0x20000594
 800631c:	200002b8 	.word	0x200002b8
 8006320:	200005dc 	.word	0x200005dc
 8006324:	200005e0 	.word	0x200005e0
 8006328:	20000668 	.word	0x20000668
 800632c:	20000698 	.word	0x20000698
 8006330:	200006d0 	.word	0x200006d0
 8006334:	200006d4 	.word	0x200006d4
 8006338:	20000448 	.word	0x20000448
 800633c:	42a00000 	.word	0x42a00000
 8006340:	00000000 	.word	0x00000000
 8006344:	200005a4 	.word	0x200005a4
 8006348:	200005a8 	.word	0x200005a8
 800634c:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006350:	2000      	movs	r0, #0
 8006352:	f000 ff1b 	bl	800718c <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006356:	2001      	movs	r0, #1
 8006358:	f000 ff2a 	bl	80071b0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 800635c:	4b87      	ldr	r3, [pc, #540]	; (800657c <calWallConrol+0x164c>)
 800635e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800636a:	4b85      	ldr	r3, [pc, #532]	; (8006580 <calWallConrol+0x1650>)
 800636c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006370:	4a84      	ldr	r2, [pc, #528]	; (8006584 <calWallConrol+0x1654>)
 8006372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006374:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8006376:	4b81      	ldr	r3, [pc, #516]	; (800657c <calWallConrol+0x164c>)
 8006378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006382:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800638a:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 800638e:	4b7b      	ldr	r3, [pc, #492]	; (800657c <calWallConrol+0x164c>)
 8006390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800639a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 800639e:	4b7a      	ldr	r3, [pc, #488]	; (8006588 <calWallConrol+0x1658>)
 80063a0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80063a4:	4b78      	ldr	r3, [pc, #480]	; (8006588 <calWallConrol+0x1658>)
 80063a6:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80063aa:	4b77      	ldr	r3, [pc, #476]	; (8006588 <calWallConrol+0x1658>)
 80063ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80063b0:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80063b4:	4b74      	ldr	r3, [pc, #464]	; (8006588 <calWallConrol+0x1658>)
 80063b6:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80063ba:	4b73      	ldr	r3, [pc, #460]	; (8006588 <calWallConrol+0x1658>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a72      	ldr	r2, [pc, #456]	; (8006588 <calWallConrol+0x1658>)
 80063c0:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063c2:	4b71      	ldr	r3, [pc, #452]	; (8006588 <calWallConrol+0x1658>)
 80063c4:	ed93 7a00 	vldr	s14, [r3]
 80063c8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80063cc:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80063d0:	4b6d      	ldr	r3, [pc, #436]	; (8006588 <calWallConrol+0x1658>)
 80063d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80063d6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80063da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063de:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063e2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80063e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ea:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80063ee:	e0ae      	b.n	800654e <calWallConrol+0x161e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 80063f0:	2001      	movs	r0, #1
 80063f2:	f000 fecb 	bl	800718c <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80063f6:	2000      	movs	r0, #0
 80063f8:	f000 feda 	bl	80071b0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80063fc:	4a60      	ldr	r2, [pc, #384]	; (8006580 <calWallConrol+0x1650>)
 80063fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006400:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006402:	4b5e      	ldr	r3, [pc, #376]	; (800657c <calWallConrol+0x164c>)
 8006404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800640e:	4b5d      	ldr	r3, [pc, #372]	; (8006584 <calWallConrol+0x1654>)
 8006410:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006414:	4b59      	ldr	r3, [pc, #356]	; (800657c <calWallConrol+0x164c>)
 8006416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006422:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006426:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800642a:	4b54      	ldr	r3, [pc, #336]	; (800657c <calWallConrol+0x164c>)
 800642c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006438:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 800643c:	4b52      	ldr	r3, [pc, #328]	; (8006588 <calWallConrol+0x1658>)
 800643e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006442:	4b51      	ldr	r3, [pc, #324]	; (8006588 <calWallConrol+0x1658>)
 8006444:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006448:	4b4f      	ldr	r3, [pc, #316]	; (8006588 <calWallConrol+0x1658>)
 800644a:	edd3 7a01 	vldr	s15, [r3, #4]
 800644e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006452:	4b4d      	ldr	r3, [pc, #308]	; (8006588 <calWallConrol+0x1658>)
 8006454:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006458:	4b4b      	ldr	r3, [pc, #300]	; (8006588 <calWallConrol+0x1658>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a4a      	ldr	r2, [pc, #296]	; (8006588 <calWallConrol+0x1658>)
 800645e:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006460:	4b49      	ldr	r3, [pc, #292]	; (8006588 <calWallConrol+0x1658>)
 8006462:	ed93 7a00 	vldr	s14, [r3]
 8006466:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800646a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 800646e:	4b46      	ldr	r3, [pc, #280]	; (8006588 <calWallConrol+0x1658>)
 8006470:	edd3 6a02 	vldr	s13, [r3, #8]
 8006474:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800647c:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006480:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006488:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800648c:	e05f      	b.n	800654e <calWallConrol+0x161e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 800648e:	2001      	movs	r0, #1
 8006490:	f000 fe7c 	bl	800718c <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006494:	2001      	movs	r0, #1
 8006496:	f000 fe8b 	bl	80071b0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 800649a:	4a39      	ldr	r2, [pc, #228]	; (8006580 <calWallConrol+0x1650>)
 800649c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800649e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 80064a0:	4a38      	ldr	r2, [pc, #224]	; (8006584 <calWallConrol+0x1654>)
 80064a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064a4:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80064a6:	4b35      	ldr	r3, [pc, #212]	; (800657c <calWallConrol+0x164c>)
 80064a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80064b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ba:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 80064be:	4b2f      	ldr	r3, [pc, #188]	; (800657c <calWallConrol+0x164c>)
 80064c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 80064ce:	4b2b      	ldr	r3, [pc, #172]	; (800657c <calWallConrol+0x164c>)
 80064d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80064dc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80064e0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <calWallConrol+0x164c>)
 80064e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80064f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 80064f6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80064fa:	4b23      	ldr	r3, [pc, #140]	; (8006588 <calWallConrol+0x1658>)
 80064fc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006500:	4b21      	ldr	r3, [pc, #132]	; (8006588 <calWallConrol+0x1658>)
 8006502:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006506:	4b20      	ldr	r3, [pc, #128]	; (8006588 <calWallConrol+0x1658>)
 8006508:	edd3 7a01 	vldr	s15, [r3, #4]
 800650c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006510:	4b1d      	ldr	r3, [pc, #116]	; (8006588 <calWallConrol+0x1658>)
 8006512:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006516:	4b1c      	ldr	r3, [pc, #112]	; (8006588 <calWallConrol+0x1658>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1b      	ldr	r2, [pc, #108]	; (8006588 <calWallConrol+0x1658>)
 800651c:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <calWallConrol+0x1658>)
 8006520:	ed93 7a00 	vldr	s14, [r3]
 8006524:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006528:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <calWallConrol+0x1658>)
 800652e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006532:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800653a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800653e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006546:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800654a:	e000      	b.n	800654e <calWallConrol+0x161e>
			break;
 800654c:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 800654e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006552:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800658c <calWallConrol+0x165c>
 8006556:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <calWallConrol+0x1660>)
 800655c:	edd3 7a00 	vldr	s15, [r3]
 8006560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006564:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800656a:	ee07 3a90 	vmov	s15, r3
}
 800656e:	eeb0 0a67 	vmov.f32	s0, s15
 8006572:	37a8      	adds	r7, #168	; 0xa8
 8006574:	46bd      	mov	sp, r7
 8006576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800657a:	bf00      	nop
 800657c:	200002b8 	.word	0x200002b8
 8006580:	200005a4 	.word	0x200005a4
 8006584:	200005a8 	.word	0x200005a8
 8006588:	20000584 	.word	0x20000584
 800658c:	44d1e000 	.word	0x44d1e000
 8006590:	200004d4 	.word	0x200004d4
 8006594:	00000000 	.word	0x00000000

08006598 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006598:	b5b0      	push	{r4, r5, r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 800659e:	4b98      	ldr	r3, [pc, #608]	; (8006800 <interrupt_WallCut+0x268>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	f040 8537 	bne.w	8007016 <interrupt_WallCut+0xa7e>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 80065a8:	4b96      	ldr	r3, [pc, #600]	; (8006804 <interrupt_WallCut+0x26c>)
 80065aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b2:	dd03      	ble.n	80065bc <interrupt_WallCut+0x24>
			front_wall_break_90 = 1;
 80065b4:	4b94      	ldr	r3, [pc, #592]	; (8006808 <interrupt_WallCut+0x270>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e002      	b.n	80065c2 <interrupt_WallCut+0x2a>
		} else {
			front_wall_break_90 = 0;
 80065bc:	4b92      	ldr	r3, [pc, #584]	; (8006808 <interrupt_WallCut+0x270>)
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 80065c2:	4b90      	ldr	r3, [pc, #576]	; (8006804 <interrupt_WallCut+0x26c>)
 80065c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80065cc:	dd03      	ble.n	80065d6 <interrupt_WallCut+0x3e>
			front_wall_break_45 = 1;
 80065ce:	4b8f      	ldr	r3, [pc, #572]	; (800680c <interrupt_WallCut+0x274>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	e002      	b.n	80065dc <interrupt_WallCut+0x44>
		} else {
			front_wall_break_45 = 0;
 80065d6:	4b8d      	ldr	r3, [pc, #564]	; (800680c <interrupt_WallCut+0x274>)
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 80065dc:	4b89      	ldr	r3, [pc, #548]	; (8006804 <interrupt_WallCut+0x26c>)
 80065de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065e6:	dd03      	ble.n	80065f0 <interrupt_WallCut+0x58>
			front_wall_break_45slant = 1;
 80065e8:	4b89      	ldr	r3, [pc, #548]	; (8006810 <interrupt_WallCut+0x278>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e002      	b.n	80065f6 <interrupt_WallCut+0x5e>
		} else {
			front_wall_break_45slant = 0;
 80065f0:	4b87      	ldr	r3, [pc, #540]	; (8006810 <interrupt_WallCut+0x278>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 80065f6:	4b83      	ldr	r3, [pc, #524]	; (8006804 <interrupt_WallCut+0x26c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80065fe:	da30      	bge.n	8006662 <interrupt_WallCut+0xca>
			NoWallCountL90++;
 8006600:	4b84      	ldr	r3, [pc, #528]	; (8006814 <interrupt_WallCut+0x27c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	4a83      	ldr	r2, [pc, #524]	; (8006814 <interrupt_WallCut+0x27c>)
 8006608:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800660a:	4b83      	ldr	r3, [pc, #524]	; (8006818 <interrupt_WallCut+0x280>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7f9 ffc2 	bl	8000598 <__aeabi_f2d>
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	4b80      	ldr	r3, [pc, #512]	; (800681c <interrupt_WallCut+0x284>)
 800661a:	ed93 7a00 	vldr	s14, [r3]
 800661e:	4b80      	ldr	r3, [pc, #512]	; (8006820 <interrupt_WallCut+0x288>)
 8006620:	edd3 7a00 	vldr	s15, [r3]
 8006624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006628:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800662c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006630:	ee16 0a90 	vmov	r0, s13
 8006634:	f7f9 ffb0 	bl	8000598 <__aeabi_f2d>
 8006638:	a36f      	add	r3, pc, #444	; (adr r3, 80067f8 <interrupt_WallCut+0x260>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7fa f803 	bl	8000648 <__aeabi_dmul>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7f9 fe47 	bl	80002dc <__adddf3>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4610      	mov	r0, r2
 8006654:	4619      	mov	r1, r3
 8006656:	f7fa facf 	bl	8000bf8 <__aeabi_d2f>
 800665a:	4603      	mov	r3, r0
 800665c:	4a6e      	ldr	r2, [pc, #440]	; (8006818 <interrupt_WallCut+0x280>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e006      	b.n	8006670 <interrupt_WallCut+0xd8>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006662:	4b6c      	ldr	r3, [pc, #432]	; (8006814 <interrupt_WallCut+0x27c>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006668:	4b6b      	ldr	r3, [pc, #428]	; (8006818 <interrupt_WallCut+0x280>)
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006670:	4b64      	ldr	r3, [pc, #400]	; (8006804 <interrupt_WallCut+0x26c>)
 8006672:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006676:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800667a:	da30      	bge.n	80066de <interrupt_WallCut+0x146>
			NoWallCountR90++;
 800667c:	4b69      	ldr	r3, [pc, #420]	; (8006824 <interrupt_WallCut+0x28c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	4a68      	ldr	r2, [pc, #416]	; (8006824 <interrupt_WallCut+0x28c>)
 8006684:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006686:	4b68      	ldr	r3, [pc, #416]	; (8006828 <interrupt_WallCut+0x290>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7f9 ff84 	bl	8000598 <__aeabi_f2d>
 8006690:	4604      	mov	r4, r0
 8006692:	460d      	mov	r5, r1
 8006694:	4b61      	ldr	r3, [pc, #388]	; (800681c <interrupt_WallCut+0x284>)
 8006696:	ed93 7a00 	vldr	s14, [r3]
 800669a:	4b61      	ldr	r3, [pc, #388]	; (8006820 <interrupt_WallCut+0x288>)
 800669c:	edd3 7a00 	vldr	s15, [r3]
 80066a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066ac:	ee16 0a90 	vmov	r0, s13
 80066b0:	f7f9 ff72 	bl	8000598 <__aeabi_f2d>
 80066b4:	a350      	add	r3, pc, #320	; (adr r3, 80067f8 <interrupt_WallCut+0x260>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 ffc5 	bl	8000648 <__aeabi_dmul>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4620      	mov	r0, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	f7f9 fe09 	bl	80002dc <__adddf3>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4610      	mov	r0, r2
 80066d0:	4619      	mov	r1, r3
 80066d2:	f7fa fa91 	bl	8000bf8 <__aeabi_d2f>
 80066d6:	4603      	mov	r3, r0
 80066d8:	4a53      	ldr	r2, [pc, #332]	; (8006828 <interrupt_WallCut+0x290>)
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e006      	b.n	80066ec <interrupt_WallCut+0x154>
		} else {
			NoWallCountR90 = 0;
 80066de:	4b51      	ldr	r3, [pc, #324]	; (8006824 <interrupt_WallCut+0x28c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 80066e4:	4b50      	ldr	r3, [pc, #320]	; (8006828 <interrupt_WallCut+0x290>)
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80066ec:	4b4f      	ldr	r3, [pc, #316]	; (800682c <interrupt_WallCut+0x294>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80066f4:	da03      	bge.n	80066fe <interrupt_WallCut+0x166>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 80066f6:	4b43      	ldr	r3, [pc, #268]	; (8006804 <interrupt_WallCut+0x26c>)
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	2b70      	cmp	r3, #112	; 0x70
 80066fc:	dd37      	ble.n	800676e <interrupt_WallCut+0x1d6>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 80066fe:	4b4c      	ldr	r3, [pc, #304]	; (8006830 <interrupt_WallCut+0x298>)
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006706:	4b4b      	ldr	r3, [pc, #300]	; (8006834 <interrupt_WallCut+0x29c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	4a49      	ldr	r2, [pc, #292]	; (8006834 <interrupt_WallCut+0x29c>)
 800670e:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006710:	4b49      	ldr	r3, [pc, #292]	; (8006838 <interrupt_WallCut+0x2a0>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006716:	4b49      	ldr	r3, [pc, #292]	; (800683c <interrupt_WallCut+0x2a4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f7f9 ff3c 	bl	8000598 <__aeabi_f2d>
 8006720:	4604      	mov	r4, r0
 8006722:	460d      	mov	r5, r1
 8006724:	4b3d      	ldr	r3, [pc, #244]	; (800681c <interrupt_WallCut+0x284>)
 8006726:	ed93 7a00 	vldr	s14, [r3]
 800672a:	4b3d      	ldr	r3, [pc, #244]	; (8006820 <interrupt_WallCut+0x288>)
 800672c:	edd3 7a00 	vldr	s15, [r3]
 8006730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006734:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006738:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800673c:	ee16 0a90 	vmov	r0, s13
 8006740:	f7f9 ff2a 	bl	8000598 <__aeabi_f2d>
 8006744:	a32c      	add	r3, pc, #176	; (adr r3, 80067f8 <interrupt_WallCut+0x260>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f7f9 ff7d 	bl	8000648 <__aeabi_dmul>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4620      	mov	r0, r4
 8006754:	4629      	mov	r1, r5
 8006756:	f7f9 fdc1 	bl	80002dc <__adddf3>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4610      	mov	r0, r2
 8006760:	4619      	mov	r1, r3
 8006762:	f7fa fa49 	bl	8000bf8 <__aeabi_d2f>
 8006766:	4603      	mov	r3, r0
 8006768:	4a34      	ldr	r2, [pc, #208]	; (800683c <interrupt_WallCut+0x2a4>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	e09c      	b.n	80068a8 <interrupt_WallCut+0x310>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 800676e:	4b32      	ldr	r3, [pc, #200]	; (8006838 <interrupt_WallCut+0x2a0>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d168      	bne.n	8006848 <interrupt_WallCut+0x2b0>
				for (int i = 0; i <= 19; i++) {
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e01f      	b.n	80067bc <interrupt_WallCut+0x224>
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800677c:	4a21      	ldr	r2, [pc, #132]	; (8006804 <interrupt_WallCut+0x26c>)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3314      	adds	r3, #20
 8006782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800678e:	4b28      	ldr	r3, [pc, #160]	; (8006830 <interrupt_WallCut+0x298>)
 8006790:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8006794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679c:	dd0b      	ble.n	80067b6 <interrupt_WallCut+0x21e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800679e:	4a19      	ldr	r2, [pc, #100]	; (8006804 <interrupt_WallCut+0x26c>)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3314      	adds	r3, #20
 80067a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 80067b0:	4b1f      	ldr	r3, [pc, #124]	; (8006830 <interrupt_WallCut+0x298>)
 80067b2:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b13      	cmp	r3, #19
 80067c0:	dddc      	ble.n	800677c <interrupt_WallCut+0x1e4>
					}
				}
				NoWallCountL45 = 0;
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <interrupt_WallCut+0x29c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 80067c8:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <interrupt_WallCut+0x2a0>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 80067ce:	4b18      	ldr	r3, [pc, #96]	; (8006830 <interrupt_WallCut+0x298>)
 80067d0:	edd3 7a00 	vldr	s15, [r3]
 80067d4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006840 <interrupt_WallCut+0x2a8>
 80067d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067dc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006844 <interrupt_WallCut+0x2ac>
 80067e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80067e4:	4b12      	ldr	r3, [pc, #72]	; (8006830 <interrupt_WallCut+0x298>)
 80067e6:	ed93 7a00 	vldr	s14, [r3]
 80067ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <interrupt_WallCut+0x2a4>)
 80067f0:	edc3 7a00 	vstr	s15, [r3]
 80067f4:	e058      	b.n	80068a8 <interrupt_WallCut+0x310>
 80067f6:	bf00      	nop
 80067f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80067fc:	3f50624d 	.word	0x3f50624d
 8006800:	20000592 	.word	0x20000592
 8006804:	200002b8 	.word	0x200002b8
 8006808:	200005f2 	.word	0x200005f2
 800680c:	200005f3 	.word	0x200005f3
 8006810:	200005f4 	.word	0x200005f4
 8006814:	200005b8 	.word	0x200005b8
 8006818:	200005d0 	.word	0x200005d0
 800681c:	20000258 	.word	0x20000258
 8006820:	2000025c 	.word	0x2000025c
 8006824:	200005b4 	.word	0x200005b4
 8006828:	200005cc 	.word	0x200005cc
 800682c:	2000045c 	.word	0x2000045c
 8006830:	200005f8 	.word	0x200005f8
 8006834:	200005c0 	.word	0x200005c0
 8006838:	200005ec 	.word	0x200005ec
 800683c:	200005d8 	.word	0x200005d8
 8006840:	43f68000 	.word	0x43f68000
 8006844:	00000000 	.word	0x00000000
			} else {
				NoWallCountL45++;
 8006848:	4bab      	ldr	r3, [pc, #684]	; (8006af8 <interrupt_WallCut+0x560>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	4aaa      	ldr	r2, [pc, #680]	; (8006af8 <interrupt_WallCut+0x560>)
 8006850:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006852:	4baa      	ldr	r3, [pc, #680]	; (8006afc <interrupt_WallCut+0x564>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7f9 fe9e 	bl	8000598 <__aeabi_f2d>
 800685c:	4604      	mov	r4, r0
 800685e:	460d      	mov	r5, r1
 8006860:	4ba7      	ldr	r3, [pc, #668]	; (8006b00 <interrupt_WallCut+0x568>)
 8006862:	ed93 7a00 	vldr	s14, [r3]
 8006866:	4ba7      	ldr	r3, [pc, #668]	; (8006b04 <interrupt_WallCut+0x56c>)
 8006868:	edd3 7a00 	vldr	s15, [r3]
 800686c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006870:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006874:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006878:	ee16 0a90 	vmov	r0, s13
 800687c:	f7f9 fe8c 	bl	8000598 <__aeabi_f2d>
 8006880:	a39b      	add	r3, pc, #620	; (adr r3, 8006af0 <interrupt_WallCut+0x558>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7f9 fedf 	bl	8000648 <__aeabi_dmul>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7f9 fd23 	bl	80002dc <__adddf3>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	f7fa f9ab 	bl	8000bf8 <__aeabi_d2f>
 80068a2:	4603      	mov	r3, r0
 80068a4:	4a95      	ldr	r2, [pc, #596]	; (8006afc <interrupt_WallCut+0x564>)
 80068a6:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80068a8:	4b97      	ldr	r3, [pc, #604]	; (8006b08 <interrupt_WallCut+0x570>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80068b0:	da04      	bge.n	80068bc <interrupt_WallCut+0x324>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 80068b2:	4b96      	ldr	r3, [pc, #600]	; (8006b0c <interrupt_WallCut+0x574>)
 80068b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068b8:	2bc8      	cmp	r3, #200	; 0xc8
 80068ba:	dd37      	ble.n	800692c <interrupt_WallCut+0x394>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 80068bc:	4b94      	ldr	r3, [pc, #592]	; (8006b10 <interrupt_WallCut+0x578>)
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 80068c4:	4b93      	ldr	r3, [pc, #588]	; (8006b14 <interrupt_WallCut+0x57c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	4a92      	ldr	r2, [pc, #584]	; (8006b14 <interrupt_WallCut+0x57c>)
 80068cc:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 80068ce:	4b92      	ldr	r3, [pc, #584]	; (8006b18 <interrupt_WallCut+0x580>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80068d4:	4b91      	ldr	r3, [pc, #580]	; (8006b1c <interrupt_WallCut+0x584>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7f9 fe5d 	bl	8000598 <__aeabi_f2d>
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	4b87      	ldr	r3, [pc, #540]	; (8006b00 <interrupt_WallCut+0x568>)
 80068e4:	ed93 7a00 	vldr	s14, [r3]
 80068e8:	4b86      	ldr	r3, [pc, #536]	; (8006b04 <interrupt_WallCut+0x56c>)
 80068ea:	edd3 7a00 	vldr	s15, [r3]
 80068ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80068f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068fa:	ee16 0a90 	vmov	r0, s13
 80068fe:	f7f9 fe4b 	bl	8000598 <__aeabi_f2d>
 8006902:	a37b      	add	r3, pc, #492	; (adr r3, 8006af0 <interrupt_WallCut+0x558>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fe9e 	bl	8000648 <__aeabi_dmul>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4620      	mov	r0, r4
 8006912:	4629      	mov	r1, r5
 8006914:	f7f9 fce2 	bl	80002dc <__adddf3>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f96a 	bl	8000bf8 <__aeabi_d2f>
 8006924:	4603      	mov	r3, r0
 8006926:	4a7d      	ldr	r2, [pc, #500]	; (8006b1c <interrupt_WallCut+0x584>)
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e073      	b.n	8006a14 <interrupt_WallCut+0x47c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800692c:	4b7a      	ldr	r3, [pc, #488]	; (8006b18 <interrupt_WallCut+0x580>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d13f      	bne.n	80069b4 <interrupt_WallCut+0x41c>
				for (int i = 0; i <= 19; i++) {
 8006934:	2300      	movs	r3, #0
 8006936:	60bb      	str	r3, [r7, #8]
 8006938:	e01f      	b.n	800697a <interrupt_WallCut+0x3e2>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 800693a:	4a74      	ldr	r2, [pc, #464]	; (8006b0c <interrupt_WallCut+0x574>)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	333c      	adds	r3, #60	; 0x3c
 8006940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006944:	ee07 3a90 	vmov	s15, r3
 8006948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800694c:	4b70      	ldr	r3, [pc, #448]	; (8006b10 <interrupt_WallCut+0x578>)
 800694e:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 8006952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695a:	dd0b      	ble.n	8006974 <interrupt_WallCut+0x3dc>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 800695c:	4a6b      	ldr	r2, [pc, #428]	; (8006b0c <interrupt_WallCut+0x574>)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	333c      	adds	r3, #60	; 0x3c
 8006962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 800696e:	4b68      	ldr	r3, [pc, #416]	; (8006b10 <interrupt_WallCut+0x578>)
 8006970:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3301      	adds	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b13      	cmp	r3, #19
 800697e:	dddc      	ble.n	800693a <interrupt_WallCut+0x3a2>
					}
				}
				NoWallCountR45 = 0;
 8006980:	4b64      	ldr	r3, [pc, #400]	; (8006b14 <interrupt_WallCut+0x57c>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 8006986:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <interrupt_WallCut+0x580>)
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 800698c:	4b60      	ldr	r3, [pc, #384]	; (8006b10 <interrupt_WallCut+0x578>)
 800698e:	edd3 7a00 	vldr	s15, [r3]
 8006992:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8006b20 <interrupt_WallCut+0x588>
 8006996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800699a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8006b24 <interrupt_WallCut+0x58c>
 800699e:	ee67 6a87 	vmul.f32	s13, s15, s14
 80069a2:	4b5b      	ldr	r3, [pc, #364]	; (8006b10 <interrupt_WallCut+0x578>)
 80069a4:	ed93 7a00 	vldr	s14, [r3]
 80069a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 80069ac:	4b5b      	ldr	r3, [pc, #364]	; (8006b1c <interrupt_WallCut+0x584>)
 80069ae:	edc3 7a00 	vstr	s15, [r3]
 80069b2:	e02f      	b.n	8006a14 <interrupt_WallCut+0x47c>
			} else {
				NoWallCountR45++;
 80069b4:	4b57      	ldr	r3, [pc, #348]	; (8006b14 <interrupt_WallCut+0x57c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	4a56      	ldr	r2, [pc, #344]	; (8006b14 <interrupt_WallCut+0x57c>)
 80069bc:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80069be:	4b57      	ldr	r3, [pc, #348]	; (8006b1c <interrupt_WallCut+0x584>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7f9 fde8 	bl	8000598 <__aeabi_f2d>
 80069c8:	4604      	mov	r4, r0
 80069ca:	460d      	mov	r5, r1
 80069cc:	4b4c      	ldr	r3, [pc, #304]	; (8006b00 <interrupt_WallCut+0x568>)
 80069ce:	ed93 7a00 	vldr	s14, [r3]
 80069d2:	4b4c      	ldr	r3, [pc, #304]	; (8006b04 <interrupt_WallCut+0x56c>)
 80069d4:	edd3 7a00 	vldr	s15, [r3]
 80069d8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80069dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069e4:	ee16 0a90 	vmov	r0, s13
 80069e8:	f7f9 fdd6 	bl	8000598 <__aeabi_f2d>
 80069ec:	a340      	add	r3, pc, #256	; (adr r3, 8006af0 <interrupt_WallCut+0x558>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fe29 	bl	8000648 <__aeabi_dmul>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80069fa:	4620      	mov	r0, r4
 80069fc:	4629      	mov	r1, r5
 80069fe:	f7f9 fc6d 	bl	80002dc <__adddf3>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4610      	mov	r0, r2
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f7fa f8f5 	bl	8000bf8 <__aeabi_d2f>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4a42      	ldr	r2, [pc, #264]	; (8006b1c <interrupt_WallCut+0x584>)
 8006a12:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006a14:	4b3c      	ldr	r3, [pc, #240]	; (8006b08 <interrupt_WallCut+0x570>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8006a1c:	dd5f      	ble.n	8006ade <interrupt_WallCut+0x546>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 8006a1e:	4b42      	ldr	r3, [pc, #264]	; (8006b28 <interrupt_WallCut+0x590>)
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006a26:	4b41      	ldr	r3, [pc, #260]	; (8006b2c <interrupt_WallCut+0x594>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	4a3f      	ldr	r2, [pc, #252]	; (8006b2c <interrupt_WallCut+0x594>)
 8006a2e:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006a30:	2000      	movs	r0, #0
 8006a32:	f000 fcdd 	bl	80073f0 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <interrupt_WallCut+0x598>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006a3c:	4b3d      	ldr	r3, [pc, #244]	; (8006b34 <interrupt_WallCut+0x59c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7f9 fda9 	bl	8000598 <__aeabi_f2d>
 8006a46:	4604      	mov	r4, r0
 8006a48:	460d      	mov	r5, r1
 8006a4a:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <interrupt_WallCut+0x568>)
 8006a4c:	ed93 7a00 	vldr	s14, [r3]
 8006a50:	4b2c      	ldr	r3, [pc, #176]	; (8006b04 <interrupt_WallCut+0x56c>)
 8006a52:	edd3 7a00 	vldr	s15, [r3]
 8006a56:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006a5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a62:	ee16 0a90 	vmov	r0, s13
 8006a66:	f7f9 fd97 	bl	8000598 <__aeabi_f2d>
 8006a6a:	a321      	add	r3, pc, #132	; (adr r3, 8006af0 <interrupt_WallCut+0x558>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fdea 	bl	8000648 <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f7f9 fc2e 	bl	80002dc <__adddf3>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4610      	mov	r0, r2
 8006a86:	4619      	mov	r1, r3
 8006a88:	f7fa f8b6 	bl	8000bf8 <__aeabi_d2f>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	4a29      	ldr	r2, [pc, #164]	; (8006b34 <interrupt_WallCut+0x59c>)
 8006a90:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006a92:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <interrupt_WallCut+0x5a0>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	f040 8131 	bne.w	8006cfe <interrupt_WallCut+0x766>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006a9c:	4b27      	ldr	r3, [pc, #156]	; (8006b3c <interrupt_WallCut+0x5a4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7f9 fd79 	bl	8000598 <__aeabi_f2d>
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	4b25      	ldr	r3, [pc, #148]	; (8006b40 <interrupt_WallCut+0x5a8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7f9 fd72 	bl	8000598 <__aeabi_f2d>
 8006ab4:	a30e      	add	r3, pc, #56	; (adr r3, 8006af0 <interrupt_WallCut+0x558>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7f9 fdc5 	bl	8000648 <__aeabi_dmul>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f7f9 fc09 	bl	80002dc <__adddf3>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f7fa f891 	bl	8000bf8 <__aeabi_d2f>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <interrupt_WallCut+0x5a4>)
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e10f      	b.n	8006cfe <interrupt_WallCut+0x766>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <interrupt_WallCut+0x598>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 80b4 	bne.w	8006c50 <interrupt_WallCut+0x6b8>
				for (int i = 0; i <= 19; i++) {
 8006ae8:	2300      	movs	r3, #0
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	e04a      	b.n	8006b84 <interrupt_WallCut+0x5ec>
 8006aee:	bf00      	nop
 8006af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006af4:	3f50624d 	.word	0x3f50624d
 8006af8:	200005c0 	.word	0x200005c0
 8006afc:	200005d8 	.word	0x200005d8
 8006b00:	20000258 	.word	0x20000258
 8006b04:	2000025c 	.word	0x2000025c
 8006b08:	2000045c 	.word	0x2000045c
 8006b0c:	200002b8 	.word	0x200002b8
 8006b10:	200005fc 	.word	0x200005fc
 8006b14:	200005bc 	.word	0x200005bc
 8006b18:	200005ed 	.word	0x200005ed
 8006b1c:	200005d4 	.word	0x200005d4
 8006b20:	44484000 	.word	0x44484000
 8006b24:	00000000 	.word	0x00000000
 8006b28:	20000600 	.word	0x20000600
 8006b2c:	200005c8 	.word	0x200005c8
 8006b30:	200005ee 	.word	0x200005ee
 8006b34:	200005e8 	.word	0x200005e8
 8006b38:	200005f0 	.word	0x200005f0
 8006b3c:	200005e0 	.word	0x200005e0
 8006b40:	200004d8 	.word	0x200004d8
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006b44:	4aac      	ldr	r2, [pc, #688]	; (8006df8 <interrupt_WallCut+0x860>)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b56:	4ba9      	ldr	r3, [pc, #676]	; (8006dfc <interrupt_WallCut+0x864>)
 8006b58:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8006b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b64:	dd0b      	ble.n	8006b7e <interrupt_WallCut+0x5e6>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006b66:	4aa4      	ldr	r2, [pc, #656]	; (8006df8 <interrupt_WallCut+0x860>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006b78:	4ba0      	ldr	r3, [pc, #640]	; (8006dfc <interrupt_WallCut+0x864>)
 8006b7a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3301      	adds	r3, #1
 8006b82:	607b      	str	r3, [r7, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b13      	cmp	r3, #19
 8006b88:	dddc      	ble.n	8006b44 <interrupt_WallCut+0x5ac>
					}
				}
				NoWallCountL45slant = 0;
 8006b8a:	4b9d      	ldr	r3, [pc, #628]	; (8006e00 <interrupt_WallCut+0x868>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006b90:	4b9c      	ldr	r3, [pc, #624]	; (8006e04 <interrupt_WallCut+0x86c>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006b96:	2001      	movs	r0, #1
 8006b98:	f000 fc2a 	bl	80073f0 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006b9c:	4b97      	ldr	r3, [pc, #604]	; (8006dfc <interrupt_WallCut+0x864>)
 8006b9e:	edd3 7a00 	vldr	s15, [r3]
 8006ba2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006e08 <interrupt_WallCut+0x870>
 8006ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb2:	db26      	blt.n	8006c02 <interrupt_WallCut+0x66a>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006bb4:	4b91      	ldr	r3, [pc, #580]	; (8006dfc <interrupt_WallCut+0x864>)
 8006bb6:	edd3 7a00 	vldr	s15, [r3]
 8006bba:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006e08 <interrupt_WallCut+0x870>
 8006bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bc2:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8006e0c <interrupt_WallCut+0x874>
 8006bc6:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006bca:	4b8c      	ldr	r3, [pc, #560]	; (8006dfc <interrupt_WallCut+0x864>)
 8006bcc:	ed93 7a00 	vldr	s14, [r3]
 8006bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006bd4:	4b8e      	ldr	r3, [pc, #568]	; (8006e10 <interrupt_WallCut+0x878>)
 8006bd6:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006bda:	4b88      	ldr	r3, [pc, #544]	; (8006dfc <interrupt_WallCut+0x864>)
 8006bdc:	edd3 7a00 	vldr	s15, [r3]
 8006be0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006e08 <interrupt_WallCut+0x870>
 8006be4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006be8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006e0c <interrupt_WallCut+0x874>
 8006bec:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006bf0:	4b82      	ldr	r3, [pc, #520]	; (8006dfc <interrupt_WallCut+0x864>)
 8006bf2:	ed93 7a00 	vldr	s14, [r3]
 8006bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006bfa:	4b86      	ldr	r3, [pc, #536]	; (8006e14 <interrupt_WallCut+0x87c>)
 8006bfc:	edc3 7a00 	vstr	s15, [r3]
 8006c00:	e07a      	b.n	8006cf8 <interrupt_WallCut+0x760>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006c02:	4b7e      	ldr	r3, [pc, #504]	; (8006dfc <interrupt_WallCut+0x864>)
 8006c04:	edd3 7a00 	vldr	s15, [r3]
 8006c08:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8006e08 <interrupt_WallCut+0x870>
 8006c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c10:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006e0c <interrupt_WallCut+0x874>
 8006c14:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006c18:	4b78      	ldr	r3, [pc, #480]	; (8006dfc <interrupt_WallCut+0x864>)
 8006c1a:	ed93 7a00 	vldr	s14, [r3]
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006c22:	4b7b      	ldr	r3, [pc, #492]	; (8006e10 <interrupt_WallCut+0x878>)
 8006c24:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006c28:	4b74      	ldr	r3, [pc, #464]	; (8006dfc <interrupt_WallCut+0x864>)
 8006c2a:	edd3 7a00 	vldr	s15, [r3]
 8006c2e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8006e08 <interrupt_WallCut+0x870>
 8006c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c36:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006e0c <interrupt_WallCut+0x874>
 8006c3a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006c3e:	4b6f      	ldr	r3, [pc, #444]	; (8006dfc <interrupt_WallCut+0x864>)
 8006c40:	ed93 7a00 	vldr	s14, [r3]
 8006c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8006c48:	4b72      	ldr	r3, [pc, #456]	; (8006e14 <interrupt_WallCut+0x87c>)
 8006c4a:	edc3 7a00 	vstr	s15, [r3]
 8006c4e:	e053      	b.n	8006cf8 <interrupt_WallCut+0x760>
				}

			} else {
				NoWallCountL45slant++;
 8006c50:	4b6b      	ldr	r3, [pc, #428]	; (8006e00 <interrupt_WallCut+0x868>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	4a6a      	ldr	r2, [pc, #424]	; (8006e00 <interrupt_WallCut+0x868>)
 8006c58:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006c5a:	4b6e      	ldr	r3, [pc, #440]	; (8006e14 <interrupt_WallCut+0x87c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7f9 fc9a 	bl	8000598 <__aeabi_f2d>
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	4b6b      	ldr	r3, [pc, #428]	; (8006e18 <interrupt_WallCut+0x880>)
 8006c6a:	ed93 7a00 	vldr	s14, [r3]
 8006c6e:	4b6b      	ldr	r3, [pc, #428]	; (8006e1c <interrupt_WallCut+0x884>)
 8006c70:	edd3 7a00 	vldr	s15, [r3]
 8006c74:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006c78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c80:	ee16 0a90 	vmov	r0, s13
 8006c84:	f7f9 fc88 	bl	8000598 <__aeabi_f2d>
 8006c88:	a359      	add	r3, pc, #356	; (adr r3, 8006df0 <interrupt_WallCut+0x858>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f7f9 fcdb 	bl	8000648 <__aeabi_dmul>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fb1f 	bl	80002dc <__adddf3>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7f9 ffa7 	bl	8000bf8 <__aeabi_d2f>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4a59      	ldr	r2, [pc, #356]	; (8006e14 <interrupt_WallCut+0x87c>)
 8006cae:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006cb0:	4b5b      	ldr	r3, [pc, #364]	; (8006e20 <interrupt_WallCut+0x888>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d11f      	bne.n	8006cf8 <interrupt_WallCut+0x760>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006cb8:	4b55      	ldr	r3, [pc, #340]	; (8006e10 <interrupt_WallCut+0x878>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7f9 fc6b 	bl	8000598 <__aeabi_f2d>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	4b57      	ldr	r3, [pc, #348]	; (8006e24 <interrupt_WallCut+0x88c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7f9 fc64 	bl	8000598 <__aeabi_f2d>
 8006cd0:	a347      	add	r3, pc, #284	; (adr r3, 8006df0 <interrupt_WallCut+0x858>)
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f7f9 fcb7 	bl	8000648 <__aeabi_dmul>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fafb 	bl	80002dc <__adddf3>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4610      	mov	r0, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	f7f9 ff83 	bl	8000bf8 <__aeabi_d2f>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4a46      	ldr	r2, [pc, #280]	; (8006e10 <interrupt_WallCut+0x878>)
 8006cf6:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006cf8:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <interrupt_WallCut+0x888>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006cfe:	4b4a      	ldr	r3, [pc, #296]	; (8006e28 <interrupt_WallCut+0x890>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8006d06:	dd6a      	ble.n	8006dde <interrupt_WallCut+0x846>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006d08:	4b48      	ldr	r3, [pc, #288]	; (8006e2c <interrupt_WallCut+0x894>)
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006d10:	4b47      	ldr	r3, [pc, #284]	; (8006e30 <interrupt_WallCut+0x898>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a46      	ldr	r2, [pc, #280]	; (8006e30 <interrupt_WallCut+0x898>)
 8006d18:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f000 fb56 	bl	80073cc <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006d20:	4b44      	ldr	r3, [pc, #272]	; (8006e34 <interrupt_WallCut+0x89c>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006d26:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <interrupt_WallCut+0x8a0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fc34 	bl	8000598 <__aeabi_f2d>
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	4b38      	ldr	r3, [pc, #224]	; (8006e18 <interrupt_WallCut+0x880>)
 8006d36:	ed93 7a00 	vldr	s14, [r3]
 8006d3a:	4b38      	ldr	r3, [pc, #224]	; (8006e1c <interrupt_WallCut+0x884>)
 8006d3c:	edd3 7a00 	vldr	s15, [r3]
 8006d40:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006d44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d4c:	ee16 0a90 	vmov	r0, s13
 8006d50:	f7f9 fc22 	bl	8000598 <__aeabi_f2d>
 8006d54:	a326      	add	r3, pc, #152	; (adr r3, 8006df0 <interrupt_WallCut+0x858>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fc75 	bl	8000648 <__aeabi_dmul>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fab9 	bl	80002dc <__adddf3>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	f7f9 ff41 	bl	8000bf8 <__aeabi_d2f>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4a2f      	ldr	r2, [pc, #188]	; (8006e38 <interrupt_WallCut+0x8a0>)
 8006d7a:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006d7c:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <interrupt_WallCut+0x8a4>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	f040 81a8 	bne.w	80070d6 <interrupt_WallCut+0xb3e>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006d86:	4b2e      	ldr	r3, [pc, #184]	; (8006e40 <interrupt_WallCut+0x8a8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7f9 fc04 	bl	8000598 <__aeabi_f2d>
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	4b20      	ldr	r3, [pc, #128]	; (8006e18 <interrupt_WallCut+0x880>)
 8006d96:	ed93 7a00 	vldr	s14, [r3]
 8006d9a:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <interrupt_WallCut+0x884>)
 8006d9c:	edd3 7a00 	vldr	s15, [r3]
 8006da0:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006da4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006da8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006dac:	ee16 0a90 	vmov	r0, s13
 8006db0:	f7f9 fbf2 	bl	8000598 <__aeabi_f2d>
 8006db4:	a30e      	add	r3, pc, #56	; (adr r3, 8006df0 <interrupt_WallCut+0x858>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fc45 	bl	8000648 <__aeabi_dmul>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	f7f9 fa89 	bl	80002dc <__adddf3>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f7f9 ff11 	bl	8000bf8 <__aeabi_d2f>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4a19      	ldr	r2, [pc, #100]	; (8006e40 <interrupt_WallCut+0x8a8>)
 8006dda:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006ddc:	e17b      	b.n	80070d6 <interrupt_WallCut+0xb3e>
			if (NoWallCountR45slant_flag == 0) {
 8006dde:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <interrupt_WallCut+0x89c>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 80b4 	bne.w	8006f50 <interrupt_WallCut+0x9b8>
				for (int i = 0; i <= 19; i++) {
 8006de8:	2300      	movs	r3, #0
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	e04a      	b.n	8006e84 <interrupt_WallCut+0x8ec>
 8006dee:	bf00      	nop
 8006df0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006df4:	3f50624d 	.word	0x3f50624d
 8006df8:	200002b8 	.word	0x200002b8
 8006dfc:	20000600 	.word	0x20000600
 8006e00:	200005c8 	.word	0x200005c8
 8006e04:	200005ee 	.word	0x200005ee
 8006e08:	455ac000 	.word	0x455ac000
 8006e0c:	00000000 	.word	0x00000000
 8006e10:	200005e0 	.word	0x200005e0
 8006e14:	200005e8 	.word	0x200005e8
 8006e18:	20000258 	.word	0x20000258
 8006e1c:	2000025c 	.word	0x2000025c
 8006e20:	200005f0 	.word	0x200005f0
 8006e24:	200004d8 	.word	0x200004d8
 8006e28:	2000045c 	.word	0x2000045c
 8006e2c:	20000604 	.word	0x20000604
 8006e30:	200005c4 	.word	0x200005c4
 8006e34:	200005ef 	.word	0x200005ef
 8006e38:	200005e4 	.word	0x200005e4
 8006e3c:	200005f1 	.word	0x200005f1
 8006e40:	200005dc 	.word	0x200005dc
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006e44:	4aa8      	ldr	r2, [pc, #672]	; (80070e8 <interrupt_WallCut+0xb50>)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	333c      	adds	r3, #60	; 0x3c
 8006e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e56:	4ba5      	ldr	r3, [pc, #660]	; (80070ec <interrupt_WallCut+0xb54>)
 8006e58:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e64:	dd0b      	ble.n	8006e7e <interrupt_WallCut+0x8e6>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006e66:	4aa0      	ldr	r2, [pc, #640]	; (80070e8 <interrupt_WallCut+0xb50>)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	333c      	adds	r3, #60	; 0x3c
 8006e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006e78:	4b9c      	ldr	r3, [pc, #624]	; (80070ec <interrupt_WallCut+0xb54>)
 8006e7a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b13      	cmp	r3, #19
 8006e88:	dddc      	ble.n	8006e44 <interrupt_WallCut+0x8ac>
				NoWallCountR45slant = 0;
 8006e8a:	4b99      	ldr	r3, [pc, #612]	; (80070f0 <interrupt_WallCut+0xb58>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006e90:	4b98      	ldr	r3, [pc, #608]	; (80070f4 <interrupt_WallCut+0xb5c>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006e96:	2001      	movs	r0, #1
 8006e98:	f000 fa98 	bl	80073cc <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006e9c:	4b93      	ldr	r3, [pc, #588]	; (80070ec <interrupt_WallCut+0xb54>)
 8006e9e:	edd3 7a00 	vldr	s15, [r3]
 8006ea2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80070f8 <interrupt_WallCut+0xb60>
 8006ea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	db26      	blt.n	8006f02 <interrupt_WallCut+0x96a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006eb4:	4b8d      	ldr	r3, [pc, #564]	; (80070ec <interrupt_WallCut+0xb54>)
 8006eb6:	edd3 7a00 	vldr	s15, [r3]
 8006eba:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80070f8 <interrupt_WallCut+0xb60>
 8006ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ec2:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80070fc <interrupt_WallCut+0xb64>
 8006ec6:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006eca:	4b88      	ldr	r3, [pc, #544]	; (80070ec <interrupt_WallCut+0xb54>)
 8006ecc:	ed93 7a00 	vldr	s14, [r3]
 8006ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006ed4:	4b8a      	ldr	r3, [pc, #552]	; (8007100 <interrupt_WallCut+0xb68>)
 8006ed6:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006eda:	4b84      	ldr	r3, [pc, #528]	; (80070ec <interrupt_WallCut+0xb54>)
 8006edc:	edd3 7a00 	vldr	s15, [r3]
 8006ee0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80070f8 <interrupt_WallCut+0xb60>
 8006ee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ee8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80070fc <interrupt_WallCut+0xb64>
 8006eec:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006ef0:	4b7e      	ldr	r3, [pc, #504]	; (80070ec <interrupt_WallCut+0xb54>)
 8006ef2:	ed93 7a00 	vldr	s14, [r3]
 8006ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006efa:	4b82      	ldr	r3, [pc, #520]	; (8007104 <interrupt_WallCut+0xb6c>)
 8006efc:	edc3 7a00 	vstr	s15, [r3]
 8006f00:	e085      	b.n	800700e <interrupt_WallCut+0xa76>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006f02:	4b7a      	ldr	r3, [pc, #488]	; (80070ec <interrupt_WallCut+0xb54>)
 8006f04:	edd3 7a00 	vldr	s15, [r3]
 8006f08:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80070f8 <interrupt_WallCut+0xb60>
 8006f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f10:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80070fc <interrupt_WallCut+0xb64>
 8006f14:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006f18:	4b74      	ldr	r3, [pc, #464]	; (80070ec <interrupt_WallCut+0xb54>)
 8006f1a:	ed93 7a00 	vldr	s14, [r3]
 8006f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006f22:	4b77      	ldr	r3, [pc, #476]	; (8007100 <interrupt_WallCut+0xb68>)
 8006f24:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006f28:	4b70      	ldr	r3, [pc, #448]	; (80070ec <interrupt_WallCut+0xb54>)
 8006f2a:	edd3 7a00 	vldr	s15, [r3]
 8006f2e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80070f8 <interrupt_WallCut+0xb60>
 8006f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f36:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80070fc <interrupt_WallCut+0xb64>
 8006f3a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006f3e:	4b6b      	ldr	r3, [pc, #428]	; (80070ec <interrupt_WallCut+0xb54>)
 8006f40:	ed93 7a00 	vldr	s14, [r3]
 8006f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006f48:	4b6e      	ldr	r3, [pc, #440]	; (8007104 <interrupt_WallCut+0xb6c>)
 8006f4a:	edc3 7a00 	vstr	s15, [r3]
 8006f4e:	e05e      	b.n	800700e <interrupt_WallCut+0xa76>
				NoWallCountR45slant++;
 8006f50:	4b67      	ldr	r3, [pc, #412]	; (80070f0 <interrupt_WallCut+0xb58>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	4a66      	ldr	r2, [pc, #408]	; (80070f0 <interrupt_WallCut+0xb58>)
 8006f58:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006f5a:	4b6a      	ldr	r3, [pc, #424]	; (8007104 <interrupt_WallCut+0xb6c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7f9 fb1a 	bl	8000598 <__aeabi_f2d>
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	4b67      	ldr	r3, [pc, #412]	; (8007108 <interrupt_WallCut+0xb70>)
 8006f6a:	ed93 7a00 	vldr	s14, [r3]
 8006f6e:	4b67      	ldr	r3, [pc, #412]	; (800710c <interrupt_WallCut+0xb74>)
 8006f70:	edd3 7a00 	vldr	s15, [r3]
 8006f74:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006f78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006f7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f80:	ee16 0a90 	vmov	r0, s13
 8006f84:	f7f9 fb08 	bl	8000598 <__aeabi_f2d>
 8006f88:	a355      	add	r3, pc, #340	; (adr r3, 80070e0 <interrupt_WallCut+0xb48>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f7f9 fb5b 	bl	8000648 <__aeabi_dmul>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 f99f 	bl	80002dc <__adddf3>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f7f9 fe27 	bl	8000bf8 <__aeabi_d2f>
 8006faa:	4603      	mov	r3, r0
 8006fac:	4a55      	ldr	r2, [pc, #340]	; (8007104 <interrupt_WallCut+0xb6c>)
 8006fae:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006fb0:	4b57      	ldr	r3, [pc, #348]	; (8007110 <interrupt_WallCut+0xb78>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d12a      	bne.n	800700e <interrupt_WallCut+0xa76>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006fb8:	4b51      	ldr	r3, [pc, #324]	; (8007100 <interrupt_WallCut+0xb68>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7f9 faeb 	bl	8000598 <__aeabi_f2d>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	4b50      	ldr	r3, [pc, #320]	; (8007108 <interrupt_WallCut+0xb70>)
 8006fc8:	ed93 7a00 	vldr	s14, [r3]
 8006fcc:	4b4f      	ldr	r3, [pc, #316]	; (800710c <interrupt_WallCut+0xb74>)
 8006fce:	edd3 7a00 	vldr	s15, [r3]
 8006fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006fd6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006fda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fde:	ee16 0a90 	vmov	r0, s13
 8006fe2:	f7f9 fad9 	bl	8000598 <__aeabi_f2d>
 8006fe6:	a33e      	add	r3, pc, #248	; (adr r3, 80070e0 <interrupt_WallCut+0xb48>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 fb2c 	bl	8000648 <__aeabi_dmul>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f7f9 f970 	bl	80002dc <__adddf3>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4610      	mov	r0, r2
 8007002:	4619      	mov	r1, r3
 8007004:	f7f9 fdf8 	bl	8000bf8 <__aeabi_d2f>
 8007008:	4603      	mov	r3, r0
 800700a:	4a3d      	ldr	r2, [pc, #244]	; (8007100 <interrupt_WallCut+0xb68>)
 800700c:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 800700e:	4b40      	ldr	r3, [pc, #256]	; (8007110 <interrupt_WallCut+0xb78>)
 8007010:	2201      	movs	r2, #1
 8007012:	701a      	strb	r2, [r3, #0]
}
 8007014:	e05f      	b.n	80070d6 <interrupt_WallCut+0xb3e>
		NoWallCountL90 = 0;
 8007016:	4b3f      	ldr	r3, [pc, #252]	; (8007114 <interrupt_WallCut+0xb7c>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 800701c:	4b3e      	ldr	r3, [pc, #248]	; (8007118 <interrupt_WallCut+0xb80>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8007022:	4b3e      	ldr	r3, [pc, #248]	; (800711c <interrupt_WallCut+0xb84>)
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8007028:	4b3d      	ldr	r3, [pc, #244]	; (8007120 <interrupt_WallCut+0xb88>)
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 800702e:	4b3d      	ldr	r3, [pc, #244]	; (8007124 <interrupt_WallCut+0xb8c>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8007034:	4b2e      	ldr	r3, [pc, #184]	; (80070f0 <interrupt_WallCut+0xb58>)
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <interrupt_WallCut+0xb90>)
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8007042:	4b3a      	ldr	r3, [pc, #232]	; (800712c <interrupt_WallCut+0xb94>)
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 800704a:	4b39      	ldr	r3, [pc, #228]	; (8007130 <interrupt_WallCut+0xb98>)
 800704c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007050:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8007052:	4b38      	ldr	r3, [pc, #224]	; (8007134 <interrupt_WallCut+0xb9c>)
 8007054:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007058:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 800705a:	4b37      	ldr	r3, [pc, #220]	; (8007138 <interrupt_WallCut+0xba0>)
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8007062:	4b27      	ldr	r3, [pc, #156]	; (8007100 <interrupt_WallCut+0xb68>)
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 800706a:	4b34      	ldr	r3, [pc, #208]	; (800713c <interrupt_WallCut+0xba4>)
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <interrupt_WallCut+0xb6c>)
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 800707a:	4b31      	ldr	r3, [pc, #196]	; (8007140 <interrupt_WallCut+0xba8>)
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8007080:	4b30      	ldr	r3, [pc, #192]	; (8007144 <interrupt_WallCut+0xbac>)
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8007086:	4b30      	ldr	r3, [pc, #192]	; (8007148 <interrupt_WallCut+0xbb0>)
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 800708c:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <interrupt_WallCut+0xb5c>)
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <interrupt_WallCut+0xbb4>)
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8007098:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <interrupt_WallCut+0xb78>)
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 800709e:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <interrupt_WallCut+0xbb8>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 80070a4:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <interrupt_WallCut+0xbbc>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 80070aa:	4b2b      	ldr	r3, [pc, #172]	; (8007158 <interrupt_WallCut+0xbc0>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 80070b0:	4b29      	ldr	r3, [pc, #164]	; (8007158 <interrupt_WallCut+0xbc0>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 80070b6:	4b29      	ldr	r3, [pc, #164]	; (800715c <interrupt_WallCut+0xbc4>)
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 80070be:	4b28      	ldr	r3, [pc, #160]	; (8007160 <interrupt_WallCut+0xbc8>)
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 80070c6:	4b27      	ldr	r3, [pc, #156]	; (8007164 <interrupt_WallCut+0xbcc>)
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <interrupt_WallCut+0xb54>)
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bdb0      	pop	{r4, r5, r7, pc}
 80070de:	bf00      	nop
 80070e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80070e4:	3f50624d 	.word	0x3f50624d
 80070e8:	200002b8 	.word	0x200002b8
 80070ec:	20000604 	.word	0x20000604
 80070f0:	200005c4 	.word	0x200005c4
 80070f4:	200005ef 	.word	0x200005ef
 80070f8:	455ac000 	.word	0x455ac000
 80070fc:	00000000 	.word	0x00000000
 8007100:	200005dc 	.word	0x200005dc
 8007104:	200005e4 	.word	0x200005e4
 8007108:	20000258 	.word	0x20000258
 800710c:	2000025c 	.word	0x2000025c
 8007110:	200005f1 	.word	0x200005f1
 8007114:	200005b8 	.word	0x200005b8
 8007118:	200005b4 	.word	0x200005b4
 800711c:	200005c0 	.word	0x200005c0
 8007120:	200005bc 	.word	0x200005bc
 8007124:	200005c8 	.word	0x200005c8
 8007128:	200005d0 	.word	0x200005d0
 800712c:	200005cc 	.word	0x200005cc
 8007130:	200005d8 	.word	0x200005d8
 8007134:	200005d4 	.word	0x200005d4
 8007138:	200005e0 	.word	0x200005e0
 800713c:	200005e8 	.word	0x200005e8
 8007140:	200005ec 	.word	0x200005ec
 8007144:	200005ed 	.word	0x200005ed
 8007148:	200005ee 	.word	0x200005ee
 800714c:	200005f0 	.word	0x200005f0
 8007150:	200005f2 	.word	0x200005f2
 8007154:	200005f3 	.word	0x200005f3
 8007158:	200005f4 	.word	0x200005f4
 800715c:	200005f8 	.word	0x200005f8
 8007160:	200005fc 	.word	0x200005fc
 8007164:	20000600 	.word	0x20000600

08007168 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800717a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800717e:	f013 fe0f 	bl	801ada0 <HAL_GPIO_WritePin>
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	2140      	movs	r1, #64	; 0x40
 800719c:	4803      	ldr	r0, [pc, #12]	; (80071ac <pl_yellow_LED_3+0x20>)
 800719e:	f013 fdff 	bl	801ada0 <HAL_GPIO_WritePin>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	48000800 	.word	0x48000800

080071b0 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071c2:	4803      	ldr	r0, [pc, #12]	; (80071d0 <pl_yellow_LED_6+0x20>)
 80071c4:	f013 fdec 	bl	801ada0 <HAL_GPIO_WritePin>
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	48000400 	.word	0x48000400

080071d4 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071e6:	4803      	ldr	r0, [pc, #12]	; (80071f4 <pl_yellow_LED_8+0x20>)
 80071e8:	f013 fdda 	bl	801ada0 <HAL_GPIO_WritePin>
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	48000400 	.word	0x48000400

080071f8 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80071fc:	2200      	movs	r2, #0
 80071fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007206:	f013 fdcb 	bl	801ada0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 800720a:	2200      	movs	r2, #0
 800720c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007214:	f013 fdc4 	bl	801ada0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007218:	2200      	movs	r2, #0
 800721a:	2140      	movs	r1, #64	; 0x40
 800721c:	4811      	ldr	r0, [pc, #68]	; (8007264 <pl_yellow_LED_off+0x6c>)
 800721e:	f013 fdbf 	bl	801ada0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007222:	2200      	movs	r2, #0
 8007224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007228:	480f      	ldr	r0, [pc, #60]	; (8007268 <pl_yellow_LED_off+0x70>)
 800722a:	f013 fdb9 	bl	801ada0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800722e:	2200      	movs	r2, #0
 8007230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007234:	480c      	ldr	r0, [pc, #48]	; (8007268 <pl_yellow_LED_off+0x70>)
 8007236:	f013 fdb3 	bl	801ada0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800723a:	2200      	movs	r2, #0
 800723c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007240:	4809      	ldr	r0, [pc, #36]	; (8007268 <pl_yellow_LED_off+0x70>)
 8007242:	f013 fdad 	bl	801ada0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007246:	2200      	movs	r2, #0
 8007248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800724c:	4806      	ldr	r0, [pc, #24]	; (8007268 <pl_yellow_LED_off+0x70>)
 800724e:	f013 fda7 	bl	801ada0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007252:	2200      	movs	r2, #0
 8007254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007258:	4803      	ldr	r0, [pc, #12]	; (8007268 <pl_yellow_LED_off+0x70>)
 800725a:	f013 fda1 	bl	801ada0 <HAL_GPIO_WritePin>
}
 800725e:	bf00      	nop
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	48000800 	.word	0x48000800
 8007268:	48000400 	.word	0x48000400

0800726c <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ac:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072b4:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80072bc:	2201      	movs	r2, #1
 80072be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072c6:	f013 fd6b 	bl	801ada0 <HAL_GPIO_WritePin>
 80072ca:	e006      	b.n	80072da <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80072cc:	2200      	movs	r2, #0
 80072ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072d6:	f013 fd63 	bl	801ada0 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d007      	beq.n	80072f0 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 80072e0:	2201      	movs	r2, #1
 80072e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072ea:	f013 fd59 	bl	801ada0 <HAL_GPIO_WritePin>
 80072ee:	e006      	b.n	80072fe <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80072f0:	2200      	movs	r2, #0
 80072f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072fa:	f013 fd51 	bl	801ada0 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 80072fe:	7b7b      	ldrb	r3, [r7, #13]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007304:	2201      	movs	r2, #1
 8007306:	2140      	movs	r1, #64	; 0x40
 8007308:	482e      	ldr	r0, [pc, #184]	; (80073c4 <pl_yellow_LED_count+0x158>)
 800730a:	f013 fd49 	bl	801ada0 <HAL_GPIO_WritePin>
 800730e:	e004      	b.n	800731a <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007310:	2200      	movs	r2, #0
 8007312:	2140      	movs	r1, #64	; 0x40
 8007314:	482b      	ldr	r0, [pc, #172]	; (80073c4 <pl_yellow_LED_count+0x158>)
 8007316:	f013 fd43 	bl	801ada0 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 800731a:	7b3b      	ldrb	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007320:	2201      	movs	r2, #1
 8007322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007326:	4828      	ldr	r0, [pc, #160]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007328:	f013 fd3a 	bl	801ada0 <HAL_GPIO_WritePin>
 800732c:	e005      	b.n	800733a <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 800732e:	2200      	movs	r2, #0
 8007330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007334:	4824      	ldr	r0, [pc, #144]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007336:	f013 fd33 	bl	801ada0 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8007340:	2201      	movs	r2, #1
 8007342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007346:	4820      	ldr	r0, [pc, #128]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007348:	f013 fd2a 	bl	801ada0 <HAL_GPIO_WritePin>
 800734c:	e005      	b.n	800735a <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800734e:	2200      	movs	r2, #0
 8007350:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007354:	481c      	ldr	r0, [pc, #112]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007356:	f013 fd23 	bl	801ada0 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 800735a:	7abb      	ldrb	r3, [r7, #10]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8007360:	2201      	movs	r2, #1
 8007362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007366:	4818      	ldr	r0, [pc, #96]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007368:	f013 fd1a 	bl	801ada0 <HAL_GPIO_WritePin>
 800736c:	e005      	b.n	800737a <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800736e:	2200      	movs	r2, #0
 8007370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007374:	4814      	ldr	r0, [pc, #80]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007376:	f013 fd13 	bl	801ada0 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 800737a:	7a7b      	ldrb	r3, [r7, #9]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d006      	beq.n	800738e <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007380:	2201      	movs	r2, #1
 8007382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007386:	4810      	ldr	r0, [pc, #64]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007388:	f013 fd0a 	bl	801ada0 <HAL_GPIO_WritePin>
 800738c:	e005      	b.n	800739a <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 800738e:	2200      	movs	r2, #0
 8007390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007394:	480c      	ldr	r0, [pc, #48]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 8007396:	f013 fd03 	bl	801ada0 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 800739a:	7a3b      	ldrb	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 80073a0:	2201      	movs	r2, #1
 80073a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073a6:	4808      	ldr	r0, [pc, #32]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 80073a8:	f013 fcfa 	bl	801ada0 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 80073ac:	e005      	b.n	80073ba <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 80073ae:	2200      	movs	r2, #0
 80073b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073b4:	4804      	ldr	r0, [pc, #16]	; (80073c8 <pl_yellow_LED_count+0x15c>)
 80073b6:	f013 fcf3 	bl	801ada0 <HAL_GPIO_WritePin>
}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	48000800 	.word	0x48000800
 80073c8:	48000400 	.word	0x48000400

080073cc <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073de:	4803      	ldr	r0, [pc, #12]	; (80073ec <pl_r_blue_LED+0x20>)
 80073e0:	f013 fcde 	bl	801ada0 <HAL_GPIO_WritePin>
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	48000800 	.word	0x48000800

080073f0 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	2104      	movs	r1, #4
 8007400:	4803      	ldr	r0, [pc, #12]	; (8007410 <pl_l_blue_LED+0x20>)
 8007402:	f013 fccd 	bl	801ada0 <HAL_GPIO_WritePin>
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	48000400 	.word	0x48000400

08007414 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	460a      	mov	r2, r1
 800741e:	80fb      	strh	r3, [r7, #6]
 8007420:	4613      	mov	r3, r2
 8007422:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007424:	2200      	movs	r2, #0
 8007426:	2110      	movs	r1, #16
 8007428:	4833      	ldr	r0, [pc, #204]	; (80074f8 <encoder_read_byte_R+0xe4>)
 800742a:	f013 fcb9 	bl	801ada0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007434:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007436:	2300      	movs	r3, #0
 8007438:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800743a:	2300      	movs	r3, #0
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e00d      	b.n	800745c <encoder_read_byte_R+0x48>
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	fa42 f303 	asr.w	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	8bfb      	ldrh	r3, [r7, #30]
 8007452:	4413      	add	r3, r2
 8007454:	83fb      	strh	r3, [r7, #30]
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	3301      	adds	r3, #1
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b0e      	cmp	r3, #14
 8007460:	ddee      	ble.n	8007440 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007462:	8bfb      	ldrh	r3, [r7, #30]
 8007464:	03db      	lsls	r3, r3, #15
 8007466:	b21a      	sxth	r2, r3
 8007468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800746c:	4313      	orrs	r3, r2
 800746e:	b21b      	sxth	r3, r3
 8007470:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	b29b      	uxth	r3, r3
 8007478:	b2db      	uxtb	r3, r3
 800747a:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007482:	f107 0110 	add.w	r1, r7, #16
 8007486:	2364      	movs	r3, #100	; 0x64
 8007488:	2202      	movs	r2, #2
 800748a:	481c      	ldr	r0, [pc, #112]	; (80074fc <encoder_read_byte_R+0xe8>)
 800748c:	f014 fd6b 	bl	801bf66 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007490:	2201      	movs	r2, #1
 8007492:	2110      	movs	r1, #16
 8007494:	4818      	ldr	r0, [pc, #96]	; (80074f8 <encoder_read_byte_R+0xe4>)
 8007496:	f013 fc83 	bl	801ada0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	e002      	b.n	80074a6 <encoder_read_byte_R+0x92>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	3301      	adds	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b95      	cmp	r3, #149	; 0x95
 80074aa:	ddf9      	ble.n	80074a0 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80074ac:	2200      	movs	r2, #0
 80074ae:	2110      	movs	r1, #16
 80074b0:	4811      	ldr	r0, [pc, #68]	; (80074f8 <encoder_read_byte_R+0xe4>)
 80074b2:	f013 fc75 	bl	801ada0 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 80074b6:	88bb      	ldrh	r3, [r7, #4]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 80074c0:	88bb      	ldrh	r3, [r7, #4]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 80074c6:	f107 010c 	add.w	r1, r7, #12
 80074ca:	2364      	movs	r3, #100	; 0x64
 80074cc:	2202      	movs	r2, #2
 80074ce:	480b      	ldr	r0, [pc, #44]	; (80074fc <encoder_read_byte_R+0xe8>)
 80074d0:	f014 feb7 	bl	801c242 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 80074d4:	7b3b      	ldrb	r3, [r7, #12]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	b21a      	sxth	r2, r3
 80074da:	7b7b      	ldrb	r3, [r7, #13]
 80074dc:	b21b      	sxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b21b      	sxth	r3, r3
 80074e2:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80074e4:	2201      	movs	r2, #1
 80074e6:	2110      	movs	r1, #16
 80074e8:	4803      	ldr	r0, [pc, #12]	; (80074f8 <encoder_read_byte_R+0xe4>)
 80074ea:	f013 fc59 	bl	801ada0 <HAL_GPIO_WritePin>

	return data;
 80074ee:	88bb      	ldrh	r3, [r7, #4]

}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3720      	adds	r7, #32
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	48000400 	.word	0x48000400
 80074fc:	2000d9e0 	.word	0x2000d9e0

08007500 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	460a      	mov	r2, r1
 800750a:	80fb      	strh	r3, [r7, #6]
 800750c:	4613      	mov	r3, r2
 800750e:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007510:	2200      	movs	r2, #0
 8007512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800751a:	f013 fc41 	bl	801ada0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007524:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007526:	2300      	movs	r3, #0
 8007528:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e00d      	b.n	800754c <encoder_read_byte_L+0x4c>
 8007530:	88fa      	ldrh	r2, [r7, #6]
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	fa42 f303 	asr.w	r3, r2, r3
 8007538:	b29b      	uxth	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	8bfb      	ldrh	r3, [r7, #30]
 8007542:	4413      	add	r3, r2
 8007544:	83fb      	strh	r3, [r7, #30]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	3301      	adds	r3, #1
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2b0e      	cmp	r3, #14
 8007550:	ddee      	ble.n	8007530 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007552:	8bfb      	ldrh	r3, [r7, #30]
 8007554:	03db      	lsls	r3, r3, #15
 8007556:	b21a      	sxth	r2, r3
 8007558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800755c:	4313      	orrs	r3, r2
 800755e:	b21b      	sxth	r3, r3
 8007560:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	0a1b      	lsrs	r3, r3, #8
 8007566:	b29b      	uxth	r3, r3
 8007568:	b2db      	uxtb	r3, r3
 800756a:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007572:	f107 0110 	add.w	r1, r7, #16
 8007576:	2364      	movs	r3, #100	; 0x64
 8007578:	2202      	movs	r2, #2
 800757a:	481e      	ldr	r0, [pc, #120]	; (80075f4 <encoder_read_byte_L+0xf4>)
 800757c:	f014 fcf3 	bl	801bf66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007580:	2201      	movs	r2, #1
 8007582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800758a:	f013 fc09 	bl	801ada0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	e002      	b.n	800759a <encoder_read_byte_L+0x9a>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	3301      	adds	r3, #1
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b95      	cmp	r3, #149	; 0x95
 800759e:	ddf9      	ble.n	8007594 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80075a0:	2200      	movs	r2, #0
 80075a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075aa:	f013 fbf9 	bl	801ada0 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 80075ae:	88bb      	ldrh	r3, [r7, #4]
 80075b0:	0a1b      	lsrs	r3, r3, #8
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 80075b8:	88bb      	ldrh	r3, [r7, #4]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 80075be:	f107 010c 	add.w	r1, r7, #12
 80075c2:	2364      	movs	r3, #100	; 0x64
 80075c4:	2202      	movs	r2, #2
 80075c6:	480b      	ldr	r0, [pc, #44]	; (80075f4 <encoder_read_byte_L+0xf4>)
 80075c8:	f014 fe3b 	bl	801c242 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 80075cc:	7b3b      	ldrb	r3, [r7, #12]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	b21a      	sxth	r2, r3
 80075d2:	7b7b      	ldrb	r3, [r7, #13]
 80075d4:	b21b      	sxth	r3, r3
 80075d6:	4313      	orrs	r3, r2
 80075d8:	b21b      	sxth	r3, r3
 80075da:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80075dc:	2201      	movs	r2, #1
 80075de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075e6:	f013 fbdb 	bl	801ada0 <HAL_GPIO_WritePin>

	return data;
 80075ea:	88bb      	ldrh	r3, [r7, #4]

}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	2000d9e0 	.word	0x2000d9e0

080075f8 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80075fc:	2100      	movs	r1, #0
 80075fe:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007602:	f7ff ff07 	bl	8007414 <encoder_read_byte_R>
 8007606:	4603      	mov	r3, r0
 8007608:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007614:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800765c <AS5047_DataUpdate+0x64>
 8007618:	ee27 7a87 	vmul.f32	s14, s15, s14
 800761c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007660 <AS5047_DataUpdate+0x68>
 8007620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007624:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <AS5047_DataUpdate+0x6c>)
 8007626:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 800762a:	2100      	movs	r1, #0
 800762c:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007630:	f7ff ff66 	bl	8007500 <encoder_read_byte_L>
 8007634:	4603      	mov	r3, r0
 8007636:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007642:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800765c <AS5047_DataUpdate+0x64>
 8007646:	ee27 7a87 	vmul.f32	s14, s15, s14
 800764a:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007660 <AS5047_DataUpdate+0x68>
 800764e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <AS5047_DataUpdate+0x70>)
 8007654:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007658:	bf00      	nop
 800765a:	bd80      	pop	{r7, pc}
 800765c:	43b40000 	.word	0x43b40000
 8007660:	46800000 	.word	0x46800000
 8007664:	200006d8 	.word	0x200006d8
 8007668:	200006dc 	.word	0x200006dc

0800766c <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
		  record_out();
 8007670:	f000 f91a 	bl	80078a8 <record_out>
		  maze_display();
 8007674:	f00d f886 	bl	8014784 <maze_display>
		  flash_record_init();
 8007678:	f000 f9c2 	bl	8007a00 <flash_record_init>
		  record_in();
 800767c:	f000 f858 	bl	8007730 <record_in>
}
 8007680:	bf00      	nop
 8007682:	bd80      	pop	{r7, pc}

08007684 <eraseFlash>:


void eraseFlash( void )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 800768e:	2301      	movs	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007692:	23fe      	movs	r3, #254	; 0xfe
 8007694:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007696:	2301      	movs	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 800769e:	1d3a      	adds	r2, r7, #4
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	4611      	mov	r1, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f013 f8d2 	bl	801a850 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80076ac:	bf00      	nop
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 80076c2:	f012 ffd9 	bl	801a678 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <writeFlash+0x1c>
 80076cc:	f7ff ffda 	bl	8007684 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	e00f      	b.n	80076f6 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	17da      	asrs	r2, r3, #31
 80076da:	461c      	mov	r4, r3
 80076dc:	4615      	mov	r5, r2
 80076de:	4622      	mov	r2, r4
 80076e0:	462b      	mov	r3, r5
 80076e2:	6979      	ldr	r1, [r7, #20]
 80076e4:	2000      	movs	r0, #0
 80076e6:	f012 ff71 	bl	801a5cc <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	3320      	adds	r3, #32
 80076ee:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	3308      	adds	r3, #8
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4413      	add	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d3e9      	bcc.n	80076d6 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8007702:	f012 ffdb 	bl	801a6bc <HAL_FLASH_Lock>

}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bdb0      	pop	{r4, r5, r7, pc}

0800770e <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4619      	mov	r1, r3
 8007720:	68b8      	ldr	r0, [r7, #8]
 8007722:	f017 fc53 	bl	801efcc <memcpy>

}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <record_in>:


void record_in(void) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
	int t = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 800773a:	4b58      	ldr	r3, [pc, #352]	; (800789c <record_in+0x16c>)
 800773c:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 800773e:	e017      	b.n	8007770 <record_in+0x40>
		record.row[t] = wall.row[t];
 8007740:	4a57      	ldr	r2, [pc, #348]	; (80078a0 <record_in+0x170>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007748:	4a56      	ldr	r2, [pc, #344]	; (80078a4 <record_in+0x174>)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 8007750:	4a53      	ldr	r2, [pc, #332]	; (80078a0 <record_in+0x170>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	330c      	adds	r3, #12
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	4413      	add	r3, r2
 800775a:	88d9      	ldrh	r1, [r3, #6]
 800775c:	4a51      	ldr	r2, [pc, #324]	; (80078a4 <record_in+0x174>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	330c      	adds	r3, #12
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	4413      	add	r3, r2
 8007766:	460a      	mov	r2, r1
 8007768:	80da      	strh	r2, [r3, #6]
		t++;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3301      	adds	r3, #1
 800776e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b0e      	cmp	r3, #14
 8007774:	dde4      	ble.n	8007740 <record_in+0x10>
	}
	t = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800777a:	e01c      	b.n	80077b6 <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 800777c:	4a48      	ldr	r2, [pc, #288]	; (80078a0 <record_in+0x170>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	331c      	adds	r3, #28
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4413      	add	r3, r2
 8007786:	8899      	ldrh	r1, [r3, #4]
 8007788:	4a46      	ldr	r2, [pc, #280]	; (80078a4 <record_in+0x174>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	331c      	adds	r3, #28
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	460a      	mov	r2, r1
 8007794:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 8007796:	4a42      	ldr	r2, [pc, #264]	; (80078a0 <record_in+0x170>)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	332c      	adds	r3, #44	; 0x2c
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	4413      	add	r3, r2
 80077a0:	8859      	ldrh	r1, [r3, #2]
 80077a2:	4a40      	ldr	r2, [pc, #256]	; (80078a4 <record_in+0x174>)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	332c      	adds	r3, #44	; 0x2c
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	4413      	add	r3, r2
 80077ac:	460a      	mov	r2, r1
 80077ae:	805a      	strh	r2, [r3, #2]
		t++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3301      	adds	r3, #1
 80077b4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b0e      	cmp	r3, #14
 80077ba:	dddf      	ble.n	800777c <record_in+0x4c>
	}
	t = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 80077c0:	4b38      	ldr	r3, [pc, #224]	; (80078a4 <record_in+0x174>)
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	2301      	movs	r3, #1
 80077c8:	2201      	movs	r2, #1
 80077ca:	6838      	ldr	r0, [r7, #0]
 80077cc:	f7ff ff72 	bl	80076b4 <writeFlash>
	address+=16;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	3310      	adds	r3, #16
 80077d4:	603b      	str	r3, [r7, #0]
	t=1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 80077da:	e00f      	b.n	80077fc <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 80077dc:	4a31      	ldr	r2, [pc, #196]	; (80078a4 <record_in+0x174>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077e4:	4619      	mov	r1, r3
 80077e6:	2300      	movs	r3, #0
 80077e8:	2201      	movs	r2, #1
 80077ea:	6838      	ldr	r0, [r7, #0]
 80077ec:	f7ff ff62 	bl	80076b4 <writeFlash>
	address+=16;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	3310      	adds	r3, #16
 80077f4:	603b      	str	r3, [r7, #0]
	t++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3301      	adds	r3, #1
 80077fa:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b0e      	cmp	r3, #14
 8007800:	ddec      	ble.n	80077dc <record_in+0xac>
	}

	t=0;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007806:	e011      	b.n	800782c <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 8007808:	4a26      	ldr	r2, [pc, #152]	; (80078a4 <record_in+0x174>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	330c      	adds	r3, #12
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	88db      	ldrh	r3, [r3, #6]
 8007814:	4619      	mov	r1, r3
 8007816:	2300      	movs	r3, #0
 8007818:	2201      	movs	r2, #1
 800781a:	6838      	ldr	r0, [r7, #0]
 800781c:	f7ff ff4a 	bl	80076b4 <writeFlash>
	address+=16;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	3310      	adds	r3, #16
 8007824:	603b      	str	r3, [r7, #0]
	t++;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3301      	adds	r3, #1
 800782a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b0e      	cmp	r3, #14
 8007830:	ddea      	ble.n	8007808 <record_in+0xd8>
	}

	t=0;
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007836:	e011      	b.n	800785c <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 8007838:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <record_in+0x174>)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	331c      	adds	r3, #28
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	4413      	add	r3, r2
 8007842:	889b      	ldrh	r3, [r3, #4]
 8007844:	4619      	mov	r1, r3
 8007846:	2300      	movs	r3, #0
 8007848:	2201      	movs	r2, #1
 800784a:	6838      	ldr	r0, [r7, #0]
 800784c:	f7ff ff32 	bl	80076b4 <writeFlash>
	address+=16;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	3310      	adds	r3, #16
 8007854:	603b      	str	r3, [r7, #0]
	t++;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3301      	adds	r3, #1
 800785a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b0e      	cmp	r3, #14
 8007860:	ddea      	ble.n	8007838 <record_in+0x108>
	}

	t=0;
 8007862:	2300      	movs	r3, #0
 8007864:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007866:	e011      	b.n	800788c <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8007868:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <record_in+0x174>)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	332c      	adds	r3, #44	; 0x2c
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	4413      	add	r3, r2
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	4619      	mov	r1, r3
 8007876:	2300      	movs	r3, #0
 8007878:	2201      	movs	r2, #1
 800787a:	6838      	ldr	r0, [r7, #0]
 800787c:	f7ff ff1a 	bl	80076b4 <writeFlash>
	address+=16;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	3310      	adds	r3, #16
 8007884:	603b      	str	r3, [r7, #0]
	t++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3301      	adds	r3, #1
 800788a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b0e      	cmp	r3, #14
 8007890:	ddea      	ble.n	8007868 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	0807f000 	.word	0x0807f000
 80078a0:	20000c3c 	.word	0x20000c3c
 80078a4:	20000cb4 	.word	0x20000cb4

080078a8 <record_out>:


void record_out(void) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80078b2:	4b50      	ldr	r3, [pc, #320]	; (80079f4 <record_out+0x14c>)
 80078b4:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 80078b6:	e00e      	b.n	80078d6 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	4a4e      	ldr	r2, [pc, #312]	; (80079f8 <record_out+0x150>)
 80078be:	4413      	add	r3, r2
 80078c0:	2202      	movs	r2, #2
 80078c2:	4619      	mov	r1, r3
 80078c4:	6838      	ldr	r0, [r7, #0]
 80078c6:	f7ff ff22 	bl	800770e <loadFlash>
	address+=16;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	3310      	adds	r3, #16
 80078ce:	603b      	str	r3, [r7, #0]
	t++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3301      	adds	r3, #1
 80078d4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b0e      	cmp	r3, #14
 80078da:	dded      	ble.n	80078b8 <record_out+0x10>
	}

	t=0;
 80078dc:	2300      	movs	r3, #0
 80078de:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80078e0:	e010      	b.n	8007904 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	330c      	adds	r3, #12
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4a43      	ldr	r2, [pc, #268]	; (80079f8 <record_out+0x150>)
 80078ea:	4413      	add	r3, r2
 80078ec:	3306      	adds	r3, #6
 80078ee:	2202      	movs	r2, #2
 80078f0:	4619      	mov	r1, r3
 80078f2:	6838      	ldr	r0, [r7, #0]
 80078f4:	f7ff ff0b 	bl	800770e <loadFlash>
	address+=16;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	3310      	adds	r3, #16
 80078fc:	603b      	str	r3, [r7, #0]
	t++;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3301      	adds	r3, #1
 8007902:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b0e      	cmp	r3, #14
 8007908:	ddeb      	ble.n	80078e2 <record_out+0x3a>
	}

	t=0;
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800790e:	e010      	b.n	8007932 <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	331c      	adds	r3, #28
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4a38      	ldr	r2, [pc, #224]	; (80079f8 <record_out+0x150>)
 8007918:	4413      	add	r3, r2
 800791a:	3304      	adds	r3, #4
 800791c:	2202      	movs	r2, #2
 800791e:	4619      	mov	r1, r3
 8007920:	6838      	ldr	r0, [r7, #0]
 8007922:	f7ff fef4 	bl	800770e <loadFlash>
		address+=16;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	3310      	adds	r3, #16
 800792a:	603b      	str	r3, [r7, #0]
		t++;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3301      	adds	r3, #1
 8007930:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b0e      	cmp	r3, #14
 8007936:	ddeb      	ble.n	8007910 <record_out+0x68>
	}

	t=0;
 8007938:	2300      	movs	r3, #0
 800793a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800793c:	e010      	b.n	8007960 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	332c      	adds	r3, #44	; 0x2c
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	4a2c      	ldr	r2, [pc, #176]	; (80079f8 <record_out+0x150>)
 8007946:	4413      	add	r3, r2
 8007948:	3302      	adds	r3, #2
 800794a:	2202      	movs	r2, #2
 800794c:	4619      	mov	r1, r3
 800794e:	6838      	ldr	r0, [r7, #0]
 8007950:	f7ff fedd 	bl	800770e <loadFlash>
		address+=16;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	3310      	adds	r3, #16
 8007958:	603b      	str	r3, [r7, #0]
		t++;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3301      	adds	r3, #1
 800795e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b0e      	cmp	r3, #14
 8007964:	ddeb      	ble.n	800793e <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800796a:	e017      	b.n	800799c <record_out+0xf4>
		wall.row[t] = record.row[t];
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <record_out+0x150>)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007974:	4a21      	ldr	r2, [pc, #132]	; (80079fc <record_out+0x154>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 800797c:	4a1e      	ldr	r2, [pc, #120]	; (80079f8 <record_out+0x150>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	330c      	adds	r3, #12
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	4413      	add	r3, r2
 8007986:	88d9      	ldrh	r1, [r3, #6]
 8007988:	4a1c      	ldr	r2, [pc, #112]	; (80079fc <record_out+0x154>)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	330c      	adds	r3, #12
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	4413      	add	r3, r2
 8007992:	460a      	mov	r2, r1
 8007994:	80da      	strh	r2, [r3, #6]
		t++;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3301      	adds	r3, #1
 800799a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b0e      	cmp	r3, #14
 80079a0:	dde4      	ble.n	800796c <record_out+0xc4>
	}
	t = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80079a6:	e01c      	b.n	80079e2 <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <record_out+0x150>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	331c      	adds	r3, #28
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	4413      	add	r3, r2
 80079b2:	8899      	ldrh	r1, [r3, #4]
 80079b4:	4a11      	ldr	r2, [pc, #68]	; (80079fc <record_out+0x154>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	331c      	adds	r3, #28
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	4413      	add	r3, r2
 80079be:	460a      	mov	r2, r1
 80079c0:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 80079c2:	4a0d      	ldr	r2, [pc, #52]	; (80079f8 <record_out+0x150>)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	332c      	adds	r3, #44	; 0x2c
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	4413      	add	r3, r2
 80079cc:	8859      	ldrh	r1, [r3, #2]
 80079ce:	4a0b      	ldr	r2, [pc, #44]	; (80079fc <record_out+0x154>)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	332c      	adds	r3, #44	; 0x2c
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	4413      	add	r3, r2
 80079d8:	460a      	mov	r2, r1
 80079da:	805a      	strh	r2, [r3, #2]
		t++;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3301      	adds	r3, #1
 80079e0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b0e      	cmp	r3, #14
 80079e6:	dddf      	ble.n	80079a8 <record_out+0x100>
	}

	t = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	607b      	str	r3, [r7, #4]

}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	0807f000 	.word	0x0807f000
 80079f8:	20000cb4 	.word	0x20000cb4
 80079fc:	20000c3c 	.word	0x20000c3c

08007a00 <flash_record_init>:

void flash_record_init(void){
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
	int t = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a0a:	e013      	b.n	8007a34 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 8007a0c:	4a1e      	ldr	r2, [pc, #120]	; (8007a88 <flash_record_init+0x88>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007a14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	b299      	uxth	r1, r3
 8007a20:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <flash_record_init+0x88>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	330c      	adds	r3, #12
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	4413      	add	r3, r2
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	80da      	strh	r2, [r3, #6]
		t++;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3301      	adds	r3, #1
 8007a32:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b0e      	cmp	r3, #14
 8007a38:	dde8      	ble.n	8007a0c <flash_record_init+0xc>
	}
	t = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a3e:	e018      	b.n	8007a72 <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	b299      	uxth	r1, r3
 8007a48:	4a0f      	ldr	r2, [pc, #60]	; (8007a88 <flash_record_init+0x88>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	331c      	adds	r3, #28
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	4413      	add	r3, r2
 8007a52:	460a      	mov	r2, r1
 8007a54:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	b299      	uxth	r1, r3
 8007a5e:	4a0a      	ldr	r2, [pc, #40]	; (8007a88 <flash_record_init+0x88>)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	332c      	adds	r3, #44	; 0x2c
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4413      	add	r3, r2
 8007a68:	460a      	mov	r2, r1
 8007a6a:	805a      	strh	r2, [r3, #2]
		t++;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b0e      	cmp	r3, #14
 8007a76:	dde3      	ble.n	8007a40 <flash_record_init+0x40>
	}

}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	20000c3c 	.word	0x20000c3c

08007a8c <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007a96:	2200      	movs	r2, #0
 8007a98:	2110      	movs	r1, #16
 8007a9a:	4810      	ldr	r0, [pc, #64]	; (8007adc <gyro_read_byte+0x50>)
 8007a9c:	f013 f980 	bl	801ada0 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007aaa:	f107 010f 	add.w	r1, r7, #15
 8007aae:	2364      	movs	r3, #100	; 0x64
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	480b      	ldr	r0, [pc, #44]	; (8007ae0 <gyro_read_byte+0x54>)
 8007ab4:	f014 fa57 	bl	801bf66 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007ab8:	f107 010e 	add.w	r1, r7, #14
 8007abc:	2364      	movs	r3, #100	; 0x64
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4807      	ldr	r0, [pc, #28]	; (8007ae0 <gyro_read_byte+0x54>)
 8007ac2:	f014 fbbe 	bl	801c242 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	2110      	movs	r1, #16
 8007aca:	4804      	ldr	r0, [pc, #16]	; (8007adc <gyro_read_byte+0x50>)
 8007acc:	f013 f968 	bl	801ada0 <HAL_GPIO_WritePin>

	return val;
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]

}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	48000800 	.word	0x48000800
 8007ae0:	2000d97c 	.word	0x2000d97c

08007ae4 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	460a      	mov	r2, r1
 8007aee:	71fb      	strb	r3, [r7, #7]
 8007af0:	4613      	mov	r3, r2
 8007af2:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8007afe:	2200      	movs	r2, #0
 8007b00:	2110      	movs	r1, #16
 8007b02:	480c      	ldr	r0, [pc, #48]	; (8007b34 <gyro_write_byte+0x50>)
 8007b04:	f013 f94c 	bl	801ada0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007b08:	f107 010f 	add.w	r1, r7, #15
 8007b0c:	2364      	movs	r3, #100	; 0x64
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4809      	ldr	r0, [pc, #36]	; (8007b38 <gyro_write_byte+0x54>)
 8007b12:	f014 fa28 	bl	801bf66 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 8007b16:	1db9      	adds	r1, r7, #6
 8007b18:	2364      	movs	r3, #100	; 0x64
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4806      	ldr	r0, [pc, #24]	; (8007b38 <gyro_write_byte+0x54>)
 8007b1e:	f014 fa22 	bl	801bf66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8007b22:	2201      	movs	r2, #1
 8007b24:	2110      	movs	r1, #16
 8007b26:	4803      	ldr	r0, [pc, #12]	; (8007b34 <gyro_write_byte+0x50>)
 8007b28:	f013 f93a 	bl	801ada0 <HAL_GPIO_WritePin>

}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	48000800 	.word	0x48000800
 8007b38:	2000d97c 	.word	0x2000d97c

08007b3c <pl_gyro_init>:

void pl_gyro_init(void)

{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8007b46:	2075      	movs	r0, #117	; 0x75
 8007b48:	f7ff ffa0 	bl	8007a8c <gyro_read_byte>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	4619      	mov	r1, r3
 8007b54:	481b      	ldr	r0, [pc, #108]	; (8007bc4 <pl_gyro_init+0x88>)
 8007b56:	f017 feb9 	bl	801f8cc <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	2b98      	cmp	r3, #152	; 0x98
 8007b5e:	d00e      	beq.n	8007b7e <pl_gyro_init+0x42>

		HAL_Delay(100);
 8007b60:	2064      	movs	r0, #100	; 0x64
 8007b62:	f00f ff61 	bl	8017a28 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8007b66:	2075      	movs	r0, #117	; 0x75
 8007b68:	f7ff ff90 	bl	8007a8c <gyro_read_byte>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	2b98      	cmp	r3, #152	; 0x98
 8007b74:	d003      	beq.n	8007b7e <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8007b76:	4814      	ldr	r0, [pc, #80]	; (8007bc8 <pl_gyro_init+0x8c>)
 8007b78:	f017 fea8 	bl	801f8cc <iprintf>
 8007b7c:	e7fb      	b.n	8007b76 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007b7e:	2100      	movs	r1, #0
 8007b80:	206b      	movs	r0, #107	; 0x6b
 8007b82:	f7ff ffaf 	bl	8007ae4 <gyro_write_byte>

	HAL_Delay(50);
 8007b86:	2032      	movs	r0, #50	; 0x32
 8007b88:	f00f ff4e 	bl	8017a28 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	206c      	movs	r0, #108	; 0x6c
 8007b90:	f7ff ffa8 	bl	8007ae4 <gyro_write_byte>

	HAL_Delay(50);
 8007b94:	2032      	movs	r0, #50	; 0x32
 8007b96:	f00f ff47 	bl	8017a28 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8007b9a:	2118      	movs	r1, #24
 8007b9c:	201b      	movs	r0, #27
 8007b9e:	f7ff ffa1 	bl	8007ae4 <gyro_write_byte>

	HAL_Delay(50);
 8007ba2:	2032      	movs	r0, #50	; 0x32
 8007ba4:	f00f ff40 	bl	8017a28 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007ba8:	2118      	movs	r1, #24
 8007baa:	201c      	movs	r0, #28
 8007bac:	f7ff ff9a 	bl	8007ae4 <gyro_write_byte>

	HAL_Delay(50);
 8007bb0:	2032      	movs	r0, #50	; 0x32
 8007bb2:	f00f ff39 	bl	8017a28 <HAL_Delay>

	set_flag = 1;
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <pl_gyro_init+0x90>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]

}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	08022068 	.word	0x08022068
 8007bc8:	0802207c 	.word	0x0802207c
 8007bcc:	200006e0 	.word	0x200006e0

08007bd0 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff ff55 	bl	8007a8c <gyro_read_byte>
 8007be2:	4603      	mov	r3, r0
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	3301      	adds	r3, #1
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff ff4c 	bl	8007a8c <gyro_read_byte>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007bf8:	4323      	orrs	r3, r4
 8007bfa:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007bfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c08:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007c24 <ICM20602_GYRO_READ+0x54>
 8007c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c10:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	ee07 3a90 	vmov	s15, r3

}
 8007c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd90      	pop	{r4, r7, pc}
 8007c24:	41833333 	.word	0x41833333

08007c28 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff ff29 	bl	8007a8c <gyro_read_byte>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	3301      	adds	r3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff ff20 	bl	8007a8c <gyro_read_byte>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c50:	4323      	orrs	r3, r4
 8007c52:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c60:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007c7c <ICM20602_ACCEL_READ+0x54>
 8007c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c68:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	ee07 3a90 	vmov	s15, r3

}
 8007c72:	eeb0 0a67 	vmov.f32	s0, s15
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd90      	pop	{r4, r7, pc}
 8007c7c:	45000000 	.word	0x45000000

08007c80 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007c84:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <ICM20602_DataUpdate+0x70>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d12f      	bne.n	8007cec <ICM20602_DataUpdate+0x6c>

// get yawrate

		gyro.omega_y = ICM20602_GYRO_READ(0x43);
 8007c8c:	2043      	movs	r0, #67	; 0x43
 8007c8e:	f7ff ff9f 	bl	8007bd0 <ICM20602_GYRO_READ>
 8007c92:	eef0 7a40 	vmov.f32	s15, s0
 8007c96:	4b17      	ldr	r3, [pc, #92]	; (8007cf4 <ICM20602_DataUpdate+0x74>)
 8007c98:	edc3 7a01 	vstr	s15, [r3, #4]

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007c9c:	2045      	movs	r0, #69	; 0x45
 8007c9e:	f7ff ff97 	bl	8007bd0 <ICM20602_GYRO_READ>
 8007ca2:	eef0 7a40 	vmov.f32	s15, s0
 8007ca6:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <ICM20602_DataUpdate+0x74>)
 8007ca8:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007cac:	2047      	movs	r0, #71	; 0x47
 8007cae:	f7ff ff8f 	bl	8007bd0 <ICM20602_GYRO_READ>
 8007cb2:	eef0 7a40 	vmov.f32	s15, s0
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <ICM20602_DataUpdate+0x74>)
 8007cb8:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007cbc:	203b      	movs	r0, #59	; 0x3b
 8007cbe:	f7ff ffb3 	bl	8007c28 <ICM20602_ACCEL_READ>
 8007cc2:	eef0 7a40 	vmov.f32	s15, s0
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <ICM20602_DataUpdate+0x74>)
 8007cc8:	edc3 7a04 	vstr	s15, [r3, #16]

		gyro.accel_x = ICM20602_ACCEL_READ(0x3D);
 8007ccc:	203d      	movs	r0, #61	; 0x3d
 8007cce:	f7ff ffab 	bl	8007c28 <ICM20602_ACCEL_READ>
 8007cd2:	eef0 7a40 	vmov.f32	s15, s0
 8007cd6:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <ICM20602_DataUpdate+0x74>)
 8007cd8:	edc3 7a03 	vstr	s15, [r3, #12]

		gyro.accel_z = ICM20602_ACCEL_READ(0x3F);
 8007cdc:	203f      	movs	r0, #63	; 0x3f
 8007cde:	f7ff ffa3 	bl	8007c28 <ICM20602_ACCEL_READ>
 8007ce2:	eef0 7a40 	vmov.f32	s15, s0
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <ICM20602_DataUpdate+0x74>)
 8007ce8:	edc3 7a05 	vstr	s15, [r3, #20]

	}

}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	200006e0 	.word	0x200006e0
 8007cf4:	200006e4 	.word	0x200006e4

08007cf8 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007cfc:	480f      	ldr	r0, [pc, #60]	; (8007d3c <pl_motor_init+0x44>)
 8007cfe:	f014 fff7 	bl	801ccf0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007d02:	480e      	ldr	r0, [pc, #56]	; (8007d3c <pl_motor_init+0x44>)
 8007d04:	f00f f8c6 	bl	8016e94 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007d08:	480d      	ldr	r0, [pc, #52]	; (8007d40 <pl_motor_init+0x48>)
 8007d0a:	f014 fff1 	bl	801ccf0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8007d0e:	480c      	ldr	r0, [pc, #48]	; (8007d40 <pl_motor_init+0x48>)
 8007d10:	f00f f8c0 	bl	8016e94 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007d14:	2001      	movs	r0, #1
 8007d16:	f000 f81f 	bl	8007d58 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8007d1a:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <pl_motor_init+0x44>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	225a      	movs	r2, #90	; 0x5a
 8007d20:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8007d22:	2001      	movs	r0, #1
 8007d24:	f000 f840 	bl	8007da8 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007d28:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <pl_motor_init+0x44>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	225a      	movs	r2, #90	; 0x5a
 8007d2e:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007d30:	4b03      	ldr	r3, [pc, #12]	; (8007d40 <pl_motor_init+0x48>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	221e      	movs	r2, #30
 8007d36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007d38:	bf00      	nop
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	2000da94 	.word	0x2000da94
 8007d40:	2000dae0 	.word	0x2000dae0

08007d44 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d819      	bhi.n	8007d9a <pl_L_DriveMotor_mode+0x42>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <pl_L_DriveMotor_mode+0x14>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007d7d 	.word	0x08007d7d
 8007d74:	08007d8b 	.word	0x08007d8b
 8007d78:	08007d99 	.word	0x08007d99
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d82:	4808      	ldr	r0, [pc, #32]	; (8007da4 <pl_L_DriveMotor_mode+0x4c>)
 8007d84:	f013 f80c 	bl	801ada0 <HAL_GPIO_WritePin>
break;
 8007d88:	e007      	b.n	8007d9a <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d90:	4804      	ldr	r0, [pc, #16]	; (8007da4 <pl_L_DriveMotor_mode+0x4c>)
 8007d92:	f013 f805 	bl	801ada0 <HAL_GPIO_WritePin>
break;
 8007d96:	e000      	b.n	8007d9a <pl_L_DriveMotor_mode+0x42>
break;
 8007d98:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	48000800 	.word	0x48000800

08007da8 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d817      	bhi.n	8007de6 <pl_R_DriveMotor_mode+0x3e>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <pl_R_DriveMotor_mode+0x14>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007dcd 	.word	0x08007dcd
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007de5 	.word	0x08007de5
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007dcc:	2201      	movs	r2, #1
 8007dce:	2180      	movs	r1, #128	; 0x80
 8007dd0:	4807      	ldr	r0, [pc, #28]	; (8007df0 <pl_R_DriveMotor_mode+0x48>)
 8007dd2:	f012 ffe5 	bl	801ada0 <HAL_GPIO_WritePin>
break;
 8007dd6:	e006      	b.n	8007de6 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2180      	movs	r1, #128	; 0x80
 8007ddc:	4804      	ldr	r0, [pc, #16]	; (8007df0 <pl_R_DriveMotor_mode+0x48>)
 8007dde:	f012 ffdf 	bl	801ada0 <HAL_GPIO_WritePin>
break;
 8007de2:	e000      	b.n	8007de6 <pl_R_DriveMotor_mode+0x3e>
break;
 8007de4:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	48000400 	.word	0x48000400

08007df4 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007df8:	2108      	movs	r1, #8
 8007dfa:	4804      	ldr	r0, [pc, #16]	; (8007e0c <pl_DriveMotor_start+0x18>)
 8007dfc:	f015 f840 	bl	801ce80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007e00:	2100      	movs	r1, #0
 8007e02:	4802      	ldr	r0, [pc, #8]	; (8007e0c <pl_DriveMotor_start+0x18>)
 8007e04:	f015 f83c 	bl	801ce80 <HAL_TIM_PWM_Start>
}
 8007e08:	bf00      	nop
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	2000da94 	.word	0x2000da94

08007e10 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007e14:	2108      	movs	r1, #8
 8007e16:	4804      	ldr	r0, [pc, #16]	; (8007e28 <pl_DriveMotor_stop+0x18>)
 8007e18:	f015 f93e 	bl	801d098 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4802      	ldr	r0, [pc, #8]	; (8007e28 <pl_DriveMotor_stop+0x18>)
 8007e20:	f015 f93a 	bl	801d098 <HAL_TIM_PWM_Stop>
}
 8007e24:	bf00      	nop
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	2000da94 	.word	0x2000da94

08007e2c <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007e36:	4b07      	ldr	r3, [pc, #28]	; (8007e54 <pl_DriveMotor_duty+0x28>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <pl_DriveMotor_duty+0x28>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	2000da94 	.word	0x2000da94

08007e58 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4802      	ldr	r0, [pc, #8]	; (8007e68 <pl_FunMotor_start+0x10>)
 8007e60:	f015 f80e 	bl	801ce80 <HAL_TIM_PWM_Start>
}
 8007e64:	bf00      	nop
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	2000dae0 	.word	0x2000dae0

08007e6c <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007e70:	2100      	movs	r1, #0
 8007e72:	4802      	ldr	r0, [pc, #8]	; (8007e7c <pl_FunMotor_stop+0x10>)
 8007e74:	f015 f910 	bl	801d098 <HAL_TIM_PWM_Stop>
}
 8007e78:	bf00      	nop
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	2000dae0 	.word	0x2000dae0

08007e80 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e8e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007ec4 <pl_FunMotor_duty+0x44>
 8007e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e9a:	ee17 3a90 	vmov	r3, s15
 8007e9e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007ea0:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <pl_FunMotor_duty+0x48>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2264      	movs	r2, #100	; 0x64
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ea8:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <pl_FunMotor_duty+0x48>)
 8007eaa:	2264      	movs	r2, #100	; 0x64
 8007eac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007eae:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <pl_FunMotor_duty+0x48>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	42c80000 	.word	0x42c80000
 8007ec8:	2000dae0 	.word	0x2000dae0

08007ecc <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
	AD_step=0;
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <pl_sensor_init+0x18>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007ed6:	217f      	movs	r1, #127	; 0x7f
 8007ed8:	4803      	ldr	r0, [pc, #12]	; (8007ee8 <pl_sensor_init+0x1c>)
 8007eda:	f011 fe1f 	bl	8019b1c <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007ede:	bf00      	nop
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000708 	.word	0x20000708
 8007ee8:	20000734 	.word	0x20000734
 8007eec:	00000000 	.word	0x00000000

08007ef0 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007ef6:	483c      	ldr	r0, [pc, #240]	; (8007fe8 <pl_getbatt+0xf8>)
 8007ef8:	f010 f9fe 	bl	80182f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007efc:	2132      	movs	r1, #50	; 0x32
 8007efe:	483a      	ldr	r0, [pc, #232]	; (8007fe8 <pl_getbatt+0xf8>)
 8007f00:	f010 faf8 	bl	80184f4 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007f04:	4838      	ldr	r0, [pc, #224]	; (8007fe8 <pl_getbatt+0xf8>)
 8007f06:	f010 fd14 	bl	8018932 <HAL_ADC_GetValue>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007f0e:	4836      	ldr	r0, [pc, #216]	; (8007fe8 <pl_getbatt+0xf8>)
 8007f10:	f010 fabc 	bl	801848c <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	ee17 0a90 	vmov	r0, s15
 8007f22:	f7f8 fb39 	bl	8000598 <__aeabi_f2d>
 8007f26:	a326      	add	r3, pc, #152	; (adr r3, 8007fc0 <pl_getbatt+0xd0>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 fb8c 	bl	8000648 <__aeabi_dmul>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	a323      	add	r3, pc, #140	; (adr r3, 8007fc8 <pl_getbatt+0xd8>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 fcad 	bl	800089c <__aeabi_ddiv>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	4b27      	ldr	r3, [pc, #156]	; (8007fec <pl_getbatt+0xfc>)
 8007f50:	f7f8 fb7a 	bl	8000648 <__aeabi_dmul>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <pl_getbatt+0x100>)
 8007f62:	f7f8 fc9b 	bl	800089c <__aeabi_ddiv>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	a318      	add	r3, pc, #96	; (adr r3, 8007fd0 <pl_getbatt+0xe0>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 fb68 	bl	8000648 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	a315      	add	r3, pc, #84	; (adr r3, 8007fd8 <pl_getbatt+0xe8>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 fb5f 	bl	8000648 <__aeabi_dmul>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4619      	mov	r1, r3
 8007f92:	a313      	add	r3, pc, #76	; (adr r3, 8007fe0 <pl_getbatt+0xf0>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 fc80 	bl	800089c <__aeabi_ddiv>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f7f8 fe28 	bl	8000bf8 <__aeabi_d2f>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	603b      	str	r3, [r7, #0]
return batt;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	ee07 3a90 	vmov	s15, r3
}
 8007fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	f3af 8000 	nop.w
 8007fc0:	66666666 	.word	0x66666666
 8007fc4:	400a6666 	.word	0x400a6666
 8007fc8:	00000000 	.word	0x00000000
 8007fcc:	40affe00 	.word	0x40affe00
 8007fd0:	66666666 	.word	0x66666666
 8007fd4:	3ff26666 	.word	0x3ff26666
 8007fd8:	9999999a 	.word	0x9999999a
 8007fdc:	400d9999 	.word	0x400d9999
 8007fe0:	ae147ae1 	.word	0xae147ae1
 8007fe4:	400ee147 	.word	0x400ee147
 8007fe8:	20000734 	.word	0x20000734
 8007fec:	40340000 	.word	0x40340000
 8007ff0:	40240000 	.word	0x40240000
 8007ff4:	00000000 	.word	0x00000000

08007ff8 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007ffe:	4882      	ldr	r0, [pc, #520]	; (8008208 <pl_callback_getSensor+0x210>)
 8008000:	f010 fc36 	bl	8018870 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8008004:	4b81      	ldr	r3, [pc, #516]	; (800820c <pl_callback_getSensor+0x214>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b04      	cmp	r3, #4
 800800a:	f200 80d9 	bhi.w	80081c0 <pl_callback_getSensor+0x1c8>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <pl_callback_getSensor+0x1c>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008029 	.word	0x08008029
 8008018:	08008061 	.word	0x08008061
 800801c:	080080c1 	.word	0x080080c1
 8008020:	08008101 	.word	0x08008101
 8008024:	080081c1 	.word	0x080081c1
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8008028:	2201      	movs	r2, #1
 800802a:	2102      	movs	r1, #2
 800802c:	4878      	ldr	r0, [pc, #480]	; (8008210 <pl_callback_getSensor+0x218>)
 800802e:	f012 feb7 	bl	801ada0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008032:	2200      	movs	r2, #0
 8008034:	2110      	movs	r1, #16
 8008036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800803a:	f012 feb1 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800803e:	2200      	movs	r2, #0
 8008040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008044:	4873      	ldr	r0, [pc, #460]	; (8008214 <pl_callback_getSensor+0x21c>)
 8008046:	f012 feab 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 800804a:	2300      	movs	r3, #0
 800804c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800804e:	e002      	b.n	8008056 <pl_callback_getSensor+0x5e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3301      	adds	r3, #1
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800805c:	ddf8      	ble.n	8008050 <pl_callback_getSensor+0x58>
		break;
 800805e:	e0af      	b.n	80081c0 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8008060:	4b6d      	ldr	r3, [pc, #436]	; (8008218 <pl_callback_getSensor+0x220>)
 8008062:	885a      	ldrh	r2, [r3, #2]
 8008064:	4b6d      	ldr	r3, [pc, #436]	; (800821c <pl_callback_getSensor+0x224>)
 8008066:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8008068:	4b6b      	ldr	r3, [pc, #428]	; (8008218 <pl_callback_getSensor+0x220>)
 800806a:	889a      	ldrh	r2, [r3, #4]
 800806c:	4b6b      	ldr	r3, [pc, #428]	; (800821c <pl_callback_getSensor+0x224>)
 800806e:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8008070:	4b69      	ldr	r3, [pc, #420]	; (8008218 <pl_callback_getSensor+0x220>)
 8008072:	88da      	ldrh	r2, [r3, #6]
 8008074:	4b6a      	ldr	r3, [pc, #424]	; (8008220 <pl_callback_getSensor+0x228>)
 8008076:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8008078:	4b67      	ldr	r3, [pc, #412]	; (8008218 <pl_callback_getSensor+0x220>)
 800807a:	891a      	ldrh	r2, [r3, #8]
 800807c:	4b68      	ldr	r3, [pc, #416]	; (8008220 <pl_callback_getSensor+0x228>)
 800807e:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8008080:	4b65      	ldr	r3, [pc, #404]	; (8008218 <pl_callback_getSensor+0x220>)
 8008082:	895a      	ldrh	r2, [r3, #10]
 8008084:	4b66      	ldr	r3, [pc, #408]	; (8008220 <pl_callback_getSensor+0x228>)
 8008086:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008088:	2200      	movs	r2, #0
 800808a:	2102      	movs	r1, #2
 800808c:	4860      	ldr	r0, [pc, #384]	; (8008210 <pl_callback_getSensor+0x218>)
 800808e:	f012 fe87 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8008092:	2201      	movs	r2, #1
 8008094:	2110      	movs	r1, #16
 8008096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800809a:	f012 fe81 	bl	801ada0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800809e:	2200      	movs	r2, #0
 80080a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080a4:	485b      	ldr	r0, [pc, #364]	; (8008214 <pl_callback_getSensor+0x21c>)
 80080a6:	f012 fe7b 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80080ae:	e002      	b.n	80080b6 <pl_callback_getSensor+0xbe>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3301      	adds	r3, #1
 80080b4:	607b      	str	r3, [r7, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080bc:	ddf8      	ble.n	80080b0 <pl_callback_getSensor+0xb8>
		break;
 80080be:	e07f      	b.n	80081c0 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 80080c0:	4b55      	ldr	r3, [pc, #340]	; (8008218 <pl_callback_getSensor+0x220>)
 80080c2:	88da      	ldrh	r2, [r3, #6]
 80080c4:	4b55      	ldr	r3, [pc, #340]	; (800821c <pl_callback_getSensor+0x224>)
 80080c6:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80080c8:	2200      	movs	r2, #0
 80080ca:	2102      	movs	r1, #2
 80080cc:	4850      	ldr	r0, [pc, #320]	; (8008210 <pl_callback_getSensor+0x218>)
 80080ce:	f012 fe67 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 80080d2:	2200      	movs	r2, #0
 80080d4:	2110      	movs	r1, #16
 80080d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080da:	f012 fe61 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 80080de:	2201      	movs	r2, #1
 80080e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080e4:	484b      	ldr	r0, [pc, #300]	; (8008214 <pl_callback_getSensor+0x21c>)
 80080e6:	f012 fe5b 	bl	801ada0 <HAL_GPIO_WritePin>
		j=0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80080ee:	e002      	b.n	80080f6 <pl_callback_getSensor+0xfe>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3301      	adds	r3, #1
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080fc:	ddf8      	ble.n	80080f0 <pl_callback_getSensor+0xf8>
		break;
 80080fe:	e05f      	b.n	80081c0 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8008100:	4b45      	ldr	r3, [pc, #276]	; (8008218 <pl_callback_getSensor+0x220>)
 8008102:	885a      	ldrh	r2, [r3, #2]
 8008104:	4b46      	ldr	r3, [pc, #280]	; (8008220 <pl_callback_getSensor+0x228>)
 8008106:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8008108:	4b43      	ldr	r3, [pc, #268]	; (8008218 <pl_callback_getSensor+0x220>)
 800810a:	889a      	ldrh	r2, [r3, #4]
 800810c:	4b44      	ldr	r3, [pc, #272]	; (8008220 <pl_callback_getSensor+0x228>)
 800810e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8008110:	4b41      	ldr	r3, [pc, #260]	; (8008218 <pl_callback_getSensor+0x220>)
 8008112:	891a      	ldrh	r2, [r3, #8]
 8008114:	4b41      	ldr	r3, [pc, #260]	; (800821c <pl_callback_getSensor+0x224>)
 8008116:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8008118:	4b3f      	ldr	r3, [pc, #252]	; (8008218 <pl_callback_getSensor+0x220>)
 800811a:	895a      	ldrh	r2, [r3, #10]
 800811c:	4b3f      	ldr	r3, [pc, #252]	; (800821c <pl_callback_getSensor+0x224>)
 800811e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008120:	2200      	movs	r2, #0
 8008122:	2102      	movs	r1, #2
 8008124:	483a      	ldr	r0, [pc, #232]	; (8008210 <pl_callback_getSensor+0x218>)
 8008126:	f012 fe3b 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800812a:	2200      	movs	r2, #0
 800812c:	2110      	movs	r1, #16
 800812e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008132:	f012 fe35 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8008136:	2200      	movs	r2, #0
 8008138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800813c:	4835      	ldr	r0, [pc, #212]	; (8008214 <pl_callback_getSensor+0x21c>)
 800813e:	f012 fe2f 	bl	801ada0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8008142:	2300      	movs	r3, #0
 8008144:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8008146:	e002      	b.n	800814e <pl_callback_getSensor+0x156>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3301      	adds	r3, #1
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b32      	cmp	r3, #50	; 0x32
 8008152:	ddf9      	ble.n	8008148 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8008154:	4b30      	ldr	r3, [pc, #192]	; (8008218 <pl_callback_getSensor+0x220>)
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 800815a:	887b      	ldrh	r3, [r7, #2]
 800815c:	ee07 3a90 	vmov	s15, r3
 8008160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008164:	ee17 0a90 	vmov	r0, s15
 8008168:	f7f8 fa16 	bl	8000598 <__aeabi_f2d>
 800816c:	a320      	add	r3, pc, #128	; (adr r3, 80081f0 <pl_callback_getSensor+0x1f8>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f7f8 fa69 	bl	8000648 <__aeabi_dmul>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	a31e      	add	r3, pc, #120	; (adr r3, 80081f8 <pl_callback_getSensor+0x200>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f8 fb8a 	bl	800089c <__aeabi_ddiv>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4610      	mov	r0, r2
 800818e:	4619      	mov	r1, r3
 8008190:	a31b      	add	r3, pc, #108	; (adr r3, 8008200 <pl_callback_getSensor+0x208>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f7f8 fa57 	bl	8000648 <__aeabi_dmul>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4610      	mov	r0, r2
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	4b1f      	ldr	r3, [pc, #124]	; (8008224 <pl_callback_getSensor+0x22c>)
 80081a8:	f7f8 fb78 	bl	800089c <__aeabi_ddiv>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4610      	mov	r0, r2
 80081b2:	4619      	mov	r1, r3
 80081b4:	f7f8 fd20 	bl	8000bf8 <__aeabi_d2f>
 80081b8:	4603      	mov	r3, r0
 80081ba:	4a1b      	ldr	r2, [pc, #108]	; (8008228 <pl_callback_getSensor+0x230>)
 80081bc:	6013      	str	r3, [r2, #0]
		break;
 80081be:	bf00      	nop

		break;
	}


	AD_step++;
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <pl_callback_getSensor+0x214>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	4b10      	ldr	r3, [pc, #64]	; (800820c <pl_callback_getSensor+0x214>)
 80081ca:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <pl_callback_getSensor+0x214>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d005      	beq.n	80081e0 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 80081d4:	2206      	movs	r2, #6
 80081d6:	4910      	ldr	r1, [pc, #64]	; (8008218 <pl_callback_getSensor+0x220>)
 80081d8:	480b      	ldr	r0, [pc, #44]	; (8008208 <pl_callback_getSensor+0x210>)
 80081da:	f010 fa7f 	bl	80186dc <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 80081de:	e002      	b.n	80081e6 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <pl_callback_getSensor+0x214>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	66666666 	.word	0x66666666
 80081f4:	400a6666 	.word	0x400a6666
 80081f8:	00000000 	.word	0x00000000
 80081fc:	40affe00 	.word	0x40affe00
 8008200:	00000000 	.word	0x00000000
 8008204:	4062c000 	.word	0x4062c000
 8008208:	20000734 	.word	0x20000734
 800820c:	20000708 	.word	0x20000708
 8008210:	48000400 	.word	0x48000400
 8008214:	48000800 	.word	0x48000800
 8008218:	200006fc 	.word	0x200006fc
 800821c:	2000070c 	.word	0x2000070c
 8008220:	20000718 	.word	0x20000718
 8008224:	40490000 	.word	0x40490000
 8008228:	20000724 	.word	0x20000724

0800822c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008230:	2206      	movs	r2, #6
 8008232:	4903      	ldr	r1, [pc, #12]	; (8008240 <pl_interupt_getSensor+0x14>)
 8008234:	4803      	ldr	r0, [pc, #12]	; (8008244 <pl_interupt_getSensor+0x18>)
 8008236:	f010 fa51 	bl	80186dc <HAL_ADC_Start_DMA>

}
 800823a:	bf00      	nop
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200006fc 	.word	0x200006fc
 8008244:	20000734 	.word	0x20000734

08008248 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
	count_mode=0;
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <pl_timer_init+0x1c>)
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008252:	4b05      	ldr	r3, [pc, #20]	; (8008268 <pl_timer_init+0x20>)
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 800825a:	4804      	ldr	r0, [pc, #16]	; (800826c <pl_timer_init+0x24>)
 800825c:	f014 fd48 	bl	801ccf0 <HAL_TIM_Base_Start_IT>
}
 8008260:	bf00      	nop
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000730 	.word	0x20000730
 8008268:	2000072c 	.word	0x2000072c
 800826c:	2000da48 	.word	0x2000da48

08008270 <interrupt_timer>:

void interrupt_timer(void){
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
	g_timCount++;
 8008274:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <interrupt_timer+0x48>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	4a0f      	ldr	r2, [pc, #60]	; (80082b8 <interrupt_timer+0x48>)
 800827c:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <interrupt_timer+0x4c>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d112      	bne.n	80082ac <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8008286:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <interrupt_timer+0x50>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f7f8 f984 	bl	8000598 <__aeabi_f2d>
 8008290:	a307      	add	r3, pc, #28	; (adr r3, 80082b0 <interrupt_timer+0x40>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f821 	bl	80002dc <__adddf3>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4610      	mov	r0, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7f8 fca9 	bl	8000bf8 <__aeabi_d2f>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4a05      	ldr	r2, [pc, #20]	; (80082c0 <interrupt_timer+0x50>)
 80082aa:	6013      	str	r3, [r2, #0]
	}

}
 80082ac:	bf00      	nop
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80082b4:	3f50624d 	.word	0x3f50624d
 80082b8:	20000728 	.word	0x20000728
 80082bc:	20000730 	.word	0x20000730
 80082c0:	2000072c 	.word	0x2000072c

080082c4 <tic_timer>:

void tic_timer(void){
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
	count_mode=1;
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <tic_timer+0x1c>)
 80082ca:	2201      	movs	r2, #1
 80082cc:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <tic_timer+0x20>)
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
}
 80082d6:	bf00      	nop
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	20000730 	.word	0x20000730
 80082e4:	2000072c 	.word	0x2000072c

080082e8 <wait_ms>:
	count_mode=0;
	g_timCount_sec=0;
	return timer;
}

void wait_ms(uint32_t waitTime) {
 80082e8:	b5b0      	push	{r4, r5, r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80082f0:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <wait_ms+0x80>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <wait_ms+0x84>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 80082fe:	bf00      	nop
 8008300:	4b19      	ldr	r3, [pc, #100]	; (8008368 <wait_ms+0x80>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830c:	ee17 0a90 	vmov	r0, s15
 8008310:	f7f8 f942 	bl	8000598 <__aeabi_f2d>
 8008314:	a312      	add	r3, pc, #72	; (adr r3, 8008360 <wait_ms+0x78>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f8 f995 	bl	8000648 <__aeabi_dmul>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4610      	mov	r0, r2
 8008324:	4619      	mov	r1, r3
 8008326:	a30e      	add	r3, pc, #56	; (adr r3, 8008360 <wait_ms+0x78>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f8 fab6 	bl	800089c <__aeabi_ddiv>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4614      	mov	r4, r2
 8008336:	461d      	mov	r5, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7f8 f90b 	bl	8000554 <__aeabi_ui2d>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4620      	mov	r0, r4
 8008344:	4629      	mov	r1, r5
 8008346:	f7f8 fbf1 	bl	8000b2c <__aeabi_dcmplt>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1d7      	bne.n	8008300 <wait_ms+0x18>
        }

}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bdb0      	pop	{r4, r5, r7, pc}
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w
 8008360:	d2f1a9fc 	.word	0xd2f1a9fc
 8008364:	3f50624d 	.word	0x3f50624d
 8008368:	20000728 	.word	0x20000728
 800836c:	2000da48 	.word	0x2000da48

08008370 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8008370:	b5b0      	push	{r4, r5, r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008378:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <wait_ms_NoReset+0x78>)
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 800837e:	bf00      	nop
 8008380:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <wait_ms_NoReset+0x78>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838c:	ee17 0a90 	vmov	r0, s15
 8008390:	f7f8 f902 	bl	8000598 <__aeabi_f2d>
 8008394:	a312      	add	r3, pc, #72	; (adr r3, 80083e0 <wait_ms_NoReset+0x70>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f7f8 f955 	bl	8000648 <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	a30e      	add	r3, pc, #56	; (adr r3, 80083e0 <wait_ms_NoReset+0x70>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f7f8 fa76 	bl	800089c <__aeabi_ddiv>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4614      	mov	r4, r2
 80083b6:	461d      	mov	r5, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7f8 f8cb 	bl	8000554 <__aeabi_ui2d>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4620      	mov	r0, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7f8 fbb1 	bl	8000b2c <__aeabi_dcmplt>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1d7      	bne.n	8008380 <wait_ms_NoReset+0x10>
        }

}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bdb0      	pop	{r4, r5, r7, pc}
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80083e4:	3f50624d 	.word	0x3f50624d
 80083e8:	20000728 	.word	0x20000728

080083ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	; 0x30
 80083f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80083f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	605a      	str	r2, [r3, #4]
 80083fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80083fe:	1d3b      	adds	r3, r7, #4
 8008400:	2220      	movs	r2, #32
 8008402:	2100      	movs	r1, #0
 8008404:	4618      	mov	r0, r3
 8008406:	f016 fdef 	bl	801efe8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800840a:	4b56      	ldr	r3, [pc, #344]	; (8008564 <MX_ADC1_Init+0x178>)
 800840c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008410:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008412:	4b54      	ldr	r3, [pc, #336]	; (8008564 <MX_ADC1_Init+0x178>)
 8008414:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008418:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800841a:	4b52      	ldr	r3, [pc, #328]	; (8008564 <MX_ADC1_Init+0x178>)
 800841c:	2200      	movs	r2, #0
 800841e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008420:	4b50      	ldr	r3, [pc, #320]	; (8008564 <MX_ADC1_Init+0x178>)
 8008422:	2200      	movs	r2, #0
 8008424:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8008426:	4b4f      	ldr	r3, [pc, #316]	; (8008564 <MX_ADC1_Init+0x178>)
 8008428:	2200      	movs	r2, #0
 800842a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800842c:	4b4d      	ldr	r3, [pc, #308]	; (8008564 <MX_ADC1_Init+0x178>)
 800842e:	2201      	movs	r2, #1
 8008430:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008432:	4b4c      	ldr	r3, [pc, #304]	; (8008564 <MX_ADC1_Init+0x178>)
 8008434:	2208      	movs	r2, #8
 8008436:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008438:	4b4a      	ldr	r3, [pc, #296]	; (8008564 <MX_ADC1_Init+0x178>)
 800843a:	2200      	movs	r2, #0
 800843c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800843e:	4b49      	ldr	r3, [pc, #292]	; (8008564 <MX_ADC1_Init+0x178>)
 8008440:	2201      	movs	r2, #1
 8008442:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8008444:	4b47      	ldr	r3, [pc, #284]	; (8008564 <MX_ADC1_Init+0x178>)
 8008446:	2206      	movs	r2, #6
 8008448:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800844a:	4b46      	ldr	r3, [pc, #280]	; (8008564 <MX_ADC1_Init+0x178>)
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008452:	4b44      	ldr	r3, [pc, #272]	; (8008564 <MX_ADC1_Init+0x178>)
 8008454:	2200      	movs	r2, #0
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008458:	4b42      	ldr	r3, [pc, #264]	; (8008564 <MX_ADC1_Init+0x178>)
 800845a:	2200      	movs	r2, #0
 800845c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800845e:	4b41      	ldr	r3, [pc, #260]	; (8008564 <MX_ADC1_Init+0x178>)
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008466:	4b3f      	ldr	r3, [pc, #252]	; (8008564 <MX_ADC1_Init+0x178>)
 8008468:	2200      	movs	r2, #0
 800846a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800846c:	4b3d      	ldr	r3, [pc, #244]	; (8008564 <MX_ADC1_Init+0x178>)
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008474:	483b      	ldr	r0, [pc, #236]	; (8008564 <MX_ADC1_Init+0x178>)
 8008476:	f00f fd8b 	bl	8017f90 <HAL_ADC_Init>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008480:	f001 fed5 	bl	800a22e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008484:	2300      	movs	r3, #0
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800848c:	4619      	mov	r1, r3
 800848e:	4835      	ldr	r0, [pc, #212]	; (8008564 <MX_ADC1_Init+0x178>)
 8008490:	f011 fbd8 	bl	8019c44 <HAL_ADCEx_MultiModeConfigChannel>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800849a:	f001 fec8 	bl	800a22e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800849e:	4b32      	ldr	r3, [pc, #200]	; (8008568 <MX_ADC1_Init+0x17c>)
 80084a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80084a2:	2306      	movs	r3, #6
 80084a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80084a6:	2301      	movs	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80084aa:	237f      	movs	r3, #127	; 0x7f
 80084ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80084ae:	2304      	movs	r3, #4
 80084b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084b6:	1d3b      	adds	r3, r7, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	482a      	ldr	r0, [pc, #168]	; (8008564 <MX_ADC1_Init+0x178>)
 80084bc:	f010 fc9e 	bl	8018dfc <HAL_ADC_ConfigChannel>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80084c6:	f001 feb2 	bl	800a22e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80084ca:	4b28      	ldr	r3, [pc, #160]	; (800856c <MX_ADC1_Init+0x180>)
 80084cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80084ce:	230c      	movs	r3, #12
 80084d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084d2:	1d3b      	adds	r3, r7, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4823      	ldr	r0, [pc, #140]	; (8008564 <MX_ADC1_Init+0x178>)
 80084d8:	f010 fc90 	bl	8018dfc <HAL_ADC_ConfigChannel>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80084e2:	f001 fea4 	bl	800a22e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80084e6:	4b22      	ldr	r3, [pc, #136]	; (8008570 <MX_ADC1_Init+0x184>)
 80084e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80084ea:	2312      	movs	r3, #18
 80084ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084ee:	1d3b      	adds	r3, r7, #4
 80084f0:	4619      	mov	r1, r3
 80084f2:	481c      	ldr	r0, [pc, #112]	; (8008564 <MX_ADC1_Init+0x178>)
 80084f4:	f010 fc82 	bl	8018dfc <HAL_ADC_ConfigChannel>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80084fe:	f001 fe96 	bl	800a22e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <MX_ADC1_Init+0x188>)
 8008504:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008506:	2318      	movs	r3, #24
 8008508:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	4619      	mov	r1, r3
 800850e:	4815      	ldr	r0, [pc, #84]	; (8008564 <MX_ADC1_Init+0x178>)
 8008510:	f010 fc74 	bl	8018dfc <HAL_ADC_ConfigChannel>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800851a:	f001 fe88 	bl	800a22e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800851e:	4b16      	ldr	r3, [pc, #88]	; (8008578 <MX_ADC1_Init+0x18c>)
 8008520:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008528:	1d3b      	adds	r3, r7, #4
 800852a:	4619      	mov	r1, r3
 800852c:	480d      	ldr	r0, [pc, #52]	; (8008564 <MX_ADC1_Init+0x178>)
 800852e:	f010 fc65 	bl	8018dfc <HAL_ADC_ConfigChannel>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008538:	f001 fe79 	bl	800a22e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800853c:	4b0f      	ldr	r3, [pc, #60]	; (800857c <MX_ADC1_Init+0x190>)
 800853e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008540:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008546:	1d3b      	adds	r3, r7, #4
 8008548:	4619      	mov	r1, r3
 800854a:	4806      	ldr	r0, [pc, #24]	; (8008564 <MX_ADC1_Init+0x178>)
 800854c:	f010 fc56 	bl	8018dfc <HAL_ADC_ConfigChannel>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008556:	f001 fe6a 	bl	800a22e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800855a:	bf00      	nop
 800855c:	3730      	adds	r7, #48	; 0x30
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20000734 	.word	0x20000734
 8008568:	2e300800 	.word	0x2e300800
 800856c:	3ef08000 	.word	0x3ef08000
 8008570:	10c00010 	.word	0x10c00010
 8008574:	0c900008 	.word	0x0c900008
 8008578:	08600004 	.word	0x08600004
 800857c:	04300002 	.word	0x04300002

08008580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b09e      	sub	sp, #120	; 0x78
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008588:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	605a      	str	r2, [r3, #4]
 8008592:	609a      	str	r2, [r3, #8]
 8008594:	60da      	str	r2, [r3, #12]
 8008596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008598:	f107 0314 	add.w	r3, r7, #20
 800859c:	2250      	movs	r2, #80	; 0x50
 800859e:	2100      	movs	r1, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f016 fd21 	bl	801efe8 <memset>
  if(adcHandle->Instance==ADC1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ae:	f040 8082 	bne.w	80086b6 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80085b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80085b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80085bc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80085be:	f107 0314 	add.w	r3, r7, #20
 80085c2:	4618      	mov	r0, r3
 80085c4:	f013 f9e8 	bl	801b998 <HAL_RCCEx_PeriphCLKConfig>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80085ce:	f001 fe2e 	bl	800a22e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80085d2:	4b3b      	ldr	r3, [pc, #236]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 80085d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d6:	4a3a      	ldr	r2, [pc, #232]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 80085d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085de:	4b38      	ldr	r3, [pc, #224]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 80085e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085e6:	613b      	str	r3, [r7, #16]
 80085e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ea:	4b35      	ldr	r3, [pc, #212]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 80085ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ee:	4a34      	ldr	r2, [pc, #208]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085f6:	4b32      	ldr	r3, [pc, #200]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 80085f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008602:	4b2f      	ldr	r3, [pc, #188]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 8008604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008606:	4a2e      	ldr	r2, [pc, #184]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800860e:	4b2c      	ldr	r3, [pc, #176]	; (80086c0 <HAL_ADC_MspInit+0x140>)
 8008610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	60bb      	str	r3, [r7, #8]
 8008618:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 800861a:	230f      	movs	r3, #15
 800861c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800861e:	2303      	movs	r3, #3
 8008620:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008622:	2300      	movs	r3, #0
 8008624:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008626:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800862a:	4619      	mov	r1, r3
 800862c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008630:	f012 fa34 	bl	801aa9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 8008634:	f241 0301 	movw	r3, #4097	; 0x1001
 8008638:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800863a:	2303      	movs	r3, #3
 800863c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863e:	2300      	movs	r3, #0
 8008640:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008642:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008646:	4619      	mov	r1, r3
 8008648:	481e      	ldr	r0, [pc, #120]	; (80086c4 <HAL_ADC_MspInit+0x144>)
 800864a:	f012 fa27 	bl	801aa9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800864e:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 8008650:	4a1e      	ldr	r2, [pc, #120]	; (80086cc <HAL_ADC_MspInit+0x14c>)
 8008652:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 8008656:	2205      	movs	r2, #5
 8008658:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 800865c:	2200      	movs	r2, #0
 800865e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008660:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 8008662:	2200      	movs	r2, #0
 8008664:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 8008668:	2280      	movs	r2, #128	; 0x80
 800866a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 800866e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008672:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008674:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 8008676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800867a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800867c:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 800867e:	2220      	movs	r2, #32
 8008680:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 8008684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800868a:	480f      	ldr	r0, [pc, #60]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 800868c:	f011 fcd2 	bl	801a034 <HAL_DMA_Init>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008696:	f001 fdca 	bl	800a22e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a0a      	ldr	r2, [pc, #40]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 800869e:	655a      	str	r2, [r3, #84]	; 0x54
 80086a0:	4a09      	ldr	r2, [pc, #36]	; (80086c8 <HAL_ADC_MspInit+0x148>)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80086a6:	2200      	movs	r2, #0
 80086a8:	2100      	movs	r1, #0
 80086aa:	2012      	movs	r0, #18
 80086ac:	f011 fc8d 	bl	8019fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80086b0:	2012      	movs	r0, #18
 80086b2:	f011 fca4 	bl	8019ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80086b6:	bf00      	nop
 80086b8:	3778      	adds	r7, #120	; 0x78
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	40021000 	.word	0x40021000
 80086c4:	48000400 	.word	0x48000400
 80086c8:	200007a0 	.word	0x200007a0
 80086cc:	40020008 	.word	0x40020008

080086d0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 80086d8:	f7ff fc8e 	bl	8007ff8 <pl_callback_getSensor>
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 80086e4:	b084      	sub	sp, #16
 80086e6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	f107 0420 	add.w	r4, r7, #32
 80086f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 80086f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80086fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80086fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008702:	f2c0 819d 	blt.w	8008a40 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008706:	4bcd      	ldr	r3, [pc, #820]	; (8008a3c <cal_table+0x358>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b06      	cmp	r3, #6
 800870e:	f200 833a 	bhi.w	8008d86 <cal_table+0x6a2>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <cal_table+0x34>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008d79 	.word	0x08008d79
 800871c:	08008735 	.word	0x08008735
 8008720:	080088a7 	.word	0x080088a7
 8008724:	080089c5 	.word	0x080089c5
 8008728:	08008d79 	.word	0x08008d79
 800872c:	080089f1 	.word	0x080089f1
 8008730:	08008a17 	.word	0x08008a17
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	ed93 7a00 	vldr	s14, [r3]
 800873a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800873e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008746:	db0a      	blt.n	800875e <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008756:	4bb9      	ldr	r3, [pc, #740]	; (8008a3c <cal_table+0x358>)
 8008758:	2202      	movs	r2, #2
 800875a:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 800875c:	e313      	b.n	8008d86 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 800875e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008764:	edd3 7a00 	vldr	s15, [r3]
 8008768:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800876c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876e:	edd3 7a00 	vldr	s15, [r3]
 8008772:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008776:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800877a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800877e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008782:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008786:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800878a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800878e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008792:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008796:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800879a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800879e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80087a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ae:	d900      	bls.n	80087b2 <cal_table+0xce>
		break;
 80087b0:	e2e9      	b.n	8008d86 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 80087b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b4:	edd3 7a00 	vldr	s15, [r3]
 80087b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087be:	edd3 7a00 	vldr	s15, [r3]
 80087c2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80087c6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80087ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80087ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087d2:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80087d6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80087da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087e2:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80087e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80087ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80087ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80087f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80087fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80087fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008800:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8008804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008808:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800880c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	4618      	mov	r0, r3
 8008812:	f7f7 fec1 	bl	8000598 <__aeabi_f2d>
 8008816:	4604      	mov	r4, r0
 8008818:	460d      	mov	r5, r1
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	4618      	mov	r0, r3
 800881e:	f7f7 febb 	bl	8000598 <__aeabi_f2d>
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	f04f 0300 	mov.w	r3, #0
 800882a:	f7f7 ff0d 	bl	8000648 <__aeabi_dmul>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4690      	mov	r8, r2
 8008834:	4699      	mov	r9, r3
 8008836:	edd7 7a01 	vldr	s15, [r7, #4]
 800883a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800883e:	ee17 0a90 	vmov	r0, s15
 8008842:	f7f7 fea9 	bl	8000598 <__aeabi_f2d>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 fefb 	bl	8000648 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f7 fd3d 	bl	80002d8 <__aeabi_dsub>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4610      	mov	r0, r2
 8008864:	4619      	mov	r1, r3
 8008866:	f7f8 f9c7 	bl	8000bf8 <__aeabi_d2f>
 800886a:	4602      	mov	r2, r0
 800886c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	ed93 7a00 	vldr	s14, [r3]
 8008876:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800887a:	edd7 7a01 	vldr	s15, [r7, #4]
 800887e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008890:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008894:	eef1 7a67 	vneg.f32	s15, s15
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800889e:	4b67      	ldr	r3, [pc, #412]	; (8008a3c <cal_table+0x358>)
 80088a0:	2203      	movs	r2, #3
 80088a2:	701a      	strb	r2, [r3, #0]
		break;
 80088a4:	e26f      	b.n	8008d86 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80088a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80088b0:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80088b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80088b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80088bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80088c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80088c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80088cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80088d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80088d4:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80088d8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80088e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e8:	d900      	bls.n	80088ec <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80088ea:	e24c      	b.n	8008d86 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80088f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80088f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80088fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80088fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008902:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008906:	ee66 7a27 	vmul.f32	s15, s12, s15
 800890a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800890e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008912:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008916:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800891a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800891e:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008922:	edd7 7a08 	vldr	s15, [r7, #32]
 8008926:	ee77 6a67 	vsub.f32	s13, s14, s15
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008934:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4618      	mov	r0, r3
 800893e:	f7f7 fe2b 	bl	8000598 <__aeabi_f2d>
 8008942:	4604      	mov	r4, r0
 8008944:	460d      	mov	r5, r1
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	4618      	mov	r0, r3
 800894a:	f7f7 fe25 	bl	8000598 <__aeabi_f2d>
 800894e:	f04f 0200 	mov.w	r2, #0
 8008952:	f04f 0300 	mov.w	r3, #0
 8008956:	f7f7 fe77 	bl	8000648 <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4690      	mov	r8, r2
 8008960:	4699      	mov	r9, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7f7 fe18 	bl	8000598 <__aeabi_f2d>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4640      	mov	r0, r8
 800896e:	4649      	mov	r1, r9
 8008970:	f7f7 fe6a 	bl	8000648 <__aeabi_dmul>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4620      	mov	r0, r4
 800897a:	4629      	mov	r1, r5
 800897c:	f7f7 fcac 	bl	80002d8 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4610      	mov	r0, r2
 8008986:	4619      	mov	r1, r3
 8008988:	f7f8 f936 	bl	8000bf8 <__aeabi_d2f>
 800898c:	4602      	mov	r2, r0
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	ed93 7a00 	vldr	s14, [r3]
 8008998:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800899c:	edd7 7a01 	vldr	s15, [r7, #4]
 80089a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089aa:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80089ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80089b2:	eef1 7a67 	vneg.f32	s15, s15
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80089bc:	4b1f      	ldr	r3, [pc, #124]	; (8008a3c <cal_table+0x358>)
 80089be:	2203      	movs	r2, #3
 80089c0:	701a      	strb	r2, [r3, #0]
		break;
 80089c2:	e1e0      	b.n	8008d86 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80089c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c6:	ed93 7a00 	vldr	s14, [r3]
 80089ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80089ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d6:	d900      	bls.n	80089da <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80089d8:	e1d5      	b.n	8008d86 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80089da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089de:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80089e8:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <cal_table+0x358>)
 80089ea:	2204      	movs	r2, #4
 80089ec:	701a      	strb	r2, [r3, #0]
		break;
 80089ee:	e1ca      	b.n	8008d86 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80089f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80089f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80089fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a02:	da00      	bge.n	8008a06 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a04:	e1bf      	b.n	8008d86 <cal_table+0x6a2>
			target->acceleration = 0;
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <cal_table+0x358>)
 8008a10:	2204      	movs	r2, #4
 8008a12:	701a      	strb	r2, [r3, #0]
		break;
 8008a14:	e1b7      	b.n	8008d86 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a28:	da00      	bge.n	8008a2c <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a2a:	e1ac      	b.n	8008d86 <cal_table+0x6a2>
			target->acceleration = 0;
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a34:	4b01      	ldr	r3, [pc, #4]	; (8008a3c <cal_table+0x358>)
 8008a36:	2204      	movs	r2, #4
 8008a38:	701a      	strb	r2, [r3, #0]
		break;
 8008a3a:	e1a4      	b.n	8008d86 <cal_table+0x6a2>
 8008a3c:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 8008a40:	4bce      	ldr	r3, [pc, #824]	; (8008d7c <cal_table+0x698>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	f200 819d 	bhi.w	8008d86 <cal_table+0x6a2>
 8008a4c:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <cal_table+0x370>)
 8008a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a52:	bf00      	nop
 8008a54:	08008d85 	.word	0x08008d85
 8008a58:	08008a71 	.word	0x08008a71
 8008a5c:	08008be3 	.word	0x08008be3
 8008a60:	08008cf9 	.word	0x08008cf9
 8008a64:	08008d25 	.word	0x08008d25
 8008a68:	08008d2d 	.word	0x08008d2d
 8008a6c:	08008d53 	.word	0x08008d53
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a72:	ed93 7a00 	vldr	s14, [r3]
 8008a76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a82:	d80a      	bhi.n	8008a9a <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8008a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008a92:	4bba      	ldr	r3, [pc, #744]	; (8008d7c <cal_table+0x698>)
 8008a94:	2202      	movs	r2, #2
 8008a96:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008a98:	e175      	b.n	8008d86 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008a9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a9e:	eeb1 7a67 	vneg.f32	s14, s15
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa4:	edd3 7a00 	vldr	s15, [r3]
 8008aa8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aae:	edd3 7a00 	vldr	s15, [r3]
 8008ab2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008ab6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008aba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008abe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008ac2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008ac6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008aca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008ace:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008ad2:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008ad6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ada:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008ade:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008ae2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aee:	d900      	bls.n	8008af2 <cal_table+0x40e>
		break;
 8008af0:	e149      	b.n	8008d86 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	edd3 7a00 	vldr	s15, [r3]
 8008af8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afe:	edd3 7a00 	vldr	s15, [r3]
 8008b02:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008b06:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008b0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b12:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008b16:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008b1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b22:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8008b26:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008b2a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b44:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4c:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7f7 fd1f 	bl	8000598 <__aeabi_f2d>
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f7 fd19 	bl	8000598 <__aeabi_f2d>
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	f7f7 fd6b 	bl	8000648 <__aeabi_dmul>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4690      	mov	r8, r2
 8008b78:	4699      	mov	r9, r3
 8008b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b82:	ee17 0a90 	vmov	r0, s15
 8008b86:	f7f7 fd07 	bl	8000598 <__aeabi_f2d>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4640      	mov	r0, r8
 8008b90:	4649      	mov	r1, r9
 8008b92:	f7f7 fd59 	bl	8000648 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7f7 fb9d 	bl	80002dc <__adddf3>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7f8 f825 	bl	8000bf8 <__aeabi_d2f>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb2:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	ed93 7a00 	vldr	s14, [r3]
 8008bba:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8008bc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd0:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8008bda:	4b68      	ldr	r3, [pc, #416]	; (8008d7c <cal_table+0x698>)
 8008bdc:	2203      	movs	r2, #3
 8008bde:	701a      	strb	r2, [r3, #0]
		break;
 8008be0:	e0d1      	b.n	8008d86 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	ed93 7a02 	vldr	s14, [r3, #8]
 8008be8:	edd7 7a08 	vldr	s15, [r7, #32]
 8008bec:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008bf0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008bf4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008bfc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008c00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008c08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008c0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c10:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008c14:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008c18:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8008c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	d900      	bls.n	8008c28 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008c26:	e0ae      	b.n	8008d86 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c2e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008c32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c36:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008c3a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008c3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008c46:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008c4a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c4e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008c52:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008c56:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008c5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c70:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7f7 fc8d 	bl	8000598 <__aeabi_f2d>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7f7 fc87 	bl	8000598 <__aeabi_f2d>
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	f7f7 fcd9 	bl	8000648 <__aeabi_dmul>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4690      	mov	r8, r2
 8008c9c:	4699      	mov	r9, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7f7 fc7a 	bl	8000598 <__aeabi_f2d>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4640      	mov	r0, r8
 8008caa:	4649      	mov	r1, r9
 8008cac:	f7f7 fccc 	bl	8000648 <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 fb10 	bl	80002dc <__adddf3>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	f7f7 ff98 	bl	8000bf8 <__aeabi_d2f>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ccc:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	ed93 7a00 	vldr	s14, [r3]
 8008cd4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8008cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8008cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008cf0:	4b22      	ldr	r3, [pc, #136]	; (8008d7c <cal_table+0x698>)
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	701a      	strb	r2, [r3, #0]
		break;
 8008cf6:	e046      	b.n	8008d86 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	ed93 7a00 	vldr	s14, [r3]
 8008cfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0a:	da00      	bge.n	8008d0e <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008d0c:	e03b      	b.n	8008d86 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	f04f 0200 	mov.w	r2, #0
 8008d1a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008d1c:	4b17      	ldr	r3, [pc, #92]	; (8008d7c <cal_table+0x698>)
 8008d1e:	2204      	movs	r2, #4
 8008d20:	701a      	strb	r2, [r3, #0]
		break;
 8008d22:	e030      	b.n	8008d86 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008d24:	4b16      	ldr	r3, [pc, #88]	; (8008d80 <cal_table+0x69c>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]
		break;
 8008d2a:	e02c      	b.n	8008d86 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d32:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3e:	d900      	bls.n	8008d42 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008d40:	e021      	b.n	8008d86 <cal_table+0x6a2>
			target->acceleration = 0;
 8008d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <cal_table+0x698>)
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	701a      	strb	r2, [r3, #0]
		break;
 8008d50:	e019      	b.n	8008d86 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d58:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d64:	d900      	bls.n	8008d68 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008d66:	e00e      	b.n	8008d86 <cal_table+0x6a2>
			target->acceleration = 0;
 8008d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008d70:	4b02      	ldr	r3, [pc, #8]	; (8008d7c <cal_table+0x698>)
 8008d72:	2204      	movs	r2, #4
 8008d74:	701a      	strb	r2, [r3, #0]
		break;
 8008d76:	e006      	b.n	8008d86 <cal_table+0x6a2>
		break;
 8008d78:	bf00      	nop
 8008d7a:	e004      	b.n	8008d86 <cal_table+0x6a2>
 8008d7c:	20000804 	.word	0x20000804
 8008d80:	20000805 	.word	0x20000805
		break;
 8008d84:	bf00      	nop
	}

}

}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008d90:	b004      	add	sp, #16
 8008d92:	4770      	bx	lr
 8008d94:	0000      	movs	r0, r0
	...

08008d98 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d9c:	b08c      	sub	sp, #48	; 0x30
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	eef0 6a40 	vmov.f32	s13, s0
 8008da4:	eeb0 7a60 	vmov.f32	s14, s1
 8008da8:	eef0 7a41 	vmov.f32	s15, s2
 8008dac:	6138      	str	r0, [r7, #16]
 8008dae:	edc7 6a05 	vstr	s13, [r7, #20]
 8008db2:	ed87 7a06 	vstr	s14, [r7, #24]
 8008db6:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8008dba:	4be7      	ldr	r3, [pc, #924]	; (8009158 <cal_mollifier_table+0x3c0>)
 8008dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8008dbe:	4be7      	ldr	r3, [pc, #924]	; (800915c <cal_mollifier_table+0x3c4>)
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008dc2:	4be7      	ldr	r3, [pc, #924]	; (8009160 <cal_mollifier_table+0x3c8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7f7 fbe6 	bl	8000598 <__aeabi_f2d>
 8008dcc:	a3da      	add	r3, pc, #872	; (adr r3, 8009138 <cal_mollifier_table+0x3a0>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fa83 	bl	80002dc <__adddf3>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f7f7 ff0b 	bl	8000bf8 <__aeabi_d2f>
 8008de2:	4603      	mov	r3, r0
 8008de4:	4ade      	ldr	r2, [pc, #888]	; (8009160 <cal_mollifier_table+0x3c8>)
 8008de6:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dec:	eef0 7ae7 	vabs.f32	s15, s15
 8008df0:	ee17 0a90 	vmov	r0, s15
 8008df4:	f7f7 fbd0 	bl	8000598 <__aeabi_f2d>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	f7f7 fa6e 	bl	80002dc <__adddf3>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4610      	mov	r0, r2
 8008e06:	4619      	mov	r1, r3
 8008e08:	a3cd      	add	r3, pc, #820	; (adr r3, 8009140 <cal_mollifier_table+0x3a8>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fd45 	bl	800089c <__aeabi_ddiv>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4610      	mov	r0, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	a3cb      	add	r3, pc, #812	; (adr r3, 8009148 <cal_mollifier_table+0x3b0>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 fc12 	bl	8000648 <__aeabi_dmul>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4614      	mov	r4, r2
 8008e2a:	461d      	mov	r5, r3
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f7 fbb2 	bl	8000598 <__aeabi_f2d>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4620      	mov	r0, r4
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7f7 fd2e 	bl	800089c <__aeabi_ddiv>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4610      	mov	r0, r2
 8008e46:	4619      	mov	r1, r3
 8008e48:	f7f7 fed6 	bl	8000bf8 <__aeabi_d2f>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008e50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e54:	eef1 7a67 	vneg.f32	s15, s15
 8008e58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008e60:	4bbf      	ldr	r3, [pc, #764]	; (8009160 <cal_mollifier_table+0x3c8>)
 8008e62:	edd3 7a00 	vldr	s15, [r3]
 8008e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6e:	f140 8698 	bpl.w	8009ba2 <cal_mollifier_table+0xe0a>
 8008e72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008e7e:	4bb8      	ldr	r3, [pc, #736]	; (8009160 <cal_mollifier_table+0x3c8>)
 8008e80:	edd3 7a00 	vldr	s15, [r3]
 8008e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8c:	f340 8689 	ble.w	8009ba2 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008e96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eaa:	ee17 0a90 	vmov	r0, s15
 8008eae:	f7f7 fb73 	bl	8000598 <__aeabi_f2d>
 8008eb2:	a3a3      	add	r3, pc, #652	; (adr r3, 8009140 <cal_mollifier_table+0x3a8>)
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f7f7 fcf0 	bl	800089c <__aeabi_ddiv>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	461d      	mov	r5, r3
 8008ec4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ec8:	eeb1 7a67 	vneg.f32	s14, s15
 8008ecc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008ed8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008edc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ee0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ee4:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008ee8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008eec:	4b9c      	ldr	r3, [pc, #624]	; (8009160 <cal_mollifier_table+0x3c8>)
 8008eee:	ed93 6a00 	vldr	s12, [r3]
 8008ef2:	4b9b      	ldr	r3, [pc, #620]	; (8009160 <cal_mollifier_table+0x3c8>)
 8008ef4:	edd3 7a00 	vldr	s15, [r3]
 8008ef8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008efc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008f00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008f04:	ee16 0a90 	vmov	r0, s13
 8008f08:	f7f7 fb46 	bl	8000598 <__aeabi_f2d>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	ec43 2b10 	vmov	d0, r2, r3
 8008f14:	f018 fe64 	bl	8021be0 <exp>
 8008f18:	ec53 2b10 	vmov	r2, r3, d0
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 fb92 	bl	8000648 <__aeabi_dmul>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f7f7 fe64 	bl	8000bf8 <__aeabi_d2f>
 8008f30:	4602      	mov	r2, r0
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008f36:	4b8a      	ldr	r3, [pc, #552]	; (8009160 <cal_mollifier_table+0x3c8>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f7 fb2c 	bl	8000598 <__aeabi_f2d>
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f48:	eef1 7a67 	vneg.f32	s15, s15
 8008f4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f54:	ee16 0a90 	vmov	r0, s13
 8008f58:	f7f7 fb1e 	bl	8000598 <__aeabi_f2d>
 8008f5c:	a37c      	add	r3, pc, #496	; (adr r3, 8009150 <cal_mollifier_table+0x3b8>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f7f7 fc9b 	bl	800089c <__aeabi_ddiv>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4690      	mov	r8, r2
 8008f6c:	4699      	mov	r9, r3
 8008f6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f70:	f7f7 fb12 	bl	8000598 <__aeabi_f2d>
 8008f74:	a370      	add	r3, pc, #448	; (adr r3, 8009138 <cal_mollifier_table+0x3a0>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 fb65 	bl	8000648 <__aeabi_dmul>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 f9a9 	bl	80002dc <__adddf3>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 fdcb 	bl	8000b2c <__aeabi_dcmplt>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 8163 	beq.w	8009264 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008f9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fa2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb2:	ee17 0a90 	vmov	r0, s15
 8008fb6:	f7f7 faef 	bl	8000598 <__aeabi_f2d>
 8008fba:	a361      	add	r3, pc, #388	; (adr r3, 8009140 <cal_mollifier_table+0x3a8>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f7f7 fc6c 	bl	800089c <__aeabi_ddiv>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008fcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fd0:	eeb1 7a67 	vneg.f32	s14, s15
 8008fd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fdc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008fe0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fe4:	ee16 0a90 	vmov	r0, s13
 8008fe8:	f7f7 fad6 	bl	8000598 <__aeabi_f2d>
 8008fec:	4604      	mov	r4, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ff4:	eef1 7a67 	vneg.f32	s15, s15
 8008ff8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ffc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009000:	ee16 0a90 	vmov	r0, s13
 8009004:	f7f7 fac8 	bl	8000598 <__aeabi_f2d>
 8009008:	a351      	add	r3, pc, #324	; (adr r3, 8009150 <cal_mollifier_table+0x3b8>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f7f7 fc45 	bl	800089c <__aeabi_ddiv>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4620      	mov	r0, r4
 8009018:	4629      	mov	r1, r5
 800901a:	f7f7 fb15 	bl	8000648 <__aeabi_dmul>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4690      	mov	r8, r2
 8009024:	4699      	mov	r9, r3
 8009026:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800902a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800902e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009032:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009036:	ee16 0a90 	vmov	r0, s13
 800903a:	f7f7 faad 	bl	8000598 <__aeabi_f2d>
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009046:	eef1 7a67 	vneg.f32	s15, s15
 800904a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800904e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009052:	ee16 0a90 	vmov	r0, s13
 8009056:	f7f7 fa9f 	bl	8000598 <__aeabi_f2d>
 800905a:	a33d      	add	r3, pc, #244	; (adr r3, 8009150 <cal_mollifier_table+0x3b8>)
 800905c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009060:	f7f7 fc1c 	bl	800089c <__aeabi_ddiv>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4692      	mov	sl, r2
 800906a:	469b      	mov	fp, r3
 800906c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009070:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009074:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009078:	ee16 0a90 	vmov	r0, s13
 800907c:	f7f7 fa8c 	bl	8000598 <__aeabi_f2d>
 8009080:	a333      	add	r3, pc, #204	; (adr r3, 8009150 <cal_mollifier_table+0x3b8>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 fc09 	bl	800089c <__aeabi_ddiv>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4650      	mov	r0, sl
 8009090:	4659      	mov	r1, fp
 8009092:	f7f7 fad9 	bl	8000648 <__aeabi_dmul>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4620      	mov	r0, r4
 800909c:	4629      	mov	r1, r5
 800909e:	f7f7 f91d 	bl	80002dc <__adddf3>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 fbf7 	bl	800089c <__aeabi_ddiv>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4690      	mov	r8, r2
 80090b4:	4699      	mov	r9, r3
 80090b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80090be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80090c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090c6:	ee16 0a90 	vmov	r0, s13
 80090ca:	f7f7 fa65 	bl	8000598 <__aeabi_f2d>
 80090ce:	4604      	mov	r4, r0
 80090d0:	460d      	mov	r5, r1
 80090d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090d6:	eef1 7a67 	vneg.f32	s15, s15
 80090da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80090de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090e2:	ee16 0a90 	vmov	r0, s13
 80090e6:	f7f7 fa57 	bl	8000598 <__aeabi_f2d>
 80090ea:	a319      	add	r3, pc, #100	; (adr r3, 8009150 <cal_mollifier_table+0x3b8>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 fbd4 	bl	800089c <__aeabi_ddiv>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4692      	mov	sl, r2
 80090fa:	469b      	mov	fp, r3
 80090fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009100:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009104:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009108:	ee16 0a90 	vmov	r0, s13
 800910c:	f7f7 fa44 	bl	8000598 <__aeabi_f2d>
 8009110:	a30f      	add	r3, pc, #60	; (adr r3, 8009150 <cal_mollifier_table+0x3b8>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 fbc1 	bl	800089c <__aeabi_ddiv>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4650      	mov	r0, sl
 8009120:	4659      	mov	r1, fp
 8009122:	f7f7 fa91 	bl	8000648 <__aeabi_dmul>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4620      	mov	r0, r4
 800912c:	4629      	mov	r1, r5
 800912e:	f7f7 f8d5 	bl	80002dc <__adddf3>
 8009132:	4602      	mov	r2, r0
 8009134:	e016      	b.n	8009164 <cal_mollifier_table+0x3cc>
 8009136:	bf00      	nop
 8009138:	d2f1a9fc 	.word	0xd2f1a9fc
 800913c:	3f50624d 	.word	0x3f50624d
 8009140:	f9db22d1 	.word	0xf9db22d1
 8009144:	3fdc6a7e 	.word	0x3fdc6a7e
 8009148:	362cef38 	.word	0x362cef38
 800914c:	3fd78b56 	.word	0x3fd78b56
 8009150:	04189375 	.word	0x04189375
 8009154:	3ff50e56 	.word	0x3ff50e56
 8009158:	41700000 	.word	0x41700000
 800915c:	c1700000 	.word	0xc1700000
 8009160:	20000800 	.word	0x20000800
 8009164:	460b      	mov	r3, r1
 8009166:	4640      	mov	r0, r8
 8009168:	4649      	mov	r1, r9
 800916a:	f7f7 fb97 	bl	800089c <__aeabi_ddiv>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009176:	f7f7 fa67 	bl	8000648 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4692      	mov	sl, r2
 8009180:	469b      	mov	fp, r3
 8009182:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009186:	eeb1 7a67 	vneg.f32	s14, s15
 800918a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800918e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009192:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009196:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800919a:	ee16 0a90 	vmov	r0, s13
 800919e:	f7f7 f9fb 	bl	8000598 <__aeabi_f2d>
 80091a2:	4604      	mov	r4, r0
 80091a4:	460d      	mov	r5, r1
 80091a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80091ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80091b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091b6:	ee16 0a90 	vmov	r0, s13
 80091ba:	f7f7 f9ed 	bl	8000598 <__aeabi_f2d>
 80091be:	4680      	mov	r8, r0
 80091c0:	4689      	mov	r9, r1
 80091c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091c6:	eef1 7a67 	vneg.f32	s15, s15
 80091ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091d2:	ee16 0a90 	vmov	r0, s13
 80091d6:	f7f7 f9df 	bl	8000598 <__aeabi_f2d>
 80091da:	a3e1      	add	r3, pc, #900	; (adr r3, 8009560 <cal_mollifier_table+0x7c8>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f7 fb5c 	bl	800089c <__aeabi_ddiv>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80091ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091f8:	ee16 0a90 	vmov	r0, s13
 80091fc:	f7f7 f9cc 	bl	8000598 <__aeabi_f2d>
 8009200:	a3d7      	add	r3, pc, #860	; (adr r3, 8009560 <cal_mollifier_table+0x7c8>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f7 fb49 	bl	800089c <__aeabi_ddiv>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009212:	f7f7 fa19 	bl	8000648 <__aeabi_dmul>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4640      	mov	r0, r8
 800921c:	4649      	mov	r1, r9
 800921e:	f7f7 f85d 	bl	80002dc <__adddf3>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 fb37 	bl	800089c <__aeabi_ddiv>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	ec43 2b17 	vmov	d7, r2, r3
 8009236:	eeb0 0a47 	vmov.f32	s0, s14
 800923a:	eef0 0a67 	vmov.f32	s1, s15
 800923e:	f018 fccf 	bl	8021be0 <exp>
 8009242:	ec53 2b10 	vmov	r2, r3, d0
 8009246:	4650      	mov	r0, sl
 8009248:	4659      	mov	r1, fp
 800924a:	f7f7 f9fd 	bl	8000648 <__aeabi_dmul>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	f7f7 fccf 	bl	8000bf8 <__aeabi_d2f>
 800925a:	4602      	mov	r2, r0
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009260:	f000 bcb4 	b.w	8009bcc <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8009264:	4bc0      	ldr	r3, [pc, #768]	; (8009568 <cal_mollifier_table+0x7d0>)
 8009266:	edd3 7a00 	vldr	s15, [r3]
 800926a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800926e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009272:	f140 817b 	bpl.w	800956c <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009276:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800927a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800927e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009282:	edd7 7a05 	vldr	s15, [r7, #20]
 8009286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928a:	ee17 0a90 	vmov	r0, s15
 800928e:	f7f7 f983 	bl	8000598 <__aeabi_f2d>
 8009292:	a3af      	add	r3, pc, #700	; (adr r3, 8009550 <cal_mollifier_table+0x7b8>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f7f7 fb00 	bl	800089c <__aeabi_ddiv>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80092a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092a8:	eeb1 7a67 	vneg.f32	s14, s15
 80092ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80092b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092bc:	ee16 0a90 	vmov	r0, s13
 80092c0:	f7f7 f96a 	bl	8000598 <__aeabi_f2d>
 80092c4:	4604      	mov	r4, r0
 80092c6:	460d      	mov	r5, r1
 80092c8:	4ba7      	ldr	r3, [pc, #668]	; (8009568 <cal_mollifier_table+0x7d0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f7 f963 	bl	8000598 <__aeabi_f2d>
 80092d2:	4680      	mov	r8, r0
 80092d4:	4689      	mov	r9, r1
 80092d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d8:	f7f7 f95e 	bl	8000598 <__aeabi_f2d>
 80092dc:	a39e      	add	r3, pc, #632	; (adr r3, 8009558 <cal_mollifier_table+0x7c0>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	f7f7 f9b1 	bl	8000648 <__aeabi_dmul>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4640      	mov	r0, r8
 80092ec:	4649      	mov	r1, r9
 80092ee:	f7f6 fff3 	bl	80002d8 <__aeabi_dsub>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f7 f9a5 	bl	8000648 <__aeabi_dmul>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	e9c7 2300 	strd	r2, r3, [r7]
 8009306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800930a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800930e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009312:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009316:	ee16 0a90 	vmov	r0, s13
 800931a:	f7f7 f93d 	bl	8000598 <__aeabi_f2d>
 800931e:	4680      	mov	r8, r0
 8009320:	4689      	mov	r9, r1
 8009322:	4b91      	ldr	r3, [pc, #580]	; (8009568 <cal_mollifier_table+0x7d0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f7f7 f936 	bl	8000598 <__aeabi_f2d>
 800932c:	4604      	mov	r4, r0
 800932e:	460d      	mov	r5, r1
 8009330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009332:	f7f7 f931 	bl	8000598 <__aeabi_f2d>
 8009336:	a388      	add	r3, pc, #544	; (adr r3, 8009558 <cal_mollifier_table+0x7c0>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f7 f984 	bl	8000648 <__aeabi_dmul>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4620      	mov	r0, r4
 8009346:	4629      	mov	r1, r5
 8009348:	f7f6 ffc6 	bl	80002d8 <__aeabi_dsub>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4692      	mov	sl, r2
 8009352:	469b      	mov	fp, r3
 8009354:	4b84      	ldr	r3, [pc, #528]	; (8009568 <cal_mollifier_table+0x7d0>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f7f7 f91d 	bl	8000598 <__aeabi_f2d>
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009364:	f7f7 f918 	bl	8000598 <__aeabi_f2d>
 8009368:	a37b      	add	r3, pc, #492	; (adr r3, 8009558 <cal_mollifier_table+0x7c0>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f7f7 f96b 	bl	8000648 <__aeabi_dmul>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4620      	mov	r0, r4
 8009378:	4629      	mov	r1, r5
 800937a:	f7f6 ffad 	bl	80002d8 <__aeabi_dsub>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4650      	mov	r0, sl
 8009384:	4659      	mov	r1, fp
 8009386:	f7f7 f95f 	bl	8000648 <__aeabi_dmul>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4640      	mov	r0, r8
 8009390:	4649      	mov	r1, r9
 8009392:	f7f6 ffa1 	bl	80002d8 <__aeabi_dsub>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800939e:	f7f7 fa7d 	bl	800089c <__aeabi_ddiv>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	e9c7 2300 	strd	r2, r3, [r7]
 80093aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80093ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80093b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093ba:	ee16 0a90 	vmov	r0, s13
 80093be:	f7f7 f8eb 	bl	8000598 <__aeabi_f2d>
 80093c2:	4680      	mov	r8, r0
 80093c4:	4689      	mov	r9, r1
 80093c6:	4b68      	ldr	r3, [pc, #416]	; (8009568 <cal_mollifier_table+0x7d0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7f7 f8e4 	bl	8000598 <__aeabi_f2d>
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093d6:	f7f7 f8df 	bl	8000598 <__aeabi_f2d>
 80093da:	a35f      	add	r3, pc, #380	; (adr r3, 8009558 <cal_mollifier_table+0x7c0>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f7f7 f932 	bl	8000648 <__aeabi_dmul>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 ff74 	bl	80002d8 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4692      	mov	sl, r2
 80093f6:	469b      	mov	fp, r3
 80093f8:	4b5b      	ldr	r3, [pc, #364]	; (8009568 <cal_mollifier_table+0x7d0>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f7 f8cb 	bl	8000598 <__aeabi_f2d>
 8009402:	4604      	mov	r4, r0
 8009404:	460d      	mov	r5, r1
 8009406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009408:	f7f7 f8c6 	bl	8000598 <__aeabi_f2d>
 800940c:	a352      	add	r3, pc, #328	; (adr r3, 8009558 <cal_mollifier_table+0x7c0>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f7f7 f919 	bl	8000648 <__aeabi_dmul>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4620      	mov	r0, r4
 800941c:	4629      	mov	r1, r5
 800941e:	f7f6 ff5b 	bl	80002d8 <__aeabi_dsub>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4650      	mov	r0, sl
 8009428:	4659      	mov	r1, fp
 800942a:	f7f7 f90d 	bl	8000648 <__aeabi_dmul>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4640      	mov	r0, r8
 8009434:	4649      	mov	r1, r9
 8009436:	f7f6 ff4f 	bl	80002d8 <__aeabi_dsub>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009442:	f7f7 fa2b 	bl	800089c <__aeabi_ddiv>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800944e:	f7f7 f8fb 	bl	8000648 <__aeabi_dmul>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800945a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800945e:	eeb1 7a67 	vneg.f32	s14, s15
 8009462:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800946e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009472:	ee16 0a90 	vmov	r0, s13
 8009476:	f7f7 f88f 	bl	8000598 <__aeabi_f2d>
 800947a:	4680      	mov	r8, r0
 800947c:	4689      	mov	r9, r1
 800947e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009482:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009486:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800948a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800948e:	ee16 0a90 	vmov	r0, s13
 8009492:	f7f7 f881 	bl	8000598 <__aeabi_f2d>
 8009496:	4682      	mov	sl, r0
 8009498:	468b      	mov	fp, r1
 800949a:	4b33      	ldr	r3, [pc, #204]	; (8009568 <cal_mollifier_table+0x7d0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f7f7 f87a 	bl	8000598 <__aeabi_f2d>
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094aa:	f7f7 f875 	bl	8000598 <__aeabi_f2d>
 80094ae:	a32a      	add	r3, pc, #168	; (adr r3, 8009558 <cal_mollifier_table+0x7c0>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f7f7 f8c8 	bl	8000648 <__aeabi_dmul>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f6 ff0a 	bl	80002d8 <__aeabi_dsub>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	e9c7 2300 	strd	r2, r3, [r7]
 80094cc:	4b26      	ldr	r3, [pc, #152]	; (8009568 <cal_mollifier_table+0x7d0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f7 f861 	bl	8000598 <__aeabi_f2d>
 80094d6:	4604      	mov	r4, r0
 80094d8:	460d      	mov	r5, r1
 80094da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094dc:	f7f7 f85c 	bl	8000598 <__aeabi_f2d>
 80094e0:	a31d      	add	r3, pc, #116	; (adr r3, 8009558 <cal_mollifier_table+0x7c0>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f7 f8af 	bl	8000648 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4620      	mov	r0, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	f7f6 fef1 	bl	80002d8 <__aeabi_dsub>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094fe:	f7f7 f8a3 	bl	8000648 <__aeabi_dmul>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4650      	mov	r0, sl
 8009508:	4659      	mov	r1, fp
 800950a:	f7f6 fee5 	bl	80002d8 <__aeabi_dsub>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	f7f7 f9c1 	bl	800089c <__aeabi_ddiv>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	ec43 2b17 	vmov	d7, r2, r3
 8009522:	eeb0 0a47 	vmov.f32	s0, s14
 8009526:	eef0 0a67 	vmov.f32	s1, s15
 800952a:	f018 fb59 	bl	8021be0 <exp>
 800952e:	ec53 2b10 	vmov	r2, r3, d0
 8009532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009536:	f7f7 f887 	bl	8000648 <__aeabi_dmul>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	f7f7 fb59 	bl	8000bf8 <__aeabi_d2f>
 8009546:	4602      	mov	r2, r0
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800954c:	e33e      	b.n	8009bcc <cal_mollifier_table+0xe34>
 800954e:	bf00      	nop
 8009550:	f9db22d1 	.word	0xf9db22d1
 8009554:	3fdc6a7e 	.word	0x3fdc6a7e
 8009558:	d2f1a9fc 	.word	0xd2f1a9fc
 800955c:	3f50624d 	.word	0x3f50624d
 8009560:	04189375 	.word	0x04189375
 8009564:	3ff50e56 	.word	0x3ff50e56
 8009568:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 800956c:	4bd4      	ldr	r3, [pc, #848]	; (80098c0 <cal_mollifier_table+0xb28>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4618      	mov	r0, r3
 8009572:	f7f7 f811 	bl	8000598 <__aeabi_f2d>
 8009576:	4604      	mov	r4, r0
 8009578:	460d      	mov	r5, r1
 800957a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800957e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009582:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009586:	ee16 0a90 	vmov	r0, s13
 800958a:	f7f7 f805 	bl	8000598 <__aeabi_f2d>
 800958e:	a3c6      	add	r3, pc, #792	; (adr r3, 80098a8 <cal_mollifier_table+0xb10>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f7 f982 	bl	800089c <__aeabi_ddiv>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4690      	mov	r8, r2
 800959e:	4699      	mov	r9, r3
 80095a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a2:	f7f6 fff9 	bl	8000598 <__aeabi_f2d>
 80095a6:	a3c2      	add	r3, pc, #776	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f7 f84c 	bl	8000648 <__aeabi_dmul>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4640      	mov	r0, r8
 80095b6:	4649      	mov	r1, r9
 80095b8:	f7f6 fe90 	bl	80002dc <__adddf3>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4620      	mov	r0, r4
 80095c2:	4629      	mov	r1, r5
 80095c4:	f7f7 fab2 	bl	8000b2c <__aeabi_dcmplt>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 817a 	beq.w	80098c4 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80095d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80095d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80095e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e4:	ee17 0a90 	vmov	r0, s15
 80095e8:	f7f6 ffd6 	bl	8000598 <__aeabi_f2d>
 80095ec:	a3b2      	add	r3, pc, #712	; (adr r3, 80098b8 <cal_mollifier_table+0xb20>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	f7f7 f953 	bl	800089c <__aeabi_ddiv>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80095fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009602:	eeb1 7a67 	vneg.f32	s14, s15
 8009606:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800960a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009612:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009616:	ee16 0a90 	vmov	r0, s13
 800961a:	f7f6 ffbd 	bl	8000598 <__aeabi_f2d>
 800961e:	4604      	mov	r4, r0
 8009620:	460d      	mov	r5, r1
 8009622:	4ba7      	ldr	r3, [pc, #668]	; (80098c0 <cal_mollifier_table+0xb28>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f7f6 ffb6 	bl	8000598 <__aeabi_f2d>
 800962c:	4680      	mov	r8, r0
 800962e:	4689      	mov	r9, r1
 8009630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009632:	f7f6 ffb1 	bl	8000598 <__aeabi_f2d>
 8009636:	a39e      	add	r3, pc, #632	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f7 f804 	bl	8000648 <__aeabi_dmul>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4640      	mov	r0, r8
 8009646:	4649      	mov	r1, r9
 8009648:	f7f6 fe46 	bl	80002d8 <__aeabi_dsub>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4620      	mov	r0, r4
 8009652:	4629      	mov	r1, r5
 8009654:	f7f6 fff8 	bl	8000648 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	e9c7 2300 	strd	r2, r3, [r7]
 8009660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009664:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009668:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800966c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009670:	ee16 0a90 	vmov	r0, s13
 8009674:	f7f6 ff90 	bl	8000598 <__aeabi_f2d>
 8009678:	4680      	mov	r8, r0
 800967a:	4689      	mov	r9, r1
 800967c:	4b90      	ldr	r3, [pc, #576]	; (80098c0 <cal_mollifier_table+0xb28>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f7f6 ff89 	bl	8000598 <__aeabi_f2d>
 8009686:	4604      	mov	r4, r0
 8009688:	460d      	mov	r5, r1
 800968a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800968c:	f7f6 ff84 	bl	8000598 <__aeabi_f2d>
 8009690:	a387      	add	r3, pc, #540	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 ffd7 	bl	8000648 <__aeabi_dmul>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4620      	mov	r0, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	f7f6 fe19 	bl	80002d8 <__aeabi_dsub>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4692      	mov	sl, r2
 80096ac:	469b      	mov	fp, r3
 80096ae:	4b84      	ldr	r3, [pc, #528]	; (80098c0 <cal_mollifier_table+0xb28>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f6 ff70 	bl	8000598 <__aeabi_f2d>
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096be:	f7f6 ff6b 	bl	8000598 <__aeabi_f2d>
 80096c2:	a37b      	add	r3, pc, #492	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 ffbe 	bl	8000648 <__aeabi_dmul>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4620      	mov	r0, r4
 80096d2:	4629      	mov	r1, r5
 80096d4:	f7f6 fe00 	bl	80002d8 <__aeabi_dsub>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4650      	mov	r0, sl
 80096de:	4659      	mov	r1, fp
 80096e0:	f7f6 ffb2 	bl	8000648 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4640      	mov	r0, r8
 80096ea:	4649      	mov	r1, r9
 80096ec:	f7f6 fdf4 	bl	80002d8 <__aeabi_dsub>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096f8:	f7f7 f8d0 	bl	800089c <__aeabi_ddiv>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	e9c7 2300 	strd	r2, r3, [r7]
 8009704:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009708:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800970c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009710:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009714:	ee16 0a90 	vmov	r0, s13
 8009718:	f7f6 ff3e 	bl	8000598 <__aeabi_f2d>
 800971c:	4680      	mov	r8, r0
 800971e:	4689      	mov	r9, r1
 8009720:	4b67      	ldr	r3, [pc, #412]	; (80098c0 <cal_mollifier_table+0xb28>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f7f6 ff37 	bl	8000598 <__aeabi_f2d>
 800972a:	4604      	mov	r4, r0
 800972c:	460d      	mov	r5, r1
 800972e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009730:	f7f6 ff32 	bl	8000598 <__aeabi_f2d>
 8009734:	a35e      	add	r3, pc, #376	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	f7f6 ff85 	bl	8000648 <__aeabi_dmul>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4620      	mov	r0, r4
 8009744:	4629      	mov	r1, r5
 8009746:	f7f6 fdc7 	bl	80002d8 <__aeabi_dsub>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4692      	mov	sl, r2
 8009750:	469b      	mov	fp, r3
 8009752:	4b5b      	ldr	r3, [pc, #364]	; (80098c0 <cal_mollifier_table+0xb28>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f7f6 ff1e 	bl	8000598 <__aeabi_f2d>
 800975c:	4604      	mov	r4, r0
 800975e:	460d      	mov	r5, r1
 8009760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009762:	f7f6 ff19 	bl	8000598 <__aeabi_f2d>
 8009766:	a352      	add	r3, pc, #328	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 ff6c 	bl	8000648 <__aeabi_dmul>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4620      	mov	r0, r4
 8009776:	4629      	mov	r1, r5
 8009778:	f7f6 fdae 	bl	80002d8 <__aeabi_dsub>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4650      	mov	r0, sl
 8009782:	4659      	mov	r1, fp
 8009784:	f7f6 ff60 	bl	8000648 <__aeabi_dmul>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	4640      	mov	r0, r8
 800978e:	4649      	mov	r1, r9
 8009790:	f7f6 fda2 	bl	80002d8 <__aeabi_dsub>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800979c:	f7f7 f87e 	bl	800089c <__aeabi_ddiv>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097a8:	f7f6 ff4e 	bl	8000648 <__aeabi_dmul>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80097b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097b8:	eeb1 7a67 	vneg.f32	s14, s15
 80097bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80097c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097cc:	ee16 0a90 	vmov	r0, s13
 80097d0:	f7f6 fee2 	bl	8000598 <__aeabi_f2d>
 80097d4:	4680      	mov	r8, r0
 80097d6:	4689      	mov	r9, r1
 80097d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80097e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80097e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097e8:	ee16 0a90 	vmov	r0, s13
 80097ec:	f7f6 fed4 	bl	8000598 <__aeabi_f2d>
 80097f0:	4682      	mov	sl, r0
 80097f2:	468b      	mov	fp, r1
 80097f4:	4b32      	ldr	r3, [pc, #200]	; (80098c0 <cal_mollifier_table+0xb28>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7f6 fecd 	bl	8000598 <__aeabi_f2d>
 80097fe:	4604      	mov	r4, r0
 8009800:	460d      	mov	r5, r1
 8009802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009804:	f7f6 fec8 	bl	8000598 <__aeabi_f2d>
 8009808:	a329      	add	r3, pc, #164	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f7f6 ff1b 	bl	8000648 <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f6 fd5d 	bl	80002d8 <__aeabi_dsub>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	e9c7 2300 	strd	r2, r3, [r7]
 8009826:	4b26      	ldr	r3, [pc, #152]	; (80098c0 <cal_mollifier_table+0xb28>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f7f6 feb4 	bl	8000598 <__aeabi_f2d>
 8009830:	4604      	mov	r4, r0
 8009832:	460d      	mov	r5, r1
 8009834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009836:	f7f6 feaf 	bl	8000598 <__aeabi_f2d>
 800983a:	a31d      	add	r3, pc, #116	; (adr r3, 80098b0 <cal_mollifier_table+0xb18>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7f6 ff02 	bl	8000648 <__aeabi_dmul>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4620      	mov	r0, r4
 800984a:	4629      	mov	r1, r5
 800984c:	f7f6 fd44 	bl	80002d8 <__aeabi_dsub>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009858:	f7f6 fef6 	bl	8000648 <__aeabi_dmul>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4650      	mov	r0, sl
 8009862:	4659      	mov	r1, fp
 8009864:	f7f6 fd38 	bl	80002d8 <__aeabi_dsub>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4640      	mov	r0, r8
 800986e:	4649      	mov	r1, r9
 8009870:	f7f7 f814 	bl	800089c <__aeabi_ddiv>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	ec43 2b17 	vmov	d7, r2, r3
 800987c:	eeb0 0a47 	vmov.f32	s0, s14
 8009880:	eef0 0a67 	vmov.f32	s1, s15
 8009884:	f018 f9ac 	bl	8021be0 <exp>
 8009888:	ec53 2b10 	vmov	r2, r3, d0
 800988c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009890:	f7f6 feda 	bl	8000648 <__aeabi_dmul>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4610      	mov	r0, r2
 800989a:	4619      	mov	r1, r3
 800989c:	f7f7 f9ac 	bl	8000bf8 <__aeabi_d2f>
 80098a0:	4602      	mov	r2, r0
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80098a6:	e191      	b.n	8009bcc <cal_mollifier_table+0xe34>
 80098a8:	04189375 	.word	0x04189375
 80098ac:	3ff50e56 	.word	0x3ff50e56
 80098b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80098b4:	3f50624d 	.word	0x3f50624d
 80098b8:	f9db22d1 	.word	0xf9db22d1
 80098bc:	3fdc6a7e 	.word	0x3fdc6a7e
 80098c0:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80098ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80098ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80098d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80098da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098de:	ee17 0a90 	vmov	r0, s15
 80098e2:	f7f6 fe59 	bl	8000598 <__aeabi_f2d>
 80098e6:	a3c0      	add	r3, pc, #768	; (adr r3, 8009be8 <cal_mollifier_table+0xe50>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f6 ffd6 	bl	800089c <__aeabi_ddiv>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80098f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80098fc:	eeb1 7a67 	vneg.f32	s14, s15
 8009900:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009908:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800990c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009910:	ee16 0a90 	vmov	r0, s13
 8009914:	f7f6 fe40 	bl	8000598 <__aeabi_f2d>
 8009918:	4604      	mov	r4, r0
 800991a:	460d      	mov	r5, r1
 800991c:	4bb0      	ldr	r3, [pc, #704]	; (8009be0 <cal_mollifier_table+0xe48>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f7f6 fe39 	bl	8000598 <__aeabi_f2d>
 8009926:	4680      	mov	r8, r0
 8009928:	4689      	mov	r9, r1
 800992a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800992c:	f7f6 fe34 	bl	8000598 <__aeabi_f2d>
 8009930:	a3a9      	add	r3, pc, #676	; (adr r3, 8009bd8 <cal_mollifier_table+0xe40>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	f7f6 fe87 	bl	8000648 <__aeabi_dmul>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4640      	mov	r0, r8
 8009940:	4649      	mov	r1, r9
 8009942:	f7f6 fcc9 	bl	80002d8 <__aeabi_dsub>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f6 fe7b 	bl	8000648 <__aeabi_dmul>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	e9c7 2300 	strd	r2, r3, [r7]
 800995a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800995e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009962:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009966:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800996a:	ee16 0a90 	vmov	r0, s13
 800996e:	f7f6 fe13 	bl	8000598 <__aeabi_f2d>
 8009972:	4680      	mov	r8, r0
 8009974:	4689      	mov	r9, r1
 8009976:	4b9a      	ldr	r3, [pc, #616]	; (8009be0 <cal_mollifier_table+0xe48>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f7f6 fe0c 	bl	8000598 <__aeabi_f2d>
 8009980:	4604      	mov	r4, r0
 8009982:	460d      	mov	r5, r1
 8009984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009986:	f7f6 fe07 	bl	8000598 <__aeabi_f2d>
 800998a:	a393      	add	r3, pc, #588	; (adr r3, 8009bd8 <cal_mollifier_table+0xe40>)
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f7f6 fe5a 	bl	8000648 <__aeabi_dmul>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4620      	mov	r0, r4
 800999a:	4629      	mov	r1, r5
 800999c:	f7f6 fc9c 	bl	80002d8 <__aeabi_dsub>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4692      	mov	sl, r2
 80099a6:	469b      	mov	fp, r3
 80099a8:	4b8d      	ldr	r3, [pc, #564]	; (8009be0 <cal_mollifier_table+0xe48>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f6 fdf3 	bl	8000598 <__aeabi_f2d>
 80099b2:	4604      	mov	r4, r0
 80099b4:	460d      	mov	r5, r1
 80099b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099b8:	f7f6 fdee 	bl	8000598 <__aeabi_f2d>
 80099bc:	a386      	add	r3, pc, #536	; (adr r3, 8009bd8 <cal_mollifier_table+0xe40>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fe41 	bl	8000648 <__aeabi_dmul>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fc83 	bl	80002d8 <__aeabi_dsub>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4650      	mov	r0, sl
 80099d8:	4659      	mov	r1, fp
 80099da:	f7f6 fe35 	bl	8000648 <__aeabi_dmul>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7f6 fc77 	bl	80002d8 <__aeabi_dsub>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099f2:	f7f6 ff53 	bl	800089c <__aeabi_ddiv>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	e9c7 2300 	strd	r2, r3, [r7]
 80099fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009a02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009a06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009a0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a0e:	ee16 0a90 	vmov	r0, s13
 8009a12:	f7f6 fdc1 	bl	8000598 <__aeabi_f2d>
 8009a16:	4680      	mov	r8, r0
 8009a18:	4689      	mov	r9, r1
 8009a1a:	4b71      	ldr	r3, [pc, #452]	; (8009be0 <cal_mollifier_table+0xe48>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f6 fdba 	bl	8000598 <__aeabi_f2d>
 8009a24:	4604      	mov	r4, r0
 8009a26:	460d      	mov	r5, r1
 8009a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a2a:	f7f6 fdb5 	bl	8000598 <__aeabi_f2d>
 8009a2e:	a36a      	add	r3, pc, #424	; (adr r3, 8009bd8 <cal_mollifier_table+0xe40>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fe08 	bl	8000648 <__aeabi_dmul>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	4629      	mov	r1, r5
 8009a40:	f7f6 fc4a 	bl	80002d8 <__aeabi_dsub>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4692      	mov	sl, r2
 8009a4a:	469b      	mov	fp, r3
 8009a4c:	4b64      	ldr	r3, [pc, #400]	; (8009be0 <cal_mollifier_table+0xe48>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7f6 fda1 	bl	8000598 <__aeabi_f2d>
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a5c:	f7f6 fd9c 	bl	8000598 <__aeabi_f2d>
 8009a60:	a35d      	add	r3, pc, #372	; (adr r3, 8009bd8 <cal_mollifier_table+0xe40>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f7f6 fdef 	bl	8000648 <__aeabi_dmul>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f6 fc31 	bl	80002d8 <__aeabi_dsub>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	f7f6 fde3 	bl	8000648 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4640      	mov	r0, r8
 8009a88:	4649      	mov	r1, r9
 8009a8a:	f7f6 fc25 	bl	80002d8 <__aeabi_dsub>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a96:	f7f6 ff01 	bl	800089c <__aeabi_ddiv>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009aa2:	f7f6 fdd1 	bl	8000648 <__aeabi_dmul>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009aae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ab2:	eeb1 7a67 	vneg.f32	s14, s15
 8009ab6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009abe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ac2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ac6:	ee16 0a90 	vmov	r0, s13
 8009aca:	f7f6 fd65 	bl	8000598 <__aeabi_f2d>
 8009ace:	4680      	mov	r8, r0
 8009ad0:	4689      	mov	r9, r1
 8009ad2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009ada:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ade:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ae2:	ee16 0a90 	vmov	r0, s13
 8009ae6:	f7f6 fd57 	bl	8000598 <__aeabi_f2d>
 8009aea:	4682      	mov	sl, r0
 8009aec:	468b      	mov	fp, r1
 8009aee:	4b3c      	ldr	r3, [pc, #240]	; (8009be0 <cal_mollifier_table+0xe48>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f6 fd50 	bl	8000598 <__aeabi_f2d>
 8009af8:	4604      	mov	r4, r0
 8009afa:	460d      	mov	r5, r1
 8009afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009afe:	f7f6 fd4b 	bl	8000598 <__aeabi_f2d>
 8009b02:	a335      	add	r3, pc, #212	; (adr r3, 8009bd8 <cal_mollifier_table+0xe40>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f7f6 fd9e 	bl	8000648 <__aeabi_dmul>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4620      	mov	r0, r4
 8009b12:	4629      	mov	r1, r5
 8009b14:	f7f6 fbe0 	bl	80002d8 <__aeabi_dsub>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	e9c7 2300 	strd	r2, r3, [r7]
 8009b20:	4b2f      	ldr	r3, [pc, #188]	; (8009be0 <cal_mollifier_table+0xe48>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7f6 fd37 	bl	8000598 <__aeabi_f2d>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	460d      	mov	r5, r1
 8009b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b30:	f7f6 fd32 	bl	8000598 <__aeabi_f2d>
 8009b34:	a328      	add	r3, pc, #160	; (adr r3, 8009bd8 <cal_mollifier_table+0xe40>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fd85 	bl	8000648 <__aeabi_dmul>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4620      	mov	r0, r4
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7f6 fbc7 	bl	80002d8 <__aeabi_dsub>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b52:	f7f6 fd79 	bl	8000648 <__aeabi_dmul>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	f7f6 fbbb 	bl	80002d8 <__aeabi_dsub>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fe97 	bl	800089c <__aeabi_ddiv>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	ec43 2b17 	vmov	d7, r2, r3
 8009b76:	eeb0 0a47 	vmov.f32	s0, s14
 8009b7a:	eef0 0a67 	vmov.f32	s1, s15
 8009b7e:	f018 f82f 	bl	8021be0 <exp>
 8009b82:	ec53 2b10 	vmov	r2, r3, d0
 8009b86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b8a:	f7f6 fd5d 	bl	8000648 <__aeabi_dmul>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4610      	mov	r0, r2
 8009b94:	4619      	mov	r1, r3
 8009b96:	f7f7 f82f 	bl	8000bf8 <__aeabi_d2f>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009ba0:	e014      	b.n	8009bcc <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f04f 0200 	mov.w	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	ed93 7a00 	vldr	s14, [r3]
 8009bb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8009bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009bc4:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <cal_mollifier_table+0xe4c>)
 8009bc6:	2204      	movs	r2, #4
 8009bc8:	701a      	strb	r2, [r3, #0]
		}

}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	3730      	adds	r7, #48	; 0x30
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bd6:	bf00      	nop
 8009bd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8009bdc:	3f50624d 	.word	0x3f50624d
 8009be0:	20000800 	.word	0x20000800
 8009be4:	20000804 	.word	0x20000804
 8009be8:	f9db22d1 	.word	0xf9db22d1
 8009bec:	3fdc6a7e 	.word	0x3fdc6a7e

08009bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009bf6:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <MX_DMA_Init+0x60>)
 8009bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfa:	4a15      	ldr	r2, [pc, #84]	; (8009c50 <MX_DMA_Init+0x60>)
 8009bfc:	f043 0304 	orr.w	r3, r3, #4
 8009c00:	6493      	str	r3, [r2, #72]	; 0x48
 8009c02:	4b13      	ldr	r3, [pc, #76]	; (8009c50 <MX_DMA_Init+0x60>)
 8009c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009c0e:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <MX_DMA_Init+0x60>)
 8009c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c12:	4a0f      	ldr	r2, [pc, #60]	; (8009c50 <MX_DMA_Init+0x60>)
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	6493      	str	r3, [r2, #72]	; 0x48
 8009c1a:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <MX_DMA_Init+0x60>)
 8009c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2100      	movs	r1, #0
 8009c2a:	200b      	movs	r0, #11
 8009c2c:	f010 f9cd 	bl	8019fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009c30:	200b      	movs	r0, #11
 8009c32:	f010 f9e4 	bl	8019ffe <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8009c36:	2200      	movs	r2, #0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	205e      	movs	r0, #94	; 0x5e
 8009c3c:	f010 f9c5 	bl	8019fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8009c40:	205e      	movs	r0, #94	; 0x5e
 8009c42:	f010 f9dc 	bl	8019ffe <HAL_NVIC_EnableIRQ>

}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	40021000 	.word	0x40021000

08009c54 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0
	error_mode=0;
 8009c58:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <init_FailSafe+0x4c>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 8009c5e:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <init_FailSafe+0x50>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8009c64:	4b10      	ldr	r3, [pc, #64]	; (8009ca8 <init_FailSafe+0x54>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 8009c6a:	4b10      	ldr	r3, [pc, #64]	; (8009cac <init_FailSafe+0x58>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009c70:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <init_FailSafe+0x5c>)
 8009c72:	4a10      	ldr	r2, [pc, #64]	; (8009cb4 <init_FailSafe+0x60>)
 8009c74:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <init_FailSafe+0x64>)
 8009c78:	4a10      	ldr	r2, [pc, #64]	; (8009cbc <init_FailSafe+0x68>)
 8009c7a:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 8009c7c:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <init_FailSafe+0x6c>)
 8009c7e:	4a0d      	ldr	r2, [pc, #52]	; (8009cb4 <init_FailSafe+0x60>)
 8009c80:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=2000;//3000
 8009c82:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <init_FailSafe+0x70>)
 8009c84:	4a10      	ldr	r2, [pc, #64]	; (8009cc8 <init_FailSafe+0x74>)
 8009c86:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009c88:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <init_FailSafe+0x78>)
 8009c8a:	4a11      	ldr	r2, [pc, #68]	; (8009cd0 <init_FailSafe+0x7c>)
 8009c8c:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1500;
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <init_FailSafe+0x80>)
 8009c90:	4a08      	ldr	r2, [pc, #32]	; (8009cb4 <init_FailSafe+0x60>)
 8009c92:	601a      	str	r2, [r3, #0]
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20000807 	.word	0x20000807
 8009ca4:	20000806 	.word	0x20000806
 8009ca8:	20000808 	.word	0x20000808
 8009cac:	20000824 	.word	0x20000824
 8009cb0:	2000080c 	.word	0x2000080c
 8009cb4:	44bb8000 	.word	0x44bb8000
 8009cb8:	20000810 	.word	0x20000810
 8009cbc:	44480000 	.word	0x44480000
 8009cc0:	20000814 	.word	0x20000814
 8009cc4:	20000818 	.word	0x20000818
 8009cc8:	44fa0000 	.word	0x44fa0000
 8009ccc:	2000081c 	.word	0x2000081c
 8009cd0:	44ed8000 	.word	0x44ed8000
 8009cd4:	20000820 	.word	0x20000820

08009cd8 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 8009cde:	4b6e      	ldr	r3, [pc, #440]	; (8009e98 <interrupt_FailSafe+0x1c0>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d109      	bne.n	8009cfa <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009ce6:	4b6d      	ldr	r3, [pc, #436]	; (8009e9c <interrupt_FailSafe+0x1c4>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8009cec:	4b6c      	ldr	r3, [pc, #432]	; (8009ea0 <interrupt_FailSafe+0x1c8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 8009cf2:	4b6c      	ldr	r3, [pc, #432]	; (8009ea4 <interrupt_FailSafe+0x1cc>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	e008      	b.n	8009d0c <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8009cfa:	4b6b      	ldr	r3, [pc, #428]	; (8009ea8 <interrupt_FailSafe+0x1d0>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009d00:	4b6a      	ldr	r3, [pc, #424]	; (8009eac <interrupt_FailSafe+0x1d4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009d06:	4b6a      	ldr	r3, [pc, #424]	; (8009eb0 <interrupt_FailSafe+0x1d8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8009d0c:	4b69      	ldr	r3, [pc, #420]	; (8009eb4 <interrupt_FailSafe+0x1dc>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d062      	beq.n	8009dda <interrupt_FailSafe+0x102>
 8009d14:	4b67      	ldr	r3, [pc, #412]	; (8009eb4 <interrupt_FailSafe+0x1dc>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d05e      	beq.n	8009dda <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8009d1c:	4b66      	ldr	r3, [pc, #408]	; (8009eb8 <interrupt_FailSafe+0x1e0>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d15a      	bne.n	8009dda <interrupt_FailSafe+0x102>
 8009d24:	4b65      	ldr	r3, [pc, #404]	; (8009ebc <interrupt_FailSafe+0x1e4>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d156      	bne.n	8009dda <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8009d2c:	4b64      	ldr	r3, [pc, #400]	; (8009ec0 <interrupt_FailSafe+0x1e8>)
 8009d2e:	ed93 7a00 	vldr	s14, [r3]
 8009d32:	4b64      	ldr	r3, [pc, #400]	; (8009ec4 <interrupt_FailSafe+0x1ec>)
 8009d34:	edd3 7a00 	vldr	s15, [r3]
 8009d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d3c:	eef0 7ae7 	vabs.f32	s15, s15
 8009d40:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4c:	d809      	bhi.n	8009d62 <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009d4e:	f7fe f88d 	bl	8007e6c <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 8009d52:	2001      	movs	r0, #1
 8009d54:	f7fd fa8a 	bl	800726c <pl_yellow_LED_count>
						error_mode = 1;
 8009d58:	4b58      	ldr	r3, [pc, #352]	; (8009ebc <interrupt_FailSafe+0x1e4>)
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009d5e:	f7fa fee9 	bl	8004b34 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 8009d62:	4b59      	ldr	r3, [pc, #356]	; (8009ec8 <interrupt_FailSafe+0x1f0>)
 8009d64:	edd3 7a00 	vldr	s15, [r3]
 8009d68:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d74:	d809      	bhi.n	8009d8a <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009d76:	f7fe f879 	bl	8007e6c <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 8009d7a:	2002      	movs	r0, #2
 8009d7c:	f7fd fa76 	bl	800726c <pl_yellow_LED_count>
						error_mode = 1;
 8009d80:	4b4e      	ldr	r3, [pc, #312]	; (8009ebc <interrupt_FailSafe+0x1e4>)
 8009d82:	2201      	movs	r2, #1
 8009d84:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009d86:	f7fa fed5 	bl	8004b34 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 8009d8a:	4b50      	ldr	r3, [pc, #320]	; (8009ecc <interrupt_FailSafe+0x1f4>)
 8009d8c:	ed93 7a00 	vldr	s14, [r3]
 8009d90:	4b4f      	ldr	r3, [pc, #316]	; (8009ed0 <interrupt_FailSafe+0x1f8>)
 8009d92:	edd3 6a00 	vldr	s13, [r3]
 8009d96:	4b4f      	ldr	r3, [pc, #316]	; (8009ed4 <interrupt_FailSafe+0x1fc>)
 8009d98:	edd3 7a00 	vldr	s15, [r3]
 8009d9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009da0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009da4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dac:	eef0 7ae7 	vabs.f32	s15, s15
 8009db0:	ed97 7a03 	vldr	s14, [r7, #12]
 8009db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbc:	d80d      	bhi.n	8009dda <interrupt_FailSafe+0x102>
 8009dbe:	4b3d      	ldr	r3, [pc, #244]	; (8009eb4 <interrupt_FailSafe+0x1dc>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d109      	bne.n	8009dda <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009dc6:	f7fe f851 	bl	8007e6c <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009dca:	2004      	movs	r0, #4
 8009dcc:	f7fd fa4e 	bl	800726c <pl_yellow_LED_count>
						error_mode = 1;
 8009dd0:	4b3a      	ldr	r3, [pc, #232]	; (8009ebc <interrupt_FailSafe+0x1e4>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009dd6:	f7fa fead 	bl	8004b34 <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009dda:	4b38      	ldr	r3, [pc, #224]	; (8009ebc <interrupt_FailSafe+0x1e4>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d153      	bne.n	8009e8a <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009de2:	4b3d      	ldr	r3, [pc, #244]	; (8009ed8 <interrupt_FailSafe+0x200>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009de8:	4b3c      	ldr	r3, [pc, #240]	; (8009edc <interrupt_FailSafe+0x204>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3301      	adds	r3, #1
 8009dee:	4a3b      	ldr	r2, [pc, #236]	; (8009edc <interrupt_FailSafe+0x204>)
 8009df0:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009df2:	4b3a      	ldr	r3, [pc, #232]	; (8009edc <interrupt_FailSafe+0x204>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dfa:	dc05      	bgt.n	8009e08 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009dfc:	f7fa ffc6 	bl	8004d8c <init_WallControl>
			modeacc=100;//エラー用
 8009e00:	4b2c      	ldr	r3, [pc, #176]	; (8009eb4 <interrupt_FailSafe+0x1dc>)
 8009e02:	2264      	movs	r2, #100	; 0x64
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	e009      	b.n	8009e1c <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009e08:	2000      	movs	r0, #0
 8009e0a:	f7fd ff9b 	bl	8007d44 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 8009e0e:	f7fd ffff 	bl	8007e10 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8009e12:	f7fe f82b 	bl	8007e6c <pl_FunMotor_stop>
			modeacc=0;
 8009e16:	4b27      	ldr	r3, [pc, #156]	; (8009eb4 <interrupt_FailSafe+0x1dc>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009e1c:	4b30      	ldr	r3, [pc, #192]	; (8009ee0 <interrupt_FailSafe+0x208>)
 8009e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e22:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009e24:	4b2f      	ldr	r3, [pc, #188]	; (8009ee4 <interrupt_FailSafe+0x20c>)
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009e2c:	4b2e      	ldr	r3, [pc, #184]	; (8009ee8 <interrupt_FailSafe+0x210>)
 8009e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e32:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009e34:	4b2d      	ldr	r3, [pc, #180]	; (8009eec <interrupt_FailSafe+0x214>)
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8009e3c:	4b2c      	ldr	r3, [pc, #176]	; (8009ef0 <interrupt_FailSafe+0x218>)
 8009e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e42:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009e44:	4b2b      	ldr	r3, [pc, #172]	; (8009ef4 <interrupt_FailSafe+0x21c>)
 8009e46:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 100;
 8009e4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ef8 <interrupt_FailSafe+0x220>)
 8009e4e:	4a2b      	ldr	r2, [pc, #172]	; (8009efc <interrupt_FailSafe+0x224>)
 8009e50:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 100;
 8009e52:	4b2b      	ldr	r3, [pc, #172]	; (8009f00 <interrupt_FailSafe+0x228>)
 8009e54:	4a29      	ldr	r2, [pc, #164]	; (8009efc <interrupt_FailSafe+0x224>)
 8009e56:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 40;
 8009e58:	4b2a      	ldr	r3, [pc, #168]	; (8009f04 <interrupt_FailSafe+0x22c>)
 8009e5a:	4a2b      	ldr	r2, [pc, #172]	; (8009f08 <interrupt_FailSafe+0x230>)
 8009e5c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 40;
 8009e5e:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <interrupt_FailSafe+0x234>)
 8009e60:	4a29      	ldr	r2, [pc, #164]	; (8009f08 <interrupt_FailSafe+0x230>)
 8009e62:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 70;
 8009e64:	4b2a      	ldr	r3, [pc, #168]	; (8009f10 <interrupt_FailSafe+0x238>)
 8009e66:	4a2b      	ldr	r2, [pc, #172]	; (8009f14 <interrupt_FailSafe+0x23c>)
 8009e68:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 70;
 8009e6a:	4b2b      	ldr	r3, [pc, #172]	; (8009f18 <interrupt_FailSafe+0x240>)
 8009e6c:	4a29      	ldr	r2, [pc, #164]	; (8009f14 <interrupt_FailSafe+0x23c>)
 8009e6e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 70;
 8009e70:	4b2a      	ldr	r3, [pc, #168]	; (8009f1c <interrupt_FailSafe+0x244>)
 8009e72:	4a28      	ldr	r2, [pc, #160]	; (8009f14 <interrupt_FailSafe+0x23c>)
 8009e74:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 70;
 8009e76:	4b2a      	ldr	r3, [pc, #168]	; (8009f20 <interrupt_FailSafe+0x248>)
 8009e78:	4a26      	ldr	r2, [pc, #152]	; (8009f14 <interrupt_FailSafe+0x23c>)
 8009e7a:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009e7c:	4b29      	ldr	r3, [pc, #164]	; (8009f24 <interrupt_FailSafe+0x24c>)
 8009e7e:	2204      	movs	r2, #4
 8009e80:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <interrupt_FailSafe+0x250>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009e88:	e002      	b.n	8009e90 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009e8a:	4b14      	ldr	r3, [pc, #80]	; (8009edc <interrupt_FailSafe+0x204>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000808 	.word	0x20000808
 8009e9c:	2000080c 	.word	0x2000080c
 8009ea0:	20000810 	.word	0x20000810
 8009ea4:	20000814 	.word	0x20000814
 8009ea8:	20000818 	.word	0x20000818
 8009eac:	2000081c 	.word	0x2000081c
 8009eb0:	20000820 	.word	0x20000820
 8009eb4:	20000528 	.word	0x20000528
 8009eb8:	20000806 	.word	0x20000806
 8009ebc:	20000807 	.word	0x20000807
 8009ec0:	200004e4 	.word	0x200004e4
 8009ec4:	20000268 	.word	0x20000268
 8009ec8:	20000274 	.word	0x20000274
 8009ecc:	200004d8 	.word	0x200004d8
 8009ed0:	2000025c 	.word	0x2000025c
 8009ed4:	20000258 	.word	0x20000258
 8009ed8:	2000d96c 	.word	0x2000d96c
 8009edc:	20000824 	.word	0x20000824
 8009ee0:	200005b8 	.word	0x200005b8
 8009ee4:	200005b4 	.word	0x200005b4
 8009ee8:	200005c0 	.word	0x200005c0
 8009eec:	200005bc 	.word	0x200005bc
 8009ef0:	200005c8 	.word	0x200005c8
 8009ef4:	200005c4 	.word	0x200005c4
 8009ef8:	200005d0 	.word	0x200005d0
 8009efc:	42c80000 	.word	0x42c80000
 8009f00:	200005cc 	.word	0x200005cc
 8009f04:	200005d8 	.word	0x200005d8
 8009f08:	42200000 	.word	0x42200000
 8009f0c:	200005d4 	.word	0x200005d4
 8009f10:	200005e0 	.word	0x200005e0
 8009f14:	428c0000 	.word	0x428c0000
 8009f18:	200005dc 	.word	0x200005dc
 8009f1c:	200005e8 	.word	0x200005e8
 8009f20:	200005e4 	.word	0x200005e4
 8009f24:	20000804 	.word	0x20000804
 8009f28:	20000592 	.word	0x20000592

08009f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b08a      	sub	sp, #40	; 0x28
 8009f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f32:	f107 0314 	add.w	r3, r7, #20
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	605a      	str	r2, [r3, #4]
 8009f3c:	609a      	str	r2, [r3, #8]
 8009f3e:	60da      	str	r2, [r3, #12]
 8009f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f42:	4b3a      	ldr	r3, [pc, #232]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f46:	4a39      	ldr	r2, [pc, #228]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f48:	f043 0304 	orr.w	r3, r3, #4
 8009f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f4e:	4b37      	ldr	r3, [pc, #220]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	613b      	str	r3, [r7, #16]
 8009f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009f5a:	4b34      	ldr	r3, [pc, #208]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5e:	4a33      	ldr	r2, [pc, #204]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f60:	f043 0320 	orr.w	r3, r3, #32
 8009f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f66:	4b31      	ldr	r3, [pc, #196]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f72:	4b2e      	ldr	r3, [pc, #184]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f76:	4a2d      	ldr	r2, [pc, #180]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f7e:	4b2b      	ldr	r3, [pc, #172]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	60bb      	str	r3, [r7, #8]
 8009f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f8a:	4b28      	ldr	r3, [pc, #160]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8e:	4a27      	ldr	r2, [pc, #156]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f90:	f043 0302 	orr.w	r3, r3, #2
 8009f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f96:	4b25      	ldr	r3, [pc, #148]	; (800a02c <MX_GPIO_Init+0x100>)
 8009f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009fa8:	4821      	ldr	r0, [pc, #132]	; (800a030 <MX_GPIO_Init+0x104>)
 8009faa:	f010 fef9 	bl	801ada0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f648 1110 	movw	r1, #35088	; 0x8910
 8009fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fb8:	f010 fef2 	bl	801ada0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009fc2:	481c      	ldr	r0, [pc, #112]	; (800a034 <MX_GPIO_Init+0x108>)
 8009fc4:	f010 feec 	bl	801ada0 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009fc8:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009fcc:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fda:	f107 0314 	add.w	r3, r7, #20
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4813      	ldr	r0, [pc, #76]	; (800a030 <MX_GPIO_Init+0x104>)
 8009fe2:	f010 fd5b 	bl	801aa9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009fe6:	f648 1310 	movw	r3, #35088	; 0x8910
 8009fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fec:	2301      	movs	r3, #1
 8009fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ff8:	f107 0314 	add.w	r3, r7, #20
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a002:	f010 fd4b 	bl	801aa9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800a006:	f64e 4396 	movw	r3, #60566	; 0xec96
 800a00a:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a00c:	2301      	movs	r3, #1
 800a00e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a010:	2300      	movs	r3, #0
 800a012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a014:	2300      	movs	r3, #0
 800a016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a018:	f107 0314 	add.w	r3, r7, #20
 800a01c:	4619      	mov	r1, r3
 800a01e:	4805      	ldr	r0, [pc, #20]	; (800a034 <MX_GPIO_Init+0x108>)
 800a020:	f010 fd3c 	bl	801aa9c <HAL_GPIO_Init>

}
 800a024:	bf00      	nop
 800a026:	3728      	adds	r7, #40	; 0x28
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	40021000 	.word	0x40021000
 800a030:	48000800 	.word	0x48000800
 800a034:	48000400 	.word	0x48000400

0800a038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a038:	b590      	push	{r4, r7, lr}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a03e:	f00d fc82 	bl	8017946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a042:	f000 f8a9 	bl	800a198 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800a046:	f7ff fdd3 	bl	8009bf0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a04a:	f7ff ff6f 	bl	8009f2c <MX_GPIO_Init>
  MX_ADC1_Init();
 800a04e:	f7fe f9cd 	bl	80083ec <MX_ADC1_Init>
  MX_SPI1_Init();
 800a052:	f00c fb23 	bl	801669c <MX_SPI1_Init>
  MX_TIM6_Init();
 800a056:	f00c fd95 	bl	8016b84 <MX_TIM6_Init>
  MX_TIM8_Init();
 800a05a:	f00c fdc9 	bl	8016bf0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800a05e:	f00d fba5 	bl	80177ac <MX_USART1_UART_Init>
  MX_DMA_Init();
 800a062:	f7ff fdc5 	bl	8009bf0 <MX_DMA_Init>
  MX_SPI3_Init();
 800a066:	f00c fb57 	bl	8016718 <MX_SPI3_Init>
  MX_TIM16_Init();
 800a06a:	f00c fe61 	bl	8016d30 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 800a06e:	f7fe f8eb 	bl	8008248 <pl_timer_init>
  pl_gyro_init();
 800a072:	f7fd fd63 	bl	8007b3c <pl_gyro_init>
  pl_sensor_init();
 800a076:	f7fd ff29 	bl	8007ecc <pl_sensor_init>
  reset_distance();
 800a07a:	f7f6 ff8f 	bl	8000f9c <reset_distance>
  reset_gyro();
 800a07e:	f7f7 fbbf 	bl	8001800 <reset_gyro>
  reset_speed();
 800a082:	f7f6 ffc9 	bl	8001018 <reset_speed>
  record_reset();
 800a086:	f00c f897 	bl	80161b8 <record_reset>
  pl_motor_init();
 800a08a:	f7fd fe35 	bl	8007cf8 <pl_motor_init>
  PID_Init();
 800a08e:	f7fa fd15 	bl	8004abc <PID_Init>
  init_WallControl();
 800a092:	f7fa fe7b 	bl	8004d8c <init_WallControl>
  Control_mode_Init();
 800a096:	f7f7 ff15 	bl	8001ec4 <Control_mode_Init>
  init_FailSafe();
 800a09a:	f7ff fddb 	bl	8009c54 <init_FailSafe>
  input_parameter();
 800a09e:	f00d f827 	bl	80170f0 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a0a6:	4b37      	ldr	r3, [pc, #220]	; (800a184 <main+0x14c>)
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a0ac:	4b35      	ldr	r3, [pc, #212]	; (800a184 <main+0x14c>)
 800a0ae:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a0b0:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a0b2:	4b34      	ldr	r3, [pc, #208]	; (800a184 <main+0x14c>)
 800a0b4:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a0b6:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a0b8:	4b32      	ldr	r3, [pc, #200]	; (800a184 <main+0x14c>)
 800a0ba:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a0bc:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a0be:	4b31      	ldr	r3, [pc, #196]	; (800a184 <main+0x14c>)
 800a0c0:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a0c2:	9301      	str	r3, [sp, #4]
 800a0c4:	9200      	str	r2, [sp, #0]
 800a0c6:	4623      	mov	r3, r4
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	482f      	ldr	r0, [pc, #188]	; (800a188 <main+0x150>)
 800a0cc:	f015 fbfe 	bl	801f8cc <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a0d0:	4b2e      	ldr	r3, [pc, #184]	; (800a18c <main+0x154>)
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a0d6:	4b2d      	ldr	r3, [pc, #180]	; (800a18c <main+0x154>)
 800a0d8:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a0da:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a0dc:	4b2b      	ldr	r3, [pc, #172]	; (800a18c <main+0x154>)
 800a0de:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a0e0:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a0e2:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <main+0x154>)
 800a0e4:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a0e6:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a0e8:	4b28      	ldr	r3, [pc, #160]	; (800a18c <main+0x154>)
 800a0ea:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	9200      	str	r2, [sp, #0]
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	4826      	ldr	r0, [pc, #152]	; (800a190 <main+0x158>)
 800a0f6:	f015 fbe9 	bl	801f8cc <iprintf>
	battcheak();
 800a0fa:	f7f7 fd8d 	bl	8001c18 <battcheak>

//起動cheak
	int yellow_count=1;
 800a0fe:	2301      	movs	r3, #1
 800a100:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 800a102:	2300      	movs	r3, #0
 800a104:	607b      	str	r3, [r7, #4]
 800a106:	e00d      	b.n	800a124 <main+0xec>
		pl_yellow_LED_count(yellow_count);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fd f8ad 	bl	800726c <pl_yellow_LED_count>
		HAL_Delay(50);
 800a112:	2032      	movs	r0, #50	; 0x32
 800a114:	f00d fc88 	bl	8017a28 <HAL_Delay>
		yellow_count=yellow_count*2;
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3301      	adds	r3, #1
 800a122:	607b      	str	r3, [r7, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b07      	cmp	r3, #7
 800a128:	ddee      	ble.n	800a108 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 800a12a:	2300      	movs	r3, #0
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	e00f      	b.n	800a150 <main+0x118>
			pl_yellow_LED_count(yellow_count);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	4618      	mov	r0, r3
 800a136:	f7fd f899 	bl	800726c <pl_yellow_LED_count>
			HAL_Delay(50);
 800a13a:	2032      	movs	r0, #50	; 0x32
 800a13c:	f00d fc74 	bl	8017a28 <HAL_Delay>
			yellow_count=yellow_count/2;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	0fda      	lsrs	r2, r3, #31
 800a144:	4413      	add	r3, r2
 800a146:	105b      	asrs	r3, r3, #1
 800a148:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	3301      	adds	r3, #1
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b08      	cmp	r3, #8
 800a154:	ddec      	ble.n	800a130 <main+0xf8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	4618      	mov	r0, r3
 800a15c:	f00a fd18 	bl	8014b90 <mode_decision>
 800a160:	4603      	mov	r3, r0
 800a162:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 800a164:	f7f6 ff1a 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 800a168:	f7f7 fb4a 	bl	8001800 <reset_gyro>
	  		reset_speed();
 800a16c:	f7f6 ff54 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	4618      	mov	r0, r3
 800a176:	f00a fe05 	bl	8014d84 <mode_execution>

	  		error_mode = 0;
 800a17a:	4b06      	ldr	r3, [pc, #24]	; (800a194 <main+0x15c>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 800a180:	e7e9      	b.n	800a156 <main+0x11e>
 800a182:	bf00      	nop
 800a184:	2000070c 	.word	0x2000070c
 800a188:	08022088 	.word	0x08022088
 800a18c:	20000718 	.word	0x20000718
 800a190:	080220b4 	.word	0x080220b4
 800a194:	20000807 	.word	0x20000807

0800a198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b094      	sub	sp, #80	; 0x50
 800a19c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a19e:	f107 0318 	add.w	r3, r7, #24
 800a1a2:	2238      	movs	r2, #56	; 0x38
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f014 ff1e 	bl	801efe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a1ac:	1d3b      	adds	r3, r7, #4
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	605a      	str	r2, [r3, #4]
 800a1b4:	609a      	str	r2, [r3, #8]
 800a1b6:	60da      	str	r2, [r3, #12]
 800a1b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	f010 fe08 	bl	801add0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a1c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a1d2:	2304      	movs	r3, #4
 800a1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800a1d6:	2355      	movs	r3, #85	; 0x55
 800a1d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a1da:	2302      	movs	r3, #2
 800a1dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a1e6:	f107 0318 	add.w	r3, r7, #24
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f010 fea4 	bl	801af38 <HAL_RCC_OscConfig>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 800a1f6:	f000 f81a 	bl	800a22e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a1fa:	230f      	movs	r3, #15
 800a1fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a1fe:	2303      	movs	r3, #3
 800a200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a206:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800a20a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800a20c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800a210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a212:	1d3b      	adds	r3, r7, #4
 800a214:	2104      	movs	r1, #4
 800a216:	4618      	mov	r0, r3
 800a218:	f011 f9a6 	bl	801b568 <HAL_RCC_ClockConfig>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800a222:	f000 f804 	bl	800a22e <Error_Handler>
  }
}
 800a226:	bf00      	nop
 800a228:	3750      	adds	r7, #80	; 0x50
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a22e:	b480      	push	{r7}
 800a230:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a232:	b672      	cpsid	i
}
 800a234:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a236:	e7fe      	b.n	800a236 <Error_Handler+0x8>

0800a238 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	ed87 0a03 	vstr	s0, [r7, #12]
 800a242:	edc7 0a02 	vstr	s1, [r7, #8]
 800a246:	4603      	mov	r3, r0
 800a248:	71fb      	strb	r3, [r7, #7]
 800a24a:	460b      	mov	r3, r1
 800a24c:	71bb      	strb	r3, [r7, #6]
 800a24e:	4613      	mov	r3, r2
 800a250:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00a      	beq.n	800a26e <backTurn_controlWall+0x36>
		no_frontwall_straight();
 800a258:	f7f9 ff2e 	bl	80040b8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a25c:	2003      	movs	r0, #3
 800a25e:	f7fd fda3 	bl	8007da8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a262:	2003      	movs	r0, #3
 800a264:	f7fd fd78 	bl	8007d58 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a268:	2032      	movs	r0, #50	; 0x32
 800a26a:	f7fe f881 	bl	8008370 <wait_ms_NoReset>
	}
	if(left_wall){
 800a26e:	79bb      	ldrb	r3, [r7, #6]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d02c      	beq.n	800a2ce <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a274:	ed97 2a02 	vldr	s4, [r7, #8]
 800a278:	edd7 1a03 	vldr	s3, [r7, #12]
 800a27c:	ed9f 1a50 	vldr	s2, [pc, #320]	; 800a3c0 <backTurn_controlWall+0x188>
 800a280:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800a3c0 <backTurn_controlWall+0x188>
 800a284:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800a3c4 <backTurn_controlWall+0x18c>
 800a288:	f7f9 fc1a 	bl	8003ac0 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a28c:	2003      	movs	r0, #3
 800a28e:	f7fd fd8b 	bl	8007da8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a292:	2003      	movs	r0, #3
 800a294:	f7fd fd60 	bl	8007d58 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a298:	2032      	movs	r0, #50	; 0x32
 800a29a:	f7fe f869 	bl	8008370 <wait_ms_NoReset>
		no_frontwall_straight();
 800a29e:	f7f9 ff0b 	bl	80040b8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a2a2:	2003      	movs	r0, #3
 800a2a4:	f7fd fd80 	bl	8007da8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a2a8:	2003      	movs	r0, #3
 800a2aa:	f7fd fd55 	bl	8007d58 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a2ae:	2032      	movs	r0, #50	; 0x32
 800a2b0:	f7fe f85e 	bl	8008370 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a2b4:	ed97 2a02 	vldr	s4, [r7, #8]
 800a2b8:	edd7 1a03 	vldr	s3, [r7, #12]
 800a2bc:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800a3c0 <backTurn_controlWall+0x188>
 800a2c0:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800a3c0 <backTurn_controlWall+0x188>
 800a2c4:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800a3c4 <backTurn_controlWall+0x18c>
 800a2c8:	f7f9 fbfa 	bl	8003ac0 <turning_table2>
 800a2cc:	e06a      	b.n	800a3a4 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 800a2ce:	79bb      	ldrb	r3, [r7, #6]
 800a2d0:	f083 0301 	eor.w	r3, r3, #1
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d037      	beq.n	800a34a <backTurn_controlWall+0x112>
 800a2da:	797b      	ldrb	r3, [r7, #5]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d034      	beq.n	800a34a <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a2e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2e4:	eef1 7a67 	vneg.f32	s15, s15
 800a2e8:	ed97 2a02 	vldr	s4, [r7, #8]
 800a2ec:	eef0 1a67 	vmov.f32	s3, s15
 800a2f0:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800a3c0 <backTurn_controlWall+0x188>
 800a2f4:	eddf 0a32 	vldr	s1, [pc, #200]	; 800a3c0 <backTurn_controlWall+0x188>
 800a2f8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800a3c8 <backTurn_controlWall+0x190>
 800a2fc:	f7f9 fbe0 	bl	8003ac0 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a300:	2003      	movs	r0, #3
 800a302:	f7fd fd51 	bl	8007da8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a306:	2003      	movs	r0, #3
 800a308:	f7fd fd26 	bl	8007d58 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a30c:	2032      	movs	r0, #50	; 0x32
 800a30e:	f7fe f82f 	bl	8008370 <wait_ms_NoReset>
		no_frontwall_straight();
 800a312:	f7f9 fed1 	bl	80040b8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a316:	2003      	movs	r0, #3
 800a318:	f7fd fd46 	bl	8007da8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a31c:	2003      	movs	r0, #3
 800a31e:	f7fd fd1b 	bl	8007d58 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a322:	2032      	movs	r0, #50	; 0x32
 800a324:	f7fe f824 	bl	8008370 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a328:	edd7 7a03 	vldr	s15, [r7, #12]
 800a32c:	eef1 7a67 	vneg.f32	s15, s15
 800a330:	ed97 2a02 	vldr	s4, [r7, #8]
 800a334:	eef0 1a67 	vmov.f32	s3, s15
 800a338:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800a3c0 <backTurn_controlWall+0x188>
 800a33c:	eddf 0a20 	vldr	s1, [pc, #128]	; 800a3c0 <backTurn_controlWall+0x188>
 800a340:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800a3c8 <backTurn_controlWall+0x190>
 800a344:	f7f9 fbbc 	bl	8003ac0 <turning_table2>
 800a348:	e02c      	b.n	800a3a4 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 800a34a:	79bb      	ldrb	r3, [r7, #6]
 800a34c:	f083 0301 	eor.w	r3, r3, #1
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d026      	beq.n	800a3a4 <backTurn_controlWall+0x16c>
 800a356:	797b      	ldrb	r3, [r7, #5]
 800a358:	f083 0301 	eor.w	r3, r3, #1
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d020      	beq.n	800a3a4 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a362:	ed97 2a02 	vldr	s4, [r7, #8]
 800a366:	edd7 1a03 	vldr	s3, [r7, #12]
 800a36a:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800a3c0 <backTurn_controlWall+0x188>
 800a36e:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a3c0 <backTurn_controlWall+0x188>
 800a372:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a3c4 <backTurn_controlWall+0x18c>
 800a376:	f7f9 fba3 	bl	8003ac0 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a37a:	2003      	movs	r0, #3
 800a37c:	f7fd fd14 	bl	8007da8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a380:	2003      	movs	r0, #3
 800a382:	f7fd fce9 	bl	8007d58 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a386:	2032      	movs	r0, #50	; 0x32
 800a388:	f7fd fff2 	bl	8008370 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a38c:	ed97 2a02 	vldr	s4, [r7, #8]
 800a390:	edd7 1a03 	vldr	s3, [r7, #12]
 800a394:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800a3c0 <backTurn_controlWall+0x188>
 800a398:	eddf 0a09 	vldr	s1, [pc, #36]	; 800a3c0 <backTurn_controlWall+0x188>
 800a39c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a3c4 <backTurn_controlWall+0x18c>
 800a3a0:	f7f9 fb8e 	bl	8003ac0 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a3a4:	2003      	movs	r0, #3
 800a3a6:	f7fd fcff 	bl	8007da8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a3aa:	2003      	movs	r0, #3
 800a3ac:	f7fd fcd4 	bl	8007d58 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 800a3b0:	2032      	movs	r0, #50	; 0x32
 800a3b2:	f7fd ffdd 	bl	8008370 <wait_ms_NoReset>

}
 800a3b6:	bf00      	nop
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	00000000 	.word	0x00000000
 800a3c4:	42b40000 	.word	0x42b40000
 800a3c8:	c2b40000 	.word	0xc2b40000

0800a3cc <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	b5b0      	push	{r4, r5, r7, lr}
 800a3d0:	ed2d 8b02 	vpush	{d8}
 800a3d4:	b084      	sub	sp, #16
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a3dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a3e0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a3e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	f040 80f5 	bne.w	800a5d8 <slalomR+0x20c>
		highspeed_mode = 0;
 800a3ee:	4bcd      	ldr	r3, [pc, #820]	; (800a724 <slalomR+0x358>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a400:	2300      	movs	r3, #0
 800a402:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a404:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d11f      	bne.n	800a44c <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a40c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a410:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a414:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a418:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a41c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a420:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a424:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a428:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a728 <slalomR+0x35c>
 800a42c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	eeb0 2a47 	vmov.f32	s4, s14
 800a436:	eef0 1a46 	vmov.f32	s3, s12
 800a43a:	eeb0 1a66 	vmov.f32	s2, s13
 800a43e:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a72c <slalomR+0x360>
 800a442:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a730 <slalomR+0x364>
 800a446:	f7f8 fe2d 	bl	80030a4 <straight_table2>
 800a44a:	e01e      	b.n	800a48a <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a44c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a450:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a454:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a458:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a45c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a460:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a464:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a468:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a728 <slalomR+0x35c>
 800a46c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	eeb0 2a47 	vmov.f32	s4, s14
 800a476:	eef0 1a46 	vmov.f32	s3, s12
 800a47a:	eeb0 1a66 	vmov.f32	s2, s13
 800a47e:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a72c <slalomR+0x360>
 800a482:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a734 <slalomR+0x368>
 800a486:	f7f8 fe0d 	bl	80030a4 <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a48a:	2301      	movs	r3, #1
 800a48c:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a48e:	2300      	movs	r3, #0
 800a490:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a492:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	d127      	bne.n	800a4ea <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a49a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a49e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a4a2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a4a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4aa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a4ae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4be:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a4c2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4c6:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a728 <slalomR+0x35c>
 800a4ca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	eeb0 2a47 	vmov.f32	s4, s14
 800a4d4:	eef0 1a45 	vmov.f32	s3, s10
 800a4d8:	eeb0 1a65 	vmov.f32	s2, s11
 800a4dc:	eef0 0a46 	vmov.f32	s1, s12
 800a4e0:	eeb0 0a66 	vmov.f32	s0, s13
 800a4e4:	f7f8 fdde 	bl	80030a4 <straight_table2>
 800a4e8:	e022      	b.n	800a530 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4ea:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a4ee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4f2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a4f6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a502:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a506:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a50a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a50e:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a728 <slalomR+0x35c>
 800a512:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	eeb0 2a47 	vmov.f32	s4, s14
 800a51c:	eef0 1a45 	vmov.f32	s3, s10
 800a520:	eeb0 1a65 	vmov.f32	s2, s11
 800a524:	eef0 0a46 	vmov.f32	s1, s12
 800a528:	eeb0 0a66 	vmov.f32	s0, s13
 800a52c:	f7f8 fdba 	bl	80030a4 <straight_table2>
		}
		if(mollifier_mode == ON){
 800a530:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a534:	2b01      	cmp	r3, #1
 800a536:	d10c      	bne.n	800a552 <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a538:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a53c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a540:	eeb0 1a47 	vmov.f32	s2, s14
 800a544:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a738 <slalomR+0x36c>
 800a548:	eeb0 0a67 	vmov.f32	s0, s15
 800a54c:	f7f9 fd20 	bl	8003f90 <mollifier_slalom_table>
 800a550:	e015      	b.n	800a57e <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a552:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a556:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a55a:	eef1 7a67 	vneg.f32	s15, s15
 800a55e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a562:	eef0 2a66 	vmov.f32	s5, s13
 800a566:	eeb0 2a67 	vmov.f32	s4, s15
 800a56a:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a72c <slalomR+0x360>
 800a56e:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a72c <slalomR+0x360>
 800a572:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a738 <slalomR+0x36c>
 800a576:	eeb0 0a47 	vmov.f32	s0, s14
 800a57a:	f7f9 fbb9 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a57e:	2300      	movs	r3, #0
 800a580:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a586:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a58a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a728 <slalomR+0x35c>
 800a58e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a592:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a596:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a59a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a59e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5a6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a5aa:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a5ae:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a728 <slalomR+0x35c>
 800a5b2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	eeb0 2a47 	vmov.f32	s4, s14
 800a5bc:	eef0 1a65 	vmov.f32	s3, s11
 800a5c0:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a72c <slalomR+0x360>
 800a5c4:	eef0 0a46 	vmov.f32	s1, s12
 800a5c8:	eeb0 0a66 	vmov.f32	s0, s13
 800a5cc:	f7f8 fd6a 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800a5d0:	4b54      	ldr	r3, [pc, #336]	; (800a724 <slalomR+0x358>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a5d6:	e09c      	b.n	800a712 <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a5ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5f0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5f4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a600:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a604:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a608:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a60c:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a728 <slalomR+0x35c>
 800a610:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	eeb0 2a47 	vmov.f32	s4, s14
 800a61a:	eef0 1a45 	vmov.f32	s3, s10
 800a61e:	eeb0 1a65 	vmov.f32	s2, s11
 800a622:	eef0 0a46 	vmov.f32	s1, s12
 800a626:	eeb0 0a66 	vmov.f32	s0, s13
 800a62a:	f7f8 fd3b 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a62e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a632:	2b01      	cmp	r3, #1
 800a634:	d10c      	bne.n	800a650 <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a636:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a63a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a63e:	eeb0 1a47 	vmov.f32	s2, s14
 800a642:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a738 <slalomR+0x36c>
 800a646:	eeb0 0a67 	vmov.f32	s0, s15
 800a64a:	f7f9 fca1 	bl	8003f90 <mollifier_slalom_table>
 800a64e:	e015      	b.n	800a67c <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a650:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a654:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a658:	eef1 7a67 	vneg.f32	s15, s15
 800a65c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a660:	eef0 2a66 	vmov.f32	s5, s13
 800a664:	eeb0 2a67 	vmov.f32	s4, s15
 800a668:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a72c <slalomR+0x360>
 800a66c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a72c <slalomR+0x360>
 800a670:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a738 <slalomR+0x36c>
 800a674:	eeb0 0a47 	vmov.f32	s0, s14
 800a678:	f7f9 fb3a 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a67c:	2300      	movs	r3, #0
 800a67e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a684:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a688:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a68c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a690:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a694:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a698:	edd7 7a01 	vldr	s15, [r7, #4]
 800a69c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a4:	eef0 7ae7 	vabs.f32	s15, s15
 800a6a8:	ee17 0a90 	vmov	r0, s15
 800a6ac:	f7f5 ff74 	bl	8000598 <__aeabi_f2d>
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6b8:	f7f6 f8f0 	bl	800089c <__aeabi_ddiv>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	461d      	mov	r5, r3
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7f5 ff66 	bl	8000598 <__aeabi_f2d>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f6 f8e2 	bl	800089c <__aeabi_ddiv>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4610      	mov	r0, r2
 800a6de:	4619      	mov	r1, r3
 800a6e0:	f04f 0200 	mov.w	r2, #0
 800a6e4:	4b15      	ldr	r3, [pc, #84]	; (800a73c <slalomR+0x370>)
 800a6e6:	f7f5 fdf9 	bl	80002dc <__adddf3>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	f7f6 fa81 	bl	8000bf8 <__aeabi_d2f>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	ee02 3a10 	vmov	s4, r3
 800a6fe:	edd7 1a01 	vldr	s3, [r7, #4]
 800a702:	ed97 1a01 	vldr	s2, [r7, #4]
 800a706:	eef0 0a68 	vmov.f32	s1, s17
 800a70a:	eeb0 0a48 	vmov.f32	s0, s16
 800a70e:	f7f8 fcc9 	bl	80030a4 <straight_table2>
}
 800a712:	bf00      	nop
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	ecbd 8b02 	vpop	{d8}
 800a71c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a720:	b004      	add	sp, #16
 800a722:	4770      	bx	lr
 800a724:	20000808 	.word	0x20000808
 800a728:	42340000 	.word	0x42340000
 800a72c:	00000000 	.word	0x00000000
 800a730:	431b8000 	.word	0x431b8000
 800a734:	43138000 	.word	0x43138000
 800a738:	c2b40000 	.word	0xc2b40000
 800a73c:	408f4000 	.word	0x408f4000

0800a740 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a740:	b084      	sub	sp, #16
 800a742:	b5b0      	push	{r4, r5, r7, lr}
 800a744:	ed2d 8b02 	vpush	{d8}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a754:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a758:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	f040 80f3 	bne.w	800a948 <slalomL+0x208>
		highspeed_mode = 0;
 800a762:	4bcb      	ldr	r3, [pc, #812]	; (800aa90 <slalomL+0x350>)
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a768:	2301      	movs	r3, #1
 800a76a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a774:	2300      	movs	r3, #0
 800a776:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a778:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d11f      	bne.n	800a7c0 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a780:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a784:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a788:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a78c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a790:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a794:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a798:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a79c:	eddf 5abd 	vldr	s11, [pc, #756]	; 800aa94 <slalomL+0x354>
 800a7a0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	eeb0 2a47 	vmov.f32	s4, s14
 800a7aa:	eef0 1a46 	vmov.f32	s3, s12
 800a7ae:	eeb0 1a66 	vmov.f32	s2, s13
 800a7b2:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800aa98 <slalomL+0x358>
 800a7b6:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800aa9c <slalomL+0x35c>
 800a7ba:	f7f8 fc73 	bl	80030a4 <straight_table2>
 800a7be:	e01e      	b.n	800a7fe <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a7c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a7c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7d4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a7d8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a7dc:	eddf 5aad 	vldr	s11, [pc, #692]	; 800aa94 <slalomL+0x354>
 800a7e0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	eeb0 2a47 	vmov.f32	s4, s14
 800a7ea:	eef0 1a46 	vmov.f32	s3, s12
 800a7ee:	eeb0 1a66 	vmov.f32	s2, s13
 800a7f2:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800aa98 <slalomL+0x358>
 800a7f6:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800aaa0 <slalomL+0x360>
 800a7fa:	f7f8 fc53 	bl	80030a4 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a7fe:	2300      	movs	r3, #0
 800a800:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a802:	2301      	movs	r3, #1
 800a804:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a806:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d127      	bne.n	800a85e <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a80e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a812:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a816:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a81a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a81e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a822:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a826:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a82a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a82e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a832:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a836:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a83a:	eddf 4a96 	vldr	s9, [pc, #600]	; 800aa94 <slalomL+0x354>
 800a83e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	eeb0 2a47 	vmov.f32	s4, s14
 800a848:	eef0 1a45 	vmov.f32	s3, s10
 800a84c:	eeb0 1a65 	vmov.f32	s2, s11
 800a850:	eef0 0a46 	vmov.f32	s1, s12
 800a854:	eeb0 0a66 	vmov.f32	s0, s13
 800a858:	f7f8 fc24 	bl	80030a4 <straight_table2>
 800a85c:	e022      	b.n	800a8a4 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a85e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a862:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a866:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a86a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a86e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a872:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a87a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a87e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a882:	eddf 4a84 	vldr	s9, [pc, #528]	; 800aa94 <slalomL+0x354>
 800a886:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	eeb0 2a47 	vmov.f32	s4, s14
 800a890:	eef0 1a45 	vmov.f32	s3, s10
 800a894:	eeb0 1a65 	vmov.f32	s2, s11
 800a898:	eef0 0a46 	vmov.f32	s1, s12
 800a89c:	eeb0 0a66 	vmov.f32	s0, s13
 800a8a0:	f7f8 fc00 	bl	80030a4 <straight_table2>
		}
		if(mollifier_mode == ON){
 800a8a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d10c      	bne.n	800a8c6 <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a8ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8b4:	eeb0 1a47 	vmov.f32	s2, s14
 800a8b8:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800aaa4 <slalomL+0x364>
 800a8bc:	eeb0 0a67 	vmov.f32	s0, s15
 800a8c0:	f7f9 fb66 	bl	8003f90 <mollifier_slalom_table>
 800a8c4:	e013      	b.n	800a8ee <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a8c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a8d2:	eef0 2a66 	vmov.f32	s5, s13
 800a8d6:	eeb0 2a47 	vmov.f32	s4, s14
 800a8da:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800aa98 <slalomL+0x358>
 800a8de:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800aa98 <slalomL+0x358>
 800a8e2:	eddf 0a70 	vldr	s1, [pc, #448]	; 800aaa4 <slalomL+0x364>
 800a8e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ea:	f7f9 fa01 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a8f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a8fa:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800aa94 <slalomL+0x354>
 800a8fe:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a902:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a906:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a90a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a90e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a912:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a916:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a91a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a91e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800aa94 <slalomL+0x354>
 800a922:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	eeb0 2a47 	vmov.f32	s4, s14
 800a92c:	eef0 1a65 	vmov.f32	s3, s11
 800a930:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800aa98 <slalomL+0x358>
 800a934:	eef0 0a46 	vmov.f32	s1, s12
 800a938:	eeb0 0a66 	vmov.f32	s0, s13
 800a93c:	f7f8 fbb2 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800a940:	4b53      	ldr	r3, [pc, #332]	; (800aa90 <slalomL+0x350>)
 800a942:	2200      	movs	r2, #0
 800a944:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a946:	e09a      	b.n	800aa7e <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a948:	2300      	movs	r3, #0
 800a94a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a950:	2301      	movs	r3, #1
 800a952:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a954:	2300      	movs	r3, #0
 800a956:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a958:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a95c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a960:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a964:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a968:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a96c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a970:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a974:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a978:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a97c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800aa94 <slalomL+0x354>
 800a980:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	eeb0 2a47 	vmov.f32	s4, s14
 800a98a:	eef0 1a45 	vmov.f32	s3, s10
 800a98e:	eeb0 1a65 	vmov.f32	s2, s11
 800a992:	eef0 0a46 	vmov.f32	s1, s12
 800a996:	eeb0 0a66 	vmov.f32	s0, s13
 800a99a:	f7f8 fb83 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a99e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d10c      	bne.n	800a9c0 <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a9a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a9ae:	eeb0 1a47 	vmov.f32	s2, s14
 800a9b2:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800aaa4 <slalomL+0x364>
 800a9b6:	eeb0 0a67 	vmov.f32	s0, s15
 800a9ba:	f7f9 fae9 	bl	8003f90 <mollifier_slalom_table>
 800a9be:	e013      	b.n	800a9e8 <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a9c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a9c8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a9cc:	eef0 2a66 	vmov.f32	s5, s13
 800a9d0:	eeb0 2a47 	vmov.f32	s4, s14
 800a9d4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800aa98 <slalomL+0x358>
 800a9d8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800aa98 <slalomL+0x358>
 800a9dc:	eddf 0a31 	vldr	s1, [pc, #196]	; 800aaa4 <slalomL+0x364>
 800a9e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e4:	f7f9 f984 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a9f0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a9f4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a9f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa04:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aa0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa10:	eef0 7ae7 	vabs.f32	s15, s15
 800aa14:	ee17 0a90 	vmov	r0, s15
 800aa18:	f7f5 fdbe 	bl	8000598 <__aeabi_f2d>
 800aa1c:	f04f 0200 	mov.w	r2, #0
 800aa20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa24:	f7f5 ff3a 	bl	800089c <__aeabi_ddiv>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4614      	mov	r4, r2
 800aa2e:	461d      	mov	r5, r3
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f5 fdb0 	bl	8000598 <__aeabi_f2d>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 ff2c 	bl	800089c <__aeabi_ddiv>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	f04f 0200 	mov.w	r2, #0
 800aa50:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <slalomL+0x368>)
 800aa52:	f7f5 fc43 	bl	80002dc <__adddf3>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f7f6 f8cb 	bl	8000bf8 <__aeabi_d2f>
 800aa62:	4603      	mov	r3, r0
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	ee02 3a10 	vmov	s4, r3
 800aa6a:	edd7 1a01 	vldr	s3, [r7, #4]
 800aa6e:	ed97 1a01 	vldr	s2, [r7, #4]
 800aa72:	eef0 0a68 	vmov.f32	s1, s17
 800aa76:	eeb0 0a48 	vmov.f32	s0, s16
 800aa7a:	f7f8 fb13 	bl	80030a4 <straight_table2>
}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	ecbd 8b02 	vpop	{d8}
 800aa88:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800aa8c:	b004      	add	sp, #16
 800aa8e:	4770      	bx	lr
 800aa90:	20000808 	.word	0x20000808
 800aa94:	42340000 	.word	0x42340000
 800aa98:	00000000 	.word	0x00000000
 800aa9c:	431b8000 	.word	0x431b8000
 800aaa0:	43138000 	.word	0x43138000
 800aaa4:	42b40000 	.word	0x42b40000
 800aaa8:	408f4000 	.word	0x408f4000

0800aaac <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800aaac:	b084      	sub	sp, #16
 800aaae:	b5b0      	push	{r4, r5, r7, lr}
 800aab0:	ed2d 8b02 	vpush	{d8}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aabc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aac0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800aac4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	f040 80a5 	bne.w	800ac18 <turn90R+0x16c>
		highspeed_mode = 1;
 800aace:	4ba5      	ldr	r3, [pc, #660]	; (800ad64 <turn90R+0x2b8>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aad4:	2301      	movs	r3, #1
 800aad6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aad8:	2300      	movs	r3, #0
 800aada:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aae4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aae8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aaec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaf8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aafc:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ab00:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ad68 <turn90R+0x2bc>
 800ab04:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	eeb0 2a47 	vmov.f32	s4, s14
 800ab0e:	eef0 1a46 	vmov.f32	s3, s12
 800ab12:	eeb0 1a66 	vmov.f32	s2, s13
 800ab16:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ad6c <turn90R+0x2c0>
 800ab1a:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ad70 <turn90R+0x2c4>
 800ab1e:	f7f8 fac1 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ab26:	2302      	movs	r3, #2
 800ab28:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab2a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab2e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab32:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab36:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab46:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab4a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab4e:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ad68 <turn90R+0x2bc>
 800ab52:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	eeb0 2a47 	vmov.f32	s4, s14
 800ab5c:	eef0 1a45 	vmov.f32	s3, s10
 800ab60:	eeb0 1a65 	vmov.f32	s2, s11
 800ab64:	eef0 0a46 	vmov.f32	s1, s12
 800ab68:	eeb0 0a66 	vmov.f32	s0, s13
 800ab6c:	f7f8 fa9a 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ab70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d10c      	bne.n	800ab92 <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800ab78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab7c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab80:	eeb0 1a47 	vmov.f32	s2, s14
 800ab84:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ad74 <turn90R+0x2c8>
 800ab88:	eeb0 0a67 	vmov.f32	s0, s15
 800ab8c:	f7f9 fa00 	bl	8003f90 <mollifier_slalom_table>
 800ab90:	e015      	b.n	800abbe <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ab92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab96:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab9a:	eef1 7a67 	vneg.f32	s15, s15
 800ab9e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aba2:	eef0 2a66 	vmov.f32	s5, s13
 800aba6:	eeb0 2a67 	vmov.f32	s4, s15
 800abaa:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ad6c <turn90R+0x2c0>
 800abae:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ad6c <turn90R+0x2c0>
 800abb2:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ad74 <turn90R+0x2c8>
 800abb6:	eeb0 0a47 	vmov.f32	s0, s14
 800abba:	f7f9 f899 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800abc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800abca:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ad78 <turn90R+0x2cc>
 800abce:	ee77 6a87 	vadd.f32	s13, s15, s14
 800abd2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800abd6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800abda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abe6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800abea:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800abee:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ad68 <turn90R+0x2bc>
 800abf2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	eeb0 2a47 	vmov.f32	s4, s14
 800abfc:	eef0 1a65 	vmov.f32	s3, s11
 800ac00:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ad6c <turn90R+0x2c0>
 800ac04:	eef0 0a46 	vmov.f32	s1, s12
 800ac08:	eeb0 0a66 	vmov.f32	s0, s13
 800ac0c:	f7f8 fa4a 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ac10:	4b54      	ldr	r3, [pc, #336]	; (800ad64 <turn90R+0x2b8>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ac16:	e09c      	b.n	800ad52 <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ac20:	2302      	movs	r3, #2
 800ac22:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ac2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac30:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ac34:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac44:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ac48:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac4c:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ad68 <turn90R+0x2bc>
 800ac50:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	eeb0 2a47 	vmov.f32	s4, s14
 800ac5a:	eef0 1a45 	vmov.f32	s3, s10
 800ac5e:	eeb0 1a65 	vmov.f32	s2, s11
 800ac62:	eef0 0a46 	vmov.f32	s1, s12
 800ac66:	eeb0 0a66 	vmov.f32	s0, s13
 800ac6a:	f7f8 fa1b 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ac6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d10c      	bne.n	800ac90 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800ac76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ac7e:	eeb0 1a47 	vmov.f32	s2, s14
 800ac82:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ad74 <turn90R+0x2c8>
 800ac86:	eeb0 0a67 	vmov.f32	s0, s15
 800ac8a:	f7f9 f981 	bl	8003f90 <mollifier_slalom_table>
 800ac8e:	e015      	b.n	800acbc <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ac90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ac98:	eef1 7a67 	vneg.f32	s15, s15
 800ac9c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aca0:	eef0 2a66 	vmov.f32	s5, s13
 800aca4:	eeb0 2a67 	vmov.f32	s4, s15
 800aca8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ad6c <turn90R+0x2c0>
 800acac:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ad6c <turn90R+0x2c0>
 800acb0:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ad74 <turn90R+0x2c8>
 800acb4:	eeb0 0a47 	vmov.f32	s0, s14
 800acb8:	f7f9 f81a 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800acbc:	2301      	movs	r3, #1
 800acbe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800acc4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800acc8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800accc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acd0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acd8:	edd7 7a01 	vldr	s15, [r7, #4]
 800acdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ace0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ace4:	eef0 7ae7 	vabs.f32	s15, s15
 800ace8:	ee17 0a90 	vmov	r0, s15
 800acec:	f7f5 fc54 	bl	8000598 <__aeabi_f2d>
 800acf0:	f04f 0200 	mov.w	r2, #0
 800acf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acf8:	f7f5 fdd0 	bl	800089c <__aeabi_ddiv>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	4614      	mov	r4, r2
 800ad02:	461d      	mov	r5, r3
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f5 fc46 	bl	8000598 <__aeabi_f2d>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4620      	mov	r0, r4
 800ad12:	4629      	mov	r1, r5
 800ad14:	f7f5 fdc2 	bl	800089c <__aeabi_ddiv>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f04f 0200 	mov.w	r2, #0
 800ad24:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <turn90R+0x2d0>)
 800ad26:	f7f5 fad9 	bl	80002dc <__adddf3>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ad2e:	4610      	mov	r0, r2
 800ad30:	4619      	mov	r1, r3
 800ad32:	f7f5 ff61 	bl	8000bf8 <__aeabi_d2f>
 800ad36:	4603      	mov	r3, r0
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	ee02 3a10 	vmov	s4, r3
 800ad3e:	edd7 1a01 	vldr	s3, [r7, #4]
 800ad42:	ed97 1a01 	vldr	s2, [r7, #4]
 800ad46:	eef0 0a68 	vmov.f32	s1, s17
 800ad4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad4e:	f7f8 f9a9 	bl	80030a4 <straight_table2>
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	ecbd 8b02 	vpop	{d8}
 800ad5c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ad60:	b004      	add	sp, #16
 800ad62:	4770      	bx	lr
 800ad64:	20000808 	.word	0x20000808
 800ad68:	42340000 	.word	0x42340000
 800ad6c:	00000000 	.word	0x00000000
 800ad70:	42cd0000 	.word	0x42cd0000
 800ad74:	c2b40000 	.word	0xc2b40000
 800ad78:	42b40000 	.word	0x42b40000
 800ad7c:	408f4000 	.word	0x408f4000

0800ad80 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ad80:	b084      	sub	sp, #16
 800ad82:	b5b0      	push	{r4, r5, r7, lr}
 800ad84:	ed2d 8b02 	vpush	{d8}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ad90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad94:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ad98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	f040 80a3 	bne.w	800aee8 <turn90L+0x168>
		highspeed_mode = 1;
 800ada2:	4ba3      	ldr	r3, [pc, #652]	; (800b030 <turn90L+0x2b0>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ada8:	2301      	movs	r3, #1
 800adaa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800adac:	2300      	movs	r3, #0
 800adae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800adb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800adbc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adcc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800add0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800add4:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b034 <turn90L+0x2b4>
 800add8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	eeb0 2a47 	vmov.f32	s4, s14
 800ade2:	eef0 1a46 	vmov.f32	s3, s12
 800ade6:	eeb0 1a66 	vmov.f32	s2, s13
 800adea:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b038 <turn90L+0x2b8>
 800adee:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b03c <turn90L+0x2bc>
 800adf2:	f7f8 f957 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800adfa:	2302      	movs	r3, #2
 800adfc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800adfe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae02:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae06:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae0a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae1a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae1e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae22:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b034 <turn90L+0x2b4>
 800ae26:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	eeb0 2a47 	vmov.f32	s4, s14
 800ae30:	eef0 1a45 	vmov.f32	s3, s10
 800ae34:	eeb0 1a65 	vmov.f32	s2, s11
 800ae38:	eef0 0a46 	vmov.f32	s1, s12
 800ae3c:	eeb0 0a66 	vmov.f32	s0, s13
 800ae40:	f7f8 f930 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ae44:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d10c      	bne.n	800ae66 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800ae4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae54:	eeb0 1a47 	vmov.f32	s2, s14
 800ae58:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b040 <turn90L+0x2c0>
 800ae5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ae60:	f7f9 f896 	bl	8003f90 <mollifier_slalom_table>
 800ae64:	e013      	b.n	800ae8e <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ae66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae6e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae72:	eef0 2a66 	vmov.f32	s5, s13
 800ae76:	eeb0 2a47 	vmov.f32	s4, s14
 800ae7a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b038 <turn90L+0x2b8>
 800ae7e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b038 <turn90L+0x2b8>
 800ae82:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b040 <turn90L+0x2c0>
 800ae86:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8a:	f7f8 ff31 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ae96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ae9a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800b040 <turn90L+0x2c0>
 800ae9e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aea2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aea6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aeaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aeae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aeb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aeb6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800aeba:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aebe:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b034 <turn90L+0x2b4>
 800aec2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	eeb0 2a47 	vmov.f32	s4, s14
 800aecc:	eef0 1a65 	vmov.f32	s3, s11
 800aed0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b038 <turn90L+0x2b8>
 800aed4:	eef0 0a46 	vmov.f32	s1, s12
 800aed8:	eeb0 0a66 	vmov.f32	s0, s13
 800aedc:	f7f8 f8e2 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800aee0:	4b53      	ldr	r3, [pc, #332]	; (800b030 <turn90L+0x2b0>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800aee6:	e09a      	b.n	800b01e <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800aee8:	2300      	movs	r3, #0
 800aeea:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800aef0:	2302      	movs	r3, #2
 800aef2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aef8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aefc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af00:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af04:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af14:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800af18:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af1c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b034 <turn90L+0x2b4>
 800af20:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	eeb0 2a47 	vmov.f32	s4, s14
 800af2a:	eef0 1a45 	vmov.f32	s3, s10
 800af2e:	eeb0 1a65 	vmov.f32	s2, s11
 800af32:	eef0 0a46 	vmov.f32	s1, s12
 800af36:	eeb0 0a66 	vmov.f32	s0, s13
 800af3a:	f7f8 f8b3 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800af3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800af42:	2b01      	cmp	r3, #1
 800af44:	d10c      	bne.n	800af60 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800af46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af4e:	eeb0 1a47 	vmov.f32	s2, s14
 800af52:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b040 <turn90L+0x2c0>
 800af56:	eeb0 0a67 	vmov.f32	s0, s15
 800af5a:	f7f9 f819 	bl	8003f90 <mollifier_slalom_table>
 800af5e:	e013      	b.n	800af88 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800af60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af64:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af68:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800af6c:	eef0 2a66 	vmov.f32	s5, s13
 800af70:	eeb0 2a47 	vmov.f32	s4, s14
 800af74:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b038 <turn90L+0x2b8>
 800af78:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b038 <turn90L+0x2b8>
 800af7c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b040 <turn90L+0x2c0>
 800af80:	eeb0 0a67 	vmov.f32	s0, s15
 800af84:	f7f8 feb4 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800af88:	2301      	movs	r3, #1
 800af8a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af90:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800af94:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800af98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afa4:	edd7 7a01 	vldr	s15, [r7, #4]
 800afa8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800afac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afb0:	eef0 7ae7 	vabs.f32	s15, s15
 800afb4:	ee17 0a90 	vmov	r0, s15
 800afb8:	f7f5 faee 	bl	8000598 <__aeabi_f2d>
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afc4:	f7f5 fc6a 	bl	800089c <__aeabi_ddiv>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4614      	mov	r4, r2
 800afce:	461d      	mov	r5, r3
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7f5 fae0 	bl	8000598 <__aeabi_f2d>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	4620      	mov	r0, r4
 800afde:	4629      	mov	r1, r5
 800afe0:	f7f5 fc5c 	bl	800089c <__aeabi_ddiv>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4610      	mov	r0, r2
 800afea:	4619      	mov	r1, r3
 800afec:	f04f 0200 	mov.w	r2, #0
 800aff0:	4b14      	ldr	r3, [pc, #80]	; (800b044 <turn90L+0x2c4>)
 800aff2:	f7f5 f973 	bl	80002dc <__adddf3>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800affa:	4610      	mov	r0, r2
 800affc:	4619      	mov	r1, r3
 800affe:	f7f5 fdfb 	bl	8000bf8 <__aeabi_d2f>
 800b002:	4603      	mov	r3, r0
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	ee02 3a10 	vmov	s4, r3
 800b00a:	edd7 1a01 	vldr	s3, [r7, #4]
 800b00e:	ed97 1a01 	vldr	s2, [r7, #4]
 800b012:	eef0 0a68 	vmov.f32	s1, s17
 800b016:	eeb0 0a48 	vmov.f32	s0, s16
 800b01a:	f7f8 f843 	bl	80030a4 <straight_table2>
}
 800b01e:	bf00      	nop
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	ecbd 8b02 	vpop	{d8}
 800b028:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b02c:	b004      	add	sp, #16
 800b02e:	4770      	bx	lr
 800b030:	20000808 	.word	0x20000808
 800b034:	42340000 	.word	0x42340000
 800b038:	00000000 	.word	0x00000000
 800b03c:	42cd0000 	.word	0x42cd0000
 800b040:	42b40000 	.word	0x42b40000
 800b044:	408f4000 	.word	0x408f4000

0800b048 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b048:	b084      	sub	sp, #16
 800b04a:	b5b0      	push	{r4, r5, r7, lr}
 800b04c:	ed2d 8b02 	vpush	{d8}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b05c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b060:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b064:	2b01      	cmp	r3, #1
 800b066:	f040 80a5 	bne.w	800b1b4 <turn180R+0x16c>
		highspeed_mode = 1;
 800b06a:	4ba5      	ldr	r3, [pc, #660]	; (800b300 <turn180R+0x2b8>)
 800b06c:	2201      	movs	r2, #1
 800b06e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b070:	2301      	movs	r3, #1
 800b072:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b074:	2300      	movs	r3, #0
 800b076:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b080:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b084:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b088:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b08c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b090:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b094:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b098:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b09c:	eddf 5a99 	vldr	s11, [pc, #612]	; 800b304 <turn180R+0x2bc>
 800b0a0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	eeb0 2a47 	vmov.f32	s4, s14
 800b0aa:	eef0 1a46 	vmov.f32	s3, s12
 800b0ae:	eeb0 1a66 	vmov.f32	s2, s13
 800b0b2:	eddf 0a95 	vldr	s1, [pc, #596]	; 800b308 <turn180R+0x2c0>
 800b0b6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b30c <turn180R+0x2c4>
 800b0ba:	f7f7 fff3 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b0ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0d2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0e2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b0e6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0ea:	eddf 4a86 	vldr	s9, [pc, #536]	; 800b304 <turn180R+0x2bc>
 800b0ee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	eeb0 2a47 	vmov.f32	s4, s14
 800b0f8:	eef0 1a45 	vmov.f32	s3, s10
 800b0fc:	eeb0 1a65 	vmov.f32	s2, s11
 800b100:	eef0 0a46 	vmov.f32	s1, s12
 800b104:	eeb0 0a66 	vmov.f32	s0, s13
 800b108:	f7f7 ffcc 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b10c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b110:	2b01      	cmp	r3, #1
 800b112:	d10c      	bne.n	800b12e <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b114:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b118:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b11c:	eeb0 1a47 	vmov.f32	s2, s14
 800b120:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b310 <turn180R+0x2c8>
 800b124:	eeb0 0a67 	vmov.f32	s0, s15
 800b128:	f7f8 ff32 	bl	8003f90 <mollifier_slalom_table>
 800b12c:	e015      	b.n	800b15a <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b12e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b132:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b136:	eef1 7a67 	vneg.f32	s15, s15
 800b13a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b13e:	eef0 2a66 	vmov.f32	s5, s13
 800b142:	eeb0 2a67 	vmov.f32	s4, s15
 800b146:	eddf 1a70 	vldr	s3, [pc, #448]	; 800b308 <turn180R+0x2c0>
 800b14a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b308 <turn180R+0x2c0>
 800b14e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800b310 <turn180R+0x2c8>
 800b152:	eeb0 0a47 	vmov.f32	s0, s14
 800b156:	f7f8 fdcb 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b162:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b166:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b314 <turn180R+0x2cc>
 800b16a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b16e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b172:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b176:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b17a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b17e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b182:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b186:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b18a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800b304 <turn180R+0x2bc>
 800b18e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	eeb0 2a47 	vmov.f32	s4, s14
 800b198:	eef0 1a65 	vmov.f32	s3, s11
 800b19c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b308 <turn180R+0x2c0>
 800b1a0:	eef0 0a46 	vmov.f32	s1, s12
 800b1a4:	eeb0 0a66 	vmov.f32	s0, s13
 800b1a8:	f7f7 ff7c 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b1ac:	4b54      	ldr	r3, [pc, #336]	; (800b300 <turn180R+0x2b8>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b1b2:	e09c      	b.n	800b2ee <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1c4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b1c8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b1cc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b1d0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b1d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1e0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b1e4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1e8:	eddf 4a46 	vldr	s9, [pc, #280]	; 800b304 <turn180R+0x2bc>
 800b1ec:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	eeb0 2a47 	vmov.f32	s4, s14
 800b1f6:	eef0 1a45 	vmov.f32	s3, s10
 800b1fa:	eeb0 1a65 	vmov.f32	s2, s11
 800b1fe:	eef0 0a46 	vmov.f32	s1, s12
 800b202:	eeb0 0a66 	vmov.f32	s0, s13
 800b206:	f7f7 ff4d 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b20a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d10c      	bne.n	800b22c <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b212:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b216:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b21a:	eeb0 1a47 	vmov.f32	s2, s14
 800b21e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b310 <turn180R+0x2c8>
 800b222:	eeb0 0a67 	vmov.f32	s0, s15
 800b226:	f7f8 feb3 	bl	8003f90 <mollifier_slalom_table>
 800b22a:	e015      	b.n	800b258 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b22c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b230:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b234:	eef1 7a67 	vneg.f32	s15, s15
 800b238:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b23c:	eef0 2a66 	vmov.f32	s5, s13
 800b240:	eeb0 2a67 	vmov.f32	s4, s15
 800b244:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b308 <turn180R+0x2c0>
 800b248:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b308 <turn180R+0x2c0>
 800b24c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b310 <turn180R+0x2c8>
 800b250:	eeb0 0a47 	vmov.f32	s0, s14
 800b254:	f7f8 fd4c 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b258:	2301      	movs	r3, #1
 800b25a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b260:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b264:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b268:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b26c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b270:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b274:	edd7 7a01 	vldr	s15, [r7, #4]
 800b278:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b27c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b280:	eef0 7ae7 	vabs.f32	s15, s15
 800b284:	ee17 0a90 	vmov	r0, s15
 800b288:	f7f5 f986 	bl	8000598 <__aeabi_f2d>
 800b28c:	f04f 0200 	mov.w	r2, #0
 800b290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b294:	f7f5 fb02 	bl	800089c <__aeabi_ddiv>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4614      	mov	r4, r2
 800b29e:	461d      	mov	r5, r3
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f5 f978 	bl	8000598 <__aeabi_f2d>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7f5 faf4 	bl	800089c <__aeabi_ddiv>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	4b15      	ldr	r3, [pc, #84]	; (800b318 <turn180R+0x2d0>)
 800b2c2:	f7f5 f80b 	bl	80002dc <__adddf3>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	f7f5 fc93 	bl	8000bf8 <__aeabi_d2f>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	ee02 3a10 	vmov	s4, r3
 800b2da:	edd7 1a01 	vldr	s3, [r7, #4]
 800b2de:	ed97 1a01 	vldr	s2, [r7, #4]
 800b2e2:	eef0 0a68 	vmov.f32	s1, s17
 800b2e6:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ea:	f7f7 fedb 	bl	80030a4 <straight_table2>
}
 800b2ee:	bf00      	nop
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	ecbd 8b02 	vpop	{d8}
 800b2f8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b2fc:	b004      	add	sp, #16
 800b2fe:	4770      	bx	lr
 800b300:	20000808 	.word	0x20000808
 800b304:	42340000 	.word	0x42340000
 800b308:	00000000 	.word	0x00000000
 800b30c:	42cd0000 	.word	0x42cd0000
 800b310:	c3340000 	.word	0xc3340000
 800b314:	42b40000 	.word	0x42b40000
 800b318:	408f4000 	.word	0x408f4000

0800b31c <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b31c:	b084      	sub	sp, #16
 800b31e:	b5b0      	push	{r4, r5, r7, lr}
 800b320:	ed2d 8b02 	vpush	{d8}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b32c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b330:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b334:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b338:	2b01      	cmp	r3, #1
 800b33a:	f040 80a3 	bne.w	800b484 <turn180L+0x168>
		highspeed_mode = 1;
 800b33e:	4ba3      	ldr	r3, [pc, #652]	; (800b5cc <turn180L+0x2b0>)
 800b340:	2201      	movs	r2, #1
 800b342:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b344:	2301      	movs	r3, #1
 800b346:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b348:	2300      	movs	r3, #0
 800b34a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b350:	2300      	movs	r3, #0
 800b352:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b354:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b358:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b35c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b360:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b364:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b368:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b36c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b370:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b5d0 <turn180L+0x2b4>
 800b374:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	eeb0 2a47 	vmov.f32	s4, s14
 800b37e:	eef0 1a46 	vmov.f32	s3, s12
 800b382:	eeb0 1a66 	vmov.f32	s2, s13
 800b386:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b5d4 <turn180L+0x2b8>
 800b38a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b5d8 <turn180L+0x2bc>
 800b38e:	f7f7 fe89 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b392:	2300      	movs	r3, #0
 800b394:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b396:	2302      	movs	r3, #2
 800b398:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b39a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b39e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3a2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3a6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3b6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b3ba:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3be:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b5d0 <turn180L+0x2b4>
 800b3c2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	eeb0 2a47 	vmov.f32	s4, s14
 800b3cc:	eef0 1a45 	vmov.f32	s3, s10
 800b3d0:	eeb0 1a65 	vmov.f32	s2, s11
 800b3d4:	eef0 0a46 	vmov.f32	s1, s12
 800b3d8:	eeb0 0a66 	vmov.f32	s0, s13
 800b3dc:	f7f7 fe62 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b3e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d10c      	bne.n	800b402 <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b3e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b3f0:	eeb0 1a47 	vmov.f32	s2, s14
 800b3f4:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b5dc <turn180L+0x2c0>
 800b3f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b3fc:	f7f8 fdc8 	bl	8003f90 <mollifier_slalom_table>
 800b400:	e013      	b.n	800b42a <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b402:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b406:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b40a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b40e:	eef0 2a66 	vmov.f32	s5, s13
 800b412:	eeb0 2a47 	vmov.f32	s4, s14
 800b416:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b5d4 <turn180L+0x2b8>
 800b41a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b5d4 <turn180L+0x2b8>
 800b41e:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b5dc <turn180L+0x2c0>
 800b422:	eeb0 0a67 	vmov.f32	s0, s15
 800b426:	f7f8 fc63 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b432:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b436:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b5e0 <turn180L+0x2c4>
 800b43a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b43e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b442:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b446:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b44a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b44e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b452:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b456:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b45a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b5d0 <turn180L+0x2b4>
 800b45e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	eeb0 2a47 	vmov.f32	s4, s14
 800b468:	eef0 1a65 	vmov.f32	s3, s11
 800b46c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b5d4 <turn180L+0x2b8>
 800b470:	eef0 0a46 	vmov.f32	s1, s12
 800b474:	eeb0 0a66 	vmov.f32	s0, s13
 800b478:	f7f7 fe14 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b47c:	4b53      	ldr	r3, [pc, #332]	; (800b5cc <turn180L+0x2b0>)
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b482:	e09a      	b.n	800b5ba <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b484:	2300      	movs	r3, #0
 800b486:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b488:	2300      	movs	r3, #0
 800b48a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b48c:	2302      	movs	r3, #2
 800b48e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b490:	2300      	movs	r3, #0
 800b492:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b494:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b498:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b49c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b4a0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b4a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4b0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b4b4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4b8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b5d0 <turn180L+0x2b4>
 800b4bc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	eeb0 2a47 	vmov.f32	s4, s14
 800b4c6:	eef0 1a45 	vmov.f32	s3, s10
 800b4ca:	eeb0 1a65 	vmov.f32	s2, s11
 800b4ce:	eef0 0a46 	vmov.f32	s1, s12
 800b4d2:	eeb0 0a66 	vmov.f32	s0, s13
 800b4d6:	f7f7 fde5 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b4da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d10c      	bne.n	800b4fc <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b4e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b4ea:	eeb0 1a47 	vmov.f32	s2, s14
 800b4ee:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b5dc <turn180L+0x2c0>
 800b4f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b4f6:	f7f8 fd4b 	bl	8003f90 <mollifier_slalom_table>
 800b4fa:	e013      	b.n	800b524 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b4fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b500:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b504:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b508:	eef0 2a66 	vmov.f32	s5, s13
 800b50c:	eeb0 2a47 	vmov.f32	s4, s14
 800b510:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b5d4 <turn180L+0x2b8>
 800b514:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b5d4 <turn180L+0x2b8>
 800b518:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b5dc <turn180L+0x2c0>
 800b51c:	eeb0 0a67 	vmov.f32	s0, s15
 800b520:	f7f8 fbe6 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b524:	2301      	movs	r3, #1
 800b526:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b528:	2300      	movs	r3, #0
 800b52a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b52c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b530:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b534:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b538:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b53c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b540:	edd7 7a01 	vldr	s15, [r7, #4]
 800b544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b54c:	eef0 7ae7 	vabs.f32	s15, s15
 800b550:	ee17 0a90 	vmov	r0, s15
 800b554:	f7f5 f820 	bl	8000598 <__aeabi_f2d>
 800b558:	f04f 0200 	mov.w	r2, #0
 800b55c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b560:	f7f5 f99c 	bl	800089c <__aeabi_ddiv>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4614      	mov	r4, r2
 800b56a:	461d      	mov	r5, r3
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	4618      	mov	r0, r3
 800b570:	f7f5 f812 	bl	8000598 <__aeabi_f2d>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4620      	mov	r0, r4
 800b57a:	4629      	mov	r1, r5
 800b57c:	f7f5 f98e 	bl	800089c <__aeabi_ddiv>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4610      	mov	r0, r2
 800b586:	4619      	mov	r1, r3
 800b588:	f04f 0200 	mov.w	r2, #0
 800b58c:	4b15      	ldr	r3, [pc, #84]	; (800b5e4 <turn180L+0x2c8>)
 800b58e:	f7f4 fea5 	bl	80002dc <__adddf3>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b596:	4610      	mov	r0, r2
 800b598:	4619      	mov	r1, r3
 800b59a:	f7f5 fb2d 	bl	8000bf8 <__aeabi_d2f>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	ee02 3a10 	vmov	s4, r3
 800b5a6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b5aa:	ed97 1a01 	vldr	s2, [r7, #4]
 800b5ae:	eef0 0a68 	vmov.f32	s1, s17
 800b5b2:	eeb0 0a48 	vmov.f32	s0, s16
 800b5b6:	f7f7 fd75 	bl	80030a4 <straight_table2>
}
 800b5ba:	bf00      	nop
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	ecbd 8b02 	vpop	{d8}
 800b5c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b5c8:	b004      	add	sp, #16
 800b5ca:	4770      	bx	lr
 800b5cc:	20000808 	.word	0x20000808
 800b5d0:	42340000 	.word	0x42340000
 800b5d4:	00000000 	.word	0x00000000
 800b5d8:	42cd0000 	.word	0x42cd0000
 800b5dc:	43340000 	.word	0x43340000
 800b5e0:	42b40000 	.word	0x42b40000
 800b5e4:	408f4000 	.word	0x408f4000

0800b5e8 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	b5b0      	push	{r4, r5, r7, lr}
 800b5ec:	ed2d 8b02 	vpush	{d8}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b5f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5fc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b600:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b604:	2b01      	cmp	r3, #1
 800b606:	f040 80ae 	bne.w	800b766 <turn45inR+0x17e>
		highspeed_mode = 1;
 800b60a:	4bdd      	ldr	r3, [pc, #884]	; (800b980 <turn45inR+0x398>)
 800b60c:	2201      	movs	r2, #1
 800b60e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b610:	2301      	movs	r3, #1
 800b612:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b614:	2300      	movs	r3, #0
 800b616:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b618:	2300      	movs	r3, #0
 800b61a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b620:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b624:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b628:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b62c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b630:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b634:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b638:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b63c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b984 <turn45inR+0x39c>
 800b640:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	eeb0 2a47 	vmov.f32	s4, s14
 800b64a:	eef0 1a46 	vmov.f32	s3, s12
 800b64e:	eeb0 1a66 	vmov.f32	s2, s13
 800b652:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b990 <turn45inR+0x3a8>
 800b656:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b988 <turn45inR+0x3a0>
 800b65a:	f7f7 fd23 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b65e:	2300      	movs	r3, #0
 800b660:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b662:	2302      	movs	r3, #2
 800b664:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b666:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b66a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b66e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b672:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b676:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b67a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b67e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b682:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b686:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b68a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b984 <turn45inR+0x39c>
 800b68e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	eeb0 2a47 	vmov.f32	s4, s14
 800b698:	eef0 1a45 	vmov.f32	s3, s10
 800b69c:	eeb0 1a65 	vmov.f32	s2, s11
 800b6a0:	eef0 0a46 	vmov.f32	s1, s12
 800b6a4:	eeb0 0a66 	vmov.f32	s0, s13
 800b6a8:	f7f7 fcfc 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b6ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d10c      	bne.n	800b6ce <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b6b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b6bc:	eeb0 1a47 	vmov.f32	s2, s14
 800b6c0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b994 <turn45inR+0x3ac>
 800b6c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b6c8:	f7f8 fc62 	bl	8003f90 <mollifier_slalom_table>
 800b6cc:	e015      	b.n	800b6fa <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b6ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b6d6:	eef1 7a67 	vneg.f32	s15, s15
 800b6da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b6de:	eef0 2a66 	vmov.f32	s5, s13
 800b6e2:	eeb0 2a67 	vmov.f32	s4, s15
 800b6e6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b990 <turn45inR+0x3a8>
 800b6ea:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b990 <turn45inR+0x3a8>
 800b6ee:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b994 <turn45inR+0x3ac>
 800b6f2:	eeb0 0a47 	vmov.f32	s0, s14
 800b6f6:	f7f8 fafb 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	4618      	mov	r0, r3
 800b706:	f7f4 ff47 	bl	8000598 <__aeabi_f2d>
 800b70a:	a39b      	add	r3, pc, #620	; (adr r3, 800b978 <turn45inR+0x390>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fde4 	bl	80002dc <__adddf3>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4610      	mov	r0, r2
 800b71a:	4619      	mov	r1, r3
 800b71c:	f7f5 fa6c 	bl	8000bf8 <__aeabi_d2f>
 800b720:	4603      	mov	r3, r0
 800b722:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b726:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b72a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b72e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b732:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b736:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b73a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b73e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b984 <turn45inR+0x39c>
 800b742:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	eeb0 2a47 	vmov.f32	s4, s14
 800b74c:	eef0 1a46 	vmov.f32	s3, s12
 800b750:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b990 <turn45inR+0x3a8>
 800b754:	eef0 0a66 	vmov.f32	s1, s13
 800b758:	ee00 3a10 	vmov	s0, r3
 800b75c:	f7f7 fca2 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b760:	4b87      	ldr	r3, [pc, #540]	; (800b980 <turn45inR+0x398>)
 800b762:	2200      	movs	r2, #0
 800b764:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b766:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f040 809d 	bne.w	800b8aa <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b770:	2300      	movs	r3, #0
 800b772:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b774:	2300      	movs	r3, #0
 800b776:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b778:	2302      	movs	r3, #2
 800b77a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b780:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b784:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b788:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b78c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b790:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b794:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b79c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b7a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b7a4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b984 <turn45inR+0x39c>
 800b7a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	eeb0 2a47 	vmov.f32	s4, s14
 800b7b2:	eef0 1a45 	vmov.f32	s3, s10
 800b7b6:	eeb0 1a65 	vmov.f32	s2, s11
 800b7ba:	eef0 0a46 	vmov.f32	s1, s12
 800b7be:	eeb0 0a66 	vmov.f32	s0, s13
 800b7c2:	f7f7 fc6f 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b7c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d10c      	bne.n	800b7e8 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b7ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7d6:	eeb0 1a47 	vmov.f32	s2, s14
 800b7da:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b994 <turn45inR+0x3ac>
 800b7de:	eeb0 0a67 	vmov.f32	s0, s15
 800b7e2:	f7f8 fbd5 	bl	8003f90 <mollifier_slalom_table>
 800b7e6:	e015      	b.n	800b814 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b7e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b7f0:	eef1 7a67 	vneg.f32	s15, s15
 800b7f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7f8:	eef0 2a66 	vmov.f32	s5, s13
 800b7fc:	eeb0 2a67 	vmov.f32	s4, s15
 800b800:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b990 <turn45inR+0x3a8>
 800b804:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b990 <turn45inR+0x3a8>
 800b808:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b994 <turn45inR+0x3ac>
 800b80c:	eeb0 0a47 	vmov.f32	s0, s14
 800b810:	f7f8 fa6e 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b814:	2303      	movs	r3, #3
 800b816:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b818:	2300      	movs	r3, #0
 800b81a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b81c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b820:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b824:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b828:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b82c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b830:	edd7 7a01 	vldr	s15, [r7, #4]
 800b834:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b83c:	eef0 7ae7 	vabs.f32	s15, s15
 800b840:	ee17 0a90 	vmov	r0, s15
 800b844:	f7f4 fea8 	bl	8000598 <__aeabi_f2d>
 800b848:	f04f 0200 	mov.w	r2, #0
 800b84c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b850:	f7f5 f824 	bl	800089c <__aeabi_ddiv>
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	4614      	mov	r4, r2
 800b85a:	461d      	mov	r5, r3
 800b85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f4 fe9a 	bl	8000598 <__aeabi_f2d>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4620      	mov	r0, r4
 800b86a:	4629      	mov	r1, r5
 800b86c:	f7f5 f816 	bl	800089c <__aeabi_ddiv>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4610      	mov	r0, r2
 800b876:	4619      	mov	r1, r3
 800b878:	f04f 0200 	mov.w	r2, #0
 800b87c:	4b43      	ldr	r3, [pc, #268]	; (800b98c <turn45inR+0x3a4>)
 800b87e:	f7f4 fd2d 	bl	80002dc <__adddf3>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b886:	4610      	mov	r0, r2
 800b888:	4619      	mov	r1, r3
 800b88a:	f7f5 f9b5 	bl	8000bf8 <__aeabi_d2f>
 800b88e:	4603      	mov	r3, r0
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	ee02 3a10 	vmov	s4, r3
 800b896:	edd7 1a01 	vldr	s3, [r7, #4]
 800b89a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b89e:	eef0 0a68 	vmov.f32	s1, s17
 800b8a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b8a6:	f7f7 fbfd 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800b8aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	f240 80d0 	bls.w	800ba54 <turn45inR+0x46c>

		highspeed_mode = 1;
 800b8b4:	4b32      	ldr	r3, [pc, #200]	; (800b980 <turn45inR+0x398>)
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b8ca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b8ce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8de:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b8e2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b8e6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b984 <turn45inR+0x39c>
 800b8ea:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	eeb0 2a47 	vmov.f32	s4, s14
 800b8f4:	eef0 1a46 	vmov.f32	s3, s12
 800b8f8:	eeb0 1a66 	vmov.f32	s2, s13
 800b8fc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b990 <turn45inR+0x3a8>
 800b900:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b988 <turn45inR+0x3a0>
 800b904:	f7f7 fbce 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b908:	2300      	movs	r3, #0
 800b90a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b90c:	2302      	movs	r3, #2
 800b90e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b910:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b914:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b918:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b91c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b920:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b924:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b92c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b930:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b934:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b984 <turn45inR+0x39c>
 800b938:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	eeb0 2a47 	vmov.f32	s4, s14
 800b942:	eef0 1a45 	vmov.f32	s3, s10
 800b946:	eeb0 1a65 	vmov.f32	s2, s11
 800b94a:	eef0 0a46 	vmov.f32	s1, s12
 800b94e:	eeb0 0a66 	vmov.f32	s0, s13
 800b952:	f7f7 fba7 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b956:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d11c      	bne.n	800b998 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b95e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b962:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b966:	eeb0 1a47 	vmov.f32	s2, s14
 800b96a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b994 <turn45inR+0x3ac>
 800b96e:	eeb0 0a67 	vmov.f32	s0, s15
 800b972:	f7f8 fb0d 	bl	8003f90 <mollifier_slalom_table>
 800b976:	e025      	b.n	800b9c4 <turn45inR+0x3dc>
 800b978:	c022ec18 	.word	0xc022ec18
 800b97c:	405fd1de 	.word	0x405fd1de
 800b980:	20000808 	.word	0x20000808
 800b984:	42340000 	.word	0x42340000
 800b988:	42cd0000 	.word	0x42cd0000
 800b98c:	408f4000 	.word	0x408f4000
 800b990:	00000000 	.word	0x00000000
 800b994:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b998:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b99c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b9a0:	eef1 7a67 	vneg.f32	s15, s15
 800b9a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b9a8:	eef0 2a66 	vmov.f32	s5, s13
 800b9ac:	eeb0 2a67 	vmov.f32	s4, s15
 800b9b0:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b990 <turn45inR+0x3a8>
 800b9b4:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b990 <turn45inR+0x3a8>
 800b9b8:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b994 <turn45inR+0x3ac>
 800b9bc:	eeb0 0a47 	vmov.f32	s0, s14
 800b9c0:	f7f8 f996 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b9d0:	3b02      	subs	r3, #2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7f4 fdce 	bl	8000574 <__aeabi_i2d>
 800b9d8:	a325      	add	r3, pc, #148	; (adr r3, 800ba70 <turn45inR+0x488>)
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f7f4 fe33 	bl	8000648 <__aeabi_dmul>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4614      	mov	r4, r2
 800b9e8:	461d      	mov	r5, r3
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7f4 fdd3 	bl	8000598 <__aeabi_f2d>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f7f4 fc6f 	bl	80002dc <__adddf3>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4610      	mov	r0, r2
 800ba04:	4619      	mov	r1, r3
 800ba06:	f7f5 f8f7 	bl	8000bf8 <__aeabi_d2f>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba10:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba14:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba24:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ba28:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba2c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800ba68 <turn45inR+0x480>
 800ba30:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	eeb0 2a47 	vmov.f32	s4, s14
 800ba3a:	eef0 1a65 	vmov.f32	s3, s11
 800ba3e:	eeb0 1a46 	vmov.f32	s2, s12
 800ba42:	eef0 0a66 	vmov.f32	s1, s13
 800ba46:	ee00 3a10 	vmov	s0, r3
 800ba4a:	f7f7 fb2b 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ba4e:	4b07      	ldr	r3, [pc, #28]	; (800ba6c <turn45inR+0x484>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
	}

}
 800ba54:	bf00      	nop
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	ecbd 8b02 	vpop	{d8}
 800ba5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ba62:	b004      	add	sp, #16
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	42340000 	.word	0x42340000
 800ba6c:	20000808 	.word	0x20000808
 800ba70:	c022ec18 	.word	0xc022ec18
 800ba74:	404fd1de 	.word	0x404fd1de

0800ba78 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ba78:	b084      	sub	sp, #16
 800ba7a:	b5b0      	push	{r4, r5, r7, lr}
 800ba7c:	ed2d 8b02 	vpush	{d8}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ba88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ba8c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ba90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	f040 80ac 	bne.w	800bbf2 <turn45inL+0x17a>
		highspeed_mode = 1;
 800ba9a:	4bdb      	ldr	r3, [pc, #876]	; (800be08 <turn45inL+0x390>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800baa0:	2301      	movs	r3, #1
 800baa2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800baac:	2300      	movs	r3, #0
 800baae:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bab0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bab4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bab8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800babc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bac4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bac8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bacc:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800be18 <turn45inL+0x3a0>
 800bad0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	eeb0 2a47 	vmov.f32	s4, s14
 800bada:	eef0 1a46 	vmov.f32	s3, s12
 800bade:	eeb0 1a66 	vmov.f32	s2, s13
 800bae2:	eddf 0acc 	vldr	s1, [pc, #816]	; 800be14 <turn45inL+0x39c>
 800bae6:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800be0c <turn45inL+0x394>
 800baea:	f7f7 fadb 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800baee:	2300      	movs	r3, #0
 800baf0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800baf2:	2302      	movs	r3, #2
 800baf4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baf6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bafa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bafe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bb02:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb12:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bb16:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb1a:	eddf 4abf 	vldr	s9, [pc, #764]	; 800be18 <turn45inL+0x3a0>
 800bb1e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	eeb0 2a47 	vmov.f32	s4, s14
 800bb28:	eef0 1a45 	vmov.f32	s3, s10
 800bb2c:	eeb0 1a65 	vmov.f32	s2, s11
 800bb30:	eef0 0a46 	vmov.f32	s1, s12
 800bb34:	eeb0 0a66 	vmov.f32	s0, s13
 800bb38:	f7f7 fab4 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bb3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d10c      	bne.n	800bb5e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800bb44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb4c:	eeb0 1a47 	vmov.f32	s2, s14
 800bb50:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800be18 <turn45inL+0x3a0>
 800bb54:	eeb0 0a67 	vmov.f32	s0, s15
 800bb58:	f7f8 fa1a 	bl	8003f90 <mollifier_slalom_table>
 800bb5c:	e013      	b.n	800bb86 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bb5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb62:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb66:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bb6a:	eef0 2a66 	vmov.f32	s5, s13
 800bb6e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb72:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800be14 <turn45inL+0x39c>
 800bb76:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800be14 <turn45inL+0x39c>
 800bb7a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800be18 <turn45inL+0x3a0>
 800bb7e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb82:	f7f8 f8b5 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7f4 fd01 	bl	8000598 <__aeabi_f2d>
 800bb96:	a39a      	add	r3, pc, #616	; (adr r3, 800be00 <turn45inL+0x388>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	f7f4 fb9e 	bl	80002dc <__adddf3>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4610      	mov	r0, r2
 800bba6:	4619      	mov	r1, r3
 800bba8:	f7f5 f826 	bl	8000bf8 <__aeabi_d2f>
 800bbac:	4603      	mov	r3, r0
 800bbae:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bbb2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbc2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bbc6:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bbca:	eddf 5a93 	vldr	s11, [pc, #588]	; 800be18 <turn45inL+0x3a0>
 800bbce:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	eeb0 2a47 	vmov.f32	s4, s14
 800bbd8:	eef0 1a46 	vmov.f32	s3, s12
 800bbdc:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800be14 <turn45inL+0x39c>
 800bbe0:	eef0 0a66 	vmov.f32	s1, s13
 800bbe4:	ee00 3a10 	vmov	s0, r3
 800bbe8:	f7f7 fa5c 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800bbec:	4b86      	ldr	r3, [pc, #536]	; (800be08 <turn45inL+0x390>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bbf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f040 809b 	bne.w	800bd32 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bc04:	2302      	movs	r3, #2
 800bc06:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc0c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bc10:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bc14:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bc18:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc1c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc28:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bc2c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc30:	eddf 4a79 	vldr	s9, [pc, #484]	; 800be18 <turn45inL+0x3a0>
 800bc34:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	eeb0 2a47 	vmov.f32	s4, s14
 800bc3e:	eef0 1a45 	vmov.f32	s3, s10
 800bc42:	eeb0 1a65 	vmov.f32	s2, s11
 800bc46:	eef0 0a46 	vmov.f32	s1, s12
 800bc4a:	eeb0 0a66 	vmov.f32	s0, s13
 800bc4e:	f7f7 fa29 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bc52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d10c      	bne.n	800bc74 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800bc5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc5e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc62:	eeb0 1a47 	vmov.f32	s2, s14
 800bc66:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800be18 <turn45inL+0x3a0>
 800bc6a:	eeb0 0a67 	vmov.f32	s0, s15
 800bc6e:	f7f8 f98f 	bl	8003f90 <mollifier_slalom_table>
 800bc72:	e013      	b.n	800bc9c <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bc74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc7c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc80:	eef0 2a66 	vmov.f32	s5, s13
 800bc84:	eeb0 2a47 	vmov.f32	s4, s14
 800bc88:	eddf 1a62 	vldr	s3, [pc, #392]	; 800be14 <turn45inL+0x39c>
 800bc8c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800be14 <turn45inL+0x39c>
 800bc90:	eddf 0a61 	vldr	s1, [pc, #388]	; 800be18 <turn45inL+0x3a0>
 800bc94:	eeb0 0a67 	vmov.f32	s0, s15
 800bc98:	f7f8 f82a 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bca4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bca8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bcac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bcbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bcc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcc4:	eef0 7ae7 	vabs.f32	s15, s15
 800bcc8:	ee17 0a90 	vmov	r0, s15
 800bccc:	f7f4 fc64 	bl	8000598 <__aeabi_f2d>
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcd8:	f7f4 fde0 	bl	800089c <__aeabi_ddiv>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	461d      	mov	r5, r3
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7f4 fc56 	bl	8000598 <__aeabi_f2d>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f7f4 fdd2 	bl	800089c <__aeabi_ddiv>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	4619      	mov	r1, r3
 800bd00:	f04f 0200 	mov.w	r2, #0
 800bd04:	4b42      	ldr	r3, [pc, #264]	; (800be10 <turn45inL+0x398>)
 800bd06:	f7f4 fae9 	bl	80002dc <__adddf3>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bd0e:	4610      	mov	r0, r2
 800bd10:	4619      	mov	r1, r3
 800bd12:	f7f4 ff71 	bl	8000bf8 <__aeabi_d2f>
 800bd16:	4603      	mov	r3, r0
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	ee02 3a10 	vmov	s4, r3
 800bd1e:	edd7 1a01 	vldr	s3, [r7, #4]
 800bd22:	ed97 1a01 	vldr	s2, [r7, #4]
 800bd26:	eef0 0a68 	vmov.f32	s1, s17
 800bd2a:	eeb0 0a48 	vmov.f32	s0, s16
 800bd2e:	f7f7 f9b9 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800bd32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	f240 80cc 	bls.w	800bed4 <turn45inL+0x45c>

		highspeed_mode = 1;
 800bd3c:	4b32      	ldr	r3, [pc, #200]	; (800be08 <turn45inL+0x390>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bd42:	2301      	movs	r3, #1
 800bd44:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd52:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd56:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd66:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bd6a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd6e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800be18 <turn45inL+0x3a0>
 800bd72:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	eeb0 2a47 	vmov.f32	s4, s14
 800bd7c:	eef0 1a46 	vmov.f32	s3, s12
 800bd80:	eeb0 1a66 	vmov.f32	s2, s13
 800bd84:	eddf 0a23 	vldr	s1, [pc, #140]	; 800be14 <turn45inL+0x39c>
 800bd88:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800be0c <turn45inL+0x394>
 800bd8c:	f7f7 f98a 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bd94:	2302      	movs	r3, #2
 800bd96:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bda0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bda4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bda8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdb4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bdb8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdbc:	eddf 4a16 	vldr	s9, [pc, #88]	; 800be18 <turn45inL+0x3a0>
 800bdc0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	eeb0 2a47 	vmov.f32	s4, s14
 800bdca:	eef0 1a45 	vmov.f32	s3, s10
 800bdce:	eeb0 1a65 	vmov.f32	s2, s11
 800bdd2:	eef0 0a46 	vmov.f32	s1, s12
 800bdd6:	eeb0 0a66 	vmov.f32	s0, s13
 800bdda:	f7f7 f963 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bdde:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d11a      	bne.n	800be1c <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800bde6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bdee:	eeb0 1a47 	vmov.f32	s2, s14
 800bdf2:	eddf 0a09 	vldr	s1, [pc, #36]	; 800be18 <turn45inL+0x3a0>
 800bdf6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdfa:	f7f8 f8c9 	bl	8003f90 <mollifier_slalom_table>
 800bdfe:	e021      	b.n	800be44 <turn45inL+0x3cc>
 800be00:	c022ec18 	.word	0xc022ec18
 800be04:	405fd1de 	.word	0x405fd1de
 800be08:	20000808 	.word	0x20000808
 800be0c:	42cd0000 	.word	0x42cd0000
 800be10:	408f4000 	.word	0x408f4000
 800be14:	00000000 	.word	0x00000000
 800be18:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800be1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be24:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be28:	eef0 2a66 	vmov.f32	s5, s13
 800be2c:	eeb0 2a47 	vmov.f32	s4, s14
 800be30:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800be14 <turn45inL+0x39c>
 800be34:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800be14 <turn45inL+0x39c>
 800be38:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800be18 <turn45inL+0x3a0>
 800be3c:	eeb0 0a67 	vmov.f32	s0, s15
 800be40:	f7f7 ff56 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800be44:	2300      	movs	r3, #0
 800be46:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800be48:	2300      	movs	r3, #0
 800be4a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be50:	3b02      	subs	r3, #2
 800be52:	4618      	mov	r0, r3
 800be54:	f7f4 fb8e 	bl	8000574 <__aeabi_i2d>
 800be58:	a325      	add	r3, pc, #148	; (adr r3, 800bef0 <turn45inL+0x478>)
 800be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5e:	f7f4 fbf3 	bl	8000648 <__aeabi_dmul>
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4614      	mov	r4, r2
 800be68:	461d      	mov	r5, r3
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f4 fb93 	bl	8000598 <__aeabi_f2d>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	f7f4 fa2f 	bl	80002dc <__adddf3>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	4610      	mov	r0, r2
 800be84:	4619      	mov	r1, r3
 800be86:	f7f4 feb7 	bl	8000bf8 <__aeabi_d2f>
 800be8a:	4603      	mov	r3, r0
 800be8c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be90:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be94:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bea4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bea8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800beac:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bee8 <turn45inL+0x470>
 800beb0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	eeb0 2a47 	vmov.f32	s4, s14
 800beba:	eef0 1a65 	vmov.f32	s3, s11
 800bebe:	eeb0 1a46 	vmov.f32	s2, s12
 800bec2:	eef0 0a66 	vmov.f32	s1, s13
 800bec6:	ee00 3a10 	vmov	s0, r3
 800beca:	f7f7 f8eb 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800bece:	4b07      	ldr	r3, [pc, #28]	; (800beec <turn45inL+0x474>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	701a      	strb	r2, [r3, #0]
	}

}
 800bed4:	bf00      	nop
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	ecbd 8b02 	vpop	{d8}
 800bede:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bee2:	b004      	add	sp, #16
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	42340000 	.word	0x42340000
 800beec:	20000808 	.word	0x20000808
 800bef0:	c022ec18 	.word	0xc022ec18
 800bef4:	404fd1de 	.word	0x404fd1de

0800bef8 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bef8:	b084      	sub	sp, #16
 800befa:	b5b0      	push	{r4, r5, r7, lr}
 800befc:	ed2d 8b02 	vpush	{d8}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bf08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bf0c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bf10:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	f040 80ae 	bne.w	800c076 <turn135inR+0x17e>
		highspeed_mode = 1;
 800bf1a:	4bdd      	ldr	r3, [pc, #884]	; (800c290 <turn135inR+0x398>)
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bf20:	2301      	movs	r3, #1
 800bf22:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf30:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf34:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf44:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bf48:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf4c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c294 <turn135inR+0x39c>
 800bf50:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	eeb0 2a47 	vmov.f32	s4, s14
 800bf5a:	eef0 1a46 	vmov.f32	s3, s12
 800bf5e:	eeb0 1a66 	vmov.f32	s2, s13
 800bf62:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c2a0 <turn135inR+0x3a8>
 800bf66:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c298 <turn135inR+0x3a0>
 800bf6a:	f7f7 f89b 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bf72:	2302      	movs	r3, #2
 800bf74:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf76:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bf7a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf7e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bf82:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf92:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bf96:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf9a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c294 <turn135inR+0x39c>
 800bf9e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	eeb0 2a47 	vmov.f32	s4, s14
 800bfa8:	eef0 1a45 	vmov.f32	s3, s10
 800bfac:	eeb0 1a65 	vmov.f32	s2, s11
 800bfb0:	eef0 0a46 	vmov.f32	s1, s12
 800bfb4:	eeb0 0a66 	vmov.f32	s0, s13
 800bfb8:	f7f7 f874 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bfbc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d10c      	bne.n	800bfde <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bfc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfc8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bfcc:	eeb0 1a47 	vmov.f32	s2, s14
 800bfd0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c2a4 <turn135inR+0x3ac>
 800bfd4:	eeb0 0a67 	vmov.f32	s0, s15
 800bfd8:	f7f7 ffda 	bl	8003f90 <mollifier_slalom_table>
 800bfdc:	e015      	b.n	800c00a <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bfde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bfe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bfe6:	eef1 7a67 	vneg.f32	s15, s15
 800bfea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bfee:	eef0 2a66 	vmov.f32	s5, s13
 800bff2:	eeb0 2a67 	vmov.f32	s4, s15
 800bff6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800c2a0 <turn135inR+0x3a8>
 800bffa:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800c2a0 <turn135inR+0x3a8>
 800bffe:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800c2a4 <turn135inR+0x3ac>
 800c002:	eeb0 0a47 	vmov.f32	s0, s14
 800c006:	f7f7 fe73 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	4618      	mov	r0, r3
 800c016:	f7f4 fabf 	bl	8000598 <__aeabi_f2d>
 800c01a:	a39b      	add	r3, pc, #620	; (adr r3, 800c288 <turn135inR+0x390>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 f95c 	bl	80002dc <__adddf3>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4610      	mov	r0, r2
 800c02a:	4619      	mov	r1, r3
 800c02c:	f7f4 fde4 	bl	8000bf8 <__aeabi_d2f>
 800c030:	4603      	mov	r3, r0
 800c032:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c036:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c03a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c03e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c042:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c046:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c04a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c04e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c294 <turn135inR+0x39c>
 800c052:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	eeb0 2a47 	vmov.f32	s4, s14
 800c05c:	eef0 1a46 	vmov.f32	s3, s12
 800c060:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800c2a0 <turn135inR+0x3a8>
 800c064:	eef0 0a66 	vmov.f32	s1, s13
 800c068:	ee00 3a10 	vmov	s0, r3
 800c06c:	f7f7 f81a 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c070:	4b87      	ldr	r3, [pc, #540]	; (800c290 <turn135inR+0x398>)
 800c072:	2200      	movs	r2, #0
 800c074:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c076:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f040 809d 	bne.w	800c1ba <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c080:	2300      	movs	r3, #0
 800c082:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c084:	2300      	movs	r3, #0
 800c086:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c088:	2302      	movs	r3, #2
 800c08a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c090:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c094:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c098:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c09c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c0a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0ac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c0b0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0b4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c294 <turn135inR+0x39c>
 800c0b8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	eeb0 2a47 	vmov.f32	s4, s14
 800c0c2:	eef0 1a45 	vmov.f32	s3, s10
 800c0c6:	eeb0 1a65 	vmov.f32	s2, s11
 800c0ca:	eef0 0a46 	vmov.f32	s1, s12
 800c0ce:	eeb0 0a66 	vmov.f32	s0, s13
 800c0d2:	f7f6 ffe7 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c0d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d10c      	bne.n	800c0f8 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c0de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0e6:	eeb0 1a47 	vmov.f32	s2, s14
 800c0ea:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800c2a4 <turn135inR+0x3ac>
 800c0ee:	eeb0 0a67 	vmov.f32	s0, s15
 800c0f2:	f7f7 ff4d 	bl	8003f90 <mollifier_slalom_table>
 800c0f6:	e015      	b.n	800c124 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c0f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c100:	eef1 7a67 	vneg.f32	s15, s15
 800c104:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c108:	eef0 2a66 	vmov.f32	s5, s13
 800c10c:	eeb0 2a67 	vmov.f32	s4, s15
 800c110:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c2a0 <turn135inR+0x3a8>
 800c114:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c2a0 <turn135inR+0x3a8>
 800c118:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c2a4 <turn135inR+0x3ac>
 800c11c:	eeb0 0a47 	vmov.f32	s0, s14
 800c120:	f7f7 fde6 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c124:	2303      	movs	r3, #3
 800c126:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c12c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c130:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c134:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c138:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c13c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c140:	edd7 7a01 	vldr	s15, [r7, #4]
 800c144:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c14c:	eef0 7ae7 	vabs.f32	s15, s15
 800c150:	ee17 0a90 	vmov	r0, s15
 800c154:	f7f4 fa20 	bl	8000598 <__aeabi_f2d>
 800c158:	f04f 0200 	mov.w	r2, #0
 800c15c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c160:	f7f4 fb9c 	bl	800089c <__aeabi_ddiv>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4614      	mov	r4, r2
 800c16a:	461d      	mov	r5, r3
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	4618      	mov	r0, r3
 800c170:	f7f4 fa12 	bl	8000598 <__aeabi_f2d>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 fb8e 	bl	800089c <__aeabi_ddiv>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4610      	mov	r0, r2
 800c186:	4619      	mov	r1, r3
 800c188:	f04f 0200 	mov.w	r2, #0
 800c18c:	4b43      	ldr	r3, [pc, #268]	; (800c29c <turn135inR+0x3a4>)
 800c18e:	f7f4 f8a5 	bl	80002dc <__adddf3>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c196:	4610      	mov	r0, r2
 800c198:	4619      	mov	r1, r3
 800c19a:	f7f4 fd2d 	bl	8000bf8 <__aeabi_d2f>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	ee02 3a10 	vmov	s4, r3
 800c1a6:	edd7 1a01 	vldr	s3, [r7, #4]
 800c1aa:	ed97 1a01 	vldr	s2, [r7, #4]
 800c1ae:	eef0 0a68 	vmov.f32	s1, s17
 800c1b2:	eeb0 0a48 	vmov.f32	s0, s16
 800c1b6:	f7f6 ff75 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800c1ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	f240 80d0 	bls.w	800c364 <turn135inR+0x46c>

		highspeed_mode = 1;
 800c1c4:	4b32      	ldr	r3, [pc, #200]	; (800c290 <turn135inR+0x398>)
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c1da:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c1de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1ee:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c1f2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c1f6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c294 <turn135inR+0x39c>
 800c1fa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	eeb0 2a47 	vmov.f32	s4, s14
 800c204:	eef0 1a46 	vmov.f32	s3, s12
 800c208:	eeb0 1a66 	vmov.f32	s2, s13
 800c20c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c2a0 <turn135inR+0x3a8>
 800c210:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c298 <turn135inR+0x3a0>
 800c214:	f7f6 ff46 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c218:	2300      	movs	r3, #0
 800c21a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c21c:	2302      	movs	r3, #2
 800c21e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c220:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c224:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c228:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c22c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c230:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c234:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c23c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c240:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c244:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c294 <turn135inR+0x39c>
 800c248:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	eeb0 2a47 	vmov.f32	s4, s14
 800c252:	eef0 1a45 	vmov.f32	s3, s10
 800c256:	eeb0 1a65 	vmov.f32	s2, s11
 800c25a:	eef0 0a46 	vmov.f32	s1, s12
 800c25e:	eeb0 0a66 	vmov.f32	s0, s13
 800c262:	f7f6 ff1f 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c266:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d11c      	bne.n	800c2a8 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c26e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c272:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c276:	eeb0 1a47 	vmov.f32	s2, s14
 800c27a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c2a4 <turn135inR+0x3ac>
 800c27e:	eeb0 0a67 	vmov.f32	s0, s15
 800c282:	f7f7 fe85 	bl	8003f90 <mollifier_slalom_table>
 800c286:	e025      	b.n	800c2d4 <turn135inR+0x3dc>
 800c288:	c022ec18 	.word	0xc022ec18
 800c28c:	405fd1de 	.word	0x405fd1de
 800c290:	20000808 	.word	0x20000808
 800c294:	42340000 	.word	0x42340000
 800c298:	42cd0000 	.word	0x42cd0000
 800c29c:	408f4000 	.word	0x408f4000
 800c2a0:	00000000 	.word	0x00000000
 800c2a4:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c2a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c2b0:	eef1 7a67 	vneg.f32	s15, s15
 800c2b4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c2b8:	eef0 2a66 	vmov.f32	s5, s13
 800c2bc:	eeb0 2a67 	vmov.f32	s4, s15
 800c2c0:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800c2a0 <turn135inR+0x3a8>
 800c2c4:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800c2a0 <turn135inR+0x3a8>
 800c2c8:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800c2a4 <turn135inR+0x3ac>
 800c2cc:	eeb0 0a47 	vmov.f32	s0, s14
 800c2d0:	f7f7 fd0e 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2e0:	3b02      	subs	r3, #2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f4 f946 	bl	8000574 <__aeabi_i2d>
 800c2e8:	a325      	add	r3, pc, #148	; (adr r3, 800c380 <turn135inR+0x488>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f7f4 f9ab 	bl	8000648 <__aeabi_dmul>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4614      	mov	r4, r2
 800c2f8:	461d      	mov	r5, r3
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7f4 f94b 	bl	8000598 <__aeabi_f2d>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f3 ffe7 	bl	80002dc <__adddf3>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	f7f4 fc6f 	bl	8000bf8 <__aeabi_d2f>
 800c31a:	4603      	mov	r3, r0
 800c31c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c320:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c324:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c328:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c32c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c330:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c334:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c338:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c33c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c378 <turn135inR+0x480>
 800c340:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	eeb0 2a47 	vmov.f32	s4, s14
 800c34a:	eef0 1a65 	vmov.f32	s3, s11
 800c34e:	eeb0 1a46 	vmov.f32	s2, s12
 800c352:	eef0 0a66 	vmov.f32	s1, s13
 800c356:	ee00 3a10 	vmov	s0, r3
 800c35a:	f7f6 fea3 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c35e:	4b07      	ldr	r3, [pc, #28]	; (800c37c <turn135inR+0x484>)
 800c360:	2200      	movs	r2, #0
 800c362:	701a      	strb	r2, [r3, #0]
	}

}
 800c364:	bf00      	nop
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	ecbd 8b02 	vpop	{d8}
 800c36e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c372:	b004      	add	sp, #16
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	42340000 	.word	0x42340000
 800c37c:	20000808 	.word	0x20000808
 800c380:	c022ec18 	.word	0xc022ec18
 800c384:	404fd1de 	.word	0x404fd1de

0800c388 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c388:	b084      	sub	sp, #16
 800c38a:	b5b0      	push	{r4, r5, r7, lr}
 800c38c:	ed2d 8b02 	vpush	{d8}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c39c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c3a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	f040 80ac 	bne.w	800c502 <turn135inL+0x17a>
		highspeed_mode = 1;
 800c3aa:	4bdb      	ldr	r3, [pc, #876]	; (800c718 <turn135inL+0x390>)
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c3c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c3c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3d4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c3d8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c3dc:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c71c <turn135inL+0x394>
 800c3e0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	eeb0 2a47 	vmov.f32	s4, s14
 800c3ea:	eef0 1a46 	vmov.f32	s3, s12
 800c3ee:	eeb0 1a66 	vmov.f32	s2, s13
 800c3f2:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c728 <turn135inL+0x3a0>
 800c3f6:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c720 <turn135inL+0x398>
 800c3fa:	f7f6 fe53 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c402:	2302      	movs	r3, #2
 800c404:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c406:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c40a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c40e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c412:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c416:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c41a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c41e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c422:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c426:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c42a:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c71c <turn135inL+0x394>
 800c42e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	eeb0 2a47 	vmov.f32	s4, s14
 800c438:	eef0 1a45 	vmov.f32	s3, s10
 800c43c:	eeb0 1a65 	vmov.f32	s2, s11
 800c440:	eef0 0a46 	vmov.f32	s1, s12
 800c444:	eeb0 0a66 	vmov.f32	s0, s13
 800c448:	f7f6 fe2c 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c44c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c450:	2b01      	cmp	r3, #1
 800c452:	d10c      	bne.n	800c46e <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c454:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c458:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c45c:	eeb0 1a47 	vmov.f32	s2, s14
 800c460:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c72c <turn135inL+0x3a4>
 800c464:	eeb0 0a67 	vmov.f32	s0, s15
 800c468:	f7f7 fd92 	bl	8003f90 <mollifier_slalom_table>
 800c46c:	e013      	b.n	800c496 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c46e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c472:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c476:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c47a:	eef0 2a66 	vmov.f32	s5, s13
 800c47e:	eeb0 2a47 	vmov.f32	s4, s14
 800c482:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c728 <turn135inL+0x3a0>
 800c486:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c728 <turn135inL+0x3a0>
 800c48a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c72c <turn135inL+0x3a4>
 800c48e:	eeb0 0a67 	vmov.f32	s0, s15
 800c492:	f7f7 fc2d 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c496:	2300      	movs	r3, #0
 800c498:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7f4 f879 	bl	8000598 <__aeabi_f2d>
 800c4a6:	a39a      	add	r3, pc, #616	; (adr r3, 800c710 <turn135inL+0x388>)
 800c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ac:	f7f3 ff16 	bl	80002dc <__adddf3>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	f7f4 fb9e 	bl	8000bf8 <__aeabi_d2f>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4c2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4d2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4d6:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c4da:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c71c <turn135inL+0x394>
 800c4de:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	eeb0 2a47 	vmov.f32	s4, s14
 800c4e8:	eef0 1a46 	vmov.f32	s3, s12
 800c4ec:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c728 <turn135inL+0x3a0>
 800c4f0:	eef0 0a66 	vmov.f32	s1, s13
 800c4f4:	ee00 3a10 	vmov	s0, r3
 800c4f8:	f7f6 fdd4 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c4fc:	4b86      	ldr	r3, [pc, #536]	; (800c718 <turn135inL+0x390>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c502:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c506:	2b00      	cmp	r3, #0
 800c508:	f040 809b 	bne.w	800c642 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c50c:	2300      	movs	r3, #0
 800c50e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c510:	2300      	movs	r3, #0
 800c512:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c514:	2302      	movs	r3, #2
 800c516:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c518:	2300      	movs	r3, #0
 800c51a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c51c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c520:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c524:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c528:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c52c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c530:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c534:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c538:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c53c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c540:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c71c <turn135inL+0x394>
 800c544:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	eeb0 2a47 	vmov.f32	s4, s14
 800c54e:	eef0 1a45 	vmov.f32	s3, s10
 800c552:	eeb0 1a65 	vmov.f32	s2, s11
 800c556:	eef0 0a46 	vmov.f32	s1, s12
 800c55a:	eeb0 0a66 	vmov.f32	s0, s13
 800c55e:	f7f6 fda1 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c562:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c566:	2b01      	cmp	r3, #1
 800c568:	d10c      	bne.n	800c584 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c56a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c56e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c572:	eeb0 1a47 	vmov.f32	s2, s14
 800c576:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c72c <turn135inL+0x3a4>
 800c57a:	eeb0 0a67 	vmov.f32	s0, s15
 800c57e:	f7f7 fd07 	bl	8003f90 <mollifier_slalom_table>
 800c582:	e013      	b.n	800c5ac <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c584:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c588:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c58c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c590:	eef0 2a66 	vmov.f32	s5, s13
 800c594:	eeb0 2a47 	vmov.f32	s4, s14
 800c598:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c728 <turn135inL+0x3a0>
 800c59c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c728 <turn135inL+0x3a0>
 800c5a0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c72c <turn135inL+0x3a4>
 800c5a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c5a8:	f7f7 fba2 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c5b4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c5b8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c5bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c5d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5d4:	eef0 7ae7 	vabs.f32	s15, s15
 800c5d8:	ee17 0a90 	vmov	r0, s15
 800c5dc:	f7f3 ffdc 	bl	8000598 <__aeabi_f2d>
 800c5e0:	f04f 0200 	mov.w	r2, #0
 800c5e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5e8:	f7f4 f958 	bl	800089c <__aeabi_ddiv>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	461d      	mov	r5, r3
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7f3 ffce 	bl	8000598 <__aeabi_f2d>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4620      	mov	r0, r4
 800c602:	4629      	mov	r1, r5
 800c604:	f7f4 f94a 	bl	800089c <__aeabi_ddiv>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4610      	mov	r0, r2
 800c60e:	4619      	mov	r1, r3
 800c610:	f04f 0200 	mov.w	r2, #0
 800c614:	4b43      	ldr	r3, [pc, #268]	; (800c724 <turn135inL+0x39c>)
 800c616:	f7f3 fe61 	bl	80002dc <__adddf3>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c61e:	4610      	mov	r0, r2
 800c620:	4619      	mov	r1, r3
 800c622:	f7f4 fae9 	bl	8000bf8 <__aeabi_d2f>
 800c626:	4603      	mov	r3, r0
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	ee02 3a10 	vmov	s4, r3
 800c62e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c632:	ed97 1a01 	vldr	s2, [r7, #4]
 800c636:	eef0 0a68 	vmov.f32	s1, s17
 800c63a:	eeb0 0a48 	vmov.f32	s0, s16
 800c63e:	f7f6 fd31 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800c642:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c646:	2b01      	cmp	r3, #1
 800c648:	f240 80ce 	bls.w	800c7e8 <turn135inL+0x460>

		highspeed_mode = 1;
 800c64c:	4b32      	ldr	r3, [pc, #200]	; (800c718 <turn135inL+0x390>)
 800c64e:	2201      	movs	r2, #1
 800c650:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c652:	2301      	movs	r3, #1
 800c654:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c656:	2300      	movs	r3, #0
 800c658:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c65e:	2300      	movs	r3, #0
 800c660:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c662:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c666:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c66a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c66e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c672:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c676:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c67a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c67e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c71c <turn135inL+0x394>
 800c682:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	eeb0 2a47 	vmov.f32	s4, s14
 800c68c:	eef0 1a46 	vmov.f32	s3, s12
 800c690:	eeb0 1a66 	vmov.f32	s2, s13
 800c694:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c728 <turn135inL+0x3a0>
 800c698:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c720 <turn135inL+0x398>
 800c69c:	f7f6 fd02 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6b0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c6b4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6c4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c6c8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6cc:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c71c <turn135inL+0x394>
 800c6d0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	eeb0 2a47 	vmov.f32	s4, s14
 800c6da:	eef0 1a45 	vmov.f32	s3, s10
 800c6de:	eeb0 1a65 	vmov.f32	s2, s11
 800c6e2:	eef0 0a46 	vmov.f32	s1, s12
 800c6e6:	eeb0 0a66 	vmov.f32	s0, s13
 800c6ea:	f7f6 fcdb 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c6ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d11c      	bne.n	800c730 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c6f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c6fe:	eeb0 1a47 	vmov.f32	s2, s14
 800c702:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c72c <turn135inL+0x3a4>
 800c706:	eeb0 0a67 	vmov.f32	s0, s15
 800c70a:	f7f7 fc41 	bl	8003f90 <mollifier_slalom_table>
 800c70e:	e023      	b.n	800c758 <turn135inL+0x3d0>
 800c710:	c022ec18 	.word	0xc022ec18
 800c714:	405fd1de 	.word	0x405fd1de
 800c718:	20000808 	.word	0x20000808
 800c71c:	42340000 	.word	0x42340000
 800c720:	42cd0000 	.word	0x42cd0000
 800c724:	408f4000 	.word	0x408f4000
 800c728:	00000000 	.word	0x00000000
 800c72c:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c730:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c734:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c738:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c73c:	eef0 2a66 	vmov.f32	s5, s13
 800c740:	eeb0 2a47 	vmov.f32	s4, s14
 800c744:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c728 <turn135inL+0x3a0>
 800c748:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c728 <turn135inL+0x3a0>
 800c74c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c72c <turn135inL+0x3a4>
 800c750:	eeb0 0a67 	vmov.f32	s0, s15
 800c754:	f7f7 facc 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c758:	2300      	movs	r3, #0
 800c75a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c760:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c764:	3b02      	subs	r3, #2
 800c766:	4618      	mov	r0, r3
 800c768:	f7f3 ff04 	bl	8000574 <__aeabi_i2d>
 800c76c:	a326      	add	r3, pc, #152	; (adr r3, 800c808 <turn135inL+0x480>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f7f3 ff69 	bl	8000648 <__aeabi_dmul>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4614      	mov	r4, r2
 800c77c:	461d      	mov	r5, r3
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	4618      	mov	r0, r3
 800c782:	f7f3 ff09 	bl	8000598 <__aeabi_f2d>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4620      	mov	r0, r4
 800c78c:	4629      	mov	r1, r5
 800c78e:	f7f3 fda5 	bl	80002dc <__adddf3>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4610      	mov	r0, r2
 800c798:	4619      	mov	r1, r3
 800c79a:	f7f4 fa2d 	bl	8000bf8 <__aeabi_d2f>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c7a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7a8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7b8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c7bc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7c0:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c800 <turn135inL+0x478>
 800c7c4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	eeb0 2a47 	vmov.f32	s4, s14
 800c7ce:	eef0 1a65 	vmov.f32	s3, s11
 800c7d2:	eeb0 1a46 	vmov.f32	s2, s12
 800c7d6:	eef0 0a66 	vmov.f32	s1, s13
 800c7da:	ee00 3a10 	vmov	s0, r3
 800c7de:	f7f6 fc61 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c7e2:	4b08      	ldr	r3, [pc, #32]	; (800c804 <turn135inL+0x47c>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	701a      	strb	r2, [r3, #0]
	}

}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	ecbd 8b02 	vpop	{d8}
 800c7f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c7f6:	b004      	add	sp, #16
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	f3af 8000 	nop.w
 800c800:	42340000 	.word	0x42340000
 800c804:	20000808 	.word	0x20000808
 800c808:	c022ec18 	.word	0xc022ec18
 800c80c:	404fd1de 	.word	0x404fd1de

0800c810 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c810:	b084      	sub	sp, #16
 800c812:	b5b0      	push	{r4, r5, r7, lr}
 800c814:	ed2d 8b02 	vpush	{d8}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c824:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c828:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	f040 80a5 	bne.w	800c97c <turn45outR+0x16c>
		highspeed_mode = 1;
 800c832:	4be9      	ldr	r3, [pc, #932]	; (800cbd8 <turn45outR+0x3c8>)
 800c834:	2201      	movs	r2, #1
 800c836:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c838:	2300      	movs	r3, #0
 800c83a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c840:	2300      	movs	r3, #0
 800c842:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c844:	2300      	movs	r3, #0
 800c846:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c848:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c84c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c850:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c854:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c85c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c860:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c864:	eddf 5add 	vldr	s11, [pc, #884]	; 800cbdc <turn45outR+0x3cc>
 800c868:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	eeb0 2a47 	vmov.f32	s4, s14
 800c872:	eef0 1a46 	vmov.f32	s3, s12
 800c876:	eeb0 1a66 	vmov.f32	s2, s13
 800c87a:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cbe0 <turn45outR+0x3d0>
 800c87e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cbe4 <turn45outR+0x3d4>
 800c882:	f7f6 fc0f 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c886:	2300      	movs	r3, #0
 800c888:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c88a:	2303      	movs	r3, #3
 800c88c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c88e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c892:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c896:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c89a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c89e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8aa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8ae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8b2:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cbdc <turn45outR+0x3cc>
 800c8b6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	eeb0 2a47 	vmov.f32	s4, s14
 800c8c0:	eef0 1a45 	vmov.f32	s3, s10
 800c8c4:	eeb0 1a65 	vmov.f32	s2, s11
 800c8c8:	eef0 0a46 	vmov.f32	s1, s12
 800c8cc:	eeb0 0a66 	vmov.f32	s0, s13
 800c8d0:	f7f6 fbe8 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c8d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d10c      	bne.n	800c8f6 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c8dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c8e4:	eeb0 1a47 	vmov.f32	s2, s14
 800c8e8:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cbe8 <turn45outR+0x3d8>
 800c8ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c8f0:	f7f7 fb4e 	bl	8003f90 <mollifier_slalom_table>
 800c8f4:	e015      	b.n	800c922 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c8f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c8fe:	eef1 7a67 	vneg.f32	s15, s15
 800c902:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c906:	eef0 2a66 	vmov.f32	s5, s13
 800c90a:	eeb0 2a67 	vmov.f32	s4, s15
 800c90e:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cbe0 <turn45outR+0x3d0>
 800c912:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cbe0 <turn45outR+0x3d0>
 800c916:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cbe8 <turn45outR+0x3d8>
 800c91a:	eeb0 0a47 	vmov.f32	s0, s14
 800c91e:	f7f7 f9e7 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c922:	2300      	movs	r3, #0
 800c924:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c926:	2300      	movs	r3, #0
 800c928:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c92a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c92e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cbec <turn45outR+0x3dc>
 800c932:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c936:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c93a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c93e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c942:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c94a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c94e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c952:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cbdc <turn45outR+0x3cc>
 800c956:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	eeb0 2a47 	vmov.f32	s4, s14
 800c960:	eef0 1a65 	vmov.f32	s3, s11
 800c964:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cbe0 <turn45outR+0x3d0>
 800c968:	eef0 0a46 	vmov.f32	s1, s12
 800c96c:	eeb0 0a66 	vmov.f32	s0, s13
 800c970:	f7f6 fb98 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c974:	4b98      	ldr	r3, [pc, #608]	; (800cbd8 <turn45outR+0x3c8>)
 800c976:	2200      	movs	r2, #0
 800c978:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c97a:	e123      	b.n	800cbc4 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c97c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c980:	2b01      	cmp	r3, #1
 800c982:	f240 8082 	bls.w	800ca8a <turn45outR+0x27a>
		highspeed_mode = 1;
 800c986:	4b94      	ldr	r3, [pc, #592]	; (800cbd8 <turn45outR+0x3c8>)
 800c988:	2201      	movs	r2, #1
 800c98a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c990:	2300      	movs	r3, #0
 800c992:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c994:	2303      	movs	r3, #3
 800c996:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c998:	2300      	movs	r3, #0
 800c99a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c99c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9a4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9a8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9b8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9bc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9c0:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cbdc <turn45outR+0x3cc>
 800c9c4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	eeb0 2a47 	vmov.f32	s4, s14
 800c9ce:	eef0 1a45 	vmov.f32	s3, s10
 800c9d2:	eeb0 1a65 	vmov.f32	s2, s11
 800c9d6:	eef0 0a46 	vmov.f32	s1, s12
 800c9da:	eeb0 0a66 	vmov.f32	s0, s13
 800c9de:	f7f6 fb61 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c9e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d10c      	bne.n	800ca04 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c9ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9f2:	eeb0 1a47 	vmov.f32	s2, s14
 800c9f6:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cbe8 <turn45outR+0x3d8>
 800c9fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c9fe:	f7f7 fac7 	bl	8003f90 <mollifier_slalom_table>
 800ca02:	e015      	b.n	800ca30 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ca04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca08:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ca0c:	eef1 7a67 	vneg.f32	s15, s15
 800ca10:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca14:	eef0 2a66 	vmov.f32	s5, s13
 800ca18:	eeb0 2a67 	vmov.f32	s4, s15
 800ca1c:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cbe0 <turn45outR+0x3d0>
 800ca20:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cbe0 <turn45outR+0x3d0>
 800ca24:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cbe8 <turn45outR+0x3d8>
 800ca28:	eeb0 0a47 	vmov.f32	s0, s14
 800ca2c:	f7f7 f960 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca3c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cbec <turn45outR+0x3dc>
 800ca40:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca44:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca48:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca58:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca5c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca60:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cbdc <turn45outR+0x3cc>
 800ca64:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	eeb0 2a47 	vmov.f32	s4, s14
 800ca6e:	eef0 1a65 	vmov.f32	s3, s11
 800ca72:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cbe0 <turn45outR+0x3d0>
 800ca76:	eef0 0a46 	vmov.f32	s1, s12
 800ca7a:	eeb0 0a66 	vmov.f32	s0, s13
 800ca7e:	f7f6 fb11 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ca82:	4b55      	ldr	r3, [pc, #340]	; (800cbd8 <turn45outR+0x3c8>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	701a      	strb	r2, [r3, #0]
}
 800ca88:	e09c      	b.n	800cbc4 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ca92:	2303      	movs	r3, #3
 800ca94:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca9a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ca9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800caa2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800caa6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800caaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cab6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800caba:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cabe:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cbdc <turn45outR+0x3cc>
 800cac2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	eeb0 2a47 	vmov.f32	s4, s14
 800cacc:	eef0 1a45 	vmov.f32	s3, s10
 800cad0:	eeb0 1a65 	vmov.f32	s2, s11
 800cad4:	eef0 0a46 	vmov.f32	s1, s12
 800cad8:	eeb0 0a66 	vmov.f32	s0, s13
 800cadc:	f7f6 fae2 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cae0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d10c      	bne.n	800cb02 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800cae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800caf0:	eeb0 1a47 	vmov.f32	s2, s14
 800caf4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cbe8 <turn45outR+0x3d8>
 800caf8:	eeb0 0a67 	vmov.f32	s0, s15
 800cafc:	f7f7 fa48 	bl	8003f90 <mollifier_slalom_table>
 800cb00:	e015      	b.n	800cb2e <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cb02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cb0a:	eef1 7a67 	vneg.f32	s15, s15
 800cb0e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb12:	eef0 2a66 	vmov.f32	s5, s13
 800cb16:	eeb0 2a67 	vmov.f32	s4, s15
 800cb1a:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cbe0 <turn45outR+0x3d0>
 800cb1e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cbe0 <turn45outR+0x3d0>
 800cb22:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cbe8 <turn45outR+0x3d8>
 800cb26:	eeb0 0a47 	vmov.f32	s0, s14
 800cb2a:	f7f7 f8e1 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb36:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb3a:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb4a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb56:	eef0 7ae7 	vabs.f32	s15, s15
 800cb5a:	ee17 0a90 	vmov	r0, s15
 800cb5e:	f7f3 fd1b 	bl	8000598 <__aeabi_f2d>
 800cb62:	f04f 0200 	mov.w	r2, #0
 800cb66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb6a:	f7f3 fe97 	bl	800089c <__aeabi_ddiv>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4614      	mov	r4, r2
 800cb74:	461d      	mov	r5, r3
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7f3 fd0d 	bl	8000598 <__aeabi_f2d>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	4620      	mov	r0, r4
 800cb84:	4629      	mov	r1, r5
 800cb86:	f7f3 fe89 	bl	800089c <__aeabi_ddiv>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4610      	mov	r0, r2
 800cb90:	4619      	mov	r1, r3
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	4b16      	ldr	r3, [pc, #88]	; (800cbf0 <turn45outR+0x3e0>)
 800cb98:	f7f3 fba0 	bl	80002dc <__adddf3>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cba0:	4610      	mov	r0, r2
 800cba2:	4619      	mov	r1, r3
 800cba4:	f7f4 f828 	bl	8000bf8 <__aeabi_d2f>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	ee02 3a10 	vmov	s4, r3
 800cbb0:	edd7 1a01 	vldr	s3, [r7, #4]
 800cbb4:	ed97 1a01 	vldr	s2, [r7, #4]
 800cbb8:	eef0 0a68 	vmov.f32	s1, s17
 800cbbc:	eeb0 0a48 	vmov.f32	s0, s16
 800cbc0:	f7f6 fa70 	bl	80030a4 <straight_table2>
}
 800cbc4:	bf00      	nop
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	ecbd 8b02 	vpop	{d8}
 800cbce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cbd2:	b004      	add	sp, #16
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	20000808 	.word	0x20000808
 800cbdc:	42340000 	.word	0x42340000
 800cbe0:	00000000 	.word	0x00000000
 800cbe4:	42c4477b 	.word	0x42c4477b
 800cbe8:	c2340000 	.word	0xc2340000
 800cbec:	42b40000 	.word	0x42b40000
 800cbf0:	408f4000 	.word	0x408f4000

0800cbf4 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	b5b0      	push	{r4, r5, r7, lr}
 800cbf8:	ed2d 8b02 	vpush	{d8}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc08:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	f040 80a3 	bne.w	800cd5c <turn45outL+0x168>
			highspeed_mode = 1;
 800cc16:	4be5      	ldr	r3, [pc, #916]	; (800cfac <turn45outL+0x3b8>)
 800cc18:	2201      	movs	r2, #1
 800cc1a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc2c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc30:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc40:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc44:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc48:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cfb0 <turn45outL+0x3bc>
 800cc4c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	eeb0 2a47 	vmov.f32	s4, s14
 800cc56:	eef0 1a46 	vmov.f32	s3, s12
 800cc5a:	eeb0 1a66 	vmov.f32	s2, s13
 800cc5e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cfb4 <turn45outL+0x3c0>
 800cc62:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cfb8 <turn45outL+0x3c4>
 800cc66:	f7f6 fa1d 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800cc6e:	2304      	movs	r3, #4
 800cc70:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc72:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc76:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc7a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc7e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc8e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cc92:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc96:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cfb0 <turn45outL+0x3bc>
 800cc9a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	eeb0 2a47 	vmov.f32	s4, s14
 800cca4:	eef0 1a45 	vmov.f32	s3, s10
 800cca8:	eeb0 1a65 	vmov.f32	s2, s11
 800ccac:	eef0 0a46 	vmov.f32	s1, s12
 800ccb0:	eeb0 0a66 	vmov.f32	s0, s13
 800ccb4:	f7f6 f9f6 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800ccb8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d10c      	bne.n	800ccda <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ccc0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccc4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccc8:	eeb0 1a47 	vmov.f32	s2, s14
 800cccc:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cfb0 <turn45outL+0x3bc>
 800ccd0:	eeb0 0a67 	vmov.f32	s0, s15
 800ccd4:	f7f7 f95c 	bl	8003f90 <mollifier_slalom_table>
 800ccd8:	e013      	b.n	800cd02 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ccda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccde:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cce2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cce6:	eef0 2a66 	vmov.f32	s5, s13
 800ccea:	eeb0 2a47 	vmov.f32	s4, s14
 800ccee:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cfb4 <turn45outL+0x3c0>
 800ccf2:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cfb4 <turn45outL+0x3c0>
 800ccf6:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cfb0 <turn45outL+0x3bc>
 800ccfa:	eeb0 0a67 	vmov.f32	s0, s15
 800ccfe:	f7f6 fff7 	bl	8003cf0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd0e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cfbc <turn45outL+0x3c8>
 800cd12:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd16:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd1a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd2a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd2e:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd32:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cfb0 <turn45outL+0x3bc>
 800cd36:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	eeb0 2a47 	vmov.f32	s4, s14
 800cd40:	eef0 1a65 	vmov.f32	s3, s11
 800cd44:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cfb4 <turn45outL+0x3c0>
 800cd48:	eef0 0a46 	vmov.f32	s1, s12
 800cd4c:	eeb0 0a66 	vmov.f32	s0, s13
 800cd50:	f7f6 f9a8 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800cd54:	4b95      	ldr	r3, [pc, #596]	; (800cfac <turn45outL+0x3b8>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cd5a:	e11e      	b.n	800cf9a <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800cd5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d97f      	bls.n	800ce64 <turn45outL+0x270>
		highspeed_mode = 1;
 800cd64:	4b91      	ldr	r3, [pc, #580]	; (800cfac <turn45outL+0x3b8>)
 800cd66:	2201      	movs	r2, #1
 800cd68:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cd72:	2304      	movs	r3, #4
 800cd74:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd7a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd7e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd82:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd86:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd96:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd9a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd9e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cfb0 <turn45outL+0x3bc>
 800cda2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	eeb0 2a47 	vmov.f32	s4, s14
 800cdac:	eef0 1a45 	vmov.f32	s3, s10
 800cdb0:	eeb0 1a65 	vmov.f32	s2, s11
 800cdb4:	eef0 0a46 	vmov.f32	s1, s12
 800cdb8:	eeb0 0a66 	vmov.f32	s0, s13
 800cdbc:	f7f6 f972 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cdc0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d10c      	bne.n	800cde2 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cdc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdcc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cdd0:	eeb0 1a47 	vmov.f32	s2, s14
 800cdd4:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cfb0 <turn45outL+0x3bc>
 800cdd8:	eeb0 0a67 	vmov.f32	s0, s15
 800cddc:	f7f7 f8d8 	bl	8003f90 <mollifier_slalom_table>
 800cde0:	e013      	b.n	800ce0a <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cde2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cde6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cdea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cdee:	eef0 2a66 	vmov.f32	s5, s13
 800cdf2:	eeb0 2a47 	vmov.f32	s4, s14
 800cdf6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cfb4 <turn45outL+0x3c0>
 800cdfa:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cfb4 <turn45outL+0x3c0>
 800cdfe:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cfb0 <turn45outL+0x3bc>
 800ce02:	eeb0 0a67 	vmov.f32	s0, s15
 800ce06:	f7f6 ff73 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce16:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cfbc <turn45outL+0x3c8>
 800ce1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce22:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce32:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce36:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce3a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cfb0 <turn45outL+0x3bc>
 800ce3e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	eeb0 2a47 	vmov.f32	s4, s14
 800ce48:	eef0 1a65 	vmov.f32	s3, s11
 800ce4c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cfb4 <turn45outL+0x3c0>
 800ce50:	eef0 0a46 	vmov.f32	s1, s12
 800ce54:	eeb0 0a66 	vmov.f32	s0, s13
 800ce58:	f7f6 f924 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ce5c:	4b53      	ldr	r3, [pc, #332]	; (800cfac <turn45outL+0x3b8>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
}
 800ce62:	e09a      	b.n	800cf9a <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800ce64:	2300      	movs	r3, #0
 800ce66:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800ce6c:	2304      	movs	r3, #4
 800ce6e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce74:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ce78:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce7c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ce80:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce90:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ce94:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce98:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cfb0 <turn45outL+0x3bc>
 800ce9c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	eeb0 2a47 	vmov.f32	s4, s14
 800cea6:	eef0 1a45 	vmov.f32	s3, s10
 800ceaa:	eeb0 1a65 	vmov.f32	s2, s11
 800ceae:	eef0 0a46 	vmov.f32	s1, s12
 800ceb2:	eeb0 0a66 	vmov.f32	s0, s13
 800ceb6:	f7f6 f8f5 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ceba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d10c      	bne.n	800cedc <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cec2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cec6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ceca:	eeb0 1a47 	vmov.f32	s2, s14
 800cece:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cfb0 <turn45outL+0x3bc>
 800ced2:	eeb0 0a67 	vmov.f32	s0, s15
 800ced6:	f7f7 f85b 	bl	8003f90 <mollifier_slalom_table>
 800ceda:	e013      	b.n	800cf04 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cedc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cee0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cee4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cee8:	eef0 2a66 	vmov.f32	s5, s13
 800ceec:	eeb0 2a47 	vmov.f32	s4, s14
 800cef0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cfb4 <turn45outL+0x3c0>
 800cef4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cfb4 <turn45outL+0x3c0>
 800cef8:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cfb0 <turn45outL+0x3bc>
 800cefc:	eeb0 0a67 	vmov.f32	s0, s15
 800cf00:	f7f6 fef6 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf04:	2301      	movs	r3, #1
 800cf06:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf0c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf10:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf20:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf2c:	eef0 7ae7 	vabs.f32	s15, s15
 800cf30:	ee17 0a90 	vmov	r0, s15
 800cf34:	f7f3 fb30 	bl	8000598 <__aeabi_f2d>
 800cf38:	f04f 0200 	mov.w	r2, #0
 800cf3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf40:	f7f3 fcac 	bl	800089c <__aeabi_ddiv>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4614      	mov	r4, r2
 800cf4a:	461d      	mov	r5, r3
 800cf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7f3 fb22 	bl	8000598 <__aeabi_f2d>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4620      	mov	r0, r4
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	f7f3 fc9e 	bl	800089c <__aeabi_ddiv>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	4610      	mov	r0, r2
 800cf66:	4619      	mov	r1, r3
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	4b14      	ldr	r3, [pc, #80]	; (800cfc0 <turn45outL+0x3cc>)
 800cf6e:	f7f3 f9b5 	bl	80002dc <__adddf3>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf76:	4610      	mov	r0, r2
 800cf78:	4619      	mov	r1, r3
 800cf7a:	f7f3 fe3d 	bl	8000bf8 <__aeabi_d2f>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	ee02 3a10 	vmov	s4, r3
 800cf86:	edd7 1a01 	vldr	s3, [r7, #4]
 800cf8a:	ed97 1a01 	vldr	s2, [r7, #4]
 800cf8e:	eef0 0a68 	vmov.f32	s1, s17
 800cf92:	eeb0 0a48 	vmov.f32	s0, s16
 800cf96:	f7f6 f885 	bl	80030a4 <straight_table2>
}
 800cf9a:	bf00      	nop
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	ecbd 8b02 	vpop	{d8}
 800cfa4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cfa8:	b004      	add	sp, #16
 800cfaa:	4770      	bx	lr
 800cfac:	20000808 	.word	0x20000808
 800cfb0:	42340000 	.word	0x42340000
 800cfb4:	00000000 	.word	0x00000000
 800cfb8:	42c4477b 	.word	0x42c4477b
 800cfbc:	42b40000 	.word	0x42b40000
 800cfc0:	408f4000 	.word	0x408f4000

0800cfc4 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cfc4:	b084      	sub	sp, #16
 800cfc6:	b5b0      	push	{r4, r5, r7, lr}
 800cfc8:	ed2d 8b02 	vpush	{d8}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cfd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cfd8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cfdc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	f040 80a5 	bne.w	800d130 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cfe6:	4be9      	ldr	r3, [pc, #932]	; (800d38c <turn135outR+0x3c8>)
 800cfe8:	2201      	movs	r2, #1
 800cfea:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cff0:	2300      	movs	r3, #0
 800cff2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cff4:	2300      	movs	r3, #0
 800cff6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cffc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d000:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d004:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d008:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d00c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d010:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d014:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d018:	eddf 5add 	vldr	s11, [pc, #884]	; 800d390 <turn135outR+0x3cc>
 800d01c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	eeb0 2a47 	vmov.f32	s4, s14
 800d026:	eef0 1a46 	vmov.f32	s3, s12
 800d02a:	eeb0 1a66 	vmov.f32	s2, s13
 800d02e:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800d394 <turn135outR+0x3d0>
 800d032:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d398 <turn135outR+0x3d4>
 800d036:	f7f6 f835 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d03e:	2303      	movs	r3, #3
 800d040:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d042:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d046:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d04a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d04e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d052:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d056:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d05a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d05e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d062:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d066:	eddf 4aca 	vldr	s9, [pc, #808]	; 800d390 <turn135outR+0x3cc>
 800d06a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	eeb0 2a47 	vmov.f32	s4, s14
 800d074:	eef0 1a45 	vmov.f32	s3, s10
 800d078:	eeb0 1a65 	vmov.f32	s2, s11
 800d07c:	eef0 0a46 	vmov.f32	s1, s12
 800d080:	eeb0 0a66 	vmov.f32	s0, s13
 800d084:	f7f6 f80e 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800d088:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d10c      	bne.n	800d0aa <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d090:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d094:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d098:	eeb0 1a47 	vmov.f32	s2, s14
 800d09c:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d39c <turn135outR+0x3d8>
 800d0a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d0a4:	f7f6 ff74 	bl	8003f90 <mollifier_slalom_table>
 800d0a8:	e015      	b.n	800d0d6 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d0aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d0b2:	eef1 7a67 	vneg.f32	s15, s15
 800d0b6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d0ba:	eef0 2a66 	vmov.f32	s5, s13
 800d0be:	eeb0 2a67 	vmov.f32	s4, s15
 800d0c2:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800d394 <turn135outR+0x3d0>
 800d0c6:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800d394 <turn135outR+0x3d0>
 800d0ca:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d39c <turn135outR+0x3d8>
 800d0ce:	eeb0 0a47 	vmov.f32	s0, s14
 800d0d2:	f7f6 fe0d 	bl	8003cf0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d0de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d0e2:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d3a0 <turn135outR+0x3dc>
 800d0e6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d0ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d0ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0fe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d102:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d106:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800d390 <turn135outR+0x3cc>
 800d10a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	eeb0 2a47 	vmov.f32	s4, s14
 800d114:	eef0 1a65 	vmov.f32	s3, s11
 800d118:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800d394 <turn135outR+0x3d0>
 800d11c:	eef0 0a46 	vmov.f32	s1, s12
 800d120:	eeb0 0a66 	vmov.f32	s0, s13
 800d124:	f7f5 ffbe 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800d128:	4b98      	ldr	r3, [pc, #608]	; (800d38c <turn135outR+0x3c8>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d12e:	e123      	b.n	800d378 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800d130:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d134:	2b01      	cmp	r3, #1
 800d136:	f240 8082 	bls.w	800d23e <turn135outR+0x27a>
		highspeed_mode = 1;
 800d13a:	4b94      	ldr	r3, [pc, #592]	; (800d38c <turn135outR+0x3c8>)
 800d13c:	2201      	movs	r2, #1
 800d13e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d140:	2300      	movs	r3, #0
 800d142:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d144:	2300      	movs	r3, #0
 800d146:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d148:	2303      	movs	r3, #3
 800d14a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d150:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d154:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d158:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d15c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d160:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d164:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d16c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d170:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d174:	eddf 4a86 	vldr	s9, [pc, #536]	; 800d390 <turn135outR+0x3cc>
 800d178:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	eeb0 2a47 	vmov.f32	s4, s14
 800d182:	eef0 1a45 	vmov.f32	s3, s10
 800d186:	eeb0 1a65 	vmov.f32	s2, s11
 800d18a:	eef0 0a46 	vmov.f32	s1, s12
 800d18e:	eeb0 0a66 	vmov.f32	s0, s13
 800d192:	f7f5 ff87 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d196:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d10c      	bne.n	800d1b8 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d19e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1a6:	eeb0 1a47 	vmov.f32	s2, s14
 800d1aa:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d39c <turn135outR+0x3d8>
 800d1ae:	eeb0 0a67 	vmov.f32	s0, s15
 800d1b2:	f7f6 feed 	bl	8003f90 <mollifier_slalom_table>
 800d1b6:	e015      	b.n	800d1e4 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d1b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d1c0:	eef1 7a67 	vneg.f32	s15, s15
 800d1c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d1c8:	eef0 2a66 	vmov.f32	s5, s13
 800d1cc:	eeb0 2a67 	vmov.f32	s4, s15
 800d1d0:	eddf 1a70 	vldr	s3, [pc, #448]	; 800d394 <turn135outR+0x3d0>
 800d1d4:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d394 <turn135outR+0x3d0>
 800d1d8:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d39c <turn135outR+0x3d8>
 800d1dc:	eeb0 0a47 	vmov.f32	s0, s14
 800d1e0:	f7f6 fd86 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d1ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d1f0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d3a0 <turn135outR+0x3dc>
 800d1f4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d1f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1fc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d200:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d204:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d20c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d210:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d214:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800d390 <turn135outR+0x3cc>
 800d218:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	eeb0 2a47 	vmov.f32	s4, s14
 800d222:	eef0 1a65 	vmov.f32	s3, s11
 800d226:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800d394 <turn135outR+0x3d0>
 800d22a:	eef0 0a46 	vmov.f32	s1, s12
 800d22e:	eeb0 0a66 	vmov.f32	s0, s13
 800d232:	f7f5 ff37 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d236:	4b55      	ldr	r3, [pc, #340]	; (800d38c <turn135outR+0x3c8>)
 800d238:	2200      	movs	r2, #0
 800d23a:	701a      	strb	r2, [r3, #0]
}
 800d23c:	e09c      	b.n	800d378 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d23e:	2300      	movs	r3, #0
 800d240:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d242:	2300      	movs	r3, #0
 800d244:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d246:	2303      	movs	r3, #3
 800d248:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d24e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d252:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d256:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d25a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d25e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d262:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d26a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d26e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d272:	eddf 4a47 	vldr	s9, [pc, #284]	; 800d390 <turn135outR+0x3cc>
 800d276:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d27a:	68f8      	ldr	r0, [r7, #12]
 800d27c:	eeb0 2a47 	vmov.f32	s4, s14
 800d280:	eef0 1a45 	vmov.f32	s3, s10
 800d284:	eeb0 1a65 	vmov.f32	s2, s11
 800d288:	eef0 0a46 	vmov.f32	s1, s12
 800d28c:	eeb0 0a66 	vmov.f32	s0, s13
 800d290:	f7f5 ff08 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d294:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d10c      	bne.n	800d2b6 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d29c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2a4:	eeb0 1a47 	vmov.f32	s2, s14
 800d2a8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d39c <turn135outR+0x3d8>
 800d2ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d2b0:	f7f6 fe6e 	bl	8003f90 <mollifier_slalom_table>
 800d2b4:	e015      	b.n	800d2e2 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d2b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d2be:	eef1 7a67 	vneg.f32	s15, s15
 800d2c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d2c6:	eef0 2a66 	vmov.f32	s5, s13
 800d2ca:	eeb0 2a67 	vmov.f32	s4, s15
 800d2ce:	eddf 1a31 	vldr	s3, [pc, #196]	; 800d394 <turn135outR+0x3d0>
 800d2d2:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d394 <turn135outR+0x3d0>
 800d2d6:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d39c <turn135outR+0x3d8>
 800d2da:	eeb0 0a47 	vmov.f32	s0, s14
 800d2de:	f7f6 fd07 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d2ea:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d2ee:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d2f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2fe:	edd7 7a01 	vldr	s15, [r7, #4]
 800d302:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d30a:	eef0 7ae7 	vabs.f32	s15, s15
 800d30e:	ee17 0a90 	vmov	r0, s15
 800d312:	f7f3 f941 	bl	8000598 <__aeabi_f2d>
 800d316:	f04f 0200 	mov.w	r2, #0
 800d31a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d31e:	f7f3 fabd 	bl	800089c <__aeabi_ddiv>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4614      	mov	r4, r2
 800d328:	461d      	mov	r5, r3
 800d32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7f3 f933 	bl	8000598 <__aeabi_f2d>
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	4620      	mov	r0, r4
 800d338:	4629      	mov	r1, r5
 800d33a:	f7f3 faaf 	bl	800089c <__aeabi_ddiv>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4610      	mov	r0, r2
 800d344:	4619      	mov	r1, r3
 800d346:	f04f 0200 	mov.w	r2, #0
 800d34a:	4b16      	ldr	r3, [pc, #88]	; (800d3a4 <turn135outR+0x3e0>)
 800d34c:	f7f2 ffc6 	bl	80002dc <__adddf3>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d354:	4610      	mov	r0, r2
 800d356:	4619      	mov	r1, r3
 800d358:	f7f3 fc4e 	bl	8000bf8 <__aeabi_d2f>
 800d35c:	4603      	mov	r3, r0
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	ee02 3a10 	vmov	s4, r3
 800d364:	edd7 1a01 	vldr	s3, [r7, #4]
 800d368:	ed97 1a01 	vldr	s2, [r7, #4]
 800d36c:	eef0 0a68 	vmov.f32	s1, s17
 800d370:	eeb0 0a48 	vmov.f32	s0, s16
 800d374:	f7f5 fe96 	bl	80030a4 <straight_table2>
}
 800d378:	bf00      	nop
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	ecbd 8b02 	vpop	{d8}
 800d382:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d386:	b004      	add	sp, #16
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	20000808 	.word	0x20000808
 800d390:	42340000 	.word	0x42340000
 800d394:	00000000 	.word	0x00000000
 800d398:	42c4477b 	.word	0x42c4477b
 800d39c:	c3070000 	.word	0xc3070000
 800d3a0:	42b40000 	.word	0x42b40000
 800d3a4:	408f4000 	.word	0x408f4000

0800d3a8 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d3a8:	b084      	sub	sp, #16
 800d3aa:	b5b0      	push	{r4, r5, r7, lr}
 800d3ac:	ed2d 8b02 	vpush	{d8}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d3b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3bc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d3c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	f040 80a3 	bne.w	800d510 <turn135outL+0x168>
		highspeed_mode = 1;
 800d3ca:	4be5      	ldr	r3, [pc, #916]	; (800d760 <turn135outL+0x3b8>)
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d3e0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d3e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3f4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d3f8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d3fc:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d764 <turn135outL+0x3bc>
 800d400:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	eeb0 2a47 	vmov.f32	s4, s14
 800d40a:	eef0 1a46 	vmov.f32	s3, s12
 800d40e:	eeb0 1a66 	vmov.f32	s2, s13
 800d412:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d768 <turn135outL+0x3c0>
 800d416:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d76c <turn135outL+0x3c4>
 800d41a:	f7f5 fe43 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800d41e:	2300      	movs	r3, #0
 800d420:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d422:	2304      	movs	r3, #4
 800d424:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d426:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d42a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d42e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d432:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d436:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d43a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d43e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d442:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d446:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d44a:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d764 <turn135outL+0x3bc>
 800d44e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	eeb0 2a47 	vmov.f32	s4, s14
 800d458:	eef0 1a45 	vmov.f32	s3, s10
 800d45c:	eeb0 1a65 	vmov.f32	s2, s11
 800d460:	eef0 0a46 	vmov.f32	s1, s12
 800d464:	eeb0 0a66 	vmov.f32	s0, s13
 800d468:	f7f5 fe1c 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d46c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d470:	2b01      	cmp	r3, #1
 800d472:	d10c      	bne.n	800d48e <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d474:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d478:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d47c:	eeb0 1a47 	vmov.f32	s2, s14
 800d480:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d770 <turn135outL+0x3c8>
 800d484:	eeb0 0a67 	vmov.f32	s0, s15
 800d488:	f7f6 fd82 	bl	8003f90 <mollifier_slalom_table>
 800d48c:	e013      	b.n	800d4b6 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d48e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d492:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d496:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d49a:	eef0 2a66 	vmov.f32	s5, s13
 800d49e:	eeb0 2a47 	vmov.f32	s4, s14
 800d4a2:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d768 <turn135outL+0x3c0>
 800d4a6:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d768 <turn135outL+0x3c0>
 800d4aa:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d770 <turn135outL+0x3c8>
 800d4ae:	eeb0 0a67 	vmov.f32	s0, s15
 800d4b2:	f7f6 fc1d 	bl	8003cf0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d4c2:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d774 <turn135outL+0x3cc>
 800d4c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d4ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d4ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4de:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d4e2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4e6:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d764 <turn135outL+0x3bc>
 800d4ea:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	eeb0 2a47 	vmov.f32	s4, s14
 800d4f4:	eef0 1a65 	vmov.f32	s3, s11
 800d4f8:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d768 <turn135outL+0x3c0>
 800d4fc:	eef0 0a46 	vmov.f32	s1, s12
 800d500:	eeb0 0a66 	vmov.f32	s0, s13
 800d504:	f7f5 fdce 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d508:	4b95      	ldr	r3, [pc, #596]	; (800d760 <turn135outL+0x3b8>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d50e:	e11e      	b.n	800d74e <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d510:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d514:	2b01      	cmp	r3, #1
 800d516:	d97f      	bls.n	800d618 <turn135outL+0x270>
		highspeed_mode = 1;
 800d518:	4b91      	ldr	r3, [pc, #580]	; (800d760 <turn135outL+0x3b8>)
 800d51a:	2201      	movs	r2, #1
 800d51c:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d51e:	2300      	movs	r3, #0
 800d520:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d522:	2300      	movs	r3, #0
 800d524:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d526:	2304      	movs	r3, #4
 800d528:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d52e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d532:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d536:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d53a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d53e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d542:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d54a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d54e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d552:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d764 <turn135outL+0x3bc>
 800d556:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	eeb0 2a47 	vmov.f32	s4, s14
 800d560:	eef0 1a45 	vmov.f32	s3, s10
 800d564:	eeb0 1a65 	vmov.f32	s2, s11
 800d568:	eef0 0a46 	vmov.f32	s1, s12
 800d56c:	eeb0 0a66 	vmov.f32	s0, s13
 800d570:	f7f5 fd98 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d574:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d10c      	bne.n	800d596 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d57c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d580:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d584:	eeb0 1a47 	vmov.f32	s2, s14
 800d588:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d770 <turn135outL+0x3c8>
 800d58c:	eeb0 0a67 	vmov.f32	s0, s15
 800d590:	f7f6 fcfe 	bl	8003f90 <mollifier_slalom_table>
 800d594:	e013      	b.n	800d5be <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d596:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d59a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d59e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d5a2:	eef0 2a66 	vmov.f32	s5, s13
 800d5a6:	eeb0 2a47 	vmov.f32	s4, s14
 800d5aa:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d768 <turn135outL+0x3c0>
 800d5ae:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d768 <turn135outL+0x3c0>
 800d5b2:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d770 <turn135outL+0x3c8>
 800d5b6:	eeb0 0a67 	vmov.f32	s0, s15
 800d5ba:	f7f6 fb99 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d5ca:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d774 <turn135outL+0x3cc>
 800d5ce:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d5d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d5d6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5e6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d5ea:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5ee:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d764 <turn135outL+0x3bc>
 800d5f2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	eeb0 2a47 	vmov.f32	s4, s14
 800d5fc:	eef0 1a65 	vmov.f32	s3, s11
 800d600:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d768 <turn135outL+0x3c0>
 800d604:	eef0 0a46 	vmov.f32	s1, s12
 800d608:	eeb0 0a66 	vmov.f32	s0, s13
 800d60c:	f7f5 fd4a 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d610:	4b53      	ldr	r3, [pc, #332]	; (800d760 <turn135outL+0x3b8>)
 800d612:	2200      	movs	r2, #0
 800d614:	701a      	strb	r2, [r3, #0]
}
 800d616:	e09a      	b.n	800d74e <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d618:	2300      	movs	r3, #0
 800d61a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d620:	2304      	movs	r3, #4
 800d622:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d624:	2300      	movs	r3, #0
 800d626:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d628:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d62c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d630:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d634:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d638:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d63c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d640:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d644:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d648:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d64c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d764 <turn135outL+0x3bc>
 800d650:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	eeb0 2a47 	vmov.f32	s4, s14
 800d65a:	eef0 1a45 	vmov.f32	s3, s10
 800d65e:	eeb0 1a65 	vmov.f32	s2, s11
 800d662:	eef0 0a46 	vmov.f32	s1, s12
 800d666:	eeb0 0a66 	vmov.f32	s0, s13
 800d66a:	f7f5 fd1b 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d66e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d672:	2b01      	cmp	r3, #1
 800d674:	d10c      	bne.n	800d690 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d676:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d67a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d67e:	eeb0 1a47 	vmov.f32	s2, s14
 800d682:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d770 <turn135outL+0x3c8>
 800d686:	eeb0 0a67 	vmov.f32	s0, s15
 800d68a:	f7f6 fc81 	bl	8003f90 <mollifier_slalom_table>
 800d68e:	e013      	b.n	800d6b8 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d690:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d694:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d698:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d69c:	eef0 2a66 	vmov.f32	s5, s13
 800d6a0:	eeb0 2a47 	vmov.f32	s4, s14
 800d6a4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d768 <turn135outL+0x3c0>
 800d6a8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d768 <turn135outL+0x3c0>
 800d6ac:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d770 <turn135outL+0x3c8>
 800d6b0:	eeb0 0a67 	vmov.f32	s0, s15
 800d6b4:	f7f6 fb1c 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d6c0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d6c4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d6c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d6d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d6dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6e0:	eef0 7ae7 	vabs.f32	s15, s15
 800d6e4:	ee17 0a90 	vmov	r0, s15
 800d6e8:	f7f2 ff56 	bl	8000598 <__aeabi_f2d>
 800d6ec:	f04f 0200 	mov.w	r2, #0
 800d6f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6f4:	f7f3 f8d2 	bl	800089c <__aeabi_ddiv>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	4614      	mov	r4, r2
 800d6fe:	461d      	mov	r5, r3
 800d700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d702:	4618      	mov	r0, r3
 800d704:	f7f2 ff48 	bl	8000598 <__aeabi_f2d>
 800d708:	4602      	mov	r2, r0
 800d70a:	460b      	mov	r3, r1
 800d70c:	4620      	mov	r0, r4
 800d70e:	4629      	mov	r1, r5
 800d710:	f7f3 f8c4 	bl	800089c <__aeabi_ddiv>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	4610      	mov	r0, r2
 800d71a:	4619      	mov	r1, r3
 800d71c:	f04f 0200 	mov.w	r2, #0
 800d720:	4b15      	ldr	r3, [pc, #84]	; (800d778 <turn135outL+0x3d0>)
 800d722:	f7f2 fddb 	bl	80002dc <__adddf3>
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d72a:	4610      	mov	r0, r2
 800d72c:	4619      	mov	r1, r3
 800d72e:	f7f3 fa63 	bl	8000bf8 <__aeabi_d2f>
 800d732:	4603      	mov	r3, r0
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	ee02 3a10 	vmov	s4, r3
 800d73a:	edd7 1a01 	vldr	s3, [r7, #4]
 800d73e:	ed97 1a01 	vldr	s2, [r7, #4]
 800d742:	eef0 0a68 	vmov.f32	s1, s17
 800d746:	eeb0 0a48 	vmov.f32	s0, s16
 800d74a:	f7f5 fcab 	bl	80030a4 <straight_table2>
}
 800d74e:	bf00      	nop
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	ecbd 8b02 	vpop	{d8}
 800d758:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d75c:	b004      	add	sp, #16
 800d75e:	4770      	bx	lr
 800d760:	20000808 	.word	0x20000808
 800d764:	42340000 	.word	0x42340000
 800d768:	00000000 	.word	0x00000000
 800d76c:	42c4477b 	.word	0x42c4477b
 800d770:	43070000 	.word	0x43070000
 800d774:	42b40000 	.word	0x42b40000
 800d778:	408f4000 	.word	0x408f4000
 800d77c:	00000000 	.word	0x00000000

0800d780 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d780:	b084      	sub	sp, #16
 800d782:	b5b0      	push	{r4, r5, r7, lr}
 800d784:	ed2d 8b02 	vpush	{d8}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d794:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d798:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	f040 80af 	bne.w	800d900 <V90R+0x180>
			highspeed_mode = 1;
 800d7a2:	4bc1      	ldr	r3, [pc, #772]	; (800daa8 <V90R+0x328>)
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d7b8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d7bc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7cc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d7d0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d7d4:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800daac <V90R+0x32c>
 800d7d8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	eeb0 2a47 	vmov.f32	s4, s14
 800d7e2:	eef0 1a46 	vmov.f32	s3, s12
 800d7e6:	eeb0 1a66 	vmov.f32	s2, s13
 800d7ea:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800dab4 <V90R+0x334>
 800d7ee:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800dab0 <V90R+0x330>
 800d7f2:	f7f5 fc57 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d7fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d802:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d806:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d80a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d80e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d812:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d81a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d81e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d822:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800daac <V90R+0x32c>
 800d826:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	eeb0 2a47 	vmov.f32	s4, s14
 800d830:	eef0 1a45 	vmov.f32	s3, s10
 800d834:	eeb0 1a65 	vmov.f32	s2, s11
 800d838:	eef0 0a46 	vmov.f32	s1, s12
 800d83c:	eeb0 0a66 	vmov.f32	s0, s13
 800d840:	f7f5 fc30 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800d844:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d10c      	bne.n	800d866 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d84c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d850:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d854:	eeb0 1a47 	vmov.f32	s2, s14
 800d858:	eddf 0a97 	vldr	s1, [pc, #604]	; 800dab8 <V90R+0x338>
 800d85c:	eeb0 0a67 	vmov.f32	s0, s15
 800d860:	f7f6 fb96 	bl	8003f90 <mollifier_slalom_table>
 800d864:	e015      	b.n	800d892 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d866:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d86a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d86e:	eef1 7a67 	vneg.f32	s15, s15
 800d872:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d876:	eef0 2a66 	vmov.f32	s5, s13
 800d87a:	eeb0 2a67 	vmov.f32	s4, s15
 800d87e:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800dab4 <V90R+0x334>
 800d882:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800dab4 <V90R+0x334>
 800d886:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800dab8 <V90R+0x338>
 800d88a:	eeb0 0a47 	vmov.f32	s0, s14
 800d88e:	f7f6 fa2f 	bl	8003cf0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d892:	2300      	movs	r3, #0
 800d894:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d896:	2300      	movs	r3, #0
 800d898:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7f2 fe7b 	bl	8000598 <__aeabi_f2d>
 800d8a2:	a37f      	add	r3, pc, #508	; (adr r3, 800daa0 <V90R+0x320>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f7f2 fd18 	bl	80002dc <__adddf3>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4610      	mov	r0, r2
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	f7f3 f9a0 	bl	8000bf8 <__aeabi_d2f>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d8be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d8d2:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d8d6:	eddf 5a75 	vldr	s11, [pc, #468]	; 800daac <V90R+0x32c>
 800d8da:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	eeb0 2a47 	vmov.f32	s4, s14
 800d8e4:	eef0 1a46 	vmov.f32	s3, s12
 800d8e8:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800dab4 <V90R+0x334>
 800d8ec:	eef0 0a66 	vmov.f32	s1, s13
 800d8f0:	ee00 3a10 	vmov	s0, r3
 800d8f4:	f7f5 fbd6 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800d8f8:	4b6b      	ldr	r3, [pc, #428]	; (800daa8 <V90R+0x328>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d8fe:	e13e      	b.n	800db7e <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d900:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d904:	2b01      	cmp	r3, #1
 800d906:	f240 808c 	bls.w	800da22 <V90R+0x2a2>
		highspeed_mode = 1;
 800d90a:	4b67      	ldr	r3, [pc, #412]	; (800daa8 <V90R+0x328>)
 800d90c:	2201      	movs	r2, #1
 800d90e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d910:	2300      	movs	r3, #0
 800d912:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d914:	2300      	movs	r3, #0
 800d916:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d918:	2303      	movs	r3, #3
 800d91a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d91c:	2300      	movs	r3, #0
 800d91e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d920:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d924:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d928:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d92c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d930:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d934:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d93c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d940:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d944:	eddf 4a59 	vldr	s9, [pc, #356]	; 800daac <V90R+0x32c>
 800d948:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	eeb0 2a47 	vmov.f32	s4, s14
 800d952:	eef0 1a45 	vmov.f32	s3, s10
 800d956:	eeb0 1a65 	vmov.f32	s2, s11
 800d95a:	eef0 0a46 	vmov.f32	s1, s12
 800d95e:	eeb0 0a66 	vmov.f32	s0, s13
 800d962:	f7f5 fb9f 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d966:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d10c      	bne.n	800d988 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d96e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d972:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d976:	eeb0 1a47 	vmov.f32	s2, s14
 800d97a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800dab8 <V90R+0x338>
 800d97e:	eeb0 0a67 	vmov.f32	s0, s15
 800d982:	f7f6 fb05 	bl	8003f90 <mollifier_slalom_table>
 800d986:	e015      	b.n	800d9b4 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d988:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d98c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d990:	eef1 7a67 	vneg.f32	s15, s15
 800d994:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d998:	eef0 2a66 	vmov.f32	s5, s13
 800d99c:	eeb0 2a67 	vmov.f32	s4, s15
 800d9a0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800dab4 <V90R+0x334>
 800d9a4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800dab4 <V90R+0x334>
 800d9a8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800dab8 <V90R+0x338>
 800d9ac:	eeb0 0a47 	vmov.f32	s0, s14
 800d9b0:	f7f6 f99e 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7f2 fdea 	bl	8000598 <__aeabi_f2d>
 800d9c4:	a336      	add	r3, pc, #216	; (adr r3, 800daa0 <V90R+0x320>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	f7f2 fc87 	bl	80002dc <__adddf3>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	4610      	mov	r0, r2
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	f7f3 f90f 	bl	8000bf8 <__aeabi_d2f>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d9e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d9e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9f0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d9f4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d9f8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800daac <V90R+0x32c>
 800d9fc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	eeb0 2a47 	vmov.f32	s4, s14
 800da06:	eef0 1a46 	vmov.f32	s3, s12
 800da0a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800dab4 <V90R+0x334>
 800da0e:	eef0 0a66 	vmov.f32	s1, s13
 800da12:	ee00 3a10 	vmov	s0, r3
 800da16:	f7f5 fb45 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800da1a:	4b23      	ldr	r3, [pc, #140]	; (800daa8 <V90R+0x328>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	701a      	strb	r2, [r3, #0]
}
 800da20:	e0ad      	b.n	800db7e <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800da22:	2300      	movs	r3, #0
 800da24:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da26:	2300      	movs	r3, #0
 800da28:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800da2a:	2303      	movs	r3, #3
 800da2c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800da2e:	2300      	movs	r3, #0
 800da30:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800da32:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800da36:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800da3a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800da3e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da4e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800da52:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800da56:	eddf 4a15 	vldr	s9, [pc, #84]	; 800daac <V90R+0x32c>
 800da5a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	eeb0 2a47 	vmov.f32	s4, s14
 800da64:	eef0 1a45 	vmov.f32	s3, s10
 800da68:	eeb0 1a65 	vmov.f32	s2, s11
 800da6c:	eef0 0a46 	vmov.f32	s1, s12
 800da70:	eeb0 0a66 	vmov.f32	s0, s13
 800da74:	f7f5 fb16 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800da78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d11d      	bne.n	800dabc <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800da80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da84:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da88:	eeb0 1a47 	vmov.f32	s2, s14
 800da8c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800dab8 <V90R+0x338>
 800da90:	eeb0 0a67 	vmov.f32	s0, s15
 800da94:	f7f6 fa7c 	bl	8003f90 <mollifier_slalom_table>
 800da98:	e026      	b.n	800dae8 <V90R+0x368>
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w
 800daa0:	c022ec18 	.word	0xc022ec18
 800daa4:	405fd1de 	.word	0x405fd1de
 800daa8:	20000808 	.word	0x20000808
 800daac:	42340000 	.word	0x42340000
 800dab0:	42c4477b 	.word	0x42c4477b
 800dab4:	00000000 	.word	0x00000000
 800dab8:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800dabc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dac0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dac4:	eef1 7a67 	vneg.f32	s15, s15
 800dac8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dacc:	eef0 2a66 	vmov.f32	s5, s13
 800dad0:	eeb0 2a67 	vmov.f32	s4, s15
 800dad4:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800dab4 <V90R+0x334>
 800dad8:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800dab4 <V90R+0x334>
 800dadc:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800dab8 <V90R+0x338>
 800dae0:	eeb0 0a47 	vmov.f32	s0, s14
 800dae4:	f7f6 f904 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800dae8:	2303      	movs	r3, #3
 800daea:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800daec:	2300      	movs	r3, #0
 800daee:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800daf0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800daf4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800daf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dafc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db04:	edd7 7a01 	vldr	s15, [r7, #4]
 800db08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db10:	eef0 7ae7 	vabs.f32	s15, s15
 800db14:	ee17 0a90 	vmov	r0, s15
 800db18:	f7f2 fd3e 	bl	8000598 <__aeabi_f2d>
 800db1c:	f04f 0200 	mov.w	r2, #0
 800db20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db24:	f7f2 feba 	bl	800089c <__aeabi_ddiv>
 800db28:	4602      	mov	r2, r0
 800db2a:	460b      	mov	r3, r1
 800db2c:	4614      	mov	r4, r2
 800db2e:	461d      	mov	r5, r3
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	4618      	mov	r0, r3
 800db34:	f7f2 fd30 	bl	8000598 <__aeabi_f2d>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4620      	mov	r0, r4
 800db3e:	4629      	mov	r1, r5
 800db40:	f7f2 feac 	bl	800089c <__aeabi_ddiv>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4610      	mov	r0, r2
 800db4a:	4619      	mov	r1, r3
 800db4c:	f04f 0200 	mov.w	r2, #0
 800db50:	4b0f      	ldr	r3, [pc, #60]	; (800db90 <V90R+0x410>)
 800db52:	f7f2 fbc3 	bl	80002dc <__adddf3>
 800db56:	4602      	mov	r2, r0
 800db58:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800db5a:	4610      	mov	r0, r2
 800db5c:	4619      	mov	r1, r3
 800db5e:	f7f3 f84b 	bl	8000bf8 <__aeabi_d2f>
 800db62:	4603      	mov	r3, r0
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	ee02 3a10 	vmov	s4, r3
 800db6a:	edd7 1a01 	vldr	s3, [r7, #4]
 800db6e:	ed97 1a01 	vldr	s2, [r7, #4]
 800db72:	eef0 0a68 	vmov.f32	s1, s17
 800db76:	eeb0 0a48 	vmov.f32	s0, s16
 800db7a:	f7f5 fa93 	bl	80030a4 <straight_table2>
}
 800db7e:	bf00      	nop
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	ecbd 8b02 	vpop	{d8}
 800db88:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800db8c:	b004      	add	sp, #16
 800db8e:	4770      	bx	lr
 800db90:	408f4000 	.word	0x408f4000
 800db94:	00000000 	.word	0x00000000

0800db98 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800db98:	b084      	sub	sp, #16
 800db9a:	b5b0      	push	{r4, r5, r7, lr}
 800db9c:	ed2d 8b02 	vpush	{d8}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800dba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dbac:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800dbb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	f040 80ad 	bne.w	800dd14 <V90L+0x17c>
				highspeed_mode = 1;
 800dbba:	4bbf      	ldr	r3, [pc, #764]	; (800deb8 <V90L+0x320>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800dbd0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dbd4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dbd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dbdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbe4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dbe8:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800dbec:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800debc <V90L+0x324>
 800dbf0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	eeb0 2a47 	vmov.f32	s4, s14
 800dbfa:	eef0 1a46 	vmov.f32	s3, s12
 800dbfe:	eeb0 1a66 	vmov.f32	s2, s13
 800dc02:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800dec4 <V90L+0x32c>
 800dc06:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800dec0 <V90L+0x328>
 800dc0a:	f7f5 fa4b 	bl	80030a4 <straight_table2>
				wallmode.WallControlMode=0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800dc12:	2304      	movs	r3, #4
 800dc14:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dc16:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dc1a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dc1e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dc22:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc32:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dc36:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dc3a:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800debc <V90L+0x324>
 800dc3e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	eeb0 2a47 	vmov.f32	s4, s14
 800dc48:	eef0 1a45 	vmov.f32	s3, s10
 800dc4c:	eeb0 1a65 	vmov.f32	s2, s11
 800dc50:	eef0 0a46 	vmov.f32	s1, s12
 800dc54:	eeb0 0a66 	vmov.f32	s0, s13
 800dc58:	f7f5 fa24 	bl	80030a4 <straight_table2>
				if(mollifier_mode == ON){
 800dc5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d10c      	bne.n	800dc7e <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800dc64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc68:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc6c:	eeb0 1a47 	vmov.f32	s2, s14
 800dc70:	eddf 0a95 	vldr	s1, [pc, #596]	; 800dec8 <V90L+0x330>
 800dc74:	eeb0 0a67 	vmov.f32	s0, s15
 800dc78:	f7f6 f98a 	bl	8003f90 <mollifier_slalom_table>
 800dc7c:	e013      	b.n	800dca6 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dc7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc86:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dc8a:	eef0 2a66 	vmov.f32	s5, s13
 800dc8e:	eeb0 2a47 	vmov.f32	s4, s14
 800dc92:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800dec4 <V90L+0x32c>
 800dc96:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800dec4 <V90L+0x32c>
 800dc9a:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800dec8 <V90L+0x330>
 800dc9e:	eeb0 0a67 	vmov.f32	s0, s15
 800dca2:	f7f6 f825 	bl	8003cf0 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f2 fc71 	bl	8000598 <__aeabi_f2d>
 800dcb6:	a37e      	add	r3, pc, #504	; (adr r3, 800deb0 <V90L+0x318>)
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	f7f2 fb0e 	bl	80002dc <__adddf3>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	f7f2 ff96 	bl	8000bf8 <__aeabi_d2f>
 800dccc:	4603      	mov	r3, r0
 800dcce:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dcd2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dcd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dcda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dcde:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dce2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dce6:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dcea:	eddf 5a74 	vldr	s11, [pc, #464]	; 800debc <V90L+0x324>
 800dcee:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	eeb0 2a47 	vmov.f32	s4, s14
 800dcf8:	eef0 1a46 	vmov.f32	s3, s12
 800dcfc:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800dec4 <V90L+0x32c>
 800dd00:	eef0 0a66 	vmov.f32	s1, s13
 800dd04:	ee00 3a10 	vmov	s0, r3
 800dd08:	f7f5 f9cc 	bl	80030a4 <straight_table2>
				highspeed_mode = 0;
 800dd0c:	4b6a      	ldr	r3, [pc, #424]	; (800deb8 <V90L+0x320>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800dd12:	e13a      	b.n	800df8a <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800dd14:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	f240 808a 	bls.w	800de32 <V90L+0x29a>
		highspeed_mode = 1;
 800dd1e:	4b66      	ldr	r3, [pc, #408]	; (800deb8 <V90L+0x320>)
 800dd20:	2201      	movs	r2, #1
 800dd22:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800dd24:	2300      	movs	r3, #0
 800dd26:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dd30:	2300      	movs	r3, #0
 800dd32:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dd34:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dd38:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dd3c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dd40:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dd44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd50:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dd54:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dd58:	eddf 4a58 	vldr	s9, [pc, #352]	; 800debc <V90L+0x324>
 800dd5c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	eeb0 2a47 	vmov.f32	s4, s14
 800dd66:	eef0 1a45 	vmov.f32	s3, s10
 800dd6a:	eeb0 1a65 	vmov.f32	s2, s11
 800dd6e:	eef0 0a46 	vmov.f32	s1, s12
 800dd72:	eeb0 0a66 	vmov.f32	s0, s13
 800dd76:	f7f5 f995 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800dd7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d10c      	bne.n	800dd9c <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800dd82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd8a:	eeb0 1a47 	vmov.f32	s2, s14
 800dd8e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800dec8 <V90L+0x330>
 800dd92:	eeb0 0a67 	vmov.f32	s0, s15
 800dd96:	f7f6 f8fb 	bl	8003f90 <mollifier_slalom_table>
 800dd9a:	e013      	b.n	800ddc4 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dd9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dda0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dda4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dda8:	eef0 2a66 	vmov.f32	s5, s13
 800ddac:	eeb0 2a47 	vmov.f32	s4, s14
 800ddb0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800dec4 <V90L+0x32c>
 800ddb4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800dec4 <V90L+0x32c>
 800ddb8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800dec8 <V90L+0x330>
 800ddbc:	eeb0 0a67 	vmov.f32	s0, s15
 800ddc0:	f7f5 ff96 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f2 fbe2 	bl	8000598 <__aeabi_f2d>
 800ddd4:	a336      	add	r3, pc, #216	; (adr r3, 800deb0 <V90L+0x318>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	f7f2 fa7f 	bl	80002dc <__adddf3>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4610      	mov	r0, r2
 800dde4:	4619      	mov	r1, r3
 800dde6:	f7f2 ff07 	bl	8000bf8 <__aeabi_d2f>
 800ddea:	4603      	mov	r3, r0
 800ddec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ddf0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ddf4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ddf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de00:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800de04:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800de08:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800debc <V90L+0x324>
 800de0c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	eeb0 2a47 	vmov.f32	s4, s14
 800de16:	eef0 1a46 	vmov.f32	s3, s12
 800de1a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800dec4 <V90L+0x32c>
 800de1e:	eef0 0a66 	vmov.f32	s1, s13
 800de22:	ee00 3a10 	vmov	s0, r3
 800de26:	f7f5 f93d 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800de2a:	4b23      	ldr	r3, [pc, #140]	; (800deb8 <V90L+0x320>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	701a      	strb	r2, [r3, #0]
}
 800de30:	e0ab      	b.n	800df8a <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800de32:	2300      	movs	r3, #0
 800de34:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800de36:	2300      	movs	r3, #0
 800de38:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800de3a:	2304      	movs	r3, #4
 800de3c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800de3e:	2300      	movs	r3, #0
 800de40:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800de42:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800de46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800de4a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800de4e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800de52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800de56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de5e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800de62:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800de66:	eddf 4a15 	vldr	s9, [pc, #84]	; 800debc <V90L+0x324>
 800de6a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	eeb0 2a47 	vmov.f32	s4, s14
 800de74:	eef0 1a45 	vmov.f32	s3, s10
 800de78:	eeb0 1a65 	vmov.f32	s2, s11
 800de7c:	eef0 0a46 	vmov.f32	s1, s12
 800de80:	eeb0 0a66 	vmov.f32	s0, s13
 800de84:	f7f5 f90e 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800de88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d11d      	bne.n	800decc <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800de90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800de98:	eeb0 1a47 	vmov.f32	s2, s14
 800de9c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800dec8 <V90L+0x330>
 800dea0:	eeb0 0a67 	vmov.f32	s0, s15
 800dea4:	f7f6 f874 	bl	8003f90 <mollifier_slalom_table>
 800dea8:	e024      	b.n	800def4 <V90L+0x35c>
 800deaa:	bf00      	nop
 800deac:	f3af 8000 	nop.w
 800deb0:	c022ec18 	.word	0xc022ec18
 800deb4:	405fd1de 	.word	0x405fd1de
 800deb8:	20000808 	.word	0x20000808
 800debc:	42340000 	.word	0x42340000
 800dec0:	42d4477b 	.word	0x42d4477b
 800dec4:	00000000 	.word	0x00000000
 800dec8:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800decc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ded0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ded4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ded8:	eef0 2a66 	vmov.f32	s5, s13
 800dedc:	eeb0 2a47 	vmov.f32	s4, s14
 800dee0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800dec4 <V90L+0x32c>
 800dee4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800dec4 <V90L+0x32c>
 800dee8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800dec8 <V90L+0x330>
 800deec:	eeb0 0a67 	vmov.f32	s0, s15
 800def0:	f7f5 fefe 	bl	8003cf0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800def4:	2303      	movs	r3, #3
 800def6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800defc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800df00:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800df04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df10:	edd7 7a01 	vldr	s15, [r7, #4]
 800df14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800df18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df1c:	eef0 7ae7 	vabs.f32	s15, s15
 800df20:	ee17 0a90 	vmov	r0, s15
 800df24:	f7f2 fb38 	bl	8000598 <__aeabi_f2d>
 800df28:	f04f 0200 	mov.w	r2, #0
 800df2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df30:	f7f2 fcb4 	bl	800089c <__aeabi_ddiv>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4614      	mov	r4, r2
 800df3a:	461d      	mov	r5, r3
 800df3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3e:	4618      	mov	r0, r3
 800df40:	f7f2 fb2a 	bl	8000598 <__aeabi_f2d>
 800df44:	4602      	mov	r2, r0
 800df46:	460b      	mov	r3, r1
 800df48:	4620      	mov	r0, r4
 800df4a:	4629      	mov	r1, r5
 800df4c:	f7f2 fca6 	bl	800089c <__aeabi_ddiv>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	4610      	mov	r0, r2
 800df56:	4619      	mov	r1, r3
 800df58:	f04f 0200 	mov.w	r2, #0
 800df5c:	4b0f      	ldr	r3, [pc, #60]	; (800df9c <V90L+0x404>)
 800df5e:	f7f2 f9bd 	bl	80002dc <__adddf3>
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800df66:	4610      	mov	r0, r2
 800df68:	4619      	mov	r1, r3
 800df6a:	f7f2 fe45 	bl	8000bf8 <__aeabi_d2f>
 800df6e:	4603      	mov	r3, r0
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	ee02 3a10 	vmov	s4, r3
 800df76:	edd7 1a01 	vldr	s3, [r7, #4]
 800df7a:	ed97 1a01 	vldr	s2, [r7, #4]
 800df7e:	eef0 0a68 	vmov.f32	s1, s17
 800df82:	eeb0 0a48 	vmov.f32	s0, s16
 800df86:	f7f5 f88d 	bl	80030a4 <straight_table2>
}
 800df8a:	bf00      	nop
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	ecbd 8b02 	vpop	{d8}
 800df94:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800df98:	b004      	add	sp, #16
 800df9a:	4770      	bx	lr
 800df9c:	408f4000 	.word	0x408f4000

0800dfa0 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dfa0:	b084      	sub	sp, #16
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b086      	sub	sp, #24
 800dfa6:	af04      	add	r7, sp, #16
 800dfa8:	f107 0c10 	add.w	ip, r7, #16
 800dfac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dfb0:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dfb4:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d116      	bne.n	800dfea <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dfbc:	2001      	movs	r0, #1
 800dfbe:	f7f9 fec1 	bl	8007d44 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dfc2:	2003      	movs	r0, #3
 800dfc4:	f7f9 fec8 	bl	8007d58 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dfc8:	ed97 0a01 	vldr	s0, [r7, #4]
 800dfcc:	f7f9 ff58 	bl	8007e80 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dfd0:	f7f9 ff42 	bl	8007e58 <pl_FunMotor_start>
		HAL_Delay(600);
 800dfd4:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dfd8:	f009 fd26 	bl	8017a28 <HAL_Delay>
		reset_gyro();
 800dfdc:	f7f3 fc10 	bl	8001800 <reset_gyro>
		reset_speed();
 800dfe0:	f7f3 f81a 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dfe4:	f7f6 fda6 	bl	8004b34 <clear_Ierror>
 800dfe8:	e00b      	b.n	800e002 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dfea:	2001      	movs	r0, #1
 800dfec:	f7f9 feaa 	bl	8007d44 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dff0:	2003      	movs	r0, #3
 800dff2:	f7f9 feb1 	bl	8007d58 <pl_L_DriveMotor_mode>
		reset_gyro();
 800dff6:	f7f3 fc03 	bl	8001800 <reset_gyro>
		reset_speed();
 800dffa:	f7f3 f80d 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dffe:	f7f6 fd99 	bl	8004b34 <clear_Ierror>

	}
	record_mode=2;
 800e002:	4ba8      	ldr	r3, [pc, #672]	; (800e2a4 <testturning+0x304>)
 800e004:	2202      	movs	r2, #2
 800e006:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800e008:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d110      	bne.n	800e032 <testturning+0x92>
 800e010:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e014:	9303      	str	r3, [sp, #12]
 800e016:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e01a:	9302      	str	r3, [sp, #8]
 800e01c:	2301      	movs	r3, #1
 800e01e:	9301      	str	r3, [sp, #4]
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	f107 0318 	add.w	r3, r7, #24
 800e028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e02a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800e2a8 <testturning+0x308>
 800e02e:	f7fc f9cd 	bl	800a3cc <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800e032:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e036:	2b01      	cmp	r3, #1
 800e038:	d110      	bne.n	800e05c <testturning+0xbc>
 800e03a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e03e:	9303      	str	r3, [sp, #12]
 800e040:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e044:	9302      	str	r3, [sp, #8]
 800e046:	2301      	movs	r3, #1
 800e048:	9301      	str	r3, [sp, #4]
 800e04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e054:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e2a8 <testturning+0x308>
 800e058:	f7fc fb72 	bl	800a740 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800e05c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e060:	2b02      	cmp	r3, #2
 800e062:	d10d      	bne.n	800e080 <testturning+0xe0>
 800e064:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e068:	9302      	str	r3, [sp, #8]
 800e06a:	2301      	movs	r3, #1
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e078:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800e2a8 <testturning+0x308>
 800e07c:	f7fc fd16 	bl	800aaac <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800e080:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e084:	2b03      	cmp	r3, #3
 800e086:	d10d      	bne.n	800e0a4 <testturning+0x104>
 800e088:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e08c:	9302      	str	r3, [sp, #8]
 800e08e:	2301      	movs	r3, #1
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e09a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e09c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800e2a8 <testturning+0x308>
 800e0a0:	f7fc fe6e 	bl	800ad80 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800e0a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e0a8:	2b04      	cmp	r3, #4
 800e0aa:	d10d      	bne.n	800e0c8 <testturning+0x128>
 800e0ac:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e0b0:	9302      	str	r3, [sp, #8]
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e0be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0c0:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800e2a8 <testturning+0x308>
 800e0c4:	f7fc ffc0 	bl	800b048 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800e0c8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e0cc:	2b05      	cmp	r3, #5
 800e0ce:	d10e      	bne.n	800e0ee <testturning+0x14e>
 800e0d0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e0d4:	9302      	str	r3, [sp, #8]
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e0e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0e6:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e2a8 <testturning+0x308>
 800e0ea:	f7fd f917 	bl	800b31c <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800e0ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e0f2:	2b06      	cmp	r3, #6
 800e0f4:	d10e      	bne.n	800e114 <testturning+0x174>
 800e0f6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e0fa:	9302      	str	r3, [sp, #8]
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	9301      	str	r3, [sp, #4]
 800e100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e10a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e10c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800e2a8 <testturning+0x308>
 800e110:	f7fd fa6a 	bl	800b5e8 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800e114:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e118:	2b07      	cmp	r3, #7
 800e11a:	d10e      	bne.n	800e13a <testturning+0x19a>
 800e11c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e120:	9302      	str	r3, [sp, #8]
 800e122:	2301      	movs	r3, #1
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e132:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800e2a8 <testturning+0x308>
 800e136:	f7fd fc9f 	bl	800ba78 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800e13a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e13e:	2b08      	cmp	r3, #8
 800e140:	d10e      	bne.n	800e160 <testturning+0x1c0>
 800e142:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e146:	9302      	str	r3, [sp, #8]
 800e148:	2301      	movs	r3, #1
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e158:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800e2a8 <testturning+0x308>
 800e15c:	f7fd fecc 	bl	800bef8 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800e160:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e164:	2b09      	cmp	r3, #9
 800e166:	d10e      	bne.n	800e186 <testturning+0x1e6>
 800e168:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e16c:	9302      	str	r3, [sp, #8]
 800e16e:	2301      	movs	r3, #1
 800e170:	9301      	str	r3, [sp, #4]
 800e172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e17c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e17e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e2a8 <testturning+0x308>
 800e182:	f7fe f901 	bl	800c388 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800e186:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e18a:	2b0a      	cmp	r3, #10
 800e18c:	d10e      	bne.n	800e1ac <testturning+0x20c>
 800e18e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e192:	9302      	str	r3, [sp, #8]
 800e194:	2301      	movs	r3, #1
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e19c:	9300      	str	r3, [sp, #0]
 800e19e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800e1a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e1a4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e2a8 <testturning+0x308>
 800e1a8:	f7fe fb32 	bl	800c810 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800e1ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e1b0:	2b0b      	cmp	r3, #11
 800e1b2:	d10e      	bne.n	800e1d2 <testturning+0x232>
 800e1b4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e1b8:	9302      	str	r3, [sp, #8]
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800e1c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e1ca:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800e2a8 <testturning+0x308>
 800e1ce:	f7fe fd11 	bl	800cbf4 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800e1d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e1d6:	2b0c      	cmp	r3, #12
 800e1d8:	d10e      	bne.n	800e1f8 <testturning+0x258>
 800e1da:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e1de:	9302      	str	r3, [sp, #8]
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e1f0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e2a8 <testturning+0x308>
 800e1f4:	f7fe fee6 	bl	800cfc4 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800e1f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e1fc:	2b0d      	cmp	r3, #13
 800e1fe:	d10e      	bne.n	800e21e <testturning+0x27e>
 800e200:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e204:	9302      	str	r3, [sp, #8]
 800e206:	2301      	movs	r3, #1
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800e214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e216:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800e2a8 <testturning+0x308>
 800e21a:	f7ff f8c5 	bl	800d3a8 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800e21e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e222:	2b0e      	cmp	r3, #14
 800e224:	d10e      	bne.n	800e244 <testturning+0x2a4>
 800e226:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e22a:	9302      	str	r3, [sp, #8]
 800e22c:	2301      	movs	r3, #1
 800e22e:	9301      	str	r3, [sp, #4]
 800e230:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e23a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e23c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e2a8 <testturning+0x308>
 800e240:	f7ff fa9e 	bl	800d780 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800e244:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e248:	2b0f      	cmp	r3, #15
 800e24a:	d10e      	bne.n	800e26a <testturning+0x2ca>
 800e24c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e250:	9302      	str	r3, [sp, #8]
 800e252:	2301      	movs	r3, #1
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800e260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e262:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e2a8 <testturning+0x308>
 800e266:	f7ff fc97 	bl	800db98 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800e26a:	4b0e      	ldr	r3, [pc, #56]	; (800e2a4 <testturning+0x304>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e270:	2003      	movs	r0, #3
 800e272:	f7f9 fd99 	bl	8007da8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e276:	2003      	movs	r0, #3
 800e278:	f7f9 fd6e 	bl	8007d58 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800e27c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e280:	f7fa f876 	bl	8008370 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800e284:	f7f9 fdf2 	bl	8007e6c <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800e288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e28c:	f7fa f870 	bl	8008370 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800e290:	2000      	movs	r0, #0
 800e292:	f7f9 fd57 	bl	8007d44 <pl_DriveMotor_standby>

}
 800e296:	bf00      	nop
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2a0:	b004      	add	sp, #16
 800e2a2:	4770      	bx	lr
 800e2a4:	2000d96c 	.word	0x2000d96c
 800e2a8:	c2c80000 	.word	0xc2c80000

0800e2ac <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	d823      	bhi.n	800e308 <update_coordinate+0x5c>
 800e2c0:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <update_coordinate+0x1c>)
 800e2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c6:	bf00      	nop
 800e2c8:	0800e2d9 	.word	0x0800e2d9
 800e2cc:	0800e2e5 	.word	0x0800e2e5
 800e2d0:	0800e2f1 	.word	0x0800e2f1
 800e2d4:	0800e2fd 	.word	0x0800e2fd
	case 1://北
		*y += 1;
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	601a      	str	r2, [r3, #0]
		break;
 800e2e2:	e011      	b.n	800e308 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	1c5a      	adds	r2, r3, #1
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	601a      	str	r2, [r3, #0]
		break;
 800e2ee:	e00b      	b.n	800e308 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	1e5a      	subs	r2, r3, #1
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	601a      	str	r2, [r3, #0]
		break;
 800e2fa:	e005      	b.n	800e308 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	1e5a      	subs	r2, r3, #1
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	601a      	str	r2, [r3, #0]
		break;
 800e306:	bf00      	nop
	}



}
 800e308:	bf00      	nop
 800e30a:	3714      	adds	r7, #20
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800e314:	b084      	sub	sp, #16
 800e316:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e318:	b091      	sub	sp, #68	; 0x44
 800e31a:	af04      	add	r7, sp, #16
 800e31c:	ed87 0a03 	vstr	s0, [r7, #12]
 800e320:	edc7 0a02 	vstr	s1, [r7, #8]
 800e324:	ed87 1a01 	vstr	s2, [r7, #4]
 800e328:	edc7 1a00 	vstr	s3, [r7]
 800e32c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800e330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800e334:	4b7d      	ldr	r3, [pc, #500]	; (800e52c <AdatiWayReturn+0x218>)
 800e336:	2201      	movs	r2, #1
 800e338:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800e33a:	2001      	movs	r0, #1
 800e33c:	f7f9 fd02 	bl	8007d44 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800e340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e344:	f009 fb70 	bl	8017a28 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800e348:	2300      	movs	r3, #0
 800e34a:	623b      	str	r3, [r7, #32]
	int y=0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800e350:	2301      	movs	r3, #1
 800e352:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800e354:	2301      	movs	r3, #1
 800e356:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800e358:	2300      	movs	r3, #0
 800e35a:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800e360:	2300      	movs	r3, #0
 800e362:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e364:	4b72      	ldr	r3, [pc, #456]	; (800e530 <AdatiWayReturn+0x21c>)
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	2b95      	cmp	r3, #149	; 0x95
 800e36a:	bfcc      	ite	gt
 800e36c:	2301      	movgt	r3, #1
 800e36e:	2300      	movle	r3, #0
 800e370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e374:	4b6e      	ldr	r3, [pc, #440]	; (800e530 <AdatiWayReturn+0x21c>)
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e37c:	4293      	cmp	r3, r2
 800e37e:	bfcc      	ite	gt
 800e380:	2301      	movgt	r3, #1
 800e382:	2300      	movle	r3, #0
 800e384:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e388:	4b69      	ldr	r3, [pc, #420]	; (800e530 <AdatiWayReturn+0x21c>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e390:	4293      	cmp	r3, r2
 800e392:	bfcc      	ite	gt
 800e394:	2301      	movgt	r3, #1
 800e396:	2300      	movle	r3, #0
 800e398:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e39c:	6a38      	ldr	r0, [r7, #32]
 800e39e:	69f9      	ldr	r1, [r7, #28]
 800e3a0:	69ba      	ldr	r2, [r7, #24]
 800e3a2:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e3a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e3aa:	9301      	str	r3, [sp, #4]
 800e3ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	4623      	mov	r3, r4
 800e3b4:	f002 fb76 	bl	8010aa4 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e3b8:	f005 fe42 	bl	8014040 <create_StepCountMap_queue>
	HAL_Delay(100);
 800e3bc:	2064      	movs	r0, #100	; 0x64
 800e3be:	f009 fb33 	bl	8017a28 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e3c2:	6978      	ldr	r0, [r7, #20]
 800e3c4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e3c8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e3cc:	ed97 1a03 	vldr	s2, [r7, #12]
 800e3d0:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e534 <AdatiWayReturn+0x220>
 800e3d4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e538 <AdatiWayReturn+0x224>
 800e3d8:	f7f4 fe64 	bl	80030a4 <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	f107 011c 	add.w	r1, r7, #28
 800e3e2:	f107 0320 	add.w	r3, r7, #32
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff ff60 	bl	800e2ac <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e3ec:	4b50      	ldr	r3, [pc, #320]	; (800e530 <AdatiWayReturn+0x21c>)
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	2b95      	cmp	r3, #149	; 0x95
 800e3f2:	bfcc      	ite	gt
 800e3f4:	2301      	movgt	r3, #1
 800e3f6:	2300      	movle	r3, #0
 800e3f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e3fc:	4b4c      	ldr	r3, [pc, #304]	; (800e530 <AdatiWayReturn+0x21c>)
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e404:	4293      	cmp	r3, r2
 800e406:	bfcc      	ite	gt
 800e408:	2301      	movgt	r3, #1
 800e40a:	2300      	movle	r3, #0
 800e40c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e410:	4b47      	ldr	r3, [pc, #284]	; (800e530 <AdatiWayReturn+0x21c>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e418:	4293      	cmp	r3, r2
 800e41a:	bfcc      	ite	gt
 800e41c:	2301      	movgt	r3, #1
 800e41e:	2300      	movle	r3, #0
 800e420:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e424:	2301      	movs	r3, #1
 800e426:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e428:	2301      	movs	r3, #1
 800e42a:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e42c:	2300      	movs	r3, #0
 800e42e:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e430:	6978      	ldr	r0, [r7, #20]
 800e432:	ed97 2a01 	vldr	s4, [r7, #4]
 800e436:	edd7 1a03 	vldr	s3, [r7, #12]
 800e43a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e43e:	edd7 0a03 	vldr	s1, [r7, #12]
 800e442:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e446:	f7f4 fe2d 	bl	80030a4 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e44a:	6a38      	ldr	r0, [r7, #32]
 800e44c:	69f9      	ldr	r1, [r7, #28]
 800e44e:	69ba      	ldr	r2, [r7, #24]
 800e450:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e458:	9301      	str	r3, [sp, #4]
 800e45a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	4623      	mov	r3, r4
 800e462:	f002 fb1f 	bl	8010aa4 <update_wall>
		if(Dijkstra_mode==2){
 800e466:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d104      	bne.n	800e478 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e46e:	f004 ff45 	bl	80132fc <route_Dijkstra>
					create_StepCountMap_unknown();
 800e472:	f005 fc19 	bl	8013ca8 <create_StepCountMap_unknown>
 800e476:	e001      	b.n	800e47c <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e478:	f005 fde2 	bl	8014040 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e47c:	6a3b      	ldr	r3, [r7, #32]
 800e47e:	69fa      	ldr	r2, [r7, #28]
 800e480:	69b9      	ldr	r1, [r7, #24]
 800e482:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e486:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e48a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e48e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e492:	9102      	str	r1, [sp, #8]
 800e494:	9201      	str	r2, [sp, #4]
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	4633      	mov	r3, r6
 800e49a:	462a      	mov	r2, r5
 800e49c:	4621      	mov	r1, r4
 800e49e:	f003 f87b 	bl	8011598 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e4a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <AdatiWayReturn+0x19a>
 800e4aa:	23ff      	movs	r3, #255	; 0xff
 800e4ac:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e4ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <AdatiWayReturn+0x1a6>
 800e4b6:	23ff      	movs	r3, #255	; 0xff
 800e4b8:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e4ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <AdatiWayReturn+0x1b2>
 800e4c2:	23ff      	movs	r3, #255	; 0xff
 800e4c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e4c6:	6a38      	ldr	r0, [r7, #32]
 800e4c8:	69fc      	ldr	r4, [r7, #28]
 800e4ca:	69bd      	ldr	r5, [r7, #24]
 800e4cc:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e4ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4d2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e4d4:	9102      	str	r1, [sp, #8]
 800e4d6:	9201      	str	r2, [sp, #4]
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	4633      	mov	r3, r6
 800e4dc:	462a      	mov	r2, r5
 800e4de:	4621      	mov	r1, r4
 800e4e0:	f002 f88c 	bl	80105fc <decision_kitiku>
		mode.WallCutMode=1;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e4e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e4ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6978      	ldr	r0, [r7, #20]
 800e4f4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e4f8:	f7f5 fa7e 	bl	80039f8 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e4fc:	6a3b      	ldr	r3, [r7, #32]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d103      	bne.n	800e50a <AdatiWayReturn+0x1f6>
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 827c 	beq.w	800ea02 <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e50a:	6a3b      	ldr	r3, [r7, #32]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d003      	beq.n	800e518 <AdatiWayReturn+0x204>
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	2b02      	cmp	r3, #2
 800e514:	f040 810d 	bne.w	800e732 <AdatiWayReturn+0x41e>
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f000 809b 	beq.w	800e656 <AdatiWayReturn+0x342>
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	2b01      	cmp	r3, #1
 800e524:	f040 8105 	bne.w	800e732 <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e528:	e095      	b.n	800e656 <AdatiWayReturn+0x342>
 800e52a:	bf00      	nop
 800e52c:	20000834 	.word	0x20000834
 800e530:	20000470 	.word	0x20000470
 800e534:	00000000 	.word	0x00000000
 800e538:	42830000 	.word	0x42830000
 800e53c:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e540:	2301      	movs	r3, #1
 800e542:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e544:	2300      	movs	r3, #0
 800e546:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e548:	2300      	movs	r3, #0
 800e54a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e54c:	6978      	ldr	r0, [r7, #20]
 800e54e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e552:	edd7 1a03 	vldr	s3, [r7, #12]
 800e556:	ed97 1a03 	vldr	s2, [r7, #12]
 800e55a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e55e:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e53c <AdatiWayReturn+0x228>
 800e562:	f7f4 fd9f 	bl	80030a4 <straight_table2>

				update_coordinate(&x,&y,direction);
 800e566:	69ba      	ldr	r2, [r7, #24]
 800e568:	f107 011c 	add.w	r1, r7, #28
 800e56c:	f107 0320 	add.w	r3, r7, #32
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff fe9b 	bl	800e2ac <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e576:	4b7f      	ldr	r3, [pc, #508]	; (800e774 <AdatiWayReturn+0x460>)
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	2b95      	cmp	r3, #149	; 0x95
 800e57c:	bfcc      	ite	gt
 800e57e:	2301      	movgt	r3, #1
 800e580:	2300      	movle	r3, #0
 800e582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e586:	4b7b      	ldr	r3, [pc, #492]	; (800e774 <AdatiWayReturn+0x460>)
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e58e:	4293      	cmp	r3, r2
 800e590:	bfcc      	ite	gt
 800e592:	2301      	movgt	r3, #1
 800e594:	2300      	movle	r3, #0
 800e596:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e59a:	4b76      	ldr	r3, [pc, #472]	; (800e774 <AdatiWayReturn+0x460>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	bfcc      	ite	gt
 800e5a6:	2301      	movgt	r3, #1
 800e5a8:	2300      	movle	r3, #0
 800e5aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5ba:	6978      	ldr	r0, [r7, #20]
 800e5bc:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5c0:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5c4:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5c8:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5cc:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e5d0:	f7f4 fd68 	bl	80030a4 <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e5d4:	6a38      	ldr	r0, [r7, #32]
 800e5d6:	69f9      	ldr	r1, [r7, #28]
 800e5d8:	69ba      	ldr	r2, [r7, #24]
 800e5da:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e5de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e5e2:	9301      	str	r3, [sp, #4]
 800e5e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e5e8:	9300      	str	r3, [sp, #0]
 800e5ea:	4623      	mov	r3, r4
 800e5ec:	f002 fa5a 	bl	8010aa4 <update_wall>
				create_StepCountMap_queue();
 800e5f0:	f005 fd26 	bl	8014040 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	69fa      	ldr	r2, [r7, #28]
 800e5f8:	69b9      	ldr	r1, [r7, #24]
 800e5fa:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e5fe:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e602:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e606:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e60a:	9102      	str	r1, [sp, #8]
 800e60c:	9201      	str	r2, [sp, #4]
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	4633      	mov	r3, r6
 800e612:	462a      	mov	r2, r5
 800e614:	4621      	mov	r1, r4
 800e616:	f002 ffbf 	bl	8011598 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e61a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d001      	beq.n	800e626 <AdatiWayReturn+0x312>
 800e622:	23ff      	movs	r3, #255	; 0xff
 800e624:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e626:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <AdatiWayReturn+0x31e>
 800e62e:	23ff      	movs	r3, #255	; 0xff
 800e630:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e632:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <AdatiWayReturn+0x32a>
 800e63a:	23ff      	movs	r3, #255	; 0xff
 800e63c:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e63e:	2301      	movs	r3, #1
 800e640:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e642:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e646:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e64a:	4619      	mov	r1, r3
 800e64c:	6978      	ldr	r0, [r7, #20]
 800e64e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e652:	f7f5 f9d1 	bl	80039f8 <End_straight>
			while (front_wall==0) {
 800e656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e65a:	f083 0301 	eor.w	r3, r3, #1
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	2b00      	cmp	r3, #0
 800e662:	f47f af6d 	bne.w	800e540 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e666:	2300      	movs	r3, #0
 800e668:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e66e:	2300      	movs	r3, #0
 800e670:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e672:	6978      	ldr	r0, [r7, #20]
 800e674:	ed97 2a01 	vldr	s4, [r7, #4]
 800e678:	edd7 1a03 	vldr	s3, [r7, #12]
 800e67c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e7a0 <AdatiWayReturn+0x48c>
 800e680:	edd7 0a03 	vldr	s1, [r7, #12]
 800e684:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e778 <AdatiWayReturn+0x464>
 800e688:	f7f4 fd0c 	bl	80030a4 <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e68c:	2003      	movs	r0, #3
 800e68e:	f7f9 fb8b 	bl	8007da8 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e692:	2003      	movs	r0, #3
 800e694:	f7f9 fb60 	bl	8007d58 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e69c:	f7f9 fe68 	bl	8008370 <wait_ms_NoReset>
			no_safty = 1;
 800e6a0:	4b36      	ldr	r3, [pc, #216]	; (800e77c <AdatiWayReturn+0x468>)
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e6a6:	ed97 2a00 	vldr	s4, [r7]
 800e6aa:	edd7 1a02 	vldr	s3, [r7, #8]
 800e6ae:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e7a0 <AdatiWayReturn+0x48c>
 800e6b2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e7a0 <AdatiWayReturn+0x48c>
 800e6b6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e780 <AdatiWayReturn+0x46c>
 800e6ba:	f7f5 fa01 	bl	8003ac0 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e6be:	2003      	movs	r0, #3
 800e6c0:	f7f9 fb72 	bl	8007da8 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e6c4:	2003      	movs	r0, #3
 800e6c6:	f7f9 fb47 	bl	8007d58 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e6ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e6ce:	f7f9 fe4f 	bl	8008370 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e6d2:	6978      	ldr	r0, [r7, #20]
 800e6d4:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e784 <AdatiWayReturn+0x470>
 800e6d8:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e788 <AdatiWayReturn+0x474>
 800e6dc:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e7a0 <AdatiWayReturn+0x48c>
 800e6e0:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e7a0 <AdatiWayReturn+0x48c>
 800e6e4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e78c <AdatiWayReturn+0x478>
 800e6e8:	f7f4 fcdc 	bl	80030a4 <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e6ec:	2003      	movs	r0, #3
 800e6ee:	f7f9 fb5b 	bl	8007da8 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e6f2:	2003      	movs	r0, #3
 800e6f4:	f7f9 fb30 	bl	8007d58 <pl_L_DriveMotor_mode>
			no_safty = 0;
 800e6f8:	4b20      	ldr	r3, [pc, #128]	; (800e77c <AdatiWayReturn+0x468>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	701a      	strb	r2, [r3, #0]
			wait_ms_NoReset(500);
 800e6fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e702:	f7f9 fe35 	bl	8008370 <wait_ms_NoReset>
			clear_Ierror();
 800e706:	f7f6 fa15 	bl	8004b34 <clear_Ierror>
			maze_mode = 0;
 800e70a:	4b21      	ldr	r3, [pc, #132]	; (800e790 <AdatiWayReturn+0x47c>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	3302      	adds	r3, #2
 800e714:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	2b04      	cmp	r3, #4
 800e71a:	dd02      	ble.n	800e722 <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	3b04      	subs	r3, #4
 800e720:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	2b00      	cmp	r3, #0
 800e726:	f300 816e 	bgt.w	800ea06 <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	3304      	adds	r3, #4
 800e72e:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e730:	e169      	b.n	800ea06 <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e732:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e736:	2b00      	cmp	r3, #0
 800e738:	d102      	bne.n	800e740 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e73a:	4b16      	ldr	r3, [pc, #88]	; (800e794 <AdatiWayReturn+0x480>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e740:	4b14      	ldr	r3, [pc, #80]	; (800e794 <AdatiWayReturn+0x480>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	f040 80f8 	bne.w	800e93a <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e74a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e74c:	2bff      	cmp	r3, #255	; 0xff
 800e74e:	d12b      	bne.n	800e7a8 <AdatiWayReturn+0x494>
 800e750:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e752:	2bff      	cmp	r3, #255	; 0xff
 800e754:	d128      	bne.n	800e7a8 <AdatiWayReturn+0x494>
 800e756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e758:	2bff      	cmp	r3, #255	; 0xff
 800e75a:	d125      	bne.n	800e7a8 <AdatiWayReturn+0x494>
 800e75c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e75e:	2bff      	cmp	r3, #255	; 0xff
 800e760:	d122      	bne.n	800e7a8 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e762:	4b0d      	ldr	r3, [pc, #52]	; (800e798 <AdatiWayReturn+0x484>)
 800e764:	2201      	movs	r2, #1
 800e766:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e768:	f7f9 fb52 	bl	8007e10 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e76c:	2000      	movs	r0, #0
 800e76e:	f7f9 fae9 	bl	8007d44 <pl_DriveMotor_standby>

				break;
 800e772:	e14b      	b.n	800ea0c <AdatiWayReturn+0x6f8>
 800e774:	20000470 	.word	0x20000470
 800e778:	42140000 	.word	0x42140000
 800e77c:	20000806 	.word	0x20000806
 800e780:	43340000 	.word	0x43340000
 800e784:	447a0000 	.word	0x447a0000
 800e788:	c3160000 	.word	0xc3160000
 800e78c:	c1f40000 	.word	0xc1f40000
 800e790:	20000834 	.word	0x20000834
 800e794:	20000838 	.word	0x20000838
 800e798:	20000807 	.word	0x20000807
 800e79c:	42a40000 	.word	0x42a40000
 800e7a0:	00000000 	.word	0x00000000
 800e7a4:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e7a8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e7aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d81a      	bhi.n	800e7e6 <AdatiWayReturn+0x4d2>
 800e7b0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e7b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d816      	bhi.n	800e7e6 <AdatiWayReturn+0x4d2>
 800e7b8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e7ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d812      	bhi.n	800e7e6 <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e7cc:	6978      	ldr	r0, [r7, #20]
 800e7ce:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7d2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e7d6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e7da:	edd7 0a03 	vldr	s1, [r7, #12]
 800e7de:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e79c <AdatiWayReturn+0x488>
 800e7e2:	f7f4 fc5f 	bl	80030a4 <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e7e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e7e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d219      	bcs.n	800e822 <AdatiWayReturn+0x50e>
 800e7ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e7f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d815      	bhi.n	800e822 <AdatiWayReturn+0x50e>
 800e7f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e7f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d811      	bhi.n	800e822 <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e7fe:	2300      	movs	r3, #0
 800e800:	9303      	str	r3, [sp, #12]
 800e802:	2300      	movs	r3, #0
 800e804:	9302      	str	r3, [sp, #8]
 800e806:	2300      	movs	r3, #0
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e814:	ed97 0a03 	vldr	s0, [r7, #12]
 800e818:	f7fb fdd8 	bl	800a3cc <slalomR>
				direction++;
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	3301      	adds	r3, #1
 800e820:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e824:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e826:	429a      	cmp	r2, r3
 800e828:	d219      	bcs.n	800e85e <AdatiWayReturn+0x54a>
 800e82a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e82c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e82e:	429a      	cmp	r2, r3
 800e830:	d215      	bcs.n	800e85e <AdatiWayReturn+0x54a>
 800e832:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e834:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e836:	429a      	cmp	r2, r3
 800e838:	d811      	bhi.n	800e85e <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e83a:	2300      	movs	r3, #0
 800e83c:	9303      	str	r3, [sp, #12]
 800e83e:	2300      	movs	r3, #0
 800e840:	9302      	str	r3, [sp, #8]
 800e842:	2300      	movs	r3, #0
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e84e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e850:	ed97 0a03 	vldr	s0, [r7, #12]
 800e854:	f7fb ff74 	bl	800a740 <slalomL>
				direction--;
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e85e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e862:	429a      	cmp	r2, r3
 800e864:	f080 80ac 	bcs.w	800e9c0 <AdatiWayReturn+0x6ac>
 800e868:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e86a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e86c:	429a      	cmp	r2, r3
 800e86e:	f080 80a7 	bcs.w	800e9c0 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e872:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e876:	429a      	cmp	r2, r3
 800e878:	f080 80a2 	bcs.w	800e9c0 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e87c:	2301      	movs	r3, #1
 800e87e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e880:	2300      	movs	r3, #0
 800e882:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e884:	2300      	movs	r3, #0
 800e886:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e888:	6978      	ldr	r0, [r7, #20]
 800e88a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e88e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e892:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e7a0 <AdatiWayReturn+0x48c>
 800e896:	edd7 0a03 	vldr	s1, [r7, #12]
 800e89a:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e7a4 <AdatiWayReturn+0x490>
 800e89e:	f7f4 fc01 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8a2:	2003      	movs	r0, #3
 800e8a4:	f7f9 fa80 	bl	8007da8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e8a8:	2003      	movs	r0, #3
 800e8aa:	f7f9 fa55 	bl	8007d58 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e8ae:	2064      	movs	r0, #100	; 0x64
 800e8b0:	f7f9 fd5e 	bl	8008370 <wait_ms_NoReset>
				no_safty = 1;
 800e8b4:	4b89      	ldr	r3, [pc, #548]	; (800eadc <AdatiWayReturn+0x7c8>)
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e8ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e8be:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e8c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	edd7 0a00 	vldr	s1, [r7]
 800e8cc:	ed97 0a02 	vldr	s0, [r7, #8]
 800e8d0:	f7fb fcb2 	bl	800a238 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				no_safty = 0;
 800e8d4:	4b81      	ldr	r3, [pc, #516]	; (800eadc <AdatiWayReturn+0x7c8>)
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(100);
 800e8da:	2064      	movs	r0, #100	; 0x64
 800e8dc:	f7f9 fd48 	bl	8008370 <wait_ms_NoReset>
				//clear_Ierror();
				mode.WallControlMode=0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e8e4:	6978      	ldr	r0, [r7, #20]
 800e8e6:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800eae0 <AdatiWayReturn+0x7cc>
 800e8ea:	eddf 1a7e 	vldr	s3, [pc, #504]	; 800eae4 <AdatiWayReturn+0x7d0>
 800e8ee:	ed9f 1a87 	vldr	s2, [pc, #540]	; 800eb0c <AdatiWayReturn+0x7f8>
 800e8f2:	eddf 0a86 	vldr	s1, [pc, #536]	; 800eb0c <AdatiWayReturn+0x7f8>
 800e8f6:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800eae8 <AdatiWayReturn+0x7d4>
 800e8fa:	f7f4 fbd3 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8fe:	2003      	movs	r0, #3
 800e900:	f7f9 fa52 	bl	8007da8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e904:	2003      	movs	r0, #3
 800e906:	f7f9 fa27 	bl	8007d58 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e90a:	2064      	movs	r0, #100	; 0x64
 800e90c:	f7f9 fd30 	bl	8008370 <wait_ms_NoReset>
				clear_Ierror();
 800e910:	f7f6 f910 	bl	8004b34 <clear_Ierror>
				mode.WallControlMode=1;
 800e914:	2301      	movs	r3, #1
 800e916:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e918:	6978      	ldr	r0, [r7, #20]
 800e91a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e91e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e922:	ed97 1a03 	vldr	s2, [r7, #12]
 800e926:	eddf 0a79 	vldr	s1, [pc, #484]	; 800eb0c <AdatiWayReturn+0x7f8>
 800e92a:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800eaec <AdatiWayReturn+0x7d8>
 800e92e:	f7f4 fbb9 	bl	80030a4 <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	3302      	adds	r3, #2
 800e936:	61bb      	str	r3, [r7, #24]
 800e938:	e042      	b.n	800e9c0 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e93a:	2301      	movs	r3, #1
 800e93c:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e93e:	2300      	movs	r3, #0
 800e940:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e942:	2300      	movs	r3, #0
 800e944:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e946:	6978      	ldr	r0, [r7, #20]
 800e948:	ed97 2a01 	vldr	s4, [r7, #4]
 800e94c:	edd7 1a03 	vldr	s3, [r7, #12]
 800e950:	ed97 1a03 	vldr	s2, [r7, #12]
 800e954:	edd7 0a03 	vldr	s1, [r7, #12]
 800e958:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800eb10 <AdatiWayReturn+0x7fc>
 800e95c:	f7f4 fba2 	bl	80030a4 <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e960:	f107 0218 	add.w	r2, r7, #24
 800e964:	f107 011c 	add.w	r1, r7, #28
 800e968:	f107 0320 	add.w	r3, r7, #32
 800e96c:	4618      	mov	r0, r3
 800e96e:	f001 feb7 	bl	80106e0 <compress_kitiku>
			mode.WallCutMode=0;
 800e972:	2300      	movs	r3, #0
 800e974:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e976:	2201      	movs	r2, #1
 800e978:	2101      	movs	r1, #1
 800e97a:	6978      	ldr	r0, [r7, #20]
 800e97c:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800eb10 <AdatiWayReturn+0x7fc>
 800e980:	f7f5 f83a 	bl	80039f8 <End_straight>
			mode.WallControlMode=1;
 800e984:	2301      	movs	r3, #1
 800e986:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e988:	2300      	movs	r3, #0
 800e98a:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e990:	4b57      	ldr	r3, [pc, #348]	; (800eaf0 <AdatiWayReturn+0x7dc>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	4613      	mov	r3, r2
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	4413      	add	r3, r2
 800e99a:	011a      	lsls	r2, r3, #4
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	ee07 3a90 	vmov	s15, r3
 800e9a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9a6:	6978      	ldr	r0, [r7, #20]
 800e9a8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9ac:	eddf 1a51 	vldr	s3, [pc, #324]	; 800eaf4 <AdatiWayReturn+0x7e0>
 800e9b0:	ed97 1a03 	vldr	s2, [r7, #12]
 800e9b4:	edd7 0a03 	vldr	s1, [r7, #12]
 800e9b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e9bc:	f7f4 fb72 	bl	80030a4 <straight_table2>

		}

		if (direction >= 5) {
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	2b04      	cmp	r3, #4
 800e9c4:	dd02      	ble.n	800e9cc <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	3b04      	subs	r3, #4
 800e9ca:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	dc02      	bgt.n	800e9d8 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e9d8:	4b47      	ldr	r3, [pc, #284]	; (800eaf8 <AdatiWayReturn+0x7e4>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d014      	beq.n	800ea0a <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e9e0:	4b46      	ldr	r3, [pc, #280]	; (800eafc <AdatiWayReturn+0x7e8>)
 800e9e2:	edd3 7a00 	vldr	s15, [r3]
 800e9e6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800eb00 <AdatiWayReturn+0x7ec>
 800e9ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f2:	dd05      	ble.n	800ea00 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e9f4:	f7f9 fa0c 	bl	8007e10 <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	f7f9 f9a3 	bl	8007d44 <pl_DriveMotor_standby>
						break;
 800e9fe:	e005      	b.n	800ea0c <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800ea00:	e4ec      	b.n	800e3dc <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800ea02:	bf00      	nop
 800ea04:	e002      	b.n	800ea0c <AdatiWayReturn+0x6f8>
			break;
 800ea06:	bf00      	nop
 800ea08:	e000      	b.n	800ea0c <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800ea0a:	bf00      	nop
					}

	}
	if(error_mode==0){
 800ea0c:	4b3a      	ldr	r3, [pc, #232]	; (800eaf8 <AdatiWayReturn+0x7e4>)
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d101      	bne.n	800ea18 <AdatiWayReturn+0x704>
	record_in();
 800ea14:	f7f8 fe8c 	bl	8007730 <record_in>
	}
	clear_Ierror();
 800ea18:	f7f6 f88c 	bl	8004b34 <clear_Ierror>
	reset_gyro();
 800ea1c:	f7f2 fef0 	bl	8001800 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800ea20:	4b38      	ldr	r3, [pc, #224]	; (800eb04 <AdatiWayReturn+0x7f0>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea26:	6978      	ldr	r0, [r7, #20]
 800ea28:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea2c:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea30:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea34:	eddf 0a35 	vldr	s1, [pc, #212]	; 800eb0c <AdatiWayReturn+0x7f8>
 800ea38:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800eaec <AdatiWayReturn+0x7d8>
 800ea3c:	f7f4 fb32 	bl	80030a4 <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800ea40:	69ba      	ldr	r2, [r7, #24]
 800ea42:	f107 011c 	add.w	r1, r7, #28
 800ea46:	f107 0320 	add.w	r3, r7, #32
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fc2e 	bl	800e2ac <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800ea50:	4b2d      	ldr	r3, [pc, #180]	; (800eb08 <AdatiWayReturn+0x7f4>)
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	2b95      	cmp	r3, #149	; 0x95
 800ea56:	bfcc      	ite	gt
 800ea58:	2301      	movgt	r3, #1
 800ea5a:	2300      	movle	r3, #0
 800ea5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800ea60:	4b29      	ldr	r3, [pc, #164]	; (800eb08 <AdatiWayReturn+0x7f4>)
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	bfcc      	ite	gt
 800ea6c:	2301      	movgt	r3, #1
 800ea6e:	2300      	movle	r3, #0
 800ea70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800ea74:	4b24      	ldr	r3, [pc, #144]	; (800eb08 <AdatiWayReturn+0x7f4>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	bfcc      	ite	gt
 800ea80:	2301      	movgt	r3, #1
 800ea82:	2300      	movle	r3, #0
 800ea84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea94:	6978      	ldr	r0, [r7, #20]
 800ea96:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea9a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea9e:	ed97 1a03 	vldr	s2, [r7, #12]
 800eaa2:	edd7 0a03 	vldr	s1, [r7, #12]
 800eaa6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800eaaa:	f7f4 fafb 	bl	80030a4 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800eaae:	6a38      	ldr	r0, [r7, #32]
 800eab0:	69f9      	ldr	r1, [r7, #28]
 800eab2:	69ba      	ldr	r2, [r7, #24]
 800eab4:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800eab8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800eabc:	9301      	str	r3, [sp, #4]
 800eabe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	4623      	mov	r3, r4
 800eac6:	f001 ffed 	bl	8010aa4 <update_wall>
		if(Dijkstra_mode==1){
 800eaca:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d120      	bne.n	800eb14 <AdatiWayReturn+0x800>
			route_Dijkstra();
 800ead2:	f004 fc13 	bl	80132fc <route_Dijkstra>
			create_StepCountMap_unknown();
 800ead6:	f005 f8e7 	bl	8013ca8 <create_StepCountMap_unknown>
 800eada:	e01d      	b.n	800eb18 <AdatiWayReturn+0x804>
 800eadc:	20000806 	.word	0x20000806
 800eae0:	447a0000 	.word	0x447a0000
 800eae4:	c3160000 	.word	0xc3160000
 800eae8:	c1a40000 	.word	0xc1a40000
 800eaec:	42830000 	.word	0x42830000
 800eaf0:	2000082c 	.word	0x2000082c
 800eaf4:	44610000 	.word	0x44610000
 800eaf8:	20000807 	.word	0x20000807
 800eafc:	2000072c 	.word	0x2000072c
 800eb00:	43700000 	.word	0x43700000
 800eb04:	20000834 	.word	0x20000834
 800eb08:	20000470 	.word	0x20000470
 800eb0c:	00000000 	.word	0x00000000
 800eb10:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800eb14:	f005 fc4a 	bl	80143ac <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800eb18:	6a3b      	ldr	r3, [r7, #32]
 800eb1a:	69fa      	ldr	r2, [r7, #28]
 800eb1c:	69b9      	ldr	r1, [r7, #24]
 800eb1e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800eb22:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800eb26:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800eb2a:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800eb2e:	9102      	str	r1, [sp, #8]
 800eb30:	9201      	str	r2, [sp, #4]
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	4633      	mov	r3, r6
 800eb36:	462a      	mov	r2, r5
 800eb38:	4621      	mov	r1, r4
 800eb3a:	f002 fd2d 	bl	8011598 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800eb3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <AdatiWayReturn+0x836>
 800eb46:	23ff      	movs	r3, #255	; 0xff
 800eb48:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800eb4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <AdatiWayReturn+0x842>
 800eb52:	23ff      	movs	r3, #255	; 0xff
 800eb54:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800eb56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <AdatiWayReturn+0x84e>
 800eb5e:	23ff      	movs	r3, #255	; 0xff
 800eb60:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800eb62:	6a38      	ldr	r0, [r7, #32]
 800eb64:	69fc      	ldr	r4, [r7, #28]
 800eb66:	69bd      	ldr	r5, [r7, #24]
 800eb68:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800eb6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb6e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800eb70:	9102      	str	r1, [sp, #8]
 800eb72:	9201      	str	r2, [sp, #4]
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	4633      	mov	r3, r6
 800eb78:	462a      	mov	r2, r5
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	f001 fd3e 	bl	80105fc <decision_kitiku>
		mode.WallCutMode=1;
 800eb80:	2301      	movs	r3, #1
 800eb82:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800eb84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800eb88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	6978      	ldr	r0, [r7, #20]
 800eb90:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800eb94:	f7f4 ff30 	bl	80039f8 <End_straight>


			if(x == 0 && y == 0) {
 800eb98:	6a3b      	ldr	r3, [r7, #32]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d165      	bne.n	800ec6a <AdatiWayReturn+0x956>
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d162      	bne.n	800ec6a <AdatiWayReturn+0x956>

				mode.WallControlMode=0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebb0:	6978      	ldr	r0, [r7, #20]
 800ebb2:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebb6:	edd7 1a03 	vldr	s3, [r7, #12]
 800ebba:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800eb0c <AdatiWayReturn+0x7f8>
 800ebbe:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebc2:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800eb10 <AdatiWayReturn+0x7fc>
 800ebc6:	f7f4 fa6d 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ebca:	2003      	movs	r0, #3
 800ebcc:	f7f9 f8ec 	bl	8007da8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ebd0:	2003      	movs	r0, #3
 800ebd2:	f7f9 f8c1 	bl	8007d58 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800ebd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ebda:	f7f9 fbc9 	bl	8008370 <wait_ms_NoReset>
				no_safty = 1;
 800ebde:	4bb1      	ldr	r3, [pc, #708]	; (800eea4 <AdatiWayReturn+0xb90>)
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800ebe4:	ed97 2a00 	vldr	s4, [r7]
 800ebe8:	edd7 1a02 	vldr	s3, [r7, #8]
 800ebec:	ed9f 1aae 	vldr	s2, [pc, #696]	; 800eea8 <AdatiWayReturn+0xb94>
 800ebf0:	eddf 0aad 	vldr	s1, [pc, #692]	; 800eea8 <AdatiWayReturn+0xb94>
 800ebf4:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800eeac <AdatiWayReturn+0xb98>
 800ebf8:	f7f4 ff62 	bl	8003ac0 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ebfc:	2003      	movs	r0, #3
 800ebfe:	f7f9 f8d3 	bl	8007da8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ec02:	2003      	movs	r0, #3
 800ec04:	f7f9 f8a8 	bl	8007d58 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800ec08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ec0c:	f7f9 fbb0 	bl	8008370 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800ec10:	6978      	ldr	r0, [r7, #20]
 800ec12:	ed9f 2aa7 	vldr	s4, [pc, #668]	; 800eeb0 <AdatiWayReturn+0xb9c>
 800ec16:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800eeb4 <AdatiWayReturn+0xba0>
 800ec1a:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800eea8 <AdatiWayReturn+0xb94>
 800ec1e:	eddf 0aa2 	vldr	s1, [pc, #648]	; 800eea8 <AdatiWayReturn+0xb94>
 800ec22:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800ec26:	f7f4 fa3d 	bl	80030a4 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ec2a:	2003      	movs	r0, #3
 800ec2c:	f7f9 f8bc 	bl	8007da8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ec30:	2003      	movs	r0, #3
 800ec32:	f7f9 f891 	bl	8007d58 <pl_L_DriveMotor_mode>
				no_safty = 0;
 800ec36:	4b9b      	ldr	r3, [pc, #620]	; (800eea4 <AdatiWayReturn+0xb90>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(500);
 800ec3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ec40:	f7f9 fb96 	bl	8008370 <wait_ms_NoReset>
				clear_Ierror();
 800ec44:	f7f5 ff76 	bl	8004b34 <clear_Ierror>

				direction = direction + 2;
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	3302      	adds	r3, #2
 800ec4c:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	2b04      	cmp	r3, #4
 800ec52:	dd02      	ble.n	800ec5a <AdatiWayReturn+0x946>
					direction = direction-4;
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	3b04      	subs	r3, #4
 800ec58:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f300 81a8 	bgt.w	800efb2 <AdatiWayReturn+0xc9e>
					direction = direction+4;
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	3304      	adds	r3, #4
 800ec66:	61bb      	str	r3, [r7, #24]
				}

				break;
 800ec68:	e1a3      	b.n	800efb2 <AdatiWayReturn+0xc9e>
			}

			if(know_mode==0){
 800ec6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d102      	bne.n	800ec78 <AdatiWayReturn+0x964>
				kitikukan = 0;
 800ec72:	4b91      	ldr	r3, [pc, #580]	; (800eeb8 <AdatiWayReturn+0xba4>)
 800ec74:	2200      	movs	r2, #0
 800ec76:	601a      	str	r2, [r3, #0]
			}
			if (kitikukan == OFF) {
 800ec78:	4b8f      	ldr	r3, [pc, #572]	; (800eeb8 <AdatiWayReturn+0xba4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f040 8144 	bne.w	800ef0a <AdatiWayReturn+0xbf6>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800ec82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec84:	2bff      	cmp	r3, #255	; 0xff
 800ec86:	d10c      	bne.n	800eca2 <AdatiWayReturn+0x98e>
 800ec88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec8a:	2bff      	cmp	r3, #255	; 0xff
 800ec8c:	d109      	bne.n	800eca2 <AdatiWayReturn+0x98e>
 800ec8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec90:	2bff      	cmp	r3, #255	; 0xff
 800ec92:	d106      	bne.n	800eca2 <AdatiWayReturn+0x98e>
 800ec94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec96:	2bff      	cmp	r3, #255	; 0xff
 800ec98:	d103      	bne.n	800eca2 <AdatiWayReturn+0x98e>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800ec9a:	4b88      	ldr	r3, [pc, #544]	; (800eebc <AdatiWayReturn+0xba8>)
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	701a      	strb	r2, [r3, #0]
					break;
 800eca0:	e18a      	b.n	800efb8 <AdatiWayReturn+0xca4>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800eca2:	6a3b      	ldr	r3, [r7, #32]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	db08      	blt.n	800ecba <AdatiWayReturn+0x9a6>
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	db05      	blt.n	800ecba <AdatiWayReturn+0x9a6>
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	2b0f      	cmp	r3, #15
 800ecb2:	dc02      	bgt.n	800ecba <AdatiWayReturn+0x9a6>
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	2b0f      	cmp	r3, #15
 800ecb8:	dd03      	ble.n	800ecc2 <AdatiWayReturn+0x9ae>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800ecba:	4b80      	ldr	r3, [pc, #512]	; (800eebc <AdatiWayReturn+0xba8>)
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	701a      	strb	r2, [r3, #0]
									break;
 800ecc0:	e17a      	b.n	800efb8 <AdatiWayReturn+0xca4>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ecc2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ecc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d81a      	bhi.n	800ed00 <AdatiWayReturn+0x9ec>
 800ecca:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800eccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d816      	bhi.n	800ed00 <AdatiWayReturn+0x9ec>
 800ecd2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ecd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d812      	bhi.n	800ed00 <AdatiWayReturn+0x9ec>
					// 直進
					mode.WallControlMode=1;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ece6:	6978      	ldr	r0, [r7, #20]
 800ece8:	ed97 2a01 	vldr	s4, [r7, #4]
 800ecec:	edd7 1a03 	vldr	s3, [r7, #12]
 800ecf0:	ed97 1a03 	vldr	s2, [r7, #12]
 800ecf4:	edd7 0a03 	vldr	s1, [r7, #12]
 800ecf8:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800eec0 <AdatiWayReturn+0xbac>
 800ecfc:	f7f4 f9d2 	bl	80030a4 <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ed00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ed02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d22c      	bcs.n	800ed62 <AdatiWayReturn+0xa4e>
 800ed08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ed0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d828      	bhi.n	800ed62 <AdatiWayReturn+0xa4e>
 800ed10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ed12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d824      	bhi.n	800ed62 <AdatiWayReturn+0xa4e>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d002      	beq.n	800ed24 <AdatiWayReturn+0xa10>
 800ed1e:	6a3b      	ldr	r3, [r7, #32]
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d109      	bne.n	800ed38 <AdatiWayReturn+0xa24>
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d002      	beq.n	800ed30 <AdatiWayReturn+0xa1c>
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d103      	bne.n	800ed38 <AdatiWayReturn+0xa24>
						noGoalPillarMode=1;
 800ed30:	4b64      	ldr	r3, [pc, #400]	; (800eec4 <AdatiWayReturn+0xbb0>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	e002      	b.n	800ed3e <AdatiWayReturn+0xa2a>
					}else{
						noGoalPillarMode=0;
 800ed38:	4b62      	ldr	r3, [pc, #392]	; (800eec4 <AdatiWayReturn+0xbb0>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800ed3e:	4b62      	ldr	r3, [pc, #392]	; (800eec8 <AdatiWayReturn+0xbb4>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	9203      	str	r2, [sp, #12]
 800ed44:	2200      	movs	r2, #0
 800ed46:	9202      	str	r2, [sp, #8]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	9201      	str	r2, [sp, #4]
 800ed4c:	699a      	ldr	r2, [r3, #24]
 800ed4e:	9200      	str	r2, [sp, #0]
 800ed50:	3308      	adds	r3, #8
 800ed52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed54:	ed97 0a03 	vldr	s0, [r7, #12]
 800ed58:	f7fb fb38 	bl	800a3cc <slalomR>
					direction++;
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ed62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d22c      	bcs.n	800edc4 <AdatiWayReturn+0xab0>
 800ed6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d228      	bcs.n	800edc4 <AdatiWayReturn+0xab0>
 800ed72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d824      	bhi.n	800edc4 <AdatiWayReturn+0xab0>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ed7a:	6a3b      	ldr	r3, [r7, #32]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d002      	beq.n	800ed86 <AdatiWayReturn+0xa72>
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d109      	bne.n	800ed9a <AdatiWayReturn+0xa86>
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <AdatiWayReturn+0xa7e>
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d103      	bne.n	800ed9a <AdatiWayReturn+0xa86>
						noGoalPillarMode=1;
 800ed92:	4b4c      	ldr	r3, [pc, #304]	; (800eec4 <AdatiWayReturn+0xbb0>)
 800ed94:	2201      	movs	r2, #1
 800ed96:	701a      	strb	r2, [r3, #0]
 800ed98:	e002      	b.n	800eda0 <AdatiWayReturn+0xa8c>
					}else{
						noGoalPillarMode=0;
 800ed9a:	4b4a      	ldr	r3, [pc, #296]	; (800eec4 <AdatiWayReturn+0xbb0>)
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800eda0:	4b49      	ldr	r3, [pc, #292]	; (800eec8 <AdatiWayReturn+0xbb4>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	9203      	str	r2, [sp, #12]
 800eda6:	2200      	movs	r2, #0
 800eda8:	9202      	str	r2, [sp, #8]
 800edaa:	2200      	movs	r2, #0
 800edac:	9201      	str	r2, [sp, #4]
 800edae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb0:	9200      	str	r2, [sp, #0]
 800edb2:	331c      	adds	r3, #28
 800edb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800edb6:	ed97 0a03 	vldr	s0, [r7, #12]
 800edba:	f7fb fcc1 	bl	800a740 <slalomL>
					direction--;
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	3b01      	subs	r3, #1
 800edc2:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800edc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800edc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800edc8:	429a      	cmp	r2, r3
 800edca:	f080 80e1 	bcs.w	800ef90 <AdatiWayReturn+0xc7c>
 800edce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800edd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800edd2:	429a      	cmp	r2, r3
 800edd4:	f080 80dc 	bcs.w	800ef90 <AdatiWayReturn+0xc7c>
						&& back_count < left_count){
 800edd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800edda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eddc:	429a      	cmp	r2, r3
 800edde:	f080 80d7 	bcs.w	800ef90 <AdatiWayReturn+0xc7c>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ede2:	2301      	movs	r3, #1
 800ede4:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ede6:	2300      	movs	r3, #0
 800ede8:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800edea:	2300      	movs	r3, #0
 800edec:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800edee:	6978      	ldr	r0, [r7, #20]
 800edf0:	ed97 2a01 	vldr	s4, [r7, #4]
 800edf4:	edd7 1a03 	vldr	s3, [r7, #12]
 800edf8:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 800eea8 <AdatiWayReturn+0xb94>
 800edfc:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee00:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800eedc <AdatiWayReturn+0xbc8>
 800ee04:	f7f4 f94e 	bl	80030a4 <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ee08:	2003      	movs	r0, #3
 800ee0a:	f7f8 ffcd 	bl	8007da8 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ee0e:	2003      	movs	r0, #3
 800ee10:	f7f8 ffa2 	bl	8007d58 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ee14:	2064      	movs	r0, #100	; 0x64
 800ee16:	f7f9 faab 	bl	8008370 <wait_ms_NoReset>
					no_safty = 1;
 800ee1a:	4b22      	ldr	r3, [pc, #136]	; (800eea4 <AdatiWayReturn+0xb90>)
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ee20:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ee24:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ee28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	edd7 0a00 	vldr	s1, [r7]
 800ee32:	ed97 0a02 	vldr	s0, [r7, #8]
 800ee36:	f7fb f9ff 	bl	800a238 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					no_safty = 0;
 800ee3a:	4b1a      	ldr	r3, [pc, #104]	; (800eea4 <AdatiWayReturn+0xb90>)
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	701a      	strb	r2, [r3, #0]
					wait_ms_NoReset(100);
 800ee40:	2064      	movs	r0, #100	; 0x64
 800ee42:	f7f9 fa95 	bl	8008370 <wait_ms_NoReset>
					//clear_Ierror();
					mode.WallControlMode=0;
 800ee46:	2300      	movs	r3, #0
 800ee48:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ee4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d046      	beq.n	800eee0 <AdatiWayReturn+0xbcc>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ee52:	6978      	ldr	r0, [r7, #20]
 800ee54:	ed9f 2a16 	vldr	s4, [pc, #88]	; 800eeb0 <AdatiWayReturn+0xb9c>
 800ee58:	eddf 1a16 	vldr	s3, [pc, #88]	; 800eeb4 <AdatiWayReturn+0xba0>
 800ee5c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800eea8 <AdatiWayReturn+0xb94>
 800ee60:	eddf 0a11 	vldr	s1, [pc, #68]	; 800eea8 <AdatiWayReturn+0xb94>
 800ee64:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800eecc <AdatiWayReturn+0xbb8>
 800ee68:	f7f4 f91c 	bl	80030a4 <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ee6c:	2003      	movs	r0, #3
 800ee6e:	f7f8 ff9b 	bl	8007da8 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ee72:	2003      	movs	r0, #3
 800ee74:	f7f8 ff70 	bl	8007d58 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ee78:	2064      	movs	r0, #100	; 0x64
 800ee7a:	f7f9 fa79 	bl	8008370 <wait_ms_NoReset>

					clear_Ierror();
 800ee7e:	f7f5 fe59 	bl	8004b34 <clear_Ierror>
					mode.WallControlMode=1;
 800ee82:	2301      	movs	r3, #1
 800ee84:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ee86:	6978      	ldr	r0, [r7, #20]
 800ee88:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee8c:	edd7 1a03 	vldr	s3, [r7, #12]
 800ee90:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee94:	eddf 0a04 	vldr	s1, [pc, #16]	; 800eea8 <AdatiWayReturn+0xb94>
 800ee98:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800eed0 <AdatiWayReturn+0xbbc>
 800ee9c:	f7f4 f902 	bl	80030a4 <straight_table2>
 800eea0:	e02f      	b.n	800ef02 <AdatiWayReturn+0xbee>
 800eea2:	bf00      	nop
 800eea4:	20000806 	.word	0x20000806
 800eea8:	00000000 	.word	0x00000000
 800eeac:	43340000 	.word	0x43340000
 800eeb0:	447a0000 	.word	0x447a0000
 800eeb4:	c3160000 	.word	0xc3160000
 800eeb8:	20000838 	.word	0x20000838
 800eebc:	20000807 	.word	0x20000807
 800eec0:	42a40000 	.word	0x42a40000
 800eec4:	20000529 	.word	0x20000529
 800eec8:	2000db2c 	.word	0x2000db2c
 800eecc:	c1a40000 	.word	0xc1a40000
 800eed0:	42830000 	.word	0x42830000
 800eed4:	00000000 	.word	0x00000000
 800eed8:	42b40000 	.word	0x42b40000
 800eedc:	42140000 	.word	0x42140000
					}else{
						clear_Ierror();
 800eee0:	f7f5 fe28 	bl	8004b34 <clear_Ierror>
						mode.WallControlMode=1;
 800eee4:	2301      	movs	r3, #1
 800eee6:	753b      	strb	r3, [r7, #20]
						straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eee8:	6978      	ldr	r0, [r7, #20]
 800eeea:	ed97 2a01 	vldr	s4, [r7, #4]
 800eeee:	edd7 1a03 	vldr	s3, [r7, #12]
 800eef2:	ed97 1a03 	vldr	s2, [r7, #12]
 800eef6:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800eed4 <AdatiWayReturn+0xbc0>
 800eefa:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800eed8 <AdatiWayReturn+0xbc4>
 800eefe:	f7f4 f8d1 	bl	80030a4 <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	3302      	adds	r3, #2
 800ef06:	61bb      	str	r3, [r7, #24]
 800ef08:	e042      	b.n	800ef90 <AdatiWayReturn+0xc7c>

				}

			} else {
				mode.WallControlMode=1;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ef16:	6978      	ldr	r0, [r7, #20]
 800ef18:	ed97 2a01 	vldr	s4, [r7, #4]
 800ef1c:	edd7 1a03 	vldr	s3, [r7, #12]
 800ef20:	ed97 1a03 	vldr	s2, [r7, #12]
 800ef24:	edd7 0a03 	vldr	s1, [r7, #12]
 800ef28:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 800eedc <AdatiWayReturn+0xbc8>
 800ef2c:	f7f4 f8ba 	bl	80030a4 <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800ef30:	f107 0218 	add.w	r2, r7, #24
 800ef34:	f107 011c 	add.w	r1, r7, #28
 800ef38:	f107 0320 	add.w	r3, r7, #32
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f001 fbcf 	bl	80106e0 <compress_kitiku>
				mode.WallCutMode=0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ef46:	2201      	movs	r2, #1
 800ef48:	2101      	movs	r1, #1
 800ef4a:	6978      	ldr	r0, [r7, #20]
 800ef4c:	ed1f 0a1d 	vldr	s0, [pc, #-116]	; 800eedc <AdatiWayReturn+0xbc8>
 800ef50:	f7f4 fd52 	bl	80039f8 <End_straight>
				mode.WallControlMode=1;
 800ef54:	2301      	movs	r3, #1
 800ef56:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ef60:	4b27      	ldr	r3, [pc, #156]	; (800f000 <AdatiWayReturn+0xcec>)
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	4613      	mov	r3, r2
 800ef66:	005b      	lsls	r3, r3, #1
 800ef68:	4413      	add	r3, r2
 800ef6a:	011a      	lsls	r2, r3, #4
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	ee07 3a90 	vmov	s15, r3
 800ef72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef76:	6978      	ldr	r0, [r7, #20]
 800ef78:	ed97 2a01 	vldr	s4, [r7, #4]
 800ef7c:	eddf 1a21 	vldr	s3, [pc, #132]	; 800f004 <AdatiWayReturn+0xcf0>
 800ef80:	ed97 1a03 	vldr	s2, [r7, #12]
 800ef84:	edd7 0a03 	vldr	s1, [r7, #12]
 800ef88:	eeb0 0a67 	vmov.f32	s0, s15
 800ef8c:	f7f4 f88a 	bl	80030a4 <straight_table2>

			}

			if (direction >= 5) {
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	2b04      	cmp	r3, #4
 800ef94:	dd02      	ble.n	800ef9c <AdatiWayReturn+0xc88>
				direction = direction-4;
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	3b04      	subs	r3, #4
 800ef9a:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	dc02      	bgt.n	800efa8 <AdatiWayReturn+0xc94>
				direction = direction+4;
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	3304      	adds	r3, #4
 800efa6:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800efa8:	4b17      	ldr	r3, [pc, #92]	; (800f008 <AdatiWayReturn+0xcf4>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d002      	beq.n	800efb6 <AdatiWayReturn+0xca2>
		update_coordinate(&x,&y,direction);
 800efb0:	e546      	b.n	800ea40 <AdatiWayReturn+0x72c>
				break;
 800efb2:	bf00      	nop
 800efb4:	e000      	b.n	800efb8 <AdatiWayReturn+0xca4>
			if(error_mode==1){break;}
 800efb6:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800efb8:	2000      	movs	r0, #0
 800efba:	f7f8 fec3 	bl	8007d44 <pl_DriveMotor_standby>
	maze_mode = 0;
 800efbe:	4b13      	ldr	r3, [pc, #76]	; (800f00c <AdatiWayReturn+0xcf8>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800efc4:	2064      	movs	r0, #100	; 0x64
 800efc6:	f008 fd2f 	bl	8017a28 <HAL_Delay>
	maze_display();
 800efca:	f005 fbdb 	bl	8014784 <maze_display>
	create_StepCountMap_queue();
 800efce:	f005 f837 	bl	8014040 <create_StepCountMap_queue>
	if(walk_count[0] == 255){
 800efd2:	4b0f      	ldr	r3, [pc, #60]	; (800f010 <AdatiWayReturn+0xcfc>)
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	2bff      	cmp	r3, #255	; 0xff
 800efd8:	d102      	bne.n	800efe0 <AdatiWayReturn+0xccc>
		error_mode = 1;
 800efda:	4b0b      	ldr	r3, [pc, #44]	; (800f008 <AdatiWayReturn+0xcf4>)
 800efdc:	2201      	movs	r2, #1
 800efde:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800efe0:	4b09      	ldr	r3, [pc, #36]	; (800f008 <AdatiWayReturn+0xcf4>)
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d102      	bne.n	800efee <AdatiWayReturn+0xcda>
		record_in();
 800efe8:	f7f8 fba2 	bl	8007730 <record_in>
	} else {
		record_out();
	}

}
 800efec:	e001      	b.n	800eff2 <AdatiWayReturn+0xcde>
		record_out();
 800efee:	f7f8 fc5b 	bl	80078a8 <record_out>
}
 800eff2:	bf00      	nop
 800eff4:	3734      	adds	r7, #52	; 0x34
 800eff6:	46bd      	mov	sp, r7
 800eff8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800effc:	b004      	add	sp, #16
 800effe:	4770      	bx	lr
 800f000:	2000082c 	.word	0x2000082c
 800f004:	447a0000 	.word	0x447a0000
 800f008:	20000807 	.word	0x20000807
 800f00c:	20000834 	.word	0x20000834
 800f010:	20000d2c 	.word	0x20000d2c

0800f014 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800f014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f016:	b08b      	sub	sp, #44	; 0x2c
 800f018:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	607b      	str	r3, [r7, #4]
	int y = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800f022:	2301      	movs	r3, #1
 800f024:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800f026:	4b8b      	ldr	r3, [pc, #556]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f028:	2200      	movs	r2, #0
 800f02a:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800f02c:	f002 fbdc 	bl	80117e8 <create_DijkstraMap>
	maze_display_Dijkstra();
 800f030:	f005 fcc6 	bl	80149c0 <maze_display_Dijkstra>
	pass[0] = 1;
 800f034:	4b88      	ldr	r3, [pc, #544]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f036:	2201      	movs	r2, #1
 800f038:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800f03a:	4639      	mov	r1, r7
 800f03c:	1d3b      	adds	r3, r7, #4
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	4618      	mov	r0, r3
 800f042:	f7ff f933 	bl	800e2ac <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d002      	beq.n	800f052 <pass_maker_Dijkstra+0x3e>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d13a      	bne.n	800f0c8 <pass_maker_Dijkstra+0xb4>
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d002      	beq.n	800f05e <pass_maker_Dijkstra+0x4a>
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d134      	bne.n	800f0c8 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800f05e:	4b7d      	ldr	r3, [pc, #500]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	461a      	mov	r2, r3
 800f064:	4b7c      	ldr	r3, [pc, #496]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	da05      	bge.n	800f07a <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800f06e:	4b79      	ldr	r3, [pc, #484]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	3301      	adds	r3, #1
 800f074:	b2da      	uxtb	r2, r3
 800f076:	4b77      	ldr	r3, [pc, #476]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f078:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800f07a:	4b76      	ldr	r3, [pc, #472]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	461a      	mov	r2, r3
 800f080:	4b75      	ldr	r3, [pc, #468]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f086:	4a73      	ldr	r2, [pc, #460]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f088:	7812      	ldrb	r2, [r2, #0]
 800f08a:	4611      	mov	r1, r2
 800f08c:	3301      	adds	r3, #1
 800f08e:	4a72      	ldr	r2, [pc, #456]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f090:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	3302      	adds	r3, #2
 800f098:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	2b05      	cmp	r3, #5
 800f09e:	d101      	bne.n	800f0a4 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	2b06      	cmp	r3, #6
 800f0a8:	d101      	bne.n	800f0ae <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d101      	bne.n	800f0b8 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0be:	f040 80c2 	bne.w	800f246 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	617b      	str	r3, [r7, #20]
					}
					break;
 800f0c6:	e0be      	b.n	800f246 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	6839      	ldr	r1, [r7, #0]
 800f0cc:	f107 020b 	add.w	r2, r7, #11
 800f0d0:	f107 0309 	add.w	r3, r7, #9
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	f107 030a 	add.w	r3, r7, #10
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	f001 ff66 	bl	8010fb0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	683a      	ldr	r2, [r7, #0]
 800f0e8:	f107 060c 	add.w	r6, r7, #12
 800f0ec:	f107 050e 	add.w	r5, r7, #14
 800f0f0:	f107 0410 	add.w	r4, r7, #16
 800f0f4:	f107 0012 	add.w	r0, r7, #18
 800f0f8:	6979      	ldr	r1, [r7, #20]
 800f0fa:	9102      	str	r1, [sp, #8]
 800f0fc:	9201      	str	r2, [sp, #4]
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	4633      	mov	r3, r6
 800f102:	462a      	mov	r2, r5
 800f104:	4621      	mov	r1, r4
 800f106:	f002 fad5 	bl	80116b4 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f10a:	7afb      	ldrb	r3, [r7, #11]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d002      	beq.n	800f116 <pass_maker_Dijkstra+0x102>
 800f110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f114:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f116:	7abb      	ldrb	r3, [r7, #10]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d002      	beq.n	800f122 <pass_maker_Dijkstra+0x10e>
 800f11c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f120:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f122:	7a7b      	ldrb	r3, [r7, #9]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <pass_maker_Dijkstra+0x11a>
 800f128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f12c:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f12e:	8a7b      	ldrh	r3, [r7, #18]
 800f130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f134:	4293      	cmp	r3, r2
 800f136:	d10e      	bne.n	800f156 <pass_maker_Dijkstra+0x142>
 800f138:	8a3b      	ldrh	r3, [r7, #16]
 800f13a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f13e:	4293      	cmp	r3, r2
 800f140:	d109      	bne.n	800f156 <pass_maker_Dijkstra+0x142>
 800f142:	89bb      	ldrh	r3, [r7, #12]
 800f144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f148:	4293      	cmp	r3, r2
 800f14a:	d104      	bne.n	800f156 <pass_maker_Dijkstra+0x142>
 800f14c:	89fb      	ldrh	r3, [r7, #14]
 800f14e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f152:	4293      	cmp	r3, r2
 800f154:	d079      	beq.n	800f24a <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f156:	8a7a      	ldrh	r2, [r7, #18]
 800f158:	8a3b      	ldrh	r3, [r7, #16]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d822      	bhi.n	800f1a4 <pass_maker_Dijkstra+0x190>
 800f15e:	8a7a      	ldrh	r2, [r7, #18]
 800f160:	89bb      	ldrh	r3, [r7, #12]
 800f162:	429a      	cmp	r2, r3
 800f164:	d81e      	bhi.n	800f1a4 <pass_maker_Dijkstra+0x190>
 800f166:	8a7a      	ldrh	r2, [r7, #18]
 800f168:	89fb      	ldrh	r3, [r7, #14]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d81a      	bhi.n	800f1a4 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f16e:	4b39      	ldr	r3, [pc, #228]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	4b38      	ldr	r3, [pc, #224]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	da05      	bge.n	800f18a <pass_maker_Dijkstra+0x176>
 800f17e:	4b35      	ldr	r3, [pc, #212]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	3301      	adds	r3, #1
 800f184:	b2da      	uxtb	r2, r3
 800f186:	4b33      	ldr	r3, [pc, #204]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f188:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f18a:	4b32      	ldr	r3, [pc, #200]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	4b31      	ldr	r3, [pc, #196]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f196:	4a2f      	ldr	r2, [pc, #188]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f198:	7812      	ldrb	r2, [r2, #0]
 800f19a:	4611      	mov	r1, r2
 800f19c:	3302      	adds	r3, #2
 800f19e:	4a2e      	ldr	r2, [pc, #184]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f1a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f1a4:	8a3a      	ldrh	r2, [r7, #16]
 800f1a6:	8a7b      	ldrh	r3, [r7, #18]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d218      	bcs.n	800f1de <pass_maker_Dijkstra+0x1ca>
 800f1ac:	8a3a      	ldrh	r2, [r7, #16]
 800f1ae:	89bb      	ldrh	r3, [r7, #12]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d814      	bhi.n	800f1de <pass_maker_Dijkstra+0x1ca>
 800f1b4:	8a3a      	ldrh	r2, [r7, #16]
 800f1b6:	89fb      	ldrh	r3, [r7, #14]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d810      	bhi.n	800f1de <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f1bc:	4b25      	ldr	r3, [pc, #148]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	4b23      	ldr	r3, [pc, #140]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f1c6:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800f1c8:	4b22      	ldr	r3, [pc, #136]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	4b22      	ldr	r3, [pc, #136]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f1d0:	f06f 0201 	mvn.w	r2, #1
 800f1d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f1de:	89ba      	ldrh	r2, [r7, #12]
 800f1e0:	8a7b      	ldrh	r3, [r7, #18]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d218      	bcs.n	800f218 <pass_maker_Dijkstra+0x204>
 800f1e6:	89ba      	ldrh	r2, [r7, #12]
 800f1e8:	8a3b      	ldrh	r3, [r7, #16]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d214      	bcs.n	800f218 <pass_maker_Dijkstra+0x204>
 800f1ee:	89ba      	ldrh	r2, [r7, #12]
 800f1f0:	89fb      	ldrh	r3, [r7, #14]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d810      	bhi.n	800f218 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f1f6:	4b17      	ldr	r3, [pc, #92]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	b2da      	uxtb	r2, r3
 800f1fe:	4b15      	ldr	r3, [pc, #84]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f200:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800f202:	4b14      	ldr	r3, [pc, #80]	; (800f254 <pass_maker_Dijkstra+0x240>)
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	4619      	mov	r1, r3
 800f208:	4b13      	ldr	r3, [pc, #76]	; (800f258 <pass_maker_Dijkstra+0x244>)
 800f20a:	f06f 0202 	mvn.w	r2, #2
 800f20e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	3b01      	subs	r3, #1
 800f216:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	2b05      	cmp	r3, #5
 800f21c:	d101      	bne.n	800f222 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f21e:	2301      	movs	r3, #1
 800f220:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	2b06      	cmp	r3, #6
 800f226:	d101      	bne.n	800f22c <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f228:	2302      	movs	r3, #2
 800f22a:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d101      	bne.n	800f236 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f232:	2304      	movs	r3, #4
 800f234:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23c:	f47f aefd 	bne.w	800f03a <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f240:	2303      	movs	r3, #3
 800f242:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f244:	e6f9      	b.n	800f03a <pass_maker_Dijkstra+0x26>
					break;
 800f246:	bf00      	nop
 800f248:	e000      	b.n	800f24c <pass_maker_Dijkstra+0x238>
			break;
 800f24a:	bf00      	nop
		}

	}
}
 800f24c:	bf00      	nop
 800f24e:	371c      	adds	r7, #28
 800f250:	46bd      	mov	sp, r7
 800f252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f254:	20000828 	.word	0x20000828
 800f258:	2000083c 	.word	0x2000083c
 800f25c:	00000000 	.word	0x00000000

0800f260 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f260:	b5b0      	push	{r4, r5, r7, lr}
 800f262:	b0e0      	sub	sp, #384	; 0x180
 800f264:	af50      	add	r7, sp, #320	; 0x140
 800f266:	ed87 0a05 	vstr	s0, [r7, #20]
 800f26a:	edc7 0a04 	vstr	s1, [r7, #16]
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	4608      	mov	r0, r1
 800f272:	4611      	mov	r1, r2
 800f274:	461a      	mov	r2, r3
 800f276:	ed87 1a01 	vstr	s2, [r7, #4]
 800f27a:	4603      	mov	r3, r0
 800f27c:	72fb      	strb	r3, [r7, #11]
 800f27e:	460b      	mov	r3, r1
 800f280:	72bb      	strb	r3, [r7, #10]
 800f282:	4613      	mov	r3, r2
 800f284:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f286:	f06f 0301 	mvn.w	r3, #1
 800f28a:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f28c:	2301      	movs	r3, #1
 800f28e:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f290:	2300      	movs	r3, #0
 800f292:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f294:	2300      	movs	r3, #0
 800f296:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f298:	2300      	movs	r3, #0
 800f29a:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f29c:	2300      	movs	r3, #0
 800f29e:	633b      	str	r3, [r7, #48]	; 0x30
 800f2a0:	e007      	b.n	800f2b2 <run_shortest+0x52>
 800f2a2:	4a07      	ldr	r2, [pc, #28]	; (800f2c0 <run_shortest+0x60>)
 800f2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	633b      	str	r3, [r7, #48]	; 0x30
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	2bfe      	cmp	r3, #254	; 0xfe
 800f2b6:	ddf4      	ble.n	800f2a2 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2bc:	e077      	b.n	800f3ae <run_shortest+0x14e>
 800f2be:	bf00      	nop
 800f2c0:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f2c4:	4aa9      	ldr	r2, [pc, #676]	; (800f56c <run_shortest+0x30c>)
 800f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f2cc:	4aa8      	ldr	r2, [pc, #672]	; (800f570 <run_shortest+0x310>)
 800f2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f2d4:	4aa5      	ldr	r2, [pc, #660]	; (800f56c <run_shortest+0x30c>)
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	330c      	adds	r3, #12
 800f2da:	005b      	lsls	r3, r3, #1
 800f2dc:	4413      	add	r3, r2
 800f2de:	88d9      	ldrh	r1, [r3, #6]
 800f2e0:	4aa3      	ldr	r2, [pc, #652]	; (800f570 <run_shortest+0x310>)
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	330c      	adds	r3, #12
 800f2e6:	005b      	lsls	r3, r3, #1
 800f2e8:	4413      	add	r3, r2
 800f2ea:	460a      	mov	r2, r1
 800f2ec:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f2ee:	4a9f      	ldr	r2, [pc, #636]	; (800f56c <run_shortest+0x30c>)
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	331c      	adds	r3, #28
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	8899      	ldrh	r1, [r3, #4]
 800f2fa:	4a9d      	ldr	r2, [pc, #628]	; (800f570 <run_shortest+0x310>)
 800f2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fe:	331c      	adds	r3, #28
 800f300:	005b      	lsls	r3, r3, #1
 800f302:	4413      	add	r3, r2
 800f304:	460a      	mov	r2, r1
 800f306:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f308:	4a98      	ldr	r2, [pc, #608]	; (800f56c <run_shortest+0x30c>)
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	332c      	adds	r3, #44	; 0x2c
 800f30e:	005b      	lsls	r3, r3, #1
 800f310:	4413      	add	r3, r2
 800f312:	8859      	ldrh	r1, [r3, #2]
 800f314:	4a96      	ldr	r2, [pc, #600]	; (800f570 <run_shortest+0x310>)
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	332c      	adds	r3, #44	; 0x2c
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	4413      	add	r3, r2
 800f31e:	460a      	mov	r2, r1
 800f320:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f322:	4a92      	ldr	r2, [pc, #584]	; (800f56c <run_shortest+0x30c>)
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	331c      	adds	r3, #28
 800f328:	005b      	lsls	r3, r3, #1
 800f32a:	4413      	add	r3, r2
 800f32c:	889b      	ldrh	r3, [r3, #4]
 800f32e:	43db      	mvns	r3, r3
 800f330:	b299      	uxth	r1, r3
 800f332:	4a8e      	ldr	r2, [pc, #568]	; (800f56c <run_shortest+0x30c>)
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	331c      	adds	r3, #28
 800f338:	005b      	lsls	r3, r3, #1
 800f33a:	4413      	add	r3, r2
 800f33c:	460a      	mov	r2, r1
 800f33e:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f340:	4a8a      	ldr	r2, [pc, #552]	; (800f56c <run_shortest+0x30c>)
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	332c      	adds	r3, #44	; 0x2c
 800f346:	005b      	lsls	r3, r3, #1
 800f348:	4413      	add	r3, r2
 800f34a:	885b      	ldrh	r3, [r3, #2]
 800f34c:	43db      	mvns	r3, r3
 800f34e:	b299      	uxth	r1, r3
 800f350:	4a86      	ldr	r2, [pc, #536]	; (800f56c <run_shortest+0x30c>)
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	332c      	adds	r3, #44	; 0x2c
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	4413      	add	r3, r2
 800f35a:	460a      	mov	r2, r1
 800f35c:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f35e:	4a83      	ldr	r2, [pc, #524]	; (800f56c <run_shortest+0x30c>)
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f366:	4981      	ldr	r1, [pc, #516]	; (800f56c <run_shortest+0x30c>)
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	331c      	adds	r3, #28
 800f36c:	005b      	lsls	r3, r3, #1
 800f36e:	440b      	add	r3, r1
 800f370:	889b      	ldrh	r3, [r3, #4]
 800f372:	4313      	orrs	r3, r2
 800f374:	b299      	uxth	r1, r3
 800f376:	4a7d      	ldr	r2, [pc, #500]	; (800f56c <run_shortest+0x30c>)
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f37e:	4a7b      	ldr	r2, [pc, #492]	; (800f56c <run_shortest+0x30c>)
 800f380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f382:	330c      	adds	r3, #12
 800f384:	005b      	lsls	r3, r3, #1
 800f386:	4413      	add	r3, r2
 800f388:	88da      	ldrh	r2, [r3, #6]
 800f38a:	4978      	ldr	r1, [pc, #480]	; (800f56c <run_shortest+0x30c>)
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	332c      	adds	r3, #44	; 0x2c
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	440b      	add	r3, r1
 800f394:	885b      	ldrh	r3, [r3, #2]
 800f396:	4313      	orrs	r3, r2
 800f398:	b299      	uxth	r1, r3
 800f39a:	4a74      	ldr	r2, [pc, #464]	; (800f56c <run_shortest+0x30c>)
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	330c      	adds	r3, #12
 800f3a0:	005b      	lsls	r3, r3, #1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	460a      	mov	r2, r1
 800f3a6:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b0:	2b0e      	cmp	r3, #14
 800f3b2:	dd87      	ble.n	800f2c4 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f3b4:	f7ff fe2e 	bl	800f014 <pass_maker_Dijkstra>

	pass_count = 1;
 800f3b8:	4b6e      	ldr	r3, [pc, #440]	; (800f574 <run_shortest+0x314>)
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f3be:	7afb      	ldrb	r3, [r7, #11]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	f040 84b5 	bne.w	800fd30 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f3c6:	4b6b      	ldr	r3, [pc, #428]	; (800f574 <run_shortest+0x314>)
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	4b6a      	ldr	r3, [pc, #424]	; (800f578 <run_shortest+0x318>)
 800f3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f000 813a 	beq.w	800f64c <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f3d8:	4b66      	ldr	r3, [pc, #408]	; (800f574 <run_shortest+0x314>)
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	4b66      	ldr	r3, [pc, #408]	; (800f578 <run_shortest+0x318>)
 800f3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3e4:	f113 0f02 	cmn.w	r3, #2
 800f3e8:	d131      	bne.n	800f44e <run_shortest+0x1ee>
 800f3ea:	4b62      	ldr	r3, [pc, #392]	; (800f574 <run_shortest+0x314>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	4a61      	ldr	r2, [pc, #388]	; (800f578 <run_shortest+0x318>)
 800f3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	dd29      	ble.n	800f44e <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f3fa:	4b5e      	ldr	r3, [pc, #376]	; (800f574 <run_shortest+0x314>)
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	3301      	adds	r3, #1
 800f400:	4a5d      	ldr	r2, [pc, #372]	; (800f578 <run_shortest+0x318>)
 800f402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f406:	2b00      	cmp	r3, #0
 800f408:	dd21      	ble.n	800f44e <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f40a:	4b5a      	ldr	r3, [pc, #360]	; (800f574 <run_shortest+0x314>)
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	3b01      	subs	r3, #1
 800f410:	4a59      	ldr	r2, [pc, #356]	; (800f578 <run_shortest+0x318>)
 800f412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f416:	4b57      	ldr	r3, [pc, #348]	; (800f574 <run_shortest+0x314>)
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	3a01      	subs	r2, #1
 800f41e:	4956      	ldr	r1, [pc, #344]	; (800f578 <run_shortest+0x318>)
 800f420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f424:	4b53      	ldr	r3, [pc, #332]	; (800f574 <run_shortest+0x314>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	3301      	adds	r3, #1
 800f42a:	4a53      	ldr	r2, [pc, #332]	; (800f578 <run_shortest+0x318>)
 800f42c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f430:	4b50      	ldr	r3, [pc, #320]	; (800f574 <run_shortest+0x314>)
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	3301      	adds	r3, #1
 800f436:	3a01      	subs	r2, #1
 800f438:	494f      	ldr	r1, [pc, #316]	; (800f578 <run_shortest+0x318>)
 800f43a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f43e:	4b4d      	ldr	r3, [pc, #308]	; (800f574 <run_shortest+0x314>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	4619      	mov	r1, r3
 800f444:	4b4c      	ldr	r3, [pc, #304]	; (800f578 <run_shortest+0x318>)
 800f446:	f06f 0203 	mvn.w	r2, #3
 800f44a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f44e:	4b49      	ldr	r3, [pc, #292]	; (800f574 <run_shortest+0x314>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	4b48      	ldr	r3, [pc, #288]	; (800f578 <run_shortest+0x318>)
 800f456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f45a:	f113 0f03 	cmn.w	r3, #3
 800f45e:	d131      	bne.n	800f4c4 <run_shortest+0x264>
 800f460:	4b44      	ldr	r3, [pc, #272]	; (800f574 <run_shortest+0x314>)
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	3b01      	subs	r3, #1
 800f466:	4a44      	ldr	r2, [pc, #272]	; (800f578 <run_shortest+0x318>)
 800f468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	dd29      	ble.n	800f4c4 <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f470:	4b40      	ldr	r3, [pc, #256]	; (800f574 <run_shortest+0x314>)
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	3301      	adds	r3, #1
 800f476:	4a40      	ldr	r2, [pc, #256]	; (800f578 <run_shortest+0x318>)
 800f478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dd21      	ble.n	800f4c4 <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f480:	4b3c      	ldr	r3, [pc, #240]	; (800f574 <run_shortest+0x314>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	3b01      	subs	r3, #1
 800f486:	4a3c      	ldr	r2, [pc, #240]	; (800f578 <run_shortest+0x318>)
 800f488:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f48c:	4b39      	ldr	r3, [pc, #228]	; (800f574 <run_shortest+0x314>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	3b01      	subs	r3, #1
 800f492:	3a01      	subs	r2, #1
 800f494:	4938      	ldr	r1, [pc, #224]	; (800f578 <run_shortest+0x318>)
 800f496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f49a:	4b36      	ldr	r3, [pc, #216]	; (800f574 <run_shortest+0x314>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	4a35      	ldr	r2, [pc, #212]	; (800f578 <run_shortest+0x318>)
 800f4a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4a6:	4b33      	ldr	r3, [pc, #204]	; (800f574 <run_shortest+0x314>)
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	3a01      	subs	r2, #1
 800f4ae:	4932      	ldr	r1, [pc, #200]	; (800f578 <run_shortest+0x318>)
 800f4b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f4b4:	4b2f      	ldr	r3, [pc, #188]	; (800f574 <run_shortest+0x314>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4b2f      	ldr	r3, [pc, #188]	; (800f578 <run_shortest+0x318>)
 800f4bc:	f06f 0204 	mvn.w	r2, #4
 800f4c0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f4c4:	4b2b      	ldr	r3, [pc, #172]	; (800f574 <run_shortest+0x314>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	4a2b      	ldr	r2, [pc, #172]	; (800f578 <run_shortest+0x318>)
 800f4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	dd43      	ble.n	800f55c <run_shortest+0x2fc>
 800f4d4:	4b27      	ldr	r3, [pc, #156]	; (800f574 <run_shortest+0x314>)
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	4b27      	ldr	r3, [pc, #156]	; (800f578 <run_shortest+0x318>)
 800f4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4e0:	f113 0f02 	cmn.w	r3, #2
 800f4e4:	d13a      	bne.n	800f55c <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f4e6:	4b23      	ldr	r3, [pc, #140]	; (800f574 <run_shortest+0x314>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	4a22      	ldr	r2, [pc, #136]	; (800f578 <run_shortest+0x318>)
 800f4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f2:	f113 0f02 	cmn.w	r3, #2
 800f4f6:	d131      	bne.n	800f55c <run_shortest+0x2fc>
 800f4f8:	4b1e      	ldr	r3, [pc, #120]	; (800f574 <run_shortest+0x314>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	3302      	adds	r3, #2
 800f4fe:	4a1e      	ldr	r2, [pc, #120]	; (800f578 <run_shortest+0x318>)
 800f500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f504:	2b00      	cmp	r3, #0
 800f506:	dd29      	ble.n	800f55c <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f508:	4b1a      	ldr	r3, [pc, #104]	; (800f574 <run_shortest+0x314>)
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	4a1a      	ldr	r2, [pc, #104]	; (800f578 <run_shortest+0x318>)
 800f510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f514:	4b17      	ldr	r3, [pc, #92]	; (800f574 <run_shortest+0x314>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	3b01      	subs	r3, #1
 800f51a:	3a01      	subs	r2, #1
 800f51c:	4916      	ldr	r1, [pc, #88]	; (800f578 <run_shortest+0x318>)
 800f51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f522:	4b14      	ldr	r3, [pc, #80]	; (800f574 <run_shortest+0x314>)
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	4619      	mov	r1, r3
 800f528:	4b13      	ldr	r3, [pc, #76]	; (800f578 <run_shortest+0x318>)
 800f52a:	f06f 0205 	mvn.w	r2, #5
 800f52e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f532:	4b10      	ldr	r3, [pc, #64]	; (800f574 <run_shortest+0x314>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	3301      	adds	r3, #1
 800f538:	4a0f      	ldr	r2, [pc, #60]	; (800f578 <run_shortest+0x318>)
 800f53a:	f04f 31ff 	mov.w	r1, #4294967295
 800f53e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f542:	4b0c      	ldr	r3, [pc, #48]	; (800f574 <run_shortest+0x314>)
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	3302      	adds	r3, #2
 800f548:	4a0b      	ldr	r2, [pc, #44]	; (800f578 <run_shortest+0x318>)
 800f54a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f54e:	4b09      	ldr	r3, [pc, #36]	; (800f574 <run_shortest+0x314>)
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	3302      	adds	r3, #2
 800f554:	3a01      	subs	r2, #1
 800f556:	4908      	ldr	r1, [pc, #32]	; (800f578 <run_shortest+0x318>)
 800f558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f55c:	4b05      	ldr	r3, [pc, #20]	; (800f574 <run_shortest+0x314>)
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	3b01      	subs	r3, #1
 800f562:	4a05      	ldr	r2, [pc, #20]	; (800f578 <run_shortest+0x318>)
 800f564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	e007      	b.n	800f57c <run_shortest+0x31c>
 800f56c:	20000c3c 	.word	0x20000c3c
 800f570:	20000cb4 	.word	0x20000cb4
 800f574:	20000828 	.word	0x20000828
 800f578:	2000083c 	.word	0x2000083c
 800f57c:	dd43      	ble.n	800f606 <run_shortest+0x3a6>
 800f57e:	4b31      	ldr	r3, [pc, #196]	; (800f644 <run_shortest+0x3e4>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	4b30      	ldr	r3, [pc, #192]	; (800f648 <run_shortest+0x3e8>)
 800f586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f58a:	f113 0f03 	cmn.w	r3, #3
 800f58e:	d13a      	bne.n	800f606 <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f590:	4b2c      	ldr	r3, [pc, #176]	; (800f644 <run_shortest+0x3e4>)
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	3301      	adds	r3, #1
 800f596:	4a2c      	ldr	r2, [pc, #176]	; (800f648 <run_shortest+0x3e8>)
 800f598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f59c:	f113 0f03 	cmn.w	r3, #3
 800f5a0:	d131      	bne.n	800f606 <run_shortest+0x3a6>
 800f5a2:	4b28      	ldr	r3, [pc, #160]	; (800f644 <run_shortest+0x3e4>)
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	3302      	adds	r3, #2
 800f5a8:	4a27      	ldr	r2, [pc, #156]	; (800f648 <run_shortest+0x3e8>)
 800f5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	dd29      	ble.n	800f606 <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f5b2:	4b24      	ldr	r3, [pc, #144]	; (800f644 <run_shortest+0x3e4>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	4a23      	ldr	r2, [pc, #140]	; (800f648 <run_shortest+0x3e8>)
 800f5ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f5be:	4b21      	ldr	r3, [pc, #132]	; (800f644 <run_shortest+0x3e4>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	3a01      	subs	r2, #1
 800f5c6:	4920      	ldr	r1, [pc, #128]	; (800f648 <run_shortest+0x3e8>)
 800f5c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f5cc:	4b1d      	ldr	r3, [pc, #116]	; (800f644 <run_shortest+0x3e4>)
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	4b1d      	ldr	r3, [pc, #116]	; (800f648 <run_shortest+0x3e8>)
 800f5d4:	f06f 0206 	mvn.w	r2, #6
 800f5d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f5dc:	4b19      	ldr	r3, [pc, #100]	; (800f644 <run_shortest+0x3e4>)
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	4a19      	ldr	r2, [pc, #100]	; (800f648 <run_shortest+0x3e8>)
 800f5e4:	f04f 31ff 	mov.w	r1, #4294967295
 800f5e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f5ec:	4b15      	ldr	r3, [pc, #84]	; (800f644 <run_shortest+0x3e4>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	3302      	adds	r3, #2
 800f5f2:	4a15      	ldr	r2, [pc, #84]	; (800f648 <run_shortest+0x3e8>)
 800f5f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f5f8:	4b12      	ldr	r3, [pc, #72]	; (800f644 <run_shortest+0x3e4>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	3302      	adds	r3, #2
 800f5fe:	3a01      	subs	r2, #1
 800f600:	4911      	ldr	r1, [pc, #68]	; (800f648 <run_shortest+0x3e8>)
 800f602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f606:	4b0f      	ldr	r3, [pc, #60]	; (800f644 <run_shortest+0x3e4>)
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	461a      	mov	r2, r3
 800f60c:	4b0e      	ldr	r3, [pc, #56]	; (800f648 <run_shortest+0x3e8>)
 800f60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f612:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f616:	4b0b      	ldr	r3, [pc, #44]	; (800f644 <run_shortest+0x3e4>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	4a0a      	ldr	r2, [pc, #40]	; (800f648 <run_shortest+0x3e8>)
 800f61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d107      	bne.n	800f636 <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f626:	4b07      	ldr	r3, [pc, #28]	; (800f644 <run_shortest+0x3e4>)
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	3b01      	subs	r3, #1
 800f62c:	4a06      	ldr	r2, [pc, #24]	; (800f648 <run_shortest+0x3e8>)
 800f62e:	f04f 31ff 	mov.w	r1, #4294967295
 800f632:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f636:	4b03      	ldr	r3, [pc, #12]	; (800f644 <run_shortest+0x3e4>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	3301      	adds	r3, #1
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	4b01      	ldr	r3, [pc, #4]	; (800f644 <run_shortest+0x3e4>)
 800f640:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f642:	e6c0      	b.n	800f3c6 <run_shortest+0x166>
 800f644:	20000828 	.word	0x20000828
 800f648:	2000083c 	.word	0x2000083c
			break;
 800f64c:	bf00      	nop
	}

	pass_count = 1;
 800f64e:	4b8c      	ldr	r3, [pc, #560]	; (800f880 <run_shortest+0x620>)
 800f650:	2201      	movs	r2, #1
 800f652:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f654:	7a7b      	ldrb	r3, [r7, #9]
 800f656:	2b01      	cmp	r3, #1
 800f658:	f040 836a 	bne.w	800fd30 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f65c:	4b88      	ldr	r3, [pc, #544]	; (800f880 <run_shortest+0x620>)
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	461a      	mov	r2, r3
 800f662:	4b88      	ldr	r3, [pc, #544]	; (800f884 <run_shortest+0x624>)
 800f664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f000 81f1 	beq.w	800fa50 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f66e:	4b84      	ldr	r3, [pc, #528]	; (800f880 <run_shortest+0x620>)
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	3b01      	subs	r3, #1
 800f674:	4a83      	ldr	r2, [pc, #524]	; (800f884 <run_shortest+0x624>)
 800f676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f340 81dc 	ble.w	800fa38 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f680:	4b7f      	ldr	r3, [pc, #508]	; (800f880 <run_shortest+0x620>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	461a      	mov	r2, r3
 800f686:	4b7f      	ldr	r3, [pc, #508]	; (800f884 <run_shortest+0x624>)
 800f688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f68c:	f113 0f02 	cmn.w	r3, #2
 800f690:	d009      	beq.n	800f6a6 <run_shortest+0x446>
 800f692:	4b7b      	ldr	r3, [pc, #492]	; (800f880 <run_shortest+0x620>)
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	4b7a      	ldr	r3, [pc, #488]	; (800f884 <run_shortest+0x624>)
 800f69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f69e:	f113 0f03 	cmn.w	r3, #3
 800f6a2:	f040 81c9 	bne.w	800fa38 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f6a6:	4b76      	ldr	r3, [pc, #472]	; (800f880 <run_shortest+0x620>)
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	4b75      	ldr	r3, [pc, #468]	; (800f884 <run_shortest+0x624>)
 800f6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b2:	f113 0f02 	cmn.w	r3, #2
 800f6b6:	d12d      	bne.n	800f714 <run_shortest+0x4b4>
 800f6b8:	4b71      	ldr	r3, [pc, #452]	; (800f880 <run_shortest+0x620>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	4a71      	ldr	r2, [pc, #452]	; (800f884 <run_shortest+0x624>)
 800f6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6c4:	f113 0f03 	cmn.w	r3, #3
 800f6c8:	d124      	bne.n	800f714 <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f6ca:	4b6d      	ldr	r3, [pc, #436]	; (800f880 <run_shortest+0x620>)
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	4a6c      	ldr	r2, [pc, #432]	; (800f884 <run_shortest+0x624>)
 800f6d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f6d6:	4b6a      	ldr	r3, [pc, #424]	; (800f880 <run_shortest+0x620>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	3a01      	subs	r2, #1
 800f6de:	4969      	ldr	r1, [pc, #420]	; (800f884 <run_shortest+0x624>)
 800f6e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f6e4:	4b66      	ldr	r3, [pc, #408]	; (800f880 <run_shortest+0x620>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	4a66      	ldr	r2, [pc, #408]	; (800f884 <run_shortest+0x624>)
 800f6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d107      	bne.n	800f704 <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f6f4:	4b62      	ldr	r3, [pc, #392]	; (800f880 <run_shortest+0x620>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	4a62      	ldr	r2, [pc, #392]	; (800f884 <run_shortest+0x624>)
 800f6fc:	f04f 31ff 	mov.w	r1, #4294967295
 800f700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f704:	4b5e      	ldr	r3, [pc, #376]	; (800f880 <run_shortest+0x620>)
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	4619      	mov	r1, r3
 800f70a:	4b5e      	ldr	r3, [pc, #376]	; (800f884 <run_shortest+0x624>)
 800f70c:	f06f 0207 	mvn.w	r2, #7
 800f710:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f714:	4b5a      	ldr	r3, [pc, #360]	; (800f880 <run_shortest+0x620>)
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	461a      	mov	r2, r3
 800f71a:	4b5a      	ldr	r3, [pc, #360]	; (800f884 <run_shortest+0x624>)
 800f71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f720:	f113 0f03 	cmn.w	r3, #3
 800f724:	d12d      	bne.n	800f782 <run_shortest+0x522>
 800f726:	4b56      	ldr	r3, [pc, #344]	; (800f880 <run_shortest+0x620>)
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	3301      	adds	r3, #1
 800f72c:	4a55      	ldr	r2, [pc, #340]	; (800f884 <run_shortest+0x624>)
 800f72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f732:	f113 0f02 	cmn.w	r3, #2
 800f736:	d124      	bne.n	800f782 <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f738:	4b51      	ldr	r3, [pc, #324]	; (800f880 <run_shortest+0x620>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	4a51      	ldr	r2, [pc, #324]	; (800f884 <run_shortest+0x624>)
 800f740:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f744:	4b4e      	ldr	r3, [pc, #312]	; (800f880 <run_shortest+0x620>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	3b01      	subs	r3, #1
 800f74a:	3a01      	subs	r2, #1
 800f74c:	494d      	ldr	r1, [pc, #308]	; (800f884 <run_shortest+0x624>)
 800f74e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f752:	4b4b      	ldr	r3, [pc, #300]	; (800f880 <run_shortest+0x620>)
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	3b01      	subs	r3, #1
 800f758:	4a4a      	ldr	r2, [pc, #296]	; (800f884 <run_shortest+0x624>)
 800f75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d107      	bne.n	800f772 <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f762:	4b47      	ldr	r3, [pc, #284]	; (800f880 <run_shortest+0x620>)
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	3b01      	subs	r3, #1
 800f768:	4a46      	ldr	r2, [pc, #280]	; (800f884 <run_shortest+0x624>)
 800f76a:	f04f 31ff 	mov.w	r1, #4294967295
 800f76e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f772:	4b43      	ldr	r3, [pc, #268]	; (800f880 <run_shortest+0x620>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	4619      	mov	r1, r3
 800f778:	4b42      	ldr	r3, [pc, #264]	; (800f884 <run_shortest+0x624>)
 800f77a:	f06f 0208 	mvn.w	r2, #8
 800f77e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f782:	4b3f      	ldr	r3, [pc, #252]	; (800f880 <run_shortest+0x620>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	4b3e      	ldr	r3, [pc, #248]	; (800f884 <run_shortest+0x624>)
 800f78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f78e:	f113 0f02 	cmn.w	r3, #2
 800f792:	d135      	bne.n	800f800 <run_shortest+0x5a0>
 800f794:	4b3a      	ldr	r3, [pc, #232]	; (800f880 <run_shortest+0x620>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	3301      	adds	r3, #1
 800f79a:	4a3a      	ldr	r2, [pc, #232]	; (800f884 <run_shortest+0x624>)
 800f79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7a0:	f113 0f02 	cmn.w	r3, #2
 800f7a4:	d12c      	bne.n	800f800 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f7a6:	4b36      	ldr	r3, [pc, #216]	; (800f880 <run_shortest+0x620>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	3b01      	subs	r3, #1
 800f7ac:	4a35      	ldr	r2, [pc, #212]	; (800f884 <run_shortest+0x624>)
 800f7ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f7b2:	4b33      	ldr	r3, [pc, #204]	; (800f880 <run_shortest+0x620>)
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	3a01      	subs	r2, #1
 800f7ba:	4932      	ldr	r1, [pc, #200]	; (800f884 <run_shortest+0x624>)
 800f7bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f7c0:	4b2f      	ldr	r3, [pc, #188]	; (800f880 <run_shortest+0x620>)
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	4a2f      	ldr	r2, [pc, #188]	; (800f884 <run_shortest+0x624>)
 800f7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d107      	bne.n	800f7e0 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f7d0:	4b2b      	ldr	r3, [pc, #172]	; (800f880 <run_shortest+0x620>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	4a2b      	ldr	r2, [pc, #172]	; (800f884 <run_shortest+0x624>)
 800f7d8:	f04f 31ff 	mov.w	r1, #4294967295
 800f7dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f7e0:	4b27      	ldr	r3, [pc, #156]	; (800f880 <run_shortest+0x620>)
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	4b27      	ldr	r3, [pc, #156]	; (800f884 <run_shortest+0x624>)
 800f7e8:	f06f 0209 	mvn.w	r2, #9
 800f7ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f7f0:	4b23      	ldr	r3, [pc, #140]	; (800f880 <run_shortest+0x620>)
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	4a23      	ldr	r2, [pc, #140]	; (800f884 <run_shortest+0x624>)
 800f7f8:	f04f 31ff 	mov.w	r1, #4294967295
 800f7fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f800:	4b1f      	ldr	r3, [pc, #124]	; (800f880 <run_shortest+0x620>)
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	461a      	mov	r2, r3
 800f806:	4b1f      	ldr	r3, [pc, #124]	; (800f884 <run_shortest+0x624>)
 800f808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f80c:	f113 0f03 	cmn.w	r3, #3
 800f810:	d140      	bne.n	800f894 <run_shortest+0x634>
 800f812:	4b1b      	ldr	r3, [pc, #108]	; (800f880 <run_shortest+0x620>)
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	3301      	adds	r3, #1
 800f818:	4a1a      	ldr	r2, [pc, #104]	; (800f884 <run_shortest+0x624>)
 800f81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f81e:	f113 0f03 	cmn.w	r3, #3
 800f822:	d137      	bne.n	800f894 <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f824:	4b16      	ldr	r3, [pc, #88]	; (800f880 <run_shortest+0x620>)
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	3b01      	subs	r3, #1
 800f82a:	4a16      	ldr	r2, [pc, #88]	; (800f884 <run_shortest+0x624>)
 800f82c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f830:	4b13      	ldr	r3, [pc, #76]	; (800f880 <run_shortest+0x620>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	3b01      	subs	r3, #1
 800f836:	3a01      	subs	r2, #1
 800f838:	4912      	ldr	r1, [pc, #72]	; (800f884 <run_shortest+0x624>)
 800f83a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f83e:	4b10      	ldr	r3, [pc, #64]	; (800f880 <run_shortest+0x620>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	3b01      	subs	r3, #1
 800f844:	4a0f      	ldr	r2, [pc, #60]	; (800f884 <run_shortest+0x624>)
 800f846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d107      	bne.n	800f85e <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f84e:	4b0c      	ldr	r3, [pc, #48]	; (800f880 <run_shortest+0x620>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	3b01      	subs	r3, #1
 800f854:	4a0b      	ldr	r2, [pc, #44]	; (800f884 <run_shortest+0x624>)
 800f856:	f04f 31ff 	mov.w	r1, #4294967295
 800f85a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f85e:	4b08      	ldr	r3, [pc, #32]	; (800f880 <run_shortest+0x620>)
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	4619      	mov	r1, r3
 800f864:	4b07      	ldr	r3, [pc, #28]	; (800f884 <run_shortest+0x624>)
 800f866:	f06f 020a 	mvn.w	r2, #10
 800f86a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f86e:	4b04      	ldr	r3, [pc, #16]	; (800f880 <run_shortest+0x620>)
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	3301      	adds	r3, #1
 800f874:	4a03      	ldr	r2, [pc, #12]	; (800f884 <run_shortest+0x624>)
 800f876:	f04f 31ff 	mov.w	r1, #4294967295
 800f87a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f87e:	e009      	b.n	800f894 <run_shortest+0x634>
 800f880:	20000828 	.word	0x20000828
 800f884:	2000083c 	.word	0x2000083c
						pass_count++;
 800f888:	4b6f      	ldr	r3, [pc, #444]	; (800fa48 <run_shortest+0x7e8>)
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	3301      	adds	r3, #1
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	4b6d      	ldr	r3, [pc, #436]	; (800fa48 <run_shortest+0x7e8>)
 800f892:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f894:	4b6c      	ldr	r3, [pc, #432]	; (800fa48 <run_shortest+0x7e8>)
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	461a      	mov	r2, r3
 800f89a:	4b6c      	ldr	r3, [pc, #432]	; (800fa4c <run_shortest+0x7ec>)
 800f89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	dbf1      	blt.n	800f888 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f8a4:	4b68      	ldr	r3, [pc, #416]	; (800fa48 <run_shortest+0x7e8>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	3b01      	subs	r3, #1
 800f8aa:	4a68      	ldr	r2, [pc, #416]	; (800fa4c <run_shortest+0x7ec>)
 800f8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8b0:	f113 0f02 	cmn.w	r3, #2
 800f8b4:	d15b      	bne.n	800f96e <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f8b6:	4b64      	ldr	r3, [pc, #400]	; (800fa48 <run_shortest+0x7e8>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	3b02      	subs	r3, #2
 800f8bc:	4a63      	ldr	r2, [pc, #396]	; (800fa4c <run_shortest+0x7ec>)
 800f8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c2:	f113 0f02 	cmn.w	r3, #2
 800f8c6:	d12d      	bne.n	800f924 <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f8c8:	4b5f      	ldr	r3, [pc, #380]	; (800fa48 <run_shortest+0x7e8>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	4b5f      	ldr	r3, [pc, #380]	; (800fa4c <run_shortest+0x7ec>)
 800f8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d4:	4a5c      	ldr	r2, [pc, #368]	; (800fa48 <run_shortest+0x7e8>)
 800f8d6:	7812      	ldrb	r2, [r2, #0]
 800f8d8:	4611      	mov	r1, r2
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	4a5b      	ldr	r2, [pc, #364]	; (800fa4c <run_shortest+0x7ec>)
 800f8de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f8e2:	4b59      	ldr	r3, [pc, #356]	; (800fa48 <run_shortest+0x7e8>)
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	4b58      	ldr	r3, [pc, #352]	; (800fa4c <run_shortest+0x7ec>)
 800f8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d107      	bne.n	800f902 <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f8f2:	4b55      	ldr	r3, [pc, #340]	; (800fa48 <run_shortest+0x7e8>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4b54      	ldr	r3, [pc, #336]	; (800fa4c <run_shortest+0x7ec>)
 800f8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f8fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f902:	4b51      	ldr	r3, [pc, #324]	; (800fa48 <run_shortest+0x7e8>)
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	3b01      	subs	r3, #1
 800f908:	4a50      	ldr	r2, [pc, #320]	; (800fa4c <run_shortest+0x7ec>)
 800f90a:	f06f 010d 	mvn.w	r1, #13
 800f90e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f912:	4b4d      	ldr	r3, [pc, #308]	; (800fa48 <run_shortest+0x7e8>)
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	3b02      	subs	r3, #2
 800f918:	4a4c      	ldr	r2, [pc, #304]	; (800fa4c <run_shortest+0x7ec>)
 800f91a:	f04f 31ff 	mov.w	r1, #4294967295
 800f91e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f922:	e024      	b.n	800f96e <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f924:	4b48      	ldr	r3, [pc, #288]	; (800fa48 <run_shortest+0x7e8>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	461a      	mov	r2, r3
 800f92a:	4b48      	ldr	r3, [pc, #288]	; (800fa4c <run_shortest+0x7ec>)
 800f92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f930:	4a45      	ldr	r2, [pc, #276]	; (800fa48 <run_shortest+0x7e8>)
 800f932:	7812      	ldrb	r2, [r2, #0]
 800f934:	4611      	mov	r1, r2
 800f936:	3b01      	subs	r3, #1
 800f938:	4a44      	ldr	r2, [pc, #272]	; (800fa4c <run_shortest+0x7ec>)
 800f93a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f93e:	4b42      	ldr	r3, [pc, #264]	; (800fa48 <run_shortest+0x7e8>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	461a      	mov	r2, r3
 800f944:	4b41      	ldr	r3, [pc, #260]	; (800fa4c <run_shortest+0x7ec>)
 800f946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d107      	bne.n	800f95e <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f94e:	4b3e      	ldr	r3, [pc, #248]	; (800fa48 <run_shortest+0x7e8>)
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	4619      	mov	r1, r3
 800f954:	4b3d      	ldr	r3, [pc, #244]	; (800fa4c <run_shortest+0x7ec>)
 800f956:	f04f 32ff 	mov.w	r2, #4294967295
 800f95a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f95e:	4b3a      	ldr	r3, [pc, #232]	; (800fa48 <run_shortest+0x7e8>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	3b01      	subs	r3, #1
 800f964:	4a39      	ldr	r2, [pc, #228]	; (800fa4c <run_shortest+0x7ec>)
 800f966:	f06f 010b 	mvn.w	r1, #11
 800f96a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f96e:	4b36      	ldr	r3, [pc, #216]	; (800fa48 <run_shortest+0x7e8>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	3b01      	subs	r3, #1
 800f974:	4a35      	ldr	r2, [pc, #212]	; (800fa4c <run_shortest+0x7ec>)
 800f976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f97a:	f113 0f03 	cmn.w	r3, #3
 800f97e:	d15b      	bne.n	800fa38 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f980:	4b31      	ldr	r3, [pc, #196]	; (800fa48 <run_shortest+0x7e8>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	3b02      	subs	r3, #2
 800f986:	4a31      	ldr	r2, [pc, #196]	; (800fa4c <run_shortest+0x7ec>)
 800f988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f98c:	f113 0f03 	cmn.w	r3, #3
 800f990:	d12d      	bne.n	800f9ee <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f992:	4b2d      	ldr	r3, [pc, #180]	; (800fa48 <run_shortest+0x7e8>)
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	461a      	mov	r2, r3
 800f998:	4b2c      	ldr	r3, [pc, #176]	; (800fa4c <run_shortest+0x7ec>)
 800f99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f99e:	4a2a      	ldr	r2, [pc, #168]	; (800fa48 <run_shortest+0x7e8>)
 800f9a0:	7812      	ldrb	r2, [r2, #0]
 800f9a2:	4611      	mov	r1, r2
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	4a29      	ldr	r2, [pc, #164]	; (800fa4c <run_shortest+0x7ec>)
 800f9a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f9ac:	4b26      	ldr	r3, [pc, #152]	; (800fa48 <run_shortest+0x7e8>)
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	4b26      	ldr	r3, [pc, #152]	; (800fa4c <run_shortest+0x7ec>)
 800f9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d107      	bne.n	800f9cc <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f9bc:	4b22      	ldr	r3, [pc, #136]	; (800fa48 <run_shortest+0x7e8>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	4b22      	ldr	r3, [pc, #136]	; (800fa4c <run_shortest+0x7ec>)
 800f9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f9cc:	4b1e      	ldr	r3, [pc, #120]	; (800fa48 <run_shortest+0x7e8>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	4a1e      	ldr	r2, [pc, #120]	; (800fa4c <run_shortest+0x7ec>)
 800f9d4:	f06f 010e 	mvn.w	r1, #14
 800f9d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f9dc:	4b1a      	ldr	r3, [pc, #104]	; (800fa48 <run_shortest+0x7e8>)
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	3b02      	subs	r3, #2
 800f9e2:	4a1a      	ldr	r2, [pc, #104]	; (800fa4c <run_shortest+0x7ec>)
 800f9e4:	f04f 31ff 	mov.w	r1, #4294967295
 800f9e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f9ec:	e024      	b.n	800fa38 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f9ee:	4b16      	ldr	r3, [pc, #88]	; (800fa48 <run_shortest+0x7e8>)
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	4b15      	ldr	r3, [pc, #84]	; (800fa4c <run_shortest+0x7ec>)
 800f9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9fa:	4a13      	ldr	r2, [pc, #76]	; (800fa48 <run_shortest+0x7e8>)
 800f9fc:	7812      	ldrb	r2, [r2, #0]
 800f9fe:	4611      	mov	r1, r2
 800fa00:	3b01      	subs	r3, #1
 800fa02:	4a12      	ldr	r2, [pc, #72]	; (800fa4c <run_shortest+0x7ec>)
 800fa04:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800fa08:	4b0f      	ldr	r3, [pc, #60]	; (800fa48 <run_shortest+0x7e8>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	4b0f      	ldr	r3, [pc, #60]	; (800fa4c <run_shortest+0x7ec>)
 800fa10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d107      	bne.n	800fa28 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800fa18:	4b0b      	ldr	r3, [pc, #44]	; (800fa48 <run_shortest+0x7e8>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	4b0b      	ldr	r3, [pc, #44]	; (800fa4c <run_shortest+0x7ec>)
 800fa20:	f04f 32ff 	mov.w	r2, #4294967295
 800fa24:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800fa28:	4b07      	ldr	r3, [pc, #28]	; (800fa48 <run_shortest+0x7e8>)
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	4a07      	ldr	r2, [pc, #28]	; (800fa4c <run_shortest+0x7ec>)
 800fa30:	f06f 010c 	mvn.w	r1, #12
 800fa34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800fa38:	4b03      	ldr	r3, [pc, #12]	; (800fa48 <run_shortest+0x7e8>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	4b01      	ldr	r3, [pc, #4]	; (800fa48 <run_shortest+0x7e8>)
 800fa42:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fa44:	e60a      	b.n	800f65c <run_shortest+0x3fc>
 800fa46:	bf00      	nop
 800fa48:	20000828 	.word	0x20000828
 800fa4c:	2000083c 	.word	0x2000083c
				break;
 800fa50:	bf00      	nop
		}

		pass_count = 1;
 800fa52:	4ba3      	ldr	r3, [pc, #652]	; (800fce0 <run_shortest+0xa80>)
 800fa54:	2201      	movs	r2, #1
 800fa56:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800fa58:	4ba1      	ldr	r3, [pc, #644]	; (800fce0 <run_shortest+0xa80>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	4ba1      	ldr	r3, [pc, #644]	; (800fce4 <run_shortest+0xa84>)
 800fa60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f000 813f 	beq.w	800fce8 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800fa6a:	4b9d      	ldr	r3, [pc, #628]	; (800fce0 <run_shortest+0xa80>)
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	4b9c      	ldr	r3, [pc, #624]	; (800fce4 <run_shortest+0xa84>)
 800fa72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa76:	f113 0f08 	cmn.w	r3, #8
 800fa7a:	d01b      	beq.n	800fab4 <run_shortest+0x854>
 800fa7c:	4b98      	ldr	r3, [pc, #608]	; (800fce0 <run_shortest+0xa80>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	461a      	mov	r2, r3
 800fa82:	4b98      	ldr	r3, [pc, #608]	; (800fce4 <run_shortest+0xa84>)
 800fa84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa88:	f113 0f09 	cmn.w	r3, #9
 800fa8c:	d012      	beq.n	800fab4 <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800fa8e:	4b94      	ldr	r3, [pc, #592]	; (800fce0 <run_shortest+0xa80>)
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	461a      	mov	r2, r3
 800fa94:	4b93      	ldr	r3, [pc, #588]	; (800fce4 <run_shortest+0xa84>)
 800fa96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa9a:	f113 0f0a 	cmn.w	r3, #10
 800fa9e:	d009      	beq.n	800fab4 <run_shortest+0x854>
 800faa0:	4b8f      	ldr	r3, [pc, #572]	; (800fce0 <run_shortest+0xa80>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	461a      	mov	r2, r3
 800faa6:	4b8f      	ldr	r3, [pc, #572]	; (800fce4 <run_shortest+0xa84>)
 800faa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faac:	f113 0f0b 	cmn.w	r3, #11
 800fab0:	f040 810f 	bne.w	800fcd2 <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800fab4:	4b8a      	ldr	r3, [pc, #552]	; (800fce0 <run_shortest+0xa80>)
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	461a      	mov	r2, r3
 800faba:	4b8a      	ldr	r3, [pc, #552]	; (800fce4 <run_shortest+0xa84>)
 800fabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fac0:	f113 0f08 	cmn.w	r3, #8
 800fac4:	d008      	beq.n	800fad8 <run_shortest+0x878>
 800fac6:	4b86      	ldr	r3, [pc, #536]	; (800fce0 <run_shortest+0xa80>)
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	461a      	mov	r2, r3
 800facc:	4b85      	ldr	r3, [pc, #532]	; (800fce4 <run_shortest+0xa84>)
 800face:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fad2:	f113 0f0a 	cmn.w	r3, #10
 800fad6:	d102      	bne.n	800fade <run_shortest+0x87e>
					slant_direction = -3;
 800fad8:	f06f 0302 	mvn.w	r3, #2
 800fadc:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800fade:	4b80      	ldr	r3, [pc, #512]	; (800fce0 <run_shortest+0xa80>)
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	4b7f      	ldr	r3, [pc, #508]	; (800fce4 <run_shortest+0xa84>)
 800fae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faea:	f113 0f09 	cmn.w	r3, #9
 800faee:	d008      	beq.n	800fb02 <run_shortest+0x8a2>
 800faf0:	4b7b      	ldr	r3, [pc, #492]	; (800fce0 <run_shortest+0xa80>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	461a      	mov	r2, r3
 800faf6:	4b7b      	ldr	r3, [pc, #492]	; (800fce4 <run_shortest+0xa84>)
 800faf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fafc:	f113 0f0b 	cmn.w	r3, #11
 800fb00:	d102      	bne.n	800fb08 <run_shortest+0x8a8>
					slant_direction = -2;
 800fb02:	f06f 0301 	mvn.w	r3, #1
 800fb06:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800fb08:	4b75      	ldr	r3, [pc, #468]	; (800fce0 <run_shortest+0xa80>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	4b73      	ldr	r3, [pc, #460]	; (800fce0 <run_shortest+0xa80>)
 800fb12:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fb14:	4b72      	ldr	r3, [pc, #456]	; (800fce0 <run_shortest+0xa80>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	4b72      	ldr	r3, [pc, #456]	; (800fce4 <run_shortest+0xa84>)
 800fb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb24:	d105      	bne.n	800fb32 <run_shortest+0x8d2>
					pass_count++;
 800fb26:	4b6e      	ldr	r3, [pc, #440]	; (800fce0 <run_shortest+0xa80>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	4b6c      	ldr	r3, [pc, #432]	; (800fce0 <run_shortest+0xa80>)
 800fb30:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fb32:	4b6b      	ldr	r3, [pc, #428]	; (800fce0 <run_shortest+0xa80>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	461a      	mov	r2, r3
 800fb38:	4b6a      	ldr	r3, [pc, #424]	; (800fce4 <run_shortest+0xa84>)
 800fb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb42:	d105      	bne.n	800fb50 <run_shortest+0x8f0>
					pass_count++;
 800fb44:	4b66      	ldr	r3, [pc, #408]	; (800fce0 <run_shortest+0xa80>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	b2da      	uxtb	r2, r3
 800fb4c:	4b64      	ldr	r3, [pc, #400]	; (800fce0 <run_shortest+0xa80>)
 800fb4e:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800fb50:	4b63      	ldr	r3, [pc, #396]	; (800fce0 <run_shortest+0xa80>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	461a      	mov	r2, r3
 800fb56:	4b63      	ldr	r3, [pc, #396]	; (800fce4 <run_shortest+0xa84>)
 800fb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5c:	f113 0f03 	cmn.w	r3, #3
 800fb60:	f2c0 80ad 	blt.w	800fcbe <run_shortest+0xa5e>
					slant_count = pass_count;
 800fb64:	4b5e      	ldr	r3, [pc, #376]	; (800fce0 <run_shortest+0xa80>)
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800fb6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb70:	4a5c      	ldr	r2, [pc, #368]	; (800fce4 <run_shortest+0xa84>)
 800fb72:	2133      	movs	r1, #51	; 0x33
 800fb74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800fb78:	4b59      	ldr	r3, [pc, #356]	; (800fce0 <run_shortest+0xa80>)
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	b2da      	uxtb	r2, r3
 800fb80:	4b57      	ldr	r3, [pc, #348]	; (800fce0 <run_shortest+0xa80>)
 800fb82:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800fb84:	e09b      	b.n	800fcbe <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fb86:	4b56      	ldr	r3, [pc, #344]	; (800fce0 <run_shortest+0xa80>)
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	4b55      	ldr	r3, [pc, #340]	; (800fce4 <run_shortest+0xa84>)
 800fb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb96:	d105      	bne.n	800fba4 <run_shortest+0x944>
						pass_count++;
 800fb98:	4b51      	ldr	r3, [pc, #324]	; (800fce0 <run_shortest+0xa80>)
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	b2da      	uxtb	r2, r3
 800fba0:	4b4f      	ldr	r3, [pc, #316]	; (800fce0 <run_shortest+0xa80>)
 800fba2:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800fba4:	4b4e      	ldr	r3, [pc, #312]	; (800fce0 <run_shortest+0xa80>)
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	461a      	mov	r2, r3
 800fbaa:	4b4e      	ldr	r3, [pc, #312]	; (800fce4 <run_shortest+0xa84>)
 800fbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb0:	f113 0f0c 	cmn.w	r3, #12
 800fbb4:	f000 808d 	beq.w	800fcd2 <run_shortest+0xa72>
 800fbb8:	4b49      	ldr	r3, [pc, #292]	; (800fce0 <run_shortest+0xa80>)
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b49      	ldr	r3, [pc, #292]	; (800fce4 <run_shortest+0xa84>)
 800fbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc4:	f113 0f0d 	cmn.w	r3, #13
 800fbc8:	f000 8083 	beq.w	800fcd2 <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800fbcc:	4b44      	ldr	r3, [pc, #272]	; (800fce0 <run_shortest+0xa80>)
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	4b44      	ldr	r3, [pc, #272]	; (800fce4 <run_shortest+0xa84>)
 800fbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbd8:	f113 0f0e 	cmn.w	r3, #14
 800fbdc:	d079      	beq.n	800fcd2 <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800fbde:	4b40      	ldr	r3, [pc, #256]	; (800fce0 <run_shortest+0xa80>)
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	4b3f      	ldr	r3, [pc, #252]	; (800fce4 <run_shortest+0xa84>)
 800fbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbea:	f113 0f0f 	cmn.w	r3, #15
 800fbee:	d070      	beq.n	800fcd2 <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800fbf0:	4b3b      	ldr	r3, [pc, #236]	; (800fce0 <run_shortest+0xa80>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	4b3b      	ldr	r3, [pc, #236]	; (800fce4 <run_shortest+0xa84>)
 800fbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d127      	bne.n	800fc52 <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800fc02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc06:	4a37      	ldr	r2, [pc, #220]	; (800fce4 <run_shortest+0xa84>)
 800fc08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc10:	3a01      	subs	r2, #1
 800fc12:	4934      	ldr	r1, [pc, #208]	; (800fce4 <run_shortest+0xa84>)
 800fc14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800fc18:	4b31      	ldr	r3, [pc, #196]	; (800fce0 <run_shortest+0xa80>)
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	f113 0f02 	cmn.w	r3, #2
 800fc26:	d107      	bne.n	800fc38 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800fc28:	4b2d      	ldr	r3, [pc, #180]	; (800fce0 <run_shortest+0xa80>)
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	4b2d      	ldr	r3, [pc, #180]	; (800fce4 <run_shortest+0xa84>)
 800fc30:	f06f 020f 	mvn.w	r2, #15
 800fc34:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800fc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3a:	f113 0f03 	cmn.w	r3, #3
 800fc3e:	d138      	bne.n	800fcb2 <run_shortest+0xa52>
							pass[pass_count] = -17;
 800fc40:	4b27      	ldr	r3, [pc, #156]	; (800fce0 <run_shortest+0xa80>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	4619      	mov	r1, r3
 800fc46:	4b27      	ldr	r3, [pc, #156]	; (800fce4 <run_shortest+0xa84>)
 800fc48:	f06f 0210 	mvn.w	r2, #16
 800fc4c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fc50:	e02f      	b.n	800fcb2 <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800fc52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc56:	4a23      	ldr	r2, [pc, #140]	; (800fce4 <run_shortest+0xa84>)
 800fc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc5c:	2b31      	cmp	r3, #49	; 0x31
 800fc5e:	dd08      	ble.n	800fc72 <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fc60:	4b1f      	ldr	r3, [pc, #124]	; (800fce0 <run_shortest+0xa80>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	4619      	mov	r1, r3
 800fc66:	4b1f      	ldr	r3, [pc, #124]	; (800fce4 <run_shortest+0xa84>)
 800fc68:	f04f 32ff 	mov.w	r2, #4294967295
 800fc6c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fc70:	e009      	b.n	800fc86 <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fc72:	4b1b      	ldr	r3, [pc, #108]	; (800fce0 <run_shortest+0xa80>)
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fc7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc7e:	4a19      	ldr	r2, [pc, #100]	; (800fce4 <run_shortest+0xa84>)
 800fc80:	2132      	movs	r1, #50	; 0x32
 800fc82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fc86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc8a:	4a16      	ldr	r2, [pc, #88]	; (800fce4 <run_shortest+0xa84>)
 800fc8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc94:	3201      	adds	r2, #1
 800fc96:	4913      	ldr	r1, [pc, #76]	; (800fce4 <run_shortest+0xa84>)
 800fc98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9e:	f113 0f02 	cmn.w	r3, #2
 800fca2:	d103      	bne.n	800fcac <run_shortest+0xa4c>
							slant_direction = -3;
 800fca4:	f06f 0302 	mvn.w	r3, #2
 800fca8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcaa:	e002      	b.n	800fcb2 <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fcac:	f06f 0301 	mvn.w	r3, #1
 800fcb0:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fcb2:	4b0b      	ldr	r3, [pc, #44]	; (800fce0 <run_shortest+0xa80>)
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	b2da      	uxtb	r2, r3
 800fcba:	4b09      	ldr	r3, [pc, #36]	; (800fce0 <run_shortest+0xa80>)
 800fcbc:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fcbe:	4b08      	ldr	r3, [pc, #32]	; (800fce0 <run_shortest+0xa80>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	4b07      	ldr	r3, [pc, #28]	; (800fce4 <run_shortest+0xa84>)
 800fcc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcca:	f113 0f03 	cmn.w	r3, #3
 800fcce:	f6bf af5a 	bge.w	800fb86 <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fcd2:	4b03      	ldr	r3, [pc, #12]	; (800fce0 <run_shortest+0xa80>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	b2da      	uxtb	r2, r3
 800fcda:	4b01      	ldr	r3, [pc, #4]	; (800fce0 <run_shortest+0xa80>)
 800fcdc:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fcde:	e6bb      	b.n	800fa58 <run_shortest+0x7f8>
 800fce0:	20000828 	.word	0x20000828
 800fce4:	2000083c 	.word	0x2000083c
				break;
 800fce8:	bf00      	nop
		}
		pass_count=0;
 800fcea:	4bb3      	ldr	r3, [pc, #716]	; (800ffb8 <run_shortest+0xd58>)
 800fcec:	2200      	movs	r2, #0
 800fcee:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fcf0:	4bb1      	ldr	r3, [pc, #708]	; (800ffb8 <run_shortest+0xd58>)
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	4bb1      	ldr	r3, [pc, #708]	; (800ffbc <run_shortest+0xd5c>)
 800fcf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcfc:	2b32      	cmp	r3, #50	; 0x32
 800fcfe:	d107      	bne.n	800fd10 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800fd00:	4bad      	ldr	r3, [pc, #692]	; (800ffb8 <run_shortest+0xd58>)
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	4619      	mov	r1, r3
 800fd06:	4bad      	ldr	r3, [pc, #692]	; (800ffbc <run_shortest+0xd5c>)
 800fd08:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fd10:	4ba9      	ldr	r3, [pc, #676]	; (800ffb8 <run_shortest+0xd58>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	461a      	mov	r2, r3
 800fd16:	4ba9      	ldr	r3, [pc, #676]	; (800ffbc <run_shortest+0xd5c>)
 800fd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d006      	beq.n	800fd2e <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fd20:	4ba5      	ldr	r3, [pc, #660]	; (800ffb8 <run_shortest+0xd58>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	3301      	adds	r3, #1
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	4ba3      	ldr	r3, [pc, #652]	; (800ffb8 <run_shortest+0xd58>)
 800fd2a:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fd2c:	e7e0      	b.n	800fcf0 <run_shortest+0xa90>
				break;
 800fd2e:	bf00      	nop
		}

	}
}
	int j = 0;
 800fd30:	2300      	movs	r3, #0
 800fd32:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fd34:	e00b      	b.n	800fd4e <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fd36:	4aa1      	ldr	r2, [pc, #644]	; (800ffbc <run_shortest+0xd5c>)
 800fd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd42:	489f      	ldr	r0, [pc, #636]	; (800ffc0 <run_shortest+0xd60>)
 800fd44:	f00f fdc2 	bl	801f8cc <iprintf>
		j++;
 800fd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fd4e:	4a9b      	ldr	r2, [pc, #620]	; (800ffbc <run_shortest+0xd5c>)
 800fd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1ed      	bne.n	800fd36 <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd5e:	e002      	b.n	800fd66 <run_shortest+0xb06>
		pass_count2++;
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	3301      	adds	r3, #1
 800fd64:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd66:	4a95      	ldr	r2, [pc, #596]	; (800ffbc <run_shortest+0xd5c>)
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd72:	d0f5      	beq.n	800fd60 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fd74:	4a91      	ldr	r2, [pc, #580]	; (800ffbc <run_shortest+0xd5c>)
 800fd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd7c:	934e      	str	r3, [sp, #312]	; 0x138
 800fd7e:	4668      	mov	r0, sp
 800fd80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fd84:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fd88:	4619      	mov	r1, r3
 800fd8a:	f00f f91f 	bl	801efcc <memcpy>
 800fd8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd94:	f007 f90c 	bl	8016fb0 <get_center_velocity>
 800fd98:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fd9c:	6a38      	ldr	r0, [r7, #32]
 800fd9e:	f7f0 fbfb 	bl	8000598 <__aeabi_f2d>
 800fda2:	4602      	mov	r2, r0
 800fda4:	460b      	mov	r3, r1
 800fda6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fda8:	4886      	ldr	r0, [pc, #536]	; (800ffc4 <run_shortest+0xd64>)
 800fdaa:	f00f fd8f 	bl	801f8cc <iprintf>

	HAL_Delay(500);
 800fdae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fdb2:	f007 fe39 	bl	8017a28 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fdb6:	2001      	movs	r0, #1
 800fdb8:	f7f7 ffc4 	bl	8007d44 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fdbc:	2003      	movs	r0, #3
 800fdbe:	f7f7 fff3 	bl	8007da8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fdc2:	2003      	movs	r0, #3
 800fdc4:	f7f7 ffc8 	bl	8007d58 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fdc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fdcc:	f7f8 fad0 	bl	8008370 <wait_ms_NoReset>
	no_safty = 1;
 800fdd0:	4b7d      	ldr	r3, [pc, #500]	; (800ffc8 <run_shortest+0xd68>)
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fdd6:	4b7c      	ldr	r3, [pc, #496]	; (800ffc8 <run_shortest+0xd68>)
 800fdd8:	2200      	movs	r2, #0
 800fdda:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fddc:	f7f4 feaa 	bl	8004b34 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fde0:	7abb      	ldrb	r3, [r7, #10]
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d12d      	bne.n	800fe42 <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7f0 fbd6 	bl	8000598 <__aeabi_f2d>
 800fdec:	a370      	add	r3, pc, #448	; (adr r3, 800ffb0 <run_shortest+0xd50>)
 800fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf2:	f7f0 fc29 	bl	8000648 <__aeabi_dmul>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	4614      	mov	r4, r2
 800fdfc:	461d      	mov	r5, r3
 800fdfe:	4b73      	ldr	r3, [pc, #460]	; (800ffcc <run_shortest+0xd6c>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7f0 fbc8 	bl	8000598 <__aeabi_f2d>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	4629      	mov	r1, r5
 800fe10:	f7f0 fd44 	bl	800089c <__aeabi_ddiv>
 800fe14:	4602      	mov	r2, r0
 800fe16:	460b      	mov	r3, r1
 800fe18:	4610      	mov	r0, r2
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	f7f0 feec 	bl	8000bf8 <__aeabi_d2f>
 800fe20:	4603      	mov	r3, r0
 800fe22:	ee00 3a10 	vmov	s0, r3
 800fe26:	f7f8 f82b 	bl	8007e80 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fe2a:	f7f8 f815 	bl	8007e58 <pl_FunMotor_start>
		HAL_Delay(600);
 800fe2e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fe32:	f007 fdf9 	bl	8017a28 <HAL_Delay>
		reset_gyro();
 800fe36:	f7f1 fce3 	bl	8001800 <reset_gyro>
		reset_speed();
 800fe3a:	f7f1 f8ed 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fe3e:	f7f4 fe79 	bl	8004b34 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fe42:	4b63      	ldr	r3, [pc, #396]	; (800ffd0 <run_shortest+0xd70>)
 800fe44:	2201      	movs	r2, #1
 800fe46:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fe48:	4b62      	ldr	r3, [pc, #392]	; (800ffd4 <run_shortest+0xd74>)
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fe4e:	4b62      	ldr	r3, [pc, #392]	; (800ffd8 <run_shortest+0xd78>)
 800fe50:	2212      	movs	r2, #18
 800fe52:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fe54:	4b61      	ldr	r3, [pc, #388]	; (800ffdc <run_shortest+0xd7c>)
 800fe56:	2200      	movs	r2, #0
 800fe58:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fe5a:	4b57      	ldr	r3, [pc, #348]	; (800ffb8 <run_shortest+0xd58>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fe60:	2301      	movs	r3, #1
 800fe62:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fe64:	2300      	movs	r3, #0
 800fe66:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fe70:	2300      	movs	r3, #0
 800fe72:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fe74:	e002      	b.n	800fe7c <run_shortest+0xc1c>
		pass_count2++;
 800fe76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe78:	3301      	adds	r3, #1
 800fe7a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fe7c:	4a4f      	ldr	r2, [pc, #316]	; (800ffbc <run_shortest+0xd5c>)
 800fe7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe88:	d0f5      	beq.n	800fe76 <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fe8a:	4a4c      	ldr	r2, [pc, #304]	; (800ffbc <run_shortest+0xd5c>)
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe92:	934e      	str	r3, [sp, #312]	; 0x138
 800fe94:	4668      	mov	r0, sp
 800fe96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe9a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fe9e:	4619      	mov	r1, r3
 800fea0:	f00f f894 	bl	801efcc <memcpy>
 800fea4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800feaa:	f007 f881 	bl	8016fb0 <get_center_velocity>
 800feae:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800feb2:	edd7 7a08 	vldr	s15, [r7, #32]
 800feb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800feba:	ee17 0a90 	vmov	r0, s15
 800febe:	f7f0 fb6b 	bl	8000598 <__aeabi_f2d>
 800fec2:	f04f 0200 	mov.w	r2, #0
 800fec6:	4b46      	ldr	r3, [pc, #280]	; (800ffe0 <run_shortest+0xd80>)
 800fec8:	f7f0 fce8 	bl	800089c <__aeabi_ddiv>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	4610      	mov	r0, r2
 800fed2:	4619      	mov	r1, r3
 800fed4:	f04f 0200 	mov.w	r2, #0
 800fed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fedc:	f7f0 fcde 	bl	800089c <__aeabi_ddiv>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	4610      	mov	r0, r2
 800fee6:	4619      	mov	r1, r3
 800fee8:	f7f0 fe86 	bl	8000bf8 <__aeabi_d2f>
 800feec:	4603      	mov	r3, r0
 800feee:	69b8      	ldr	r0, [r7, #24]
 800fef0:	ee02 3a10 	vmov	s4, r3
 800fef4:	edd7 1a08 	vldr	s3, [r7, #32]
 800fef8:	ed97 1a08 	vldr	s2, [r7, #32]
 800fefc:	eddf 0a39 	vldr	s1, [pc, #228]	; 800ffe4 <run_shortest+0xd84>
 800ff00:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800ff04:	f7f3 f8ce 	bl	80030a4 <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800ff08:	4b2b      	ldr	r3, [pc, #172]	; (800ffb8 <run_shortest+0xd58>)
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800ff10:	e002      	b.n	800ff18 <run_shortest+0xcb8>
			pass_count2++;
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	3301      	adds	r3, #1
 800ff16:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800ff18:	4a28      	ldr	r2, [pc, #160]	; (800ffbc <run_shortest+0xd5c>)
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff24:	d0f5      	beq.n	800ff12 <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800ff26:	4a25      	ldr	r2, [pc, #148]	; (800ffbc <run_shortest+0xd5c>)
 800ff28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff2e:	934e      	str	r3, [sp, #312]	; 0x138
 800ff30:	4668      	mov	r0, sp
 800ff32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ff36:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	f00f f846 	bl	801efcc <memcpy>
 800ff40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ff44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff46:	f007 f833 	bl	8016fb0 <get_center_velocity>
 800ff4a:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800ff4e:	4b1a      	ldr	r3, [pc, #104]	; (800ffb8 <run_shortest+0xd58>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	4b19      	ldr	r3, [pc, #100]	; (800ffbc <run_shortest+0xd5c>)
 800ff56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff5e:	d106      	bne.n	800ff6e <run_shortest+0xd0e>
			pass_count++;
 800ff60:	4b15      	ldr	r3, [pc, #84]	; (800ffb8 <run_shortest+0xd58>)
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	3301      	adds	r3, #1
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	4b13      	ldr	r3, [pc, #76]	; (800ffb8 <run_shortest+0xd58>)
 800ff6a:	701a      	strb	r2, [r3, #0]
 800ff6c:	e2a1      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800ff6e:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <run_shortest+0xd58>)
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	461a      	mov	r2, r3
 800ff74:	4b11      	ldr	r3, [pc, #68]	; (800ffbc <run_shortest+0xd5c>)
 800ff76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff7a:	f113 0f02 	cmn.w	r3, #2
 800ff7e:	d133      	bne.n	800ffe8 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800ff80:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff84:	9303      	str	r3, [sp, #12]
 800ff86:	2301      	movs	r3, #1
 800ff88:	9302      	str	r3, [sp, #8]
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	9301      	str	r3, [sp, #4]
 800ff8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ff96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff98:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff9c:	f7fa fa16 	bl	800a3cc <slalomR>

			pass_count++;
 800ffa0:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <run_shortest+0xd58>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	b2da      	uxtb	r2, r3
 800ffa8:	4b03      	ldr	r3, [pc, #12]	; (800ffb8 <run_shortest+0xd58>)
 800ffaa:	701a      	strb	r2, [r3, #0]
 800ffac:	e281      	b.n	80104b2 <run_shortest+0x1252>
 800ffae:	bf00      	nop
 800ffb0:	cccccccd 	.word	0xcccccccd
 800ffb4:	4010cccc 	.word	0x4010cccc
 800ffb8:	20000828 	.word	0x20000828
 800ffbc:	2000083c 	.word	0x2000083c
 800ffc0:	080220e4 	.word	0x080220e4
 800ffc4:	080220fc 	.word	0x080220fc
 800ffc8:	20000806 	.word	0x20000806
 800ffcc:	200004d4 	.word	0x200004d4
 800ffd0:	20000834 	.word	0x20000834
 800ffd4:	20000808 	.word	0x20000808
 800ffd8:	2000d96c 	.word	0x2000d96c
 800ffdc:	20000830 	.word	0x20000830
 800ffe0:	40290000 	.word	0x40290000
 800ffe4:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800ffe8:	4baa      	ldr	r3, [pc, #680]	; (8010294 <run_shortest+0x1034>)
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	461a      	mov	r2, r3
 800ffee:	4baa      	ldr	r3, [pc, #680]	; (8010298 <run_shortest+0x1038>)
 800fff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff4:	f113 0f03 	cmn.w	r3, #3
 800fff8:	d116      	bne.n	8010028 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fffa:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fffe:	9303      	str	r3, [sp, #12]
 8010000:	2301      	movs	r3, #1
 8010002:	9302      	str	r3, [sp, #8]
 8010004:	2300      	movs	r3, #0
 8010006:	9301      	str	r3, [sp, #4]
 8010008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010012:	ed97 0a08 	vldr	s0, [r7, #32]
 8010016:	f7fa fb93 	bl	800a740 <slalomL>

			pass_count++;
 801001a:	4b9e      	ldr	r3, [pc, #632]	; (8010294 <run_shortest+0x1034>)
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	3301      	adds	r3, #1
 8010020:	b2da      	uxtb	r2, r3
 8010022:	4b9c      	ldr	r3, [pc, #624]	; (8010294 <run_shortest+0x1034>)
 8010024:	701a      	strb	r2, [r3, #0]
 8010026:	e244      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 8010028:	4b9a      	ldr	r3, [pc, #616]	; (8010294 <run_shortest+0x1034>)
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	461a      	mov	r2, r3
 801002e:	4b9a      	ldr	r3, [pc, #616]	; (8010298 <run_shortest+0x1038>)
 8010030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010034:	f113 0f04 	cmn.w	r3, #4
 8010038:	d115      	bne.n	8010066 <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 801003a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801003e:	9302      	str	r3, [sp, #8]
 8010040:	2300      	movs	r3, #0
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010048:	9300      	str	r3, [sp, #0]
 801004a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801004e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010050:	ed97 0a08 	vldr	s0, [r7, #32]
 8010054:	f7fa fd2a 	bl	800aaac <turn90R>
			pass_count++;
 8010058:	4b8e      	ldr	r3, [pc, #568]	; (8010294 <run_shortest+0x1034>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	3301      	adds	r3, #1
 801005e:	b2da      	uxtb	r2, r3
 8010060:	4b8c      	ldr	r3, [pc, #560]	; (8010294 <run_shortest+0x1034>)
 8010062:	701a      	strb	r2, [r3, #0]
 8010064:	e225      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 8010066:	4b8b      	ldr	r3, [pc, #556]	; (8010294 <run_shortest+0x1034>)
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	461a      	mov	r2, r3
 801006c:	4b8a      	ldr	r3, [pc, #552]	; (8010298 <run_shortest+0x1038>)
 801006e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010072:	f113 0f05 	cmn.w	r3, #5
 8010076:	d115      	bne.n	80100a4 <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 8010078:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801007c:	9302      	str	r3, [sp, #8]
 801007e:	2300      	movs	r3, #0
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010086:	9300      	str	r3, [sp, #0]
 8010088:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801008c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801008e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010092:	f7fa fe75 	bl	800ad80 <turn90L>
			pass_count++;
 8010096:	4b7f      	ldr	r3, [pc, #508]	; (8010294 <run_shortest+0x1034>)
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	3301      	adds	r3, #1
 801009c:	b2da      	uxtb	r2, r3
 801009e:	4b7d      	ldr	r3, [pc, #500]	; (8010294 <run_shortest+0x1034>)
 80100a0:	701a      	strb	r2, [r3, #0]
 80100a2:	e206      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 80100a4:	4b7b      	ldr	r3, [pc, #492]	; (8010294 <run_shortest+0x1034>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	461a      	mov	r2, r3
 80100aa:	4b7b      	ldr	r3, [pc, #492]	; (8010298 <run_shortest+0x1038>)
 80100ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b0:	f113 0f06 	cmn.w	r3, #6
 80100b4:	d115      	bne.n	80100e2 <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 80100b6:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100ba:	9302      	str	r3, [sp, #8]
 80100bc:	2300      	movs	r3, #0
 80100be:	9301      	str	r3, [sp, #4]
 80100c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80100c4:	9300      	str	r3, [sp, #0]
 80100c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80100ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100cc:	ed97 0a08 	vldr	s0, [r7, #32]
 80100d0:	f7fa ffba 	bl	800b048 <turn180R>
			pass_count++;
 80100d4:	4b6f      	ldr	r3, [pc, #444]	; (8010294 <run_shortest+0x1034>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	3301      	adds	r3, #1
 80100da:	b2da      	uxtb	r2, r3
 80100dc:	4b6d      	ldr	r3, [pc, #436]	; (8010294 <run_shortest+0x1034>)
 80100de:	701a      	strb	r2, [r3, #0]
 80100e0:	e1e7      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 80100e2:	4b6c      	ldr	r3, [pc, #432]	; (8010294 <run_shortest+0x1034>)
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	461a      	mov	r2, r3
 80100e8:	4b6b      	ldr	r3, [pc, #428]	; (8010298 <run_shortest+0x1038>)
 80100ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ee:	f113 0f07 	cmn.w	r3, #7
 80100f2:	d115      	bne.n	8010120 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 80100f4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100f8:	9302      	str	r3, [sp, #8]
 80100fa:	2300      	movs	r3, #0
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010102:	9300      	str	r3, [sp, #0]
 8010104:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801010a:	ed97 0a08 	vldr	s0, [r7, #32]
 801010e:	f7fb f905 	bl	800b31c <turn180L>
			pass_count++;
 8010112:	4b60      	ldr	r3, [pc, #384]	; (8010294 <run_shortest+0x1034>)
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	3301      	adds	r3, #1
 8010118:	b2da      	uxtb	r2, r3
 801011a:	4b5e      	ldr	r3, [pc, #376]	; (8010294 <run_shortest+0x1034>)
 801011c:	701a      	strb	r2, [r3, #0]
 801011e:	e1c8      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 8010120:	4b5c      	ldr	r3, [pc, #368]	; (8010294 <run_shortest+0x1034>)
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	461a      	mov	r2, r3
 8010126:	4b5c      	ldr	r3, [pc, #368]	; (8010298 <run_shortest+0x1038>)
 8010128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801012c:	f113 0f08 	cmn.w	r3, #8
 8010130:	d115      	bne.n	801015e <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 8010132:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010136:	9302      	str	r3, [sp, #8]
 8010138:	2300      	movs	r3, #0
 801013a:	9301      	str	r3, [sp, #4]
 801013c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010148:	ed97 0a08 	vldr	s0, [r7, #32]
 801014c:	f7fb fa4c 	bl	800b5e8 <turn45inR>
			pass_count++;
 8010150:	4b50      	ldr	r3, [pc, #320]	; (8010294 <run_shortest+0x1034>)
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	3301      	adds	r3, #1
 8010156:	b2da      	uxtb	r2, r3
 8010158:	4b4e      	ldr	r3, [pc, #312]	; (8010294 <run_shortest+0x1034>)
 801015a:	701a      	strb	r2, [r3, #0]
 801015c:	e1a9      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 801015e:	4b4d      	ldr	r3, [pc, #308]	; (8010294 <run_shortest+0x1034>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	461a      	mov	r2, r3
 8010164:	4b4c      	ldr	r3, [pc, #304]	; (8010298 <run_shortest+0x1038>)
 8010166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801016a:	f113 0f09 	cmn.w	r3, #9
 801016e:	d115      	bne.n	801019c <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 8010170:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010174:	9302      	str	r3, [sp, #8]
 8010176:	2300      	movs	r3, #0
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010186:	ed97 0a08 	vldr	s0, [r7, #32]
 801018a:	f7fb fc75 	bl	800ba78 <turn45inL>
			pass_count++;
 801018e:	4b41      	ldr	r3, [pc, #260]	; (8010294 <run_shortest+0x1034>)
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	3301      	adds	r3, #1
 8010194:	b2da      	uxtb	r2, r3
 8010196:	4b3f      	ldr	r3, [pc, #252]	; (8010294 <run_shortest+0x1034>)
 8010198:	701a      	strb	r2, [r3, #0]
 801019a:	e18a      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 801019c:	4b3d      	ldr	r3, [pc, #244]	; (8010294 <run_shortest+0x1034>)
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	461a      	mov	r2, r3
 80101a2:	4b3d      	ldr	r3, [pc, #244]	; (8010298 <run_shortest+0x1038>)
 80101a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a8:	f113 0f0a 	cmn.w	r3, #10
 80101ac:	d115      	bne.n	80101da <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 80101ae:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101b2:	9302      	str	r3, [sp, #8]
 80101b4:	2300      	movs	r3, #0
 80101b6:	9301      	str	r3, [sp, #4]
 80101b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80101c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101c4:	ed97 0a08 	vldr	s0, [r7, #32]
 80101c8:	f7fb fe96 	bl	800bef8 <turn135inR>
			pass_count++;
 80101cc:	4b31      	ldr	r3, [pc, #196]	; (8010294 <run_shortest+0x1034>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	3301      	adds	r3, #1
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	4b2f      	ldr	r3, [pc, #188]	; (8010294 <run_shortest+0x1034>)
 80101d6:	701a      	strb	r2, [r3, #0]
 80101d8:	e16b      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 80101da:	4b2e      	ldr	r3, [pc, #184]	; (8010294 <run_shortest+0x1034>)
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	461a      	mov	r2, r3
 80101e0:	4b2d      	ldr	r3, [pc, #180]	; (8010298 <run_shortest+0x1038>)
 80101e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e6:	f113 0f0b 	cmn.w	r3, #11
 80101ea:	d115      	bne.n	8010218 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 80101ec:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101f0:	9302      	str	r3, [sp, #8]
 80101f2:	2300      	movs	r3, #0
 80101f4:	9301      	str	r3, [sp, #4]
 80101f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010202:	ed97 0a08 	vldr	s0, [r7, #32]
 8010206:	f7fc f8bf 	bl	800c388 <turn135inL>
			pass_count++;
 801020a:	4b22      	ldr	r3, [pc, #136]	; (8010294 <run_shortest+0x1034>)
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	3301      	adds	r3, #1
 8010210:	b2da      	uxtb	r2, r3
 8010212:	4b20      	ldr	r3, [pc, #128]	; (8010294 <run_shortest+0x1034>)
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	e14c      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 8010218:	4b1e      	ldr	r3, [pc, #120]	; (8010294 <run_shortest+0x1034>)
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	461a      	mov	r2, r3
 801021e:	4b1e      	ldr	r3, [pc, #120]	; (8010298 <run_shortest+0x1038>)
 8010220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010224:	f113 0f0c 	cmn.w	r3, #12
 8010228:	d115      	bne.n	8010256 <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 801022a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801022e:	9302      	str	r3, [sp, #8]
 8010230:	2300      	movs	r3, #0
 8010232:	9301      	str	r3, [sp, #4]
 8010234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801023e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010240:	ed97 0a08 	vldr	s0, [r7, #32]
 8010244:	f7fc fae4 	bl	800c810 <turn45outR>
			pass_count++;
 8010248:	4b12      	ldr	r3, [pc, #72]	; (8010294 <run_shortest+0x1034>)
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	3301      	adds	r3, #1
 801024e:	b2da      	uxtb	r2, r3
 8010250:	4b10      	ldr	r3, [pc, #64]	; (8010294 <run_shortest+0x1034>)
 8010252:	701a      	strb	r2, [r3, #0]
 8010254:	e12d      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010256:	4b0f      	ldr	r3, [pc, #60]	; (8010294 <run_shortest+0x1034>)
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	461a      	mov	r2, r3
 801025c:	4b0e      	ldr	r3, [pc, #56]	; (8010298 <run_shortest+0x1038>)
 801025e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010262:	f113 0f0d 	cmn.w	r3, #13
 8010266:	d119      	bne.n	801029c <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010268:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801026c:	9302      	str	r3, [sp, #8]
 801026e:	2300      	movs	r3, #0
 8010270:	9301      	str	r3, [sp, #4]
 8010272:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801027c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801027e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010282:	f7fc fcb7 	bl	800cbf4 <turn45outL>
			pass_count++;
 8010286:	4b03      	ldr	r3, [pc, #12]	; (8010294 <run_shortest+0x1034>)
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	3301      	adds	r3, #1
 801028c:	b2da      	uxtb	r2, r3
 801028e:	4b01      	ldr	r3, [pc, #4]	; (8010294 <run_shortest+0x1034>)
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	e10e      	b.n	80104b2 <run_shortest+0x1252>
 8010294:	20000828 	.word	0x20000828
 8010298:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 801029c:	4ba0      	ldr	r3, [pc, #640]	; (8010520 <run_shortest+0x12c0>)
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	461a      	mov	r2, r3
 80102a2:	4ba0      	ldr	r3, [pc, #640]	; (8010524 <run_shortest+0x12c4>)
 80102a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a8:	f113 0f0e 	cmn.w	r3, #14
 80102ac:	d115      	bne.n	80102da <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 80102ae:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80102b2:	9302      	str	r3, [sp, #8]
 80102b4:	2300      	movs	r3, #0
 80102b6:	9301      	str	r3, [sp, #4]
 80102b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80102c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80102c4:	ed97 0a08 	vldr	s0, [r7, #32]
 80102c8:	f7fc fe7c 	bl	800cfc4 <turn135outR>
			pass_count++;
 80102cc:	4b94      	ldr	r3, [pc, #592]	; (8010520 <run_shortest+0x12c0>)
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	3301      	adds	r3, #1
 80102d2:	b2da      	uxtb	r2, r3
 80102d4:	4b92      	ldr	r3, [pc, #584]	; (8010520 <run_shortest+0x12c0>)
 80102d6:	701a      	strb	r2, [r3, #0]
 80102d8:	e0eb      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 80102da:	4b91      	ldr	r3, [pc, #580]	; (8010520 <run_shortest+0x12c0>)
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	4b90      	ldr	r3, [pc, #576]	; (8010524 <run_shortest+0x12c4>)
 80102e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e6:	f113 0f0f 	cmn.w	r3, #15
 80102ea:	d115      	bne.n	8010318 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 80102ec:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80102f0:	9302      	str	r3, [sp, #8]
 80102f2:	2300      	movs	r3, #0
 80102f4:	9301      	str	r3, [sp, #4]
 80102f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8010300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010302:	ed97 0a08 	vldr	s0, [r7, #32]
 8010306:	f7fd f84f 	bl	800d3a8 <turn135outL>
			pass_count++;
 801030a:	4b85      	ldr	r3, [pc, #532]	; (8010520 <run_shortest+0x12c0>)
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	3301      	adds	r3, #1
 8010310:	b2da      	uxtb	r2, r3
 8010312:	4b83      	ldr	r3, [pc, #524]	; (8010520 <run_shortest+0x12c0>)
 8010314:	701a      	strb	r2, [r3, #0]
 8010316:	e0cc      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 8010318:	4b81      	ldr	r3, [pc, #516]	; (8010520 <run_shortest+0x12c0>)
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	461a      	mov	r2, r3
 801031e:	4b81      	ldr	r3, [pc, #516]	; (8010524 <run_shortest+0x12c4>)
 8010320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010324:	f113 0f10 	cmn.w	r3, #16
 8010328:	d115      	bne.n	8010356 <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 801032a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801032e:	9302      	str	r3, [sp, #8]
 8010330:	2300      	movs	r3, #0
 8010332:	9301      	str	r3, [sp, #4]
 8010334:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8010338:	9300      	str	r3, [sp, #0]
 801033a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801033e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010340:	ed97 0a08 	vldr	s0, [r7, #32]
 8010344:	f7fd fa1c 	bl	800d780 <V90R>
			pass_count++;
 8010348:	4b75      	ldr	r3, [pc, #468]	; (8010520 <run_shortest+0x12c0>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	3301      	adds	r3, #1
 801034e:	b2da      	uxtb	r2, r3
 8010350:	4b73      	ldr	r3, [pc, #460]	; (8010520 <run_shortest+0x12c0>)
 8010352:	701a      	strb	r2, [r3, #0]
 8010354:	e0ad      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010356:	4b72      	ldr	r3, [pc, #456]	; (8010520 <run_shortest+0x12c0>)
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	461a      	mov	r2, r3
 801035c:	4b71      	ldr	r3, [pc, #452]	; (8010524 <run_shortest+0x12c4>)
 801035e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010362:	f113 0f11 	cmn.w	r3, #17
 8010366:	d115      	bne.n	8010394 <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010368:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801036c:	9302      	str	r3, [sp, #8]
 801036e:	2300      	movs	r3, #0
 8010370:	9301      	str	r3, [sp, #4]
 8010372:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801037c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801037e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010382:	f7fd fc09 	bl	800db98 <V90L>
			pass_count++;
 8010386:	4b66      	ldr	r3, [pc, #408]	; (8010520 <run_shortest+0x12c0>)
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	3301      	adds	r3, #1
 801038c:	b2da      	uxtb	r2, r3
 801038e:	4b64      	ldr	r3, [pc, #400]	; (8010520 <run_shortest+0x12c0>)
 8010390:	701a      	strb	r2, [r3, #0]
 8010392:	e08e      	b.n	80104b2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 8010394:	4b62      	ldr	r3, [pc, #392]	; (8010520 <run_shortest+0x12c0>)
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	461a      	mov	r2, r3
 801039a:	4b62      	ldr	r3, [pc, #392]	; (8010524 <run_shortest+0x12c4>)
 801039c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f340 8086 	ble.w	80104b2 <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 80103a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103a8:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 80103aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103ac:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 80103ae:	4b5c      	ldr	r3, [pc, #368]	; (8010520 <run_shortest+0x12c0>)
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d013      	beq.n	80103de <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 80103b6:	4b5a      	ldr	r3, [pc, #360]	; (8010520 <run_shortest+0x12c0>)
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	3b01      	subs	r3, #1
 80103bc:	4a59      	ldr	r2, [pc, #356]	; (8010524 <run_shortest+0x12c4>)
 80103be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c2:	f113 0f02 	cmn.w	r3, #2
 80103c6:	d008      	beq.n	80103da <run_shortest+0x117a>
 80103c8:	4b55      	ldr	r3, [pc, #340]	; (8010520 <run_shortest+0x12c0>)
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	3b01      	subs	r3, #1
 80103ce:	4a55      	ldr	r2, [pc, #340]	; (8010524 <run_shortest+0x12c4>)
 80103d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103d4:	f113 0f03 	cmn.w	r3, #3
 80103d8:	d101      	bne.n	80103de <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 80103da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103dc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 80103de:	4b50      	ldr	r3, [pc, #320]	; (8010520 <run_shortest+0x12c0>)
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	3301      	adds	r3, #1
 80103e4:	4a4f      	ldr	r2, [pc, #316]	; (8010524 <run_shortest+0x12c4>)
 80103e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ea:	f113 0f02 	cmn.w	r3, #2
 80103ee:	d008      	beq.n	8010402 <run_shortest+0x11a2>
 80103f0:	4b4b      	ldr	r3, [pc, #300]	; (8010520 <run_shortest+0x12c0>)
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	3301      	adds	r3, #1
 80103f6:	4a4b      	ldr	r2, [pc, #300]	; (8010524 <run_shortest+0x12c4>)
 80103f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103fc:	f113 0f03 	cmn.w	r3, #3
 8010400:	d101      	bne.n	8010406 <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 8010402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010404:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 8010406:	4b46      	ldr	r3, [pc, #280]	; (8010520 <run_shortest+0x12c0>)
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	461a      	mov	r2, r3
 801040c:	4b45      	ldr	r3, [pc, #276]	; (8010524 <run_shortest+0x12c4>)
 801040e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010412:	2b31      	cmp	r3, #49	; 0x31
 8010414:	dd27      	ble.n	8010466 <run_shortest+0x1206>
				mode.WallControlMode=3;
 8010416:	2303      	movs	r3, #3
 8010418:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 801041a:	2300      	movs	r3, #0
 801041c:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 801041e:	4b40      	ldr	r3, [pc, #256]	; (8010520 <run_shortest+0x12c0>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	461a      	mov	r2, r3
 8010424:	4b3f      	ldr	r3, [pc, #252]	; (8010524 <run_shortest+0x12c4>)
 8010426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801042a:	3b32      	subs	r3, #50	; 0x32
 801042c:	4618      	mov	r0, r3
 801042e:	f7f0 f8a1 	bl	8000574 <__aeabi_i2d>
 8010432:	a339      	add	r3, pc, #228	; (adr r3, 8010518 <run_shortest+0x12b8>)
 8010434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010438:	f7f0 f906 	bl	8000648 <__aeabi_dmul>
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	4610      	mov	r0, r2
 8010442:	4619      	mov	r1, r3
 8010444:	f7f0 fbd8 	bl	8000bf8 <__aeabi_d2f>
 8010448:	4603      	mov	r3, r0
 801044a:	69b8      	ldr	r0, [r7, #24]
 801044c:	ed97 2a04 	vldr	s4, [r7, #16]
 8010450:	edd7 1a05 	vldr	s3, [r7, #20]
 8010454:	ed97 1a08 	vldr	s2, [r7, #32]
 8010458:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801045c:	ee00 3a10 	vmov	s0, r3
 8010460:	f7f2 fe20 	bl	80030a4 <straight_table2>
 8010464:	e01f      	b.n	80104a6 <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 8010466:	2301      	movs	r3, #1
 8010468:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 801046a:	2300      	movs	r3, #0
 801046c:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 801046e:	4b2c      	ldr	r3, [pc, #176]	; (8010520 <run_shortest+0x12c0>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	461a      	mov	r2, r3
 8010474:	4b2b      	ldr	r3, [pc, #172]	; (8010524 <run_shortest+0x12c4>)
 8010476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801047a:	4613      	mov	r3, r2
 801047c:	005b      	lsls	r3, r3, #1
 801047e:	4413      	add	r3, r2
 8010480:	011a      	lsls	r2, r3, #4
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	ee07 3a90 	vmov	s15, r3
 8010488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801048c:	69b8      	ldr	r0, [r7, #24]
 801048e:	ed97 2a04 	vldr	s4, [r7, #16]
 8010492:	edd7 1a05 	vldr	s3, [r7, #20]
 8010496:	ed97 1a08 	vldr	s2, [r7, #32]
 801049a:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801049e:	eeb0 0a67 	vmov.f32	s0, s15
 80104a2:	f7f2 fdff 	bl	80030a4 <straight_table2>
			}

			pass_count++;
 80104a6:	4b1e      	ldr	r3, [pc, #120]	; (8010520 <run_shortest+0x12c0>)
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	3301      	adds	r3, #1
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	4b1c      	ldr	r3, [pc, #112]	; (8010520 <run_shortest+0x12c0>)
 80104b0:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 80104b2:	4b1b      	ldr	r3, [pc, #108]	; (8010520 <run_shortest+0x12c0>)
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	461a      	mov	r2, r3
 80104b8:	4b1a      	ldr	r3, [pc, #104]	; (8010524 <run_shortest+0x12c4>)
 80104ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d000      	beq.n	80104c4 <run_shortest+0x1264>
		pass_count2=pass_count+1;
 80104c2:	e521      	b.n	800ff08 <run_shortest+0xca8>
			break;
 80104c4:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 80104c6:	2301      	movs	r3, #1
 80104c8:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 80104ca:	2300      	movs	r3, #0
 80104cc:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 80104ce:	69b8      	ldr	r0, [r7, #24]
 80104d0:	ed97 2a04 	vldr	s4, [r7, #16]
 80104d4:	edd7 1a05 	vldr	s3, [r7, #20]
 80104d8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8010528 <run_shortest+0x12c8>
 80104dc:	edd7 0a08 	vldr	s1, [r7, #32]
 80104e0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 801052c <run_shortest+0x12cc>
 80104e4:	f7f2 fdde 	bl	80030a4 <straight_table2>
		HAL_Delay(700);
 80104e8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80104ec:	f007 fa9c 	bl	8017a28 <HAL_Delay>
		pl_FunMotor_stop();
 80104f0:	f7f7 fcbc 	bl	8007e6c <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 80104f4:	4b0e      	ldr	r3, [pc, #56]	; (8010530 <run_shortest+0x12d0>)
 80104f6:	2200      	movs	r2, #0
 80104f8:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80104fa:	4b0e      	ldr	r3, [pc, #56]	; (8010534 <run_shortest+0x12d4>)
 80104fc:	2200      	movs	r2, #0
 80104fe:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010500:	4b0d      	ldr	r3, [pc, #52]	; (8010538 <run_shortest+0x12d8>)
 8010502:	2200      	movs	r2, #0
 8010504:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 8010506:	2000      	movs	r0, #0
 8010508:	f7f7 fc1c 	bl	8007d44 <pl_DriveMotor_standby>
	t = 0;
 801050c:	4b0b      	ldr	r3, [pc, #44]	; (801053c <run_shortest+0x12dc>)
 801050e:	2200      	movs	r2, #0
 8010510:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 8010512:	e034      	b.n	801057e <run_shortest+0x131e>
 8010514:	f3af 8000 	nop.w
 8010518:	c022ec18 	.word	0xc022ec18
 801051c:	404fd1de 	.word	0x404fd1de
 8010520:	20000828 	.word	0x20000828
 8010524:	2000083c 	.word	0x2000083c
 8010528:	00000000 	.word	0x00000000
 801052c:	42b40000 	.word	0x42b40000
 8010530:	20000834 	.word	0x20000834
 8010534:	20000808 	.word	0x20000808
 8010538:	2000d96c 	.word	0x2000d96c
 801053c:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 8010540:	4b2b      	ldr	r3, [pc, #172]	; (80105f0 <run_shortest+0x1390>)
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	4b2a      	ldr	r3, [pc, #168]	; (80105f0 <run_shortest+0x1390>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	492a      	ldr	r1, [pc, #168]	; (80105f4 <run_shortest+0x1394>)
 801054a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 801054e:	4a2a      	ldr	r2, [pc, #168]	; (80105f8 <run_shortest+0x1398>)
 8010550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8010554:	4b26      	ldr	r3, [pc, #152]	; (80105f0 <run_shortest+0x1390>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a25      	ldr	r2, [pc, #148]	; (80105f0 <run_shortest+0x1390>)
 801055a:	6812      	ldr	r2, [r2, #0]
 801055c:	4925      	ldr	r1, [pc, #148]	; (80105f4 <run_shortest+0x1394>)
 801055e:	330c      	adds	r3, #12
 8010560:	005b      	lsls	r3, r3, #1
 8010562:	440b      	add	r3, r1
 8010564:	88d8      	ldrh	r0, [r3, #6]
 8010566:	4924      	ldr	r1, [pc, #144]	; (80105f8 <run_shortest+0x1398>)
 8010568:	f102 030c 	add.w	r3, r2, #12
 801056c:	005b      	lsls	r3, r3, #1
 801056e:	440b      	add	r3, r1
 8010570:	4602      	mov	r2, r0
 8010572:	80da      	strh	r2, [r3, #6]
		t++;
 8010574:	4b1e      	ldr	r3, [pc, #120]	; (80105f0 <run_shortest+0x1390>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3301      	adds	r3, #1
 801057a:	4a1d      	ldr	r2, [pc, #116]	; (80105f0 <run_shortest+0x1390>)
 801057c:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801057e:	4b1c      	ldr	r3, [pc, #112]	; (80105f0 <run_shortest+0x1390>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	2b0e      	cmp	r3, #14
 8010584:	dddc      	ble.n	8010540 <run_shortest+0x12e0>
	}
	t = 0;
 8010586:	4b1a      	ldr	r3, [pc, #104]	; (80105f0 <run_shortest+0x1390>)
 8010588:	2200      	movs	r2, #0
 801058a:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 801058c:	e026      	b.n	80105dc <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 801058e:	4b18      	ldr	r3, [pc, #96]	; (80105f0 <run_shortest+0x1390>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4a19      	ldr	r2, [pc, #100]	; (80105f8 <run_shortest+0x1398>)
 8010594:	331c      	adds	r3, #28
 8010596:	005b      	lsls	r3, r3, #1
 8010598:	4413      	add	r3, r2
 801059a:	889a      	ldrh	r2, [r3, #4]
 801059c:	4b14      	ldr	r3, [pc, #80]	; (80105f0 <run_shortest+0x1390>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	43d2      	mvns	r2, r2
 80105a2:	b291      	uxth	r1, r2
 80105a4:	4a14      	ldr	r2, [pc, #80]	; (80105f8 <run_shortest+0x1398>)
 80105a6:	331c      	adds	r3, #28
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	4413      	add	r3, r2
 80105ac:	460a      	mov	r2, r1
 80105ae:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 80105b0:	4b0f      	ldr	r3, [pc, #60]	; (80105f0 <run_shortest+0x1390>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a10      	ldr	r2, [pc, #64]	; (80105f8 <run_shortest+0x1398>)
 80105b6:	332c      	adds	r3, #44	; 0x2c
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	4413      	add	r3, r2
 80105bc:	885a      	ldrh	r2, [r3, #2]
 80105be:	4b0c      	ldr	r3, [pc, #48]	; (80105f0 <run_shortest+0x1390>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	43d2      	mvns	r2, r2
 80105c4:	b291      	uxth	r1, r2
 80105c6:	4a0c      	ldr	r2, [pc, #48]	; (80105f8 <run_shortest+0x1398>)
 80105c8:	332c      	adds	r3, #44	; 0x2c
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	4413      	add	r3, r2
 80105ce:	460a      	mov	r2, r1
 80105d0:	805a      	strh	r2, [r3, #2]
		t++;
 80105d2:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <run_shortest+0x1390>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	3301      	adds	r3, #1
 80105d8:	4a05      	ldr	r2, [pc, #20]	; (80105f0 <run_shortest+0x1390>)
 80105da:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 80105dc:	4b04      	ldr	r3, [pc, #16]	; (80105f0 <run_shortest+0x1390>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b0e      	cmp	r3, #14
 80105e2:	ddd4      	ble.n	801058e <run_shortest+0x132e>
	}

}
 80105e4:	bf00      	nop
 80105e6:	bf00      	nop
 80105e8:	3740      	adds	r7, #64	; 0x40
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bdb0      	pop	{r4, r5, r7, pc}
 80105ee:	bf00      	nop
 80105f0:	20000c38 	.word	0x20000c38
 80105f4:	20000cb4 	.word	0x20000cb4
 80105f8:	20000c3c 	.word	0x20000c3c

080105fc <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b08a      	sub	sp, #40	; 0x28
 8010600:	af02      	add	r7, sp, #8
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	607a      	str	r2, [r7, #4]
 8010608:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 801060a:	2301      	movs	r3, #1
 801060c:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 801060e:	2301      	movs	r3, #1
 8010610:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8010612:	2301      	movs	r3, #1
 8010614:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 801061e:	f107 0114 	add.w	r1, r7, #20
 8010622:	f107 0318 	add.w	r3, r7, #24
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	f7fd fe3f 	bl	800e2ac <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 801062e:	69b8      	ldr	r0, [r7, #24]
 8010630:	6979      	ldr	r1, [r7, #20]
 8010632:	f107 021e 	add.w	r2, r7, #30
 8010636:	f107 031c 	add.w	r3, r7, #28
 801063a:	9301      	str	r3, [sp, #4]
 801063c:	f107 031d 	add.w	r3, r7, #29
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	4613      	mov	r3, r2
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	f000 fe27 	bl	8011298 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 801064a:	7fbb      	ldrb	r3, [r7, #30]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d007      	beq.n	8010660 <decision_kitiku+0x64>
 8010650:	7f7b      	ldrb	r3, [r7, #29]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d004      	beq.n	8010660 <decision_kitiku+0x64>
 8010656:	7f3b      	ldrb	r3, [r7, #28]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d001      	beq.n	8010660 <decision_kitiku+0x64>
 801065c:	2301      	movs	r3, #1
 801065e:	e000      	b.n	8010662 <decision_kitiku+0x66>
 8010660:	2300      	movs	r3, #0
 8010662:	77fb      	strb	r3, [r7, #31]
 8010664:	7ffb      	ldrb	r3, [r7, #31]
 8010666:	f003 0301 	and.w	r3, r3, #1
 801066a:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 801066c:	7ffb      	ldrb	r3, [r7, #31]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d02b      	beq.n	80106ca <decision_kitiku+0xce>
 8010672:	887a      	ldrh	r2, [r7, #2]
 8010674:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010676:	429a      	cmp	r2, r3
 8010678:	d827      	bhi.n	80106ca <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 801067a:	887a      	ldrh	r2, [r7, #2]
 801067c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801067e:	429a      	cmp	r2, r3
 8010680:	d823      	bhi.n	80106ca <decision_kitiku+0xce>
 8010682:	887a      	ldrh	r2, [r7, #2]
 8010684:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010686:	429a      	cmp	r2, r3
 8010688:	d81f      	bhi.n	80106ca <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b01      	cmp	r3, #1
 801068e:	d102      	bne.n	8010696 <decision_kitiku+0x9a>
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	2b0d      	cmp	r3, #13
 8010694:	dc11      	bgt.n	80106ba <decision_kitiku+0xbe>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2b02      	cmp	r3, #2
 801069a:	d102      	bne.n	80106a2 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2b0d      	cmp	r3, #13
 80106a0:	dc0b      	bgt.n	80106ba <decision_kitiku+0xbe>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d102      	bne.n	80106ae <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	dd05      	ble.n	80106ba <decision_kitiku+0xbe>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b04      	cmp	r3, #4
 80106b2:	d106      	bne.n	80106c2 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	dc03      	bgt.n	80106c2 <decision_kitiku+0xc6>
			kitikukan = 0;
 80106ba:	4b08      	ldr	r3, [pc, #32]	; (80106dc <decision_kitiku+0xe0>)
 80106bc:	2200      	movs	r2, #0
 80106be:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80106c0:	e007      	b.n	80106d2 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 80106c2:	4b06      	ldr	r3, [pc, #24]	; (80106dc <decision_kitiku+0xe0>)
 80106c4:	2201      	movs	r2, #1
 80106c6:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80106c8:	e003      	b.n	80106d2 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 80106ca:	4b04      	ldr	r3, [pc, #16]	; (80106dc <decision_kitiku+0xe0>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	601a      	str	r2, [r3, #0]
	}


}
 80106d0:	bf00      	nop
 80106d2:	bf00      	nop
 80106d4:	3720      	adds	r7, #32
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	20000838 	.word	0x20000838

080106e0 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 80106e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106e2:	b099      	sub	sp, #100	; 0x64
 80106e4:	af04      	add	r7, sp, #16
 80106e6:	60f8      	str	r0, [r7, #12]
 80106e8:	60b9      	str	r1, [r7, #8]
 80106ea:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 80106ec:	4b9f      	ldr	r3, [pc, #636]	; (801096c <compress_kitiku+0x28c>)
 80106ee:	2201      	movs	r2, #1
 80106f0:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 80106f2:	4b9f      	ldr	r3, [pc, #636]	; (8010970 <compress_kitiku+0x290>)
 80106f4:	2201      	movs	r2, #1
 80106f6:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	637b      	str	r3, [r7, #52]	; 0x34
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	633b      	str	r3, [r7, #48]	; 0x30
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 801070a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801070e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010714:	4618      	mov	r0, r3
 8010716:	f7fd fdc9 	bl	800e2ac <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 801071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010720:	62bb      	str	r3, [r7, #40]	; 0x28
 8010722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010724:	627b      	str	r3, [r7, #36]	; 0x24
 8010726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010728:	623b      	str	r3, [r7, #32]
 801072a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801072c:	61fb      	str	r3, [r7, #28]
 801072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010730:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 8010732:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801073a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801073c:	4618      	mov	r0, r3
 801073e:	f7fd fdb5 	bl	800e2ac <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010746:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801074a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	4613      	mov	r3, r2
 8010758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801075a:	f000 fd9d 	bl	8011298 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 801075e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010762:	2b00      	cmp	r3, #0
 8010764:	d009      	beq.n	801077a <compress_kitiku+0x9a>
 8010766:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801076a:	2b00      	cmp	r3, #0
 801076c:	d005      	beq.n	801077a <compress_kitiku+0x9a>
 801076e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010772:	2b00      	cmp	r3, #0
 8010774:	d001      	beq.n	801077a <compress_kitiku+0x9a>
 8010776:	2301      	movs	r3, #1
 8010778:	e000      	b.n	801077c <compress_kitiku+0x9c>
 801077a:	2300      	movs	r3, #0
 801077c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010780:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010784:	f003 0301 	and.w	r3, r3, #1
 8010788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 801078c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078e:	2b04      	cmp	r3, #4
 8010790:	d102      	bne.n	8010798 <compress_kitiku+0xb8>
 8010792:	2301      	movs	r3, #1
 8010794:	64bb      	str	r3, [r7, #72]	; 0x48
 8010796:	e002      	b.n	801079e <compress_kitiku+0xbe>
 8010798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079a:	3301      	adds	r3, #1
 801079c:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 801079e:	f107 0120 	add.w	r1, r7, #32
 80107a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fd fd7f 	bl	800e2ac <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 80107ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107b0:	6a39      	ldr	r1, [r7, #32]
 80107b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80107b6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80107ba:	9301      	str	r3, [sp, #4]
 80107bc:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	4613      	mov	r3, r2
 80107c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107c6:	f000 fd67 	bl	8011298 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 80107ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d009      	beq.n	80107e6 <compress_kitiku+0x106>
 80107d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d005      	beq.n	80107e6 <compress_kitiku+0x106>
 80107da:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d001      	beq.n	80107e6 <compress_kitiku+0x106>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e000      	b.n	80107e8 <compress_kitiku+0x108>
 80107e6:	2300      	movs	r3, #0
 80107e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80107ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80107f0:	f003 0301 	and.w	r3, r3, #1
 80107f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 80107f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	d102      	bne.n	8010804 <compress_kitiku+0x124>
 80107fe:	2304      	movs	r3, #4
 8010800:	647b      	str	r3, [r7, #68]	; 0x44
 8010802:	e002      	b.n	801080a <compress_kitiku+0x12a>
 8010804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010806:	3b01      	subs	r3, #1
 8010808:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 801080a:	f107 0118 	add.w	r1, r7, #24
 801080e:	f107 031c 	add.w	r3, r7, #28
 8010812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010814:	4618      	mov	r0, r3
 8010816:	f7fd fd49 	bl	800e2ac <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 801081a:	69f8      	ldr	r0, [r7, #28]
 801081c:	69b9      	ldr	r1, [r7, #24]
 801081e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010822:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010826:	9301      	str	r3, [sp, #4]
 8010828:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	4613      	mov	r3, r2
 8010830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010832:	f000 fd31 	bl	8011298 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010836:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801083a:	2b00      	cmp	r3, #0
 801083c:	d009      	beq.n	8010852 <compress_kitiku+0x172>
 801083e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <compress_kitiku+0x172>
 8010846:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <compress_kitiku+0x172>
 801084e:	2301      	movs	r3, #1
 8010850:	e000      	b.n	8010854 <compress_kitiku+0x174>
 8010852:	2300      	movs	r3, #0
 8010854:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010858:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801085c:	f003 0301 	and.w	r3, r3, #1
 8010860:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8010864:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010868:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801086c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	4613      	mov	r3, r2
 801087a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801087c:	f000 fb98 	bl	8010fb0 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010884:	f107 0610 	add.w	r6, r7, #16
 8010888:	f107 0512 	add.w	r5, r7, #18
 801088c:	f107 0414 	add.w	r4, r7, #20
 8010890:	f107 0016 	add.w	r0, r7, #22
 8010894:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010896:	9102      	str	r1, [sp, #8]
 8010898:	9201      	str	r2, [sp, #4]
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	4633      	mov	r3, r6
 801089e:	462a      	mov	r2, r5
 80108a0:	4621      	mov	r1, r4
 80108a2:	f000 fe79 	bl	8011598 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 80108a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <compress_kitiku+0x1d2>
 80108ae:	23ff      	movs	r3, #255	; 0xff
 80108b0:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 80108b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d001      	beq.n	80108be <compress_kitiku+0x1de>
 80108ba:	23ff      	movs	r3, #255	; 0xff
 80108bc:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 80108be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <compress_kitiku+0x1ea>
 80108c6:	23ff      	movs	r3, #255	; 0xff
 80108c8:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[16 * x_now + y_now] <= 1) {
 80108ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108cc:	011a      	lsls	r2, r3, #4
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	4413      	add	r3, r2
 80108d2:	4a28      	ldr	r2, [pc, #160]	; (8010974 <compress_kitiku+0x294>)
 80108d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108d8:	2b01      	cmp	r3, #1
 80108da:	f240 80a9 	bls.w	8010a30 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 80108de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d103      	bne.n	80108ec <compress_kitiku+0x20c>
 80108e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e6:	2b0d      	cmp	r3, #13
 80108e8:	f300 80a4 	bgt.w	8010a34 <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 80108ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ee:	2b02      	cmp	r3, #2
 80108f0:	d103      	bne.n	80108fa <compress_kitiku+0x21a>
 80108f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f4:	2b0d      	cmp	r3, #13
 80108f6:	f300 809f 	bgt.w	8010a38 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 80108fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108fc:	2b03      	cmp	r3, #3
 80108fe:	d103      	bne.n	8010908 <compress_kitiku+0x228>
 8010900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010902:	2b01      	cmp	r3, #1
 8010904:	f340 809a 	ble.w	8010a3c <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 8010908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801090a:	2b04      	cmp	r3, #4
 801090c:	d103      	bne.n	8010916 <compress_kitiku+0x236>
 801090e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010910:	2b01      	cmp	r3, #1
 8010912:	f340 8095 	ble.w	8010a40 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8010916:	8afb      	ldrh	r3, [r7, #22]
 8010918:	2bff      	cmp	r3, #255	; 0xff
 801091a:	d10c      	bne.n	8010936 <compress_kitiku+0x256>
 801091c:	8abb      	ldrh	r3, [r7, #20]
 801091e:	2bff      	cmp	r3, #255	; 0xff
 8010920:	d109      	bne.n	8010936 <compress_kitiku+0x256>
 8010922:	8a3b      	ldrh	r3, [r7, #16]
 8010924:	2bff      	cmp	r3, #255	; 0xff
 8010926:	d106      	bne.n	8010936 <compress_kitiku+0x256>
 8010928:	8a7b      	ldrh	r3, [r7, #18]
 801092a:	2bff      	cmp	r3, #255	; 0xff
 801092c:	d103      	bne.n	8010936 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 801092e:	4b12      	ldr	r3, [pc, #72]	; (8010978 <compress_kitiku+0x298>)
 8010930:	2201      	movs	r2, #1
 8010932:	701a      	strb	r2, [r3, #0]
		break;
 8010934:	e087      	b.n	8010a46 <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8010936:	8afa      	ldrh	r2, [r7, #22]
 8010938:	8abb      	ldrh	r3, [r7, #20]
 801093a:	429a      	cmp	r2, r3
 801093c:	d81e      	bhi.n	801097c <compress_kitiku+0x29c>
 801093e:	8afa      	ldrh	r2, [r7, #22]
 8010940:	8a3b      	ldrh	r3, [r7, #16]
 8010942:	429a      	cmp	r2, r3
 8010944:	d81a      	bhi.n	801097c <compress_kitiku+0x29c>
 8010946:	8afa      	ldrh	r2, [r7, #22]
 8010948:	8a7b      	ldrh	r3, [r7, #18]
 801094a:	429a      	cmp	r2, r3
 801094c:	d816      	bhi.n	801097c <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 801094e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010952:	2b00      	cmp	r3, #0
 8010954:	d005      	beq.n	8010962 <compress_kitiku+0x282>
				kitiku_distance += 2;
 8010956:	4b05      	ldr	r3, [pc, #20]	; (801096c <compress_kitiku+0x28c>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	3302      	adds	r3, #2
 801095c:	4a03      	ldr	r2, [pc, #12]	; (801096c <compress_kitiku+0x28c>)
 801095e:	6013      	str	r3, [r2, #0]
 8010960:	e00c      	b.n	801097c <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 8010962:	4b03      	ldr	r3, [pc, #12]	; (8010970 <compress_kitiku+0x290>)
 8010964:	2200      	movs	r2, #0
 8010966:	701a      	strb	r2, [r3, #0]
				break;
 8010968:	e06d      	b.n	8010a46 <compress_kitiku+0x366>
 801096a:	bf00      	nop
 801096c:	2000082c 	.word	0x2000082c
 8010970:	20000829 	.word	0x20000829
 8010974:	20000d2c 	.word	0x20000d2c
 8010978:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801097c:	8aba      	ldrh	r2, [r7, #20]
 801097e:	8afb      	ldrh	r3, [r7, #22]
 8010980:	429a      	cmp	r2, r3
 8010982:	d213      	bcs.n	80109ac <compress_kitiku+0x2cc>
 8010984:	8aba      	ldrh	r2, [r7, #20]
 8010986:	8a3b      	ldrh	r3, [r7, #16]
 8010988:	429a      	cmp	r2, r3
 801098a:	d80f      	bhi.n	80109ac <compress_kitiku+0x2cc>
 801098c:	8aba      	ldrh	r2, [r7, #20]
 801098e:	8a7b      	ldrh	r3, [r7, #18]
 8010990:	429a      	cmp	r2, r3
 8010992:	d80b      	bhi.n	80109ac <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 8010994:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010998:	2b00      	cmp	r3, #0
 801099a:	d003      	beq.n	80109a4 <compress_kitiku+0x2c4>
				kitiku = 0;
 801099c:	4b40      	ldr	r3, [pc, #256]	; (8010aa0 <compress_kitiku+0x3c0>)
 801099e:	2200      	movs	r2, #0
 80109a0:	701a      	strb	r2, [r3, #0]
				break;
 80109a2:	e050      	b.n	8010a46 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80109a4:	4b3e      	ldr	r3, [pc, #248]	; (8010aa0 <compress_kitiku+0x3c0>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	701a      	strb	r2, [r3, #0]
				break;
 80109aa:	e04c      	b.n	8010a46 <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80109ac:	8a3a      	ldrh	r2, [r7, #16]
 80109ae:	8afb      	ldrh	r3, [r7, #22]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d213      	bcs.n	80109dc <compress_kitiku+0x2fc>
 80109b4:	8a3a      	ldrh	r2, [r7, #16]
 80109b6:	8abb      	ldrh	r3, [r7, #20]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d20f      	bcs.n	80109dc <compress_kitiku+0x2fc>
 80109bc:	8a3a      	ldrh	r2, [r7, #16]
 80109be:	8a7b      	ldrh	r3, [r7, #18]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d80b      	bhi.n	80109dc <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 80109c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d003      	beq.n	80109d4 <compress_kitiku+0x2f4>
				kitiku = 0;
 80109cc:	4b34      	ldr	r3, [pc, #208]	; (8010aa0 <compress_kitiku+0x3c0>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	701a      	strb	r2, [r3, #0]
				break;
 80109d2:	e038      	b.n	8010a46 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80109d4:	4b32      	ldr	r3, [pc, #200]	; (8010aa0 <compress_kitiku+0x3c0>)
 80109d6:	2200      	movs	r2, #0
 80109d8:	701a      	strb	r2, [r3, #0]
				break;
 80109da:	e034      	b.n	8010a46 <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 80109dc:	8a7a      	ldrh	r2, [r7, #18]
 80109de:	8afb      	ldrh	r3, [r7, #22]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d20b      	bcs.n	80109fc <compress_kitiku+0x31c>
 80109e4:	8a7a      	ldrh	r2, [r7, #18]
 80109e6:	8abb      	ldrh	r3, [r7, #20]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d207      	bcs.n	80109fc <compress_kitiku+0x31c>
								&& back_count < left_count){
 80109ec:	8a7a      	ldrh	r2, [r7, #18]
 80109ee:	8a3b      	ldrh	r3, [r7, #16]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d203      	bcs.n	80109fc <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80109f4:	4b2a      	ldr	r3, [pc, #168]	; (8010aa0 <compress_kitiku+0x3c0>)
 80109f6:	2200      	movs	r2, #0
 80109f8:	701a      	strb	r2, [r3, #0]
			break;
 80109fa:	e024      	b.n	8010a46 <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80109fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109fe:	2b05      	cmp	r3, #5
 8010a00:	d101      	bne.n	8010a06 <compress_kitiku+0x326>
			direction_now = 1;
 8010a02:	2301      	movs	r3, #1
 8010a04:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 8010a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a08:	2b06      	cmp	r3, #6
 8010a0a:	d101      	bne.n	8010a10 <compress_kitiku+0x330>
			direction_now = 2;
 8010a0c:	2302      	movs	r3, #2
 8010a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 8010a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d101      	bne.n	8010a1a <compress_kitiku+0x33a>
			direction_now = 4;
 8010a16:	2304      	movs	r3, #4
 8010a18:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 8010a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a20:	d101      	bne.n	8010a26 <compress_kitiku+0x346>
			direction_now = 3;
 8010a22:	2303      	movs	r3, #3
 8010a24:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 8010a26:	4b1e      	ldr	r3, [pc, #120]	; (8010aa0 <compress_kitiku+0x3c0>)
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00a      	beq.n	8010a44 <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 8010a2e:	e66c      	b.n	801070a <compress_kitiku+0x2a>
			break;
 8010a30:	bf00      	nop
 8010a32:	e008      	b.n	8010a46 <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 8010a34:	bf00      	nop
 8010a36:	e006      	b.n	8010a46 <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 8010a38:	bf00      	nop
 8010a3a:	e004      	b.n	8010a46 <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 8010a3c:	bf00      	nop
 8010a3e:	e002      	b.n	8010a46 <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 8010a40:	bf00      	nop
 8010a42:	e000      	b.n	8010a46 <compress_kitiku+0x366>

			break;
 8010a44:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 8010a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a48:	3302      	adds	r3, #2
 8010a4a:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 8010a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a4e:	2b05      	cmp	r3, #5
 8010a50:	d101      	bne.n	8010a56 <compress_kitiku+0x376>
				direction2 = 1;
 8010a52:	2301      	movs	r3, #1
 8010a54:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 8010a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a58:	2b06      	cmp	r3, #6
 8010a5a:	d101      	bne.n	8010a60 <compress_kitiku+0x380>
				direction2 = 2;
 8010a5c:	2302      	movs	r3, #2
 8010a5e:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 8010a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d101      	bne.n	8010a6a <compress_kitiku+0x38a>
				direction2 = 4;
 8010a66:	2304      	movs	r3, #4
 8010a68:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 8010a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a70:	d101      	bne.n	8010a76 <compress_kitiku+0x396>
				direction2 = 3;
 8010a72:	2303      	movs	r3, #3
 8010a74:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 8010a76:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fd fc13 	bl	800e2ac <update_coordinate>

	*x=x_now;
 8010a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8010a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a96:	601a      	str	r2, [r3, #0]

}
 8010a98:	bf00      	nop
 8010a9a:	3754      	adds	r7, #84	; 0x54
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aa0:	20000829 	.word	0x20000829

08010aa4 <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8010aa4:	b480      	push	{r7}
 8010aa6:	b085      	sub	sp, #20
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
 8010ab0:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	f200 8272 	bhi.w	8010fa0 <update_wall+0x4fc>
 8010abc:	a201      	add	r2, pc, #4	; (adr r2, 8010ac4 <update_wall+0x20>)
 8010abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac2:	bf00      	nop
 8010ac4:	08010ad5 	.word	0x08010ad5
 8010ac8:	08010bfb 	.word	0x08010bfb
 8010acc:	08010d31 	.word	0x08010d31
 8010ad0:	08010e5f 	.word	0x08010e5f
	case 1:
		if (y <= 14) {
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2b0e      	cmp	r3, #14
 8010ad8:	dc2e      	bgt.n	8010b38 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010ada:	4a94      	ldr	r2, [pc, #592]	; (8010d2c <update_wall+0x288>)
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	332c      	adds	r3, #44	; 0x2c
 8010ae0:	005b      	lsls	r3, r3, #1
 8010ae2:	4413      	add	r3, r2
 8010ae4:	885b      	ldrh	r3, [r3, #2]
 8010ae6:	b21a      	sxth	r2, r3
 8010ae8:	2101      	movs	r1, #1
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	fa01 f303 	lsl.w	r3, r1, r3
 8010af0:	b21b      	sxth	r3, r3
 8010af2:	4313      	orrs	r3, r2
 8010af4:	b21b      	sxth	r3, r3
 8010af6:	b299      	uxth	r1, r3
 8010af8:	4a8c      	ldr	r2, [pc, #560]	; (8010d2c <update_wall+0x288>)
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	332c      	adds	r3, #44	; 0x2c
 8010afe:	005b      	lsls	r3, r3, #1
 8010b00:	4413      	add	r3, r2
 8010b02:	460a      	mov	r2, r1
 8010b04:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010b06:	78fb      	ldrb	r3, [r7, #3]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d015      	beq.n	8010b38 <update_wall+0x94>
 8010b0c:	4a87      	ldr	r2, [pc, #540]	; (8010d2c <update_wall+0x288>)
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	330c      	adds	r3, #12
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	4413      	add	r3, r2
 8010b16:	88db      	ldrh	r3, [r3, #6]
 8010b18:	b21a      	sxth	r2, r3
 8010b1a:	2101      	movs	r1, #1
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8010b22:	b21b      	sxth	r3, r3
 8010b24:	4313      	orrs	r3, r2
 8010b26:	b21b      	sxth	r3, r3
 8010b28:	b299      	uxth	r1, r3
 8010b2a:	4a80      	ldr	r2, [pc, #512]	; (8010d2c <update_wall+0x288>)
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	330c      	adds	r3, #12
 8010b30:	005b      	lsls	r3, r3, #1
 8010b32:	4413      	add	r3, r2
 8010b34:	460a      	mov	r2, r1
 8010b36:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	dd2d      	ble.n	8010b9a <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	4a7a      	ldr	r2, [pc, #488]	; (8010d2c <update_wall+0x288>)
 8010b44:	331c      	adds	r3, #28
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	4413      	add	r3, r2
 8010b4a:	889b      	ldrh	r3, [r3, #4]
 8010b4c:	b21a      	sxth	r2, r3
 8010b4e:	2101      	movs	r1, #1
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	fa01 f303 	lsl.w	r3, r1, r3
 8010b56:	b21b      	sxth	r3, r3
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	b21a      	sxth	r2, r3
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	b291      	uxth	r1, r2
 8010b62:	4a72      	ldr	r2, [pc, #456]	; (8010d2c <update_wall+0x288>)
 8010b64:	331c      	adds	r3, #28
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	4413      	add	r3, r2
 8010b6a:	460a      	mov	r2, r1
 8010b6c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010b6e:	7f3b      	ldrb	r3, [r7, #28]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d012      	beq.n	8010b9a <update_wall+0xf6>
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	3b01      	subs	r3, #1
 8010b78:	4a6c      	ldr	r2, [pc, #432]	; (8010d2c <update_wall+0x288>)
 8010b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b7e:	b21a      	sxth	r2, r3
 8010b80:	2101      	movs	r1, #1
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	fa01 f303 	lsl.w	r3, r1, r3
 8010b88:	b21b      	sxth	r3, r3
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	b21a      	sxth	r2, r3
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	3b01      	subs	r3, #1
 8010b92:	b291      	uxth	r1, r2
 8010b94:	4a65      	ldr	r2, [pc, #404]	; (8010d2c <update_wall+0x288>)
 8010b96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b0e      	cmp	r3, #14
 8010b9e:	f300 81f8 	bgt.w	8010f92 <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010ba2:	4a62      	ldr	r2, [pc, #392]	; (8010d2c <update_wall+0x288>)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	331c      	adds	r3, #28
 8010ba8:	005b      	lsls	r3, r3, #1
 8010baa:	4413      	add	r3, r2
 8010bac:	889b      	ldrh	r3, [r3, #4]
 8010bae:	b21a      	sxth	r2, r3
 8010bb0:	2101      	movs	r1, #1
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8010bb8:	b21b      	sxth	r3, r3
 8010bba:	4313      	orrs	r3, r2
 8010bbc:	b21b      	sxth	r3, r3
 8010bbe:	b299      	uxth	r1, r3
 8010bc0:	4a5a      	ldr	r2, [pc, #360]	; (8010d2c <update_wall+0x288>)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	331c      	adds	r3, #28
 8010bc6:	005b      	lsls	r3, r3, #1
 8010bc8:	4413      	add	r3, r2
 8010bca:	460a      	mov	r2, r1
 8010bcc:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010bce:	7e3b      	ldrb	r3, [r7, #24]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f000 81de 	beq.w	8010f92 <update_wall+0x4ee>
 8010bd6:	4a55      	ldr	r2, [pc, #340]	; (8010d2c <update_wall+0x288>)
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bde:	b21a      	sxth	r2, r3
 8010be0:	2101      	movs	r1, #1
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	fa01 f303 	lsl.w	r3, r1, r3
 8010be8:	b21b      	sxth	r3, r3
 8010bea:	4313      	orrs	r3, r2
 8010bec:	b21b      	sxth	r3, r3
 8010bee:	b299      	uxth	r1, r3
 8010bf0:	4a4e      	ldr	r2, [pc, #312]	; (8010d2c <update_wall+0x288>)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010bf8:	e1cb      	b.n	8010f92 <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2b0e      	cmp	r3, #14
 8010bfe:	dc29      	bgt.n	8010c54 <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010c00:	4a4a      	ldr	r2, [pc, #296]	; (8010d2c <update_wall+0x288>)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	331c      	adds	r3, #28
 8010c06:	005b      	lsls	r3, r3, #1
 8010c08:	4413      	add	r3, r2
 8010c0a:	889b      	ldrh	r3, [r3, #4]
 8010c0c:	b21a      	sxth	r2, r3
 8010c0e:	2101      	movs	r1, #1
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	fa01 f303 	lsl.w	r3, r1, r3
 8010c16:	b21b      	sxth	r3, r3
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	b21b      	sxth	r3, r3
 8010c1c:	b299      	uxth	r1, r3
 8010c1e:	4a43      	ldr	r2, [pc, #268]	; (8010d2c <update_wall+0x288>)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	331c      	adds	r3, #28
 8010c24:	005b      	lsls	r3, r3, #1
 8010c26:	4413      	add	r3, r2
 8010c28:	460a      	mov	r2, r1
 8010c2a:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010c2c:	78fb      	ldrb	r3, [r7, #3]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d010      	beq.n	8010c54 <update_wall+0x1b0>
 8010c32:	4a3e      	ldr	r2, [pc, #248]	; (8010d2c <update_wall+0x288>)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c3a:	b21a      	sxth	r2, r3
 8010c3c:	2101      	movs	r1, #1
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	fa01 f303 	lsl.w	r3, r1, r3
 8010c44:	b21b      	sxth	r3, r3
 8010c46:	4313      	orrs	r3, r2
 8010c48:	b21b      	sxth	r3, r3
 8010c4a:	b299      	uxth	r1, r3
 8010c4c:	4a37      	ldr	r2, [pc, #220]	; (8010d2c <update_wall+0x288>)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	2b0e      	cmp	r3, #14
 8010c58:	dc2e      	bgt.n	8010cb8 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010c5a:	4a34      	ldr	r2, [pc, #208]	; (8010d2c <update_wall+0x288>)
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	332c      	adds	r3, #44	; 0x2c
 8010c60:	005b      	lsls	r3, r3, #1
 8010c62:	4413      	add	r3, r2
 8010c64:	885b      	ldrh	r3, [r3, #2]
 8010c66:	b21a      	sxth	r2, r3
 8010c68:	2101      	movs	r1, #1
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c70:	b21b      	sxth	r3, r3
 8010c72:	4313      	orrs	r3, r2
 8010c74:	b21b      	sxth	r3, r3
 8010c76:	b299      	uxth	r1, r3
 8010c78:	4a2c      	ldr	r2, [pc, #176]	; (8010d2c <update_wall+0x288>)
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	332c      	adds	r3, #44	; 0x2c
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	4413      	add	r3, r2
 8010c82:	460a      	mov	r2, r1
 8010c84:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010c86:	7f3b      	ldrb	r3, [r7, #28]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d015      	beq.n	8010cb8 <update_wall+0x214>
 8010c8c:	4a27      	ldr	r2, [pc, #156]	; (8010d2c <update_wall+0x288>)
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	330c      	adds	r3, #12
 8010c92:	005b      	lsls	r3, r3, #1
 8010c94:	4413      	add	r3, r2
 8010c96:	88db      	ldrh	r3, [r3, #6]
 8010c98:	b21a      	sxth	r2, r3
 8010c9a:	2101      	movs	r1, #1
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca2:	b21b      	sxth	r3, r3
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	b21b      	sxth	r3, r3
 8010ca8:	b299      	uxth	r1, r3
 8010caa:	4a20      	ldr	r2, [pc, #128]	; (8010d2c <update_wall+0x288>)
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	330c      	adds	r3, #12
 8010cb0:	005b      	lsls	r3, r3, #1
 8010cb2:	4413      	add	r3, r2
 8010cb4:	460a      	mov	r2, r1
 8010cb6:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f340 816b 	ble.w	8010f96 <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	4a19      	ldr	r2, [pc, #100]	; (8010d2c <update_wall+0x288>)
 8010cc6:	332c      	adds	r3, #44	; 0x2c
 8010cc8:	005b      	lsls	r3, r3, #1
 8010cca:	4413      	add	r3, r2
 8010ccc:	885b      	ldrh	r3, [r3, #2]
 8010cce:	b21a      	sxth	r2, r3
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8010cd8:	b21b      	sxth	r3, r3
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	b21a      	sxth	r2, r3
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	b291      	uxth	r1, r2
 8010ce4:	4a11      	ldr	r2, [pc, #68]	; (8010d2c <update_wall+0x288>)
 8010ce6:	332c      	adds	r3, #44	; 0x2c
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	4413      	add	r3, r2
 8010cec:	460a      	mov	r2, r1
 8010cee:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010cf0:	7e3b      	ldrb	r3, [r7, #24]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 814f 	beq.w	8010f96 <update_wall+0x4f2>
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	4a0b      	ldr	r2, [pc, #44]	; (8010d2c <update_wall+0x288>)
 8010cfe:	330c      	adds	r3, #12
 8010d00:	005b      	lsls	r3, r3, #1
 8010d02:	4413      	add	r3, r2
 8010d04:	88db      	ldrh	r3, [r3, #6]
 8010d06:	b21a      	sxth	r2, r3
 8010d08:	2101      	movs	r1, #1
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8010d10:	b21b      	sxth	r3, r3
 8010d12:	4313      	orrs	r3, r2
 8010d14:	b21a      	sxth	r2, r3
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	b291      	uxth	r1, r2
 8010d1c:	4a03      	ldr	r2, [pc, #12]	; (8010d2c <update_wall+0x288>)
 8010d1e:	330c      	adds	r3, #12
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	4413      	add	r3, r2
 8010d24:	460a      	mov	r2, r1
 8010d26:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010d28:	e135      	b.n	8010f96 <update_wall+0x4f2>
 8010d2a:	bf00      	nop
 8010d2c:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	dd32      	ble.n	8010d9c <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	3b01      	subs	r3, #1
 8010d3a:	4a9c      	ldr	r2, [pc, #624]	; (8010fac <update_wall+0x508>)
 8010d3c:	332c      	adds	r3, #44	; 0x2c
 8010d3e:	005b      	lsls	r3, r3, #1
 8010d40:	4413      	add	r3, r2
 8010d42:	885b      	ldrh	r3, [r3, #2]
 8010d44:	b21a      	sxth	r2, r3
 8010d46:	2101      	movs	r1, #1
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d4e:	b21b      	sxth	r3, r3
 8010d50:	4313      	orrs	r3, r2
 8010d52:	b21a      	sxth	r2, r3
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	3b01      	subs	r3, #1
 8010d58:	b291      	uxth	r1, r2
 8010d5a:	4a94      	ldr	r2, [pc, #592]	; (8010fac <update_wall+0x508>)
 8010d5c:	332c      	adds	r3, #44	; 0x2c
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	4413      	add	r3, r2
 8010d62:	460a      	mov	r2, r1
 8010d64:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010d66:	78fb      	ldrb	r3, [r7, #3]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d017      	beq.n	8010d9c <update_wall+0x2f8>
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	3b01      	subs	r3, #1
 8010d70:	4a8e      	ldr	r2, [pc, #568]	; (8010fac <update_wall+0x508>)
 8010d72:	330c      	adds	r3, #12
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	4413      	add	r3, r2
 8010d78:	88db      	ldrh	r3, [r3, #6]
 8010d7a:	b21a      	sxth	r2, r3
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	fa01 f303 	lsl.w	r3, r1, r3
 8010d84:	b21b      	sxth	r3, r3
 8010d86:	4313      	orrs	r3, r2
 8010d88:	b21a      	sxth	r2, r3
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	b291      	uxth	r1, r2
 8010d90:	4a86      	ldr	r2, [pc, #536]	; (8010fac <update_wall+0x508>)
 8010d92:	330c      	adds	r3, #12
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	4413      	add	r3, r2
 8010d98:	460a      	mov	r2, r1
 8010d9a:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2b0e      	cmp	r3, #14
 8010da0:	dc29      	bgt.n	8010df6 <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010da2:	4a82      	ldr	r2, [pc, #520]	; (8010fac <update_wall+0x508>)
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	331c      	adds	r3, #28
 8010da8:	005b      	lsls	r3, r3, #1
 8010daa:	4413      	add	r3, r2
 8010dac:	889b      	ldrh	r3, [r3, #4]
 8010dae:	b21a      	sxth	r2, r3
 8010db0:	2101      	movs	r1, #1
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	fa01 f303 	lsl.w	r3, r1, r3
 8010db8:	b21b      	sxth	r3, r3
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	b299      	uxth	r1, r3
 8010dc0:	4a7a      	ldr	r2, [pc, #488]	; (8010fac <update_wall+0x508>)
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	331c      	adds	r3, #28
 8010dc6:	005b      	lsls	r3, r3, #1
 8010dc8:	4413      	add	r3, r2
 8010dca:	460a      	mov	r2, r1
 8010dcc:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010dce:	7f3b      	ldrb	r3, [r7, #28]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d010      	beq.n	8010df6 <update_wall+0x352>
 8010dd4:	4a75      	ldr	r2, [pc, #468]	; (8010fac <update_wall+0x508>)
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ddc:	b21a      	sxth	r2, r3
 8010dde:	2101      	movs	r1, #1
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	fa01 f303 	lsl.w	r3, r1, r3
 8010de6:	b21b      	sxth	r3, r3
 8010de8:	4313      	orrs	r3, r2
 8010dea:	b21b      	sxth	r3, r3
 8010dec:	b299      	uxth	r1, r3
 8010dee:	4a6f      	ldr	r2, [pc, #444]	; (8010fac <update_wall+0x508>)
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	f340 80ce 	ble.w	8010f9a <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	3b01      	subs	r3, #1
 8010e02:	4a6a      	ldr	r2, [pc, #424]	; (8010fac <update_wall+0x508>)
 8010e04:	331c      	adds	r3, #28
 8010e06:	005b      	lsls	r3, r3, #1
 8010e08:	4413      	add	r3, r2
 8010e0a:	889b      	ldrh	r3, [r3, #4]
 8010e0c:	b21a      	sxth	r2, r3
 8010e0e:	2101      	movs	r1, #1
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	fa01 f303 	lsl.w	r3, r1, r3
 8010e16:	b21b      	sxth	r3, r3
 8010e18:	4313      	orrs	r3, r2
 8010e1a:	b21a      	sxth	r2, r3
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	b291      	uxth	r1, r2
 8010e22:	4a62      	ldr	r2, [pc, #392]	; (8010fac <update_wall+0x508>)
 8010e24:	331c      	adds	r3, #28
 8010e26:	005b      	lsls	r3, r3, #1
 8010e28:	4413      	add	r3, r2
 8010e2a:	460a      	mov	r2, r1
 8010e2c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010e2e:	7e3b      	ldrb	r3, [r7, #24]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f000 80b2 	beq.w	8010f9a <update_wall+0x4f6>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	3b01      	subs	r3, #1
 8010e3a:	4a5c      	ldr	r2, [pc, #368]	; (8010fac <update_wall+0x508>)
 8010e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e40:	b21a      	sxth	r2, r3
 8010e42:	2101      	movs	r1, #1
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	fa01 f303 	lsl.w	r3, r1, r3
 8010e4a:	b21b      	sxth	r3, r3
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	b21a      	sxth	r2, r3
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	3b01      	subs	r3, #1
 8010e54:	b291      	uxth	r1, r2
 8010e56:	4a55      	ldr	r2, [pc, #340]	; (8010fac <update_wall+0x508>)
 8010e58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010e5c:	e09d      	b.n	8010f9a <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	dd2d      	ble.n	8010ec0 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	3b01      	subs	r3, #1
 8010e68:	4a50      	ldr	r2, [pc, #320]	; (8010fac <update_wall+0x508>)
 8010e6a:	331c      	adds	r3, #28
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	4413      	add	r3, r2
 8010e70:	889b      	ldrh	r3, [r3, #4]
 8010e72:	b21a      	sxth	r2, r3
 8010e74:	2101      	movs	r1, #1
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	fa01 f303 	lsl.w	r3, r1, r3
 8010e7c:	b21b      	sxth	r3, r3
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	b21a      	sxth	r2, r3
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	b291      	uxth	r1, r2
 8010e88:	4a48      	ldr	r2, [pc, #288]	; (8010fac <update_wall+0x508>)
 8010e8a:	331c      	adds	r3, #28
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	4413      	add	r3, r2
 8010e90:	460a      	mov	r2, r1
 8010e92:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010e94:	78fb      	ldrb	r3, [r7, #3]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d012      	beq.n	8010ec0 <update_wall+0x41c>
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	4a43      	ldr	r2, [pc, #268]	; (8010fac <update_wall+0x508>)
 8010ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ea4:	b21a      	sxth	r2, r3
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8010eae:	b21b      	sxth	r3, r3
 8010eb0:	4313      	orrs	r3, r2
 8010eb2:	b21a      	sxth	r2, r3
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	3b01      	subs	r3, #1
 8010eb8:	b291      	uxth	r1, r2
 8010eba:	4a3c      	ldr	r2, [pc, #240]	; (8010fac <update_wall+0x508>)
 8010ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	dd32      	ble.n	8010f2c <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	4a38      	ldr	r2, [pc, #224]	; (8010fac <update_wall+0x508>)
 8010ecc:	332c      	adds	r3, #44	; 0x2c
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	4413      	add	r3, r2
 8010ed2:	885b      	ldrh	r3, [r3, #2]
 8010ed4:	b21a      	sxth	r2, r3
 8010ed6:	2101      	movs	r1, #1
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	fa01 f303 	lsl.w	r3, r1, r3
 8010ede:	b21b      	sxth	r3, r3
 8010ee0:	4313      	orrs	r3, r2
 8010ee2:	b21a      	sxth	r2, r3
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	3b01      	subs	r3, #1
 8010ee8:	b291      	uxth	r1, r2
 8010eea:	4a30      	ldr	r2, [pc, #192]	; (8010fac <update_wall+0x508>)
 8010eec:	332c      	adds	r3, #44	; 0x2c
 8010eee:	005b      	lsls	r3, r3, #1
 8010ef0:	4413      	add	r3, r2
 8010ef2:	460a      	mov	r2, r1
 8010ef4:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010ef6:	7f3b      	ldrb	r3, [r7, #28]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d017      	beq.n	8010f2c <update_wall+0x488>
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	3b01      	subs	r3, #1
 8010f00:	4a2a      	ldr	r2, [pc, #168]	; (8010fac <update_wall+0x508>)
 8010f02:	330c      	adds	r3, #12
 8010f04:	005b      	lsls	r3, r3, #1
 8010f06:	4413      	add	r3, r2
 8010f08:	88db      	ldrh	r3, [r3, #6]
 8010f0a:	b21a      	sxth	r2, r3
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	fa01 f303 	lsl.w	r3, r1, r3
 8010f14:	b21b      	sxth	r3, r3
 8010f16:	4313      	orrs	r3, r2
 8010f18:	b21a      	sxth	r2, r3
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	3b01      	subs	r3, #1
 8010f1e:	b291      	uxth	r1, r2
 8010f20:	4a22      	ldr	r2, [pc, #136]	; (8010fac <update_wall+0x508>)
 8010f22:	330c      	adds	r3, #12
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	4413      	add	r3, r2
 8010f28:	460a      	mov	r2, r1
 8010f2a:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	2b0e      	cmp	r3, #14
 8010f30:	dc35      	bgt.n	8010f9e <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010f32:	4a1e      	ldr	r2, [pc, #120]	; (8010fac <update_wall+0x508>)
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	332c      	adds	r3, #44	; 0x2c
 8010f38:	005b      	lsls	r3, r3, #1
 8010f3a:	4413      	add	r3, r2
 8010f3c:	885b      	ldrh	r3, [r3, #2]
 8010f3e:	b21a      	sxth	r2, r3
 8010f40:	2101      	movs	r1, #1
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	fa01 f303 	lsl.w	r3, r1, r3
 8010f48:	b21b      	sxth	r3, r3
 8010f4a:	4313      	orrs	r3, r2
 8010f4c:	b21b      	sxth	r3, r3
 8010f4e:	b299      	uxth	r1, r3
 8010f50:	4a16      	ldr	r2, [pc, #88]	; (8010fac <update_wall+0x508>)
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	332c      	adds	r3, #44	; 0x2c
 8010f56:	005b      	lsls	r3, r3, #1
 8010f58:	4413      	add	r3, r2
 8010f5a:	460a      	mov	r2, r1
 8010f5c:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010f5e:	7e3b      	ldrb	r3, [r7, #24]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d01c      	beq.n	8010f9e <update_wall+0x4fa>
 8010f64:	4a11      	ldr	r2, [pc, #68]	; (8010fac <update_wall+0x508>)
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	330c      	adds	r3, #12
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	4413      	add	r3, r2
 8010f6e:	88db      	ldrh	r3, [r3, #6]
 8010f70:	b21a      	sxth	r2, r3
 8010f72:	2101      	movs	r1, #1
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	fa01 f303 	lsl.w	r3, r1, r3
 8010f7a:	b21b      	sxth	r3, r3
 8010f7c:	4313      	orrs	r3, r2
 8010f7e:	b21b      	sxth	r3, r3
 8010f80:	b299      	uxth	r1, r3
 8010f82:	4a0a      	ldr	r2, [pc, #40]	; (8010fac <update_wall+0x508>)
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	330c      	adds	r3, #12
 8010f88:	005b      	lsls	r3, r3, #1
 8010f8a:	4413      	add	r3, r2
 8010f8c:	460a      	mov	r2, r1
 8010f8e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010f90:	e005      	b.n	8010f9e <update_wall+0x4fa>
		break;
 8010f92:	bf00      	nop
 8010f94:	e004      	b.n	8010fa0 <update_wall+0x4fc>
		break;
 8010f96:	bf00      	nop
 8010f98:	e002      	b.n	8010fa0 <update_wall+0x4fc>
		break;
 8010f9a:	bf00      	nop
 8010f9c:	e000      	b.n	8010fa0 <update_wall+0x4fc>
		break;
 8010f9e:	bf00      	nop

	}


}
 8010fa0:	bf00      	nop
 8010fa2:	3714      	adds	r7, #20
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr
 8010fac:	20000c3c 	.word	0x20000c3c

08010fb0 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010fb0:	b480      	push	{r7}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	607a      	str	r2, [r7, #4]
 8010fbc:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	2b03      	cmp	r3, #3
 8010fd6:	f200 8156 	bhi.w	8011286 <get_wall+0x2d6>
 8010fda:	a201      	add	r2, pc, #4	; (adr r2, 8010fe0 <get_wall+0x30>)
 8010fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe0:	08010ff1 	.word	0x08010ff1
 8010fe4:	08011091 	.word	0x08011091
 8010fe8:	08011135 	.word	0x08011135
 8010fec:	080111d5 	.word	0x080111d5
	case 1:
		if (y <= 14) {
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	2b0e      	cmp	r3, #14
 8010ff4:	dc17      	bgt.n	8011026 <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010ff6:	4aa7      	ldr	r2, [pc, #668]	; (8011294 <get_wall+0x2e4>)
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	330c      	adds	r3, #12
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	4413      	add	r3, r2
 8011000:	88db      	ldrh	r3, [r3, #6]
 8011002:	4619      	mov	r1, r3
 8011004:	2201      	movs	r2, #1
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	fa02 f303 	lsl.w	r3, r2, r3
 801100c:	ea01 0203 	and.w	r2, r1, r3
 8011010:	2101      	movs	r1, #1
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	fa01 f303 	lsl.w	r3, r1, r3
 8011018:	429a      	cmp	r2, r3
 801101a:	bf0c      	ite	eq
 801101c:	2301      	moveq	r3, #1
 801101e:	2300      	movne	r3, #0
 8011020:	b2da      	uxtb	r2, r3
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2b00      	cmp	r3, #0
 801102a:	dd16      	ble.n	801105a <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	3b01      	subs	r3, #1
 8011030:	4a98      	ldr	r2, [pc, #608]	; (8011294 <get_wall+0x2e4>)
 8011032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011036:	4619      	mov	r1, r3
 8011038:	2201      	movs	r2, #1
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	fa02 f303 	lsl.w	r3, r2, r3
 8011040:	ea01 0203 	and.w	r2, r1, r3
 8011044:	2101      	movs	r1, #1
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	fa01 f303 	lsl.w	r3, r1, r3
 801104c:	429a      	cmp	r2, r3
 801104e:	bf0c      	ite	eq
 8011050:	2301      	moveq	r3, #1
 8011052:	2300      	movne	r3, #0
 8011054:	b2da      	uxtb	r2, r3
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2b0e      	cmp	r3, #14
 801105e:	f300 810b 	bgt.w	8011278 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011062:	4a8c      	ldr	r2, [pc, #560]	; (8011294 <get_wall+0x2e4>)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801106a:	4619      	mov	r1, r3
 801106c:	2201      	movs	r2, #1
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	fa02 f303 	lsl.w	r3, r2, r3
 8011074:	ea01 0203 	and.w	r2, r1, r3
 8011078:	2101      	movs	r1, #1
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	fa01 f303 	lsl.w	r3, r1, r3
 8011080:	429a      	cmp	r2, r3
 8011082:	bf0c      	ite	eq
 8011084:	2301      	moveq	r3, #1
 8011086:	2300      	movne	r3, #0
 8011088:	b2da      	uxtb	r2, r3
 801108a:	69bb      	ldr	r3, [r7, #24]
 801108c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801108e:	e0f3      	b.n	8011278 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2b0e      	cmp	r3, #14
 8011094:	dc15      	bgt.n	80110c2 <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011096:	4a7f      	ldr	r2, [pc, #508]	; (8011294 <get_wall+0x2e4>)
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801109e:	4619      	mov	r1, r3
 80110a0:	2201      	movs	r2, #1
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	fa02 f303 	lsl.w	r3, r2, r3
 80110a8:	ea01 0203 	and.w	r2, r1, r3
 80110ac:	2101      	movs	r1, #1
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	fa01 f303 	lsl.w	r3, r1, r3
 80110b4:	429a      	cmp	r2, r3
 80110b6:	bf0c      	ite	eq
 80110b8:	2301      	moveq	r3, #1
 80110ba:	2300      	movne	r3, #0
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	2b0e      	cmp	r3, #14
 80110c6:	dc17      	bgt.n	80110f8 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 80110c8:	4a72      	ldr	r2, [pc, #456]	; (8011294 <get_wall+0x2e4>)
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	330c      	adds	r3, #12
 80110ce:	005b      	lsls	r3, r3, #1
 80110d0:	4413      	add	r3, r2
 80110d2:	88db      	ldrh	r3, [r3, #6]
 80110d4:	4619      	mov	r1, r3
 80110d6:	2201      	movs	r2, #1
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	fa02 f303 	lsl.w	r3, r2, r3
 80110de:	ea01 0203 	and.w	r2, r1, r3
 80110e2:	2101      	movs	r1, #1
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	fa01 f303 	lsl.w	r3, r1, r3
 80110ea:	429a      	cmp	r2, r3
 80110ec:	bf0c      	ite	eq
 80110ee:	2301      	moveq	r3, #1
 80110f0:	2300      	movne	r3, #0
 80110f2:	b2da      	uxtb	r2, r3
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f340 80be 	ble.w	801127c <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	3b01      	subs	r3, #1
 8011104:	4a63      	ldr	r2, [pc, #396]	; (8011294 <get_wall+0x2e4>)
 8011106:	330c      	adds	r3, #12
 8011108:	005b      	lsls	r3, r3, #1
 801110a:	4413      	add	r3, r2
 801110c:	88db      	ldrh	r3, [r3, #6]
 801110e:	4619      	mov	r1, r3
 8011110:	2201      	movs	r2, #1
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	fa02 f303 	lsl.w	r3, r2, r3
 8011118:	ea01 0203 	and.w	r2, r1, r3
 801111c:	2101      	movs	r1, #1
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	fa01 f303 	lsl.w	r3, r1, r3
 8011124:	429a      	cmp	r2, r3
 8011126:	bf0c      	ite	eq
 8011128:	2301      	moveq	r3, #1
 801112a:	2300      	movne	r3, #0
 801112c:	b2da      	uxtb	r2, r3
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011132:	e0a3      	b.n	801127c <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	dd18      	ble.n	801116c <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	3b01      	subs	r3, #1
 801113e:	4a55      	ldr	r2, [pc, #340]	; (8011294 <get_wall+0x2e4>)
 8011140:	330c      	adds	r3, #12
 8011142:	005b      	lsls	r3, r3, #1
 8011144:	4413      	add	r3, r2
 8011146:	88db      	ldrh	r3, [r3, #6]
 8011148:	4619      	mov	r1, r3
 801114a:	2201      	movs	r2, #1
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	fa02 f303 	lsl.w	r3, r2, r3
 8011152:	ea01 0203 	and.w	r2, r1, r3
 8011156:	2101      	movs	r1, #1
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	fa01 f303 	lsl.w	r3, r1, r3
 801115e:	429a      	cmp	r2, r3
 8011160:	bf0c      	ite	eq
 8011162:	2301      	moveq	r3, #1
 8011164:	2300      	movne	r3, #0
 8011166:	b2da      	uxtb	r2, r3
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2b0e      	cmp	r3, #14
 8011170:	dc15      	bgt.n	801119e <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011172:	4a48      	ldr	r2, [pc, #288]	; (8011294 <get_wall+0x2e4>)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801117a:	4619      	mov	r1, r3
 801117c:	2201      	movs	r2, #1
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	fa02 f303 	lsl.w	r3, r2, r3
 8011184:	ea01 0203 	and.w	r2, r1, r3
 8011188:	2101      	movs	r1, #1
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	fa01 f303 	lsl.w	r3, r1, r3
 8011190:	429a      	cmp	r2, r3
 8011192:	bf0c      	ite	eq
 8011194:	2301      	moveq	r3, #1
 8011196:	2300      	movne	r3, #0
 8011198:	b2da      	uxtb	r2, r3
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dd6d      	ble.n	8011280 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	3b01      	subs	r3, #1
 80111a8:	4a3a      	ldr	r2, [pc, #232]	; (8011294 <get_wall+0x2e4>)
 80111aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111ae:	4619      	mov	r1, r3
 80111b0:	2201      	movs	r2, #1
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	fa02 f303 	lsl.w	r3, r2, r3
 80111b8:	ea01 0203 	and.w	r2, r1, r3
 80111bc:	2101      	movs	r1, #1
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	fa01 f303 	lsl.w	r3, r1, r3
 80111c4:	429a      	cmp	r2, r3
 80111c6:	bf0c      	ite	eq
 80111c8:	2301      	moveq	r3, #1
 80111ca:	2300      	movne	r3, #0
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80111d2:	e055      	b.n	8011280 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	dd16      	ble.n	8011208 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3b01      	subs	r3, #1
 80111de:	4a2d      	ldr	r2, [pc, #180]	; (8011294 <get_wall+0x2e4>)
 80111e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111e4:	4619      	mov	r1, r3
 80111e6:	2201      	movs	r2, #1
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	fa02 f303 	lsl.w	r3, r2, r3
 80111ee:	ea01 0203 	and.w	r2, r1, r3
 80111f2:	2101      	movs	r1, #1
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	fa01 f303 	lsl.w	r3, r1, r3
 80111fa:	429a      	cmp	r2, r3
 80111fc:	bf0c      	ite	eq
 80111fe:	2301      	moveq	r3, #1
 8011200:	2300      	movne	r3, #0
 8011202:	b2da      	uxtb	r2, r3
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	2b00      	cmp	r3, #0
 801120c:	dd18      	ble.n	8011240 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	3b01      	subs	r3, #1
 8011212:	4a20      	ldr	r2, [pc, #128]	; (8011294 <get_wall+0x2e4>)
 8011214:	330c      	adds	r3, #12
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	4413      	add	r3, r2
 801121a:	88db      	ldrh	r3, [r3, #6]
 801121c:	4619      	mov	r1, r3
 801121e:	2201      	movs	r2, #1
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	fa02 f303 	lsl.w	r3, r2, r3
 8011226:	ea01 0203 	and.w	r2, r1, r3
 801122a:	2101      	movs	r1, #1
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	fa01 f303 	lsl.w	r3, r1, r3
 8011232:	429a      	cmp	r2, r3
 8011234:	bf0c      	ite	eq
 8011236:	2301      	moveq	r3, #1
 8011238:	2300      	movne	r3, #0
 801123a:	b2da      	uxtb	r2, r3
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	2b0e      	cmp	r3, #14
 8011244:	dc1e      	bgt.n	8011284 <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8011246:	4a13      	ldr	r2, [pc, #76]	; (8011294 <get_wall+0x2e4>)
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	330c      	adds	r3, #12
 801124c:	005b      	lsls	r3, r3, #1
 801124e:	4413      	add	r3, r2
 8011250:	88db      	ldrh	r3, [r3, #6]
 8011252:	4619      	mov	r1, r3
 8011254:	2201      	movs	r2, #1
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	fa02 f303 	lsl.w	r3, r2, r3
 801125c:	ea01 0203 	and.w	r2, r1, r3
 8011260:	2101      	movs	r1, #1
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	fa01 f303 	lsl.w	r3, r1, r3
 8011268:	429a      	cmp	r2, r3
 801126a:	bf0c      	ite	eq
 801126c:	2301      	moveq	r3, #1
 801126e:	2300      	movne	r3, #0
 8011270:	b2da      	uxtb	r2, r3
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011276:	e005      	b.n	8011284 <get_wall+0x2d4>
		break;
 8011278:	bf00      	nop
 801127a:	e004      	b.n	8011286 <get_wall+0x2d6>
		break;
 801127c:	bf00      	nop
 801127e:	e002      	b.n	8011286 <get_wall+0x2d6>
		break;
 8011280:	bf00      	nop
 8011282:	e000      	b.n	8011286 <get_wall+0x2d6>
		break;
 8011284:	bf00      	nop
	}

}
 8011286:	bf00      	nop
 8011288:	3714      	adds	r7, #20
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	20000c3c 	.word	0x20000c3c

08011298 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	607a      	str	r2, [r7, #4]
 80112a4:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	2201      	movs	r2, #1
 80112aa:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	2201      	movs	r2, #1
 80112b0:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	2201      	movs	r2, #1
 80112b6:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	3b01      	subs	r3, #1
 80112bc:	2b03      	cmp	r3, #3
 80112be:	f200 8162 	bhi.w	8011586 <get_wall_look+0x2ee>
 80112c2:	a201      	add	r2, pc, #4	; (adr r2, 80112c8 <get_wall_look+0x30>)
 80112c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c8:	080112d9 	.word	0x080112d9
 80112cc:	08011381 	.word	0x08011381
 80112d0:	08011429 	.word	0x08011429
 80112d4:	080114d1 	.word	0x080114d1
	case 1:
		if (y <= 14) {
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	2b0e      	cmp	r3, #14
 80112dc:	dc17      	bgt.n	801130e <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80112de:	4aad      	ldr	r2, [pc, #692]	; (8011594 <get_wall_look+0x2fc>)
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	332c      	adds	r3, #44	; 0x2c
 80112e4:	005b      	lsls	r3, r3, #1
 80112e6:	4413      	add	r3, r2
 80112e8:	885b      	ldrh	r3, [r3, #2]
 80112ea:	4619      	mov	r1, r3
 80112ec:	2201      	movs	r2, #1
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	fa02 f303 	lsl.w	r3, r2, r3
 80112f4:	ea01 0203 	and.w	r2, r1, r3
 80112f8:	2101      	movs	r1, #1
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011300:	429a      	cmp	r2, r3
 8011302:	bf0c      	ite	eq
 8011304:	2301      	moveq	r3, #1
 8011306:	2300      	movne	r3, #0
 8011308:	b2da      	uxtb	r2, r3
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2b00      	cmp	r3, #0
 8011312:	dd18      	ble.n	8011346 <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	3b01      	subs	r3, #1
 8011318:	4a9e      	ldr	r2, [pc, #632]	; (8011594 <get_wall_look+0x2fc>)
 801131a:	331c      	adds	r3, #28
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	4413      	add	r3, r2
 8011320:	889b      	ldrh	r3, [r3, #4]
 8011322:	4619      	mov	r1, r3
 8011324:	2201      	movs	r2, #1
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	fa02 f303 	lsl.w	r3, r2, r3
 801132c:	ea01 0203 	and.w	r2, r1, r3
 8011330:	2101      	movs	r1, #1
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	fa01 f303 	lsl.w	r3, r1, r3
 8011338:	429a      	cmp	r2, r3
 801133a:	bf0c      	ite	eq
 801133c:	2301      	moveq	r3, #1
 801133e:	2300      	movne	r3, #0
 8011340:	b2da      	uxtb	r2, r3
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2b0e      	cmp	r3, #14
 801134a:	f300 8115 	bgt.w	8011578 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801134e:	4a91      	ldr	r2, [pc, #580]	; (8011594 <get_wall_look+0x2fc>)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	331c      	adds	r3, #28
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	4413      	add	r3, r2
 8011358:	889b      	ldrh	r3, [r3, #4]
 801135a:	4619      	mov	r1, r3
 801135c:	2201      	movs	r2, #1
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	fa02 f303 	lsl.w	r3, r2, r3
 8011364:	ea01 0203 	and.w	r2, r1, r3
 8011368:	2101      	movs	r1, #1
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	fa01 f303 	lsl.w	r3, r1, r3
 8011370:	429a      	cmp	r2, r3
 8011372:	bf0c      	ite	eq
 8011374:	2301      	moveq	r3, #1
 8011376:	2300      	movne	r3, #0
 8011378:	b2da      	uxtb	r2, r3
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801137e:	e0fb      	b.n	8011578 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2b0e      	cmp	r3, #14
 8011384:	dc17      	bgt.n	80113b6 <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011386:	4a83      	ldr	r2, [pc, #524]	; (8011594 <get_wall_look+0x2fc>)
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	331c      	adds	r3, #28
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	4413      	add	r3, r2
 8011390:	889b      	ldrh	r3, [r3, #4]
 8011392:	4619      	mov	r1, r3
 8011394:	2201      	movs	r2, #1
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	fa02 f303 	lsl.w	r3, r2, r3
 801139c:	ea01 0203 	and.w	r2, r1, r3
 80113a0:	2101      	movs	r1, #1
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	fa01 f303 	lsl.w	r3, r1, r3
 80113a8:	429a      	cmp	r2, r3
 80113aa:	bf0c      	ite	eq
 80113ac:	2301      	moveq	r3, #1
 80113ae:	2300      	movne	r3, #0
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	2b0e      	cmp	r3, #14
 80113ba:	dc17      	bgt.n	80113ec <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80113bc:	4a75      	ldr	r2, [pc, #468]	; (8011594 <get_wall_look+0x2fc>)
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	332c      	adds	r3, #44	; 0x2c
 80113c2:	005b      	lsls	r3, r3, #1
 80113c4:	4413      	add	r3, r2
 80113c6:	885b      	ldrh	r3, [r3, #2]
 80113c8:	4619      	mov	r1, r3
 80113ca:	2201      	movs	r2, #1
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	fa02 f303 	lsl.w	r3, r2, r3
 80113d2:	ea01 0203 	and.w	r2, r1, r3
 80113d6:	2101      	movs	r1, #1
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	fa01 f303 	lsl.w	r3, r1, r3
 80113de:	429a      	cmp	r2, r3
 80113e0:	bf0c      	ite	eq
 80113e2:	2301      	moveq	r3, #1
 80113e4:	2300      	movne	r3, #0
 80113e6:	b2da      	uxtb	r2, r3
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f340 80c4 	ble.w	801157c <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	4a66      	ldr	r2, [pc, #408]	; (8011594 <get_wall_look+0x2fc>)
 80113fa:	332c      	adds	r3, #44	; 0x2c
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	4413      	add	r3, r2
 8011400:	885b      	ldrh	r3, [r3, #2]
 8011402:	4619      	mov	r1, r3
 8011404:	2201      	movs	r2, #1
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	fa02 f303 	lsl.w	r3, r2, r3
 801140c:	ea01 0203 	and.w	r2, r1, r3
 8011410:	2101      	movs	r1, #1
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	fa01 f303 	lsl.w	r3, r1, r3
 8011418:	429a      	cmp	r2, r3
 801141a:	bf0c      	ite	eq
 801141c:	2301      	moveq	r3, #1
 801141e:	2300      	movne	r3, #0
 8011420:	b2da      	uxtb	r2, r3
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011426:	e0a9      	b.n	801157c <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	2b00      	cmp	r3, #0
 801142c:	dd18      	ble.n	8011460 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	3b01      	subs	r3, #1
 8011432:	4a58      	ldr	r2, [pc, #352]	; (8011594 <get_wall_look+0x2fc>)
 8011434:	332c      	adds	r3, #44	; 0x2c
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	4413      	add	r3, r2
 801143a:	885b      	ldrh	r3, [r3, #2]
 801143c:	4619      	mov	r1, r3
 801143e:	2201      	movs	r2, #1
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	fa02 f303 	lsl.w	r3, r2, r3
 8011446:	ea01 0203 	and.w	r2, r1, r3
 801144a:	2101      	movs	r1, #1
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	fa01 f303 	lsl.w	r3, r1, r3
 8011452:	429a      	cmp	r2, r3
 8011454:	bf0c      	ite	eq
 8011456:	2301      	moveq	r3, #1
 8011458:	2300      	movne	r3, #0
 801145a:	b2da      	uxtb	r2, r3
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2b0e      	cmp	r3, #14
 8011464:	dc17      	bgt.n	8011496 <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011466:	4a4b      	ldr	r2, [pc, #300]	; (8011594 <get_wall_look+0x2fc>)
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	331c      	adds	r3, #28
 801146c:	005b      	lsls	r3, r3, #1
 801146e:	4413      	add	r3, r2
 8011470:	889b      	ldrh	r3, [r3, #4]
 8011472:	4619      	mov	r1, r3
 8011474:	2201      	movs	r2, #1
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	fa02 f303 	lsl.w	r3, r2, r3
 801147c:	ea01 0203 	and.w	r2, r1, r3
 8011480:	2101      	movs	r1, #1
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	fa01 f303 	lsl.w	r3, r1, r3
 8011488:	429a      	cmp	r2, r3
 801148a:	bf0c      	ite	eq
 801148c:	2301      	moveq	r3, #1
 801148e:	2300      	movne	r3, #0
 8011490:	b2da      	uxtb	r2, r3
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2b00      	cmp	r3, #0
 801149a:	dd71      	ble.n	8011580 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	3b01      	subs	r3, #1
 80114a0:	4a3c      	ldr	r2, [pc, #240]	; (8011594 <get_wall_look+0x2fc>)
 80114a2:	331c      	adds	r3, #28
 80114a4:	005b      	lsls	r3, r3, #1
 80114a6:	4413      	add	r3, r2
 80114a8:	889b      	ldrh	r3, [r3, #4]
 80114aa:	4619      	mov	r1, r3
 80114ac:	2201      	movs	r2, #1
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	fa02 f303 	lsl.w	r3, r2, r3
 80114b4:	ea01 0203 	and.w	r2, r1, r3
 80114b8:	2101      	movs	r1, #1
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	fa01 f303 	lsl.w	r3, r1, r3
 80114c0:	429a      	cmp	r2, r3
 80114c2:	bf0c      	ite	eq
 80114c4:	2301      	moveq	r3, #1
 80114c6:	2300      	movne	r3, #0
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80114ce:	e057      	b.n	8011580 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dd18      	ble.n	8011508 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	3b01      	subs	r3, #1
 80114da:	4a2e      	ldr	r2, [pc, #184]	; (8011594 <get_wall_look+0x2fc>)
 80114dc:	331c      	adds	r3, #28
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	4413      	add	r3, r2
 80114e2:	889b      	ldrh	r3, [r3, #4]
 80114e4:	4619      	mov	r1, r3
 80114e6:	2201      	movs	r2, #1
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	fa02 f303 	lsl.w	r3, r2, r3
 80114ee:	ea01 0203 	and.w	r2, r1, r3
 80114f2:	2101      	movs	r1, #1
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	fa01 f303 	lsl.w	r3, r1, r3
 80114fa:	429a      	cmp	r2, r3
 80114fc:	bf0c      	ite	eq
 80114fe:	2301      	moveq	r3, #1
 8011500:	2300      	movne	r3, #0
 8011502:	b2da      	uxtb	r2, r3
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	2b00      	cmp	r3, #0
 801150c:	dd18      	ble.n	8011540 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	3b01      	subs	r3, #1
 8011512:	4a20      	ldr	r2, [pc, #128]	; (8011594 <get_wall_look+0x2fc>)
 8011514:	332c      	adds	r3, #44	; 0x2c
 8011516:	005b      	lsls	r3, r3, #1
 8011518:	4413      	add	r3, r2
 801151a:	885b      	ldrh	r3, [r3, #2]
 801151c:	4619      	mov	r1, r3
 801151e:	2201      	movs	r2, #1
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	fa02 f303 	lsl.w	r3, r2, r3
 8011526:	ea01 0203 	and.w	r2, r1, r3
 801152a:	2101      	movs	r1, #1
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	fa01 f303 	lsl.w	r3, r1, r3
 8011532:	429a      	cmp	r2, r3
 8011534:	bf0c      	ite	eq
 8011536:	2301      	moveq	r3, #1
 8011538:	2300      	movne	r3, #0
 801153a:	b2da      	uxtb	r2, r3
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2b0e      	cmp	r3, #14
 8011544:	dc1e      	bgt.n	8011584 <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011546:	4a13      	ldr	r2, [pc, #76]	; (8011594 <get_wall_look+0x2fc>)
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	332c      	adds	r3, #44	; 0x2c
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	4413      	add	r3, r2
 8011550:	885b      	ldrh	r3, [r3, #2]
 8011552:	4619      	mov	r1, r3
 8011554:	2201      	movs	r2, #1
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	fa02 f303 	lsl.w	r3, r2, r3
 801155c:	ea01 0203 	and.w	r2, r1, r3
 8011560:	2101      	movs	r1, #1
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	fa01 f303 	lsl.w	r3, r1, r3
 8011568:	429a      	cmp	r2, r3
 801156a:	bf0c      	ite	eq
 801156c:	2301      	moveq	r3, #1
 801156e:	2300      	movne	r3, #0
 8011570:	b2da      	uxtb	r2, r3
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011576:	e005      	b.n	8011584 <get_wall_look+0x2ec>
		break;
 8011578:	bf00      	nop
 801157a:	e004      	b.n	8011586 <get_wall_look+0x2ee>
		break;
 801157c:	bf00      	nop
 801157e:	e002      	b.n	8011586 <get_wall_look+0x2ee>
		break;
 8011580:	bf00      	nop
 8011582:	e000      	b.n	8011586 <get_wall_look+0x2ee>
		break;
 8011584:	bf00      	nop
	}

}
 8011586:	bf00      	nop
 8011588:	3714      	adds	r7, #20
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	20000c3c 	.word	0x20000c3c

08011598 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011598:	b480      	push	{r7}
 801159a:	b087      	sub	sp, #28
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
 80115a4:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 80115a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a8:	2b0e      	cmp	r3, #14
 80115aa:	dd02      	ble.n	80115b2 <search_AroundWalkCount+0x1a>
 80115ac:	23ff      	movs	r3, #255	; 0xff
 80115ae:	82fb      	strh	r3, [r7, #22]
 80115b0:	e008      	b.n	80115c4 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[16 * x + y + 1];}
 80115b2:	6a3b      	ldr	r3, [r7, #32]
 80115b4:	011a      	lsls	r2, r3, #4
 80115b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b8:	4413      	add	r3, r2
 80115ba:	3301      	adds	r3, #1
 80115bc:	4a3c      	ldr	r2, [pc, #240]	; (80116b0 <search_AroundWalkCount+0x118>)
 80115be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115c2:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 80115c4:	6a3b      	ldr	r3, [r7, #32]
 80115c6:	2b0e      	cmp	r3, #14
 80115c8:	dd02      	ble.n	80115d0 <search_AroundWalkCount+0x38>
 80115ca:	23ff      	movs	r3, #255	; 0xff
 80115cc:	82bb      	strh	r3, [r7, #20]
 80115ce:	e008      	b.n	80115e2 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[16 * (x + 1) + y];}
 80115d0:	6a3b      	ldr	r3, [r7, #32]
 80115d2:	3301      	adds	r3, #1
 80115d4:	011a      	lsls	r2, r3, #4
 80115d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d8:	4413      	add	r3, r2
 80115da:	4a35      	ldr	r2, [pc, #212]	; (80116b0 <search_AroundWalkCount+0x118>)
 80115dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115e0:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80115e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	dc02      	bgt.n	80115ee <search_AroundWalkCount+0x56>
 80115e8:	23ff      	movs	r3, #255	; 0xff
 80115ea:	827b      	strh	r3, [r7, #18]
 80115ec:	e008      	b.n	8011600 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[16 * x + y - 1];}
 80115ee:	6a3b      	ldr	r3, [r7, #32]
 80115f0:	011a      	lsls	r2, r3, #4
 80115f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f4:	4413      	add	r3, r2
 80115f6:	3b01      	subs	r3, #1
 80115f8:	4a2d      	ldr	r2, [pc, #180]	; (80116b0 <search_AroundWalkCount+0x118>)
 80115fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115fe:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011600:	6a3b      	ldr	r3, [r7, #32]
 8011602:	2b00      	cmp	r3, #0
 8011604:	dc02      	bgt.n	801160c <search_AroundWalkCount+0x74>
 8011606:	23ff      	movs	r3, #255	; 0xff
 8011608:	823b      	strh	r3, [r7, #16]
 801160a:	e008      	b.n	801161e <search_AroundWalkCount+0x86>
	else {west_count = walk_count[16 * (x - 1) + y];}
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	3b01      	subs	r3, #1
 8011610:	011a      	lsls	r2, r3, #4
 8011612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011614:	4413      	add	r3, r2
 8011616:	4a26      	ldr	r2, [pc, #152]	; (80116b0 <search_AroundWalkCount+0x118>)
 8011618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801161c:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 801161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011620:	3b01      	subs	r3, #1
 8011622:	2b03      	cmp	r3, #3
 8011624:	d83e      	bhi.n	80116a4 <search_AroundWalkCount+0x10c>
 8011626:	a201      	add	r2, pc, #4	; (adr r2, 801162c <search_AroundWalkCount+0x94>)
 8011628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801162c:	0801163d 	.word	0x0801163d
 8011630:	08011657 	.word	0x08011657
 8011634:	08011671 	.word	0x08011671
 8011638:	0801168b 	.word	0x0801168b
	case 1:
		*front_count = north_count;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	8afa      	ldrh	r2, [r7, #22]
 8011640:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	8aba      	ldrh	r2, [r7, #20]
 8011646:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	8a7a      	ldrh	r2, [r7, #18]
 801164c:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	8a3a      	ldrh	r2, [r7, #16]
 8011652:	801a      	strh	r2, [r3, #0]
		break;
 8011654:	e026      	b.n	80116a4 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	8aba      	ldrh	r2, [r7, #20]
 801165a:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	8a7a      	ldrh	r2, [r7, #18]
 8011660:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	8a3a      	ldrh	r2, [r7, #16]
 8011666:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	8afa      	ldrh	r2, [r7, #22]
 801166c:	801a      	strh	r2, [r3, #0]
		break;
 801166e:	e019      	b.n	80116a4 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	8a7a      	ldrh	r2, [r7, #18]
 8011674:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	8a3a      	ldrh	r2, [r7, #16]
 801167a:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	8afa      	ldrh	r2, [r7, #22]
 8011680:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	8aba      	ldrh	r2, [r7, #20]
 8011686:	801a      	strh	r2, [r3, #0]
		break;
 8011688:	e00c      	b.n	80116a4 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	8a3a      	ldrh	r2, [r7, #16]
 801168e:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	8afa      	ldrh	r2, [r7, #22]
 8011694:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8aba      	ldrh	r2, [r7, #20]
 801169a:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	8a7a      	ldrh	r2, [r7, #18]
 80116a0:	801a      	strh	r2, [r3, #0]
		break;
 80116a2:	bf00      	nop

	}


}
 80116a4:	bf00      	nop
 80116a6:	371c      	adds	r7, #28
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr
 80116b0:	20000d2c 	.word	0x20000d2c

080116b4 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 80116b4:	b480      	push	{r7}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
 80116c0:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	2b0e      	cmp	r3, #14
 80116c6:	dd03      	ble.n	80116d0 <search_AroundDijkstraCount+0x1c>
 80116c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116cc:	82fb      	strh	r3, [r7, #22]
 80116ce:	e00a      	b.n	80116e6 <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 80116d0:	4944      	ldr	r1, [pc, #272]	; (80117e4 <search_AroundDijkstraCount+0x130>)
 80116d2:	6a3a      	ldr	r2, [r7, #32]
 80116d4:	4613      	mov	r3, r2
 80116d6:	011b      	lsls	r3, r3, #4
 80116d8:	1a9b      	subs	r3, r3, r2
 80116da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116dc:	4413      	add	r3, r2
 80116de:	33f0      	adds	r3, #240	; 0xf0
 80116e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80116e4:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 80116e6:	6a3b      	ldr	r3, [r7, #32]
 80116e8:	2b0e      	cmp	r3, #14
 80116ea:	dd03      	ble.n	80116f4 <search_AroundDijkstraCount+0x40>
 80116ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116f0:	82bb      	strh	r3, [r7, #20]
 80116f2:	e009      	b.n	8011708 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 80116f4:	493b      	ldr	r1, [pc, #236]	; (80117e4 <search_AroundDijkstraCount+0x130>)
 80116f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116f8:	4613      	mov	r3, r2
 80116fa:	011b      	lsls	r3, r3, #4
 80116fc:	1a9b      	subs	r3, r3, r2
 80116fe:	6a3a      	ldr	r2, [r7, #32]
 8011700:	4413      	add	r3, r2
 8011702:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011706:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 8011708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170a:	2b00      	cmp	r3, #0
 801170c:	dc03      	bgt.n	8011716 <search_AroundDijkstraCount+0x62>
 801170e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011712:	827b      	strh	r3, [r7, #18]
 8011714:	e00b      	b.n	801172e <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 8011716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011718:	1e59      	subs	r1, r3, #1
 801171a:	4832      	ldr	r0, [pc, #200]	; (80117e4 <search_AroundDijkstraCount+0x130>)
 801171c:	6a3a      	ldr	r2, [r7, #32]
 801171e:	4613      	mov	r3, r2
 8011720:	011b      	lsls	r3, r3, #4
 8011722:	1a9b      	subs	r3, r3, r2
 8011724:	440b      	add	r3, r1
 8011726:	33f0      	adds	r3, #240	; 0xf0
 8011728:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801172c:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 801172e:	6a3b      	ldr	r3, [r7, #32]
 8011730:	2b00      	cmp	r3, #0
 8011732:	dc03      	bgt.n	801173c <search_AroundDijkstraCount+0x88>
 8011734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011738:	823b      	strh	r3, [r7, #16]
 801173a:	e00a      	b.n	8011752 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 801173c:	6a3b      	ldr	r3, [r7, #32]
 801173e:	1e59      	subs	r1, r3, #1
 8011740:	4828      	ldr	r0, [pc, #160]	; (80117e4 <search_AroundDijkstraCount+0x130>)
 8011742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011744:	4613      	mov	r3, r2
 8011746:	011b      	lsls	r3, r3, #4
 8011748:	1a9b      	subs	r3, r3, r2
 801174a:	440b      	add	r3, r1
 801174c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011750:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011754:	3b01      	subs	r3, #1
 8011756:	2b03      	cmp	r3, #3
 8011758:	d83e      	bhi.n	80117d8 <search_AroundDijkstraCount+0x124>
 801175a:	a201      	add	r2, pc, #4	; (adr r2, 8011760 <search_AroundDijkstraCount+0xac>)
 801175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011760:	08011771 	.word	0x08011771
 8011764:	0801178b 	.word	0x0801178b
 8011768:	080117a5 	.word	0x080117a5
 801176c:	080117bf 	.word	0x080117bf
	case 1:
		*front_count = north_count;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	8afa      	ldrh	r2, [r7, #22]
 8011774:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	8aba      	ldrh	r2, [r7, #20]
 801177a:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	8a7a      	ldrh	r2, [r7, #18]
 8011780:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	8a3a      	ldrh	r2, [r7, #16]
 8011786:	801a      	strh	r2, [r3, #0]
		break;
 8011788:	e026      	b.n	80117d8 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	8aba      	ldrh	r2, [r7, #20]
 801178e:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	8a7a      	ldrh	r2, [r7, #18]
 8011794:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	8a3a      	ldrh	r2, [r7, #16]
 801179a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	8afa      	ldrh	r2, [r7, #22]
 80117a0:	801a      	strh	r2, [r3, #0]
		break;
 80117a2:	e019      	b.n	80117d8 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	8a7a      	ldrh	r2, [r7, #18]
 80117a8:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	8a3a      	ldrh	r2, [r7, #16]
 80117ae:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	8afa      	ldrh	r2, [r7, #22]
 80117b4:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	8aba      	ldrh	r2, [r7, #20]
 80117ba:	801a      	strh	r2, [r3, #0]
		break;
 80117bc:	e00c      	b.n	80117d8 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	8a3a      	ldrh	r2, [r7, #16]
 80117c2:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	8afa      	ldrh	r2, [r7, #22]
 80117c8:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8aba      	ldrh	r2, [r7, #20]
 80117ce:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	8a7a      	ldrh	r2, [r7, #18]
 80117d4:	801a      	strh	r2, [r3, #0]
		break;
 80117d6:	bf00      	nop

	}


}
 80117d8:	bf00      	nop
 80117da:	371c      	adds	r7, #28
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr
 80117e4:	20000f2c 	.word	0x20000f2c

080117e8 <create_DijkstraMap>:
		}

}


void create_DijkstraMap(void){
 80117e8:	b5b0      	push	{r4, r5, r7, lr}
 80117ea:	f5ad 5dde 	sub.w	sp, sp, #7104	; 0x1bc0
 80117ee:	b082      	sub	sp, #8
 80117f0:	af04      	add	r7, sp, #16
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 80117f2:	23b4      	movs	r3, #180	; 0xb4
 80117f4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117f8:	f102 0216 	add.w	r2, r2, #22
 80117fc:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 80117fe:	237f      	movs	r3, #127	; 0x7f
 8011800:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011804:	f102 0214 	add.w	r2, r2, #20
 8011808:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 801180a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801180e:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011812:	4a4a      	ldr	r2, [pc, #296]	; (801193c <create_DijkstraMap+0x154>)
 8011814:	ca07      	ldmia	r2, {r0, r1, r2}
 8011816:	c303      	stmia	r3!, {r0, r1}
 8011818:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 801181a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801181e:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011822:	4a47      	ldr	r2, [pc, #284]	; (8011940 <create_DijkstraMap+0x158>)
 8011824:	ca07      	ldmia	r2, {r0, r1, r2}
 8011826:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
 801182a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801182e:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011836:	4619      	mov	r1, r3
 8011838:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801183c:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011844:	4618      	mov	r0, r3
 8011846:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801184a:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801184e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011852:	461c      	mov	r4, r3
 8011854:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011858:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801185c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011860:	461a      	mov	r2, r3
 8011862:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011866:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801186a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801186e:	9301      	str	r3, [sp, #4]
 8011870:	9200      	str	r2, [sp, #0]
 8011872:	4623      	mov	r3, r4
 8011874:	4602      	mov	r2, r0
 8011876:	4833      	ldr	r0, [pc, #204]	; (8011944 <create_DijkstraMap+0x15c>)
 8011878:	f00e f828 	bl	801f8cc <iprintf>
	printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
 801187c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011880:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011888:	4618      	mov	r0, r3
 801188a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801188e:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011892:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011896:	461c      	mov	r4, r3
 8011898:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801189c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80118a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80118a4:	461d      	mov	r5, r3
 80118a6:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80118aa:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80118ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80118b2:	461a      	mov	r2, r3
 80118b4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80118b8:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80118bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80118c0:	4619      	mov	r1, r3
 80118c2:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80118c6:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80118ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80118ce:	9302      	str	r3, [sp, #8]
 80118d0:	9101      	str	r1, [sp, #4]
 80118d2:	9200      	str	r2, [sp, #0]
 80118d4:	462b      	mov	r3, r5
 80118d6:	4622      	mov	r2, r4
 80118d8:	4601      	mov	r1, r0
 80118da:	481b      	ldr	r0, [pc, #108]	; (8011948 <create_DijkstraMap+0x160>)
 80118dc:	f00d fff6 	bl	801f8cc <iprintf>
	initStack_walk(&stack_x);
 80118e0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80118e4:	f103 031c 	add.w	r3, r3, #28
 80118e8:	4618      	mov	r0, r3
 80118ea:	f002 fee7 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_y);
 80118ee:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80118f2:	f103 031c 	add.w	r3, r3, #28
 80118f6:	4618      	mov	r0, r3
 80118f8:	f002 fee0 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_matrix);
 80118fc:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011900:	3b1c      	subs	r3, #28
 8011902:	4618      	mov	r0, r3
 8011904:	f002 feda 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_direction);
 8011908:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801190c:	3b1c      	subs	r3, #28
 801190e:	4618      	mov	r0, r3
 8011910:	f002 fed4 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_cost);
 8011914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011918:	3b1c      	subs	r3, #28
 801191a:	4618      	mov	r0, r3
 801191c:	f002 fece 	bl	80146bc <initStack_walk>
	for(int i=0;i<=15;i++){
 8011920:	2300      	movs	r3, #0
 8011922:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011926:	f102 020c 	add.w	r2, r2, #12
 801192a:	6013      	str	r3, [r2, #0]
 801192c:	e052      	b.n	80119d4 <create_DijkstraMap+0x1ec>
		for(int j=0;j<=14;j++){
 801192e:	2300      	movs	r3, #0
 8011930:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011934:	f102 0208 	add.w	r2, r2, #8
 8011938:	6013      	str	r3, [r2, #0]
 801193a:	e039      	b.n	80119b0 <create_DijkstraMap+0x1c8>
 801193c:	08022128 	.word	0x08022128
 8011940:	08022134 	.word	0x08022134
 8011944:	08022104 	.word	0x08022104
 8011948:	08022114 	.word	0x08022114
			Dijkstra.column_count[i][j]=65535;
 801194c:	49c1      	ldr	r1, [pc, #772]	; (8011c54 <create_DijkstraMap+0x46c>)
 801194e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011952:	f103 030c 	add.w	r3, r3, #12
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	4613      	mov	r3, r2
 801195a:	011b      	lsls	r3, r3, #4
 801195c:	1a9b      	subs	r3, r3, r2
 801195e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011962:	f102 0208 	add.w	r2, r2, #8
 8011966:	6812      	ldr	r2, [r2, #0]
 8011968:	4413      	add	r3, r2
 801196a:	33f0      	adds	r3, #240	; 0xf0
 801196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011970:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 8011974:	49b7      	ldr	r1, [pc, #732]	; (8011c54 <create_DijkstraMap+0x46c>)
 8011976:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801197a:	f103 030c 	add.w	r3, r3, #12
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	4613      	mov	r3, r2
 8011982:	011b      	lsls	r3, r3, #4
 8011984:	1a9b      	subs	r3, r3, r2
 8011986:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801198a:	f102 0208 	add.w	r2, r2, #8
 801198e:	6812      	ldr	r2, [r2, #0]
 8011990:	4413      	add	r3, r2
 8011992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011996:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 801199a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801199e:	f103 0308 	add.w	r3, r3, #8
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	3301      	adds	r3, #1
 80119a6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119aa:	f102 0208 	add.w	r2, r2, #8
 80119ae:	6013      	str	r3, [r2, #0]
 80119b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119b4:	f103 0308 	add.w	r3, r3, #8
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b0e      	cmp	r3, #14
 80119bc:	ddc6      	ble.n	801194c <create_DijkstraMap+0x164>
	for(int i=0;i<=15;i++){
 80119be:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119c2:	f103 030c 	add.w	r3, r3, #12
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	3301      	adds	r3, #1
 80119ca:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119ce:	f102 020c 	add.w	r2, r2, #12
 80119d2:	6013      	str	r3, [r2, #0]
 80119d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119d8:	f103 030c 	add.w	r3, r3, #12
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b0f      	cmp	r3, #15
 80119e0:	dda5      	ble.n	801192e <create_DijkstraMap+0x146>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 80119e2:	4b9c      	ldr	r3, [pc, #624]	; (8011c54 <create_DijkstraMap+0x46c>)
 80119e4:	2200      	movs	r2, #0
 80119e6:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 80119ea:	4b9a      	ldr	r3, [pc, #616]	; (8011c54 <create_DijkstraMap+0x46c>)
 80119ec:	2200      	movs	r2, #0
 80119ee:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 80119f2:	4b98      	ldr	r3, [pc, #608]	; (8011c54 <create_DijkstraMap+0x46c>)
 80119f4:	2200      	movs	r2, #0
 80119f6:	805a      	strh	r2, [r3, #2]
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 80119f8:	4b96      	ldr	r3, [pc, #600]	; (8011c54 <create_DijkstraMap+0x46c>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	841a      	strh	r2, [r3, #32]
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80119fe:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011a02:	f103 031c 	add.w	r3, r3, #28
 8011a06:	2101      	movs	r1, #1
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f002 fe67 	bl	80146dc <pushStack_walk>
 8011a0e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011a12:	f103 031c 	add.w	r3, r3, #28
 8011a16:	2100      	movs	r1, #0
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f002 fe5f 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011a1e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011a22:	3b1c      	subs	r3, #28
 8011a24:	2100      	movs	r1, #0
 8011a26:	4618      	mov	r0, r3
 8011a28:	f002 fe58 	bl	80146dc <pushStack_walk>
 8011a2c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011a30:	3b1c      	subs	r3, #28
 8011a32:	2108      	movs	r1, #8
 8011a34:	4618      	mov	r0, r3
 8011a36:	f002 fe51 	bl	80146dc <pushStack_walk>
 8011a3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011a3e:	3b1c      	subs	r3, #28
 8011a40:	2100      	movs	r1, #0
 8011a42:	4618      	mov	r0, r3
 8011a44:	f002 fe4a 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 8011a48:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011a4c:	f103 031c 	add.w	r3, r3, #28
 8011a50:	2102      	movs	r1, #2
 8011a52:	4618      	mov	r0, r3
 8011a54:	f002 fe42 	bl	80146dc <pushStack_walk>
 8011a58:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011a5c:	f103 031c 	add.w	r3, r3, #28
 8011a60:	2100      	movs	r1, #0
 8011a62:	4618      	mov	r0, r3
 8011a64:	f002 fe3a 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011a68:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011a6c:	3b1c      	subs	r3, #28
 8011a6e:	2100      	movs	r1, #0
 8011a70:	4618      	mov	r0, r3
 8011a72:	f002 fe33 	bl	80146dc <pushStack_walk>
 8011a76:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011a7a:	3b1c      	subs	r3, #28
 8011a7c:	2108      	movs	r1, #8
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f002 fe2c 	bl	80146dc <pushStack_walk>
 8011a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011a88:	3b1c      	subs	r3, #28
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f002 fe25 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011a92:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011a96:	f103 031c 	add.w	r3, r3, #28
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f002 fe1d 	bl	80146dc <pushStack_walk>
 8011aa2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011aa6:	f103 031c 	add.w	r3, r3, #28
 8011aaa:	2100      	movs	r1, #0
 8011aac:	4618      	mov	r0, r3
 8011aae:	f002 fe15 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011ab2:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011ab6:	3b1c      	subs	r3, #28
 8011ab8:	2101      	movs	r1, #1
 8011aba:	4618      	mov	r0, r3
 8011abc:	f002 fe0e 	bl	80146dc <pushStack_walk>
 8011ac0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011ac4:	3b1c      	subs	r3, #28
 8011ac6:	2108      	movs	r1, #8
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f002 fe07 	bl	80146dc <pushStack_walk>
 8011ace:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011ad2:	3b1c      	subs	r3, #28
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f002 fe00 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 8011adc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011ae0:	f103 031c 	add.w	r3, r3, #28
 8011ae4:	2101      	movs	r1, #1
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f002 fdf8 	bl	80146dc <pushStack_walk>
 8011aec:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011af0:	f103 031c 	add.w	r3, r3, #28
 8011af4:	2101      	movs	r1, #1
 8011af6:	4618      	mov	r0, r3
 8011af8:	f002 fdf0 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011afc:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011b00:	3b1c      	subs	r3, #28
 8011b02:	2101      	movs	r1, #1
 8011b04:	4618      	mov	r0, r3
 8011b06:	f002 fde9 	bl	80146dc <pushStack_walk>
 8011b0a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011b0e:	3b1c      	subs	r3, #28
 8011b10:	2108      	movs	r1, #8
 8011b12:	4618      	mov	r0, r3
 8011b14:	f002 fde2 	bl	80146dc <pushStack_walk>
 8011b18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011b1c:	3b1c      	subs	r3, #28
 8011b1e:	2100      	movs	r1, #0
 8011b20:	4618      	mov	r0, r3
 8011b22:	f002 fddb 	bl	80146dc <pushStack_walk>



	unsigned short count_number = 1;
 8011b26:	2301      	movs	r3, #1
 8011b28:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b2c:	f102 0206 	add.w	r2, r2, #6
 8011b30:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 8011b32:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011b36:	f103 031c 	add.w	r3, r3, #28
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f002 fdf8 	bl	8014730 <popStack_walk>
 8011b40:	4603      	mov	r3, r0
 8011b42:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b46:	f102 0204 	add.w	r2, r2, #4
 8011b4a:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8011b4c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011b50:	f103 031c 	add.w	r3, r3, #28
 8011b54:	4618      	mov	r0, r3
 8011b56:	f002 fdeb 	bl	8014730 <popStack_walk>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b60:	f102 0202 	add.w	r2, r2, #2
 8011b64:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 8011b66:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011b6a:	3b1c      	subs	r3, #28
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f002 fddf 	bl	8014730 <popStack_walk>
 8011b72:	4603      	mov	r3, r0
 8011b74:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011b78:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8011b7a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011b7e:	3b1c      	subs	r3, #28
 8011b80:	4618      	mov	r0, r3
 8011b82:	f002 fdd5 	bl	8014730 <popStack_walk>
 8011b86:	4603      	mov	r3, r0
 8011b88:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 8011b8c:	f102 021e 	add.w	r2, r2, #30
 8011b90:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8011b92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011b96:	3b1c      	subs	r3, #28
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f002 fdc9 	bl	8014730 <popStack_walk>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 8011ba4:	f102 021c 	add.w	r2, r2, #28
 8011ba8:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8011baa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bae:	f103 0304 	add.w	r3, r3, #4
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	f001 8394 	beq.w	80132e6 <create_DijkstraMap+0x1afe>
 8011bbe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bc2:	f103 0302 	add.w	r3, r3, #2
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	f001 838a 	beq.w	80132e6 <create_DijkstraMap+0x1afe>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011bd2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bd6:	881b      	ldrh	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	f040 85bb 	bne.w	8012754 <create_DijkstraMap+0xf6c>
			if(Ycoordinate <= 13){
 8011bde:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011be2:	f103 0302 	add.w	r3, r3, #2
 8011be6:	881b      	ldrh	r3, [r3, #0]
 8011be8:	2b0d      	cmp	r3, #13
 8011bea:	f200 80f0 	bhi.w	8011dce <create_DijkstraMap+0x5e6>
				if(Direction==SLANT_NORTH){
 8011bee:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011bf2:	f103 031e 	add.w	r3, r3, #30
 8011bf6:	881b      	ldrh	r3, [r3, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d12d      	bne.n	8011c58 <create_DijkstraMap+0x470>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011bfc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011c00:	f103 031c 	add.w	r3, r3, #28
 8011c04:	881b      	ldrh	r3, [r3, #0]
 8011c06:	3301      	adds	r3, #1
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c0e:	f102 0212 	add.w	r2, r2, #18
 8011c12:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011c14:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c18:	f103 0312 	add.w	r3, r3, #18
 8011c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c20:	2b04      	cmp	r3, #4
 8011c22:	dd05      	ble.n	8011c30 <create_DijkstraMap+0x448>
 8011c24:	2304      	movs	r3, #4
 8011c26:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c2a:	f102 0212 	add.w	r2, r2, #18
 8011c2e:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011c30:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c34:	f103 0312 	add.w	r3, r3, #18
 8011c38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c3c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011c40:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011c44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011c48:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c4c:	f102 0216 	add.w	r2, r2, #22
 8011c50:	8013      	strh	r3, [r2, #0]
 8011c52:	e011      	b.n	8011c78 <create_DijkstraMap+0x490>
 8011c54:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011c58:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011c5c:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011c60:	881b      	ldrh	r3, [r3, #0]
 8011c62:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c66:	f102 0216 	add.w	r2, r2, #22
 8011c6a:	8013      	strh	r3, [r2, #0]
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c72:	f102 0212 	add.w	r2, r2, #18
 8011c76:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011c78:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c7c:	f103 0302 	add.w	r3, r3, #2
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	3301      	adds	r3, #1
 8011c84:	4a6f      	ldr	r2, [pc, #444]	; (8011e44 <create_DijkstraMap+0x65c>)
 8011c86:	330c      	adds	r3, #12
 8011c88:	005b      	lsls	r3, r3, #1
 8011c8a:	4413      	add	r3, r2
 8011c8c:	88db      	ldrh	r3, [r3, #6]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c94:	f103 0304 	add.w	r3, r3, #4
 8011c98:	881b      	ldrh	r3, [r3, #0]
 8011c9a:	fa42 f303 	asr.w	r3, r2, r3
 8011c9e:	f003 0301 	and.w	r3, r3, #1
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f040 8093 	bne.w	8011dce <create_DijkstraMap+0x5e6>
 8011ca8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cac:	f103 0304 	add.w	r3, r3, #4
 8011cb0:	881a      	ldrh	r2, [r3, #0]
 8011cb2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cb6:	f103 0302 	add.w	r3, r3, #2
 8011cba:	881b      	ldrh	r3, [r3, #0]
 8011cbc:	1c59      	adds	r1, r3, #1
 8011cbe:	4862      	ldr	r0, [pc, #392]	; (8011e48 <create_DijkstraMap+0x660>)
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	011b      	lsls	r3, r3, #4
 8011cc4:	1a9b      	subs	r3, r3, r2
 8011cc6:	440b      	add	r3, r1
 8011cc8:	33f0      	adds	r3, #240	; 0xf0
 8011cca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011cce:	461c      	mov	r4, r3
 8011cd0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cd4:	f103 0304 	add.w	r3, r3, #4
 8011cd8:	881a      	ldrh	r2, [r3, #0]
 8011cda:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cde:	f103 0302 	add.w	r3, r3, #2
 8011ce2:	8819      	ldrh	r1, [r3, #0]
 8011ce4:	4858      	ldr	r0, [pc, #352]	; (8011e48 <create_DijkstraMap+0x660>)
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	011b      	lsls	r3, r3, #4
 8011cea:	1a9b      	subs	r3, r3, r2
 8011cec:	440b      	add	r3, r1
 8011cee:	33f0      	adds	r3, #240	; 0xf0
 8011cf0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cfa:	f103 0316 	add.w	r3, r3, #22
 8011cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d02:	4413      	add	r3, r2
 8011d04:	429c      	cmp	r4, r3
 8011d06:	dd62      	ble.n	8011dce <create_DijkstraMap+0x5e6>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011d08:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d0c:	f103 0304 	add.w	r3, r3, #4
 8011d10:	881a      	ldrh	r2, [r3, #0]
 8011d12:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d16:	f103 0302 	add.w	r3, r3, #2
 8011d1a:	8819      	ldrh	r1, [r3, #0]
 8011d1c:	484a      	ldr	r0, [pc, #296]	; (8011e48 <create_DijkstraMap+0x660>)
 8011d1e:	4613      	mov	r3, r2
 8011d20:	011b      	lsls	r3, r3, #4
 8011d22:	1a9b      	subs	r3, r3, r2
 8011d24:	440b      	add	r3, r1
 8011d26:	33f0      	adds	r3, #240	; 0xf0
 8011d28:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011d2c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d30:	f103 0316 	add.w	r3, r3, #22
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d3a:	f102 0204 	add.w	r2, r2, #4
 8011d3e:	8812      	ldrh	r2, [r2, #0]
 8011d40:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011d44:	f101 0102 	add.w	r1, r1, #2
 8011d48:	8809      	ldrh	r1, [r1, #0]
 8011d4a:	3101      	adds	r1, #1
 8011d4c:	4403      	add	r3, r0
 8011d4e:	b29c      	uxth	r4, r3
 8011d50:	483d      	ldr	r0, [pc, #244]	; (8011e48 <create_DijkstraMap+0x660>)
 8011d52:	4613      	mov	r3, r2
 8011d54:	011b      	lsls	r3, r3, #4
 8011d56:	1a9b      	subs	r3, r3, r2
 8011d58:	440b      	add	r3, r1
 8011d5a:	33f0      	adds	r3, #240	; 0xf0
 8011d5c:	4622      	mov	r2, r4
 8011d5e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011d62:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d66:	f103 0304 	add.w	r3, r3, #4
 8011d6a:	881a      	ldrh	r2, [r3, #0]
 8011d6c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011d70:	f103 031c 	add.w	r3, r3, #28
 8011d74:	4611      	mov	r1, r2
 8011d76:	4618      	mov	r0, r3
 8011d78:	f002 fcb0 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011d7c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d80:	f103 0302 	add.w	r3, r3, #2
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	3301      	adds	r3, #1
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011d8e:	f103 031c 	add.w	r3, r3, #28
 8011d92:	4611      	mov	r1, r2
 8011d94:	4618      	mov	r0, r3
 8011d96:	f002 fca1 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011d9a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011d9e:	3b1c      	subs	r3, #28
 8011da0:	2100      	movs	r1, #0
 8011da2:	4618      	mov	r0, r3
 8011da4:	f002 fc9a 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011da8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011dac:	3b1c      	subs	r3, #28
 8011dae:	2100      	movs	r1, #0
 8011db0:	4618      	mov	r0, r3
 8011db2:	f002 fc93 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011db6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011dba:	f103 0312 	add.w	r3, r3, #18
 8011dbe:	881a      	ldrh	r2, [r3, #0]
 8011dc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011dc4:	3b1c      	subs	r3, #28
 8011dc6:	4611      	mov	r1, r2
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f002 fc87 	bl	80146dc <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011dce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011dd2:	f103 0302 	add.w	r3, r3, #2
 8011dd6:	881b      	ldrh	r3, [r3, #0]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f000 80f2 	beq.w	8011fc2 <create_DijkstraMap+0x7da>
				if(Direction==SLANT_SOUTH){
 8011dde:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011de2:	f103 031e 	add.w	r3, r3, #30
 8011de6:	881b      	ldrh	r3, [r3, #0]
 8011de8:	2b04      	cmp	r3, #4
 8011dea:	d12f      	bne.n	8011e4c <create_DijkstraMap+0x664>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011dec:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011df0:	f103 031c 	add.w	r3, r3, #28
 8011df4:	881b      	ldrh	r3, [r3, #0]
 8011df6:	3301      	adds	r3, #1
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dfe:	f102 0212 	add.w	r2, r2, #18
 8011e02:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011e04:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e08:	f103 0312 	add.w	r3, r3, #18
 8011e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e10:	2b04      	cmp	r3, #4
 8011e12:	dd05      	ble.n	8011e20 <create_DijkstraMap+0x638>
 8011e14:	2304      	movs	r3, #4
 8011e16:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e1a:	f102 0212 	add.w	r2, r2, #18
 8011e1e:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011e20:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e24:	f103 0312 	add.w	r3, r3, #18
 8011e28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e2c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011e30:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011e34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011e38:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e3c:	f102 0216 	add.w	r2, r2, #22
 8011e40:	8013      	strh	r3, [r2, #0]
 8011e42:	e013      	b.n	8011e6c <create_DijkstraMap+0x684>
 8011e44:	20000c3c 	.word	0x20000c3c
 8011e48:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011e4c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011e50:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e5a:	f102 0216 	add.w	r2, r2, #22
 8011e5e:	8013      	strh	r3, [r2, #0]
 8011e60:	2300      	movs	r3, #0
 8011e62:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011e66:	f102 0212 	add.w	r2, r2, #18
 8011e6a:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011e6c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e70:	f103 0302 	add.w	r3, r3, #2
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	3b01      	subs	r3, #1
 8011e78:	4a6f      	ldr	r2, [pc, #444]	; (8012038 <create_DijkstraMap+0x850>)
 8011e7a:	330c      	adds	r3, #12
 8011e7c:	005b      	lsls	r3, r3, #1
 8011e7e:	4413      	add	r3, r2
 8011e80:	88db      	ldrh	r3, [r3, #6]
 8011e82:	461a      	mov	r2, r3
 8011e84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e88:	f103 0304 	add.w	r3, r3, #4
 8011e8c:	881b      	ldrh	r3, [r3, #0]
 8011e8e:	fa42 f303 	asr.w	r3, r2, r3
 8011e92:	f003 0301 	and.w	r3, r3, #1
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	f040 8093 	bne.w	8011fc2 <create_DijkstraMap+0x7da>
 8011e9c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ea0:	f103 0304 	add.w	r3, r3, #4
 8011ea4:	881a      	ldrh	r2, [r3, #0]
 8011ea6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011eaa:	f103 0302 	add.w	r3, r3, #2
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	1e59      	subs	r1, r3, #1
 8011eb2:	4862      	ldr	r0, [pc, #392]	; (801203c <create_DijkstraMap+0x854>)
 8011eb4:	4613      	mov	r3, r2
 8011eb6:	011b      	lsls	r3, r3, #4
 8011eb8:	1a9b      	subs	r3, r3, r2
 8011eba:	440b      	add	r3, r1
 8011ebc:	33f0      	adds	r3, #240	; 0xf0
 8011ebe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ec2:	461c      	mov	r4, r3
 8011ec4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ec8:	f103 0304 	add.w	r3, r3, #4
 8011ecc:	881a      	ldrh	r2, [r3, #0]
 8011ece:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ed2:	f103 0302 	add.w	r3, r3, #2
 8011ed6:	8819      	ldrh	r1, [r3, #0]
 8011ed8:	4858      	ldr	r0, [pc, #352]	; (801203c <create_DijkstraMap+0x854>)
 8011eda:	4613      	mov	r3, r2
 8011edc:	011b      	lsls	r3, r3, #4
 8011ede:	1a9b      	subs	r3, r3, r2
 8011ee0:	440b      	add	r3, r1
 8011ee2:	33f0      	adds	r3, #240	; 0xf0
 8011ee4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ee8:	461a      	mov	r2, r3
 8011eea:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011eee:	f103 0316 	add.w	r3, r3, #22
 8011ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	429c      	cmp	r4, r3
 8011efa:	dd62      	ble.n	8011fc2 <create_DijkstraMap+0x7da>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011efc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f00:	f103 0304 	add.w	r3, r3, #4
 8011f04:	881a      	ldrh	r2, [r3, #0]
 8011f06:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f0a:	f103 0302 	add.w	r3, r3, #2
 8011f0e:	8819      	ldrh	r1, [r3, #0]
 8011f10:	484a      	ldr	r0, [pc, #296]	; (801203c <create_DijkstraMap+0x854>)
 8011f12:	4613      	mov	r3, r2
 8011f14:	011b      	lsls	r3, r3, #4
 8011f16:	1a9b      	subs	r3, r3, r2
 8011f18:	440b      	add	r3, r1
 8011f1a:	33f0      	adds	r3, #240	; 0xf0
 8011f1c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011f20:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f24:	f103 0316 	add.w	r3, r3, #22
 8011f28:	881b      	ldrh	r3, [r3, #0]
 8011f2a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f2e:	f102 0204 	add.w	r2, r2, #4
 8011f32:	8812      	ldrh	r2, [r2, #0]
 8011f34:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011f38:	f101 0102 	add.w	r1, r1, #2
 8011f3c:	8809      	ldrh	r1, [r1, #0]
 8011f3e:	3901      	subs	r1, #1
 8011f40:	4403      	add	r3, r0
 8011f42:	b29c      	uxth	r4, r3
 8011f44:	483d      	ldr	r0, [pc, #244]	; (801203c <create_DijkstraMap+0x854>)
 8011f46:	4613      	mov	r3, r2
 8011f48:	011b      	lsls	r3, r3, #4
 8011f4a:	1a9b      	subs	r3, r3, r2
 8011f4c:	440b      	add	r3, r1
 8011f4e:	33f0      	adds	r3, #240	; 0xf0
 8011f50:	4622      	mov	r2, r4
 8011f52:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011f56:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f5a:	f103 0304 	add.w	r3, r3, #4
 8011f5e:	881a      	ldrh	r2, [r3, #0]
 8011f60:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011f64:	f103 031c 	add.w	r3, r3, #28
 8011f68:	4611      	mov	r1, r2
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f002 fbb6 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011f70:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f74:	f103 0302 	add.w	r3, r3, #2
 8011f78:	881b      	ldrh	r3, [r3, #0]
 8011f7a:	3b01      	subs	r3, #1
 8011f7c:	b29a      	uxth	r2, r3
 8011f7e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011f82:	f103 031c 	add.w	r3, r3, #28
 8011f86:	4611      	mov	r1, r2
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f002 fba7 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011f8e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011f92:	3b1c      	subs	r3, #28
 8011f94:	2100      	movs	r1, #0
 8011f96:	4618      	mov	r0, r3
 8011f98:	f002 fba0 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011f9c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011fa0:	3b1c      	subs	r3, #28
 8011fa2:	2104      	movs	r1, #4
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f002 fb99 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011faa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fae:	f103 0312 	add.w	r3, r3, #18
 8011fb2:	881a      	ldrh	r2, [r3, #0]
 8011fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011fb8:	3b1c      	subs	r3, #28
 8011fba:	4611      	mov	r1, r2
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f002 fb8d 	bl	80146dc <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011fc2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fc6:	f103 0304 	add.w	r3, r3, #4
 8011fca:	881b      	ldrh	r3, [r3, #0]
 8011fcc:	2b0e      	cmp	r3, #14
 8011fce:	f200 81d8 	bhi.w	8012382 <create_DijkstraMap+0xb9a>
				if(Direction==SLANT_SOUTH_EAST){
 8011fd2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011fd6:	f103 031e 	add.w	r3, r3, #30
 8011fda:	881b      	ldrh	r3, [r3, #0]
 8011fdc:	2b03      	cmp	r3, #3
 8011fde:	d12f      	bne.n	8012040 <create_DijkstraMap+0x858>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011fe0:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011fe4:	f103 031c 	add.w	r3, r3, #28
 8011fe8:	881b      	ldrh	r3, [r3, #0]
 8011fea:	3301      	adds	r3, #1
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ff2:	f102 0212 	add.w	r2, r2, #18
 8011ff6:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011ff8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ffc:	f103 0312 	add.w	r3, r3, #18
 8012000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012004:	2b05      	cmp	r3, #5
 8012006:	dd05      	ble.n	8012014 <create_DijkstraMap+0x82c>
 8012008:	2305      	movs	r3, #5
 801200a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801200e:	f102 0212 	add.w	r2, r2, #18
 8012012:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012014:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012018:	f103 0312 	add.w	r3, r3, #18
 801201c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012020:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012024:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012028:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801202c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012030:	f102 0214 	add.w	r2, r2, #20
 8012034:	8013      	strh	r3, [r2, #0]
 8012036:	e013      	b.n	8012060 <create_DijkstraMap+0x878>
 8012038:	20000c3c 	.word	0x20000c3c
 801203c:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012040:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012044:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012048:	881b      	ldrh	r3, [r3, #0]
 801204a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801204e:	f102 0214 	add.w	r2, r2, #20
 8012052:	8013      	strh	r3, [r2, #0]
 8012054:	2300      	movs	r3, #0
 8012056:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801205a:	f102 0212 	add.w	r2, r2, #18
 801205e:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012060:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012064:	f103 0304 	add.w	r3, r3, #4
 8012068:	881b      	ldrh	r3, [r3, #0]
 801206a:	4a68      	ldr	r2, [pc, #416]	; (801220c <create_DijkstraMap+0xa24>)
 801206c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012070:	461a      	mov	r2, r3
 8012072:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012076:	f103 0302 	add.w	r3, r3, #2
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	fa42 f303 	asr.w	r3, r2, r3
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	2b00      	cmp	r3, #0
 8012086:	f040 808d 	bne.w	80121a4 <create_DijkstraMap+0x9bc>
 801208a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801208e:	f103 0302 	add.w	r3, r3, #2
 8012092:	881a      	ldrh	r2, [r3, #0]
 8012094:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012098:	f103 0304 	add.w	r3, r3, #4
 801209c:	8819      	ldrh	r1, [r3, #0]
 801209e:	485c      	ldr	r0, [pc, #368]	; (8012210 <create_DijkstraMap+0xa28>)
 80120a0:	4613      	mov	r3, r2
 80120a2:	011b      	lsls	r3, r3, #4
 80120a4:	1a9b      	subs	r3, r3, r2
 80120a6:	440b      	add	r3, r1
 80120a8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120ac:	461c      	mov	r4, r3
 80120ae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120b2:	f103 0304 	add.w	r3, r3, #4
 80120b6:	881a      	ldrh	r2, [r3, #0]
 80120b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120bc:	f103 0302 	add.w	r3, r3, #2
 80120c0:	8819      	ldrh	r1, [r3, #0]
 80120c2:	4853      	ldr	r0, [pc, #332]	; (8012210 <create_DijkstraMap+0xa28>)
 80120c4:	4613      	mov	r3, r2
 80120c6:	011b      	lsls	r3, r3, #4
 80120c8:	1a9b      	subs	r3, r3, r2
 80120ca:	440b      	add	r3, r1
 80120cc:	33f0      	adds	r3, #240	; 0xf0
 80120ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120d2:	461a      	mov	r2, r3
 80120d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120d8:	f103 0314 	add.w	r3, r3, #20
 80120dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120e0:	4413      	add	r3, r2
 80120e2:	429c      	cmp	r4, r3
 80120e4:	dd5e      	ble.n	80121a4 <create_DijkstraMap+0x9bc>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80120e6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120ea:	f103 0304 	add.w	r3, r3, #4
 80120ee:	881a      	ldrh	r2, [r3, #0]
 80120f0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120f4:	f103 0302 	add.w	r3, r3, #2
 80120f8:	8819      	ldrh	r1, [r3, #0]
 80120fa:	4845      	ldr	r0, [pc, #276]	; (8012210 <create_DijkstraMap+0xa28>)
 80120fc:	4613      	mov	r3, r2
 80120fe:	011b      	lsls	r3, r3, #4
 8012100:	1a9b      	subs	r3, r3, r2
 8012102:	440b      	add	r3, r1
 8012104:	33f0      	adds	r3, #240	; 0xf0
 8012106:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801210a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801210e:	f103 0314 	add.w	r3, r3, #20
 8012112:	881b      	ldrh	r3, [r3, #0]
 8012114:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012118:	f102 0202 	add.w	r2, r2, #2
 801211c:	8812      	ldrh	r2, [r2, #0]
 801211e:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012122:	f101 0104 	add.w	r1, r1, #4
 8012126:	8809      	ldrh	r1, [r1, #0]
 8012128:	4403      	add	r3, r0
 801212a:	b29c      	uxth	r4, r3
 801212c:	4838      	ldr	r0, [pc, #224]	; (8012210 <create_DijkstraMap+0xa28>)
 801212e:	4613      	mov	r3, r2
 8012130:	011b      	lsls	r3, r3, #4
 8012132:	1a9b      	subs	r3, r3, r2
 8012134:	440b      	add	r3, r1
 8012136:	4622      	mov	r2, r4
 8012138:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 801213c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012140:	f103 0304 	add.w	r3, r3, #4
 8012144:	881a      	ldrh	r2, [r3, #0]
 8012146:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801214a:	f103 031c 	add.w	r3, r3, #28
 801214e:	4611      	mov	r1, r2
 8012150:	4618      	mov	r0, r3
 8012152:	f002 fac3 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012156:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801215a:	f103 0302 	add.w	r3, r3, #2
 801215e:	881a      	ldrh	r2, [r3, #0]
 8012160:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012164:	f103 031c 	add.w	r3, r3, #28
 8012168:	4611      	mov	r1, r2
 801216a:	4618      	mov	r0, r3
 801216c:	f002 fab6 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012170:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012174:	3b1c      	subs	r3, #28
 8012176:	2101      	movs	r1, #1
 8012178:	4618      	mov	r0, r3
 801217a:	f002 faaf 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 801217e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012182:	3b1c      	subs	r3, #28
 8012184:	2103      	movs	r1, #3
 8012186:	4618      	mov	r0, r3
 8012188:	f002 faa8 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801218c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012190:	f103 0312 	add.w	r3, r3, #18
 8012194:	881a      	ldrh	r2, [r3, #0]
 8012196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801219a:	3b1c      	subs	r3, #28
 801219c:	4611      	mov	r1, r2
 801219e:	4618      	mov	r0, r3
 80121a0:	f002 fa9c 	bl	80146dc <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 80121a4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80121a8:	f103 031e 	add.w	r3, r3, #30
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d130      	bne.n	8012214 <create_DijkstraMap+0xa2c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80121b2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80121b6:	f103 031c 	add.w	r3, r3, #28
 80121ba:	881b      	ldrh	r3, [r3, #0]
 80121bc:	3301      	adds	r3, #1
 80121be:	b29b      	uxth	r3, r3
 80121c0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121c4:	f102 0212 	add.w	r2, r2, #18
 80121c8:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80121ca:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121ce:	f103 0312 	add.w	r3, r3, #18
 80121d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121d6:	2b05      	cmp	r3, #5
 80121d8:	dd05      	ble.n	80121e6 <create_DijkstraMap+0x9fe>
 80121da:	2305      	movs	r3, #5
 80121dc:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121e0:	f102 0212 	add.w	r2, r2, #18
 80121e4:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80121e6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121ea:	f103 0312 	add.w	r3, r3, #18
 80121ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80121f2:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80121f6:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80121fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80121fe:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012202:	f102 0214 	add.w	r2, r2, #20
 8012206:	8013      	strh	r3, [r2, #0]
 8012208:	e014      	b.n	8012234 <create_DijkstraMap+0xa4c>
 801220a:	bf00      	nop
 801220c:	20000c3c 	.word	0x20000c3c
 8012210:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012214:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012218:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012222:	f102 0214 	add.w	r2, r2, #20
 8012226:	8013      	strh	r3, [r2, #0]
 8012228:	2300      	movs	r3, #0
 801222a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801222e:	f102 0212 	add.w	r2, r2, #18
 8012232:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012234:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012238:	f103 0304 	add.w	r3, r3, #4
 801223c:	881b      	ldrh	r3, [r3, #0]
 801223e:	4a6e      	ldr	r2, [pc, #440]	; (80123f8 <create_DijkstraMap+0xc10>)
 8012240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012244:	461a      	mov	r2, r3
 8012246:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801224a:	f103 0302 	add.w	r3, r3, #2
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	3301      	adds	r3, #1
 8012252:	fa42 f303 	asr.w	r3, r2, r3
 8012256:	f003 0301 	and.w	r3, r3, #1
 801225a:	2b00      	cmp	r3, #0
 801225c:	f040 8091 	bne.w	8012382 <create_DijkstraMap+0xb9a>
 8012260:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012264:	f103 0302 	add.w	r3, r3, #2
 8012268:	881b      	ldrh	r3, [r3, #0]
 801226a:	1c5a      	adds	r2, r3, #1
 801226c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012270:	f103 0304 	add.w	r3, r3, #4
 8012274:	8819      	ldrh	r1, [r3, #0]
 8012276:	4861      	ldr	r0, [pc, #388]	; (80123fc <create_DijkstraMap+0xc14>)
 8012278:	4613      	mov	r3, r2
 801227a:	011b      	lsls	r3, r3, #4
 801227c:	1a9b      	subs	r3, r3, r2
 801227e:	440b      	add	r3, r1
 8012280:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012284:	461c      	mov	r4, r3
 8012286:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801228a:	f103 0304 	add.w	r3, r3, #4
 801228e:	881a      	ldrh	r2, [r3, #0]
 8012290:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012294:	f103 0302 	add.w	r3, r3, #2
 8012298:	8819      	ldrh	r1, [r3, #0]
 801229a:	4858      	ldr	r0, [pc, #352]	; (80123fc <create_DijkstraMap+0xc14>)
 801229c:	4613      	mov	r3, r2
 801229e:	011b      	lsls	r3, r3, #4
 80122a0:	1a9b      	subs	r3, r3, r2
 80122a2:	440b      	add	r3, r1
 80122a4:	33f0      	adds	r3, #240	; 0xf0
 80122a6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80122aa:	461a      	mov	r2, r3
 80122ac:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122b0:	f103 0314 	add.w	r3, r3, #20
 80122b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122b8:	4413      	add	r3, r2
 80122ba:	429c      	cmp	r4, r3
 80122bc:	dd61      	ble.n	8012382 <create_DijkstraMap+0xb9a>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80122be:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122c2:	f103 0304 	add.w	r3, r3, #4
 80122c6:	881a      	ldrh	r2, [r3, #0]
 80122c8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122cc:	f103 0302 	add.w	r3, r3, #2
 80122d0:	8819      	ldrh	r1, [r3, #0]
 80122d2:	484a      	ldr	r0, [pc, #296]	; (80123fc <create_DijkstraMap+0xc14>)
 80122d4:	4613      	mov	r3, r2
 80122d6:	011b      	lsls	r3, r3, #4
 80122d8:	1a9b      	subs	r3, r3, r2
 80122da:	440b      	add	r3, r1
 80122dc:	33f0      	adds	r3, #240	; 0xf0
 80122de:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80122e2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122e6:	f103 0314 	add.w	r3, r3, #20
 80122ea:	881b      	ldrh	r3, [r3, #0]
 80122ec:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80122f0:	f102 0202 	add.w	r2, r2, #2
 80122f4:	8812      	ldrh	r2, [r2, #0]
 80122f6:	3201      	adds	r2, #1
 80122f8:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80122fc:	f101 0104 	add.w	r1, r1, #4
 8012300:	8809      	ldrh	r1, [r1, #0]
 8012302:	4403      	add	r3, r0
 8012304:	b29c      	uxth	r4, r3
 8012306:	483d      	ldr	r0, [pc, #244]	; (80123fc <create_DijkstraMap+0xc14>)
 8012308:	4613      	mov	r3, r2
 801230a:	011b      	lsls	r3, r3, #4
 801230c:	1a9b      	subs	r3, r3, r2
 801230e:	440b      	add	r3, r1
 8012310:	4622      	mov	r2, r4
 8012312:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012316:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801231a:	f103 0304 	add.w	r3, r3, #4
 801231e:	881a      	ldrh	r2, [r3, #0]
 8012320:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012324:	f103 031c 	add.w	r3, r3, #28
 8012328:	4611      	mov	r1, r2
 801232a:	4618      	mov	r0, r3
 801232c:	f002 f9d6 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012330:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012334:	f103 0302 	add.w	r3, r3, #2
 8012338:	881b      	ldrh	r3, [r3, #0]
 801233a:	3301      	adds	r3, #1
 801233c:	b29a      	uxth	r2, r3
 801233e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012342:	f103 031c 	add.w	r3, r3, #28
 8012346:	4611      	mov	r1, r2
 8012348:	4618      	mov	r0, r3
 801234a:	f002 f9c7 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801234e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012352:	3b1c      	subs	r3, #28
 8012354:	2101      	movs	r1, #1
 8012356:	4618      	mov	r0, r3
 8012358:	f002 f9c0 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 801235c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012360:	3b1c      	subs	r3, #28
 8012362:	2101      	movs	r1, #1
 8012364:	4618      	mov	r0, r3
 8012366:	f002 f9b9 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801236a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801236e:	f103 0312 	add.w	r3, r3, #18
 8012372:	881a      	ldrh	r2, [r3, #0]
 8012374:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012378:	3b1c      	subs	r3, #28
 801237a:	4611      	mov	r1, r2
 801237c:	4618      	mov	r0, r3
 801237e:	f002 f9ad 	bl	80146dc <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8012382:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012386:	f103 0304 	add.w	r3, r3, #4
 801238a:	881b      	ldrh	r3, [r3, #0]
 801238c:	2b00      	cmp	r3, #0
 801238e:	f000 81e1 	beq.w	8012754 <create_DijkstraMap+0xf6c>
				if(Direction==SLANT_SOUTH_WEST){
 8012392:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012396:	f103 031e 	add.w	r3, r3, #30
 801239a:	881b      	ldrh	r3, [r3, #0]
 801239c:	2b05      	cmp	r3, #5
 801239e:	d12f      	bne.n	8012400 <create_DijkstraMap+0xc18>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80123a0:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80123a4:	f103 031c 	add.w	r3, r3, #28
 80123a8:	881b      	ldrh	r3, [r3, #0]
 80123aa:	3301      	adds	r3, #1
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123b2:	f102 0212 	add.w	r2, r2, #18
 80123b6:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80123b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123bc:	f103 0312 	add.w	r3, r3, #18
 80123c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123c4:	2b05      	cmp	r3, #5
 80123c6:	dd05      	ble.n	80123d4 <create_DijkstraMap+0xbec>
 80123c8:	2305      	movs	r3, #5
 80123ca:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123ce:	f102 0212 	add.w	r2, r2, #18
 80123d2:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80123d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123d8:	f103 0312 	add.w	r3, r3, #18
 80123dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80123e0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80123e4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80123e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80123ec:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123f0:	f102 0214 	add.w	r2, r2, #20
 80123f4:	8013      	strh	r3, [r2, #0]
 80123f6:	e013      	b.n	8012420 <create_DijkstraMap+0xc38>
 80123f8:	20000c3c 	.word	0x20000c3c
 80123fc:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012400:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012404:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012408:	881b      	ldrh	r3, [r3, #0]
 801240a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801240e:	f102 0214 	add.w	r2, r2, #20
 8012412:	8013      	strh	r3, [r2, #0]
 8012414:	2300      	movs	r3, #0
 8012416:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801241a:	f102 0212 	add.w	r2, r2, #18
 801241e:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012420:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012424:	f103 0304 	add.w	r3, r3, #4
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	3b01      	subs	r3, #1
 801242c:	4a69      	ldr	r2, [pc, #420]	; (80125d4 <create_DijkstraMap+0xdec>)
 801242e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012432:	461a      	mov	r2, r3
 8012434:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012438:	f103 0302 	add.w	r3, r3, #2
 801243c:	881b      	ldrh	r3, [r3, #0]
 801243e:	fa42 f303 	asr.w	r3, r2, r3
 8012442:	f003 0301 	and.w	r3, r3, #1
 8012446:	2b00      	cmp	r3, #0
 8012448:	f040 8091 	bne.w	801256e <create_DijkstraMap+0xd86>
 801244c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012450:	f103 0302 	add.w	r3, r3, #2
 8012454:	881a      	ldrh	r2, [r3, #0]
 8012456:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801245a:	f103 0304 	add.w	r3, r3, #4
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	1e59      	subs	r1, r3, #1
 8012462:	485d      	ldr	r0, [pc, #372]	; (80125d8 <create_DijkstraMap+0xdf0>)
 8012464:	4613      	mov	r3, r2
 8012466:	011b      	lsls	r3, r3, #4
 8012468:	1a9b      	subs	r3, r3, r2
 801246a:	440b      	add	r3, r1
 801246c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012470:	461c      	mov	r4, r3
 8012472:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012476:	f103 0304 	add.w	r3, r3, #4
 801247a:	881a      	ldrh	r2, [r3, #0]
 801247c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012480:	f103 0302 	add.w	r3, r3, #2
 8012484:	8819      	ldrh	r1, [r3, #0]
 8012486:	4854      	ldr	r0, [pc, #336]	; (80125d8 <create_DijkstraMap+0xdf0>)
 8012488:	4613      	mov	r3, r2
 801248a:	011b      	lsls	r3, r3, #4
 801248c:	1a9b      	subs	r3, r3, r2
 801248e:	440b      	add	r3, r1
 8012490:	33f0      	adds	r3, #240	; 0xf0
 8012492:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012496:	461a      	mov	r2, r3
 8012498:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801249c:	f103 0314 	add.w	r3, r3, #20
 80124a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124a4:	4413      	add	r3, r2
 80124a6:	429c      	cmp	r4, r3
 80124a8:	dd61      	ble.n	801256e <create_DijkstraMap+0xd86>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80124aa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124ae:	f103 0304 	add.w	r3, r3, #4
 80124b2:	881a      	ldrh	r2, [r3, #0]
 80124b4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124b8:	f103 0302 	add.w	r3, r3, #2
 80124bc:	8819      	ldrh	r1, [r3, #0]
 80124be:	4846      	ldr	r0, [pc, #280]	; (80125d8 <create_DijkstraMap+0xdf0>)
 80124c0:	4613      	mov	r3, r2
 80124c2:	011b      	lsls	r3, r3, #4
 80124c4:	1a9b      	subs	r3, r3, r2
 80124c6:	440b      	add	r3, r1
 80124c8:	33f0      	adds	r3, #240	; 0xf0
 80124ca:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80124ce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124d2:	f103 0314 	add.w	r3, r3, #20
 80124d6:	881b      	ldrh	r3, [r3, #0]
 80124d8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80124dc:	f102 0202 	add.w	r2, r2, #2
 80124e0:	8812      	ldrh	r2, [r2, #0]
 80124e2:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80124e6:	f101 0104 	add.w	r1, r1, #4
 80124ea:	8809      	ldrh	r1, [r1, #0]
 80124ec:	3901      	subs	r1, #1
 80124ee:	4403      	add	r3, r0
 80124f0:	b29c      	uxth	r4, r3
 80124f2:	4839      	ldr	r0, [pc, #228]	; (80125d8 <create_DijkstraMap+0xdf0>)
 80124f4:	4613      	mov	r3, r2
 80124f6:	011b      	lsls	r3, r3, #4
 80124f8:	1a9b      	subs	r3, r3, r2
 80124fa:	440b      	add	r3, r1
 80124fc:	4622      	mov	r2, r4
 80124fe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012502:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012506:	f103 0304 	add.w	r3, r3, #4
 801250a:	881b      	ldrh	r3, [r3, #0]
 801250c:	3b01      	subs	r3, #1
 801250e:	b29a      	uxth	r2, r3
 8012510:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012514:	f103 031c 	add.w	r3, r3, #28
 8012518:	4611      	mov	r1, r2
 801251a:	4618      	mov	r0, r3
 801251c:	f002 f8de 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012520:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012524:	f103 0302 	add.w	r3, r3, #2
 8012528:	881a      	ldrh	r2, [r3, #0]
 801252a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801252e:	f103 031c 	add.w	r3, r3, #28
 8012532:	4611      	mov	r1, r2
 8012534:	4618      	mov	r0, r3
 8012536:	f002 f8d1 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801253a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801253e:	3b1c      	subs	r3, #28
 8012540:	2101      	movs	r1, #1
 8012542:	4618      	mov	r0, r3
 8012544:	f002 f8ca 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012548:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801254c:	3b1c      	subs	r3, #28
 801254e:	2105      	movs	r1, #5
 8012550:	4618      	mov	r0, r3
 8012552:	f002 f8c3 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012556:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801255a:	f103 0312 	add.w	r3, r3, #18
 801255e:	881a      	ldrh	r2, [r3, #0]
 8012560:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012564:	3b1c      	subs	r3, #28
 8012566:	4611      	mov	r1, r2
 8012568:	4618      	mov	r0, r3
 801256a:	f002 f8b7 	bl	80146dc <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 801256e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012572:	f103 031e 	add.w	r3, r3, #30
 8012576:	881b      	ldrh	r3, [r3, #0]
 8012578:	2b07      	cmp	r3, #7
 801257a:	d12f      	bne.n	80125dc <create_DijkstraMap+0xdf4>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801257c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012580:	f103 031c 	add.w	r3, r3, #28
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	3301      	adds	r3, #1
 8012588:	b29b      	uxth	r3, r3
 801258a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801258e:	f102 0212 	add.w	r2, r2, #18
 8012592:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012594:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012598:	f103 0312 	add.w	r3, r3, #18
 801259c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125a0:	2b05      	cmp	r3, #5
 80125a2:	dd05      	ble.n	80125b0 <create_DijkstraMap+0xdc8>
 80125a4:	2305      	movs	r3, #5
 80125a6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125aa:	f102 0212 	add.w	r2, r2, #18
 80125ae:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80125b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125b4:	f103 0312 	add.w	r3, r3, #18
 80125b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125bc:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80125c0:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80125c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80125c8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125cc:	f102 0214 	add.w	r2, r2, #20
 80125d0:	8013      	strh	r3, [r2, #0]
 80125d2:	e013      	b.n	80125fc <create_DijkstraMap+0xe14>
 80125d4:	20000c3c 	.word	0x20000c3c
 80125d8:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80125dc:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80125e0:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125ea:	f102 0214 	add.w	r2, r2, #20
 80125ee:	8013      	strh	r3, [r2, #0]
 80125f0:	2300      	movs	r3, #0
 80125f2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80125f6:	f102 0212 	add.w	r2, r2, #18
 80125fa:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80125fc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012600:	f103 0304 	add.w	r3, r3, #4
 8012604:	881b      	ldrh	r3, [r3, #0]
 8012606:	3b01      	subs	r3, #1
 8012608:	4a73      	ldr	r2, [pc, #460]	; (80127d8 <create_DijkstraMap+0xff0>)
 801260a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801260e:	461a      	mov	r2, r3
 8012610:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012614:	f103 0302 	add.w	r3, r3, #2
 8012618:	881b      	ldrh	r3, [r3, #0]
 801261a:	3301      	adds	r3, #1
 801261c:	fa42 f303 	asr.w	r3, r2, r3
 8012620:	f003 0301 	and.w	r3, r3, #1
 8012624:	2b00      	cmp	r3, #0
 8012626:	f040 8095 	bne.w	8012754 <create_DijkstraMap+0xf6c>
 801262a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801262e:	f103 0302 	add.w	r3, r3, #2
 8012632:	881b      	ldrh	r3, [r3, #0]
 8012634:	1c5a      	adds	r2, r3, #1
 8012636:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801263a:	f103 0304 	add.w	r3, r3, #4
 801263e:	881b      	ldrh	r3, [r3, #0]
 8012640:	1e59      	subs	r1, r3, #1
 8012642:	4866      	ldr	r0, [pc, #408]	; (80127dc <create_DijkstraMap+0xff4>)
 8012644:	4613      	mov	r3, r2
 8012646:	011b      	lsls	r3, r3, #4
 8012648:	1a9b      	subs	r3, r3, r2
 801264a:	440b      	add	r3, r1
 801264c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012650:	461c      	mov	r4, r3
 8012652:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012656:	f103 0304 	add.w	r3, r3, #4
 801265a:	881a      	ldrh	r2, [r3, #0]
 801265c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012660:	f103 0302 	add.w	r3, r3, #2
 8012664:	8819      	ldrh	r1, [r3, #0]
 8012666:	485d      	ldr	r0, [pc, #372]	; (80127dc <create_DijkstraMap+0xff4>)
 8012668:	4613      	mov	r3, r2
 801266a:	011b      	lsls	r3, r3, #4
 801266c:	1a9b      	subs	r3, r3, r2
 801266e:	440b      	add	r3, r1
 8012670:	33f0      	adds	r3, #240	; 0xf0
 8012672:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012676:	461a      	mov	r2, r3
 8012678:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801267c:	f103 0314 	add.w	r3, r3, #20
 8012680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012684:	4413      	add	r3, r2
 8012686:	429c      	cmp	r4, r3
 8012688:	dd64      	ble.n	8012754 <create_DijkstraMap+0xf6c>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801268a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801268e:	f103 0304 	add.w	r3, r3, #4
 8012692:	881a      	ldrh	r2, [r3, #0]
 8012694:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012698:	f103 0302 	add.w	r3, r3, #2
 801269c:	8819      	ldrh	r1, [r3, #0]
 801269e:	484f      	ldr	r0, [pc, #316]	; (80127dc <create_DijkstraMap+0xff4>)
 80126a0:	4613      	mov	r3, r2
 80126a2:	011b      	lsls	r3, r3, #4
 80126a4:	1a9b      	subs	r3, r3, r2
 80126a6:	440b      	add	r3, r1
 80126a8:	33f0      	adds	r3, #240	; 0xf0
 80126aa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80126ae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126b2:	f103 0314 	add.w	r3, r3, #20
 80126b6:	881b      	ldrh	r3, [r3, #0]
 80126b8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80126bc:	f102 0202 	add.w	r2, r2, #2
 80126c0:	8812      	ldrh	r2, [r2, #0]
 80126c2:	3201      	adds	r2, #1
 80126c4:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80126c8:	f101 0104 	add.w	r1, r1, #4
 80126cc:	8809      	ldrh	r1, [r1, #0]
 80126ce:	3901      	subs	r1, #1
 80126d0:	4403      	add	r3, r0
 80126d2:	b29c      	uxth	r4, r3
 80126d4:	4841      	ldr	r0, [pc, #260]	; (80127dc <create_DijkstraMap+0xff4>)
 80126d6:	4613      	mov	r3, r2
 80126d8:	011b      	lsls	r3, r3, #4
 80126da:	1a9b      	subs	r3, r3, r2
 80126dc:	440b      	add	r3, r1
 80126de:	4622      	mov	r2, r4
 80126e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80126e4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126e8:	f103 0304 	add.w	r3, r3, #4
 80126ec:	881b      	ldrh	r3, [r3, #0]
 80126ee:	3b01      	subs	r3, #1
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80126f6:	f103 031c 	add.w	r3, r3, #28
 80126fa:	4611      	mov	r1, r2
 80126fc:	4618      	mov	r0, r3
 80126fe:	f001 ffed 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012702:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012706:	f103 0302 	add.w	r3, r3, #2
 801270a:	881b      	ldrh	r3, [r3, #0]
 801270c:	3301      	adds	r3, #1
 801270e:	b29a      	uxth	r2, r3
 8012710:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012714:	f103 031c 	add.w	r3, r3, #28
 8012718:	4611      	mov	r1, r2
 801271a:	4618      	mov	r0, r3
 801271c:	f001 ffde 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012720:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012724:	3b1c      	subs	r3, #28
 8012726:	2101      	movs	r1, #1
 8012728:	4618      	mov	r0, r3
 801272a:	f001 ffd7 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 801272e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012732:	3b1c      	subs	r3, #28
 8012734:	2107      	movs	r1, #7
 8012736:	4618      	mov	r0, r3
 8012738:	f001 ffd0 	bl	80146dc <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801273c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012740:	f103 0312 	add.w	r3, r3, #18
 8012744:	881a      	ldrh	r2, [r3, #0]
 8012746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801274a:	3b1c      	subs	r3, #28
 801274c:	4611      	mov	r1, r2
 801274e:	4618      	mov	r0, r3
 8012750:	f001 ffc4 	bl	80146dc <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 8012754:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012758:	881b      	ldrh	r3, [r3, #0]
 801275a:	2b01      	cmp	r3, #1
 801275c:	f040 85b6 	bne.w	80132cc <create_DijkstraMap+0x1ae4>
					if(Xcoordinate <= 13){
 8012760:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012764:	f103 0304 	add.w	r3, r3, #4
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	2b0d      	cmp	r3, #13
 801276c:	f200 80ed 	bhi.w	801294a <create_DijkstraMap+0x1162>
						if(Direction==SLANT_EAST){
 8012770:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012774:	f103 031e 	add.w	r3, r3, #30
 8012778:	881b      	ldrh	r3, [r3, #0]
 801277a:	2b02      	cmp	r3, #2
 801277c:	d130      	bne.n	80127e0 <create_DijkstraMap+0xff8>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801277e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012782:	f103 031c 	add.w	r3, r3, #28
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	3301      	adds	r3, #1
 801278a:	b29b      	uxth	r3, r3
 801278c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012790:	f102 0212 	add.w	r2, r2, #18
 8012794:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012796:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801279a:	f103 0312 	add.w	r3, r3, #18
 801279e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127a2:	2b04      	cmp	r3, #4
 80127a4:	dd05      	ble.n	80127b2 <create_DijkstraMap+0xfca>
 80127a6:	2304      	movs	r3, #4
 80127a8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80127ac:	f102 0212 	add.w	r2, r2, #18
 80127b0:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80127b2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127b6:	f103 0312 	add.w	r3, r3, #18
 80127ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80127be:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80127c2:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80127c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80127ca:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80127ce:	f102 0216 	add.w	r2, r2, #22
 80127d2:	8013      	strh	r3, [r2, #0]
 80127d4:	e014      	b.n	8012800 <create_DijkstraMap+0x1018>
 80127d6:	bf00      	nop
 80127d8:	20000c3c 	.word	0x20000c3c
 80127dc:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80127e0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80127e4:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80127e8:	881b      	ldrh	r3, [r3, #0]
 80127ea:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80127ee:	f102 0216 	add.w	r2, r2, #22
 80127f2:	8013      	strh	r3, [r2, #0]
 80127f4:	2300      	movs	r3, #0
 80127f6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80127fa:	f102 0212 	add.w	r2, r2, #18
 80127fe:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012800:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012804:	f103 0304 	add.w	r3, r3, #4
 8012808:	881b      	ldrh	r3, [r3, #0]
 801280a:	3301      	adds	r3, #1
 801280c:	4a6c      	ldr	r2, [pc, #432]	; (80129c0 <create_DijkstraMap+0x11d8>)
 801280e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012812:	461a      	mov	r2, r3
 8012814:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012818:	f103 0302 	add.w	r3, r3, #2
 801281c:	881b      	ldrh	r3, [r3, #0]
 801281e:	fa42 f303 	asr.w	r3, r2, r3
 8012822:	f003 0301 	and.w	r3, r3, #1
 8012826:	2b00      	cmp	r3, #0
 8012828:	f040 808f 	bne.w	801294a <create_DijkstraMap+0x1162>
 801282c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012830:	f103 0302 	add.w	r3, r3, #2
 8012834:	881a      	ldrh	r2, [r3, #0]
 8012836:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801283a:	f103 0304 	add.w	r3, r3, #4
 801283e:	881b      	ldrh	r3, [r3, #0]
 8012840:	1c59      	adds	r1, r3, #1
 8012842:	4860      	ldr	r0, [pc, #384]	; (80129c4 <create_DijkstraMap+0x11dc>)
 8012844:	4613      	mov	r3, r2
 8012846:	011b      	lsls	r3, r3, #4
 8012848:	1a9b      	subs	r3, r3, r2
 801284a:	440b      	add	r3, r1
 801284c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012850:	461c      	mov	r4, r3
 8012852:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012856:	f103 0302 	add.w	r3, r3, #2
 801285a:	881a      	ldrh	r2, [r3, #0]
 801285c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012860:	f103 0304 	add.w	r3, r3, #4
 8012864:	8819      	ldrh	r1, [r3, #0]
 8012866:	4857      	ldr	r0, [pc, #348]	; (80129c4 <create_DijkstraMap+0x11dc>)
 8012868:	4613      	mov	r3, r2
 801286a:	011b      	lsls	r3, r3, #4
 801286c:	1a9b      	subs	r3, r3, r2
 801286e:	440b      	add	r3, r1
 8012870:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012874:	461a      	mov	r2, r3
 8012876:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801287a:	f103 0316 	add.w	r3, r3, #22
 801287e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012882:	4413      	add	r3, r2
 8012884:	429c      	cmp	r4, r3
 8012886:	dd60      	ble.n	801294a <create_DijkstraMap+0x1162>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012888:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801288c:	f103 0302 	add.w	r3, r3, #2
 8012890:	881a      	ldrh	r2, [r3, #0]
 8012892:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012896:	f103 0304 	add.w	r3, r3, #4
 801289a:	8819      	ldrh	r1, [r3, #0]
 801289c:	4849      	ldr	r0, [pc, #292]	; (80129c4 <create_DijkstraMap+0x11dc>)
 801289e:	4613      	mov	r3, r2
 80128a0:	011b      	lsls	r3, r3, #4
 80128a2:	1a9b      	subs	r3, r3, r2
 80128a4:	440b      	add	r3, r1
 80128a6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80128aa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128ae:	f103 0316 	add.w	r3, r3, #22
 80128b2:	881b      	ldrh	r3, [r3, #0]
 80128b4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80128b8:	f102 0202 	add.w	r2, r2, #2
 80128bc:	8812      	ldrh	r2, [r2, #0]
 80128be:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80128c2:	f101 0104 	add.w	r1, r1, #4
 80128c6:	8809      	ldrh	r1, [r1, #0]
 80128c8:	3101      	adds	r1, #1
 80128ca:	4403      	add	r3, r0
 80128cc:	b29c      	uxth	r4, r3
 80128ce:	483d      	ldr	r0, [pc, #244]	; (80129c4 <create_DijkstraMap+0x11dc>)
 80128d0:	4613      	mov	r3, r2
 80128d2:	011b      	lsls	r3, r3, #4
 80128d4:	1a9b      	subs	r3, r3, r2
 80128d6:	440b      	add	r3, r1
 80128d8:	4622      	mov	r2, r4
 80128da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 80128de:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128e2:	f103 0304 	add.w	r3, r3, #4
 80128e6:	881b      	ldrh	r3, [r3, #0]
 80128e8:	3301      	adds	r3, #1
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80128f0:	f103 031c 	add.w	r3, r3, #28
 80128f4:	4611      	mov	r1, r2
 80128f6:	4618      	mov	r0, r3
 80128f8:	f001 fef0 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80128fc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012900:	f103 0302 	add.w	r3, r3, #2
 8012904:	881a      	ldrh	r2, [r3, #0]
 8012906:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801290a:	f103 031c 	add.w	r3, r3, #28
 801290e:	4611      	mov	r1, r2
 8012910:	4618      	mov	r0, r3
 8012912:	f001 fee3 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012916:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801291a:	3b1c      	subs	r3, #28
 801291c:	2101      	movs	r1, #1
 801291e:	4618      	mov	r0, r3
 8012920:	f001 fedc 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 8012924:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012928:	3b1c      	subs	r3, #28
 801292a:	2102      	movs	r1, #2
 801292c:	4618      	mov	r0, r3
 801292e:	f001 fed5 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012932:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012936:	f103 0312 	add.w	r3, r3, #18
 801293a:	881a      	ldrh	r2, [r3, #0]
 801293c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012940:	3b1c      	subs	r3, #28
 8012942:	4611      	mov	r1, r2
 8012944:	4618      	mov	r0, r3
 8012946:	f001 fec9 	bl	80146dc <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 801294a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801294e:	f103 0304 	add.w	r3, r3, #4
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 80ec 	beq.w	8012b32 <create_DijkstraMap+0x134a>
						if(Direction==SLANT_WEST){
 801295a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801295e:	f103 031e 	add.w	r3, r3, #30
 8012962:	881b      	ldrh	r3, [r3, #0]
 8012964:	2b06      	cmp	r3, #6
 8012966:	d12f      	bne.n	80129c8 <create_DijkstraMap+0x11e0>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012968:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801296c:	f103 031c 	add.w	r3, r3, #28
 8012970:	881b      	ldrh	r3, [r3, #0]
 8012972:	3301      	adds	r3, #1
 8012974:	b29b      	uxth	r3, r3
 8012976:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801297a:	f102 0212 	add.w	r2, r2, #18
 801297e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012980:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012984:	f103 0312 	add.w	r3, r3, #18
 8012988:	f9b3 3000 	ldrsh.w	r3, [r3]
 801298c:	2b04      	cmp	r3, #4
 801298e:	dd05      	ble.n	801299c <create_DijkstraMap+0x11b4>
 8012990:	2304      	movs	r3, #4
 8012992:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012996:	f102 0212 	add.w	r2, r2, #18
 801299a:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 801299c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129a0:	f103 0312 	add.w	r3, r3, #18
 80129a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129a8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80129ac:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80129b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80129b4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80129b8:	f102 0216 	add.w	r2, r2, #22
 80129bc:	8013      	strh	r3, [r2, #0]
 80129be:	e013      	b.n	80129e8 <create_DijkstraMap+0x1200>
 80129c0:	20000c3c 	.word	0x20000c3c
 80129c4:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80129c8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80129cc:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80129d0:	881b      	ldrh	r3, [r3, #0]
 80129d2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80129d6:	f102 0216 	add.w	r2, r2, #22
 80129da:	8013      	strh	r3, [r2, #0]
 80129dc:	2300      	movs	r3, #0
 80129de:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80129e2:	f102 0212 	add.w	r2, r2, #18
 80129e6:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80129e8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129ec:	f103 0304 	add.w	r3, r3, #4
 80129f0:	881b      	ldrh	r3, [r3, #0]
 80129f2:	3b01      	subs	r3, #1
 80129f4:	4a6c      	ldr	r2, [pc, #432]	; (8012ba8 <create_DijkstraMap+0x13c0>)
 80129f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80129fa:	461a      	mov	r2, r3
 80129fc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a00:	f103 0302 	add.w	r3, r3, #2
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	fa42 f303 	asr.w	r3, r2, r3
 8012a0a:	f003 0301 	and.w	r3, r3, #1
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	f040 808f 	bne.w	8012b32 <create_DijkstraMap+0x134a>
 8012a14:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a18:	f103 0302 	add.w	r3, r3, #2
 8012a1c:	881a      	ldrh	r2, [r3, #0]
 8012a1e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a22:	f103 0304 	add.w	r3, r3, #4
 8012a26:	881b      	ldrh	r3, [r3, #0]
 8012a28:	1e59      	subs	r1, r3, #1
 8012a2a:	4860      	ldr	r0, [pc, #384]	; (8012bac <create_DijkstraMap+0x13c4>)
 8012a2c:	4613      	mov	r3, r2
 8012a2e:	011b      	lsls	r3, r3, #4
 8012a30:	1a9b      	subs	r3, r3, r2
 8012a32:	440b      	add	r3, r1
 8012a34:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a38:	461c      	mov	r4, r3
 8012a3a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a3e:	f103 0302 	add.w	r3, r3, #2
 8012a42:	881a      	ldrh	r2, [r3, #0]
 8012a44:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a48:	f103 0304 	add.w	r3, r3, #4
 8012a4c:	8819      	ldrh	r1, [r3, #0]
 8012a4e:	4857      	ldr	r0, [pc, #348]	; (8012bac <create_DijkstraMap+0x13c4>)
 8012a50:	4613      	mov	r3, r2
 8012a52:	011b      	lsls	r3, r3, #4
 8012a54:	1a9b      	subs	r3, r3, r2
 8012a56:	440b      	add	r3, r1
 8012a58:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a62:	f103 0316 	add.w	r3, r3, #22
 8012a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a6a:	4413      	add	r3, r2
 8012a6c:	429c      	cmp	r4, r3
 8012a6e:	dd60      	ble.n	8012b32 <create_DijkstraMap+0x134a>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012a70:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a74:	f103 0302 	add.w	r3, r3, #2
 8012a78:	881a      	ldrh	r2, [r3, #0]
 8012a7a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a7e:	f103 0304 	add.w	r3, r3, #4
 8012a82:	8819      	ldrh	r1, [r3, #0]
 8012a84:	4849      	ldr	r0, [pc, #292]	; (8012bac <create_DijkstraMap+0x13c4>)
 8012a86:	4613      	mov	r3, r2
 8012a88:	011b      	lsls	r3, r3, #4
 8012a8a:	1a9b      	subs	r3, r3, r2
 8012a8c:	440b      	add	r3, r1
 8012a8e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012a92:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a96:	f103 0316 	add.w	r3, r3, #22
 8012a9a:	881b      	ldrh	r3, [r3, #0]
 8012a9c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012aa0:	f102 0202 	add.w	r2, r2, #2
 8012aa4:	8812      	ldrh	r2, [r2, #0]
 8012aa6:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012aaa:	f101 0104 	add.w	r1, r1, #4
 8012aae:	8809      	ldrh	r1, [r1, #0]
 8012ab0:	3901      	subs	r1, #1
 8012ab2:	4403      	add	r3, r0
 8012ab4:	b29c      	uxth	r4, r3
 8012ab6:	483d      	ldr	r0, [pc, #244]	; (8012bac <create_DijkstraMap+0x13c4>)
 8012ab8:	4613      	mov	r3, r2
 8012aba:	011b      	lsls	r3, r3, #4
 8012abc:	1a9b      	subs	r3, r3, r2
 8012abe:	440b      	add	r3, r1
 8012ac0:	4622      	mov	r2, r4
 8012ac2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 8012ac6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012aca:	f103 0304 	add.w	r3, r3, #4
 8012ace:	881b      	ldrh	r3, [r3, #0]
 8012ad0:	3b01      	subs	r3, #1
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012ad8:	f103 031c 	add.w	r3, r3, #28
 8012adc:	4611      	mov	r1, r2
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f001 fdfc 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012ae4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ae8:	f103 0302 	add.w	r3, r3, #2
 8012aec:	881a      	ldrh	r2, [r3, #0]
 8012aee:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012af2:	f103 031c 	add.w	r3, r3, #28
 8012af6:	4611      	mov	r1, r2
 8012af8:	4618      	mov	r0, r3
 8012afa:	f001 fdef 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012afe:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012b02:	3b1c      	subs	r3, #28
 8012b04:	2101      	movs	r1, #1
 8012b06:	4618      	mov	r0, r3
 8012b08:	f001 fde8 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 8012b0c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012b10:	3b1c      	subs	r3, #28
 8012b12:	2106      	movs	r1, #6
 8012b14:	4618      	mov	r0, r3
 8012b16:	f001 fde1 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012b1a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b1e:	f103 0312 	add.w	r3, r3, #18
 8012b22:	881a      	ldrh	r2, [r3, #0]
 8012b24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012b28:	3b1c      	subs	r3, #28
 8012b2a:	4611      	mov	r1, r2
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f001 fdd5 	bl	80146dc <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 8012b32:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b36:	f103 0302 	add.w	r3, r3, #2
 8012b3a:	881b      	ldrh	r3, [r3, #0]
 8012b3c:	2b0e      	cmp	r3, #14
 8012b3e:	f200 81dc 	bhi.w	8012efa <create_DijkstraMap+0x1712>
						if(Direction==SLANT_NORTH_WEST){
 8012b42:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012b46:	f103 031e 	add.w	r3, r3, #30
 8012b4a:	881b      	ldrh	r3, [r3, #0]
 8012b4c:	2b07      	cmp	r3, #7
 8012b4e:	d12f      	bne.n	8012bb0 <create_DijkstraMap+0x13c8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012b50:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012b54:	f103 031c 	add.w	r3, r3, #28
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b62:	f102 0212 	add.w	r2, r2, #18
 8012b66:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012b68:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b6c:	f103 0312 	add.w	r3, r3, #18
 8012b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b74:	2b05      	cmp	r3, #5
 8012b76:	dd05      	ble.n	8012b84 <create_DijkstraMap+0x139c>
 8012b78:	2305      	movs	r3, #5
 8012b7a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b7e:	f102 0212 	add.w	r2, r2, #18
 8012b82:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012b84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b88:	f103 0312 	add.w	r3, r3, #18
 8012b8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b90:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012b94:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012b98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012b9c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012ba0:	f102 0214 	add.w	r2, r2, #20
 8012ba4:	8013      	strh	r3, [r2, #0]
 8012ba6:	e013      	b.n	8012bd0 <create_DijkstraMap+0x13e8>
 8012ba8:	20000c3c 	.word	0x20000c3c
 8012bac:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012bb0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012bb4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012bb8:	881b      	ldrh	r3, [r3, #0]
 8012bba:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012bbe:	f102 0214 	add.w	r2, r2, #20
 8012bc2:	8013      	strh	r3, [r2, #0]
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012bca:	f102 0212 	add.w	r2, r2, #18
 8012bce:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012bd0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bd4:	f103 0302 	add.w	r3, r3, #2
 8012bd8:	881b      	ldrh	r3, [r3, #0]
 8012bda:	4a69      	ldr	r2, [pc, #420]	; (8012d80 <create_DijkstraMap+0x1598>)
 8012bdc:	330c      	adds	r3, #12
 8012bde:	005b      	lsls	r3, r3, #1
 8012be0:	4413      	add	r3, r2
 8012be2:	88db      	ldrh	r3, [r3, #6]
 8012be4:	461a      	mov	r2, r3
 8012be6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bea:	f103 0304 	add.w	r3, r3, #4
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	fa42 f303 	asr.w	r3, r2, r3
 8012bf4:	f003 0301 	and.w	r3, r3, #1
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f040 808d 	bne.w	8012d18 <create_DijkstraMap+0x1530>
 8012bfe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c02:	f103 0304 	add.w	r3, r3, #4
 8012c06:	881a      	ldrh	r2, [r3, #0]
 8012c08:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c0c:	f103 0302 	add.w	r3, r3, #2
 8012c10:	8819      	ldrh	r1, [r3, #0]
 8012c12:	485c      	ldr	r0, [pc, #368]	; (8012d84 <create_DijkstraMap+0x159c>)
 8012c14:	4613      	mov	r3, r2
 8012c16:	011b      	lsls	r3, r3, #4
 8012c18:	1a9b      	subs	r3, r3, r2
 8012c1a:	440b      	add	r3, r1
 8012c1c:	33f0      	adds	r3, #240	; 0xf0
 8012c1e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c22:	461c      	mov	r4, r3
 8012c24:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c28:	f103 0302 	add.w	r3, r3, #2
 8012c2c:	881a      	ldrh	r2, [r3, #0]
 8012c2e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c32:	f103 0304 	add.w	r3, r3, #4
 8012c36:	8819      	ldrh	r1, [r3, #0]
 8012c38:	4852      	ldr	r0, [pc, #328]	; (8012d84 <create_DijkstraMap+0x159c>)
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	011b      	lsls	r3, r3, #4
 8012c3e:	1a9b      	subs	r3, r3, r2
 8012c40:	440b      	add	r3, r1
 8012c42:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c46:	461a      	mov	r2, r3
 8012c48:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c4c:	f103 0314 	add.w	r3, r3, #20
 8012c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c54:	4413      	add	r3, r2
 8012c56:	429c      	cmp	r4, r3
 8012c58:	dd5e      	ble.n	8012d18 <create_DijkstraMap+0x1530>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012c5a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c5e:	f103 0302 	add.w	r3, r3, #2
 8012c62:	881a      	ldrh	r2, [r3, #0]
 8012c64:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c68:	f103 0304 	add.w	r3, r3, #4
 8012c6c:	8819      	ldrh	r1, [r3, #0]
 8012c6e:	4845      	ldr	r0, [pc, #276]	; (8012d84 <create_DijkstraMap+0x159c>)
 8012c70:	4613      	mov	r3, r2
 8012c72:	011b      	lsls	r3, r3, #4
 8012c74:	1a9b      	subs	r3, r3, r2
 8012c76:	440b      	add	r3, r1
 8012c78:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012c7c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c80:	f103 0314 	add.w	r3, r3, #20
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c8a:	f102 0204 	add.w	r2, r2, #4
 8012c8e:	8812      	ldrh	r2, [r2, #0]
 8012c90:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012c94:	f101 0102 	add.w	r1, r1, #2
 8012c98:	8809      	ldrh	r1, [r1, #0]
 8012c9a:	4403      	add	r3, r0
 8012c9c:	b29c      	uxth	r4, r3
 8012c9e:	4839      	ldr	r0, [pc, #228]	; (8012d84 <create_DijkstraMap+0x159c>)
 8012ca0:	4613      	mov	r3, r2
 8012ca2:	011b      	lsls	r3, r3, #4
 8012ca4:	1a9b      	subs	r3, r3, r2
 8012ca6:	440b      	add	r3, r1
 8012ca8:	33f0      	adds	r3, #240	; 0xf0
 8012caa:	4622      	mov	r2, r4
 8012cac:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012cb0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cb4:	f103 0304 	add.w	r3, r3, #4
 8012cb8:	881a      	ldrh	r2, [r3, #0]
 8012cba:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012cbe:	f103 031c 	add.w	r3, r3, #28
 8012cc2:	4611      	mov	r1, r2
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f001 fd09 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012cca:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cce:	f103 0302 	add.w	r3, r3, #2
 8012cd2:	881a      	ldrh	r2, [r3, #0]
 8012cd4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012cd8:	f103 031c 	add.w	r3, r3, #28
 8012cdc:	4611      	mov	r1, r2
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f001 fcfc 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012ce4:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012ce8:	3b1c      	subs	r3, #28
 8012cea:	2100      	movs	r1, #0
 8012cec:	4618      	mov	r0, r3
 8012cee:	f001 fcf5 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012cf2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012cf6:	3b1c      	subs	r3, #28
 8012cf8:	2107      	movs	r1, #7
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f001 fcee 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012d00:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d04:	f103 0312 	add.w	r3, r3, #18
 8012d08:	881a      	ldrh	r2, [r3, #0]
 8012d0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012d0e:	3b1c      	subs	r3, #28
 8012d10:	4611      	mov	r1, r2
 8012d12:	4618      	mov	r0, r3
 8012d14:	f001 fce2 	bl	80146dc <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012d18:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012d1c:	f103 031e 	add.w	r3, r3, #30
 8012d20:	881b      	ldrh	r3, [r3, #0]
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d130      	bne.n	8012d88 <create_DijkstraMap+0x15a0>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012d26:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012d2a:	f103 031c 	add.w	r3, r3, #28
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	3301      	adds	r3, #1
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d38:	f102 0212 	add.w	r2, r2, #18
 8012d3c:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012d3e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d42:	f103 0312 	add.w	r3, r3, #18
 8012d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d4a:	2b05      	cmp	r3, #5
 8012d4c:	dd05      	ble.n	8012d5a <create_DijkstraMap+0x1572>
 8012d4e:	2305      	movs	r3, #5
 8012d50:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d54:	f102 0212 	add.w	r2, r2, #18
 8012d58:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012d5a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d5e:	f103 0312 	add.w	r3, r3, #18
 8012d62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012d66:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012d6a:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012d6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012d72:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d76:	f102 0214 	add.w	r2, r2, #20
 8012d7a:	8013      	strh	r3, [r2, #0]
 8012d7c:	e014      	b.n	8012da8 <create_DijkstraMap+0x15c0>
 8012d7e:	bf00      	nop
 8012d80:	20000c3c 	.word	0x20000c3c
 8012d84:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012d88:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012d8c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012d90:	881b      	ldrh	r3, [r3, #0]
 8012d92:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d96:	f102 0214 	add.w	r2, r2, #20
 8012d9a:	8013      	strh	r3, [r2, #0]
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012da2:	f102 0212 	add.w	r2, r2, #18
 8012da6:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012da8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dac:	f103 0302 	add.w	r3, r3, #2
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	4a6f      	ldr	r2, [pc, #444]	; (8012f70 <create_DijkstraMap+0x1788>)
 8012db4:	330c      	adds	r3, #12
 8012db6:	005b      	lsls	r3, r3, #1
 8012db8:	4413      	add	r3, r2
 8012dba:	88db      	ldrh	r3, [r3, #6]
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dc2:	f103 0304 	add.w	r3, r3, #4
 8012dc6:	881b      	ldrh	r3, [r3, #0]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	fa42 f303 	asr.w	r3, r2, r3
 8012dce:	f003 0301 	and.w	r3, r3, #1
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	f040 8091 	bne.w	8012efa <create_DijkstraMap+0x1712>
 8012dd8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ddc:	f103 0304 	add.w	r3, r3, #4
 8012de0:	881b      	ldrh	r3, [r3, #0]
 8012de2:	1c5a      	adds	r2, r3, #1
 8012de4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012de8:	f103 0302 	add.w	r3, r3, #2
 8012dec:	8819      	ldrh	r1, [r3, #0]
 8012dee:	4861      	ldr	r0, [pc, #388]	; (8012f74 <create_DijkstraMap+0x178c>)
 8012df0:	4613      	mov	r3, r2
 8012df2:	011b      	lsls	r3, r3, #4
 8012df4:	1a9b      	subs	r3, r3, r2
 8012df6:	440b      	add	r3, r1
 8012df8:	33f0      	adds	r3, #240	; 0xf0
 8012dfa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012dfe:	461c      	mov	r4, r3
 8012e00:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e04:	f103 0302 	add.w	r3, r3, #2
 8012e08:	881a      	ldrh	r2, [r3, #0]
 8012e0a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e0e:	f103 0304 	add.w	r3, r3, #4
 8012e12:	8819      	ldrh	r1, [r3, #0]
 8012e14:	4857      	ldr	r0, [pc, #348]	; (8012f74 <create_DijkstraMap+0x178c>)
 8012e16:	4613      	mov	r3, r2
 8012e18:	011b      	lsls	r3, r3, #4
 8012e1a:	1a9b      	subs	r3, r3, r2
 8012e1c:	440b      	add	r3, r1
 8012e1e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e22:	461a      	mov	r2, r3
 8012e24:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e28:	f103 0314 	add.w	r3, r3, #20
 8012e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e30:	4413      	add	r3, r2
 8012e32:	429c      	cmp	r4, r3
 8012e34:	dd61      	ble.n	8012efa <create_DijkstraMap+0x1712>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012e36:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e3a:	f103 0302 	add.w	r3, r3, #2
 8012e3e:	881a      	ldrh	r2, [r3, #0]
 8012e40:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e44:	f103 0304 	add.w	r3, r3, #4
 8012e48:	8819      	ldrh	r1, [r3, #0]
 8012e4a:	484a      	ldr	r0, [pc, #296]	; (8012f74 <create_DijkstraMap+0x178c>)
 8012e4c:	4613      	mov	r3, r2
 8012e4e:	011b      	lsls	r3, r3, #4
 8012e50:	1a9b      	subs	r3, r3, r2
 8012e52:	440b      	add	r3, r1
 8012e54:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012e58:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e5c:	f103 0314 	add.w	r3, r3, #20
 8012e60:	881b      	ldrh	r3, [r3, #0]
 8012e62:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012e66:	f102 0204 	add.w	r2, r2, #4
 8012e6a:	8812      	ldrh	r2, [r2, #0]
 8012e6c:	3201      	adds	r2, #1
 8012e6e:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012e72:	f101 0102 	add.w	r1, r1, #2
 8012e76:	8809      	ldrh	r1, [r1, #0]
 8012e78:	4403      	add	r3, r0
 8012e7a:	b29c      	uxth	r4, r3
 8012e7c:	483d      	ldr	r0, [pc, #244]	; (8012f74 <create_DijkstraMap+0x178c>)
 8012e7e:	4613      	mov	r3, r2
 8012e80:	011b      	lsls	r3, r3, #4
 8012e82:	1a9b      	subs	r3, r3, r2
 8012e84:	440b      	add	r3, r1
 8012e86:	33f0      	adds	r3, #240	; 0xf0
 8012e88:	4622      	mov	r2, r4
 8012e8a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012e8e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e92:	f103 0304 	add.w	r3, r3, #4
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	3301      	adds	r3, #1
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012ea0:	f103 031c 	add.w	r3, r3, #28
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f001 fc18 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012eac:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012eb0:	f103 0302 	add.w	r3, r3, #2
 8012eb4:	881a      	ldrh	r2, [r3, #0]
 8012eb6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012eba:	f103 031c 	add.w	r3, r3, #28
 8012ebe:	4611      	mov	r1, r2
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f001 fc0b 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012ec6:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012eca:	3b1c      	subs	r3, #28
 8012ecc:	2100      	movs	r1, #0
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f001 fc04 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012ed4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012ed8:	3b1c      	subs	r3, #28
 8012eda:	2101      	movs	r1, #1
 8012edc:	4618      	mov	r0, r3
 8012ede:	f001 fbfd 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012ee2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ee6:	f103 0312 	add.w	r3, r3, #18
 8012eea:	881a      	ldrh	r2, [r3, #0]
 8012eec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ef0:	3b1c      	subs	r3, #28
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 fbf1 	bl	80146dc <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012efa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012efe:	f103 0302 	add.w	r3, r3, #2
 8012f02:	881b      	ldrh	r3, [r3, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 81e1 	beq.w	80132cc <create_DijkstraMap+0x1ae4>
						if(Direction==SLANT_SOUTH_WEST){
 8012f0a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012f0e:	f103 031e 	add.w	r3, r3, #30
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	2b05      	cmp	r3, #5
 8012f16:	d12f      	bne.n	8012f78 <create_DijkstraMap+0x1790>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012f18:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012f1c:	f103 031c 	add.w	r3, r3, #28
 8012f20:	881b      	ldrh	r3, [r3, #0]
 8012f22:	3301      	adds	r3, #1
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f2a:	f102 0212 	add.w	r2, r2, #18
 8012f2e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012f30:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f34:	f103 0312 	add.w	r3, r3, #18
 8012f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f3c:	2b05      	cmp	r3, #5
 8012f3e:	dd05      	ble.n	8012f4c <create_DijkstraMap+0x1764>
 8012f40:	2305      	movs	r3, #5
 8012f42:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f46:	f102 0212 	add.w	r2, r2, #18
 8012f4a:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012f4c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f50:	f103 0312 	add.w	r3, r3, #18
 8012f54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f58:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012f5c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012f60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012f64:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f68:	f102 0214 	add.w	r2, r2, #20
 8012f6c:	8013      	strh	r3, [r2, #0]
 8012f6e:	e013      	b.n	8012f98 <create_DijkstraMap+0x17b0>
 8012f70:	20000c3c 	.word	0x20000c3c
 8012f74:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012f78:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012f7c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012f80:	881b      	ldrh	r3, [r3, #0]
 8012f82:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f86:	f102 0214 	add.w	r2, r2, #20
 8012f8a:	8013      	strh	r3, [r2, #0]
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012f92:	f102 0212 	add.w	r2, r2, #18
 8012f96:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012f98:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012f9c:	f103 0302 	add.w	r3, r3, #2
 8012fa0:	881b      	ldrh	r3, [r3, #0]
 8012fa2:	3b01      	subs	r3, #1
 8012fa4:	4ad3      	ldr	r2, [pc, #844]	; (80132f4 <create_DijkstraMap+0x1b0c>)
 8012fa6:	330c      	adds	r3, #12
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	4413      	add	r3, r2
 8012fac:	88db      	ldrh	r3, [r3, #6]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fb4:	f103 0304 	add.w	r3, r3, #4
 8012fb8:	881b      	ldrh	r3, [r3, #0]
 8012fba:	fa42 f303 	asr.w	r3, r2, r3
 8012fbe:	f003 0301 	and.w	r3, r3, #1
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	f040 8091 	bne.w	80130ea <create_DijkstraMap+0x1902>
 8012fc8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fcc:	f103 0304 	add.w	r3, r3, #4
 8012fd0:	881a      	ldrh	r2, [r3, #0]
 8012fd2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012fd6:	f103 0302 	add.w	r3, r3, #2
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	1e59      	subs	r1, r3, #1
 8012fde:	48c6      	ldr	r0, [pc, #792]	; (80132f8 <create_DijkstraMap+0x1b10>)
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	011b      	lsls	r3, r3, #4
 8012fe4:	1a9b      	subs	r3, r3, r2
 8012fe6:	440b      	add	r3, r1
 8012fe8:	33f0      	adds	r3, #240	; 0xf0
 8012fea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012fee:	461c      	mov	r4, r3
 8012ff0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ff4:	f103 0302 	add.w	r3, r3, #2
 8012ff8:	881a      	ldrh	r2, [r3, #0]
 8012ffa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ffe:	f103 0304 	add.w	r3, r3, #4
 8013002:	8819      	ldrh	r1, [r3, #0]
 8013004:	48bc      	ldr	r0, [pc, #752]	; (80132f8 <create_DijkstraMap+0x1b10>)
 8013006:	4613      	mov	r3, r2
 8013008:	011b      	lsls	r3, r3, #4
 801300a:	1a9b      	subs	r3, r3, r2
 801300c:	440b      	add	r3, r1
 801300e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013012:	461a      	mov	r2, r3
 8013014:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013018:	f103 0314 	add.w	r3, r3, #20
 801301c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013020:	4413      	add	r3, r2
 8013022:	429c      	cmp	r4, r3
 8013024:	dd61      	ble.n	80130ea <create_DijkstraMap+0x1902>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013026:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801302a:	f103 0302 	add.w	r3, r3, #2
 801302e:	881a      	ldrh	r2, [r3, #0]
 8013030:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013034:	f103 0304 	add.w	r3, r3, #4
 8013038:	8819      	ldrh	r1, [r3, #0]
 801303a:	48af      	ldr	r0, [pc, #700]	; (80132f8 <create_DijkstraMap+0x1b10>)
 801303c:	4613      	mov	r3, r2
 801303e:	011b      	lsls	r3, r3, #4
 8013040:	1a9b      	subs	r3, r3, r2
 8013042:	440b      	add	r3, r1
 8013044:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013048:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801304c:	f103 0314 	add.w	r3, r3, #20
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8013056:	f102 0204 	add.w	r2, r2, #4
 801305a:	8812      	ldrh	r2, [r2, #0]
 801305c:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8013060:	f101 0102 	add.w	r1, r1, #2
 8013064:	8809      	ldrh	r1, [r1, #0]
 8013066:	3901      	subs	r1, #1
 8013068:	4403      	add	r3, r0
 801306a:	b29c      	uxth	r4, r3
 801306c:	48a2      	ldr	r0, [pc, #648]	; (80132f8 <create_DijkstraMap+0x1b10>)
 801306e:	4613      	mov	r3, r2
 8013070:	011b      	lsls	r3, r3, #4
 8013072:	1a9b      	subs	r3, r3, r2
 8013074:	440b      	add	r3, r1
 8013076:	33f0      	adds	r3, #240	; 0xf0
 8013078:	4622      	mov	r2, r4
 801307a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 801307e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013082:	f103 0304 	add.w	r3, r3, #4
 8013086:	881a      	ldrh	r2, [r3, #0]
 8013088:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801308c:	f103 031c 	add.w	r3, r3, #28
 8013090:	4611      	mov	r1, r2
 8013092:	4618      	mov	r0, r3
 8013094:	f001 fb22 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8013098:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801309c:	f103 0302 	add.w	r3, r3, #2
 80130a0:	881b      	ldrh	r3, [r3, #0]
 80130a2:	3b01      	subs	r3, #1
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80130aa:	f103 031c 	add.w	r3, r3, #28
 80130ae:	4611      	mov	r1, r2
 80130b0:	4618      	mov	r0, r3
 80130b2:	f001 fb13 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80130b6:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80130ba:	3b1c      	subs	r3, #28
 80130bc:	2100      	movs	r1, #0
 80130be:	4618      	mov	r0, r3
 80130c0:	f001 fb0c 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 80130c4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80130c8:	3b1c      	subs	r3, #28
 80130ca:	2105      	movs	r1, #5
 80130cc:	4618      	mov	r0, r3
 80130ce:	f001 fb05 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80130d2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80130d6:	f103 0312 	add.w	r3, r3, #18
 80130da:	881a      	ldrh	r2, [r3, #0]
 80130dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80130e0:	3b1c      	subs	r3, #28
 80130e2:	4611      	mov	r1, r2
 80130e4:	4618      	mov	r0, r3
 80130e6:	f001 faf9 	bl	80146dc <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 80130ea:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80130ee:	f103 031e 	add.w	r3, r3, #30
 80130f2:	881b      	ldrh	r3, [r3, #0]
 80130f4:	2b03      	cmp	r3, #3
 80130f6:	d12b      	bne.n	8013150 <create_DijkstraMap+0x1968>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80130f8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80130fc:	f103 031c 	add.w	r3, r3, #28
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	3301      	adds	r3, #1
 8013104:	b29b      	uxth	r3, r3
 8013106:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801310a:	f102 0212 	add.w	r2, r2, #18
 801310e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013110:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013114:	f103 0312 	add.w	r3, r3, #18
 8013118:	f9b3 3000 	ldrsh.w	r3, [r3]
 801311c:	2b05      	cmp	r3, #5
 801311e:	dd05      	ble.n	801312c <create_DijkstraMap+0x1944>
 8013120:	2305      	movs	r3, #5
 8013122:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8013126:	f102 0212 	add.w	r2, r2, #18
 801312a:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801312c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013130:	f103 0312 	add.w	r3, r3, #18
 8013134:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013138:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801313c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8013140:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013144:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8013148:	f102 0214 	add.w	r2, r2, #20
 801314c:	8013      	strh	r3, [r2, #0]
 801314e:	e00f      	b.n	8013170 <create_DijkstraMap+0x1988>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013150:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8013154:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8013158:	881b      	ldrh	r3, [r3, #0]
 801315a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801315e:	f102 0214 	add.w	r2, r2, #20
 8013162:	8013      	strh	r3, [r2, #0]
 8013164:	2300      	movs	r3, #0
 8013166:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801316a:	f102 0212 	add.w	r2, r2, #18
 801316e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013170:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013174:	f103 0302 	add.w	r3, r3, #2
 8013178:	881b      	ldrh	r3, [r3, #0]
 801317a:	3b01      	subs	r3, #1
 801317c:	4a5d      	ldr	r2, [pc, #372]	; (80132f4 <create_DijkstraMap+0x1b0c>)
 801317e:	330c      	adds	r3, #12
 8013180:	005b      	lsls	r3, r3, #1
 8013182:	4413      	add	r3, r2
 8013184:	88db      	ldrh	r3, [r3, #6]
 8013186:	461a      	mov	r2, r3
 8013188:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801318c:	f103 0304 	add.w	r3, r3, #4
 8013190:	881b      	ldrh	r3, [r3, #0]
 8013192:	3301      	adds	r3, #1
 8013194:	fa42 f303 	asr.w	r3, r2, r3
 8013198:	f003 0301 	and.w	r3, r3, #1
 801319c:	2b00      	cmp	r3, #0
 801319e:	f040 8095 	bne.w	80132cc <create_DijkstraMap+0x1ae4>
 80131a2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80131a6:	f103 0304 	add.w	r3, r3, #4
 80131aa:	881b      	ldrh	r3, [r3, #0]
 80131ac:	1c5a      	adds	r2, r3, #1
 80131ae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80131b2:	f103 0302 	add.w	r3, r3, #2
 80131b6:	881b      	ldrh	r3, [r3, #0]
 80131b8:	1e59      	subs	r1, r3, #1
 80131ba:	484f      	ldr	r0, [pc, #316]	; (80132f8 <create_DijkstraMap+0x1b10>)
 80131bc:	4613      	mov	r3, r2
 80131be:	011b      	lsls	r3, r3, #4
 80131c0:	1a9b      	subs	r3, r3, r2
 80131c2:	440b      	add	r3, r1
 80131c4:	33f0      	adds	r3, #240	; 0xf0
 80131c6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80131ca:	461c      	mov	r4, r3
 80131cc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80131d0:	f103 0302 	add.w	r3, r3, #2
 80131d4:	881a      	ldrh	r2, [r3, #0]
 80131d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80131da:	f103 0304 	add.w	r3, r3, #4
 80131de:	8819      	ldrh	r1, [r3, #0]
 80131e0:	4845      	ldr	r0, [pc, #276]	; (80132f8 <create_DijkstraMap+0x1b10>)
 80131e2:	4613      	mov	r3, r2
 80131e4:	011b      	lsls	r3, r3, #4
 80131e6:	1a9b      	subs	r3, r3, r2
 80131e8:	440b      	add	r3, r1
 80131ea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80131ee:	461a      	mov	r2, r3
 80131f0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80131f4:	f103 0314 	add.w	r3, r3, #20
 80131f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131fc:	4413      	add	r3, r2
 80131fe:	429c      	cmp	r4, r3
 8013200:	dd64      	ble.n	80132cc <create_DijkstraMap+0x1ae4>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013202:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013206:	f103 0302 	add.w	r3, r3, #2
 801320a:	881a      	ldrh	r2, [r3, #0]
 801320c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013210:	f103 0304 	add.w	r3, r3, #4
 8013214:	8819      	ldrh	r1, [r3, #0]
 8013216:	4838      	ldr	r0, [pc, #224]	; (80132f8 <create_DijkstraMap+0x1b10>)
 8013218:	4613      	mov	r3, r2
 801321a:	011b      	lsls	r3, r3, #4
 801321c:	1a9b      	subs	r3, r3, r2
 801321e:	440b      	add	r3, r1
 8013220:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013224:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013228:	f103 0314 	add.w	r3, r3, #20
 801322c:	881b      	ldrh	r3, [r3, #0]
 801322e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8013232:	f102 0204 	add.w	r2, r2, #4
 8013236:	8812      	ldrh	r2, [r2, #0]
 8013238:	3201      	adds	r2, #1
 801323a:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 801323e:	f101 0102 	add.w	r1, r1, #2
 8013242:	8809      	ldrh	r1, [r1, #0]
 8013244:	3901      	subs	r1, #1
 8013246:	4403      	add	r3, r0
 8013248:	b29c      	uxth	r4, r3
 801324a:	482b      	ldr	r0, [pc, #172]	; (80132f8 <create_DijkstraMap+0x1b10>)
 801324c:	4613      	mov	r3, r2
 801324e:	011b      	lsls	r3, r3, #4
 8013250:	1a9b      	subs	r3, r3, r2
 8013252:	440b      	add	r3, r1
 8013254:	33f0      	adds	r3, #240	; 0xf0
 8013256:	4622      	mov	r2, r4
 8013258:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 801325c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8013260:	f103 0304 	add.w	r3, r3, #4
 8013264:	881b      	ldrh	r3, [r3, #0]
 8013266:	3301      	adds	r3, #1
 8013268:	b29a      	uxth	r2, r3
 801326a:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801326e:	f103 031c 	add.w	r3, r3, #28
 8013272:	4611      	mov	r1, r2
 8013274:	4618      	mov	r0, r3
 8013276:	f001 fa31 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 801327a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801327e:	f103 0302 	add.w	r3, r3, #2
 8013282:	881b      	ldrh	r3, [r3, #0]
 8013284:	3b01      	subs	r3, #1
 8013286:	b29a      	uxth	r2, r3
 8013288:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801328c:	f103 031c 	add.w	r3, r3, #28
 8013290:	4611      	mov	r1, r2
 8013292:	4618      	mov	r0, r3
 8013294:	f001 fa22 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8013298:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801329c:	3b1c      	subs	r3, #28
 801329e:	2100      	movs	r1, #0
 80132a0:	4618      	mov	r0, r3
 80132a2:	f001 fa1b 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 80132a6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80132aa:	3b1c      	subs	r3, #28
 80132ac:	2103      	movs	r1, #3
 80132ae:	4618      	mov	r0, r3
 80132b0:	f001 fa14 	bl	80146dc <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80132b4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80132b8:	f103 0312 	add.w	r3, r3, #18
 80132bc:	881a      	ldrh	r2, [r3, #0]
 80132be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80132c2:	3b1c      	subs	r3, #28
 80132c4:	4611      	mov	r1, r2
 80132c6:	4618      	mov	r0, r3
 80132c8:	f001 fa08 	bl	80146dc <pushStack_walk>
						}
					}

				}

		count_number+=1;
 80132cc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80132d0:	f103 0306 	add.w	r3, r3, #6
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	3301      	adds	r3, #1
 80132d8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80132dc:	f102 0206 	add.w	r2, r2, #6
 80132e0:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 80132e2:	f7fe bc26 	b.w	8011b32 <create_DijkstraMap+0x34a>

		}



}
 80132e6:	bf00      	nop
 80132e8:	f507 57dd 	add.w	r7, r7, #7072	; 0x1ba0
 80132ec:	3718      	adds	r7, #24
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bdb0      	pop	{r4, r5, r7, pc}
 80132f2:	bf00      	nop
 80132f4:	20000c3c 	.word	0x20000c3c
 80132f8:	20000f2c 	.word	0x20000f2c

080132fc <route_Dijkstra>:





void route_Dijkstra(void){
 80132fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fe:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 8013302:	b08d      	sub	sp, #52	; 0x34
 8013304:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8013306:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801330a:	f103 0314 	add.w	r3, r3, #20
 801330e:	4618      	mov	r0, r3
 8013310:	f001 f9d4 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_y);
 8013314:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013318:	f103 0314 	add.w	r3, r3, #20
 801331c:	4618      	mov	r0, r3
 801331e:	f001 f9cd 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_matrix);
 8013322:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013326:	3b0c      	subs	r3, #12
 8013328:	4618      	mov	r0, r3
 801332a:	f001 f9c7 	bl	80146bc <initStack_walk>
	initStack_walk(&g_Goal_x);
 801332e:	48c9      	ldr	r0, [pc, #804]	; (8013654 <route_Dijkstra+0x358>)
 8013330:	f001 f9c4 	bl	80146bc <initStack_walk>
	initStack_walk(&g_Goal_y);
 8013334:	48c8      	ldr	r0, [pc, #800]	; (8013658 <route_Dijkstra+0x35c>)
 8013336:	f001 f9c1 	bl	80146bc <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801333a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801333e:	f103 0314 	add.w	r3, r3, #20
 8013342:	2100      	movs	r1, #0
 8013344:	4618      	mov	r0, r3
 8013346:	f001 f9c9 	bl	80146dc <pushStack_walk>
 801334a:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801334e:	f103 0314 	add.w	r3, r3, #20
 8013352:	2100      	movs	r1, #0
 8013354:	4618      	mov	r0, r3
 8013356:	f001 f9c1 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 801335a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801335e:	3b0c      	subs	r3, #12
 8013360:	2100      	movs	r1, #0
 8013362:	4618      	mov	r0, r3
 8013364:	f001 f9ba 	bl	80146dc <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8013368:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801336c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013370:	2200      	movs	r2, #0
 8013372:	601a      	str	r2, [r3, #0]
	int y = 0;
 8013374:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013378:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801337c:	2200      	movs	r2, #0
 801337e:	601a      	str	r2, [r3, #0]
	int direction = 1;
 8013380:	2301      	movs	r3, #1
 8013382:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013386:	f102 021c 	add.w	r2, r2, #28
 801338a:	6013      	str	r3, [r2, #0]
	create_DijkstraMap();
 801338c:	f7fe fa2c 	bl	80117e8 <create_DijkstraMap>

	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8013390:	f107 0120 	add.w	r1, r7, #32
 8013394:	3920      	subs	r1, #32
 8013396:	f107 0320 	add.w	r3, r7, #32
 801339a:	3b1c      	subs	r3, #28
 801339c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80133a0:	f102 021c 	add.w	r2, r2, #28
 80133a4:	6812      	ldr	r2, [r2, #0]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fa ff80 	bl	800e2ac <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 80133ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d006      	beq.n	80133c8 <route_Dijkstra+0xcc>
 80133ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2b02      	cmp	r3, #2
 80133c6:	d10f      	bne.n	80133e8 <route_Dijkstra+0xec>
 80133c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f000 8355 	beq.w	8013a82 <route_Dijkstra+0x786>
 80133d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	f000 834d 	beq.w	8013a82 <route_Dijkstra+0x786>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 80133e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80133f0:	6818      	ldr	r0, [r3, #0]
 80133f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133fa:	6819      	ldr	r1, [r3, #0]
 80133fc:	f107 0220 	add.w	r2, r7, #32
 8013400:	3a15      	subs	r2, #21
 8013402:	f107 0320 	add.w	r3, r7, #32
 8013406:	3b17      	subs	r3, #23
 8013408:	9301      	str	r3, [sp, #4]
 801340a:	f107 0320 	add.w	r3, r7, #32
 801340e:	3b16      	subs	r3, #22
 8013410:	9300      	str	r3, [sp, #0]
 8013412:	4613      	mov	r3, r2
 8013414:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013418:	f102 021c 	add.w	r2, r2, #28
 801341c:	6812      	ldr	r2, [r2, #0]
 801341e:	f7fd fdc7 	bl	8010fb0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8013422:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801342a:	681c      	ldr	r4, [r3, #0]
 801342c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013430:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013434:	681d      	ldr	r5, [r3, #0]
 8013436:	f107 0320 	add.w	r3, r7, #32
 801343a:	3b14      	subs	r3, #20
 801343c:	f107 0220 	add.w	r2, r7, #32
 8013440:	3a12      	subs	r2, #18
 8013442:	f107 0120 	add.w	r1, r7, #32
 8013446:	3910      	subs	r1, #16
 8013448:	f107 0020 	add.w	r0, r7, #32
 801344c:	380e      	subs	r0, #14
 801344e:	f507 5604 	add.w	r6, r7, #8448	; 0x2100
 8013452:	f106 061c 	add.w	r6, r6, #28
 8013456:	6836      	ldr	r6, [r6, #0]
 8013458:	9602      	str	r6, [sp, #8]
 801345a:	9501      	str	r5, [sp, #4]
 801345c:	9400      	str	r4, [sp, #0]
 801345e:	f7fe f929 	bl	80116b4 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013462:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013466:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d006      	beq.n	801347e <route_Dijkstra+0x182>
 8013470:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013474:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801347c:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 801347e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013482:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d006      	beq.n	801349a <route_Dijkstra+0x19e>
 801348c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013490:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013498:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 801349a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801349e:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d006      	beq.n	80134b6 <route_Dijkstra+0x1ba>
 80134a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80134b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134b4:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 80134b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134ba:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80134be:	881b      	ldrh	r3, [r3, #0]
 80134c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d11b      	bne.n	8013500 <route_Dijkstra+0x204>
 80134c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80134d0:	881b      	ldrh	r3, [r3, #0]
 80134d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d112      	bne.n	8013500 <route_Dijkstra+0x204>
 80134da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80134e2:	881b      	ldrh	r3, [r3, #0]
 80134e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134e8:	4293      	cmp	r3, r2
 80134ea:	d109      	bne.n	8013500 <route_Dijkstra+0x204>
 80134ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134f0:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80134f4:	881b      	ldrh	r3, [r3, #0]
 80134f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134fa:	4293      	cmp	r3, r2
 80134fc:	f000 82c0 	beq.w	8013a80 <route_Dijkstra+0x784>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013500:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013504:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013508:	881a      	ldrh	r2, [r3, #0]
 801350a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801350e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013512:	881b      	ldrh	r3, [r3, #0]
 8013514:	429a      	cmp	r2, r3
 8013516:	f200 80c7 	bhi.w	80136a8 <route_Dijkstra+0x3ac>
 801351a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801351e:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013522:	881a      	ldrh	r2, [r3, #0]
 8013524:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013528:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	429a      	cmp	r2, r3
 8013530:	f200 80ba 	bhi.w	80136a8 <route_Dijkstra+0x3ac>
 8013534:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013538:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801353c:	881a      	ldrh	r2, [r3, #0]
 801353e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013542:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8013546:	881b      	ldrh	r3, [r3, #0]
 8013548:	429a      	cmp	r2, r3
 801354a:	f200 80ad 	bhi.w	80136a8 <route_Dijkstra+0x3ac>
			// 直進
			switch (direction) {		//
 801354e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013552:	f103 031c 	add.w	r3, r3, #28
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	3b01      	subs	r3, #1
 801355a:	2b03      	cmp	r3, #3
 801355c:	f200 80a5 	bhi.w	80136aa <route_Dijkstra+0x3ae>
 8013560:	a201      	add	r2, pc, #4	; (adr r2, 8013568 <route_Dijkstra+0x26c>)
 8013562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013566:	bf00      	nop
 8013568:	08013579 	.word	0x08013579
 801356c:	080135c1 	.word	0x080135c1
 8013570:	08013609 	.word	0x08013609
 8013574:	0801365d 	.word	0x0801365d
			case 1:
				pushStack_walk(&stack_x,x);
 8013578:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801357c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	b29a      	uxth	r2, r3
 8013584:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013588:	f103 0314 	add.w	r3, r3, #20
 801358c:	4611      	mov	r1, r2
 801358e:	4618      	mov	r0, r3
 8013590:	f001 f8a4 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013594:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013598:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	b29a      	uxth	r2, r3
 80135a0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80135a4:	f103 0314 	add.w	r3, r3, #20
 80135a8:	4611      	mov	r1, r2
 80135aa:	4618      	mov	r0, r3
 80135ac:	f001 f896 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80135b0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80135b4:	3b0c      	subs	r3, #12
 80135b6:	2100      	movs	r1, #0
 80135b8:	4618      	mov	r0, r3
 80135ba:	f001 f88f 	bl	80146dc <pushStack_walk>
				break;
 80135be:	e074      	b.n	80136aa <route_Dijkstra+0x3ae>
			case 2:
				pushStack_walk(&stack_x,x);
 80135c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80135d0:	f103 0314 	add.w	r3, r3, #20
 80135d4:	4611      	mov	r1, r2
 80135d6:	4618      	mov	r0, r3
 80135d8:	f001 f880 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80135dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80135ec:	f103 0314 	add.w	r3, r3, #20
 80135f0:	4611      	mov	r1, r2
 80135f2:	4618      	mov	r0, r3
 80135f4:	f001 f872 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80135f8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80135fc:	3b0c      	subs	r3, #12
 80135fe:	2101      	movs	r1, #1
 8013600:	4618      	mov	r0, r3
 8013602:	f001 f86b 	bl	80146dc <pushStack_walk>
				break;
 8013606:	e050      	b.n	80136aa <route_Dijkstra+0x3ae>
			case 3:
				pushStack_walk(&stack_x,x);
 8013608:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801360c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	b29a      	uxth	r2, r3
 8013614:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013618:	f103 0314 	add.w	r3, r3, #20
 801361c:	4611      	mov	r1, r2
 801361e:	4618      	mov	r0, r3
 8013620:	f001 f85c 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013624:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013628:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	b29b      	uxth	r3, r3
 8013630:	3b01      	subs	r3, #1
 8013632:	b29a      	uxth	r2, r3
 8013634:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013638:	f103 0314 	add.w	r3, r3, #20
 801363c:	4611      	mov	r1, r2
 801363e:	4618      	mov	r0, r3
 8013640:	f001 f84c 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013644:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013648:	3b0c      	subs	r3, #12
 801364a:	2100      	movs	r1, #0
 801364c:	4618      	mov	r0, r3
 801364e:	f001 f845 	bl	80146dc <pushStack_walk>
				break;
 8013652:	e02a      	b.n	80136aa <route_Dijkstra+0x3ae>
 8013654:	200012ec 	.word	0x200012ec
 8013658:	2000186c 	.word	0x2000186c
			case 4:
				pushStack_walk(&stack_x,x-1);
 801365c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013660:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	b29b      	uxth	r3, r3
 8013668:	3b01      	subs	r3, #1
 801366a:	b29a      	uxth	r2, r3
 801366c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013670:	f103 0314 	add.w	r3, r3, #20
 8013674:	4611      	mov	r1, r2
 8013676:	4618      	mov	r0, r3
 8013678:	f001 f830 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801367c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013680:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	b29a      	uxth	r2, r3
 8013688:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801368c:	f103 0314 	add.w	r3, r3, #20
 8013690:	4611      	mov	r1, r2
 8013692:	4618      	mov	r0, r3
 8013694:	f001 f822 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013698:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801369c:	3b0c      	subs	r3, #12
 801369e:	2101      	movs	r1, #1
 80136a0:	4618      	mov	r0, r3
 80136a2:	f001 f81b 	bl	80146dc <pushStack_walk>
				break;
 80136a6:	e000      	b.n	80136aa <route_Dijkstra+0x3ae>
			}

		}
 80136a8:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 80136aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80136b2:	881a      	ldrh	r2, [r3, #0]
 80136b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136b8:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	429a      	cmp	r2, r3
 80136c0:	f080 80cd 	bcs.w	801385e <route_Dijkstra+0x562>
 80136c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80136cc:	881a      	ldrh	r2, [r3, #0]
 80136ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80136d6:	881b      	ldrh	r3, [r3, #0]
 80136d8:	429a      	cmp	r2, r3
 80136da:	f200 80c0 	bhi.w	801385e <route_Dijkstra+0x562>
 80136de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80136e6:	881a      	ldrh	r2, [r3, #0]
 80136e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80136ec:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80136f0:	881b      	ldrh	r3, [r3, #0]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	f200 80b3 	bhi.w	801385e <route_Dijkstra+0x562>
			// 右旋回
			switch (direction) {		//
 80136f8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136fc:	f103 031c 	add.w	r3, r3, #28
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	3b01      	subs	r3, #1
 8013704:	2b03      	cmp	r3, #3
 8013706:	f200 809f 	bhi.w	8013848 <route_Dijkstra+0x54c>
 801370a:	a201      	add	r2, pc, #4	; (adr r2, 8013710 <route_Dijkstra+0x414>)
 801370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013710:	08013721 	.word	0x08013721
 8013714:	08013769 	.word	0x08013769
 8013718:	080137b5 	.word	0x080137b5
 801371c:	08013801 	.word	0x08013801
			case 1:
				pushStack_walk(&stack_x,x);
 8013720:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013724:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	b29a      	uxth	r2, r3
 801372c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013730:	f103 0314 	add.w	r3, r3, #20
 8013734:	4611      	mov	r1, r2
 8013736:	4618      	mov	r0, r3
 8013738:	f000 ffd0 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801373c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013740:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	b29a      	uxth	r2, r3
 8013748:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801374c:	f103 0314 	add.w	r3, r3, #20
 8013750:	4611      	mov	r1, r2
 8013752:	4618      	mov	r0, r3
 8013754:	f000 ffc2 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013758:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801375c:	3b0c      	subs	r3, #12
 801375e:	2101      	movs	r1, #1
 8013760:	4618      	mov	r0, r3
 8013762:	f000 ffbb 	bl	80146dc <pushStack_walk>
				break;
 8013766:	e06f      	b.n	8013848 <route_Dijkstra+0x54c>
			case 2:
				pushStack_walk(&stack_x,x);
 8013768:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801376c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	b29a      	uxth	r2, r3
 8013774:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013778:	f103 0314 	add.w	r3, r3, #20
 801377c:	4611      	mov	r1, r2
 801377e:	4618      	mov	r0, r3
 8013780:	f000 ffac 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013784:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013788:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	b29b      	uxth	r3, r3
 8013790:	3b01      	subs	r3, #1
 8013792:	b29a      	uxth	r2, r3
 8013794:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013798:	f103 0314 	add.w	r3, r3, #20
 801379c:	4611      	mov	r1, r2
 801379e:	4618      	mov	r0, r3
 80137a0:	f000 ff9c 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80137a4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80137a8:	3b0c      	subs	r3, #12
 80137aa:	2100      	movs	r1, #0
 80137ac:	4618      	mov	r0, r3
 80137ae:	f000 ff95 	bl	80146dc <pushStack_walk>
				break;
 80137b2:	e049      	b.n	8013848 <route_Dijkstra+0x54c>
			case 3:
				pushStack_walk(&stack_x,x-1);
 80137b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80137b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	b29b      	uxth	r3, r3
 80137c0:	3b01      	subs	r3, #1
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80137c8:	f103 0314 	add.w	r3, r3, #20
 80137cc:	4611      	mov	r1, r2
 80137ce:	4618      	mov	r0, r3
 80137d0:	f000 ff84 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80137d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80137d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	b29a      	uxth	r2, r3
 80137e0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80137e4:	f103 0314 	add.w	r3, r3, #20
 80137e8:	4611      	mov	r1, r2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f000 ff76 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80137f0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80137f4:	3b0c      	subs	r3, #12
 80137f6:	2101      	movs	r1, #1
 80137f8:	4618      	mov	r0, r3
 80137fa:	f000 ff6f 	bl	80146dc <pushStack_walk>
				break;
 80137fe:	e023      	b.n	8013848 <route_Dijkstra+0x54c>
			case 4:
				pushStack_walk(&stack_x,x);
 8013800:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013804:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	b29a      	uxth	r2, r3
 801380c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013810:	f103 0314 	add.w	r3, r3, #20
 8013814:	4611      	mov	r1, r2
 8013816:	4618      	mov	r0, r3
 8013818:	f000 ff60 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801381c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013820:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	b29a      	uxth	r2, r3
 8013828:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801382c:	f103 0314 	add.w	r3, r3, #20
 8013830:	4611      	mov	r1, r2
 8013832:	4618      	mov	r0, r3
 8013834:	f000 ff52 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013838:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801383c:	3b0c      	subs	r3, #12
 801383e:	2100      	movs	r1, #0
 8013840:	4618      	mov	r0, r3
 8013842:	f000 ff4b 	bl	80146dc <pushStack_walk>
				break;
 8013846:	bf00      	nop
			}
			direction++;
 8013848:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801384c:	f103 031c 	add.w	r3, r3, #28
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3301      	adds	r3, #1
 8013854:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013858:	f102 021c 	add.w	r2, r2, #28
 801385c:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801385e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013866:	881a      	ldrh	r2, [r3, #0]
 8013868:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801386c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013870:	881b      	ldrh	r3, [r3, #0]
 8013872:	429a      	cmp	r2, r3
 8013874:	f080 80cd 	bcs.w	8013a12 <route_Dijkstra+0x716>
 8013878:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801387c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013880:	881a      	ldrh	r2, [r3, #0]
 8013882:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013886:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801388a:	881b      	ldrh	r3, [r3, #0]
 801388c:	429a      	cmp	r2, r3
 801388e:	f080 80c0 	bcs.w	8013a12 <route_Dijkstra+0x716>
 8013892:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013896:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801389a:	881a      	ldrh	r2, [r3, #0]
 801389c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138a0:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80138a4:	881b      	ldrh	r3, [r3, #0]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	f200 80b3 	bhi.w	8013a12 <route_Dijkstra+0x716>
			// 左旋回
			switch (direction) {		//
 80138ac:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80138b0:	f103 031c 	add.w	r3, r3, #28
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	3b01      	subs	r3, #1
 80138b8:	2b03      	cmp	r3, #3
 80138ba:	f200 809f 	bhi.w	80139fc <route_Dijkstra+0x700>
 80138be:	a201      	add	r2, pc, #4	; (adr r2, 80138c4 <route_Dijkstra+0x5c8>)
 80138c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138c4:	080138d5 	.word	0x080138d5
 80138c8:	08013921 	.word	0x08013921
 80138cc:	08013969 	.word	0x08013969
 80138d0:	080139b1 	.word	0x080139b1
			case 1:
				pushStack_walk(&stack_x,x-1);
 80138d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	b29b      	uxth	r3, r3
 80138e0:	3b01      	subs	r3, #1
 80138e2:	b29a      	uxth	r2, r3
 80138e4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80138e8:	f103 0314 	add.w	r3, r3, #20
 80138ec:	4611      	mov	r1, r2
 80138ee:	4618      	mov	r0, r3
 80138f0:	f000 fef4 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80138f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	b29a      	uxth	r2, r3
 8013900:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013904:	f103 0314 	add.w	r3, r3, #20
 8013908:	4611      	mov	r1, r2
 801390a:	4618      	mov	r0, r3
 801390c:	f000 fee6 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013910:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013914:	3b0c      	subs	r3, #12
 8013916:	2101      	movs	r1, #1
 8013918:	4618      	mov	r0, r3
 801391a:	f000 fedf 	bl	80146dc <pushStack_walk>
				break;
 801391e:	e06d      	b.n	80139fc <route_Dijkstra+0x700>
			case 2:
				pushStack_walk(&stack_x,x);
 8013920:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	b29a      	uxth	r2, r3
 801392c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013930:	f103 0314 	add.w	r3, r3, #20
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f000 fed0 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801393c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013940:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	b29a      	uxth	r2, r3
 8013948:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801394c:	f103 0314 	add.w	r3, r3, #20
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f000 fec2 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013958:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801395c:	3b0c      	subs	r3, #12
 801395e:	2100      	movs	r1, #0
 8013960:	4618      	mov	r0, r3
 8013962:	f000 febb 	bl	80146dc <pushStack_walk>
				break;
 8013966:	e049      	b.n	80139fc <route_Dijkstra+0x700>
			case 3:
				pushStack_walk(&stack_x,x);
 8013968:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801396c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	b29a      	uxth	r2, r3
 8013974:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013978:	f103 0314 	add.w	r3, r3, #20
 801397c:	4611      	mov	r1, r2
 801397e:	4618      	mov	r0, r3
 8013980:	f000 feac 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013984:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013988:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	b29a      	uxth	r2, r3
 8013990:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013994:	f103 0314 	add.w	r3, r3, #20
 8013998:	4611      	mov	r1, r2
 801399a:	4618      	mov	r0, r3
 801399c:	f000 fe9e 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80139a0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80139a4:	3b0c      	subs	r3, #12
 80139a6:	2101      	movs	r1, #1
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 fe97 	bl	80146dc <pushStack_walk>
				break;
 80139ae:	e025      	b.n	80139fc <route_Dijkstra+0x700>
			case 4:
				pushStack_walk(&stack_x,x);
 80139b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80139b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80139c0:	f103 0314 	add.w	r3, r3, #20
 80139c4:	4611      	mov	r1, r2
 80139c6:	4618      	mov	r0, r3
 80139c8:	f000 fe88 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80139cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80139d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	3b01      	subs	r3, #1
 80139da:	b29a      	uxth	r2, r3
 80139dc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80139e0:	f103 0314 	add.w	r3, r3, #20
 80139e4:	4611      	mov	r1, r2
 80139e6:	4618      	mov	r0, r3
 80139e8:	f000 fe78 	bl	80146dc <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80139ec:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80139f0:	3b0c      	subs	r3, #12
 80139f2:	2100      	movs	r1, #0
 80139f4:	4618      	mov	r0, r3
 80139f6:	f000 fe71 	bl	80146dc <pushStack_walk>
				break;
 80139fa:	bf00      	nop
			}
			direction--;
 80139fc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a00:	f103 031c 	add.w	r3, r3, #28
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	3b01      	subs	r3, #1
 8013a08:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013a0c:	f102 021c 	add.w	r2, r2, #28
 8013a10:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 8013a12:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a16:	f103 031c 	add.w	r3, r3, #28
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	2b05      	cmp	r3, #5
 8013a1e:	d105      	bne.n	8013a2c <route_Dijkstra+0x730>
			direction = 1;
 8013a20:	2301      	movs	r3, #1
 8013a22:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013a26:	f102 021c 	add.w	r2, r2, #28
 8013a2a:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 8013a2c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a30:	f103 031c 	add.w	r3, r3, #28
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2b06      	cmp	r3, #6
 8013a38:	d105      	bne.n	8013a46 <route_Dijkstra+0x74a>
			direction = 2;
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013a40:	f102 021c 	add.w	r2, r2, #28
 8013a44:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 8013a46:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a4a:	f103 031c 	add.w	r3, r3, #28
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d105      	bne.n	8013a60 <route_Dijkstra+0x764>
			direction = 4;
 8013a54:	2304      	movs	r3, #4
 8013a56:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013a5a:	f102 021c 	add.w	r2, r2, #28
 8013a5e:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013a60:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013a64:	f103 031c 	add.w	r3, r3, #28
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a6e:	f47f ac8f 	bne.w	8013390 <route_Dijkstra+0x94>
			direction = 3;
 8013a72:	2303      	movs	r3, #3
 8013a74:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013a78:	f102 021c 	add.w	r2, r2, #28
 8013a7c:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 8013a7e:	e487      	b.n	8013390 <route_Dijkstra+0x94>
			break;
 8013a80:	bf00      	nop

	}
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8013a82:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013a86:	f103 0314 	add.w	r3, r3, #20
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f000 fe50 	bl	8014730 <popStack_walk>
 8013a90:	4603      	mov	r3, r0
 8013a92:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013a96:	f102 021a 	add.w	r2, r2, #26
 8013a9a:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 8013a9c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013aa0:	f103 0314 	add.w	r3, r3, #20
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f000 fe43 	bl	8014730 <popStack_walk>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013ab0:	f102 0218 	add.w	r2, r2, #24
 8013ab4:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013ab6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013aba:	3b0c      	subs	r3, #12
 8013abc:	4618      	mov	r0, r3
 8013abe:	f000 fe37 	bl	8014730 <popStack_walk>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013ac8:	f102 0216 	add.w	r2, r2, #22
 8013acc:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013ace:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013ad2:	f103 031a 	add.w	r3, r3, #26
 8013ad6:	881b      	ldrh	r3, [r3, #0]
 8013ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013adc:	4293      	cmp	r3, r2
 8013ade:	f000 80d5 	beq.w	8013c8c <route_Dijkstra+0x990>
 8013ae2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013ae6:	f103 0318 	add.w	r3, r3, #24
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013af0:	4293      	cmp	r3, r2
 8013af2:	f000 80cb 	beq.w	8013c8c <route_Dijkstra+0x990>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 8013af6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013afa:	f103 0316 	add.w	r3, r3, #22
 8013afe:	881b      	ldrh	r3, [r3, #0]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d15c      	bne.n	8013bbe <route_Dijkstra+0x8c2>
 8013b04:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b08:	f103 0318 	add.w	r3, r3, #24
 8013b0c:	881b      	ldrh	r3, [r3, #0]
 8013b0e:	4a62      	ldr	r2, [pc, #392]	; (8013c98 <route_Dijkstra+0x99c>)
 8013b10:	332c      	adds	r3, #44	; 0x2c
 8013b12:	005b      	lsls	r3, r3, #1
 8013b14:	4413      	add	r3, r2
 8013b16:	885b      	ldrh	r3, [r3, #2]
 8013b18:	461a      	mov	r2, r3
 8013b1a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b1e:	f103 031a 	add.w	r3, r3, #26
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	fa42 f303 	asr.w	r3, r2, r3
 8013b28:	f003 0301 	and.w	r3, r3, #1
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d146      	bne.n	8013bbe <route_Dijkstra+0x8c2>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 8013b30:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b34:	f103 031a 	add.w	r3, r3, #26
 8013b38:	881b      	ldrh	r3, [r3, #0]
 8013b3a:	011a      	lsls	r2, r3, #4
 8013b3c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b40:	f103 0318 	add.w	r3, r3, #24
 8013b44:	881b      	ldrh	r3, [r3, #0]
 8013b46:	4413      	add	r3, r2
 8013b48:	4a54      	ldr	r2, [pc, #336]	; (8013c9c <route_Dijkstra+0x9a0>)
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[(Xcoordinate * 16) + Ycoordinate+1] = 0;
 8013b50:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b54:	f103 031a 	add.w	r3, r3, #26
 8013b58:	881b      	ldrh	r3, [r3, #0]
 8013b5a:	011a      	lsls	r2, r3, #4
 8013b5c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b60:	f103 0318 	add.w	r3, r3, #24
 8013b64:	881b      	ldrh	r3, [r3, #0]
 8013b66:	4413      	add	r3, r2
 8013b68:	3301      	adds	r3, #1
 8013b6a:	4a4c      	ldr	r2, [pc, #304]	; (8013c9c <route_Dijkstra+0x9a0>)
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b72:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b76:	f103 031a 	add.w	r3, r3, #26
 8013b7a:	881b      	ldrh	r3, [r3, #0]
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	4848      	ldr	r0, [pc, #288]	; (8013ca0 <route_Dijkstra+0x9a4>)
 8013b80:	f000 fdac 	bl	80146dc <pushStack_walk>
 8013b84:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b88:	f103 0318 	add.w	r3, r3, #24
 8013b8c:	881b      	ldrh	r3, [r3, #0]
 8013b8e:	4619      	mov	r1, r3
 8013b90:	4844      	ldr	r0, [pc, #272]	; (8013ca4 <route_Dijkstra+0x9a8>)
 8013b92:	f000 fda3 	bl	80146dc <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013b96:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013b9a:	f103 031a 	add.w	r3, r3, #26
 8013b9e:	881b      	ldrh	r3, [r3, #0]
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	483f      	ldr	r0, [pc, #252]	; (8013ca0 <route_Dijkstra+0x9a4>)
 8013ba4:	f000 fd9a 	bl	80146dc <pushStack_walk>
 8013ba8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013bac:	f103 0318 	add.w	r3, r3, #24
 8013bb0:	881b      	ldrh	r3, [r3, #0]
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	483a      	ldr	r0, [pc, #232]	; (8013ca4 <route_Dijkstra+0x9a8>)
 8013bba:	f000 fd8f 	bl	80146dc <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013bbe:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013bc2:	f103 0316 	add.w	r3, r3, #22
 8013bc6:	881b      	ldrh	r3, [r3, #0]
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	f47f af5a 	bne.w	8013a82 <route_Dijkstra+0x786>
 8013bce:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013bd2:	f103 031a 	add.w	r3, r3, #26
 8013bd6:	881b      	ldrh	r3, [r3, #0]
 8013bd8:	4a2f      	ldr	r2, [pc, #188]	; (8013c98 <route_Dijkstra+0x99c>)
 8013bda:	331c      	adds	r3, #28
 8013bdc:	005b      	lsls	r3, r3, #1
 8013bde:	4413      	add	r3, r2
 8013be0:	889b      	ldrh	r3, [r3, #4]
 8013be2:	461a      	mov	r2, r3
 8013be4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013be8:	f103 0318 	add.w	r3, r3, #24
 8013bec:	881b      	ldrh	r3, [r3, #0]
 8013bee:	fa42 f303 	asr.w	r3, r2, r3
 8013bf2:	f003 0301 	and.w	r3, r3, #1
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	f47f af43 	bne.w	8013a82 <route_Dijkstra+0x786>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 8013bfc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c00:	f103 031a 	add.w	r3, r3, #26
 8013c04:	881b      	ldrh	r3, [r3, #0]
 8013c06:	011a      	lsls	r2, r3, #4
 8013c08:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c0c:	f103 0318 	add.w	r3, r3, #24
 8013c10:	881b      	ldrh	r3, [r3, #0]
 8013c12:	4413      	add	r3, r2
 8013c14:	4a21      	ldr	r2, [pc, #132]	; (8013c9c <route_Dijkstra+0x9a0>)
 8013c16:	2100      	movs	r1, #0
 8013c18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[((Xcoordinate+1) * 16) + Ycoordinate] = 0;
 8013c1c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c20:	f103 031a 	add.w	r3, r3, #26
 8013c24:	881b      	ldrh	r3, [r3, #0]
 8013c26:	3301      	adds	r3, #1
 8013c28:	011a      	lsls	r2, r3, #4
 8013c2a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c2e:	f103 0318 	add.w	r3, r3, #24
 8013c32:	881b      	ldrh	r3, [r3, #0]
 8013c34:	4413      	add	r3, r2
 8013c36:	4a19      	ldr	r2, [pc, #100]	; (8013c9c <route_Dijkstra+0x9a0>)
 8013c38:	2100      	movs	r1, #0
 8013c3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013c3e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c42:	f103 031a 	add.w	r3, r3, #26
 8013c46:	881b      	ldrh	r3, [r3, #0]
 8013c48:	4619      	mov	r1, r3
 8013c4a:	4815      	ldr	r0, [pc, #84]	; (8013ca0 <route_Dijkstra+0x9a4>)
 8013c4c:	f000 fd46 	bl	80146dc <pushStack_walk>
 8013c50:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c54:	f103 0318 	add.w	r3, r3, #24
 8013c58:	881b      	ldrh	r3, [r3, #0]
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	4811      	ldr	r0, [pc, #68]	; (8013ca4 <route_Dijkstra+0x9a8>)
 8013c5e:	f000 fd3d 	bl	80146dc <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013c62:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c66:	f103 031a 	add.w	r3, r3, #26
 8013c6a:	881b      	ldrh	r3, [r3, #0]
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	4619      	mov	r1, r3
 8013c72:	480b      	ldr	r0, [pc, #44]	; (8013ca0 <route_Dijkstra+0x9a4>)
 8013c74:	f000 fd32 	bl	80146dc <pushStack_walk>
 8013c78:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013c7c:	f103 0318 	add.w	r3, r3, #24
 8013c80:	881b      	ldrh	r3, [r3, #0]
 8013c82:	4619      	mov	r1, r3
 8013c84:	4807      	ldr	r0, [pc, #28]	; (8013ca4 <route_Dijkstra+0x9a8>)
 8013c86:	f000 fd29 	bl	80146dc <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013c8a:	e6fa      	b.n	8013a82 <route_Dijkstra+0x786>
			}
	}


}
 8013c8c:	bf00      	nop
 8013c8e:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 8013c92:	3724      	adds	r7, #36	; 0x24
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c98:	20000c3c 	.word	0x20000c3c
 8013c9c:	20000d2c 	.word	0x20000d2c
 8013ca0:	200012ec 	.word	0x200012ec
 8013ca4:	2000186c 	.word	0x2000186c

08013ca8 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013cae:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013cb6:	e00a      	b.n	8013cce <create_StepCountMap_unknown+0x26>
 8013cb8:	4a39      	ldr	r2, [pc, #228]	; (8013da0 <create_StepCountMap_unknown+0xf8>)
 8013cba:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013cbe:	21ff      	movs	r1, #255	; 0xff
 8013cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013cc4:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013cc8:	3301      	adds	r3, #1
 8013cca:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013cce:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013cd2:	2bff      	cmp	r3, #255	; 0xff
 8013cd4:	ddf0      	ble.n	8013cb8 <create_StepCountMap_unknown+0x10>

	initStack_walk(&stack_x);
 8013cd6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f000 fcee 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_y);
 8013ce0:	463b      	mov	r3, r7
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f000 fcea 	bl	80146bc <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013ce8:	482e      	ldr	r0, [pc, #184]	; (8013da4 <create_StepCountMap_unknown+0xfc>)
 8013cea:	f000 fd21 	bl	8014730 <popStack_walk>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
			goalY = popStack_walk(&g_Goal_y);
 8013cf4:	482c      	ldr	r0, [pc, #176]	; (8013da8 <create_StepCountMap_unknown+0x100>)
 8013cf6:	f000 fd1b 	bl	8014730 <popStack_walk>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013d00:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d08:	4293      	cmp	r3, r2
 8013d0a:	d01f      	beq.n	8013d4c <create_StepCountMap_unknown+0xa4>
 8013d0c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d019      	beq.n	8013d4c <create_StepCountMap_unknown+0xa4>
				//printf("stack_end\n");
				break;
			}
			walk_count[(goalX * 16) + goalY] = 0;
 8013d18:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d1c:	011a      	lsls	r2, r3, #4
 8013d1e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d22:	4413      	add	r3, r2
 8013d24:	4a1e      	ldr	r2, [pc, #120]	; (8013da0 <create_StepCountMap_unknown+0xf8>)
 8013d26:	2100      	movs	r1, #0
 8013d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013d2c:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8013d30:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d34:	4611      	mov	r1, r2
 8013d36:	4618      	mov	r0, r3
 8013d38:	f000 fcd0 	bl	80146dc <pushStack_walk>
 8013d3c:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013d40:	463b      	mov	r3, r7
 8013d42:	4611      	mov	r1, r2
 8013d44:	4618      	mov	r0, r3
 8013d46:	f000 fcc9 	bl	80146dc <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013d4a:	e7cd      	b.n	8013ce8 <create_StepCountMap_unknown+0x40>
	}
	if(stack_x.tail == stack_x.head){
 8013d4c:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013d50:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013d54:	685a      	ldr	r2, [r3, #4]
 8013d56:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013d5a:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d10d      	bne.n	8013d80 <create_StepCountMap_unknown+0xd8>
		walk_count[0] = 0;
 8013d64:	4b0e      	ldr	r3, [pc, #56]	; (8013da0 <create_StepCountMap_unknown+0xf8>)
 8013d66:	2200      	movs	r2, #0
 8013d68:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013d6a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013d6e:	2100      	movs	r1, #0
 8013d70:	4618      	mov	r0, r3
 8013d72:	f000 fcb3 	bl	80146dc <pushStack_walk>
 8013d76:	463b      	mov	r3, r7
 8013d78:	2100      	movs	r1, #0
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f000 fcae 	bl	80146dc <pushStack_walk>
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013d80:	2301      	movs	r3, #1
 8013d82:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013d86:	2301      	movs	r3, #1
 8013d88:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013d92:	2301      	movs	r3, #1
 8013d94:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013d98:	2301      	movs	r3, #1
 8013d9a:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013d9e:	e141      	b.n	8014024 <create_StepCountMap_unknown+0x37c>
 8013da0:	20000d2c 	.word	0x20000d2c
 8013da4:	200012ec 	.word	0x200012ec
 8013da8:	2000186c 	.word	0x2000186c

		Xcoordinate = popStack_walk(&stack_x);
 8013dac:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013db0:	4618      	mov	r0, r3
 8013db2:	f000 fcbd 	bl	8014730 <popStack_walk>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		Ycoordinate = popStack_walk(&stack_y);
 8013dbc:	463b      	mov	r3, r7
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f000 fcb6 	bl	8014730 <popStack_walk>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	f8a7 3b02 	strh.w	r3, [r7, #2818]	; 0xb02
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013dca:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	f000 812b 	beq.w	801402e <create_StepCountMap_unknown+0x386>
 8013dd8:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013de0:	4293      	cmp	r3, r2
 8013de2:	f000 8124 	beq.w	801402e <create_StepCountMap_unknown+0x386>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8013de6:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013dea:	011b      	lsls	r3, r3, #4
 8013dec:	b29a      	uxth	r2, r3
 8013dee:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013df2:	4413      	add	r3, r2
 8013df4:	f8a7 3b00 	strh.w	r3, [r7, #2816]	; 0xb00
		if (Ycoordinate <= 14) {
 8013df8:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013dfc:	2b0e      	cmp	r3, #14
 8013dfe:	d811      	bhi.n	8013e24 <create_StepCountMap_unknown+0x17c>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013e00:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013e04:	4a8c      	ldr	r2, [pc, #560]	; (8014038 <create_StepCountMap_unknown+0x390>)
 8013e06:	330c      	adds	r3, #12
 8013e08:	005b      	lsls	r3, r3, #1
 8013e0a:	4413      	add	r3, r2
 8013e0c:	88db      	ldrh	r3, [r3, #6]
 8013e0e:	b21a      	sxth	r2, r3
 8013e10:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e14:	2101      	movs	r1, #1
 8013e16:	fa01 f303 	lsl.w	r3, r1, r3
 8013e1a:	b21b      	sxth	r3, r3
 8013e1c:	4013      	ands	r3, r2
 8013e1e:	b21b      	sxth	r3, r3
 8013e20:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8013e24:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d012      	beq.n	8013e52 <create_StepCountMap_unknown+0x1aa>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013e2c:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013e30:	3b01      	subs	r3, #1
 8013e32:	4a81      	ldr	r2, [pc, #516]	; (8014038 <create_StepCountMap_unknown+0x390>)
 8013e34:	330c      	adds	r3, #12
 8013e36:	005b      	lsls	r3, r3, #1
 8013e38:	4413      	add	r3, r2
 8013e3a:	88db      	ldrh	r3, [r3, #6]
 8013e3c:	b21a      	sxth	r2, r3
 8013e3e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e42:	2101      	movs	r1, #1
 8013e44:	fa01 f303 	lsl.w	r3, r1, r3
 8013e48:	b21b      	sxth	r3, r3
 8013e4a:	4013      	ands	r3, r2
 8013e4c:	b21b      	sxth	r3, r3
 8013e4e:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013e52:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e56:	2b0e      	cmp	r3, #14
 8013e58:	d80f      	bhi.n	8013e7a <create_StepCountMap_unknown+0x1d2>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013e5a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e5e:	4a76      	ldr	r2, [pc, #472]	; (8014038 <create_StepCountMap_unknown+0x390>)
 8013e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e64:	b21a      	sxth	r2, r3
 8013e66:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013e6a:	2101      	movs	r1, #1
 8013e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8013e70:	b21b      	sxth	r3, r3
 8013e72:	4013      	ands	r3, r2
 8013e74:	b21b      	sxth	r3, r3
 8013e76:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013e7a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d010      	beq.n	8013ea4 <create_StepCountMap_unknown+0x1fc>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013e82:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e86:	3b01      	subs	r3, #1
 8013e88:	4a6b      	ldr	r2, [pc, #428]	; (8014038 <create_StepCountMap_unknown+0x390>)
 8013e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e8e:	b21a      	sxth	r2, r3
 8013e90:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013e94:	2101      	movs	r1, #1
 8013e96:	fa01 f303 	lsl.w	r3, r1, r3
 8013e9a:	b21b      	sxth	r3, r3
 8013e9c:	4013      	ands	r3, r2
 8013e9e:	b21b      	sxth	r3, r3
 8013ea0:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013ea4:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ea8:	3301      	adds	r3, #1
 8013eaa:	4a64      	ldr	r2, [pc, #400]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013eb0:	2bff      	cmp	r3, #255	; 0xff
 8013eb2:	d125      	bne.n	8013f00 <create_StepCountMap_unknown+0x258>
 8013eb4:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013eb8:	2b0f      	cmp	r3, #15
 8013eba:	d021      	beq.n	8013f00 <create_StepCountMap_unknown+0x258>
 8013ebc:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d11d      	bne.n	8013f00 <create_StepCountMap_unknown+0x258>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8013ec4:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ec8:	4a5c      	ldr	r2, [pc, #368]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013eca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013ece:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	3201      	adds	r2, #1
 8013ed6:	b291      	uxth	r1, r2
 8013ed8:	4a58      	ldr	r2, [pc, #352]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013eda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013ede:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013ee2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f000 fbf7 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013eee:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	463b      	mov	r3, r7
 8013ef8:	4611      	mov	r1, r2
 8013efa:	4618      	mov	r0, r3
 8013efc:	f000 fbee 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013f00:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013f04:	3b01      	subs	r3, #1
 8013f06:	4a4d      	ldr	r2, [pc, #308]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f0c:	2bff      	cmp	r3, #255	; 0xff
 8013f0e:	d125      	bne.n	8013f5c <create_StepCountMap_unknown+0x2b4>
 8013f10:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d021      	beq.n	8013f5c <create_StepCountMap_unknown+0x2b4>
 8013f18:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d11d      	bne.n	8013f5c <create_StepCountMap_unknown+0x2b4>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8013f20:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013f24:	4a45      	ldr	r2, [pc, #276]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013f26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013f2a:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	3201      	adds	r2, #1
 8013f32:	b291      	uxth	r1, r2
 8013f34:	4a41      	ldr	r2, [pc, #260]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013f3a:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013f3e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013f42:	4611      	mov	r1, r2
 8013f44:	4618      	mov	r0, r3
 8013f46:	f000 fbc9 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013f4a:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013f4e:	3b01      	subs	r3, #1
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	463b      	mov	r3, r7
 8013f54:	4611      	mov	r1, r2
 8013f56:	4618      	mov	r0, r3
 8013f58:	f000 fbc0 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013f5c:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013f60:	3310      	adds	r3, #16
 8013f62:	4a36      	ldr	r2, [pc, #216]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f68:	2bff      	cmp	r3, #255	; 0xff
 8013f6a:	d125      	bne.n	8013fb8 <create_StepCountMap_unknown+0x310>
 8013f6c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013f70:	2b0f      	cmp	r3, #15
 8013f72:	d021      	beq.n	8013fb8 <create_StepCountMap_unknown+0x310>
 8013f74:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d11d      	bne.n	8013fb8 <create_StepCountMap_unknown+0x310>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8013f7c:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013f80:	4a2e      	ldr	r2, [pc, #184]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013f82:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013f86:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013f8a:	3310      	adds	r3, #16
 8013f8c:	3201      	adds	r2, #1
 8013f8e:	b291      	uxth	r1, r2
 8013f90:	4a2a      	ldr	r2, [pc, #168]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013f92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013f96:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f000 fb99 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013faa:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013fae:	463b      	mov	r3, r7
 8013fb0:	4611      	mov	r1, r2
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f000 fb92 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013fb8:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013fbc:	3b10      	subs	r3, #16
 8013fbe:	4a1f      	ldr	r2, [pc, #124]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013fc4:	2bff      	cmp	r3, #255	; 0xff
 8013fc6:	d125      	bne.n	8014014 <create_StepCountMap_unknown+0x36c>
 8013fc8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d021      	beq.n	8014014 <create_StepCountMap_unknown+0x36c>
 8013fd0:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d11d      	bne.n	8014014 <create_StepCountMap_unknown+0x36c>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8013fd8:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013fdc:	4a17      	ldr	r2, [pc, #92]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013fde:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013fe2:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013fe6:	3b10      	subs	r3, #16
 8013fe8:	3201      	adds	r2, #1
 8013fea:	b291      	uxth	r1, r2
 8013fec:	4a13      	ldr	r2, [pc, #76]	; (801403c <create_StepCountMap_unknown+0x394>)
 8013fee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013ff2:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013ffe:	4611      	mov	r1, r2
 8014000:	4618      	mov	r0, r3
 8014002:	f000 fb6b 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014006:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 801400a:	463b      	mov	r3, r7
 801400c:	4611      	mov	r1, r2
 801400e:	4618      	mov	r0, r3
 8014010:	f000 fb64 	bl	80146dc <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8014014:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8014018:	4a08      	ldr	r2, [pc, #32]	; (801403c <create_StepCountMap_unknown+0x394>)
 801401a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801401e:	3301      	adds	r3, #1
 8014020:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8014024:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8014028:	2bfe      	cmp	r3, #254	; 0xfe
 801402a:	f67f aebf 	bls.w	8013dac <create_StepCountMap_unknown+0x104>

		}

}
 801402e:	bf00      	nop
 8014030:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}
 8014038:	20000c3c 	.word	0x20000c3c
 801403c:	20000d2c 	.word	0x20000d2c

08014040 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8014040:	b580      	push	{r7, lr}
 8014042:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8014046:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8014048:	2300      	movs	r3, #0
 801404a:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 801404e:	e00a      	b.n	8014066 <create_StepCountMap_queue+0x26>
 8014050:	4a30      	ldr	r2, [pc, #192]	; (8014114 <create_StepCountMap_queue+0xd4>)
 8014052:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8014056:	21ff      	movs	r1, #255	; 0xff
 8014058:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801405c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8014060:	3301      	adds	r3, #1
 8014062:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8014066:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801406a:	2bff      	cmp	r3, #255	; 0xff
 801406c:	ddf0      	ble.n	8014050 <create_StepCountMap_queue+0x10>
	initStack_walk(&stack_x);
 801406e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014072:	4618      	mov	r0, r3
 8014074:	f000 fb22 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_y);
 8014078:	1d3b      	adds	r3, r7, #4
 801407a:	4618      	mov	r0, r3
 801407c:	f000 fb1e 	bl	80146bc <initStack_walk>


	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8014080:	4b24      	ldr	r3, [pc, #144]	; (8014114 <create_StepCountMap_queue+0xd4>)
 8014082:	2200      	movs	r2, #0
 8014084:	841a      	strh	r2, [r3, #32]
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8014086:	4b23      	ldr	r3, [pc, #140]	; (8014114 <create_StepCountMap_queue+0xd4>)
 8014088:	2200      	movs	r2, #0
 801408a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 801408e:	4b21      	ldr	r3, [pc, #132]	; (8014114 <create_StepCountMap_queue+0xd4>)
 8014090:	2200      	movs	r2, #0
 8014092:	845a      	strh	r2, [r3, #34]	; 0x22
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8014094:	4b1f      	ldr	r3, [pc, #124]	; (8014114 <create_StepCountMap_queue+0xd4>)
 8014096:	2200      	movs	r2, #0
 8014098:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801409c:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80140a0:	2101      	movs	r1, #1
 80140a2:	4618      	mov	r0, r3
 80140a4:	f000 fb1a 	bl	80146dc <pushStack_walk>
 80140a8:	1d3b      	adds	r3, r7, #4
 80140aa:	2100      	movs	r1, #0
 80140ac:	4618      	mov	r0, r3
 80140ae:	f000 fb15 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 80140b2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80140b6:	2102      	movs	r1, #2
 80140b8:	4618      	mov	r0, r3
 80140ba:	f000 fb0f 	bl	80146dc <pushStack_walk>
 80140be:	1d3b      	adds	r3, r7, #4
 80140c0:	2100      	movs	r1, #0
 80140c2:	4618      	mov	r0, r3
 80140c4:	f000 fb0a 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 80140c8:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80140cc:	2101      	movs	r1, #1
 80140ce:	4618      	mov	r0, r3
 80140d0:	f000 fb04 	bl	80146dc <pushStack_walk>
 80140d4:	1d3b      	adds	r3, r7, #4
 80140d6:	2101      	movs	r1, #1
 80140d8:	4618      	mov	r0, r3
 80140da:	f000 faff 	bl	80146dc <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 80140de:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80140e2:	2102      	movs	r1, #2
 80140e4:	4618      	mov	r0, r3
 80140e6:	f000 faf9 	bl	80146dc <pushStack_walk>
 80140ea:	1d3b      	adds	r3, r7, #4
 80140ec:	2101      	movs	r1, #1
 80140ee:	4618      	mov	r0, r3
 80140f0:	f000 faf4 	bl	80146dc <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 80140f4:	2301      	movs	r3, #1
 80140f6:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80140fa:	2301      	movs	r3, #1
 80140fc:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8014100:	2301      	movs	r3, #1
 8014102:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8014106:	2301      	movs	r3, #1
 8014108:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 801410c:	2301      	movs	r3, #1
 801410e:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8014112:	e13d      	b.n	8014390 <create_StepCountMap_queue+0x350>
 8014114:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8014118:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801411c:	4618      	mov	r0, r3
 801411e:	f000 fb07 	bl	8014730 <popStack_walk>
 8014122:	4603      	mov	r3, r0
 8014124:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8014128:	1d3b      	adds	r3, r7, #4
 801412a:	4618      	mov	r0, r3
 801412c:	f000 fb00 	bl	8014730 <popStack_walk>
 8014130:	4603      	mov	r3, r0
 8014132:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014136:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801413a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801413e:	4293      	cmp	r3, r2
 8014140:	f000 812b 	beq.w	801439a <create_StepCountMap_queue+0x35a>
 8014144:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801414c:	4293      	cmp	r3, r2
 801414e:	f000 8124 	beq.w	801439a <create_StepCountMap_queue+0x35a>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8014152:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014156:	011b      	lsls	r3, r3, #4
 8014158:	b29a      	uxth	r2, r3
 801415a:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801415e:	4413      	add	r3, r2
 8014160:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8014164:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014168:	2b0e      	cmp	r3, #14
 801416a:	d811      	bhi.n	8014190 <create_StepCountMap_queue+0x150>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 801416c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014170:	4a8c      	ldr	r2, [pc, #560]	; (80143a4 <create_StepCountMap_queue+0x364>)
 8014172:	330c      	adds	r3, #12
 8014174:	005b      	lsls	r3, r3, #1
 8014176:	4413      	add	r3, r2
 8014178:	88db      	ldrh	r3, [r3, #6]
 801417a:	b21a      	sxth	r2, r3
 801417c:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014180:	2101      	movs	r1, #1
 8014182:	fa01 f303 	lsl.w	r3, r1, r3
 8014186:	b21b      	sxth	r3, r3
 8014188:	4013      	ands	r3, r2
 801418a:	b21b      	sxth	r3, r3
 801418c:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8014190:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014194:	2b00      	cmp	r3, #0
 8014196:	d012      	beq.n	80141be <create_StepCountMap_queue+0x17e>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8014198:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801419c:	3b01      	subs	r3, #1
 801419e:	4a81      	ldr	r2, [pc, #516]	; (80143a4 <create_StepCountMap_queue+0x364>)
 80141a0:	330c      	adds	r3, #12
 80141a2:	005b      	lsls	r3, r3, #1
 80141a4:	4413      	add	r3, r2
 80141a6:	88db      	ldrh	r3, [r3, #6]
 80141a8:	b21a      	sxth	r2, r3
 80141aa:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141ae:	2101      	movs	r1, #1
 80141b0:	fa01 f303 	lsl.w	r3, r1, r3
 80141b4:	b21b      	sxth	r3, r3
 80141b6:	4013      	ands	r3, r2
 80141b8:	b21b      	sxth	r3, r3
 80141ba:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 80141be:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141c2:	2b0e      	cmp	r3, #14
 80141c4:	d80f      	bhi.n	80141e6 <create_StepCountMap_queue+0x1a6>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80141c6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141ca:	4a76      	ldr	r2, [pc, #472]	; (80143a4 <create_StepCountMap_queue+0x364>)
 80141cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141d0:	b21a      	sxth	r2, r3
 80141d2:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80141d6:	2101      	movs	r1, #1
 80141d8:	fa01 f303 	lsl.w	r3, r1, r3
 80141dc:	b21b      	sxth	r3, r3
 80141de:	4013      	ands	r3, r2
 80141e0:	b21b      	sxth	r3, r3
 80141e2:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 80141e6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d010      	beq.n	8014210 <create_StepCountMap_queue+0x1d0>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80141ee:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141f2:	3b01      	subs	r3, #1
 80141f4:	4a6b      	ldr	r2, [pc, #428]	; (80143a4 <create_StepCountMap_queue+0x364>)
 80141f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141fa:	b21a      	sxth	r2, r3
 80141fc:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014200:	2101      	movs	r1, #1
 8014202:	fa01 f303 	lsl.w	r3, r1, r3
 8014206:	b21b      	sxth	r3, r3
 8014208:	4013      	ands	r3, r2
 801420a:	b21b      	sxth	r3, r3
 801420c:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014210:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014214:	3301      	adds	r3, #1
 8014216:	4a64      	ldr	r2, [pc, #400]	; (80143a8 <create_StepCountMap_queue+0x368>)
 8014218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801421c:	2bff      	cmp	r3, #255	; 0xff
 801421e:	d125      	bne.n	801426c <create_StepCountMap_queue+0x22c>
 8014220:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014224:	2b0f      	cmp	r3, #15
 8014226:	d021      	beq.n	801426c <create_StepCountMap_queue+0x22c>
 8014228:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 801422c:	2b00      	cmp	r3, #0
 801422e:	d11d      	bne.n	801426c <create_StepCountMap_queue+0x22c>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8014230:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014234:	4a5c      	ldr	r2, [pc, #368]	; (80143a8 <create_StepCountMap_queue+0x368>)
 8014236:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801423a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801423e:	3301      	adds	r3, #1
 8014240:	3201      	adds	r2, #1
 8014242:	b291      	uxth	r1, r2
 8014244:	4a58      	ldr	r2, [pc, #352]	; (80143a8 <create_StepCountMap_queue+0x368>)
 8014246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801424a:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 801424e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014252:	4611      	mov	r1, r2
 8014254:	4618      	mov	r0, r3
 8014256:	f000 fa41 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 801425a:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801425e:	3301      	adds	r3, #1
 8014260:	b29a      	uxth	r2, r3
 8014262:	1d3b      	adds	r3, r7, #4
 8014264:	4611      	mov	r1, r2
 8014266:	4618      	mov	r0, r3
 8014268:	f000 fa38 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 801426c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014270:	3b01      	subs	r3, #1
 8014272:	4a4d      	ldr	r2, [pc, #308]	; (80143a8 <create_StepCountMap_queue+0x368>)
 8014274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014278:	2bff      	cmp	r3, #255	; 0xff
 801427a:	d125      	bne.n	80142c8 <create_StepCountMap_queue+0x288>
 801427c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014280:	2b00      	cmp	r3, #0
 8014282:	d021      	beq.n	80142c8 <create_StepCountMap_queue+0x288>
 8014284:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8014288:	2b00      	cmp	r3, #0
 801428a:	d11d      	bne.n	80142c8 <create_StepCountMap_queue+0x288>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 801428c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014290:	4a45      	ldr	r2, [pc, #276]	; (80143a8 <create_StepCountMap_queue+0x368>)
 8014292:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014296:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801429a:	3b01      	subs	r3, #1
 801429c:	3201      	adds	r2, #1
 801429e:	b291      	uxth	r1, r2
 80142a0:	4a41      	ldr	r2, [pc, #260]	; (80143a8 <create_StepCountMap_queue+0x368>)
 80142a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80142a6:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 80142aa:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80142ae:	4611      	mov	r1, r2
 80142b0:	4618      	mov	r0, r3
 80142b2:	f000 fa13 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80142b6:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80142ba:	3b01      	subs	r3, #1
 80142bc:	b29a      	uxth	r2, r3
 80142be:	1d3b      	adds	r3, r7, #4
 80142c0:	4611      	mov	r1, r2
 80142c2:	4618      	mov	r0, r3
 80142c4:	f000 fa0a 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80142c8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80142cc:	3310      	adds	r3, #16
 80142ce:	4a36      	ldr	r2, [pc, #216]	; (80143a8 <create_StepCountMap_queue+0x368>)
 80142d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80142d4:	2bff      	cmp	r3, #255	; 0xff
 80142d6:	d125      	bne.n	8014324 <create_StepCountMap_queue+0x2e4>
 80142d8:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80142dc:	2b0f      	cmp	r3, #15
 80142de:	d021      	beq.n	8014324 <create_StepCountMap_queue+0x2e4>
 80142e0:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d11d      	bne.n	8014324 <create_StepCountMap_queue+0x2e4>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 80142e8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80142ec:	4a2e      	ldr	r2, [pc, #184]	; (80143a8 <create_StepCountMap_queue+0x368>)
 80142ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80142f2:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80142f6:	3310      	adds	r3, #16
 80142f8:	3201      	adds	r2, #1
 80142fa:	b291      	uxth	r1, r2
 80142fc:	4a2a      	ldr	r2, [pc, #168]	; (80143a8 <create_StepCountMap_queue+0x368>)
 80142fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014302:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014306:	3301      	adds	r3, #1
 8014308:	b29a      	uxth	r2, r3
 801430a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801430e:	4611      	mov	r1, r2
 8014310:	4618      	mov	r0, r3
 8014312:	f000 f9e3 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014316:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801431a:	1d3b      	adds	r3, r7, #4
 801431c:	4611      	mov	r1, r2
 801431e:	4618      	mov	r0, r3
 8014320:	f000 f9dc 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014324:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014328:	3b10      	subs	r3, #16
 801432a:	4a1f      	ldr	r2, [pc, #124]	; (80143a8 <create_StepCountMap_queue+0x368>)
 801432c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014330:	2bff      	cmp	r3, #255	; 0xff
 8014332:	d125      	bne.n	8014380 <create_StepCountMap_queue+0x340>
 8014334:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014338:	2b00      	cmp	r3, #0
 801433a:	d021      	beq.n	8014380 <create_StepCountMap_queue+0x340>
 801433c:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8014340:	2b00      	cmp	r3, #0
 8014342:	d11d      	bne.n	8014380 <create_StepCountMap_queue+0x340>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8014344:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014348:	4a17      	ldr	r2, [pc, #92]	; (80143a8 <create_StepCountMap_queue+0x368>)
 801434a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801434e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014352:	3b10      	subs	r3, #16
 8014354:	3201      	adds	r2, #1
 8014356:	b291      	uxth	r1, r2
 8014358:	4a13      	ldr	r2, [pc, #76]	; (80143a8 <create_StepCountMap_queue+0x368>)
 801435a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801435e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014362:	3b01      	subs	r3, #1
 8014364:	b29a      	uxth	r2, r3
 8014366:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801436a:	4611      	mov	r1, r2
 801436c:	4618      	mov	r0, r3
 801436e:	f000 f9b5 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014372:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8014376:	1d3b      	adds	r3, r7, #4
 8014378:	4611      	mov	r1, r2
 801437a:	4618      	mov	r0, r3
 801437c:	f000 f9ae 	bl	80146dc <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8014380:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014384:	4a08      	ldr	r2, [pc, #32]	; (80143a8 <create_StepCountMap_queue+0x368>)
 8014386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801438a:	3301      	adds	r3, #1
 801438c:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8014390:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8014394:	2bfe      	cmp	r3, #254	; 0xfe
 8014396:	f67f aebf 	bls.w	8014118 <create_StepCountMap_queue+0xd8>

		}

}
 801439a:	bf00      	nop
 801439c:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	20000c3c 	.word	0x20000c3c
 80143a8:	20000d2c 	.word	0x20000d2c

080143ac <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 80143ac:	b580      	push	{r7, lr}
 80143ae:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 80143b2:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 80143b4:	2300      	movs	r3, #0
 80143b6:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 80143ba:	e00a      	b.n	80143d2 <create_StepCountMapBack_queue+0x26>
 80143bc:	4abd      	ldr	r2, [pc, #756]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 80143be:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80143c2:	21ff      	movs	r1, #255	; 0xff
 80143c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80143c8:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80143cc:	3301      	adds	r3, #1
 80143ce:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 80143d2:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80143d6:	2bff      	cmp	r3, #255	; 0xff
 80143d8:	ddf0      	ble.n	80143bc <create_StepCountMapBack_queue+0x10>
	initStack_walk(&stack_x);
 80143da:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 f96c 	bl	80146bc <initStack_walk>
	initStack_walk(&stack_y);
 80143e4:	1d3b      	adds	r3, r7, #4
 80143e6:	4618      	mov	r0, r3
 80143e8:	f000 f968 	bl	80146bc <initStack_walk>


	walk_count[0] = 0;
 80143ec:	4bb1      	ldr	r3, [pc, #708]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 80143ee:	2200      	movs	r2, #0
 80143f0:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80143f2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80143f6:	2100      	movs	r1, #0
 80143f8:	4618      	mov	r0, r3
 80143fa:	f000 f96f 	bl	80146dc <pushStack_walk>
 80143fe:	1d3b      	adds	r3, r7, #4
 8014400:	2100      	movs	r1, #0
 8014402:	4618      	mov	r0, r3
 8014404:	f000 f96a 	bl	80146dc <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8014408:	2301      	movs	r3, #1
 801440a:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 801440e:	2301      	movs	r3, #1
 8014410:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8014414:	2301      	movs	r3, #1
 8014416:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 801441a:	2301      	movs	r3, #1
 801441c:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8014420:	2301      	movs	r3, #1
 8014422:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8014426:	e13b      	b.n	80146a0 <create_StepCountMapBack_queue+0x2f4>

		Xcoordinate = popStack_walk(&stack_x);
 8014428:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801442c:	4618      	mov	r0, r3
 801442e:	f000 f97f 	bl	8014730 <popStack_walk>
 8014432:	4603      	mov	r3, r0
 8014434:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8014438:	1d3b      	adds	r3, r7, #4
 801443a:	4618      	mov	r0, r3
 801443c:	f000 f978 	bl	8014730 <popStack_walk>
 8014440:	4603      	mov	r3, r0
 8014442:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014446:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801444a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801444e:	4293      	cmp	r3, r2
 8014450:	f000 812b 	beq.w	80146aa <create_StepCountMapBack_queue+0x2fe>
 8014454:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801445c:	4293      	cmp	r3, r2
 801445e:	f000 8124 	beq.w	80146aa <create_StepCountMapBack_queue+0x2fe>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8014462:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014466:	011b      	lsls	r3, r3, #4
 8014468:	b29a      	uxth	r2, r3
 801446a:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801446e:	4413      	add	r3, r2
 8014470:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8014474:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014478:	2b0e      	cmp	r3, #14
 801447a:	d811      	bhi.n	80144a0 <create_StepCountMapBack_queue+0xf4>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 801447c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014480:	4a8d      	ldr	r2, [pc, #564]	; (80146b8 <create_StepCountMapBack_queue+0x30c>)
 8014482:	330c      	adds	r3, #12
 8014484:	005b      	lsls	r3, r3, #1
 8014486:	4413      	add	r3, r2
 8014488:	88db      	ldrh	r3, [r3, #6]
 801448a:	b21a      	sxth	r2, r3
 801448c:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014490:	2101      	movs	r1, #1
 8014492:	fa01 f303 	lsl.w	r3, r1, r3
 8014496:	b21b      	sxth	r3, r3
 8014498:	4013      	ands	r3, r2
 801449a:	b21b      	sxth	r3, r3
 801449c:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 80144a0:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d012      	beq.n	80144ce <create_StepCountMapBack_queue+0x122>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80144a8:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80144ac:	3b01      	subs	r3, #1
 80144ae:	4a82      	ldr	r2, [pc, #520]	; (80146b8 <create_StepCountMapBack_queue+0x30c>)
 80144b0:	330c      	adds	r3, #12
 80144b2:	005b      	lsls	r3, r3, #1
 80144b4:	4413      	add	r3, r2
 80144b6:	88db      	ldrh	r3, [r3, #6]
 80144b8:	b21a      	sxth	r2, r3
 80144ba:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80144be:	2101      	movs	r1, #1
 80144c0:	fa01 f303 	lsl.w	r3, r1, r3
 80144c4:	b21b      	sxth	r3, r3
 80144c6:	4013      	ands	r3, r2
 80144c8:	b21b      	sxth	r3, r3
 80144ca:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 80144ce:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80144d2:	2b0e      	cmp	r3, #14
 80144d4:	d80f      	bhi.n	80144f6 <create_StepCountMapBack_queue+0x14a>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80144d6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80144da:	4a77      	ldr	r2, [pc, #476]	; (80146b8 <create_StepCountMapBack_queue+0x30c>)
 80144dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144e0:	b21a      	sxth	r2, r3
 80144e2:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80144e6:	2101      	movs	r1, #1
 80144e8:	fa01 f303 	lsl.w	r3, r1, r3
 80144ec:	b21b      	sxth	r3, r3
 80144ee:	4013      	ands	r3, r2
 80144f0:	b21b      	sxth	r3, r3
 80144f2:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 80144f6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d010      	beq.n	8014520 <create_StepCountMapBack_queue+0x174>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80144fe:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014502:	3b01      	subs	r3, #1
 8014504:	4a6c      	ldr	r2, [pc, #432]	; (80146b8 <create_StepCountMapBack_queue+0x30c>)
 8014506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801450a:	b21a      	sxth	r2, r3
 801450c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014510:	2101      	movs	r1, #1
 8014512:	fa01 f303 	lsl.w	r3, r1, r3
 8014516:	b21b      	sxth	r3, r3
 8014518:	4013      	ands	r3, r2
 801451a:	b21b      	sxth	r3, r3
 801451c:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014520:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014524:	3301      	adds	r3, #1
 8014526:	4a63      	ldr	r2, [pc, #396]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 8014528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801452c:	2bff      	cmp	r3, #255	; 0xff
 801452e:	d125      	bne.n	801457c <create_StepCountMapBack_queue+0x1d0>
 8014530:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014534:	2b0f      	cmp	r3, #15
 8014536:	d021      	beq.n	801457c <create_StepCountMapBack_queue+0x1d0>
 8014538:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 801453c:	2b00      	cmp	r3, #0
 801453e:	d11d      	bne.n	801457c <create_StepCountMapBack_queue+0x1d0>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8014540:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014544:	4a5b      	ldr	r2, [pc, #364]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 8014546:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801454a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801454e:	3301      	adds	r3, #1
 8014550:	3201      	adds	r2, #1
 8014552:	b291      	uxth	r1, r2
 8014554:	4a57      	ldr	r2, [pc, #348]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 8014556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801455a:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 801455e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014562:	4611      	mov	r1, r2
 8014564:	4618      	mov	r0, r3
 8014566:	f000 f8b9 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 801456a:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801456e:	3301      	adds	r3, #1
 8014570:	b29a      	uxth	r2, r3
 8014572:	1d3b      	adds	r3, r7, #4
 8014574:	4611      	mov	r1, r2
 8014576:	4618      	mov	r0, r3
 8014578:	f000 f8b0 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 801457c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014580:	3b01      	subs	r3, #1
 8014582:	4a4c      	ldr	r2, [pc, #304]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 8014584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014588:	2bff      	cmp	r3, #255	; 0xff
 801458a:	d125      	bne.n	80145d8 <create_StepCountMapBack_queue+0x22c>
 801458c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014590:	2b00      	cmp	r3, #0
 8014592:	d021      	beq.n	80145d8 <create_StepCountMapBack_queue+0x22c>
 8014594:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8014598:	2b00      	cmp	r3, #0
 801459a:	d11d      	bne.n	80145d8 <create_StepCountMapBack_queue+0x22c>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 801459c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80145a0:	4a44      	ldr	r2, [pc, #272]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 80145a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80145a6:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80145aa:	3b01      	subs	r3, #1
 80145ac:	3201      	adds	r2, #1
 80145ae:	b291      	uxth	r1, r2
 80145b0:	4a40      	ldr	r2, [pc, #256]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 80145b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80145b6:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 80145ba:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80145be:	4611      	mov	r1, r2
 80145c0:	4618      	mov	r0, r3
 80145c2:	f000 f88b 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80145c6:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80145ca:	3b01      	subs	r3, #1
 80145cc:	b29a      	uxth	r2, r3
 80145ce:	1d3b      	adds	r3, r7, #4
 80145d0:	4611      	mov	r1, r2
 80145d2:	4618      	mov	r0, r3
 80145d4:	f000 f882 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80145d8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80145dc:	3310      	adds	r3, #16
 80145de:	4a35      	ldr	r2, [pc, #212]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 80145e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145e4:	2bff      	cmp	r3, #255	; 0xff
 80145e6:	d125      	bne.n	8014634 <create_StepCountMapBack_queue+0x288>
 80145e8:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80145ec:	2b0f      	cmp	r3, #15
 80145ee:	d021      	beq.n	8014634 <create_StepCountMapBack_queue+0x288>
 80145f0:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d11d      	bne.n	8014634 <create_StepCountMapBack_queue+0x288>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 80145f8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80145fc:	4a2d      	ldr	r2, [pc, #180]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 80145fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014602:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014606:	3310      	adds	r3, #16
 8014608:	3201      	adds	r2, #1
 801460a:	b291      	uxth	r1, r2
 801460c:	4a29      	ldr	r2, [pc, #164]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 801460e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014612:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014616:	3301      	adds	r3, #1
 8014618:	b29a      	uxth	r2, r3
 801461a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801461e:	4611      	mov	r1, r2
 8014620:	4618      	mov	r0, r3
 8014622:	f000 f85b 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014626:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801462a:	1d3b      	adds	r3, r7, #4
 801462c:	4611      	mov	r1, r2
 801462e:	4618      	mov	r0, r3
 8014630:	f000 f854 	bl	80146dc <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014634:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014638:	3b10      	subs	r3, #16
 801463a:	4a1e      	ldr	r2, [pc, #120]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 801463c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014640:	2bff      	cmp	r3, #255	; 0xff
 8014642:	d125      	bne.n	8014690 <create_StepCountMapBack_queue+0x2e4>
 8014644:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014648:	2b00      	cmp	r3, #0
 801464a:	d021      	beq.n	8014690 <create_StepCountMapBack_queue+0x2e4>
 801464c:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8014650:	2b00      	cmp	r3, #0
 8014652:	d11d      	bne.n	8014690 <create_StepCountMapBack_queue+0x2e4>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8014654:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014658:	4a16      	ldr	r2, [pc, #88]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 801465a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801465e:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014662:	3b10      	subs	r3, #16
 8014664:	3201      	adds	r2, #1
 8014666:	b291      	uxth	r1, r2
 8014668:	4a12      	ldr	r2, [pc, #72]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 801466a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801466e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014672:	3b01      	subs	r3, #1
 8014674:	b29a      	uxth	r2, r3
 8014676:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801467a:	4611      	mov	r1, r2
 801467c:	4618      	mov	r0, r3
 801467e:	f000 f82d 	bl	80146dc <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014682:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8014686:	1d3b      	adds	r3, r7, #4
 8014688:	4611      	mov	r1, r2
 801468a:	4618      	mov	r0, r3
 801468c:	f000 f826 	bl	80146dc <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8014690:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014694:	4a07      	ldr	r2, [pc, #28]	; (80146b4 <create_StepCountMapBack_queue+0x308>)
 8014696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801469a:	3301      	adds	r3, #1
 801469c:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 80146a0:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 80146a4:	2bfe      	cmp	r3, #254	; 0xfe
 80146a6:	f67f aebf 	bls.w	8014428 <create_StepCountMapBack_queue+0x7c>

		}

}
 80146aa:	bf00      	nop
 80146ac:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	20000d2c 	.word	0x20000d2c
 80146b8:	20000c3c 	.word	0x20000c3c

080146bc <initStack_walk>:




void initStack_walk(STACK_T *stack){
 80146bc:	b480      	push	{r7}
 80146be:	b083      	sub	sp, #12
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2200      	movs	r2, #0
 80146ce:	605a      	str	r2, [r3, #4]
}
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	460b      	mov	r3, r1
 80146e6:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	685a      	ldr	r2, [r3, #4]
 80146ec:	8879      	ldrh	r1, [r7, #2]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	3202      	adds	r2, #2
 80146f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	1c5a      	adds	r2, r3, #1
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8014708:	d102      	bne.n	8014710 <pushStack_walk+0x34>
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2200      	movs	r2, #0
 801470e:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	685a      	ldr	r2, [r3, #4]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d103      	bne.n	8014724 <pushStack_walk+0x48>
    	printf("stack_full\n");
 801471c:	4803      	ldr	r0, [pc, #12]	; (801472c <pushStack_walk+0x50>)
 801471e:	f00b f971 	bl	801fa04 <puts>
        return;
 8014722:	bf00      	nop
    }
}
 8014724:	3708      	adds	r7, #8
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	08022140 	.word	0x08022140

08014730 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014730:	b480      	push	{r7}
 8014732:	b085      	sub	sp, #20
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014738:	2300      	movs	r3, #0
 801473a:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	685a      	ldr	r2, [r3, #4]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	429a      	cmp	r2, r3
 8014746:	d102      	bne.n	801474e <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801474c:	e014      	b.n	8014778 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681a      	ldr	r2, [r3, #0]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	3202      	adds	r2, #2
 8014756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801475a:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	1c5a      	adds	r2, r3, #1
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 801476e:	d102      	bne.n	8014776 <popStack_walk+0x46>
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2200      	movs	r2, #0
 8014774:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014776:	89fb      	ldrh	r3, [r7, #14]
}
 8014778:	4618      	mov	r0, r3
 801477a:	3714      	adds	r7, #20
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr

08014784 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0

	int tt = 14;
 801478a:	230e      	movs	r3, #14
 801478c:	607b      	str	r3, [r7, #4]
	int ss = 0;
 801478e:	2300      	movs	r3, #0
 8014790:	603b      	str	r3, [r7, #0]

	printf(
 8014792:	4881      	ldr	r0, [pc, #516]	; (8014998 <maze_display+0x214>)
 8014794:	f00b f936 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014798:	230e      	movs	r3, #14
 801479a:	607b      	str	r3, [r7, #4]
 801479c:	e06e      	b.n	801487c <maze_display+0xf8>

		printf("|%5d", walk_count[tt + 1]);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	3301      	adds	r3, #1
 80147a2:	4a7e      	ldr	r2, [pc, #504]	; (801499c <maze_display+0x218>)
 80147a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147a8:	4619      	mov	r1, r3
 80147aa:	487d      	ldr	r0, [pc, #500]	; (80149a0 <maze_display+0x21c>)
 80147ac:	f00b f88e 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 80147b0:	2300      	movs	r3, #0
 80147b2:	603b      	str	r3, [r7, #0]
 80147b4:	e030      	b.n	8014818 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80147b6:	4a7b      	ldr	r2, [pc, #492]	; (80149a4 <maze_display+0x220>)
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147be:	4619      	mov	r1, r3
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	3301      	adds	r3, #1
 80147c4:	2201      	movs	r2, #1
 80147c6:	fa02 f303 	lsl.w	r3, r2, r3
 80147ca:	ea01 0203 	and.w	r2, r1, r3
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	3301      	adds	r3, #1
 80147d2:	2101      	movs	r1, #1
 80147d4:	fa01 f303 	lsl.w	r3, r1, r3
 80147d8:	429a      	cmp	r2, r3
 80147da:	d10d      	bne.n	80147f8 <maze_display+0x74>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	1c5a      	adds	r2, r3, #1
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	3301      	adds	r3, #1
 80147e4:	011b      	lsls	r3, r3, #4
 80147e6:	4413      	add	r3, r2
 80147e8:	4a6c      	ldr	r2, [pc, #432]	; (801499c <maze_display+0x218>)
 80147ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147ee:	4619      	mov	r1, r3
 80147f0:	486b      	ldr	r0, [pc, #428]	; (80149a0 <maze_display+0x21c>)
 80147f2:	f00b f86b 	bl	801f8cc <iprintf>
 80147f6:	e00c      	b.n	8014812 <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	3301      	adds	r3, #1
 8014800:	011b      	lsls	r3, r3, #4
 8014802:	4413      	add	r3, r2
 8014804:	4a65      	ldr	r2, [pc, #404]	; (801499c <maze_display+0x218>)
 8014806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801480a:	4619      	mov	r1, r3
 801480c:	4866      	ldr	r0, [pc, #408]	; (80149a8 <maze_display+0x224>)
 801480e:	f00b f85d 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	3301      	adds	r3, #1
 8014816:	603b      	str	r3, [r7, #0]
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	2b0e      	cmp	r3, #14
 801481c:	ddcb      	ble.n	80147b6 <maze_display+0x32>
			}
		}
		printf("|\n");
 801481e:	4863      	ldr	r0, [pc, #396]	; (80149ac <maze_display+0x228>)
 8014820:	f00b f8f0 	bl	801fa04 <puts>
		if (tt <= -1) {
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2b00      	cmp	r3, #0
 8014828:	db2d      	blt.n	8014886 <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801482a:	2300      	movs	r3, #0
 801482c:	603b      	str	r3, [r7, #0]
 801482e:	e01c      	b.n	801486a <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014830:	4a5c      	ldr	r2, [pc, #368]	; (80149a4 <maze_display+0x220>)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	330c      	adds	r3, #12
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	88db      	ldrh	r3, [r3, #6]
 801483c:	4619      	mov	r1, r3
 801483e:	2201      	movs	r2, #1
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	fa02 f303 	lsl.w	r3, r2, r3
 8014846:	ea01 0203 	and.w	r2, r1, r3
 801484a:	2101      	movs	r1, #1
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	fa01 f303 	lsl.w	r3, r1, r3
 8014852:	429a      	cmp	r2, r3
 8014854:	d103      	bne.n	801485e <maze_display+0xda>
				printf("+-----");
 8014856:	4856      	ldr	r0, [pc, #344]	; (80149b0 <maze_display+0x22c>)
 8014858:	f00b f838 	bl	801f8cc <iprintf>
 801485c:	e002      	b.n	8014864 <maze_display+0xe0>
			}else{
				printf("+     ");
 801485e:	4855      	ldr	r0, [pc, #340]	; (80149b4 <maze_display+0x230>)
 8014860:	f00b f834 	bl	801f8cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	3301      	adds	r3, #1
 8014868:	603b      	str	r3, [r7, #0]
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	2b0f      	cmp	r3, #15
 801486e:	dddf      	ble.n	8014830 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014870:	4851      	ldr	r0, [pc, #324]	; (80149b8 <maze_display+0x234>)
 8014872:	f00b f8c7 	bl	801fa04 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	3b01      	subs	r3, #1
 801487a:	607b      	str	r3, [r7, #4]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014882:	da8c      	bge.n	801479e <maze_display+0x1a>
 8014884:	e000      	b.n	8014888 <maze_display+0x104>
			break;
 8014886:	bf00      	nop

	}

	printf(
 8014888:	484c      	ldr	r0, [pc, #304]	; (80149bc <maze_display+0x238>)
 801488a:	f00b f8bb 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801488e:	4842      	ldr	r0, [pc, #264]	; (8014998 <maze_display+0x214>)
 8014890:	f00b f8b8 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014894:	230e      	movs	r3, #14
 8014896:	607b      	str	r3, [r7, #4]
 8014898:	e070      	b.n	801497c <maze_display+0x1f8>
		printf("|%5d", walk_count[tt + 1]);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	3301      	adds	r3, #1
 801489e:	4a3f      	ldr	r2, [pc, #252]	; (801499c <maze_display+0x218>)
 80148a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148a4:	4619      	mov	r1, r3
 80148a6:	483e      	ldr	r0, [pc, #248]	; (80149a0 <maze_display+0x21c>)
 80148a8:	f00b f810 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 80148ac:	2300      	movs	r3, #0
 80148ae:	603b      	str	r3, [r7, #0]
 80148b0:	e032      	b.n	8014918 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80148b2:	4a3c      	ldr	r2, [pc, #240]	; (80149a4 <maze_display+0x220>)
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	331c      	adds	r3, #28
 80148b8:	005b      	lsls	r3, r3, #1
 80148ba:	4413      	add	r3, r2
 80148bc:	889b      	ldrh	r3, [r3, #4]
 80148be:	4619      	mov	r1, r3
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	3301      	adds	r3, #1
 80148c4:	2201      	movs	r2, #1
 80148c6:	fa02 f303 	lsl.w	r3, r2, r3
 80148ca:	ea01 0203 	and.w	r2, r1, r3
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	3301      	adds	r3, #1
 80148d2:	2101      	movs	r1, #1
 80148d4:	fa01 f303 	lsl.w	r3, r1, r3
 80148d8:	429a      	cmp	r2, r3
 80148da:	d10d      	bne.n	80148f8 <maze_display+0x174>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	1c5a      	adds	r2, r3, #1
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	3301      	adds	r3, #1
 80148e4:	011b      	lsls	r3, r3, #4
 80148e6:	4413      	add	r3, r2
 80148e8:	4a2c      	ldr	r2, [pc, #176]	; (801499c <maze_display+0x218>)
 80148ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148ee:	4619      	mov	r1, r3
 80148f0:	482b      	ldr	r0, [pc, #172]	; (80149a0 <maze_display+0x21c>)
 80148f2:	f00a ffeb 	bl	801f8cc <iprintf>
 80148f6:	e00c      	b.n	8014912 <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	1c5a      	adds	r2, r3, #1
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	3301      	adds	r3, #1
 8014900:	011b      	lsls	r3, r3, #4
 8014902:	4413      	add	r3, r2
 8014904:	4a25      	ldr	r2, [pc, #148]	; (801499c <maze_display+0x218>)
 8014906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801490a:	4619      	mov	r1, r3
 801490c:	4826      	ldr	r0, [pc, #152]	; (80149a8 <maze_display+0x224>)
 801490e:	f00a ffdd 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	3301      	adds	r3, #1
 8014916:	603b      	str	r3, [r7, #0]
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	2b0e      	cmp	r3, #14
 801491c:	ddc9      	ble.n	80148b2 <maze_display+0x12e>
			}
		}
		printf("|\n");
 801491e:	4823      	ldr	r0, [pc, #140]	; (80149ac <maze_display+0x228>)
 8014920:	f00b f870 	bl	801fa04 <puts>
		if (tt <= -1) {
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	db2d      	blt.n	8014986 <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801492a:	2300      	movs	r3, #0
 801492c:	603b      	str	r3, [r7, #0]
 801492e:	e01c      	b.n	801496a <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014930:	4a1c      	ldr	r2, [pc, #112]	; (80149a4 <maze_display+0x220>)
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	332c      	adds	r3, #44	; 0x2c
 8014936:	005b      	lsls	r3, r3, #1
 8014938:	4413      	add	r3, r2
 801493a:	885b      	ldrh	r3, [r3, #2]
 801493c:	4619      	mov	r1, r3
 801493e:	2201      	movs	r2, #1
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	fa02 f303 	lsl.w	r3, r2, r3
 8014946:	ea01 0203 	and.w	r2, r1, r3
 801494a:	2101      	movs	r1, #1
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	fa01 f303 	lsl.w	r3, r1, r3
 8014952:	429a      	cmp	r2, r3
 8014954:	d103      	bne.n	801495e <maze_display+0x1da>
				printf("+-----");
 8014956:	4816      	ldr	r0, [pc, #88]	; (80149b0 <maze_display+0x22c>)
 8014958:	f00a ffb8 	bl	801f8cc <iprintf>
 801495c:	e002      	b.n	8014964 <maze_display+0x1e0>
			}else{
				printf("+     ");
 801495e:	4815      	ldr	r0, [pc, #84]	; (80149b4 <maze_display+0x230>)
 8014960:	f00a ffb4 	bl	801f8cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	3301      	adds	r3, #1
 8014968:	603b      	str	r3, [r7, #0]
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	2b0f      	cmp	r3, #15
 801496e:	dddf      	ble.n	8014930 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014970:	4811      	ldr	r0, [pc, #68]	; (80149b8 <maze_display+0x234>)
 8014972:	f00b f847 	bl	801fa04 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	3b01      	subs	r3, #1
 801497a:	607b      	str	r3, [r7, #4]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014982:	da8a      	bge.n	801489a <maze_display+0x116>
 8014984:	e000      	b.n	8014988 <maze_display+0x204>
			break;
 8014986:	bf00      	nop
	}

	printf(
 8014988:	480c      	ldr	r0, [pc, #48]	; (80149bc <maze_display+0x238>)
 801498a:	f00b f83b 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 801498e:	bf00      	nop
 8014990:	3708      	adds	r7, #8
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	0802214c 	.word	0x0802214c
 801499c:	20000d2c 	.word	0x20000d2c
 80149a0:	080221b0 	.word	0x080221b0
 80149a4:	20000c3c 	.word	0x20000c3c
 80149a8:	080221b8 	.word	0x080221b8
 80149ac:	080221c0 	.word	0x080221c0
 80149b0:	080221c4 	.word	0x080221c4
 80149b4:	080221cc 	.word	0x080221cc
 80149b8:	080221d4 	.word	0x080221d4
 80149bc:	080221d8 	.word	0x080221d8

080149c0 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0

	int tt = 14;
 80149c6:	230e      	movs	r3, #14
 80149c8:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80149ca:	2300      	movs	r3, #0
 80149cc:	603b      	str	r3, [r7, #0]

	printf(
 80149ce:	4865      	ldr	r0, [pc, #404]	; (8014b64 <maze_display_Dijkstra+0x1a4>)
 80149d0:	f00b f818 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80149d4:	230e      	movs	r3, #14
 80149d6:	607b      	str	r3, [r7, #4]
 80149d8:	e06a      	b.n	8014ab0 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 80149da:	4863      	ldr	r0, [pc, #396]	; (8014b68 <maze_display_Dijkstra+0x1a8>)
 80149dc:	f00a ff76 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 80149e0:	2300      	movs	r3, #0
 80149e2:	603b      	str	r3, [r7, #0]
 80149e4:	e027      	b.n	8014a36 <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80149e6:	4a61      	ldr	r2, [pc, #388]	; (8014b6c <maze_display_Dijkstra+0x1ac>)
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149ee:	4619      	mov	r1, r3
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	3301      	adds	r3, #1
 80149f4:	2201      	movs	r2, #1
 80149f6:	fa02 f303 	lsl.w	r3, r2, r3
 80149fa:	ea01 0203 	and.w	r2, r1, r3
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	3301      	adds	r3, #1
 8014a02:	2101      	movs	r1, #1
 8014a04:	fa01 f303 	lsl.w	r3, r1, r3
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d103      	bne.n	8014a14 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8014a0c:	4858      	ldr	r0, [pc, #352]	; (8014b70 <maze_display_Dijkstra+0x1b0>)
 8014a0e:	f00a ff5d 	bl	801f8cc <iprintf>
 8014a12:	e00d      	b.n	8014a30 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	1c5a      	adds	r2, r3, #1
 8014a18:	4956      	ldr	r1, [pc, #344]	; (8014b74 <maze_display_Dijkstra+0x1b4>)
 8014a1a:	4613      	mov	r3, r2
 8014a1c:	011b      	lsls	r3, r3, #4
 8014a1e:	1a9b      	subs	r3, r3, r2
 8014a20:	683a      	ldr	r2, [r7, #0]
 8014a22:	4413      	add	r3, r2
 8014a24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a28:	4619      	mov	r1, r3
 8014a2a:	4853      	ldr	r0, [pc, #332]	; (8014b78 <maze_display_Dijkstra+0x1b8>)
 8014a2c:	f00a ff4e 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	3301      	adds	r3, #1
 8014a34:	603b      	str	r3, [r7, #0]
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	2b0e      	cmp	r3, #14
 8014a3a:	ddd4      	ble.n	80149e6 <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8014a3c:	484f      	ldr	r0, [pc, #316]	; (8014b7c <maze_display_Dijkstra+0x1bc>)
 8014a3e:	f00a ffe1 	bl	801fa04 <puts>
		if (tt <= -1) {
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	db38      	blt.n	8014aba <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014a48:	2300      	movs	r3, #0
 8014a4a:	603b      	str	r3, [r7, #0]
 8014a4c:	e027      	b.n	8014a9e <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014a4e:	4a47      	ldr	r2, [pc, #284]	; (8014b6c <maze_display_Dijkstra+0x1ac>)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	330c      	adds	r3, #12
 8014a54:	005b      	lsls	r3, r3, #1
 8014a56:	4413      	add	r3, r2
 8014a58:	88db      	ldrh	r3, [r3, #6]
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	2201      	movs	r2, #1
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	fa02 f303 	lsl.w	r3, r2, r3
 8014a64:	ea01 0203 	and.w	r2, r1, r3
 8014a68:	2101      	movs	r1, #1
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d103      	bne.n	8014a7c <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8014a74:	4842      	ldr	r0, [pc, #264]	; (8014b80 <maze_display_Dijkstra+0x1c0>)
 8014a76:	f00a ff29 	bl	801f8cc <iprintf>
 8014a7a:	e00d      	b.n	8014a98 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014a7c:	493d      	ldr	r1, [pc, #244]	; (8014b74 <maze_display_Dijkstra+0x1b4>)
 8014a7e:	683a      	ldr	r2, [r7, #0]
 8014a80:	4613      	mov	r3, r2
 8014a82:	011b      	lsls	r3, r3, #4
 8014a84:	1a9b      	subs	r3, r3, r2
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	4413      	add	r3, r2
 8014a8a:	33f0      	adds	r3, #240	; 0xf0
 8014a8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a90:	4619      	mov	r1, r3
 8014a92:	483c      	ldr	r0, [pc, #240]	; (8014b84 <maze_display_Dijkstra+0x1c4>)
 8014a94:	f00a ff1a 	bl	801f8cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	603b      	str	r3, [r7, #0]
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	2b0f      	cmp	r3, #15
 8014aa2:	ddd4      	ble.n	8014a4e <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8014aa4:	4838      	ldr	r0, [pc, #224]	; (8014b88 <maze_display_Dijkstra+0x1c8>)
 8014aa6:	f00a ffad 	bl	801fa04 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	3b01      	subs	r3, #1
 8014aae:	607b      	str	r3, [r7, #4]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ab6:	da90      	bge.n	80149da <maze_display_Dijkstra+0x1a>
 8014ab8:	e000      	b.n	8014abc <maze_display_Dijkstra+0xfc>
			break;
 8014aba:	bf00      	nop

	}

	printf(
 8014abc:	4833      	ldr	r0, [pc, #204]	; (8014b8c <maze_display_Dijkstra+0x1cc>)
 8014abe:	f00a ffa1 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014ac2:	4828      	ldr	r0, [pc, #160]	; (8014b64 <maze_display_Dijkstra+0x1a4>)
 8014ac4:	f00a ff9e 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014ac8:	230e      	movs	r3, #14
 8014aca:	607b      	str	r3, [r7, #4]
 8014acc:	e03c      	b.n	8014b48 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 8014ace:	4826      	ldr	r0, [pc, #152]	; (8014b68 <maze_display_Dijkstra+0x1a8>)
 8014ad0:	f00a fefc 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	603b      	str	r3, [r7, #0]
 8014ad8:	e010      	b.n	8014afc <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	1c5a      	adds	r2, r3, #1
 8014ade:	4925      	ldr	r1, [pc, #148]	; (8014b74 <maze_display_Dijkstra+0x1b4>)
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	011b      	lsls	r3, r3, #4
 8014ae4:	1a9b      	subs	r3, r3, r2
 8014ae6:	683a      	ldr	r2, [r7, #0]
 8014ae8:	4413      	add	r3, r2
 8014aea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014aee:	4619      	mov	r1, r3
 8014af0:	4821      	ldr	r0, [pc, #132]	; (8014b78 <maze_display_Dijkstra+0x1b8>)
 8014af2:	f00a feeb 	bl	801f8cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	3301      	adds	r3, #1
 8014afa:	603b      	str	r3, [r7, #0]
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	2b0e      	cmp	r3, #14
 8014b00:	ddeb      	ble.n	8014ada <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 8014b02:	481e      	ldr	r0, [pc, #120]	; (8014b7c <maze_display_Dijkstra+0x1bc>)
 8014b04:	f00a ff7e 	bl	801fa04 <puts>
		if (tt <= -1) {
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	db21      	blt.n	8014b52 <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014b0e:	2300      	movs	r3, #0
 8014b10:	603b      	str	r3, [r7, #0]
 8014b12:	e010      	b.n	8014b36 <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014b14:	4917      	ldr	r1, [pc, #92]	; (8014b74 <maze_display_Dijkstra+0x1b4>)
 8014b16:	683a      	ldr	r2, [r7, #0]
 8014b18:	4613      	mov	r3, r2
 8014b1a:	011b      	lsls	r3, r3, #4
 8014b1c:	1a9b      	subs	r3, r3, r2
 8014b1e:	687a      	ldr	r2, [r7, #4]
 8014b20:	4413      	add	r3, r2
 8014b22:	33f0      	adds	r3, #240	; 0xf0
 8014b24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b28:	4619      	mov	r1, r3
 8014b2a:	4816      	ldr	r0, [pc, #88]	; (8014b84 <maze_display_Dijkstra+0x1c4>)
 8014b2c:	f00a fece 	bl	801f8cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	3301      	adds	r3, #1
 8014b34:	603b      	str	r3, [r7, #0]
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	2b0f      	cmp	r3, #15
 8014b3a:	ddeb      	ble.n	8014b14 <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8014b3c:	4812      	ldr	r0, [pc, #72]	; (8014b88 <maze_display_Dijkstra+0x1c8>)
 8014b3e:	f00a ff61 	bl	801fa04 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	3b01      	subs	r3, #1
 8014b46:	607b      	str	r3, [r7, #4]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b4e:	dabe      	bge.n	8014ace <maze_display_Dijkstra+0x10e>
 8014b50:	e000      	b.n	8014b54 <maze_display_Dijkstra+0x194>
			break;
 8014b52:	bf00      	nop

	}

	printf(
 8014b54:	480d      	ldr	r0, [pc, #52]	; (8014b8c <maze_display_Dijkstra+0x1cc>)
 8014b56:	f00a ff55 	bl	801fa04 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8014b5a:	bf00      	nop
 8014b5c:	3708      	adds	r7, #8
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	0802214c 	.word	0x0802214c
 8014b68:	0802223c 	.word	0x0802223c
 8014b6c:	20000c3c 	.word	0x20000c3c
 8014b70:	08022244 	.word	0x08022244
 8014b74:	20000f2c 	.word	0x20000f2c
 8014b78:	0802224c 	.word	0x0802224c
 8014b7c:	08022254 	.word	0x08022254
 8014b80:	080221c4 	.word	0x080221c4
 8014b84:	0802225c 	.word	0x0802225c
 8014b88:	080221d4 	.word	0x080221d4
 8014b8c:	080221d8 	.word	0x080221d8

08014b90 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	4603      	mov	r3, r0
 8014b98:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8014ba6:	4b71      	ldr	r3, [pc, #452]	; (8014d6c <mode_decision+0x1dc>)
 8014ba8:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8014baa:	79fb      	ldrb	r3, [r7, #7]
 8014bac:	f003 030f 	and.w	r3, r3, #15
 8014bb0:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014bb2:	79fb      	ldrb	r3, [r7, #7]
 8014bb4:	091b      	lsrs	r3, r3, #4
 8014bb6:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014bb8:	7bbb      	ldrb	r3, [r7, #14]
 8014bba:	011b      	lsls	r3, r3, #4
 8014bbc:	b2da      	uxtb	r2, r3
 8014bbe:	7bfb      	ldrb	r3, [r7, #15]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f2 fb51 	bl	800726c <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8014bca:	e07f      	b.n	8014ccc <mode_decision+0x13c>
				HAL_Delay(1);
 8014bcc:	2001      	movs	r0, #1
 8014bce:	f002 ff2b 	bl	8017a28 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8014bd2:	4b67      	ldr	r3, [pc, #412]	; (8014d70 <mode_decision+0x1e0>)
 8014bd4:	edd3 7a00 	vldr	s15, [r3]
 8014bd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8014bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be4:	d813      	bhi.n	8014c0e <mode_decision+0x7e>
					if (main_modeR == 15) {
 8014be6:	7bfb      	ldrb	r3, [r7, #15]
 8014be8:	2b0f      	cmp	r3, #15
 8014bea:	d102      	bne.n	8014bf2 <mode_decision+0x62>
						main_modeR = 0;
 8014bec:	2300      	movs	r3, #0
 8014bee:	73fb      	strb	r3, [r7, #15]
 8014bf0:	e002      	b.n	8014bf8 <mode_decision+0x68>
					} else {
						main_modeR++;
 8014bf2:	7bfb      	ldrb	r3, [r7, #15]
 8014bf4:	3301      	adds	r3, #1
 8014bf6:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014bf8:	f7ec f9d0 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014bfc:	7bbb      	ldrb	r3, [r7, #14]
 8014bfe:	011b      	lsls	r3, r3, #4
 8014c00:	b2da      	uxtb	r2, r3
 8014c02:	7bfb      	ldrb	r3, [r7, #15]
 8014c04:	4413      	add	r3, r2
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7f2 fb2f 	bl	800726c <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8014c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014c12:	eeb1 7a67 	vneg.f32	s14, s15
 8014c16:	4b56      	ldr	r3, [pc, #344]	; (8014d70 <mode_decision+0x1e0>)
 8014c18:	edd3 7a00 	vldr	s15, [r3]
 8014c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c24:	db13      	blt.n	8014c4e <mode_decision+0xbe>
					if (main_modeR == 0) {
 8014c26:	7bfb      	ldrb	r3, [r7, #15]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d102      	bne.n	8014c32 <mode_decision+0xa2>
						main_modeR = 15;
 8014c2c:	230f      	movs	r3, #15
 8014c2e:	73fb      	strb	r3, [r7, #15]
 8014c30:	e002      	b.n	8014c38 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8014c32:	7bfb      	ldrb	r3, [r7, #15]
 8014c34:	3b01      	subs	r3, #1
 8014c36:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014c38:	f7ec f9b0 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014c3c:	7bbb      	ldrb	r3, [r7, #14]
 8014c3e:	011b      	lsls	r3, r3, #4
 8014c40:	b2da      	uxtb	r2, r3
 8014c42:	7bfb      	ldrb	r3, [r7, #15]
 8014c44:	4413      	add	r3, r2
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7f2 fb0f 	bl	800726c <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8014c4e:	4b49      	ldr	r3, [pc, #292]	; (8014d74 <mode_decision+0x1e4>)
 8014c50:	edd3 7a00 	vldr	s15, [r3]
 8014c54:	ed97 7a02 	vldr	s14, [r7, #8]
 8014c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c60:	d813      	bhi.n	8014c8a <mode_decision+0xfa>
					if (main_modeL == 15) {
 8014c62:	7bbb      	ldrb	r3, [r7, #14]
 8014c64:	2b0f      	cmp	r3, #15
 8014c66:	d102      	bne.n	8014c6e <mode_decision+0xde>
						main_modeL = 0;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	73bb      	strb	r3, [r7, #14]
 8014c6c:	e002      	b.n	8014c74 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8014c6e:	7bbb      	ldrb	r3, [r7, #14]
 8014c70:	3301      	adds	r3, #1
 8014c72:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014c74:	f7ec f992 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014c78:	7bbb      	ldrb	r3, [r7, #14]
 8014c7a:	011b      	lsls	r3, r3, #4
 8014c7c:	b2da      	uxtb	r2, r3
 8014c7e:	7bfb      	ldrb	r3, [r7, #15]
 8014c80:	4413      	add	r3, r2
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7f2 faf1 	bl	800726c <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8014c8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8014c8e:	eeb1 7a67 	vneg.f32	s14, s15
 8014c92:	4b38      	ldr	r3, [pc, #224]	; (8014d74 <mode_decision+0x1e4>)
 8014c94:	edd3 7a00 	vldr	s15, [r3]
 8014c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca0:	da00      	bge.n	8014ca4 <mode_decision+0x114>
 8014ca2:	e013      	b.n	8014ccc <mode_decision+0x13c>
					if (main_modeL == 0) {
 8014ca4:	7bbb      	ldrb	r3, [r7, #14]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d102      	bne.n	8014cb0 <mode_decision+0x120>
						main_modeL = 15;
 8014caa:	230f      	movs	r3, #15
 8014cac:	73bb      	strb	r3, [r7, #14]
 8014cae:	e002      	b.n	8014cb6 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8014cb0:	7bbb      	ldrb	r3, [r7, #14]
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014cb6:	f7ec f971 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014cba:	7bbb      	ldrb	r3, [r7, #14]
 8014cbc:	011b      	lsls	r3, r3, #4
 8014cbe:	b2da      	uxtb	r2, r3
 8014cc0:	7bfb      	ldrb	r3, [r7, #15]
 8014cc2:	4413      	add	r3, r2
 8014cc4:	b2db      	uxtb	r3, r3
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7f2 fad0 	bl	800726c <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8014ccc:	4b2a      	ldr	r3, [pc, #168]	; (8014d78 <mode_decision+0x1e8>)
 8014cce:	edd3 7a00 	vldr	s15, [r3]
 8014cd2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8014d7c <mode_decision+0x1ec>
 8014cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cde:	f67f af75 	bls.w	8014bcc <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8014ce2:	f7f2 fa89 	bl	80071f8 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8014ce6:	2001      	movs	r0, #1
 8014ce8:	f7f2 fb70 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014cec:	2001      	movs	r0, #1
 8014cee:	f7f2 fb7f 	bl	80073f0 <pl_l_blue_LED>
			HAL_Delay(1000);
 8014cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014cf6:	f002 fe97 	bl	8017a28 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014cfa:	e011      	b.n	8014d20 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8014cfc:	4b1e      	ldr	r3, [pc, #120]	; (8014d78 <mode_decision+0x1e8>)
 8014cfe:	edd3 7a00 	vldr	s15, [r3]
 8014d02:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8014d7c <mode_decision+0x1ec>
 8014d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0e:	db04      	blt.n	8014d1a <mode_decision+0x18a>
					main_modeL = 0;
 8014d10:	2300      	movs	r3, #0
 8014d12:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8014d14:	2300      	movs	r3, #0
 8014d16:	73fb      	strb	r3, [r7, #15]
					break;
 8014d18:	e013      	b.n	8014d42 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	f002 fe84 	bl	8017a28 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014d20:	4b17      	ldr	r3, [pc, #92]	; (8014d80 <mode_decision+0x1f0>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d28:	dde8      	ble.n	8014cfc <mode_decision+0x16c>
 8014d2a:	4b15      	ldr	r3, [pc, #84]	; (8014d80 <mode_decision+0x1f0>)
 8014d2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014d30:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d34:	dde2      	ble.n	8014cfc <mode_decision+0x16c>
 8014d36:	4b12      	ldr	r3, [pc, #72]	; (8014d80 <mode_decision+0x1f0>)
 8014d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014d3c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d40:	dddc      	ble.n	8014cfc <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8014d42:	2000      	movs	r0, #0
 8014d44:	f7f2 fb42 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014d48:	2000      	movs	r0, #0
 8014d4a:	f7f2 fb51 	bl	80073f0 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8014d4e:	f7f2 fa53 	bl	80071f8 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8014d52:	7bbb      	ldrb	r3, [r7, #14]
 8014d54:	011b      	lsls	r3, r3, #4
 8014d56:	b25a      	sxtb	r2, r3
 8014d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d5c:	4313      	orrs	r3, r2
 8014d5e:	b25b      	sxtb	r3, r3
 8014d60:	737b      	strb	r3, [r7, #13]

return main_mode;
 8014d62:	7b7b      	ldrb	r3, [r7, #13]
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3710      	adds	r7, #16
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	41200000 	.word	0x41200000
 8014d70:	20000224 	.word	0x20000224
 8014d74:	20000220 	.word	0x20000220
 8014d78:	20000270 	.word	0x20000270
 8014d7c:	43c80000 	.word	0x43c80000
 8014d80:	200002b8 	.word	0x200002b8

08014d84 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8014d84:	b590      	push	{r4, r7, lr}
 8014d86:	b0d7      	sub	sp, #348	; 0x15c
 8014d88:	af52      	add	r7, sp, #328	; 0x148
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014d92:	2300      	movs	r3, #0
 8014d94:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8014d96:	79fb      	ldrb	r3, [r7, #7]
 8014d98:	f003 030f 	and.w	r3, r3, #15
 8014d9c:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014d9e:	79fb      	ldrb	r3, [r7, #7]
 8014da0:	091b      	lsrs	r3, r3, #4
 8014da2:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8014da4:	7bbb      	ldrb	r3, [r7, #14]
 8014da6:	2b0f      	cmp	r3, #15
 8014da8:	d854      	bhi.n	8014e54 <mode_execution+0xd0>
 8014daa:	a201      	add	r2, pc, #4	; (adr r2, 8014db0 <mode_execution+0x2c>)
 8014dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014db0:	08014df1 	.word	0x08014df1
 8014db4:	08014dfb 	.word	0x08014dfb
 8014db8:	08014e53 	.word	0x08014e53
 8014dbc:	08014e05 	.word	0x08014e05
 8014dc0:	08014e0f 	.word	0x08014e0f
 8014dc4:	08014e19 	.word	0x08014e19
 8014dc8:	08014e49 	.word	0x08014e49
 8014dcc:	08014e53 	.word	0x08014e53
 8014dd0:	08014e53 	.word	0x08014e53
 8014dd4:	08014e53 	.word	0x08014e53
 8014dd8:	08014e53 	.word	0x08014e53
 8014ddc:	08014e53 	.word	0x08014e53
 8014de0:	08014e53 	.word	0x08014e53
 8014de4:	08014e53 	.word	0x08014e53
 8014de8:	08014e53 	.word	0x08014e53
 8014dec:	08014e53 	.word	0x08014e53
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8014df0:	7bfb      	ldrb	r3, [r7, #15]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f000 f836 	bl	8014e64 <mode_PLtest>
	break;
 8014df8:	e02c      	b.n	8014e54 <mode_execution+0xd0>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8014dfa:	7bfb      	ldrb	r3, [r7, #15]
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f000 f9a9 	bl	8015154 <mode_Running>
	break;
 8014e02:	e027      	b.n	8014e54 <mode_execution+0xd0>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8014e04:	7bfb      	ldrb	r3, [r7, #15]
 8014e06:	4618      	mov	r0, r3
 8014e08:	f000 fada 	bl	80153c0 <mode_Tuning0>
	break;
 8014e0c:	e022      	b.n	8014e54 <mode_execution+0xd0>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8014e0e:	7bfb      	ldrb	r3, [r7, #15]
 8014e10:	4618      	mov	r0, r3
 8014e12:	f000 fd85 	bl	8015920 <mode_WallSensorTuning>
	break;
 8014e16:	e01d      	b.n	8014e54 <mode_execution+0xd0>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8014e18:	7bfb      	ldrb	r3, [r7, #15]
 8014e1a:	4c10      	ldr	r4, [pc, #64]	; (8014e5c <mode_execution+0xd8>)
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	9251      	str	r2, [sp, #324]	; 0x144
 8014e20:	2200      	movs	r2, #0
 8014e22:	9250      	str	r2, [sp, #320]	; 0x140
 8014e24:	2201      	movs	r2, #1
 8014e26:	924f      	str	r2, [sp, #316]	; 0x13c
 8014e28:	934e      	str	r3, [sp, #312]	; 0x138
 8014e2a:	4668      	mov	r0, sp
 8014e2c:	f104 0310 	add.w	r3, r4, #16
 8014e30:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014e34:	4619      	mov	r1, r3
 8014e36:	f00a f8c9 	bl	801efcc <memcpy>
 8014e3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014e3e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014e60 <mode_execution+0xdc>
 8014e42:	f7f9 f8ad 	bl	800dfa0 <testturning>
	break;
 8014e46:	e005      	b.n	8014e54 <mode_execution+0xd0>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8014e48:	7bfb      	ldrb	r3, [r7, #15]
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f000 ffa6 	bl	8015d9c <mode_WallSensorTuning_fast>
	break;
 8014e50:	e000      	b.n	8014e54 <mode_execution+0xd0>
	break;
 8014e52:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8014e54:	bf00      	nop
 8014e56:	3714      	adds	r7, #20
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd90      	pop	{r4, r7, pc}
 8014e5c:	2000ddbc 	.word	0x2000ddbc
 8014e60:	3f028f5c 	.word	0x3f028f5c

08014e64 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8014e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014e68:	b090      	sub	sp, #64	; 0x40
 8014e6a:	af0a      	add	r7, sp, #40	; 0x28
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	75fb      	strb	r3, [r7, #23]

	switch (main_modeR) {
 8014e70:	7dfb      	ldrb	r3, [r7, #23]
 8014e72:	2b0f      	cmp	r3, #15
 8014e74:	f200 815c 	bhi.w	8015130 <mode_PLtest+0x2cc>
 8014e78:	a201      	add	r2, pc, #4	; (adr r2, 8014e80 <mode_PLtest+0x1c>)
 8014e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e7e:	bf00      	nop
 8014e80:	0801512f 	.word	0x0801512f
 8014e84:	08014ec1 	.word	0x08014ec1
 8014e88:	08014ef3 	.word	0x08014ef3
 8014e8c:	08014f6f 	.word	0x08014f6f
 8014e90:	08014fd3 	.word	0x08014fd3
 8014e94:	08015053 	.word	0x08015053
 8014e98:	08015131 	.word	0x08015131
 8014e9c:	08015131 	.word	0x08015131
 8014ea0:	08015131 	.word	0x08015131
 8014ea4:	08015059 	.word	0x08015059
 8014ea8:	080150c1 	.word	0x080150c1
 8014eac:	08015131 	.word	0x08015131
 8014eb0:	08015131 	.word	0x08015131
 8014eb4:	08015131 	.word	0x08015131
 8014eb8:	08015131 	.word	0x08015131
 8014ebc:	08015129 	.word	0x08015129
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014ec0:	4b9e      	ldr	r3, [pc, #632]	; (801513c <mode_PLtest+0x2d8>)
 8014ec2:	6819      	ldr	r1, [r3, #0]
 8014ec4:	4b9d      	ldr	r3, [pc, #628]	; (801513c <mode_PLtest+0x2d8>)
 8014ec6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014ec8:	4b9c      	ldr	r3, [pc, #624]	; (801513c <mode_PLtest+0x2d8>)
 8014eca:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8014ece:	4b9b      	ldr	r3, [pc, #620]	; (801513c <mode_PLtest+0x2d8>)
 8014ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014ed4:	4a99      	ldr	r2, [pc, #612]	; (801513c <mode_PLtest+0x2d8>)
 8014ed6:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8014eda:	9201      	str	r2, [sp, #4]
 8014edc:	9300      	str	r3, [sp, #0]
 8014ede:	4623      	mov	r3, r4
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	4897      	ldr	r0, [pc, #604]	; (8015140 <mode_PLtest+0x2dc>)
 8014ee4:	f00a fcf2 	bl	801f8cc <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8014ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014eec:	f7f3 f9fc 	bl	80082e8 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014ef0:	e7e6      	b.n	8014ec0 <mode_PLtest+0x5c>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8014ef2:	2001      	movs	r0, #1
 8014ef4:	f7f2 fa6a 	bl	80073cc <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014ef8:	2001      	movs	r0, #1
 8014efa:	f7f2 fa79 	bl	80073f0 <pl_l_blue_LED>
		record_mode = 1;
 8014efe:	4b91      	ldr	r3, [pc, #580]	; (8015144 <mode_PLtest+0x2e0>)
 8014f00:	2201      	movs	r2, #1
 8014f02:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8014f04:	f44f 7161 	mov.w	r1, #900	; 0x384
 8014f08:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014f0c:	f7f2 ff8e 	bl	8007e2c <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8014f10:	2001      	movs	r0, #1
 8014f12:	f7f2 ff49 	bl	8007da8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8014f16:	2001      	movs	r0, #1
 8014f18:	f7f2 ff1e 	bl	8007d58 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8014f1c:	f7f2 ff6a 	bl	8007df4 <pl_DriveMotor_start>
		wait_ms(2500);
 8014f20:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014f24:	f7f3 f9e0 	bl	80082e8 <wait_ms>
		pl_DriveMotor_stop();
 8014f28:	f7f2 ff72 	bl	8007e10 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014f2c:	2000      	movs	r0, #0
 8014f2e:	f7f2 fa4d 	bl	80073cc <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014f32:	2000      	movs	r0, #0
 8014f34:	f7f2 fa5c 	bl	80073f0 <pl_l_blue_LED>
		record_mode = 0;
 8014f38:	4b82      	ldr	r3, [pc, #520]	; (8015144 <mode_PLtest+0x2e0>)
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014f3e:	e002      	b.n	8014f46 <mode_PLtest+0xe2>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014f40:	2001      	movs	r0, #1
 8014f42:	f7f3 f9d1 	bl	80082e8 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014f46:	4b7d      	ldr	r3, [pc, #500]	; (801513c <mode_PLtest+0x2d8>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014f4e:	ddf7      	ble.n	8014f40 <mode_PLtest+0xdc>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014f50:	4b7a      	ldr	r3, [pc, #488]	; (801513c <mode_PLtest+0x2d8>)
 8014f52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014f56:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014f5a:	ddf1      	ble.n	8014f40 <mode_PLtest+0xdc>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014f5c:	4b77      	ldr	r3, [pc, #476]	; (801513c <mode_PLtest+0x2d8>)
 8014f5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014f62:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014f66:	ddeb      	ble.n	8014f40 <mode_PLtest+0xdc>
		}
		record_print();
 8014f68:	f001 f982 	bl	8016270 <record_print>
		break;
 8014f6c:	e0e0      	b.n	8015130 <mode_PLtest+0x2cc>
	case 0b0011:	//gyro
		reset_gyro();
 8014f6e:	f7ec fc47 	bl	8001800 <reset_gyro>
		reset_speed();
 8014f72:	f7ec f851 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8014f76:	2001      	movs	r0, #1
 8014f78:	f7f2 fa28 	bl	80073cc <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014f7c:	2001      	movs	r0, #1
 8014f7e:	f7f2 fa37 	bl	80073f0 <pl_l_blue_LED>
		record_mode = 2;
 8014f82:	4b70      	ldr	r3, [pc, #448]	; (8015144 <mode_PLtest+0x2e0>)
 8014f84:	2202      	movs	r2, #2
 8014f86:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8014f88:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014f8c:	f7f3 f9ac 	bl	80082e8 <wait_ms>
		pl_r_blue_LED(OFF);
 8014f90:	2000      	movs	r0, #0
 8014f92:	f7f2 fa1b 	bl	80073cc <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014f96:	2000      	movs	r0, #0
 8014f98:	f7f2 fa2a 	bl	80073f0 <pl_l_blue_LED>
		record_mode = 0;
 8014f9c:	4b69      	ldr	r3, [pc, #420]	; (8015144 <mode_PLtest+0x2e0>)
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014fa2:	e002      	b.n	8014faa <mode_PLtest+0x146>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014fa4:	2001      	movs	r0, #1
 8014fa6:	f7f3 f99f 	bl	80082e8 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014faa:	4b64      	ldr	r3, [pc, #400]	; (801513c <mode_PLtest+0x2d8>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014fb2:	ddf7      	ble.n	8014fa4 <mode_PLtest+0x140>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014fb4:	4b61      	ldr	r3, [pc, #388]	; (801513c <mode_PLtest+0x2d8>)
 8014fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014fba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014fbe:	ddf1      	ble.n	8014fa4 <mode_PLtest+0x140>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014fc0:	4b5e      	ldr	r3, [pc, #376]	; (801513c <mode_PLtest+0x2d8>)
 8014fc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014fc6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014fca:	ddeb      	ble.n	8014fa4 <mode_PLtest+0x140>
		}
		record_print();
 8014fcc:	f001 f950 	bl	8016270 <record_print>
		break;
 8014fd0:	e0ae      	b.n	8015130 <mode_PLtest+0x2cc>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014fd2:	4b5d      	ldr	r3, [pc, #372]	; (8015148 <mode_PLtest+0x2e4>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7eb fade 	bl	8000598 <__aeabi_f2d>
 8014fdc:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014fe0:	4b59      	ldr	r3, [pc, #356]	; (8015148 <mode_PLtest+0x2e4>)
 8014fe2:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7eb fad7 	bl	8000598 <__aeabi_f2d>
 8014fea:	4604      	mov	r4, r0
 8014fec:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014fee:	4b56      	ldr	r3, [pc, #344]	; (8015148 <mode_PLtest+0x2e4>)
 8014ff0:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7eb fad0 	bl	8000598 <__aeabi_f2d>
 8014ff8:	4680      	mov	r8, r0
 8014ffa:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014ffc:	4b52      	ldr	r3, [pc, #328]	; (8015148 <mode_PLtest+0x2e4>)
 8014ffe:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015000:	4618      	mov	r0, r3
 8015002:	f7eb fac9 	bl	8000598 <__aeabi_f2d>
 8015006:	4682      	mov	sl, r0
 8015008:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801500a:	4b4f      	ldr	r3, [pc, #316]	; (8015148 <mode_PLtest+0x2e4>)
 801500c:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801500e:	4618      	mov	r0, r3
 8015010:	f7eb fac2 	bl	8000598 <__aeabi_f2d>
 8015014:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015018:	4b4b      	ldr	r3, [pc, #300]	; (8015148 <mode_PLtest+0x2e4>)
 801501a:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801501c:	4618      	mov	r0, r3
 801501e:	f7eb fabb 	bl	8000598 <__aeabi_f2d>
 8015022:	4602      	mov	r2, r0
 8015024:	460b      	mov	r3, r1
 8015026:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801502a:	ed97 7b00 	vldr	d7, [r7]
 801502e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015032:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015036:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801503a:	e9cd 4500 	strd	r4, r5, [sp]
 801503e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015042:	4842      	ldr	r0, [pc, #264]	; (801514c <mode_PLtest+0x2e8>)
 8015044:	f00a fc42 	bl	801f8cc <iprintf>
			wait_ms(500);
 8015048:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801504c:	f7f3 f94c 	bl	80082e8 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015050:	e7bf      	b.n	8014fd2 <mode_PLtest+0x16e>
		}
	break;
	case 0b0101:
		test_flash();
 8015052:	f7f2 fb0b 	bl	800766c <test_flash>
		break;
 8015056:	e06b      	b.n	8015130 <mode_PLtest+0x2cc>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8015058:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801505c:	f7f2 ff10 	bl	8007e80 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015060:	f7f2 fefa 	bl	8007e58 <pl_FunMotor_start>
			HAL_Delay(2000);
 8015064:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015068:	f002 fcde 	bl	8017a28 <HAL_Delay>
			reset_gyro();
 801506c:	f7ec fbc8 	bl	8001800 <reset_gyro>
			reset_speed();
 8015070:	f7eb ffd2 	bl	8001018 <reset_speed>
			clear_Ierror();
 8015074:	f7ef fd5e 	bl	8004b34 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015078:	2001      	movs	r0, #1
 801507a:	f7f2 f9a7 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801507e:	2001      	movs	r0, #1
 8015080:	f7f2 f9b6 	bl	80073f0 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015084:	e002      	b.n	801508c <mode_PLtest+0x228>
				HAL_Delay(1);
 8015086:	2001      	movs	r0, #1
 8015088:	f002 fcce 	bl	8017a28 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801508c:	4b2b      	ldr	r3, [pc, #172]	; (801513c <mode_PLtest+0x2d8>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015094:	ddf7      	ble.n	8015086 <mode_PLtest+0x222>
 8015096:	4b29      	ldr	r3, [pc, #164]	; (801513c <mode_PLtest+0x2d8>)
 8015098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801509c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80150a0:	ddf1      	ble.n	8015086 <mode_PLtest+0x222>
 80150a2:	4b26      	ldr	r3, [pc, #152]	; (801513c <mode_PLtest+0x2d8>)
 80150a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80150a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80150ac:	ddeb      	ble.n	8015086 <mode_PLtest+0x222>
			}
			pl_r_blue_LED(OFF);
 80150ae:	2000      	movs	r0, #0
 80150b0:	f7f2 f98c 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80150b4:	2000      	movs	r0, #0
 80150b6:	f7f2 f99b 	bl	80073f0 <pl_l_blue_LED>
			pl_FunMotor_stop();
 80150ba:	f7f2 fed7 	bl	8007e6c <pl_FunMotor_stop>
		break;
 80150be:	e037      	b.n	8015130 <mode_PLtest+0x2cc>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 80150c0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8015150 <mode_PLtest+0x2ec>
 80150c4:	f7f2 fedc 	bl	8007e80 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80150c8:	f7f2 fec6 	bl	8007e58 <pl_FunMotor_start>
			HAL_Delay(2000);
 80150cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80150d0:	f002 fcaa 	bl	8017a28 <HAL_Delay>
			reset_gyro();
 80150d4:	f7ec fb94 	bl	8001800 <reset_gyro>
			reset_speed();
 80150d8:	f7eb ff9e 	bl	8001018 <reset_speed>
			clear_Ierror();
 80150dc:	f7ef fd2a 	bl	8004b34 <clear_Ierror>
			pl_r_blue_LED(ON);
 80150e0:	2001      	movs	r0, #1
 80150e2:	f7f2 f973 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80150e6:	2001      	movs	r0, #1
 80150e8:	f7f2 f982 	bl	80073f0 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80150ec:	e002      	b.n	80150f4 <mode_PLtest+0x290>
				HAL_Delay(1);
 80150ee:	2001      	movs	r0, #1
 80150f0:	f002 fc9a 	bl	8017a28 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80150f4:	4b11      	ldr	r3, [pc, #68]	; (801513c <mode_PLtest+0x2d8>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80150fc:	ddf7      	ble.n	80150ee <mode_PLtest+0x28a>
 80150fe:	4b0f      	ldr	r3, [pc, #60]	; (801513c <mode_PLtest+0x2d8>)
 8015100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015104:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015108:	ddf1      	ble.n	80150ee <mode_PLtest+0x28a>
 801510a:	4b0c      	ldr	r3, [pc, #48]	; (801513c <mode_PLtest+0x2d8>)
 801510c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015110:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015114:	ddeb      	ble.n	80150ee <mode_PLtest+0x28a>
			}
			pl_r_blue_LED(OFF);
 8015116:	2000      	movs	r0, #0
 8015118:	f7f2 f958 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801511c:	2000      	movs	r0, #0
 801511e:	f7f2 f967 	bl	80073f0 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015122:	f7f2 fea3 	bl	8007e6c <pl_FunMotor_stop>
		break;
 8015126:	e003      	b.n	8015130 <mode_PLtest+0x2cc>
	case 0b1111:	//record_out
		record_print();
 8015128:	f001 f8a2 	bl	8016270 <record_print>
		break;
 801512c:	e000      	b.n	8015130 <mode_PLtest+0x2cc>
		break;
 801512e:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8015130:	bf00      	nop
 8015132:	3718      	adds	r7, #24
 8015134:	46bd      	mov	sp, r7
 8015136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801513a:	bf00      	nop
 801513c:	200002b8 	.word	0x200002b8
 8015140:	08022264 	.word	0x08022264
 8015144:	2000d96c 	.word	0x2000d96c
 8015148:	200006e4 	.word	0x200006e4
 801514c:	08022290 	.word	0x08022290
 8015150:	3f7d70a4 	.word	0x3f7d70a4

08015154 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8015154:	b590      	push	{r4, r7, lr}
 8015156:	b0d7      	sub	sp, #348	; 0x15c
 8015158:	af54      	add	r7, sp, #336	; 0x150
 801515a:	4603      	mov	r3, r0
 801515c:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801515e:	2003      	movs	r0, #3
 8015160:	f7f2 fdfa 	bl	8007d58 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015164:	2003      	movs	r0, #3
 8015166:	f7f2 fe1f 	bl	8007da8 <pl_R_DriveMotor_mode>
	reset_gyro();
 801516a:	f7ec fb49 	bl	8001800 <reset_gyro>
	reset_speed();
 801516e:	f7eb ff53 	bl	8001018 <reset_speed>
	reset_distance();
 8015172:	f7eb ff13 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015176:	f7ef fcdd 	bl	8004b34 <clear_Ierror>
	switch (main_modeR) {
 801517a:	79fb      	ldrb	r3, [r7, #7]
 801517c:	2b0f      	cmp	r3, #15
 801517e:	f200 8100 	bhi.w	8015382 <mode_Running+0x22e>
 8015182:	a201      	add	r2, pc, #4	; (adr r2, 8015188 <mode_Running+0x34>)
 8015184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015188:	080151c9 	.word	0x080151c9
 801518c:	080151e7 	.word	0x080151e7
 8015190:	0801521f 	.word	0x0801521f
 8015194:	08015225 	.word	0x08015225
 8015198:	0801525d 	.word	0x0801525d
 801519c:	0801528f 	.word	0x0801528f
 80151a0:	080152c1 	.word	0x080152c1
 80151a4:	080152f3 	.word	0x080152f3
 80151a8:	08015325 	.word	0x08015325
 80151ac:	0801532b 	.word	0x0801532b
 80151b0:	08015331 	.word	0x08015331
 80151b4:	08015337 	.word	0x08015337
 80151b8:	0801533d 	.word	0x0801533d
 80151bc:	08015343 	.word	0x08015343
 80151c0:	08015349 	.word	0x08015349
 80151c4:	0801534f 	.word	0x0801534f
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 80151c8:	f7fe ff3a 	bl	8014040 <create_StepCountMap_queue>
			maze_display();
 80151cc:	f7ff fada 	bl	8014784 <maze_display>

			create_DijkstraMap();
 80151d0:	f7fc fb0a 	bl	80117e8 <create_DijkstraMap>
			maze_display_Dijkstra();
 80151d4:	f7ff fbf4 	bl	80149c0 <maze_display_Dijkstra>

			route_Dijkstra();
 80151d8:	f7fe f890 	bl	80132fc <route_Dijkstra>
			create_StepCountMap_unknown();
 80151dc:	f7fe fd64 	bl	8013ca8 <create_StepCountMap_unknown>
			maze_display();
 80151e0:	f7ff fad0 	bl	8014784 <maze_display>
//			}
//			float tim1 = toc_timer();
//			maze_display();
//			maze_display_Dijkstra();
//			printf("tim1=%f,tim2=%f\n", tim1, tim2);
		break;
 80151e4:	e0cd      	b.n	8015382 <mode_Running+0x22e>
		case 0b0001://足立法(遅い)
			tic_timer();
 80151e6:	f7f3 f86d 	bl	80082c4 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 80151ea:	4c68      	ldr	r4, [pc, #416]	; (801538c <mode_Running+0x238>)
 80151ec:	2300      	movs	r3, #0
 80151ee:	934f      	str	r3, [sp, #316]	; 0x13c
 80151f0:	2301      	movs	r3, #1
 80151f2:	934e      	str	r3, [sp, #312]	; 0x138
 80151f4:	4668      	mov	r0, sp
 80151f6:	f104 0310 	add.w	r3, r4, #16
 80151fa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80151fe:	4619      	mov	r1, r3
 8015200:	f009 fee4 	bl	801efcc <memcpy>
 8015204:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015208:	eddf 1a61 	vldr	s3, [pc, #388]	; 8015390 <mode_Running+0x23c>
 801520c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8015394 <mode_Running+0x240>
 8015210:	eddf 0a61 	vldr	s1, [pc, #388]	; 8015398 <mode_Running+0x244>
 8015214:	ed9f 0a61 	vldr	s0, [pc, #388]	; 801539c <mode_Running+0x248>
 8015218:	f7f9 f87c 	bl	800e314 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 801521c:	e0b1      	b.n	8015382 <mode_Running+0x22e>
		case 0b0010://Flashから
			record_out();
 801521e:	f7f2 fb43 	bl	80078a8 <record_out>
		break;
 8015222:	e0ae      	b.n	8015382 <mode_Running+0x22e>
		case 0b0011://ゴミ
			tic_timer();
 8015224:	f7f3 f84e 	bl	80082c4 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015228:	4c58      	ldr	r4, [pc, #352]	; (801538c <mode_Running+0x238>)
 801522a:	2301      	movs	r3, #1
 801522c:	934f      	str	r3, [sp, #316]	; 0x13c
 801522e:	2301      	movs	r3, #1
 8015230:	934e      	str	r3, [sp, #312]	; 0x138
 8015232:	4668      	mov	r0, sp
 8015234:	f104 0310 	add.w	r3, r4, #16
 8015238:	f44f 729c 	mov.w	r2, #312	; 0x138
 801523c:	4619      	mov	r1, r3
 801523e:	f009 fec5 	bl	801efcc <memcpy>
 8015242:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015246:	eddf 1a52 	vldr	s3, [pc, #328]	; 8015390 <mode_Running+0x23c>
 801524a:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8015394 <mode_Running+0x240>
 801524e:	eddf 0a52 	vldr	s1, [pc, #328]	; 8015398 <mode_Running+0x244>
 8015252:	ed9f 0a52 	vldr	s0, [pc, #328]	; 801539c <mode_Running+0x248>
 8015256:	f7f9 f85d 	bl	800e314 <AdatiWayReturn>
		break;
 801525a:	e092      	b.n	8015382 <mode_Running+0x22e>
		case 0b0100://ゴミ
			record_out();
 801525c:	f7f2 fb24 	bl	80078a8 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8015260:	2300      	movs	r3, #0
 8015262:	9352      	str	r3, [sp, #328]	; 0x148
 8015264:	4a4e      	ldr	r2, [pc, #312]	; (80153a0 <mode_Running+0x24c>)
 8015266:	466b      	mov	r3, sp
 8015268:	4611      	mov	r1, r2
 801526a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801526e:	4618      	mov	r0, r3
 8015270:	f009 feac 	bl	801efcc <memcpy>
 8015274:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80153a4 <mode_Running+0x250>
 8015278:	2300      	movs	r3, #0
 801527a:	2200      	movs	r2, #0
 801527c:	2100      	movs	r1, #0
 801527e:	2000      	movs	r0, #0
 8015280:	eddf 0a43 	vldr	s1, [pc, #268]	; 8015390 <mode_Running+0x23c>
 8015284:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80153a8 <mode_Running+0x254>
 8015288:	f7f9 ffea 	bl	800f260 <run_shortest>
		break;
 801528c:	e079      	b.n	8015382 <mode_Running+0x22e>
		case 0b0101://
			record_out();
 801528e:	f7f2 fb0b 	bl	80078a8 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8015292:	2301      	movs	r3, #1
 8015294:	9352      	str	r3, [sp, #328]	; 0x148
 8015296:	4a45      	ldr	r2, [pc, #276]	; (80153ac <mode_Running+0x258>)
 8015298:	466b      	mov	r3, sp
 801529a:	4611      	mov	r1, r2
 801529c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80152a0:	4618      	mov	r0, r3
 80152a2:	f009 fe93 	bl	801efcc <memcpy>
 80152a6:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80153a4 <mode_Running+0x250>
 80152aa:	2300      	movs	r3, #0
 80152ac:	2200      	movs	r2, #0
 80152ae:	2101      	movs	r1, #1
 80152b0:	2000      	movs	r0, #0
 80152b2:	eddf 0a37 	vldr	s1, [pc, #220]	; 8015390 <mode_Running+0x23c>
 80152b6:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80153a8 <mode_Running+0x254>
 80152ba:	f7f9 ffd1 	bl	800f260 <run_shortest>
		break;
 80152be:	e060      	b.n	8015382 <mode_Running+0x22e>
		case 0b0110://吸引なしで斜め走行
			record_out();
 80152c0:	f7f2 faf2 	bl	80078a8 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 80152c4:	2301      	movs	r3, #1
 80152c6:	9352      	str	r3, [sp, #328]	; 0x148
 80152c8:	4a38      	ldr	r2, [pc, #224]	; (80153ac <mode_Running+0x258>)
 80152ca:	466b      	mov	r3, sp
 80152cc:	4611      	mov	r1, r2
 80152ce:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80152d2:	4618      	mov	r0, r3
 80152d4:	f009 fe7a 	bl	801efcc <memcpy>
 80152d8:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80153a4 <mode_Running+0x250>
 80152dc:	2301      	movs	r3, #1
 80152de:	2200      	movs	r2, #0
 80152e0:	2101      	movs	r1, #1
 80152e2:	2000      	movs	r0, #0
 80152e4:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8015390 <mode_Running+0x23c>
 80152e8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80153a8 <mode_Running+0x254>
 80152ec:	f7f9 ffb8 	bl	800f260 <run_shortest>
		break;
 80152f0:	e047      	b.n	8015382 <mode_Running+0x22e>
		case 0b0111://吸引ありで斜め走行
			record_out();
 80152f2:	f7f2 fad9 	bl	80078a8 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed600_shortest_mollifier,0.99,1);
 80152f6:	2301      	movs	r3, #1
 80152f8:	9352      	str	r3, [sp, #328]	; 0x148
 80152fa:	4a2c      	ldr	r2, [pc, #176]	; (80153ac <mode_Running+0x258>)
 80152fc:	466b      	mov	r3, sp
 80152fe:	4611      	mov	r1, r2
 8015300:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015304:	4618      	mov	r0, r3
 8015306:	f009 fe61 	bl	801efcc <memcpy>
 801530a:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80153b0 <mode_Running+0x25c>
 801530e:	2301      	movs	r3, #1
 8015310:	2201      	movs	r2, #1
 8015312:	2101      	movs	r1, #1
 8015314:	2000      	movs	r0, #0
 8015316:	eddf 0a27 	vldr	s1, [pc, #156]	; 80153b4 <mode_Running+0x260>
 801531a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8015390 <mode_Running+0x23c>
 801531e:	f7f9 ff9f 	bl	800f260 <run_shortest>
		break;
 8015322:	e02e      	b.n	8015382 <mode_Running+0x22e>
		case 0b1000://
			record_out();
 8015324:	f7f2 fac0 	bl	80078a8 <record_out>
			//run_shortest(2000,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed500_shortest,0.3,0);
		break;
 8015328:	e02b      	b.n	8015382 <mode_Running+0x22e>
		case 0b1001:
			record_out();
 801532a:	f7f2 fabd 	bl	80078a8 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 801532e:	e028      	b.n	8015382 <mode_Running+0x22e>
		case 0b1010:
			record_out();
 8015330:	f7f2 faba 	bl	80078a8 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015334:	e025      	b.n	8015382 <mode_Running+0x22e>
		case 0b1011:
			record_out();
 8015336:	f7f2 fab7 	bl	80078a8 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 801533a:	e022      	b.n	8015382 <mode_Running+0x22e>
		case 0b1100:
			record_out();
 801533c:	f7f2 fab4 	bl	80078a8 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015340:	e01f      	b.n	8015382 <mode_Running+0x22e>
		case 0b1101:
			record_out();
 8015342:	f7f2 fab1 	bl	80078a8 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015346:	e01c      	b.n	8015382 <mode_Running+0x22e>
		case 0b1110:
			record_out();
 8015348:	f7f2 faae 	bl	80078a8 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 801534c:	e019      	b.n	8015382 <mode_Running+0x22e>
		case 0b1111:
			AdatiWayReturn(500,400,5000,3000,speed300_exploration,0,0);
 801534e:	4c0f      	ldr	r4, [pc, #60]	; (801538c <mode_Running+0x238>)
 8015350:	2300      	movs	r3, #0
 8015352:	934f      	str	r3, [sp, #316]	; 0x13c
 8015354:	2300      	movs	r3, #0
 8015356:	934e      	str	r3, [sp, #312]	; 0x138
 8015358:	4668      	mov	r0, sp
 801535a:	f104 0310 	add.w	r3, r4, #16
 801535e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015362:	4619      	mov	r1, r3
 8015364:	f009 fe32 	bl	801efcc <memcpy>
 8015368:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801536c:	eddf 1a08 	vldr	s3, [pc, #32]	; 8015390 <mode_Running+0x23c>
 8015370:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80153b8 <mode_Running+0x264>
 8015374:	eddf 0a08 	vldr	s1, [pc, #32]	; 8015398 <mode_Running+0x244>
 8015378:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80153bc <mode_Running+0x268>
 801537c:	f7f8 ffca 	bl	800e314 <AdatiWayReturn>
		break;
 8015380:	bf00      	nop
	}


}
 8015382:	bf00      	nop
 8015384:	370c      	adds	r7, #12
 8015386:	46bd      	mov	sp, r7
 8015388:	bd90      	pop	{r4, r7, pc}
 801538a:	bf00      	nop
 801538c:	2000db2c 	.word	0x2000db2c
 8015390:	453b8000 	.word	0x453b8000
 8015394:	44fa0000 	.word	0x44fa0000
 8015398:	43c80000 	.word	0x43c80000
 801539c:	43960000 	.word	0x43960000
 80153a0:	2000dc74 	.word	0x2000dc74
 80153a4:	3e99999a 	.word	0x3e99999a
 80153a8:	447a0000 	.word	0x447a0000
 80153ac:	2000ddbc 	.word	0x2000ddbc
 80153b0:	3f7d70a4 	.word	0x3f7d70a4
 80153b4:	461c4000 	.word	0x461c4000
 80153b8:	459c4000 	.word	0x459c4000
 80153bc:	43fa0000 	.word	0x43fa0000

080153c0 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 80153c0:	b590      	push	{r4, r7, lr}
 80153c2:	b0d7      	sub	sp, #348	; 0x15c
 80153c4:	af52      	add	r7, sp, #328	; 0x148
 80153c6:	4603      	mov	r3, r0
 80153c8:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80153ca:	2300      	movs	r3, #0
 80153cc:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 80153ce:	2300      	movs	r3, #0
 80153d0:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 80153d2:	2300      	movs	r3, #0
 80153d4:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 80153d6:	2300      	movs	r3, #0
 80153d8:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80153da:	2003      	movs	r0, #3
 80153dc:	f7f2 fcbc 	bl	8007d58 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80153e0:	2003      	movs	r0, #3
 80153e2:	f7f2 fce1 	bl	8007da8 <pl_R_DriveMotor_mode>
	reset_gyro();
 80153e6:	f7ec fa0b 	bl	8001800 <reset_gyro>
	reset_speed();
 80153ea:	f7eb fe15 	bl	8001018 <reset_speed>
	reset_distance();
 80153ee:	f7eb fdd5 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80153f2:	f7ef fb9f 	bl	8004b34 <clear_Ierror>

	switch (main_modeR) {
 80153f6:	79fb      	ldrb	r3, [r7, #7]
 80153f8:	2b0f      	cmp	r3, #15
 80153fa:	f200 8241 	bhi.w	8015880 <mode_Tuning0+0x4c0>
 80153fe:	a201      	add	r2, pc, #4	; (adr r2, 8015404 <mode_Tuning0+0x44>)
 8015400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015404:	08015445 	.word	0x08015445
 8015408:	080154cf 	.word	0x080154cf
 801540c:	080154f5 	.word	0x080154f5
 8015410:	0801551b 	.word	0x0801551b
 8015414:	0801554b 	.word	0x0801554b
 8015418:	0801557b 	.word	0x0801557b
 801541c:	080155a1 	.word	0x080155a1
 8015420:	080155c7 	.word	0x080155c7
 8015424:	080155ed 	.word	0x080155ed
 8015428:	08015611 	.word	0x08015611
 801542c:	08015691 	.word	0x08015691
 8015430:	08015711 	.word	0x08015711
 8015434:	08015737 	.word	0x08015737
 8015438:	08015769 	.word	0x08015769
 801543c:	080157e5 	.word	0x080157e5
 8015440:	08015835 	.word	0x08015835
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015444:	4bd0      	ldr	r3, [pc, #832]	; (8015788 <mode_Tuning0+0x3c8>)
 8015446:	2203      	movs	r2, #3
 8015448:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801544a:	2300      	movs	r3, #0
 801544c:	723b      	strb	r3, [r7, #8]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 801544e:	68b8      	ldr	r0, [r7, #8]
 8015450:	ed9f 2ace 	vldr	s4, [pc, #824]	; 801578c <mode_Tuning0+0x3cc>
 8015454:	eddf 1ace 	vldr	s3, [pc, #824]	; 8015790 <mode_Tuning0+0x3d0>
 8015458:	ed9f 1ace 	vldr	s2, [pc, #824]	; 8015794 <mode_Tuning0+0x3d4>
 801545c:	eddf 0acd 	vldr	s1, [pc, #820]	; 8015794 <mode_Tuning0+0x3d4>
 8015460:	ed9f 0acd 	vldr	s0, [pc, #820]	; 8015798 <mode_Tuning0+0x3d8>
 8015464:	f7ed fe1e 	bl	80030a4 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015468:	ed9f 2acc 	vldr	s4, [pc, #816]	; 801579c <mode_Tuning0+0x3dc>
 801546c:	eddf 1acc 	vldr	s3, [pc, #816]	; 80157a0 <mode_Tuning0+0x3e0>
 8015470:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 8015794 <mode_Tuning0+0x3d4>
 8015474:	eddf 0ac7 	vldr	s1, [pc, #796]	; 8015794 <mode_Tuning0+0x3d4>
 8015478:	ed9f 0aca 	vldr	s0, [pc, #808]	; 80157a4 <mode_Tuning0+0x3e4>
 801547c:	f7ee fb20 	bl	8003ac0 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015480:	68b8      	ldr	r0, [r7, #8]
 8015482:	ed9f 2ac9 	vldr	s4, [pc, #804]	; 80157a8 <mode_Tuning0+0x3e8>
 8015486:	eddf 1ac9 	vldr	s3, [pc, #804]	; 80157ac <mode_Tuning0+0x3ec>
 801548a:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8015794 <mode_Tuning0+0x3d4>
 801548e:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8015794 <mode_Tuning0+0x3d4>
 8015492:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8015798 <mode_Tuning0+0x3d8>
 8015496:	f7ed fe05 	bl	80030a4 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 801549a:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 801579c <mode_Tuning0+0x3dc>
 801549e:	eddf 1ac0 	vldr	s3, [pc, #768]	; 80157a0 <mode_Tuning0+0x3e0>
 80154a2:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8015794 <mode_Tuning0+0x3d4>
 80154a6:	eddf 0abb 	vldr	s1, [pc, #748]	; 8015794 <mode_Tuning0+0x3d4>
 80154aa:	ed9f 0abe 	vldr	s0, [pc, #760]	; 80157a4 <mode_Tuning0+0x3e4>
 80154ae:	f7ee fb07 	bl	8003ac0 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 80154b2:	68b8      	ldr	r0, [r7, #8]
 80154b4:	ed9f 2abe 	vldr	s4, [pc, #760]	; 80157b0 <mode_Tuning0+0x3f0>
 80154b8:	eddf 1abe 	vldr	s3, [pc, #760]	; 80157b4 <mode_Tuning0+0x3f4>
 80154bc:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 8015794 <mode_Tuning0+0x3d4>
 80154c0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 8015794 <mode_Tuning0+0x3d4>
 80154c4:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8015798 <mode_Tuning0+0x3d8>
 80154c8:	f7ed fdec 	bl	80030a4 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 80154cc:	e1d8      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 80154ce:	4bae      	ldr	r3, [pc, #696]	; (8015788 <mode_Tuning0+0x3c8>)
 80154d0:	2205      	movs	r2, #5
 80154d2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80154d4:	2300      	movs	r3, #0
 80154d6:	723b      	strb	r3, [r7, #8]
			straight_table2(400, 0, 0, 400, 3000,mode);
 80154d8:	68b8      	ldr	r0, [r7, #8]
 80154da:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 80157b8 <mode_Tuning0+0x3f8>
 80154de:	eddf 1ab0 	vldr	s3, [pc, #704]	; 80157a0 <mode_Tuning0+0x3e0>
 80154e2:	ed9f 1aac 	vldr	s2, [pc, #688]	; 8015794 <mode_Tuning0+0x3d4>
 80154e6:	eddf 0aab 	vldr	s1, [pc, #684]	; 8015794 <mode_Tuning0+0x3d4>
 80154ea:	ed9f 0aad 	vldr	s0, [pc, #692]	; 80157a0 <mode_Tuning0+0x3e0>
 80154ee:	f7ed fdd9 	bl	80030a4 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 80154f2:	e1c5      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 2://壁制御
			record_mode=6;
 80154f4:	4ba4      	ldr	r3, [pc, #656]	; (8015788 <mode_Tuning0+0x3c8>)
 80154f6:	2206      	movs	r2, #6
 80154f8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80154fa:	2301      	movs	r3, #1
 80154fc:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 80154fe:	68b8      	ldr	r0, [r7, #8]
 8015500:	ed9f 2aae 	vldr	s4, [pc, #696]	; 80157bc <mode_Tuning0+0x3fc>
 8015504:	eddf 1aae 	vldr	s3, [pc, #696]	; 80157c0 <mode_Tuning0+0x400>
 8015508:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8015794 <mode_Tuning0+0x3d4>
 801550c:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8015794 <mode_Tuning0+0x3d4>
 8015510:	ed9f 0aac 	vldr	s0, [pc, #688]	; 80157c4 <mode_Tuning0+0x404>
 8015514:	f7ed fdc6 	bl	80030a4 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015518:	e1b2      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 801551a:	4cab      	ldr	r4, [pc, #684]	; (80157c8 <mode_Tuning0+0x408>)
 801551c:	2300      	movs	r3, #0
 801551e:	9351      	str	r3, [sp, #324]	; 0x144
 8015520:	2300      	movs	r3, #0
 8015522:	9350      	str	r3, [sp, #320]	; 0x140
 8015524:	2300      	movs	r3, #0
 8015526:	934f      	str	r3, [sp, #316]	; 0x13c
 8015528:	2300      	movs	r3, #0
 801552a:	934e      	str	r3, [sp, #312]	; 0x138
 801552c:	4668      	mov	r0, sp
 801552e:	f104 0310 	add.w	r3, r4, #16
 8015532:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015536:	4619      	mov	r1, r3
 8015538:	f009 fd48 	bl	801efcc <memcpy>
 801553c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015540:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8015794 <mode_Tuning0+0x3d4>
 8015544:	f7f8 fd2c 	bl	800dfa0 <testturning>
		break;
 8015548:	e19a      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 801554a:	4c9f      	ldr	r4, [pc, #636]	; (80157c8 <mode_Tuning0+0x408>)
 801554c:	2300      	movs	r3, #0
 801554e:	9351      	str	r3, [sp, #324]	; 0x144
 8015550:	2300      	movs	r3, #0
 8015552:	9350      	str	r3, [sp, #320]	; 0x140
 8015554:	2300      	movs	r3, #0
 8015556:	934f      	str	r3, [sp, #316]	; 0x13c
 8015558:	2301      	movs	r3, #1
 801555a:	934e      	str	r3, [sp, #312]	; 0x138
 801555c:	4668      	mov	r0, sp
 801555e:	f104 0310 	add.w	r3, r4, #16
 8015562:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015566:	4619      	mov	r1, r3
 8015568:	f009 fd30 	bl	801efcc <memcpy>
 801556c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015570:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8015794 <mode_Tuning0+0x3d4>
 8015574:	f7f8 fd14 	bl	800dfa0 <testturning>
		break;
 8015578:	e182      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 5://直進(制御なし)
			record_mode=7;
 801557a:	4b83      	ldr	r3, [pc, #524]	; (8015788 <mode_Tuning0+0x3c8>)
 801557c:	2207      	movs	r2, #7
 801557e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015580:	2300      	movs	r3, #0
 8015582:	723b      	strb	r3, [r7, #8]
			straight_table2(180, 0, 0, 300, 6000,mode);
 8015584:	68b8      	ldr	r0, [r7, #8]
 8015586:	ed9f 2a8d 	vldr	s4, [pc, #564]	; 80157bc <mode_Tuning0+0x3fc>
 801558a:	eddf 1a8d 	vldr	s3, [pc, #564]	; 80157c0 <mode_Tuning0+0x400>
 801558e:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8015794 <mode_Tuning0+0x3d4>
 8015592:	eddf 0a80 	vldr	s1, [pc, #512]	; 8015794 <mode_Tuning0+0x3d4>
 8015596:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80157a4 <mode_Tuning0+0x3e4>
 801559a:	f7ed fd83 	bl	80030a4 <straight_table2>
		break;
 801559e:	e16f      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 80155a0:	4b79      	ldr	r3, [pc, #484]	; (8015788 <mode_Tuning0+0x3c8>)
 80155a2:	2207      	movs	r2, #7
 80155a4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80155a6:	2300      	movs	r3, #0
 80155a8:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 80155aa:	68b8      	ldr	r0, [r7, #8]
 80155ac:	ed9f 2a83 	vldr	s4, [pc, #524]	; 80157bc <mode_Tuning0+0x3fc>
 80155b0:	eddf 1a86 	vldr	s3, [pc, #536]	; 80157cc <mode_Tuning0+0x40c>
 80155b4:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8015794 <mode_Tuning0+0x3d4>
 80155b8:	eddf 0a76 	vldr	s1, [pc, #472]	; 8015794 <mode_Tuning0+0x3d4>
 80155bc:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80157d0 <mode_Tuning0+0x410>
 80155c0:	f7ed fd70 	bl	80030a4 <straight_table2>
		break;
 80155c4:	e15c      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 80155c6:	4b70      	ldr	r3, [pc, #448]	; (8015788 <mode_Tuning0+0x3c8>)
 80155c8:	2207      	movs	r2, #7
 80155ca:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80155cc:	2303      	movs	r3, #3
 80155ce:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 80155d0:	68b8      	ldr	r0, [r7, #8]
 80155d2:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 80157bc <mode_Tuning0+0x3fc>
 80155d6:	eddf 1a75 	vldr	s3, [pc, #468]	; 80157ac <mode_Tuning0+0x3ec>
 80155da:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8015794 <mode_Tuning0+0x3d4>
 80155de:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8015794 <mode_Tuning0+0x3d4>
 80155e2:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80157d0 <mode_Tuning0+0x410>
 80155e6:	f7ed fd5d 	bl	80030a4 <straight_table2>
		break;
 80155ea:	e149      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 8://宴会芸
			record_mode=2;
 80155ec:	4b66      	ldr	r3, [pc, #408]	; (8015788 <mode_Tuning0+0x3c8>)
 80155ee:	2202      	movs	r2, #2
 80155f0:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80155f2:	2001      	movs	r0, #1
 80155f4:	f7f1 feea 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80155f8:	2001      	movs	r0, #1
 80155fa:	f7f1 fef9 	bl	80073f0 <pl_l_blue_LED>
			no_angle();
 80155fe:	f7ee fc73 	bl	8003ee8 <no_angle>
			pl_r_blue_LED(OFF);
 8015602:	2000      	movs	r0, #0
 8015604:	f7f1 fee2 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015608:	2000      	movs	r0, #0
 801560a:	f7f1 fef1 	bl	80073f0 <pl_l_blue_LED>
		break;
 801560e:	e137      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 9://システム同定enc
			record_mode=6;
 8015610:	4b5d      	ldr	r3, [pc, #372]	; (8015788 <mode_Tuning0+0x3c8>)
 8015612:	2206      	movs	r2, #6
 8015614:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015616:	2001      	movs	r0, #1
 8015618:	f7f1 fed8 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801561c:	2001      	movs	r0, #1
 801561e:	f7f1 fee7 	bl	80073f0 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 8015622:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 80157cc <mode_Tuning0+0x40c>
 8015626:	eddf 1a66 	vldr	s3, [pc, #408]	; 80157c0 <mode_Tuning0+0x400>
 801562a:	ed9f 1a65 	vldr	s2, [pc, #404]	; 80157c0 <mode_Tuning0+0x400>
 801562e:	eddf 0a59 	vldr	s1, [pc, #356]	; 8015794 <mode_Tuning0+0x3d4>
 8015632:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80157d4 <mode_Tuning0+0x414>
 8015636:	f7ee fd87 	bl	8004148 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 801563a:	ed9f 2a67 	vldr	s4, [pc, #412]	; 80157d8 <mode_Tuning0+0x418>
 801563e:	eddf 1a67 	vldr	s3, [pc, #412]	; 80157dc <mode_Tuning0+0x41c>
 8015642:	ed9f 1a66 	vldr	s2, [pc, #408]	; 80157dc <mode_Tuning0+0x41c>
 8015646:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80157c0 <mode_Tuning0+0x400>
 801564a:	ed9f 0a62 	vldr	s0, [pc, #392]	; 80157d4 <mode_Tuning0+0x414>
 801564e:	f7ee fd7b 	bl	8004148 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 8015652:	ed9f 2a61 	vldr	s4, [pc, #388]	; 80157d8 <mode_Tuning0+0x418>
 8015656:	eddf 1a61 	vldr	s3, [pc, #388]	; 80157dc <mode_Tuning0+0x41c>
 801565a:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80157c0 <mode_Tuning0+0x400>
 801565e:	eddf 0a5f 	vldr	s1, [pc, #380]	; 80157dc <mode_Tuning0+0x41c>
 8015662:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80157d4 <mode_Tuning0+0x414>
 8015666:	f7ee fd6f 	bl	8004148 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 801566a:	ed9f 2a58 	vldr	s4, [pc, #352]	; 80157cc <mode_Tuning0+0x40c>
 801566e:	eddf 1a54 	vldr	s3, [pc, #336]	; 80157c0 <mode_Tuning0+0x400>
 8015672:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8015794 <mode_Tuning0+0x3d4>
 8015676:	eddf 0a52 	vldr	s1, [pc, #328]	; 80157c0 <mode_Tuning0+0x400>
 801567a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80157d4 <mode_Tuning0+0x414>
 801567e:	f7ee fd63 	bl	8004148 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 8015682:	2000      	movs	r0, #0
 8015684:	f7f1 fea2 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015688:	2000      	movs	r0, #0
 801568a:	f7f1 feb1 	bl	80073f0 <pl_l_blue_LED>
		break;
 801568e:	e0f7      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 10://システム同定gyro
			record_mode=2;
 8015690:	4b3d      	ldr	r3, [pc, #244]	; (8015788 <mode_Tuning0+0x3c8>)
 8015692:	2202      	movs	r2, #2
 8015694:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015696:	2001      	movs	r0, #1
 8015698:	f7f1 fe98 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801569c:	2001      	movs	r0, #1
 801569e:	f7f1 fea7 	bl	80073f0 <pl_l_blue_LED>
			turning_table_ff(90, 0, 300, 300, 500);
 80156a2:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 80157cc <mode_Tuning0+0x40c>
 80156a6:	eddf 1a46 	vldr	s3, [pc, #280]	; 80157c0 <mode_Tuning0+0x400>
 80156aa:	ed9f 1a45 	vldr	s2, [pc, #276]	; 80157c0 <mode_Tuning0+0x400>
 80156ae:	eddf 0a39 	vldr	s1, [pc, #228]	; 8015794 <mode_Tuning0+0x3d4>
 80156b2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80157d4 <mode_Tuning0+0x414>
 80156b6:	f7ee fe7f 	bl	80043b8 <turning_table_ff>
			turning_table_ff(90, 300, 600, 600, 1500);
 80156ba:	ed9f 2a47 	vldr	s4, [pc, #284]	; 80157d8 <mode_Tuning0+0x418>
 80156be:	eddf 1a47 	vldr	s3, [pc, #284]	; 80157dc <mode_Tuning0+0x41c>
 80156c2:	ed9f 1a46 	vldr	s2, [pc, #280]	; 80157dc <mode_Tuning0+0x41c>
 80156c6:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80157c0 <mode_Tuning0+0x400>
 80156ca:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80157d4 <mode_Tuning0+0x414>
 80156ce:	f7ee fe73 	bl	80043b8 <turning_table_ff>
			turning_table_ff(90, 600, 300, 600, 1500);
 80156d2:	ed9f 2a41 	vldr	s4, [pc, #260]	; 80157d8 <mode_Tuning0+0x418>
 80156d6:	eddf 1a41 	vldr	s3, [pc, #260]	; 80157dc <mode_Tuning0+0x41c>
 80156da:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80157c0 <mode_Tuning0+0x400>
 80156de:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80157dc <mode_Tuning0+0x41c>
 80156e2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80157d4 <mode_Tuning0+0x414>
 80156e6:	f7ee fe67 	bl	80043b8 <turning_table_ff>
			turning_table_ff(90, 300, 0, 300, 500);
 80156ea:	ed9f 2a38 	vldr	s4, [pc, #224]	; 80157cc <mode_Tuning0+0x40c>
 80156ee:	eddf 1a34 	vldr	s3, [pc, #208]	; 80157c0 <mode_Tuning0+0x400>
 80156f2:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8015794 <mode_Tuning0+0x3d4>
 80156f6:	eddf 0a32 	vldr	s1, [pc, #200]	; 80157c0 <mode_Tuning0+0x400>
 80156fa:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80157d4 <mode_Tuning0+0x414>
 80156fe:	f7ee fe5b 	bl	80043b8 <turning_table_ff>
//					record_mode=0;
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 8015702:	2000      	movs	r0, #0
 8015704:	f7f1 fe62 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015708:	2000      	movs	r0, #0
 801570a:	f7f1 fe71 	bl	80073f0 <pl_l_blue_LED>
		break;
 801570e:	e0b7      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 11:
		record_mode=1;
 8015710:	4b1d      	ldr	r3, [pc, #116]	; (8015788 <mode_Tuning0+0x3c8>)
 8015712:	2201      	movs	r2, #1
 8015714:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8015716:	2300      	movs	r3, #0
 8015718:	723b      	strb	r3, [r7, #8]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 801571a:	68b8      	ldr	r0, [r7, #8]
 801571c:	ed9f 2a27 	vldr	s4, [pc, #156]	; 80157bc <mode_Tuning0+0x3fc>
 8015720:	eddf 1a27 	vldr	s3, [pc, #156]	; 80157c0 <mode_Tuning0+0x400>
 8015724:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8015794 <mode_Tuning0+0x3d4>
 8015728:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015794 <mode_Tuning0+0x3d4>
 801572c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80157e0 <mode_Tuning0+0x420>
 8015730:	f7ed fcb8 	bl	80030a4 <straight_table2>
		break;
 8015734:	e0a4      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 12:
		record_mode=17;
 8015736:	4b14      	ldr	r3, [pc, #80]	; (8015788 <mode_Tuning0+0x3c8>)
 8015738:	2211      	movs	r2, #17
 801573a:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 801573c:	2300      	movs	r3, #0
 801573e:	60fb      	str	r3, [r7, #12]
 8015740:	e00e      	b.n	8015760 <mode_Tuning0+0x3a0>
		turning_table2(90, 0, 0, 400, 3000);
 8015742:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 80157b8 <mode_Tuning0+0x3f8>
 8015746:	eddf 1a16 	vldr	s3, [pc, #88]	; 80157a0 <mode_Tuning0+0x3e0>
 801574a:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8015794 <mode_Tuning0+0x3d4>
 801574e:	eddf 0a11 	vldr	s1, [pc, #68]	; 8015794 <mode_Tuning0+0x3d4>
 8015752:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80157d4 <mode_Tuning0+0x414>
 8015756:	f7ee f9b3 	bl	8003ac0 <turning_table2>
		for(int i=0;i<40;i++){
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	3301      	adds	r3, #1
 801575e:	60fb      	str	r3, [r7, #12]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2b27      	cmp	r3, #39	; 0x27
 8015764:	dded      	ble.n	8015742 <mode_Tuning0+0x382>
		}
		break;
 8015766:	e08b      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 13:
			pl_r_blue_LED(ON);
 8015768:	2001      	movs	r0, #1
 801576a:	f7f1 fe2f 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801576e:	2001      	movs	r0, #1
 8015770:	f7f1 fe3e 	bl	80073f0 <pl_l_blue_LED>
			no_frontwall_straight();
 8015774:	f7ee fca0 	bl	80040b8 <no_frontwall_straight>
			pl_r_blue_LED(OFF);
 8015778:	2000      	movs	r0, #0
 801577a:	f7f1 fe27 	bl	80073cc <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801577e:	2000      	movs	r0, #0
 8015780:	f7f1 fe36 	bl	80073f0 <pl_l_blue_LED>
		break;
 8015784:	e07c      	b.n	8015880 <mode_Tuning0+0x4c0>
 8015786:	bf00      	nop
 8015788:	2000d96c 	.word	0x2000d96c
 801578c:	464b2000 	.word	0x464b2000
 8015790:	44c80000 	.word	0x44c80000
 8015794:	00000000 	.word	0x00000000
 8015798:	44070000 	.word	0x44070000
 801579c:	457a0000 	.word	0x457a0000
 80157a0:	43c80000 	.word	0x43c80000
 80157a4:	43340000 	.word	0x43340000
 80157a8:	466a6000 	.word	0x466a6000
 80157ac:	44fa0000 	.word	0x44fa0000
 80157b0:	469c4000 	.word	0x469c4000
 80157b4:	45160000 	.word	0x45160000
 80157b8:	453b8000 	.word	0x453b8000
 80157bc:	45bb8000 	.word	0x45bb8000
 80157c0:	43960000 	.word	0x43960000
 80157c4:	44340000 	.word	0x44340000
 80157c8:	2000db2c 	.word	0x2000db2c
 80157cc:	43fa0000 	.word	0x43fa0000
 80157d0:	443eeb39 	.word	0x443eeb39
 80157d4:	42b40000 	.word	0x42b40000
 80157d8:	44bb8000 	.word	0x44bb8000
 80157dc:	44160000 	.word	0x44160000
 80157e0:	420a0000 	.word	0x420a0000
		case 14://宴会芸＋吸引
			highspeed_mode = 1;
 80157e4:	4b43      	ldr	r3, [pc, #268]	; (80158f4 <mode_Tuning0+0x534>)
 80157e6:	2201      	movs	r2, #1
 80157e8:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 80157ea:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80158f8 <mode_Tuning0+0x538>
 80157ee:	f7f2 fb47 	bl	8007e80 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80157f2:	f7f2 fb31 	bl	8007e58 <pl_FunMotor_start>
			HAL_Delay(600);
 80157f6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80157fa:	f002 f915 	bl	8017a28 <HAL_Delay>
			reset_gyro();
 80157fe:	f7eb ffff 	bl	8001800 <reset_gyro>
			reset_speed();
 8015802:	f7eb fc09 	bl	8001018 <reset_speed>
			reset_distance();
 8015806:	f7eb fbc9 	bl	8000f9c <reset_distance>
			clear_Ierror();
 801580a:	f7ef f993 	bl	8004b34 <clear_Ierror>
			record_mode=3;
 801580e:	4b3b      	ldr	r3, [pc, #236]	; (80158fc <mode_Tuning0+0x53c>)
 8015810:	2203      	movs	r2, #3
 8015812:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8015814:	2301      	movs	r3, #1
 8015816:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 3000, 12000,mode);
 8015818:	68b8      	ldr	r0, [r7, #8]
 801581a:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8015900 <mode_Tuning0+0x540>
 801581e:	eddf 1a39 	vldr	s3, [pc, #228]	; 8015904 <mode_Tuning0+0x544>
 8015822:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015908 <mode_Tuning0+0x548>
 8015826:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015908 <mode_Tuning0+0x548>
 801582a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801590c <mode_Tuning0+0x54c>
 801582e:	f7ed fc39 	bl	80030a4 <straight_table2>
		break;
 8015832:	e025      	b.n	8015880 <mode_Tuning0+0x4c0>
		case 15:
			highspeed_mode = 1;
 8015834:	4b2f      	ldr	r3, [pc, #188]	; (80158f4 <mode_Tuning0+0x534>)
 8015836:	2201      	movs	r2, #1
 8015838:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 801583a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8015910 <mode_Tuning0+0x550>
 801583e:	f7f2 fb1f 	bl	8007e80 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 8015842:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015846:	f002 f8ef 	bl	8017a28 <HAL_Delay>
						reset_gyro();
 801584a:	f7eb ffd9 	bl	8001800 <reset_gyro>
						reset_speed();
 801584e:	f7eb fbe3 	bl	8001018 <reset_speed>
						reset_distance();
 8015852:	f7eb fba3 	bl	8000f9c <reset_distance>
						clear_Ierror();
 8015856:	f7ef f96d 	bl	8004b34 <clear_Ierror>
						record_mode=3;
 801585a:	4b28      	ldr	r3, [pc, #160]	; (80158fc <mode_Tuning0+0x53c>)
 801585c:	2203      	movs	r2, #3
 801585e:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 8015860:	2301      	movs	r3, #1
 8015862:	723b      	strb	r3, [r7, #8]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 8015864:	68b8      	ldr	r0, [r7, #8]
 8015866:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 8015914 <mode_Tuning0+0x554>
 801586a:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8015918 <mode_Tuning0+0x558>
 801586e:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8015908 <mode_Tuning0+0x548>
 8015872:	eddf 0a25 	vldr	s1, [pc, #148]	; 8015908 <mode_Tuning0+0x548>
 8015876:	ed9f 0a25 	vldr	s0, [pc, #148]	; 801590c <mode_Tuning0+0x54c>
 801587a:	f7ed fc13 	bl	80030a4 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 801587e:	bf00      	nop
	}
	record_mode=0;
 8015880:	4b1e      	ldr	r3, [pc, #120]	; (80158fc <mode_Tuning0+0x53c>)
 8015882:	2200      	movs	r2, #0
 8015884:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015886:	2003      	movs	r0, #3
 8015888:	f7f2 fa8e 	bl	8007da8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801588c:	2003      	movs	r0, #3
 801588e:	f7f2 fa63 	bl	8007d58 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015896:	f7f2 fd6b 	bl	8008370 <wait_ms_NoReset>
	pl_FunMotor_stop();
 801589a:	f7f2 fae7 	bl	8007e6c <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 801589e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80158a2:	f7f2 fd65 	bl	8008370 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80158a6:	2000      	movs	r0, #0
 80158a8:	f7f2 fa4c 	bl	8007d44 <pl_DriveMotor_standby>
	record_mode=0;
 80158ac:	4b13      	ldr	r3, [pc, #76]	; (80158fc <mode_Tuning0+0x53c>)
 80158ae:	2200      	movs	r2, #0
 80158b0:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158b2:	e002      	b.n	80158ba <mode_Tuning0+0x4fa>
		HAL_Delay(1);
 80158b4:	2001      	movs	r0, #1
 80158b6:	f002 f8b7 	bl	8017a28 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158ba:	4b18      	ldr	r3, [pc, #96]	; (801591c <mode_Tuning0+0x55c>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158c2:	ddf7      	ble.n	80158b4 <mode_Tuning0+0x4f4>
 80158c4:	4b15      	ldr	r3, [pc, #84]	; (801591c <mode_Tuning0+0x55c>)
 80158c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80158ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158ce:	ddf1      	ble.n	80158b4 <mode_Tuning0+0x4f4>
 80158d0:	4b12      	ldr	r3, [pc, #72]	; (801591c <mode_Tuning0+0x55c>)
 80158d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80158d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158da:	ddeb      	ble.n	80158b4 <mode_Tuning0+0x4f4>
	}
	pl_r_blue_LED(ON);
 80158dc:	2001      	movs	r0, #1
 80158de:	f7f1 fd75 	bl	80073cc <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80158e2:	2001      	movs	r0, #1
 80158e4:	f7f1 fd84 	bl	80073f0 <pl_l_blue_LED>
	record_print();
 80158e8:	f000 fcc2 	bl	8016270 <record_print>



}
 80158ec:	bf00      	nop
 80158ee:	3714      	adds	r7, #20
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd90      	pop	{r4, r7, pc}
 80158f4:	20000808 	.word	0x20000808
 80158f8:	3f7d70a4 	.word	0x3f7d70a4
 80158fc:	2000d96c 	.word	0x2000d96c
 8015900:	463b8000 	.word	0x463b8000
 8015904:	453b8000 	.word	0x453b8000
 8015908:	00000000 	.word	0x00000000
 801590c:	44340000 	.word	0x44340000
 8015910:	3f733333 	.word	0x3f733333
 8015914:	45dac000 	.word	0x45dac000
 8015918:	447a0000 	.word	0x447a0000
 801591c:	200002b8 	.word	0x200002b8

08015920 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8015920:	b580      	push	{r7, lr}
 8015922:	b084      	sub	sp, #16
 8015924:	af00      	add	r7, sp, #0
 8015926:	4603      	mov	r3, r0
 8015928:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 801592a:	2300      	movs	r3, #0
 801592c:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 801592e:	2300      	movs	r3, #0
 8015930:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8015932:	2300      	movs	r3, #0
 8015934:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8015936:	2300      	movs	r3, #0
 8015938:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 801593a:	2001      	movs	r0, #1
 801593c:	f7f2 fa02 	bl	8007d44 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015940:	2003      	movs	r0, #3
 8015942:	f7f2 fa09 	bl	8007d58 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015946:	2003      	movs	r0, #3
 8015948:	f7f2 fa2e 	bl	8007da8 <pl_R_DriveMotor_mode>
	reset_gyro();
 801594c:	f7eb ff58 	bl	8001800 <reset_gyro>
	reset_speed();
 8015950:	f7eb fb62 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015954:	f7ef f8ee 	bl	8004b34 <clear_Ierror>

	switch (main_modeR) {
 8015958:	79fb      	ldrb	r3, [r7, #7]
 801595a:	2b0f      	cmp	r3, #15
 801595c:	f200 81b0 	bhi.w	8015cc0 <mode_WallSensorTuning+0x3a0>
 8015960:	a201      	add	r2, pc, #4	; (adr r2, 8015968 <mode_WallSensorTuning+0x48>)
 8015962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015966:	bf00      	nop
 8015968:	080159a9 	.word	0x080159a9
 801596c:	080159cf 	.word	0x080159cf
 8015970:	080159e7 	.word	0x080159e7
 8015974:	08015a5d 	.word	0x08015a5d
 8015978:	08015ad3 	.word	0x08015ad3
 801597c:	08015b49 	.word	0x08015b49
 8015980:	08015bb9 	.word	0x08015bb9
 8015984:	08015bdf 	.word	0x08015bdf
 8015988:	08015c05 	.word	0x08015c05
 801598c:	08015c2b 	.word	0x08015c2b
 8015990:	08015cc1 	.word	0x08015cc1
 8015994:	08015cc1 	.word	0x08015cc1
 8015998:	08015cc1 	.word	0x08015cc1
 801599c:	08015cc1 	.word	0x08015cc1
 80159a0:	08015cc1 	.word	0x08015cc1
 80159a4:	08015c51 	.word	0x08015c51
		case 0://横壁追従制御
			record_mode=16;
 80159a8:	4bd2      	ldr	r3, [pc, #840]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 80159aa:	2210      	movs	r2, #16
 80159ac:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80159ae:	2301      	movs	r3, #1
 80159b0:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 80159b2:	68b8      	ldr	r0, [r7, #8]
 80159b4:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8015cf8 <mode_WallSensorTuning+0x3d8>
 80159b8:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 80159bc:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 80159c0:	eddf 0acf 	vldr	s1, [pc, #828]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 80159c4:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8015d04 <mode_WallSensorTuning+0x3e4>
 80159c8:	f7ed fb6c 	bl	80030a4 <straight_table2>
		break;
 80159cc:	e178      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 80159ce:	2300      	movs	r3, #0
 80159d0:	60fb      	str	r3, [r7, #12]
 80159d2:	e004      	b.n	80159de <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 80159d4:	f7ee fb70 	bl	80040b8 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	3301      	adds	r3, #1
 80159dc:	60fb      	str	r3, [r7, #12]
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2b14      	cmp	r3, #20
 80159e2:	ddf7      	ble.n	80159d4 <mode_WallSensorTuning+0xb4>
			}
		break;
 80159e4:	e16c      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 80159e6:	4bc3      	ldr	r3, [pc, #780]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 80159e8:	2207      	movs	r2, #7
 80159ea:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80159ec:	2300      	movs	r3, #0
 80159ee:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80159f0:	2300      	movs	r3, #0
 80159f2:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80159f4:	2300      	movs	r3, #0
 80159f6:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80159f8:	2300      	movs	r3, #0
 80159fa:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 80159fc:	68b8      	ldr	r0, [r7, #8]
 80159fe:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015a02:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a06:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a0a:	eddf 0abd 	vldr	s1, [pc, #756]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015a0e:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8015d10 <mode_WallSensorTuning+0x3f0>
 8015a12:	f7ed fb47 	bl	80030a4 <straight_table2>
			mode.WallCutMode=1;
 8015a16:	2301      	movs	r3, #1
 8015a18:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8015a1e:	68b8      	ldr	r0, [r7, #8]
 8015a20:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015a24:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a28:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a2c:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a30:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015d14 <mode_WallSensorTuning+0x3f4>
 8015a34:	f7ed fb36 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8015a40:	68b8      	ldr	r0, [r7, #8]
 8015a42:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015a46:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a4a:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015a4e:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a52:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8015d18 <mode_WallSensorTuning+0x3f8>
 8015a56:	f7ed fb25 	bl	80030a4 <straight_table2>
		break;
 8015a5a:	e131      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8015a5c:	4ba5      	ldr	r3, [pc, #660]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015a5e:	2208      	movs	r2, #8
 8015a60:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015a62:	2300      	movs	r3, #0
 8015a64:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8015a72:	68b8      	ldr	r0, [r7, #8]
 8015a74:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015a78:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a7c:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a80:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015a84:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8015d1c <mode_WallSensorTuning+0x3fc>
 8015a88:	f7ed fb0c 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 8015a8c:	2302      	movs	r3, #2
 8015a8e:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015a90:	2300      	movs	r3, #0
 8015a92:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8015a94:	68b8      	ldr	r0, [r7, #8]
 8015a96:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015a9a:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015a9e:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015aa2:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015aa6:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8015d14 <mode_WallSensorTuning+0x3f4>
 8015aaa:	f7ed fafb 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8015ab6:	68b8      	ldr	r0, [r7, #8]
 8015ab8:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015abc:	eddf 1a93 	vldr	s3, [pc, #588]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015ac0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015ac4:	eddf 0a91 	vldr	s1, [pc, #580]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015ac8:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8015d18 <mode_WallSensorTuning+0x3f8>
 8015acc:	f7ed faea 	bl	80030a4 <straight_table2>
		break;
 8015ad0:	e0f6      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8015ad2:	4b88      	ldr	r3, [pc, #544]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015ad4:	2208      	movs	r2, #8
 8015ad6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015ad8:	2300      	movs	r3, #0
 8015ada:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015adc:	2300      	movs	r3, #0
 8015ade:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8015ae8:	68b8      	ldr	r0, [r7, #8]
 8015aea:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015aee:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015af2:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015af6:	eddf 0a82 	vldr	s1, [pc, #520]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015afa:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8015d20 <mode_WallSensorTuning+0x400>
 8015afe:	f7ed fad1 	bl	80030a4 <straight_table2>
			mode.WallCutMode=3;
 8015b02:	2303      	movs	r3, #3
 8015b04:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015b06:	2300      	movs	r3, #0
 8015b08:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015b0a:	68b8      	ldr	r0, [r7, #8]
 8015b0c:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015b10:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b14:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b18:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b1c:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8015d24 <mode_WallSensorTuning+0x404>
 8015b20:	f7ed fac0 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015b24:	2300      	movs	r3, #0
 8015b26:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015b2c:	68b8      	ldr	r0, [r7, #8]
 8015b2e:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015b32:	eddf 1a76 	vldr	s3, [pc, #472]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b36:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015b3a:	eddf 0a74 	vldr	s1, [pc, #464]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b3e:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8015d28 <mode_WallSensorTuning+0x408>
 8015b42:	f7ed faaf 	bl	80030a4 <straight_table2>
		break;
 8015b46:	e0bb      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8015b48:	2300      	movs	r3, #0
 8015b4a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015b50:	2300      	movs	r3, #0
 8015b52:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015b54:	2300      	movs	r3, #0
 8015b56:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8015b58:	68b8      	ldr	r0, [r7, #8]
 8015b5a:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015b5e:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b62:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b66:	eddf 0a66 	vldr	s1, [pc, #408]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015b6a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015d20 <mode_WallSensorTuning+0x400>
 8015b6e:	f7ed fa99 	bl	80030a4 <straight_table2>
			mode.WallCutMode=4;
 8015b72:	2304      	movs	r3, #4
 8015b74:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015b7a:	68b8      	ldr	r0, [r7, #8]
 8015b7c:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015b80:	eddf 1a62 	vldr	s3, [pc, #392]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b84:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b88:	eddf 0a60 	vldr	s1, [pc, #384]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015b8c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8015d24 <mode_WallSensorTuning+0x404>
 8015b90:	f7ed fa88 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015b9c:	68b8      	ldr	r0, [r7, #8]
 8015b9e:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015ba2:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015ba6:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015baa:	eddf 0a58 	vldr	s1, [pc, #352]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015bae:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015d28 <mode_WallSensorTuning+0x408>
 8015bb2:	f7ed fa77 	bl	80030a4 <straight_table2>
		break;
 8015bb6:	e083      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(制御あり)
			record_mode=9;
 8015bb8:	4b4e      	ldr	r3, [pc, #312]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015bba:	2209      	movs	r2, #9
 8015bbc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8015bc2:	68b8      	ldr	r0, [r7, #8]
 8015bc4:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015bc8:	eddf 1a50 	vldr	s3, [pc, #320]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015bcc:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015bd0:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015bd4:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8015d2c <mode_WallSensorTuning+0x40c>
 8015bd8:	f7ed fa64 	bl	80030a4 <straight_table2>
		break;
 8015bdc:	e070      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=10;
 8015bde:	4b45      	ldr	r3, [pc, #276]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015be0:	220a      	movs	r2, #10
 8015be2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015be4:	2300      	movs	r3, #0
 8015be6:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8015be8:	68b8      	ldr	r0, [r7, #8]
 8015bea:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015d08 <mode_WallSensorTuning+0x3e8>
 8015bee:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015d0c <mode_WallSensorTuning+0x3ec>
 8015bf2:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015bf6:	eddf 0a42 	vldr	s1, [pc, #264]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015bfa:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8015d2c <mode_WallSensorTuning+0x40c>
 8015bfe:	f7ed fa51 	bl	80030a4 <straight_table2>

		break;
 8015c02:	e05d      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015c04:	4b3b      	ldr	r3, [pc, #236]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015c06:	2207      	movs	r2, #7
 8015c08:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015c0a:	2303      	movs	r3, #3
 8015c0c:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 15000,mode);
 8015c0e:	68b8      	ldr	r0, [r7, #8]
 8015c10:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015d30 <mode_WallSensorTuning+0x410>
 8015c14:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015d34 <mode_WallSensorTuning+0x414>
 8015c18:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015c1c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015c20:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015d38 <mode_WallSensorTuning+0x418>
 8015c24:	f7ed fa3e 	bl	80030a4 <straight_table2>
		break;
 8015c28:	e04a      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8015c2a:	4b32      	ldr	r3, [pc, #200]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015c2c:	2208      	movs	r2, #8
 8015c2e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015c30:	2303      	movs	r3, #3
 8015c32:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8015c34:	68b8      	ldr	r0, [r7, #8]
 8015c36:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8015d3c <mode_WallSensorTuning+0x41c>
 8015c3a:	eddf 1a41 	vldr	s3, [pc, #260]	; 8015d40 <mode_WallSensorTuning+0x420>
 8015c3e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015c42:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015c46:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8015d44 <mode_WallSensorTuning+0x424>
 8015c4a:	f7ed fa2b 	bl	80030a4 <straight_table2>
		break;
 8015c4e:	e037      	b.n	8015cc0 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8015c50:	2305      	movs	r3, #5
 8015c52:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015c54:	2300      	movs	r3, #0
 8015c56:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8015c60:	68b8      	ldr	r0, [r7, #8]
 8015c62:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8015d48 <mode_WallSensorTuning+0x428>
 8015c66:	eddf 1a25 	vldr	s3, [pc, #148]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 8015c6a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 8015c6e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015c72:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8015d4c <mode_WallSensorTuning+0x42c>
 8015c76:	f7ed fa15 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 8015c7a:	2302      	movs	r3, #2
 8015c7c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 8015c82:	68b8      	ldr	r0, [r7, #8]
 8015c84:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8015d48 <mode_WallSensorTuning+0x428>
 8015c88:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 8015c8c:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 8015c90:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 8015c94:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015d50 <mode_WallSensorTuning+0x430>
 8015c98:	f7ed fa04 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8015ca4:	68b8      	ldr	r0, [r7, #8]
 8015ca6:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8015d48 <mode_WallSensorTuning+0x428>
 8015caa:	eddf 1a14 	vldr	s3, [pc, #80]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 8015cae:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8015d00 <mode_WallSensorTuning+0x3e0>
 8015cb2:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015cfc <mode_WallSensorTuning+0x3dc>
 8015cb6:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8015d54 <mode_WallSensorTuning+0x434>
 8015cba:	f7ed f9f3 	bl	80030a4 <straight_table2>
		break;
 8015cbe:	bf00      	nop
	}
	record_mode=0;
 8015cc0:	4b0c      	ldr	r3, [pc, #48]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015cc6:	2003      	movs	r0, #3
 8015cc8:	f7f2 f86e 	bl	8007da8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015ccc:	2003      	movs	r0, #3
 8015cce:	f7f2 f843 	bl	8007d58 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015cd6:	f7f2 fb4b 	bl	8008370 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015cda:	f7f2 f8c7 	bl	8007e6c <pl_FunMotor_stop>
	record_mode=0;
 8015cde:	4b05      	ldr	r3, [pc, #20]	; (8015cf4 <mode_WallSensorTuning+0x3d4>)
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8015ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015ce8:	f7f2 fb42 	bl	8008370 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015cec:	2000      	movs	r0, #0
 8015cee:	f7f2 f829 	bl	8007d44 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015cf2:	e034      	b.n	8015d5e <mode_WallSensorTuning+0x43e>
 8015cf4:	2000d96c 	.word	0x2000d96c
 8015cf8:	459c4000 	.word	0x459c4000
 8015cfc:	43fa0000 	.word	0x43fa0000
 8015d00:	00000000 	.word	0x00000000
 8015d04:	44b40000 	.word	0x44b40000
 8015d08:	453b8000 	.word	0x453b8000
 8015d0c:	43960000 	.word	0x43960000
 8015d10:	431b8000 	.word	0x431b8000
 8015d14:	41b40000 	.word	0x41b40000
 8015d18:	42870000 	.word	0x42870000
 8015d1c:	42cd0000 	.word	0x42cd0000
 8015d20:	4329c77b 	.word	0x4329c77b
 8015d24:	41fe8ef6 	.word	0x41fe8ef6
 8015d28:	42beeb39 	.word	0x42beeb39
 8015d2c:	43beeb39 	.word	0x43beeb39
 8015d30:	466a6000 	.word	0x466a6000
 8015d34:	44fa0000 	.word	0x44fa0000
 8015d38:	443eeb39 	.word	0x443eeb39
 8015d3c:	461c4000 	.word	0x461c4000
 8015d40:	442f0000 	.word	0x442f0000
 8015d44:	4484977b 	.word	0x4484977b
 8015d48:	44bb8000 	.word	0x44bb8000
 8015d4c:	43488000 	.word	0x43488000
 8015d50:	42340000 	.word	0x42340000
 8015d54:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8015d58:	2001      	movs	r0, #1
 8015d5a:	f001 fe65 	bl	8017a28 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015d5e:	4b0e      	ldr	r3, [pc, #56]	; (8015d98 <mode_WallSensorTuning+0x478>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015d66:	ddf7      	ble.n	8015d58 <mode_WallSensorTuning+0x438>
 8015d68:	4b0b      	ldr	r3, [pc, #44]	; (8015d98 <mode_WallSensorTuning+0x478>)
 8015d6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015d6e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015d72:	ddf1      	ble.n	8015d58 <mode_WallSensorTuning+0x438>
 8015d74:	4b08      	ldr	r3, [pc, #32]	; (8015d98 <mode_WallSensorTuning+0x478>)
 8015d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015d7a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015d7e:	ddeb      	ble.n	8015d58 <mode_WallSensorTuning+0x438>
	}
	pl_r_blue_LED(ON);
 8015d80:	2001      	movs	r0, #1
 8015d82:	f7f1 fb23 	bl	80073cc <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015d86:	2001      	movs	r0, #1
 8015d88:	f7f1 fb32 	bl	80073f0 <pl_l_blue_LED>
	record_print();
 8015d8c:	f000 fa70 	bl	8016270 <record_print>



}
 8015d90:	bf00      	nop
 8015d92:	3710      	adds	r7, #16
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}
 8015d98:	200002b8 	.word	0x200002b8

08015d9c <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	4603      	mov	r3, r0
 8015da4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 8015dae:	2300      	movs	r3, #0
 8015db0:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8015db2:	2300      	movs	r3, #0
 8015db4:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015db6:	2001      	movs	r0, #1
 8015db8:	f7f1 ffc4 	bl	8007d44 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015dbc:	2003      	movs	r0, #3
 8015dbe:	f7f1 ffcb 	bl	8007d58 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015dc2:	2003      	movs	r0, #3
 8015dc4:	f7f1 fff0 	bl	8007da8 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.56);
 8015dc8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8016114 <mode_WallSensorTuning_fast+0x378>
 8015dcc:	f7f2 f858 	bl	8007e80 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8015dd0:	f7f2 f842 	bl	8007e58 <pl_FunMotor_start>
	HAL_Delay(600);
 8015dd4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015dd8:	f001 fe26 	bl	8017a28 <HAL_Delay>
	reset_gyro();
 8015ddc:	f7eb fd10 	bl	8001800 <reset_gyro>
	reset_speed();
 8015de0:	f7eb f91a 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015de4:	f7ee fea6 	bl	8004b34 <clear_Ierror>
	angle=0;
 8015de8:	4bcb      	ldr	r3, [pc, #812]	; (8016118 <mode_WallSensorTuning_fast+0x37c>)
 8015dea:	f04f 0200 	mov.w	r2, #0
 8015dee:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8015df0:	79fb      	ldrb	r3, [r7, #7]
 8015df2:	2b0f      	cmp	r3, #15
 8015df4:	f200 8173 	bhi.w	80160de <mode_WallSensorTuning_fast+0x342>
 8015df8:	a201      	add	r2, pc, #4	; (adr r2, 8015e00 <mode_WallSensorTuning_fast+0x64>)
 8015dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dfe:	bf00      	nop
 8015e00:	08015e41 	.word	0x08015e41
 8015e04:	080160df 	.word	0x080160df
 8015e08:	080160df 	.word	0x080160df
 8015e0c:	08015e73 	.word	0x08015e73
 8015e10:	08015ee9 	.word	0x08015ee9
 8015e14:	08015f5f 	.word	0x08015f5f
 8015e18:	08015fd5 	.word	0x08015fd5
 8015e1c:	08015ffb 	.word	0x08015ffb
 8015e20:	08016021 	.word	0x08016021
 8015e24:	08016047 	.word	0x08016047
 8015e28:	0801606d 	.word	0x0801606d
 8015e2c:	08016093 	.word	0x08016093
 8015e30:	080160b9 	.word	0x080160b9
 8015e34:	080160df 	.word	0x080160df
 8015e38:	080160df 	.word	0x080160df
 8015e3c:	080160df 	.word	0x080160df
		case 0://横壁追従制御
			record_mode=15;
 8015e40:	4bb6      	ldr	r3, [pc, #728]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8015e42:	220f      	movs	r2, #15
 8015e44:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015e46:	2301      	movs	r3, #1
 8015e48:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8015e4a:	4bb5      	ldr	r3, [pc, #724]	; (8016120 <mode_WallSensorTuning_fast+0x384>)
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8015e50:	68f8      	ldr	r0, [r7, #12]
 8015e52:	ed9f 2ab4 	vldr	s4, [pc, #720]	; 8016124 <mode_WallSensorTuning_fast+0x388>
 8015e56:	eddf 1ab4 	vldr	s3, [pc, #720]	; 8016128 <mode_WallSensorTuning_fast+0x38c>
 8015e5a:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015e5e:	eddf 0ab3 	vldr	s1, [pc, #716]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015e62:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8016130 <mode_WallSensorTuning_fast+0x394>
 8015e66:	f7ed f91d 	bl	80030a4 <straight_table2>
			highspeed_mode=0;
 8015e6a:	4bad      	ldr	r3, [pc, #692]	; (8016120 <mode_WallSensorTuning_fast+0x384>)
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	701a      	strb	r2, [r3, #0]
		break;
 8015e70:	e135      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 1://なし
		break;
		case 2://なし
		break;
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8015e72:	4baa      	ldr	r3, [pc, #680]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8015e74:	2208      	movs	r2, #8
 8015e76:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015e80:	2300      	movs	r3, #0
 8015e82:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015e84:	2300      	movs	r3, #0
 8015e86:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 600, 600,15000,mode);
 8015e88:	68f8      	ldr	r0, [r7, #12]
 8015e8a:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8016134 <mode_WallSensorTuning_fast+0x398>
 8015e8e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015e92:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015e96:	eddf 0aa5 	vldr	s1, [pc, #660]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015e9a:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 801613c <mode_WallSensorTuning_fast+0x3a0>
 8015e9e:	f7ed f901 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 8015ea2:	2302      	movs	r3, #2
 8015ea4:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 600, 600, 600,15000,mode);
 8015eaa:	68f8      	ldr	r0, [r7, #12]
 8015eac:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8016134 <mode_WallSensorTuning_fast+0x398>
 8015eb0:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015eb4:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015eb8:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015ebc:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8016140 <mode_WallSensorTuning_fast+0x3a4>
 8015ec0:	f7ed f8f0 	bl	80030a4 <straight_table2>
			mode.WallControlMode=1;
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 600, 0, 600,15000,mode);
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8016134 <mode_WallSensorTuning_fast+0x398>
 8015ed2:	eddf 1a99 	vldr	s3, [pc, #612]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015ed6:	ed9f 1a95 	vldr	s2, [pc, #596]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015eda:	eddf 0a97 	vldr	s1, [pc, #604]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015ede:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8016144 <mode_WallSensorTuning_fast+0x3a8>
 8015ee2:	f7ed f8df 	bl	80030a4 <straight_table2>
		break;
 8015ee6:	e0fa      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8015ee8:	4b8c      	ldr	r3, [pc, #560]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8015eea:	2208      	movs	r2, #8
 8015eec:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015eee:	2300      	movs	r3, #0
 8015ef0:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015efa:	2300      	movs	r3, #0
 8015efc:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 600, 600,10000,mode);
 8015efe:	68f8      	ldr	r0, [r7, #12]
 8015f00:	ed9f 2a91 	vldr	s4, [pc, #580]	; 8016148 <mode_WallSensorTuning_fast+0x3ac>
 8015f04:	eddf 1a8c 	vldr	s3, [pc, #560]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f08:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f0c:	eddf 0a87 	vldr	s1, [pc, #540]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015f10:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 801614c <mode_WallSensorTuning_fast+0x3b0>
 8015f14:	f7ed f8c6 	bl	80030a4 <straight_table2>
			mode.WallCutMode=3;
 8015f18:	2303      	movs	r3, #3
 8015f1a:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8016148 <mode_WallSensorTuning_fast+0x3ac>
 8015f26:	eddf 1a84 	vldr	s3, [pc, #528]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f2a:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f2e:	eddf 0a82 	vldr	s1, [pc, #520]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f32:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8016150 <mode_WallSensorTuning_fast+0x3b4>
 8015f36:	f7ed f8b5 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015f42:	68f8      	ldr	r0, [r7, #12]
 8015f44:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8016148 <mode_WallSensorTuning_fast+0x3ac>
 8015f48:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f4c:	ed9f 1a77 	vldr	s2, [pc, #476]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015f50:	eddf 0a79 	vldr	s1, [pc, #484]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f54:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8016154 <mode_WallSensorTuning_fast+0x3b8>
 8015f58:	f7ed f8a4 	bl	80030a4 <straight_table2>
		break;
 8015f5c:	e0bf      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8015f5e:	4b6f      	ldr	r3, [pc, #444]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8015f60:	2208      	movs	r2, #8
 8015f62:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015f64:	2300      	movs	r3, #0
 8015f66:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015f70:	2300      	movs	r3, #0
 8015f72:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 600, 600,10000,mode);
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8016148 <mode_WallSensorTuning_fast+0x3ac>
 8015f7a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f7e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015f82:	eddf 0a6a 	vldr	s1, [pc, #424]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015f86:	ed9f 0a71 	vldr	s0, [pc, #452]	; 801614c <mode_WallSensorTuning_fast+0x3b0>
 8015f8a:	f7ed f88b 	bl	80030a4 <straight_table2>
			mode.WallCutMode=4;
 8015f8e:	2304      	movs	r3, #4
 8015f90:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015f92:	2300      	movs	r3, #0
 8015f94:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016148 <mode_WallSensorTuning_fast+0x3ac>
 8015f9c:	eddf 1a66 	vldr	s3, [pc, #408]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015fa0:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015fa4:	eddf 0a64 	vldr	s1, [pc, #400]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015fa8:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8016150 <mode_WallSensorTuning_fast+0x3b4>
 8015fac:	f7ed f87a 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015fb8:	68f8      	ldr	r0, [r7, #12]
 8015fba:	ed9f 2a63 	vldr	s4, [pc, #396]	; 8016148 <mode_WallSensorTuning_fast+0x3ac>
 8015fbe:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015fc2:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015fc6:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8016138 <mode_WallSensorTuning_fast+0x39c>
 8015fca:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8016154 <mode_WallSensorTuning_fast+0x3b8>
 8015fce:	f7ed f869 	bl	80030a4 <straight_table2>
		break;
 8015fd2:	e084      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 6://斜め直進(制御あり)
			record_mode=7;
 8015fd4:	4b51      	ldr	r3, [pc, #324]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8015fd6:	2207      	movs	r2, #7
 8015fd8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8015fde:	68f8      	ldr	r0, [r7, #12]
 8015fe0:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 8016158 <mode_WallSensorTuning_fast+0x3bc>
 8015fe4:	eddf 1a5d 	vldr	s3, [pc, #372]	; 801615c <mode_WallSensorTuning_fast+0x3c0>
 8015fe8:	ed9f 1a50 	vldr	s2, [pc, #320]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015fec:	eddf 0a4f 	vldr	s1, [pc, #316]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8015ff0:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8016160 <mode_WallSensorTuning_fast+0x3c4>
 8015ff4:	f7ed f856 	bl	80030a4 <straight_table2>
		break;
 8015ff8:	e071      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 8015ffa:	4b48      	ldr	r3, [pc, #288]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8015ffc:	2209      	movs	r2, #9
 8015ffe:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016000:	2300      	movs	r3, #0
 8016002:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016004:	68f8      	ldr	r0, [r7, #12]
 8016006:	ed9f 2a54 	vldr	s4, [pc, #336]	; 8016158 <mode_WallSensorTuning_fast+0x3bc>
 801600a:	eddf 1a54 	vldr	s3, [pc, #336]	; 801615c <mode_WallSensorTuning_fast+0x3c0>
 801600e:	ed9f 1a47 	vldr	s2, [pc, #284]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8016012:	eddf 0a46 	vldr	s1, [pc, #280]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8016016:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8016160 <mode_WallSensorTuning_fast+0x3c4>
 801601a:	f7ed f843 	bl	80030a4 <straight_table2>

		break;
 801601e:	e05e      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016020:	4b3e      	ldr	r3, [pc, #248]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8016022:	2207      	movs	r2, #7
 8016024:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016026:	2303      	movs	r3, #3
 8016028:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 801602a:	68f8      	ldr	r0, [r7, #12]
 801602c:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8016158 <mode_WallSensorTuning_fast+0x3bc>
 8016030:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8016164 <mode_WallSensorTuning_fast+0x3c8>
 8016034:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8016038:	eddf 0a3c 	vldr	s1, [pc, #240]	; 801612c <mode_WallSensorTuning_fast+0x390>
 801603c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016168 <mode_WallSensorTuning_fast+0x3cc>
 8016040:	f7ed f830 	bl	80030a4 <straight_table2>
		break;
 8016044:	e04b      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 9:
			record_mode=8;
 8016046:	4b35      	ldr	r3, [pc, #212]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8016048:	2208      	movs	r2, #8
 801604a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801604c:	2303      	movs	r3, #3
 801604e:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8016158 <mode_WallSensorTuning_fast+0x3bc>
 8016056:	eddf 1a43 	vldr	s3, [pc, #268]	; 8016164 <mode_WallSensorTuning_fast+0x3c8>
 801605a:	ed9f 1a34 	vldr	s2, [pc, #208]	; 801612c <mode_WallSensorTuning_fast+0x390>
 801605e:	eddf 0a33 	vldr	s1, [pc, #204]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8016062:	ed9f 0a42 	vldr	s0, [pc, #264]	; 801616c <mode_WallSensorTuning_fast+0x3d0>
 8016066:	f7ed f81d 	bl	80030a4 <straight_table2>
		break;
 801606a:	e038      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 10:
			record_mode=10;
 801606c:	4b2b      	ldr	r3, [pc, #172]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 801606e:	220a      	movs	r2, #10
 8016070:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016072:	2303      	movs	r3, #3
 8016074:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8016158 <mode_WallSensorTuning_fast+0x3bc>
 801607c:	eddf 1a39 	vldr	s3, [pc, #228]	; 8016164 <mode_WallSensorTuning_fast+0x3c8>
 8016080:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8016084:	eddf 0a29 	vldr	s1, [pc, #164]	; 801612c <mode_WallSensorTuning_fast+0x390>
 8016088:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8016168 <mode_WallSensorTuning_fast+0x3cc>
 801608c:	f7ed f80a 	bl	80030a4 <straight_table2>
		break;
 8016090:	e025      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 11:
			record_mode=11;
 8016092:	4b22      	ldr	r3, [pc, #136]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 8016094:	220b      	movs	r2, #11
 8016096:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016098:	2303      	movs	r3, #3
 801609a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8016134 <mode_WallSensorTuning_fast+0x398>
 80160a2:	eddf 1a33 	vldr	s3, [pc, #204]	; 8016170 <mode_WallSensorTuning_fast+0x3d4>
 80160a6:	ed9f 1a21 	vldr	s2, [pc, #132]	; 801612c <mode_WallSensorTuning_fast+0x390>
 80160aa:	eddf 0a20 	vldr	s1, [pc, #128]	; 801612c <mode_WallSensorTuning_fast+0x390>
 80160ae:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8016168 <mode_WallSensorTuning_fast+0x3cc>
 80160b2:	f7ec fff7 	bl	80030a4 <straight_table2>
		break;
 80160b6:	e012      	b.n	80160de <mode_WallSensorTuning_fast+0x342>
		case 12:
			record_mode=12;
 80160b8:	4b18      	ldr	r3, [pc, #96]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 80160ba:	220c      	movs	r2, #12
 80160bc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80160be:	2303      	movs	r3, #3
 80160c0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 80160c2:	68f8      	ldr	r0, [r7, #12]
 80160c4:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8016134 <mode_WallSensorTuning_fast+0x398>
 80160c8:	eddf 1a29 	vldr	s3, [pc, #164]	; 8016170 <mode_WallSensorTuning_fast+0x3d4>
 80160cc:	ed9f 1a17 	vldr	s2, [pc, #92]	; 801612c <mode_WallSensorTuning_fast+0x390>
 80160d0:	eddf 0a16 	vldr	s1, [pc, #88]	; 801612c <mode_WallSensorTuning_fast+0x390>
 80160d4:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016168 <mode_WallSensorTuning_fast+0x3cc>
 80160d8:	f7ec ffe4 	bl	80030a4 <straight_table2>
		break;
 80160dc:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 80160de:	4b0f      	ldr	r3, [pc, #60]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 80160e0:	2200      	movs	r2, #0
 80160e2:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80160e4:	2003      	movs	r0, #3
 80160e6:	f7f1 fe5f 	bl	8007da8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80160ea:	2003      	movs	r0, #3
 80160ec:	f7f1 fe34 	bl	8007d58 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80160f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80160f4:	f7f2 f93c 	bl	8008370 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80160f8:	f7f1 feb8 	bl	8007e6c <pl_FunMotor_stop>
	record_mode=0;
 80160fc:	4b07      	ldr	r3, [pc, #28]	; (801611c <mode_WallSensorTuning_fast+0x380>)
 80160fe:	2200      	movs	r2, #0
 8016100:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016106:	f7f2 f933 	bl	8008370 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801610a:	2000      	movs	r0, #0
 801610c:	f7f1 fe1a 	bl	8007d44 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016110:	e033      	b.n	801617a <mode_WallSensorTuning_fast+0x3de>
 8016112:	bf00      	nop
 8016114:	3f0f5c29 	.word	0x3f0f5c29
 8016118:	20000264 	.word	0x20000264
 801611c:	2000d96c 	.word	0x2000d96c
 8016120:	20000808 	.word	0x20000808
 8016124:	46bb8000 	.word	0x46bb8000
 8016128:	459c4000 	.word	0x459c4000
 801612c:	00000000 	.word	0x00000000
 8016130:	44e39000 	.word	0x44e39000
 8016134:	466a6000 	.word	0x466a6000
 8016138:	44160000 	.word	0x44160000
 801613c:	42cd0000 	.word	0x42cd0000
 8016140:	41b40000 	.word	0x41b40000
 8016144:	42e10000 	.word	0x42e10000
 8016148:	461c4000 	.word	0x461c4000
 801614c:	4321c77b 	.word	0x4321c77b
 8016150:	41fe8ef6 	.word	0x41fe8ef6
 8016154:	42beeb39 	.word	0x42beeb39
 8016158:	469c4000 	.word	0x469c4000
 801615c:	44fa0000 	.word	0x44fa0000
 8016160:	445ebd17 	.word	0x445ebd17
 8016164:	455ac000 	.word	0x455ac000
 8016168:	443eeb39 	.word	0x443eeb39
 801616c:	4484977b 	.word	0x4484977b
 8016170:	453b8000 	.word	0x453b8000
		HAL_Delay(1);
 8016174:	2001      	movs	r0, #1
 8016176:	f001 fc57 	bl	8017a28 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801617a:	4b0e      	ldr	r3, [pc, #56]	; (80161b4 <mode_WallSensorTuning_fast+0x418>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016182:	ddf7      	ble.n	8016174 <mode_WallSensorTuning_fast+0x3d8>
 8016184:	4b0b      	ldr	r3, [pc, #44]	; (80161b4 <mode_WallSensorTuning_fast+0x418>)
 8016186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801618a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801618e:	ddf1      	ble.n	8016174 <mode_WallSensorTuning_fast+0x3d8>
 8016190:	4b08      	ldr	r3, [pc, #32]	; (80161b4 <mode_WallSensorTuning_fast+0x418>)
 8016192:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016196:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801619a:	ddeb      	ble.n	8016174 <mode_WallSensorTuning_fast+0x3d8>
	}
	pl_r_blue_LED(ON);
 801619c:	2001      	movs	r0, #1
 801619e:	f7f1 f915 	bl	80073cc <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80161a2:	2001      	movs	r0, #1
 80161a4:	f7f1 f924 	bl	80073f0 <pl_l_blue_LED>
	record_print();
 80161a8:	f000 f862 	bl	8016270 <record_print>



}
 80161ac:	bf00      	nop
 80161ae:	3710      	adds	r7, #16
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	200002b8 	.word	0x200002b8

080161b8 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 80161b8:	b480      	push	{r7}
 80161ba:	af00      	add	r7, sp, #0
	record_mode = 0;
 80161bc:	4b06      	ldr	r3, [pc, #24]	; (80161d8 <record_reset+0x20>)
 80161be:	2200      	movs	r2, #0
 80161c0:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 80161c2:	4b06      	ldr	r3, [pc, #24]	; (80161dc <record_reset+0x24>)
 80161c4:	2200      	movs	r2, #0
 80161c6:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 80161c8:	4b05      	ldr	r3, [pc, #20]	; (80161e0 <record_reset+0x28>)
 80161ca:	2200      	movs	r2, #0
 80161cc:	701a      	strb	r2, [r3, #0]
}
 80161ce:	bf00      	nop
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr
 80161d8:	2000d96c 	.word	0x2000d96c
 80161dc:	2000d970 	.word	0x2000d970
 80161e0:	2000d978 	.word	0x2000d978

080161e4 <record_data>:

void record_data(float *input_record_data, int numlen) {
 80161e4:	b490      	push	{r4, r7}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 80161ee:	2300      	movs	r3, #0
 80161f0:	60fb      	str	r3, [r7, #12]
 80161f2:	e013      	b.n	801621c <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	687a      	ldr	r2, [r7, #4]
 80161fa:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 80161fc:	4b18      	ldr	r3, [pc, #96]	; (8016260 <record_data+0x7c>)
 80161fe:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016200:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016202:	4818      	ldr	r0, [pc, #96]	; (8016264 <record_data+0x80>)
 8016204:	68f9      	ldr	r1, [r7, #12]
 8016206:	f640 34b8 	movw	r4, #3000	; 0xbb8
 801620a:	fb04 f101 	mul.w	r1, r4, r1
 801620e:	440b      	add	r3, r1
 8016210:	009b      	lsls	r3, r3, #2
 8016212:	4403      	add	r3, r0
 8016214:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	3301      	adds	r3, #1
 801621a:	60fb      	str	r3, [r7, #12]
 801621c:	68fa      	ldr	r2, [r7, #12]
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	429a      	cmp	r2, r3
 8016222:	dbe7      	blt.n	80161f4 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016224:	4b10      	ldr	r3, [pc, #64]	; (8016268 <record_data+0x84>)
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	2b01      	cmp	r3, #1
 801622a:	d103      	bne.n	8016234 <record_data+0x50>
		record_end_point = record_time;
 801622c:	4b0c      	ldr	r3, [pc, #48]	; (8016260 <record_data+0x7c>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	4a0e      	ldr	r2, [pc, #56]	; (801626c <record_data+0x88>)
 8016232:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016234:	4b0a      	ldr	r3, [pc, #40]	; (8016260 <record_data+0x7c>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	3301      	adds	r3, #1
 801623a:	4a09      	ldr	r2, [pc, #36]	; (8016260 <record_data+0x7c>)
 801623c:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 801623e:	4b08      	ldr	r3, [pc, #32]	; (8016260 <record_data+0x7c>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016246:	4293      	cmp	r3, r2
 8016248:	dd05      	ble.n	8016256 <record_data+0x72>
		record_time = 0;
 801624a:	4b05      	ldr	r3, [pc, #20]	; (8016260 <record_data+0x7c>)
 801624c:	2200      	movs	r2, #0
 801624e:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016250:	4b05      	ldr	r3, [pc, #20]	; (8016268 <record_data+0x84>)
 8016252:	2201      	movs	r2, #1
 8016254:	701a      	strb	r2, [r3, #0]
	}

}
 8016256:	bf00      	nop
 8016258:	3710      	adds	r7, #16
 801625a:	46bd      	mov	sp, r7
 801625c:	bc90      	pop	{r4, r7}
 801625e:	4770      	bx	lr
 8016260:	2000d970 	.word	0x2000d970
 8016264:	20001dec 	.word	0x20001dec
 8016268:	2000d978 	.word	0x2000d978
 801626c:	2000d974 	.word	0x2000d974

08016270 <record_print>:

void record_print(void) {
 8016270:	b580      	push	{r7, lr}
 8016272:	b084      	sub	sp, #16
 8016274:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016276:	4b3a      	ldr	r3, [pc, #232]	; (8016360 <record_print+0xf0>)
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d12e      	bne.n	80162dc <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 801627e:	2300      	movs	r3, #0
 8016280:	60fb      	str	r3, [r7, #12]
 8016282:	e025      	b.n	80162d0 <record_print+0x60>

			printf("%d", a);
 8016284:	68f9      	ldr	r1, [r7, #12]
 8016286:	4837      	ldr	r0, [pc, #220]	; (8016364 <record_print+0xf4>)
 8016288:	f009 fb20 	bl	801f8cc <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 801628c:	2300      	movs	r3, #0
 801628e:	607b      	str	r3, [r7, #4]
 8016290:	e015      	b.n	80162be <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8016292:	4935      	ldr	r1, [pc, #212]	; (8016368 <record_print+0xf8>)
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801629a:	fb03 f202 	mul.w	r2, r3, r2
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	4413      	add	r3, r2
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	440b      	add	r3, r1
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7ea f975 	bl	8000598 <__aeabi_f2d>
 80162ae:	4602      	mov	r2, r0
 80162b0:	460b      	mov	r3, r1
 80162b2:	482e      	ldr	r0, [pc, #184]	; (801636c <record_print+0xfc>)
 80162b4:	f009 fb0a 	bl	801f8cc <iprintf>
					record_count++) {
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	3301      	adds	r3, #1
 80162bc:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2b03      	cmp	r3, #3
 80162c2:	dde6      	ble.n	8016292 <record_print+0x22>
			}
			printf("\n");
 80162c4:	200a      	movs	r0, #10
 80162c6:	f009 fb19 	bl	801f8fc <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	3301      	adds	r3, #1
 80162ce:	60fb      	str	r3, [r7, #12]
 80162d0:	4b27      	ldr	r3, [pc, #156]	; (8016370 <record_print+0x100>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	68fa      	ldr	r2, [r7, #12]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	dbd4      	blt.n	8016284 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 80162da:	e03c      	b.n	8016356 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 80162dc:	2300      	movs	r3, #0
 80162de:	60fb      	str	r3, [r7, #12]
 80162e0:	e034      	b.n	801634c <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 80162e2:	4b24      	ldr	r3, [pc, #144]	; (8016374 <record_print+0x104>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	3301      	adds	r3, #1
 80162e8:	68fa      	ldr	r2, [r7, #12]
 80162ea:	4413      	add	r3, r2
 80162ec:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80162f4:	4293      	cmp	r3, r2
 80162f6:	dd03      	ble.n	8016300 <record_print+0x90>
				time_index -= max_record_time;
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 80162fe:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016300:	68f9      	ldr	r1, [r7, #12]
 8016302:	4818      	ldr	r0, [pc, #96]	; (8016364 <record_print+0xf4>)
 8016304:	f009 fae2 	bl	801f8cc <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016308:	2300      	movs	r3, #0
 801630a:	603b      	str	r3, [r7, #0]
 801630c:	e015      	b.n	801633a <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 801630e:	4916      	ldr	r1, [pc, #88]	; (8016368 <record_print+0xf8>)
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016316:	fb03 f202 	mul.w	r2, r3, r2
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	4413      	add	r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	440b      	add	r3, r1
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4618      	mov	r0, r3
 8016326:	f7ea f937 	bl	8000598 <__aeabi_f2d>
 801632a:	4602      	mov	r2, r0
 801632c:	460b      	mov	r3, r1
 801632e:	480f      	ldr	r0, [pc, #60]	; (801636c <record_print+0xfc>)
 8016330:	f009 facc 	bl	801f8cc <iprintf>
					record_count++) {
 8016334:	683b      	ldr	r3, [r7, #0]
 8016336:	3301      	adds	r3, #1
 8016338:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	2b03      	cmp	r3, #3
 801633e:	dde6      	ble.n	801630e <record_print+0x9e>
			printf("\n");
 8016340:	200a      	movs	r0, #10
 8016342:	f009 fadb 	bl	801f8fc <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	3301      	adds	r3, #1
 801634a:	60fb      	str	r3, [r7, #12]
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016352:	4293      	cmp	r3, r2
 8016354:	ddc5      	ble.n	80162e2 <record_print+0x72>
}
 8016356:	bf00      	nop
 8016358:	3710      	adds	r7, #16
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
 801635e:	bf00      	nop
 8016360:	2000d978 	.word	0x2000d978
 8016364:	080222dc 	.word	0x080222dc
 8016368:	20001dec 	.word	0x20001dec
 801636c:	080222e0 	.word	0x080222e0
 8016370:	2000d970 	.word	0x2000d970
 8016374:	2000d974 	.word	0x2000d974

08016378 <interrupt_record>:

void interrupt_record(void) {
 8016378:	b580      	push	{r7, lr}
 801637a:	b084      	sub	sp, #16
 801637c:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 801637e:	4baf      	ldr	r3, [pc, #700]	; (801663c <interrupt_record+0x2c4>)
 8016380:	781b      	ldrb	r3, [r3, #0]
 8016382:	2b01      	cmp	r3, #1
 8016384:	d110      	bne.n	80163a8 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016386:	4bae      	ldr	r3, [pc, #696]	; (8016640 <interrupt_record+0x2c8>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 801638c:	4bad      	ldr	r3, [pc, #692]	; (8016644 <interrupt_record+0x2cc>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016392:	4bad      	ldr	r3, [pc, #692]	; (8016648 <interrupt_record+0x2d0>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016398:	4bac      	ldr	r3, [pc, #688]	; (801664c <interrupt_record+0x2d4>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801639e:	463b      	mov	r3, r7
 80163a0:	2104      	movs	r1, #4
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7ff ff1e 	bl	80161e4 <record_data>
		}
	if (record_mode == 2) {
 80163a8:	4ba4      	ldr	r3, [pc, #656]	; (801663c <interrupt_record+0x2c4>)
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	2b02      	cmp	r3, #2
 80163ae:	d11b      	bne.n	80163e8 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 80163b0:	4ba7      	ldr	r3, [pc, #668]	; (8016650 <interrupt_record+0x2d8>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 80163b6:	4ba7      	ldr	r3, [pc, #668]	; (8016654 <interrupt_record+0x2dc>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 80163bc:	4ba6      	ldr	r3, [pc, #664]	; (8016658 <interrupt_record+0x2e0>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 80163c2:	4ba6      	ldr	r3, [pc, #664]	; (801665c <interrupt_record+0x2e4>)
 80163c4:	ed93 7a00 	vldr	s14, [r3]
 80163c8:	4ba5      	ldr	r3, [pc, #660]	; (8016660 <interrupt_record+0x2e8>)
 80163ca:	edd3 7a00 	vldr	s15, [r3]
 80163ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80163d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80163d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80163da:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 80163de:	463b      	mov	r3, r7
 80163e0:	2104      	movs	r1, #4
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7ff fefe 	bl	80161e4 <record_data>
		}
	if (record_mode == 3) {
 80163e8:	4b94      	ldr	r3, [pc, #592]	; (801663c <interrupt_record+0x2c4>)
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	2b03      	cmp	r3, #3
 80163ee:	d126      	bne.n	801643e <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 80163f0:	4b99      	ldr	r3, [pc, #612]	; (8016658 <interrupt_record+0x2e0>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 80163f6:	4b98      	ldr	r3, [pc, #608]	; (8016658 <interrupt_record+0x2e0>)
 80163f8:	689b      	ldr	r3, [r3, #8]
 80163fa:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 80163fc:	4b97      	ldr	r3, [pc, #604]	; (801665c <interrupt_record+0x2e4>)
 80163fe:	ed93 7a00 	vldr	s14, [r3]
 8016402:	4b97      	ldr	r3, [pc, #604]	; (8016660 <interrupt_record+0x2e8>)
 8016404:	edd3 7a00 	vldr	s15, [r3]
 8016408:	ee37 7a27 	vadd.f32	s14, s14, s15
 801640c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016414:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016418:	4b92      	ldr	r3, [pc, #584]	; (8016664 <interrupt_record+0x2ec>)
 801641a:	ed93 7a00 	vldr	s14, [r3]
 801641e:	4b92      	ldr	r3, [pc, #584]	; (8016668 <interrupt_record+0x2f0>)
 8016420:	edd3 7a00 	vldr	s15, [r3]
 8016424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016428:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801642c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016430:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016434:	463b      	mov	r3, r7
 8016436:	2104      	movs	r1, #4
 8016438:	4618      	mov	r0, r3
 801643a:	f7ff fed3 	bl	80161e4 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 801643e:	4b7f      	ldr	r3, [pc, #508]	; (801663c <interrupt_record+0x2c4>)
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	2b04      	cmp	r3, #4
 8016444:	d126      	bne.n	8016494 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8016446:	4b84      	ldr	r3, [pc, #528]	; (8016658 <interrupt_record+0x2e0>)
 8016448:	689b      	ldr	r3, [r3, #8]
 801644a:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 801644c:	4b7e      	ldr	r3, [pc, #504]	; (8016648 <interrupt_record+0x2d0>)
 801644e:	ed93 7a00 	vldr	s14, [r3]
 8016452:	4b7e      	ldr	r3, [pc, #504]	; (801664c <interrupt_record+0x2d4>)
 8016454:	edd3 7a00 	vldr	s15, [r3]
 8016458:	ee37 7a27 	vadd.f32	s14, s14, s15
 801645c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016464:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016468:	4b80      	ldr	r3, [pc, #512]	; (801666c <interrupt_record+0x2f4>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 801646e:	4b7d      	ldr	r3, [pc, #500]	; (8016664 <interrupt_record+0x2ec>)
 8016470:	ed93 7a00 	vldr	s14, [r3]
 8016474:	4b7c      	ldr	r3, [pc, #496]	; (8016668 <interrupt_record+0x2f0>)
 8016476:	edd3 7a00 	vldr	s15, [r3]
 801647a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801647e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016486:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 801648a:	463b      	mov	r3, r7
 801648c:	2104      	movs	r1, #4
 801648e:	4618      	mov	r0, r3
 8016490:	f7ff fea8 	bl	80161e4 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016494:	4b69      	ldr	r3, [pc, #420]	; (801663c <interrupt_record+0x2c4>)
 8016496:	781b      	ldrb	r3, [r3, #0]
 8016498:	2b05      	cmp	r3, #5
 801649a:	d110      	bne.n	80164be <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 801649c:	4b6e      	ldr	r3, [pc, #440]	; (8016658 <interrupt_record+0x2e0>)
 801649e:	689b      	ldr	r3, [r3, #8]
 80164a0:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80164a2:	4b69      	ldr	r3, [pc, #420]	; (8016648 <interrupt_record+0x2d0>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80164a8:	4b68      	ldr	r3, [pc, #416]	; (801664c <interrupt_record+0x2d4>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80164ae:	4b6f      	ldr	r3, [pc, #444]	; (801666c <interrupt_record+0x2f4>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80164b4:	463b      	mov	r3, r7
 80164b6:	2104      	movs	r1, #4
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7ff fe93 	bl	80161e4 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80164be:	4b5f      	ldr	r3, [pc, #380]	; (801663c <interrupt_record+0x2c4>)
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	2b05      	cmp	r3, #5
 80164c4:	d110      	bne.n	80164e8 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 80164c6:	4b6a      	ldr	r3, [pc, #424]	; (8016670 <interrupt_record+0x2f8>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80164cc:	4b5e      	ldr	r3, [pc, #376]	; (8016648 <interrupt_record+0x2d0>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80164d2:	4b5e      	ldr	r3, [pc, #376]	; (801664c <interrupt_record+0x2d4>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80164d8:	4b64      	ldr	r3, [pc, #400]	; (801666c <interrupt_record+0x2f4>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80164de:	463b      	mov	r3, r7
 80164e0:	2104      	movs	r1, #4
 80164e2:	4618      	mov	r0, r3
 80164e4:	f7ff fe7e 	bl	80161e4 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80164e8:	4b54      	ldr	r3, [pc, #336]	; (801663c <interrupt_record+0x2c4>)
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	2b06      	cmp	r3, #6
 80164ee:	d110      	bne.n	8016512 <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 80164f0:	4b59      	ldr	r3, [pc, #356]	; (8016658 <interrupt_record+0x2e0>)
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 80164f6:	4b5f      	ldr	r3, [pc, #380]	; (8016674 <interrupt_record+0x2fc>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 80164fc:	4b5e      	ldr	r3, [pc, #376]	; (8016678 <interrupt_record+0x300>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8016502:	4b5e      	ldr	r3, [pc, #376]	; (801667c <interrupt_record+0x304>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016508:	463b      	mov	r3, r7
 801650a:	2104      	movs	r1, #4
 801650c:	4618      	mov	r0, r3
 801650e:	f7ff fe69 	bl	80161e4 <record_data>
			}
	if (record_mode == 7) {
 8016512:	4b4a      	ldr	r3, [pc, #296]	; (801663c <interrupt_record+0x2c4>)
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	2b07      	cmp	r3, #7
 8016518:	d125      	bne.n	8016566 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 801651a:	4b59      	ldr	r3, [pc, #356]	; (8016680 <interrupt_record+0x308>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	ee07 3a90 	vmov	s15, r3
 8016522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016526:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 801652a:	4b56      	ldr	r3, [pc, #344]	; (8016684 <interrupt_record+0x30c>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	ee07 3a90 	vmov	s15, r3
 8016532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016536:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 801653a:	4b51      	ldr	r3, [pc, #324]	; (8016680 <interrupt_record+0x308>)
 801653c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016540:	ee07 3a90 	vmov	s15, r3
 8016544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016548:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 801654c:	4b4d      	ldr	r3, [pc, #308]	; (8016684 <interrupt_record+0x30c>)
 801654e:	691b      	ldr	r3, [r3, #16]
 8016550:	ee07 3a90 	vmov	s15, r3
 8016554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016558:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 801655c:	463b      	mov	r3, r7
 801655e:	2104      	movs	r1, #4
 8016560:	4618      	mov	r0, r3
 8016562:	f7ff fe3f 	bl	80161e4 <record_data>
		}
	if (record_mode == 8) {
 8016566:	4b35      	ldr	r3, [pc, #212]	; (801663c <interrupt_record+0x2c4>)
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	2b08      	cmp	r3, #8
 801656c:	d125      	bne.n	80165ba <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 801656e:	4b44      	ldr	r3, [pc, #272]	; (8016680 <interrupt_record+0x308>)
 8016570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016572:	ee07 3a90 	vmov	s15, r3
 8016576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801657a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 801657e:	4b42      	ldr	r3, [pc, #264]	; (8016688 <interrupt_record+0x310>)
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	ee07 3a90 	vmov	s15, r3
 8016586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801658a:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 801658e:	4b3c      	ldr	r3, [pc, #240]	; (8016680 <interrupt_record+0x308>)
 8016590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016594:	ee07 3a90 	vmov	s15, r3
 8016598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801659c:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 80165a0:	4b39      	ldr	r3, [pc, #228]	; (8016688 <interrupt_record+0x310>)
 80165a2:	68db      	ldr	r3, [r3, #12]
 80165a4:	ee07 3a90 	vmov	s15, r3
 80165a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165ac:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80165b0:	463b      	mov	r3, r7
 80165b2:	2104      	movs	r1, #4
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7ff fe15 	bl	80161e4 <record_data>
		}
	if (record_mode == 9) { //90
 80165ba:	4b20      	ldr	r3, [pc, #128]	; (801663c <interrupt_record+0x2c4>)
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	2b09      	cmp	r3, #9
 80165c0:	d11b      	bne.n	80165fa <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80165c2:	4b2f      	ldr	r3, [pc, #188]	; (8016680 <interrupt_record+0x308>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	ee07 3a90 	vmov	s15, r3
 80165ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165ce:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 80165d2:	4b2b      	ldr	r3, [pc, #172]	; (8016680 <interrupt_record+0x308>)
 80165d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80165d8:	ee07 3a90 	vmov	s15, r3
 80165dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165e0:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80165e4:	4b29      	ldr	r3, [pc, #164]	; (801668c <interrupt_record+0x314>)
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80165ea:	4b29      	ldr	r3, [pc, #164]	; (8016690 <interrupt_record+0x318>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80165f0:	463b      	mov	r3, r7
 80165f2:	2104      	movs	r1, #4
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7ff fdf5 	bl	80161e4 <record_data>
		}
	if (record_mode == 10) { //90
 80165fa:	4b10      	ldr	r3, [pc, #64]	; (801663c <interrupt_record+0x2c4>)
 80165fc:	781b      	ldrb	r3, [r3, #0]
 80165fe:	2b0a      	cmp	r3, #10
 8016600:	d148      	bne.n	8016694 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016602:	4b1f      	ldr	r3, [pc, #124]	; (8016680 <interrupt_record+0x308>)
 8016604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016606:	ee07 3a90 	vmov	s15, r3
 801660a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801660e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016612:	4b1b      	ldr	r3, [pc, #108]	; (8016680 <interrupt_record+0x308>)
 8016614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016618:	ee07 3a90 	vmov	s15, r3
 801661c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016620:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016624:	4b19      	ldr	r3, [pc, #100]	; (801668c <interrupt_record+0x314>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 801662a:	4b19      	ldr	r3, [pc, #100]	; (8016690 <interrupt_record+0x318>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016630:	463b      	mov	r3, r7
 8016632:	2104      	movs	r1, #4
 8016634:	4618      	mov	r0, r3
 8016636:	f7ff fdd5 	bl	80161e4 <record_data>
 801663a:	e02b      	b.n	8016694 <interrupt_record+0x31c>
 801663c:	2000d96c 	.word	0x2000d96c
 8016640:	2000022c 	.word	0x2000022c
 8016644:	20000228 	.word	0x20000228
 8016648:	20000224 	.word	0x20000224
 801664c:	20000220 	.word	0x20000220
 8016650:	200004e4 	.word	0x200004e4
 8016654:	20000268 	.word	0x20000268
 8016658:	200004d8 	.word	0x200004d8
 801665c:	2000025c 	.word	0x2000025c
 8016660:	20000258 	.word	0x20000258
 8016664:	20000254 	.word	0x20000254
 8016668:	20000250 	.word	0x20000250
 801666c:	2000027c 	.word	0x2000027c
 8016670:	2000052c 	.word	0x2000052c
 8016674:	20000238 	.word	0x20000238
 8016678:	2000023c 	.word	0x2000023c
 801667c:	20000278 	.word	0x20000278
 8016680:	200002b8 	.word	0x200002b8
 8016684:	20000448 	.word	0x20000448
 8016688:	2000045c 	.word	0x2000045c
 801668c:	200005e0 	.word	0x200005e0
 8016690:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8016694:	bf00      	nop
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80166a0:	4b1b      	ldr	r3, [pc, #108]	; (8016710 <MX_SPI1_Init+0x74>)
 80166a2:	4a1c      	ldr	r2, [pc, #112]	; (8016714 <MX_SPI1_Init+0x78>)
 80166a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80166a6:	4b1a      	ldr	r3, [pc, #104]	; (8016710 <MX_SPI1_Init+0x74>)
 80166a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80166ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80166ae:	4b18      	ldr	r3, [pc, #96]	; (8016710 <MX_SPI1_Init+0x74>)
 80166b0:	2200      	movs	r2, #0
 80166b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80166b4:	4b16      	ldr	r3, [pc, #88]	; (8016710 <MX_SPI1_Init+0x74>)
 80166b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80166ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80166bc:	4b14      	ldr	r3, [pc, #80]	; (8016710 <MX_SPI1_Init+0x74>)
 80166be:	2200      	movs	r2, #0
 80166c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80166c2:	4b13      	ldr	r3, [pc, #76]	; (8016710 <MX_SPI1_Init+0x74>)
 80166c4:	2200      	movs	r2, #0
 80166c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80166c8:	4b11      	ldr	r3, [pc, #68]	; (8016710 <MX_SPI1_Init+0x74>)
 80166ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80166ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80166d0:	4b0f      	ldr	r3, [pc, #60]	; (8016710 <MX_SPI1_Init+0x74>)
 80166d2:	2218      	movs	r2, #24
 80166d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80166d6:	4b0e      	ldr	r3, [pc, #56]	; (8016710 <MX_SPI1_Init+0x74>)
 80166d8:	2200      	movs	r2, #0
 80166da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80166dc:	4b0c      	ldr	r3, [pc, #48]	; (8016710 <MX_SPI1_Init+0x74>)
 80166de:	2200      	movs	r2, #0
 80166e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80166e2:	4b0b      	ldr	r3, [pc, #44]	; (8016710 <MX_SPI1_Init+0x74>)
 80166e4:	2200      	movs	r2, #0
 80166e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80166e8:	4b09      	ldr	r3, [pc, #36]	; (8016710 <MX_SPI1_Init+0x74>)
 80166ea:	2207      	movs	r2, #7
 80166ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80166ee:	4b08      	ldr	r3, [pc, #32]	; (8016710 <MX_SPI1_Init+0x74>)
 80166f0:	2200      	movs	r2, #0
 80166f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80166f4:	4b06      	ldr	r3, [pc, #24]	; (8016710 <MX_SPI1_Init+0x74>)
 80166f6:	2208      	movs	r2, #8
 80166f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80166fa:	4805      	ldr	r0, [pc, #20]	; (8016710 <MX_SPI1_Init+0x74>)
 80166fc:	f005 fb88 	bl	801be10 <HAL_SPI_Init>
 8016700:	4603      	mov	r3, r0
 8016702:	2b00      	cmp	r3, #0
 8016704:	d001      	beq.n	801670a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8016706:	f7f3 fd92 	bl	800a22e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801670a:	bf00      	nop
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop
 8016710:	2000d97c 	.word	0x2000d97c
 8016714:	40013000 	.word	0x40013000

08016718 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 801671c:	4b1b      	ldr	r3, [pc, #108]	; (801678c <MX_SPI3_Init+0x74>)
 801671e:	4a1c      	ldr	r2, [pc, #112]	; (8016790 <MX_SPI3_Init+0x78>)
 8016720:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8016722:	4b1a      	ldr	r3, [pc, #104]	; (801678c <MX_SPI3_Init+0x74>)
 8016724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016728:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801672a:	4b18      	ldr	r3, [pc, #96]	; (801678c <MX_SPI3_Init+0x74>)
 801672c:	2200      	movs	r2, #0
 801672e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8016730:	4b16      	ldr	r3, [pc, #88]	; (801678c <MX_SPI3_Init+0x74>)
 8016732:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016736:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016738:	4b14      	ldr	r3, [pc, #80]	; (801678c <MX_SPI3_Init+0x74>)
 801673a:	2200      	movs	r2, #0
 801673c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801673e:	4b13      	ldr	r3, [pc, #76]	; (801678c <MX_SPI3_Init+0x74>)
 8016740:	2201      	movs	r2, #1
 8016742:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8016744:	4b11      	ldr	r3, [pc, #68]	; (801678c <MX_SPI3_Init+0x74>)
 8016746:	f44f 7200 	mov.w	r2, #512	; 0x200
 801674a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801674c:	4b0f      	ldr	r3, [pc, #60]	; (801678c <MX_SPI3_Init+0x74>)
 801674e:	2218      	movs	r2, #24
 8016750:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016752:	4b0e      	ldr	r3, [pc, #56]	; (801678c <MX_SPI3_Init+0x74>)
 8016754:	2200      	movs	r2, #0
 8016756:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8016758:	4b0c      	ldr	r3, [pc, #48]	; (801678c <MX_SPI3_Init+0x74>)
 801675a:	2200      	movs	r2, #0
 801675c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801675e:	4b0b      	ldr	r3, [pc, #44]	; (801678c <MX_SPI3_Init+0x74>)
 8016760:	2200      	movs	r2, #0
 8016762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8016764:	4b09      	ldr	r3, [pc, #36]	; (801678c <MX_SPI3_Init+0x74>)
 8016766:	2207      	movs	r2, #7
 8016768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801676a:	4b08      	ldr	r3, [pc, #32]	; (801678c <MX_SPI3_Init+0x74>)
 801676c:	2200      	movs	r2, #0
 801676e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8016770:	4b06      	ldr	r3, [pc, #24]	; (801678c <MX_SPI3_Init+0x74>)
 8016772:	2200      	movs	r2, #0
 8016774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8016776:	4805      	ldr	r0, [pc, #20]	; (801678c <MX_SPI3_Init+0x74>)
 8016778:	f005 fb4a 	bl	801be10 <HAL_SPI_Init>
 801677c:	4603      	mov	r3, r0
 801677e:	2b00      	cmp	r3, #0
 8016780:	d001      	beq.n	8016786 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8016782:	f7f3 fd54 	bl	800a22e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8016786:	bf00      	nop
 8016788:	bd80      	pop	{r7, pc}
 801678a:	bf00      	nop
 801678c:	2000d9e0 	.word	0x2000d9e0
 8016790:	40003c00 	.word	0x40003c00

08016794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b08c      	sub	sp, #48	; 0x30
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801679c:	f107 031c 	add.w	r3, r7, #28
 80167a0:	2200      	movs	r2, #0
 80167a2:	601a      	str	r2, [r3, #0]
 80167a4:	605a      	str	r2, [r3, #4]
 80167a6:	609a      	str	r2, [r3, #8]
 80167a8:	60da      	str	r2, [r3, #12]
 80167aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	4a3d      	ldr	r2, [pc, #244]	; (80168a8 <HAL_SPI_MspInit+0x114>)
 80167b2:	4293      	cmp	r3, r2
 80167b4:	d129      	bne.n	801680a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80167b6:	4b3d      	ldr	r3, [pc, #244]	; (80168ac <HAL_SPI_MspInit+0x118>)
 80167b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167ba:	4a3c      	ldr	r2, [pc, #240]	; (80168ac <HAL_SPI_MspInit+0x118>)
 80167bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80167c0:	6613      	str	r3, [r2, #96]	; 0x60
 80167c2:	4b3a      	ldr	r3, [pc, #232]	; (80168ac <HAL_SPI_MspInit+0x118>)
 80167c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80167ca:	61bb      	str	r3, [r7, #24]
 80167cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80167ce:	4b37      	ldr	r3, [pc, #220]	; (80168ac <HAL_SPI_MspInit+0x118>)
 80167d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80167d2:	4a36      	ldr	r2, [pc, #216]	; (80168ac <HAL_SPI_MspInit+0x118>)
 80167d4:	f043 0301 	orr.w	r3, r3, #1
 80167d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80167da:	4b34      	ldr	r3, [pc, #208]	; (80168ac <HAL_SPI_MspInit+0x118>)
 80167dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80167de:	f003 0301 	and.w	r3, r3, #1
 80167e2:	617b      	str	r3, [r7, #20]
 80167e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80167e6:	23e0      	movs	r3, #224	; 0xe0
 80167e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80167ea:	2302      	movs	r3, #2
 80167ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80167ee:	2300      	movs	r3, #0
 80167f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80167f2:	2300      	movs	r3, #0
 80167f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80167f6:	2305      	movs	r3, #5
 80167f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80167fa:	f107 031c 	add.w	r3, r7, #28
 80167fe:	4619      	mov	r1, r3
 8016800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016804:	f004 f94a 	bl	801aa9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8016808:	e049      	b.n	801689e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	4a28      	ldr	r2, [pc, #160]	; (80168b0 <HAL_SPI_MspInit+0x11c>)
 8016810:	4293      	cmp	r3, r2
 8016812:	d144      	bne.n	801689e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8016814:	4b25      	ldr	r3, [pc, #148]	; (80168ac <HAL_SPI_MspInit+0x118>)
 8016816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016818:	4a24      	ldr	r2, [pc, #144]	; (80168ac <HAL_SPI_MspInit+0x118>)
 801681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801681e:	6593      	str	r3, [r2, #88]	; 0x58
 8016820:	4b22      	ldr	r3, [pc, #136]	; (80168ac <HAL_SPI_MspInit+0x118>)
 8016822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016828:	613b      	str	r3, [r7, #16]
 801682a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801682c:	4b1f      	ldr	r3, [pc, #124]	; (80168ac <HAL_SPI_MspInit+0x118>)
 801682e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016830:	4a1e      	ldr	r2, [pc, #120]	; (80168ac <HAL_SPI_MspInit+0x118>)
 8016832:	f043 0304 	orr.w	r3, r3, #4
 8016836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016838:	4b1c      	ldr	r3, [pc, #112]	; (80168ac <HAL_SPI_MspInit+0x118>)
 801683a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801683c:	f003 0304 	and.w	r3, r3, #4
 8016840:	60fb      	str	r3, [r7, #12]
 8016842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016844:	4b19      	ldr	r3, [pc, #100]	; (80168ac <HAL_SPI_MspInit+0x118>)
 8016846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016848:	4a18      	ldr	r2, [pc, #96]	; (80168ac <HAL_SPI_MspInit+0x118>)
 801684a:	f043 0302 	orr.w	r3, r3, #2
 801684e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016850:	4b16      	ldr	r3, [pc, #88]	; (80168ac <HAL_SPI_MspInit+0x118>)
 8016852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016854:	f003 0302 	and.w	r3, r3, #2
 8016858:	60bb      	str	r3, [r7, #8]
 801685a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801685c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8016860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016862:	2302      	movs	r3, #2
 8016864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016866:	2300      	movs	r3, #0
 8016868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801686a:	2300      	movs	r3, #0
 801686c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801686e:	2306      	movs	r3, #6
 8016870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016872:	f107 031c 	add.w	r3, r7, #28
 8016876:	4619      	mov	r1, r3
 8016878:	480e      	ldr	r0, [pc, #56]	; (80168b4 <HAL_SPI_MspInit+0x120>)
 801687a:	f004 f90f 	bl	801aa9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801687e:	2320      	movs	r3, #32
 8016880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016882:	2302      	movs	r3, #2
 8016884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016886:	2300      	movs	r3, #0
 8016888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801688a:	2300      	movs	r3, #0
 801688c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801688e:	2306      	movs	r3, #6
 8016890:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016892:	f107 031c 	add.w	r3, r7, #28
 8016896:	4619      	mov	r1, r3
 8016898:	4807      	ldr	r0, [pc, #28]	; (80168b8 <HAL_SPI_MspInit+0x124>)
 801689a:	f004 f8ff 	bl	801aa9c <HAL_GPIO_Init>
}
 801689e:	bf00      	nop
 80168a0:	3730      	adds	r7, #48	; 0x30
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	40013000 	.word	0x40013000
 80168ac:	40021000 	.word	0x40021000
 80168b0:	40003c00 	.word	0x40003c00
 80168b4:	48000800 	.word	0x48000800
 80168b8:	48000400 	.word	0x48000400

080168bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80168c2:	4b0f      	ldr	r3, [pc, #60]	; (8016900 <HAL_MspInit+0x44>)
 80168c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168c6:	4a0e      	ldr	r2, [pc, #56]	; (8016900 <HAL_MspInit+0x44>)
 80168c8:	f043 0301 	orr.w	r3, r3, #1
 80168cc:	6613      	str	r3, [r2, #96]	; 0x60
 80168ce:	4b0c      	ldr	r3, [pc, #48]	; (8016900 <HAL_MspInit+0x44>)
 80168d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168d2:	f003 0301 	and.w	r3, r3, #1
 80168d6:	607b      	str	r3, [r7, #4]
 80168d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80168da:	4b09      	ldr	r3, [pc, #36]	; (8016900 <HAL_MspInit+0x44>)
 80168dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168de:	4a08      	ldr	r2, [pc, #32]	; (8016900 <HAL_MspInit+0x44>)
 80168e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80168e4:	6593      	str	r3, [r2, #88]	; 0x58
 80168e6:	4b06      	ldr	r3, [pc, #24]	; (8016900 <HAL_MspInit+0x44>)
 80168e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80168ee:	603b      	str	r3, [r7, #0]
 80168f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80168f2:	f004 fb11 	bl	801af18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80168f6:	bf00      	nop
 80168f8:	3708      	adds	r7, #8
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}
 80168fe:	bf00      	nop
 8016900:	40021000 	.word	0x40021000

08016904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016904:	b480      	push	{r7}
 8016906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016908:	e7fe      	b.n	8016908 <NMI_Handler+0x4>

0801690a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801690a:	b480      	push	{r7}
 801690c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 801690e:	e7fe      	b.n	801690e <HardFault_Handler+0x4>

08016910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016910:	b480      	push	{r7}
 8016912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016914:	e7fe      	b.n	8016914 <MemManage_Handler+0x4>

08016916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016916:	b480      	push	{r7}
 8016918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801691a:	e7fe      	b.n	801691a <BusFault_Handler+0x4>

0801691c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801691c:	b480      	push	{r7}
 801691e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016920:	e7fe      	b.n	8016920 <UsageFault_Handler+0x4>

08016922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016922:	b480      	push	{r7}
 8016924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016926:	bf00      	nop
 8016928:	46bd      	mov	sp, r7
 801692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692e:	4770      	bx	lr

08016930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016930:	b480      	push	{r7}
 8016932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016934:	bf00      	nop
 8016936:	46bd      	mov	sp, r7
 8016938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693c:	4770      	bx	lr

0801693e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801693e:	b480      	push	{r7}
 8016940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016942:	bf00      	nop
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr

0801694c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016950:	f001 f84c 	bl	80179ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016954:	bf00      	nop
 8016956:	bd80      	pop	{r7, pc}

08016958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801695c:	4802      	ldr	r0, [pc, #8]	; (8016968 <DMA1_Channel1_IRQHandler+0x10>)
 801695e:	f003 fce5 	bl	801a32c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8016962:	bf00      	nop
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	200007a0 	.word	0x200007a0

0801696c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8016970:	4802      	ldr	r0, [pc, #8]	; (801697c <ADC1_2_IRQHandler+0x10>)
 8016972:	f001 ffeb 	bl	801894c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8016976:	bf00      	nop
 8016978:	bd80      	pop	{r7, pc}
 801697a:	bf00      	nop
 801697c:	20000734 	.word	0x20000734

08016980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8016984:	480d      	ldr	r0, [pc, #52]	; (80169bc <TIM6_DAC_IRQHandler+0x3c>)
 8016986:	f006 fc23 	bl	801d1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 801698a:	f7f1 fc71 	bl	8008270 <interrupt_timer>
  interupt_calSensor();
 801698e:	f7eb f9bd 	bl	8001d0c <interupt_calSensor>
  ICM20602_DataUpdate();
 8016992:	f7f1 f975 	bl	8007c80 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8016996:	f7ea ffc7 	bl	8001928 <interrupt_calGyro>
  AS5047_DataUpdate();
 801699a:	f7f0 fe2d 	bl	80075f8 <AS5047_DataUpdate>
  interupt_calEncoder();
 801699e:	f7ea fb63 	bl	8001068 <interupt_calEncoder>
  interupt_calFusion();
 80169a2:	f7ea fd21 	bl	80013e8 <interupt_calFusion>
  interrupt_WallCut();
 80169a6:	f7ef fdf7 	bl	8006598 <interrupt_WallCut>
  interupt_DriveMotor();
 80169aa:	f7eb fb39 	bl	8002020 <interupt_DriveMotor>

  interrupt_FailSafe();
 80169ae:	f7f3 f993 	bl	8009cd8 <interrupt_FailSafe>
  interrupt_record();
 80169b2:	f7ff fce1 	bl	8016378 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80169b6:	bf00      	nop
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	2000da48 	.word	0x2000da48

080169c0 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80169c0:	b480      	push	{r7}
 80169c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80169c4:	bf00      	nop
 80169c6:	46bd      	mov	sp, r7
 80169c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169cc:	4770      	bx	lr

080169ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80169ce:	b480      	push	{r7}
 80169d0:	af00      	add	r7, sp, #0
	return 1;
 80169d2:	2301      	movs	r3, #1
}
 80169d4:	4618      	mov	r0, r3
 80169d6:	46bd      	mov	sp, r7
 80169d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169dc:	4770      	bx	lr

080169de <_kill>:

int _kill(int pid, int sig)
{
 80169de:	b580      	push	{r7, lr}
 80169e0:	b082      	sub	sp, #8
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
 80169e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80169e8:	f008 fac6 	bl	801ef78 <__errno>
 80169ec:	4603      	mov	r3, r0
 80169ee:	2216      	movs	r2, #22
 80169f0:	601a      	str	r2, [r3, #0]
	return -1;
 80169f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3708      	adds	r7, #8
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}

080169fe <_exit>:

void _exit (int status)
{
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b082      	sub	sp, #8
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016a06:	f04f 31ff 	mov.w	r1, #4294967295
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f7ff ffe7 	bl	80169de <_kill>
	while (1) {}		/* Make sure we hang here */
 8016a10:	e7fe      	b.n	8016a10 <_exit+0x12>

08016a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016a12:	b580      	push	{r7, lr}
 8016a14:	b086      	sub	sp, #24
 8016a16:	af00      	add	r7, sp, #0
 8016a18:	60f8      	str	r0, [r7, #12]
 8016a1a:	60b9      	str	r1, [r7, #8]
 8016a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a1e:	2300      	movs	r3, #0
 8016a20:	617b      	str	r3, [r7, #20]
 8016a22:	e00a      	b.n	8016a3a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016a24:	f3af 8000 	nop.w
 8016a28:	4601      	mov	r1, r0
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	1c5a      	adds	r2, r3, #1
 8016a2e:	60ba      	str	r2, [r7, #8]
 8016a30:	b2ca      	uxtb	r2, r1
 8016a32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	3301      	adds	r3, #1
 8016a38:	617b      	str	r3, [r7, #20]
 8016a3a:	697a      	ldr	r2, [r7, #20]
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	dbf0      	blt.n	8016a24 <_read+0x12>
	}

return len;
 8016a42:	687b      	ldr	r3, [r7, #4]
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3718      	adds	r7, #24
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b086      	sub	sp, #24
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	60b9      	str	r1, [r7, #8]
 8016a56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a58:	2300      	movs	r3, #0
 8016a5a:	617b      	str	r3, [r7, #20]
 8016a5c:	e00a      	b.n	8016a74 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8016a5e:	68b9      	ldr	r1, [r7, #8]
 8016a60:	1c4b      	adds	r3, r1, #1
 8016a62:	60bb      	str	r3, [r7, #8]
 8016a64:	2301      	movs	r3, #1
 8016a66:	2201      	movs	r2, #1
 8016a68:	4807      	ldr	r0, [pc, #28]	; (8016a88 <_write+0x3c>)
 8016a6a:	f007 fc3b 	bl	801e2e4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	3301      	adds	r3, #1
 8016a72:	617b      	str	r3, [r7, #20]
 8016a74:	697a      	ldr	r2, [r7, #20]
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	dbf0      	blt.n	8016a5e <_write+0x12>
	}
	return len;
 8016a7c:	687b      	ldr	r3, [r7, #4]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3718      	adds	r7, #24
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop
 8016a88:	2000df04 	.word	0x2000df04

08016a8c <_close>:

int _close(int file)
{
 8016a8c:	b480      	push	{r7}
 8016a8e:	b083      	sub	sp, #12
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
	return -1;
 8016a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	370c      	adds	r7, #12
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr

08016aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016ab4:	605a      	str	r2, [r3, #4]
	return 0;
 8016ab6:	2300      	movs	r3, #0
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	370c      	adds	r7, #12
 8016abc:	46bd      	mov	sp, r7
 8016abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac2:	4770      	bx	lr

08016ac4 <_isatty>:

int _isatty(int file)
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
	return 1;
 8016acc:	2301      	movs	r3, #1
}
 8016ace:	4618      	mov	r0, r3
 8016ad0:	370c      	adds	r7, #12
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad8:	4770      	bx	lr

08016ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016ada:	b480      	push	{r7}
 8016adc:	b085      	sub	sp, #20
 8016ade:	af00      	add	r7, sp, #0
 8016ae0:	60f8      	str	r0, [r7, #12]
 8016ae2:	60b9      	str	r1, [r7, #8]
 8016ae4:	607a      	str	r2, [r7, #4]
	return 0;
 8016ae6:	2300      	movs	r3, #0
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	3714      	adds	r7, #20
 8016aec:	46bd      	mov	sp, r7
 8016aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af2:	4770      	bx	lr

08016af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b086      	sub	sp, #24
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016afc:	4a14      	ldr	r2, [pc, #80]	; (8016b50 <_sbrk+0x5c>)
 8016afe:	4b15      	ldr	r3, [pc, #84]	; (8016b54 <_sbrk+0x60>)
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016b08:	4b13      	ldr	r3, [pc, #76]	; (8016b58 <_sbrk+0x64>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d102      	bne.n	8016b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016b10:	4b11      	ldr	r3, [pc, #68]	; (8016b58 <_sbrk+0x64>)
 8016b12:	4a12      	ldr	r2, [pc, #72]	; (8016b5c <_sbrk+0x68>)
 8016b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016b16:	4b10      	ldr	r3, [pc, #64]	; (8016b58 <_sbrk+0x64>)
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	693a      	ldr	r2, [r7, #16]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d207      	bcs.n	8016b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016b24:	f008 fa28 	bl	801ef78 <__errno>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	220c      	movs	r2, #12
 8016b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8016b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8016b32:	e009      	b.n	8016b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8016b34:	4b08      	ldr	r3, [pc, #32]	; (8016b58 <_sbrk+0x64>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016b3a:	4b07      	ldr	r3, [pc, #28]	; (8016b58 <_sbrk+0x64>)
 8016b3c:	681a      	ldr	r2, [r3, #0]
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	4413      	add	r3, r2
 8016b42:	4a05      	ldr	r2, [pc, #20]	; (8016b58 <_sbrk+0x64>)
 8016b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016b46:	68fb      	ldr	r3, [r7, #12]
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3718      	adds	r7, #24
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	2001c000 	.word	0x2001c000
 8016b54:	00000400 	.word	0x00000400
 8016b58:	2000da44 	.word	0x2000da44
 8016b5c:	2000dfa8 	.word	0x2000dfa8

08016b60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8016b60:	b480      	push	{r7}
 8016b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8016b64:	4b06      	ldr	r3, [pc, #24]	; (8016b80 <SystemInit+0x20>)
 8016b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b6a:	4a05      	ldr	r2, [pc, #20]	; (8016b80 <SystemInit+0x20>)
 8016b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016b74:	bf00      	nop
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr
 8016b7e:	bf00      	nop
 8016b80:	e000ed00 	.word	0xe000ed00

08016b84 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b084      	sub	sp, #16
 8016b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016b8a:	1d3b      	adds	r3, r7, #4
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	601a      	str	r2, [r3, #0]
 8016b90:	605a      	str	r2, [r3, #4]
 8016b92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8016b94:	4b14      	ldr	r3, [pc, #80]	; (8016be8 <MX_TIM6_Init+0x64>)
 8016b96:	4a15      	ldr	r2, [pc, #84]	; (8016bec <MX_TIM6_Init+0x68>)
 8016b98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8016b9a:	4b13      	ldr	r3, [pc, #76]	; (8016be8 <MX_TIM6_Init+0x64>)
 8016b9c:	2254      	movs	r2, #84	; 0x54
 8016b9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016ba0:	4b11      	ldr	r3, [pc, #68]	; (8016be8 <MX_TIM6_Init+0x64>)
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8016ba6:	4b10      	ldr	r3, [pc, #64]	; (8016be8 <MX_TIM6_Init+0x64>)
 8016ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8016bac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016bae:	4b0e      	ldr	r3, [pc, #56]	; (8016be8 <MX_TIM6_Init+0x64>)
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8016bb4:	480c      	ldr	r0, [pc, #48]	; (8016be8 <MX_TIM6_Init+0x64>)
 8016bb6:	f006 f843 	bl	801cc40 <HAL_TIM_Base_Init>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d001      	beq.n	8016bc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8016bc0:	f7f3 fb35 	bl	800a22e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016bc8:	2300      	movs	r3, #0
 8016bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8016bcc:	1d3b      	adds	r3, r7, #4
 8016bce:	4619      	mov	r1, r3
 8016bd0:	4805      	ldr	r0, [pc, #20]	; (8016be8 <MX_TIM6_Init+0x64>)
 8016bd2:	f007 f9b1 	bl	801df38 <HAL_TIMEx_MasterConfigSynchronization>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d001      	beq.n	8016be0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8016bdc:	f7f3 fb27 	bl	800a22e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8016be0:	bf00      	nop
 8016be2:	3710      	adds	r7, #16
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}
 8016be8:	2000da48 	.word	0x2000da48
 8016bec:	40001000 	.word	0x40001000

08016bf0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b098      	sub	sp, #96	; 0x60
 8016bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016bf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	601a      	str	r2, [r3, #0]
 8016bfe:	605a      	str	r2, [r3, #4]
 8016c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016c02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c06:	2200      	movs	r2, #0
 8016c08:	601a      	str	r2, [r3, #0]
 8016c0a:	605a      	str	r2, [r3, #4]
 8016c0c:	609a      	str	r2, [r3, #8]
 8016c0e:	60da      	str	r2, [r3, #12]
 8016c10:	611a      	str	r2, [r3, #16]
 8016c12:	615a      	str	r2, [r3, #20]
 8016c14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016c16:	1d3b      	adds	r3, r7, #4
 8016c18:	2234      	movs	r2, #52	; 0x34
 8016c1a:	2100      	movs	r1, #0
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f008 f9e3 	bl	801efe8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8016c22:	4b41      	ldr	r3, [pc, #260]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c24:	4a41      	ldr	r2, [pc, #260]	; (8016d2c <MX_TIM8_Init+0x13c>)
 8016c26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8016c28:	4b3f      	ldr	r3, [pc, #252]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c2a:	2201      	movs	r2, #1
 8016c2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016c2e:	4b3e      	ldr	r3, [pc, #248]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c30:	2200      	movs	r2, #0
 8016c32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8016c34:	4b3c      	ldr	r3, [pc, #240]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c36:	f240 628f 	movw	r2, #1679	; 0x68f
 8016c3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016c3c:	4b3a      	ldr	r3, [pc, #232]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c3e:	2200      	movs	r2, #0
 8016c40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8016c42:	4b39      	ldr	r3, [pc, #228]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c44:	2200      	movs	r2, #0
 8016c46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016c48:	4b37      	ldr	r3, [pc, #220]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8016c4e:	4836      	ldr	r0, [pc, #216]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c50:	f006 f8be 	bl	801cdd0 <HAL_TIM_PWM_Init>
 8016c54:	4603      	mov	r3, r0
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d001      	beq.n	8016c5e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8016c5a:	f7f3 fae8 	bl	800a22e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016c62:	2300      	movs	r3, #0
 8016c64:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016c66:	2300      	movs	r3, #0
 8016c68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8016c6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016c6e:	4619      	mov	r1, r3
 8016c70:	482d      	ldr	r0, [pc, #180]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016c72:	f007 f961 	bl	801df38 <HAL_TIMEx_MasterConfigSynchronization>
 8016c76:	4603      	mov	r3, r0
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d001      	beq.n	8016c80 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8016c7c:	f7f3 fad7 	bl	800a22e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016c80:	2360      	movs	r3, #96	; 0x60
 8016c82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8016c84:	f240 13a3 	movw	r3, #419	; 0x1a3
 8016c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016c92:	2300      	movs	r3, #0
 8016c94:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016c96:	2300      	movs	r3, #0
 8016c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016c9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	4820      	ldr	r0, [pc, #128]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016ca8:	f006 fc12 	bl	801d4d0 <HAL_TIM_PWM_ConfigChannel>
 8016cac:	4603      	mov	r3, r0
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d001      	beq.n	8016cb6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8016cb2:	f7f3 fabc 	bl	800a22e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8016cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016cba:	2208      	movs	r2, #8
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	481a      	ldr	r0, [pc, #104]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016cc0:	f006 fc06 	bl	801d4d0 <HAL_TIM_PWM_ConfigChannel>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d001      	beq.n	8016cce <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8016cca:	f7f3 fab0 	bl	800a22e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016ce6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8016cec:	2300      	movs	r3, #0
 8016cee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016d02:	2300      	movs	r3, #0
 8016d04:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8016d06:	1d3b      	adds	r3, r7, #4
 8016d08:	4619      	mov	r1, r3
 8016d0a:	4807      	ldr	r0, [pc, #28]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016d0c:	f007 f9a2 	bl	801e054 <HAL_TIMEx_ConfigBreakDeadTime>
 8016d10:	4603      	mov	r3, r0
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d001      	beq.n	8016d1a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8016d16:	f7f3 fa8a 	bl	800a22e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8016d1a:	4803      	ldr	r0, [pc, #12]	; (8016d28 <MX_TIM8_Init+0x138>)
 8016d1c:	f000 f8da 	bl	8016ed4 <HAL_TIM_MspPostInit>

}
 8016d20:	bf00      	nop
 8016d22:	3760      	adds	r7, #96	; 0x60
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bd80      	pop	{r7, pc}
 8016d28:	2000da94 	.word	0x2000da94
 8016d2c:	40013400 	.word	0x40013400

08016d30 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b094      	sub	sp, #80	; 0x50
 8016d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8016d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	601a      	str	r2, [r3, #0]
 8016d3e:	605a      	str	r2, [r3, #4]
 8016d40:	609a      	str	r2, [r3, #8]
 8016d42:	60da      	str	r2, [r3, #12]
 8016d44:	611a      	str	r2, [r3, #16]
 8016d46:	615a      	str	r2, [r3, #20]
 8016d48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016d4a:	463b      	mov	r3, r7
 8016d4c:	2234      	movs	r2, #52	; 0x34
 8016d4e:	2100      	movs	r1, #0
 8016d50:	4618      	mov	r0, r3
 8016d52:	f008 f949 	bl	801efe8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8016d56:	4b30      	ldr	r3, [pc, #192]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d58:	4a30      	ldr	r2, [pc, #192]	; (8016e1c <MX_TIM16_Init+0xec>)
 8016d5a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8016d5c:	4b2e      	ldr	r3, [pc, #184]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d5e:	2201      	movs	r2, #1
 8016d60:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016d62:	4b2d      	ldr	r3, [pc, #180]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d64:	2200      	movs	r2, #0
 8016d66:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8016d68:	4b2b      	ldr	r3, [pc, #172]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d6a:	2264      	movs	r2, #100	; 0x64
 8016d6c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016d6e:	4b2a      	ldr	r3, [pc, #168]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d70:	2200      	movs	r2, #0
 8016d72:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8016d74:	4b28      	ldr	r3, [pc, #160]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d76:	2200      	movs	r2, #0
 8016d78:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016d7a:	4b27      	ldr	r3, [pc, #156]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8016d80:	4825      	ldr	r0, [pc, #148]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d82:	f005 ff5d 	bl	801cc40 <HAL_TIM_Base_Init>
 8016d86:	4603      	mov	r3, r0
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d001      	beq.n	8016d90 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8016d8c:	f7f3 fa4f 	bl	800a22e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8016d90:	4821      	ldr	r0, [pc, #132]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016d92:	f006 f81d 	bl	801cdd0 <HAL_TIM_PWM_Init>
 8016d96:	4603      	mov	r3, r0
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d001      	beq.n	8016da0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8016d9c:	f7f3 fa47 	bl	800a22e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016da0:	2360      	movs	r3, #96	; 0x60
 8016da2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8016da4:	231e      	movs	r3, #30
 8016da6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016da8:	2300      	movs	r3, #0
 8016daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016dac:	2300      	movs	r3, #0
 8016dae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016db0:	2300      	movs	r3, #0
 8016db2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016db4:	2300      	movs	r3, #0
 8016db6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016db8:	2300      	movs	r3, #0
 8016dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016dbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	4814      	ldr	r0, [pc, #80]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016dc6:	f006 fb83 	bl	801d4d0 <HAL_TIM_PWM_ConfigChannel>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d001      	beq.n	8016dd4 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8016dd0:	f7f3 fa2d 	bl	800a22e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016de0:	2300      	movs	r3, #0
 8016de2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016de4:	2300      	movs	r3, #0
 8016de6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016dec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016dee:	2300      	movs	r3, #0
 8016df0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016df2:	2300      	movs	r3, #0
 8016df4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8016df6:	463b      	mov	r3, r7
 8016df8:	4619      	mov	r1, r3
 8016dfa:	4807      	ldr	r0, [pc, #28]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016dfc:	f007 f92a 	bl	801e054 <HAL_TIMEx_ConfigBreakDeadTime>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d001      	beq.n	8016e0a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8016e06:	f7f3 fa12 	bl	800a22e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8016e0a:	4803      	ldr	r0, [pc, #12]	; (8016e18 <MX_TIM16_Init+0xe8>)
 8016e0c:	f000 f862 	bl	8016ed4 <HAL_TIM_MspPostInit>

}
 8016e10:	bf00      	nop
 8016e12:	3750      	adds	r7, #80	; 0x50
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	2000dae0 	.word	0x2000dae0
 8016e1c:	40014400 	.word	0x40014400

08016e20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b084      	sub	sp, #16
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	4a16      	ldr	r2, [pc, #88]	; (8016e88 <HAL_TIM_Base_MspInit+0x68>)
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d114      	bne.n	8016e5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8016e32:	4b16      	ldr	r3, [pc, #88]	; (8016e8c <HAL_TIM_Base_MspInit+0x6c>)
 8016e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e36:	4a15      	ldr	r2, [pc, #84]	; (8016e8c <HAL_TIM_Base_MspInit+0x6c>)
 8016e38:	f043 0310 	orr.w	r3, r3, #16
 8016e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8016e3e:	4b13      	ldr	r3, [pc, #76]	; (8016e8c <HAL_TIM_Base_MspInit+0x6c>)
 8016e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e42:	f003 0310 	and.w	r3, r3, #16
 8016e46:	60fb      	str	r3, [r7, #12]
 8016e48:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	2103      	movs	r1, #3
 8016e4e:	2036      	movs	r0, #54	; 0x36
 8016e50:	f003 f8bb 	bl	8019fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8016e54:	2036      	movs	r0, #54	; 0x36
 8016e56:	f003 f8d2 	bl	8019ffe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8016e5a:	e010      	b.n	8016e7e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	4a0b      	ldr	r2, [pc, #44]	; (8016e90 <HAL_TIM_Base_MspInit+0x70>)
 8016e62:	4293      	cmp	r3, r2
 8016e64:	d10b      	bne.n	8016e7e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8016e66:	4b09      	ldr	r3, [pc, #36]	; (8016e8c <HAL_TIM_Base_MspInit+0x6c>)
 8016e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e6a:	4a08      	ldr	r2, [pc, #32]	; (8016e8c <HAL_TIM_Base_MspInit+0x6c>)
 8016e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016e70:	6613      	str	r3, [r2, #96]	; 0x60
 8016e72:	4b06      	ldr	r3, [pc, #24]	; (8016e8c <HAL_TIM_Base_MspInit+0x6c>)
 8016e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016e7a:	60bb      	str	r3, [r7, #8]
 8016e7c:	68bb      	ldr	r3, [r7, #8]
}
 8016e7e:	bf00      	nop
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	40001000 	.word	0x40001000
 8016e8c:	40021000 	.word	0x40021000
 8016e90:	40014400 	.word	0x40014400

08016e94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b085      	sub	sp, #20
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	4a0a      	ldr	r2, [pc, #40]	; (8016ecc <HAL_TIM_PWM_MspInit+0x38>)
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	d10b      	bne.n	8016ebe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8016ea6:	4b0a      	ldr	r3, [pc, #40]	; (8016ed0 <HAL_TIM_PWM_MspInit+0x3c>)
 8016ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eaa:	4a09      	ldr	r2, [pc, #36]	; (8016ed0 <HAL_TIM_PWM_MspInit+0x3c>)
 8016eac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8016eb2:	4b07      	ldr	r3, [pc, #28]	; (8016ed0 <HAL_TIM_PWM_MspInit+0x3c>)
 8016eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016eba:	60fb      	str	r3, [r7, #12]
 8016ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8016ebe:	bf00      	nop
 8016ec0:	3714      	adds	r7, #20
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec8:	4770      	bx	lr
 8016eca:	bf00      	nop
 8016ecc:	40013400 	.word	0x40013400
 8016ed0:	40021000 	.word	0x40021000

08016ed4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b08a      	sub	sp, #40	; 0x28
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016edc:	f107 0314 	add.w	r3, r7, #20
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	601a      	str	r2, [r3, #0]
 8016ee4:	605a      	str	r2, [r3, #4]
 8016ee6:	609a      	str	r2, [r3, #8]
 8016ee8:	60da      	str	r2, [r3, #12]
 8016eea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	4a2b      	ldr	r2, [pc, #172]	; (8016fa0 <HAL_TIM_MspPostInit+0xcc>)
 8016ef2:	4293      	cmp	r3, r2
 8016ef4:	d12d      	bne.n	8016f52 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016ef6:	4b2b      	ldr	r3, [pc, #172]	; (8016fa4 <HAL_TIM_MspPostInit+0xd0>)
 8016ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016efa:	4a2a      	ldr	r2, [pc, #168]	; (8016fa4 <HAL_TIM_MspPostInit+0xd0>)
 8016efc:	f043 0302 	orr.w	r3, r3, #2
 8016f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016f02:	4b28      	ldr	r3, [pc, #160]	; (8016fa4 <HAL_TIM_MspPostInit+0xd0>)
 8016f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f06:	f003 0302 	and.w	r3, r3, #2
 8016f0a:	613b      	str	r3, [r7, #16]
 8016f0c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8016f0e:	2340      	movs	r3, #64	; 0x40
 8016f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f12:	2302      	movs	r3, #2
 8016f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f16:	2300      	movs	r3, #0
 8016f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8016f1e:	2305      	movs	r3, #5
 8016f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016f22:	f107 0314 	add.w	r3, r7, #20
 8016f26:	4619      	mov	r1, r3
 8016f28:	481f      	ldr	r0, [pc, #124]	; (8016fa8 <HAL_TIM_MspPostInit+0xd4>)
 8016f2a:	f003 fdb7 	bl	801aa9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8016f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f34:	2302      	movs	r3, #2
 8016f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8016f40:	230a      	movs	r3, #10
 8016f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016f44:	f107 0314 	add.w	r3, r7, #20
 8016f48:	4619      	mov	r1, r3
 8016f4a:	4817      	ldr	r0, [pc, #92]	; (8016fa8 <HAL_TIM_MspPostInit+0xd4>)
 8016f4c:	f003 fda6 	bl	801aa9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8016f50:	e022      	b.n	8016f98 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	4a15      	ldr	r2, [pc, #84]	; (8016fac <HAL_TIM_MspPostInit+0xd8>)
 8016f58:	4293      	cmp	r3, r2
 8016f5a:	d11d      	bne.n	8016f98 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016f5c:	4b11      	ldr	r3, [pc, #68]	; (8016fa4 <HAL_TIM_MspPostInit+0xd0>)
 8016f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f60:	4a10      	ldr	r2, [pc, #64]	; (8016fa4 <HAL_TIM_MspPostInit+0xd0>)
 8016f62:	f043 0301 	orr.w	r3, r3, #1
 8016f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016f68:	4b0e      	ldr	r3, [pc, #56]	; (8016fa4 <HAL_TIM_MspPostInit+0xd0>)
 8016f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f6c:	f003 0301 	and.w	r3, r3, #1
 8016f70:	60fb      	str	r3, [r7, #12]
 8016f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8016f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f7a:	2302      	movs	r3, #2
 8016f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016f82:	2300      	movs	r3, #0
 8016f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8016f86:	2301      	movs	r3, #1
 8016f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8016f8a:	f107 0314 	add.w	r3, r7, #20
 8016f8e:	4619      	mov	r1, r3
 8016f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016f94:	f003 fd82 	bl	801aa9c <HAL_GPIO_Init>
}
 8016f98:	bf00      	nop
 8016f9a:	3728      	adds	r7, #40	; 0x28
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}
 8016fa0:	40013400 	.word	0x40013400
 8016fa4:	40021000 	.word	0x40021000
 8016fa8:	48000400 	.word	0x48000400
 8016fac:	40014400 	.word	0x40014400

08016fb0 <get_center_velocity>:

parameter_speed speed600_shortest;

parameter_speed speed600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8016fb0:	b084      	sub	sp, #16
 8016fb2:	b480      	push	{r7}
 8016fb4:	b083      	sub	sp, #12
 8016fb6:	af00      	add	r7, sp, #0
 8016fb8:	f107 0c10 	add.w	ip, r7, #16
 8016fbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8016fc0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016fc4:	f113 0f02 	cmn.w	r3, #2
 8016fc8:	d102      	bne.n	8016fd0 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8016fca:	69bb      	ldr	r3, [r7, #24]
 8016fcc:	607b      	str	r3, [r7, #4]
 8016fce:	e083      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8016fd0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016fd4:	f113 0f03 	cmn.w	r3, #3
 8016fd8:	d102      	bne.n	8016fe0 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8016fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fdc:	607b      	str	r3, [r7, #4]
 8016fde:	e07b      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8016fe0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016fe4:	f113 0f04 	cmn.w	r3, #4
 8016fe8:	d102      	bne.n	8016ff0 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8016fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fec:	607b      	str	r3, [r7, #4]
 8016fee:	e073      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8016ff0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016ff4:	f113 0f05 	cmn.w	r3, #5
 8016ff8:	d102      	bne.n	8017000 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8016ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ffc:	607b      	str	r3, [r7, #4]
 8016ffe:	e06b      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8017000:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017004:	f113 0f06 	cmn.w	r3, #6
 8017008:	d102      	bne.n	8017010 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 801700a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801700c:	607b      	str	r3, [r7, #4]
 801700e:	e063      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017010:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017014:	f113 0f07 	cmn.w	r3, #7
 8017018:	d102      	bne.n	8017020 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 801701a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801701c:	607b      	str	r3, [r7, #4]
 801701e:	e05b      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017020:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017024:	f113 0f08 	cmn.w	r3, #8
 8017028:	d103      	bne.n	8017032 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 801702a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801702e:	607b      	str	r3, [r7, #4]
 8017030:	e052      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8017032:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017036:	f113 0f09 	cmn.w	r3, #9
 801703a:	d103      	bne.n	8017044 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 801703c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017040:	607b      	str	r3, [r7, #4]
 8017042:	e049      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8017044:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017048:	f113 0f0a 	cmn.w	r3, #10
 801704c:	d103      	bne.n	8017056 <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 801704e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017052:	607b      	str	r3, [r7, #4]
 8017054:	e040      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8017056:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801705a:	f113 0f0b 	cmn.w	r3, #11
 801705e:	d103      	bne.n	8017068 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017064:	607b      	str	r3, [r7, #4]
 8017066:	e037      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017068:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801706c:	f113 0f0c 	cmn.w	r3, #12
 8017070:	d103      	bne.n	801707a <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8017072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017076:	607b      	str	r3, [r7, #4]
 8017078:	e02e      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 801707a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801707e:	f113 0f0d 	cmn.w	r3, #13
 8017082:	d103      	bne.n	801708c <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8017084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017088:	607b      	str	r3, [r7, #4]
 801708a:	e025      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 801708c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017090:	f113 0f0e 	cmn.w	r3, #14
 8017094:	d103      	bne.n	801709e <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8017096:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801709a:	607b      	str	r3, [r7, #4]
 801709c:	e01c      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 801709e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80170a2:	f113 0f0f 	cmn.w	r3, #15
 80170a6:	d103      	bne.n	80170b0 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 80170a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80170ac:	607b      	str	r3, [r7, #4]
 80170ae:	e013      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 80170b0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80170b4:	f113 0f10 	cmn.w	r3, #16
 80170b8:	d103      	bne.n	80170c2 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 80170ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80170be:	607b      	str	r3, [r7, #4]
 80170c0:	e00a      	b.n	80170d8 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 80170c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80170c6:	f113 0f11 	cmn.w	r3, #17
 80170ca:	d103      	bne.n	80170d4 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 80170cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80170d0:	607b      	str	r3, [r7, #4]
 80170d2:	e001      	b.n	80170d8 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	ee07 3a90 	vmov	s15, r3
}
 80170de:	eeb0 0a67 	vmov.f32	s0, s15
 80170e2:	370c      	adds	r7, #12
 80170e4:	46bd      	mov	sp, r7
 80170e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ea:	b004      	add	sp, #16
 80170ec:	4770      	bx	lr
	...

080170f0 <input_parameter>:

void input_parameter(void) {
 80170f0:	b480      	push	{r7}
 80170f2:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 80170f4:	4b95      	ldr	r3, [pc, #596]	; (801734c <input_parameter+0x25c>)
 80170f6:	4a96      	ldr	r2, [pc, #600]	; (8017350 <input_parameter+0x260>)
 80170f8:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 80170fa:	4b94      	ldr	r3, [pc, #592]	; (801734c <input_parameter+0x25c>)
 80170fc:	4a94      	ldr	r2, [pc, #592]	; (8017350 <input_parameter+0x260>)
 80170fe:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017100:	4b92      	ldr	r3, [pc, #584]	; (801734c <input_parameter+0x25c>)
 8017102:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8017104:	4a91      	ldr	r2, [pc, #580]	; (801734c <input_parameter+0x25c>)
 8017106:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 930; //550
 8017108:	4b90      	ldr	r3, [pc, #576]	; (801734c <input_parameter+0x25c>)
 801710a:	4a92      	ldr	r2, [pc, #584]	; (8017354 <input_parameter+0x264>)
 801710c:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 11000; //10000
 801710e:	4b8f      	ldr	r3, [pc, #572]	; (801734c <input_parameter+0x25c>)
 8017110:	4a91      	ldr	r2, [pc, #580]	; (8017358 <input_parameter+0x268>)
 8017112:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 0.5; //55;
 8017114:	4b8d      	ldr	r3, [pc, #564]	; (801734c <input_parameter+0x25c>)
 8017116:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801711a:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 801711c:	4b8b      	ldr	r3, [pc, #556]	; (801734c <input_parameter+0x25c>)
 801711e:	4a8f      	ldr	r2, [pc, #572]	; (801735c <input_parameter+0x26c>)
 8017120:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017122:	4b8a      	ldr	r3, [pc, #552]	; (801734c <input_parameter+0x25c>)
 8017124:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8017126:	4a89      	ldr	r2, [pc, #548]	; (801734c <input_parameter+0x25c>)
 8017128:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 930;
 801712a:	4b88      	ldr	r3, [pc, #544]	; (801734c <input_parameter+0x25c>)
 801712c:	4a89      	ldr	r2, [pc, #548]	; (8017354 <input_parameter+0x264>)
 801712e:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 11000;
 8017130:	4b86      	ldr	r3, [pc, #536]	; (801734c <input_parameter+0x25c>)
 8017132:	4a89      	ldr	r2, [pc, #548]	; (8017358 <input_parameter+0x268>)
 8017134:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 0.5; //50;
 8017136:	4b85      	ldr	r3, [pc, #532]	; (801734c <input_parameter+0x25c>)
 8017138:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801713c:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 801713e:	4b83      	ldr	r3, [pc, #524]	; (801734c <input_parameter+0x25c>)
 8017140:	4a87      	ldr	r2, [pc, #540]	; (8017360 <input_parameter+0x270>)
 8017142:	625a      	str	r2, [r3, #36]	; 0x24

	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017144:	4b81      	ldr	r3, [pc, #516]	; (801734c <input_parameter+0x25c>)
 8017146:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017148:	4a86      	ldr	r2, [pc, #536]	; (8017364 <input_parameter+0x274>)
 801714a:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 801714c:	4b7f      	ldr	r3, [pc, #508]	; (801734c <input_parameter+0x25c>)
 801714e:	edd3 7a01 	vldr	s15, [r3, #4]
 8017152:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8017368 <input_parameter+0x278>
 8017156:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 801715a:	4b82      	ldr	r3, [pc, #520]	; (8017364 <input_parameter+0x274>)
 801715c:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017160:	4b7a      	ldr	r3, [pc, #488]	; (801734c <input_parameter+0x25c>)
 8017162:	689b      	ldr	r3, [r3, #8]
 8017164:	4a7f      	ldr	r2, [pc, #508]	; (8017364 <input_parameter+0x274>)
 8017166:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017168:	4b78      	ldr	r3, [pc, #480]	; (801734c <input_parameter+0x25c>)
 801716a:	695b      	ldr	r3, [r3, #20]
 801716c:	4a7d      	ldr	r2, [pc, #500]	; (8017364 <input_parameter+0x274>)
 801716e:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017170:	4b76      	ldr	r3, [pc, #472]	; (801734c <input_parameter+0x25c>)
 8017172:	699b      	ldr	r3, [r3, #24]
 8017174:	4a7b      	ldr	r2, [pc, #492]	; (8017364 <input_parameter+0x274>)
 8017176:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017178:	4b74      	ldr	r3, [pc, #464]	; (801734c <input_parameter+0x25c>)
 801717a:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 801717e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017182:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017186:	4b77      	ldr	r3, [pc, #476]	; (8017364 <input_parameter+0x274>)
 8017188:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 801718c:	4b6f      	ldr	r3, [pc, #444]	; (801734c <input_parameter+0x25c>)
 801718e:	691b      	ldr	r3, [r3, #16]
 8017190:	4a74      	ldr	r2, [pc, #464]	; (8017364 <input_parameter+0x274>)
 8017192:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017194:	4b6d      	ldr	r3, [pc, #436]	; (801734c <input_parameter+0x25c>)
 8017196:	69db      	ldr	r3, [r3, #28]
 8017198:	4a72      	ldr	r2, [pc, #456]	; (8017364 <input_parameter+0x274>)
 801719a:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 801719c:	4b6b      	ldr	r3, [pc, #428]	; (801734c <input_parameter+0x25c>)
 801719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171a0:	4a70      	ldr	r2, [pc, #448]	; (8017364 <input_parameter+0x274>)
 80171a2:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 80171a4:	4b69      	ldr	r3, [pc, #420]	; (801734c <input_parameter+0x25c>)
 80171a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171a8:	4a6e      	ldr	r2, [pc, #440]	; (8017364 <input_parameter+0x274>)
 80171aa:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80171ac:	4b67      	ldr	r3, [pc, #412]	; (801734c <input_parameter+0x25c>)
 80171ae:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 80171b2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80171b6:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80171ba:	4b6a      	ldr	r3, [pc, #424]	; (8017364 <input_parameter+0x274>)
 80171bc:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 80171c0:	4b62      	ldr	r3, [pc, #392]	; (801734c <input_parameter+0x25c>)
 80171c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171c4:	4a67      	ldr	r2, [pc, #412]	; (8017364 <input_parameter+0x274>)
 80171c6:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 80171c8:	4b66      	ldr	r3, [pc, #408]	; (8017364 <input_parameter+0x274>)
 80171ca:	685b      	ldr	r3, [r3, #4]
 80171cc:	4a65      	ldr	r2, [pc, #404]	; (8017364 <input_parameter+0x274>)
 80171ce:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 80171d0:	4b64      	ldr	r3, [pc, #400]	; (8017364 <input_parameter+0x274>)
 80171d2:	4a66      	ldr	r2, [pc, #408]	; (801736c <input_parameter+0x27c>)
 80171d4:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 80171d6:	4b63      	ldr	r3, [pc, #396]	; (8017364 <input_parameter+0x274>)
 80171d8:	4a65      	ldr	r2, [pc, #404]	; (8017370 <input_parameter+0x280>)
 80171da:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 80171dc:	4b61      	ldr	r3, [pc, #388]	; (8017364 <input_parameter+0x274>)
 80171de:	4a65      	ldr	r2, [pc, #404]	; (8017374 <input_parameter+0x284>)
 80171e0:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 80171e2:	4b60      	ldr	r3, [pc, #384]	; (8017364 <input_parameter+0x274>)
 80171e4:	4a64      	ldr	r2, [pc, #400]	; (8017378 <input_parameter+0x288>)
 80171e6:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 80171e8:	4b5e      	ldr	r3, [pc, #376]	; (8017364 <input_parameter+0x274>)
 80171ea:	685b      	ldr	r3, [r3, #4]
 80171ec:	4a5d      	ldr	r2, [pc, #372]	; (8017364 <input_parameter+0x274>)
 80171ee:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 80171f0:	4b5c      	ldr	r3, [pc, #368]	; (8017364 <input_parameter+0x274>)
 80171f2:	4a5e      	ldr	r2, [pc, #376]	; (801736c <input_parameter+0x27c>)
 80171f4:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 80171f6:	4b5b      	ldr	r3, [pc, #364]	; (8017364 <input_parameter+0x274>)
 80171f8:	4a5d      	ldr	r2, [pc, #372]	; (8017370 <input_parameter+0x280>)
 80171fa:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 80171fc:	4b59      	ldr	r3, [pc, #356]	; (8017364 <input_parameter+0x274>)
 80171fe:	4a5f      	ldr	r2, [pc, #380]	; (801737c <input_parameter+0x28c>)
 8017200:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017202:	4b58      	ldr	r3, [pc, #352]	; (8017364 <input_parameter+0x274>)
 8017204:	4a5e      	ldr	r2, [pc, #376]	; (8017380 <input_parameter+0x290>)
 8017206:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017208:	4b56      	ldr	r3, [pc, #344]	; (8017364 <input_parameter+0x274>)
 801720a:	685b      	ldr	r3, [r3, #4]
 801720c:	4a55      	ldr	r2, [pc, #340]	; (8017364 <input_parameter+0x274>)
 801720e:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017210:	4b54      	ldr	r3, [pc, #336]	; (8017364 <input_parameter+0x274>)
 8017212:	4a5c      	ldr	r2, [pc, #368]	; (8017384 <input_parameter+0x294>)
 8017214:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017216:	4b53      	ldr	r3, [pc, #332]	; (8017364 <input_parameter+0x274>)
 8017218:	4a5b      	ldr	r2, [pc, #364]	; (8017388 <input_parameter+0x298>)
 801721a:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 801721c:	4b51      	ldr	r3, [pc, #324]	; (8017364 <input_parameter+0x274>)
 801721e:	4a5b      	ldr	r2, [pc, #364]	; (801738c <input_parameter+0x29c>)
 8017220:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017222:	4b50      	ldr	r3, [pc, #320]	; (8017364 <input_parameter+0x274>)
 8017224:	4a5a      	ldr	r2, [pc, #360]	; (8017390 <input_parameter+0x2a0>)
 8017226:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017228:	4b4e      	ldr	r3, [pc, #312]	; (8017364 <input_parameter+0x274>)
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	4a4d      	ldr	r2, [pc, #308]	; (8017364 <input_parameter+0x274>)
 801722e:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017230:	4b4c      	ldr	r3, [pc, #304]	; (8017364 <input_parameter+0x274>)
 8017232:	4a58      	ldr	r2, [pc, #352]	; (8017394 <input_parameter+0x2a4>)
 8017234:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017236:	4b4b      	ldr	r3, [pc, #300]	; (8017364 <input_parameter+0x274>)
 8017238:	4a53      	ldr	r2, [pc, #332]	; (8017388 <input_parameter+0x298>)
 801723a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 801723c:	4b49      	ldr	r3, [pc, #292]	; (8017364 <input_parameter+0x274>)
 801723e:	4a56      	ldr	r2, [pc, #344]	; (8017398 <input_parameter+0x2a8>)
 8017240:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017242:	4b48      	ldr	r3, [pc, #288]	; (8017364 <input_parameter+0x274>)
 8017244:	4a55      	ldr	r2, [pc, #340]	; (801739c <input_parameter+0x2ac>)
 8017246:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017248:	4b46      	ldr	r3, [pc, #280]	; (8017364 <input_parameter+0x274>)
 801724a:	685b      	ldr	r3, [r3, #4]
 801724c:	4a45      	ldr	r2, [pc, #276]	; (8017364 <input_parameter+0x274>)
 801724e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017252:	4b44      	ldr	r3, [pc, #272]	; (8017364 <input_parameter+0x274>)
 8017254:	4a45      	ldr	r2, [pc, #276]	; (801736c <input_parameter+0x27c>)
 8017256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 801725a:	4b42      	ldr	r3, [pc, #264]	; (8017364 <input_parameter+0x274>)
 801725c:	4a44      	ldr	r2, [pc, #272]	; (8017370 <input_parameter+0x280>)
 801725e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017262:	4b40      	ldr	r3, [pc, #256]	; (8017364 <input_parameter+0x274>)
 8017264:	4a4e      	ldr	r2, [pc, #312]	; (80173a0 <input_parameter+0x2b0>)
 8017266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 801726a:	4b3e      	ldr	r3, [pc, #248]	; (8017364 <input_parameter+0x274>)
 801726c:	4a4d      	ldr	r2, [pc, #308]	; (80173a4 <input_parameter+0x2b4>)
 801726e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017272:	4b3c      	ldr	r3, [pc, #240]	; (8017364 <input_parameter+0x274>)
 8017274:	685b      	ldr	r3, [r3, #4]
 8017276:	4a3b      	ldr	r2, [pc, #236]	; (8017364 <input_parameter+0x274>)
 8017278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 801727c:	4b39      	ldr	r3, [pc, #228]	; (8017364 <input_parameter+0x274>)
 801727e:	4a3b      	ldr	r2, [pc, #236]	; (801736c <input_parameter+0x27c>)
 8017280:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017284:	4b37      	ldr	r3, [pc, #220]	; (8017364 <input_parameter+0x274>)
 8017286:	4a3a      	ldr	r2, [pc, #232]	; (8017370 <input_parameter+0x280>)
 8017288:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 801728c:	4b35      	ldr	r3, [pc, #212]	; (8017364 <input_parameter+0x274>)
 801728e:	4a46      	ldr	r2, [pc, #280]	; (80173a8 <input_parameter+0x2b8>)
 8017290:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017294:	4b33      	ldr	r3, [pc, #204]	; (8017364 <input_parameter+0x274>)
 8017296:	4a45      	ldr	r2, [pc, #276]	; (80173ac <input_parameter+0x2bc>)
 8017298:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 801729c:	4b31      	ldr	r3, [pc, #196]	; (8017364 <input_parameter+0x274>)
 801729e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 80172a0:	4a30      	ldr	r2, [pc, #192]	; (8017364 <input_parameter+0x274>)
 80172a2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 80172a6:	4b2f      	ldr	r3, [pc, #188]	; (8017364 <input_parameter+0x274>)
 80172a8:	4a41      	ldr	r2, [pc, #260]	; (80173b0 <input_parameter+0x2c0>)
 80172aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 80172ae:	4b2d      	ldr	r3, [pc, #180]	; (8017364 <input_parameter+0x274>)
 80172b0:	4a35      	ldr	r2, [pc, #212]	; (8017388 <input_parameter+0x298>)
 80172b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 80172b6:	4b2b      	ldr	r3, [pc, #172]	; (8017364 <input_parameter+0x274>)
 80172b8:	4a3e      	ldr	r2, [pc, #248]	; (80173b4 <input_parameter+0x2c4>)
 80172ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 80172be:	4b29      	ldr	r3, [pc, #164]	; (8017364 <input_parameter+0x274>)
 80172c0:	4a3d      	ldr	r2, [pc, #244]	; (80173b8 <input_parameter+0x2c8>)
 80172c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80172c6:	4b27      	ldr	r3, [pc, #156]	; (8017364 <input_parameter+0x274>)
 80172c8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 80172ca:	4a26      	ldr	r2, [pc, #152]	; (8017364 <input_parameter+0x274>)
 80172cc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 80172d0:	4b24      	ldr	r3, [pc, #144]	; (8017364 <input_parameter+0x274>)
 80172d2:	4a37      	ldr	r2, [pc, #220]	; (80173b0 <input_parameter+0x2c0>)
 80172d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 80172d8:	4b22      	ldr	r3, [pc, #136]	; (8017364 <input_parameter+0x274>)
 80172da:	4a2b      	ldr	r2, [pc, #172]	; (8017388 <input_parameter+0x298>)
 80172dc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 80172e0:	4b20      	ldr	r3, [pc, #128]	; (8017364 <input_parameter+0x274>)
 80172e2:	4a34      	ldr	r2, [pc, #208]	; (80173b4 <input_parameter+0x2c4>)
 80172e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 80172e8:	4b1e      	ldr	r3, [pc, #120]	; (8017364 <input_parameter+0x274>)
 80172ea:	4a33      	ldr	r2, [pc, #204]	; (80173b8 <input_parameter+0x2c8>)
 80172ec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80172f0:	4b1c      	ldr	r3, [pc, #112]	; (8017364 <input_parameter+0x274>)
 80172f2:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 80172f4:	4a1b      	ldr	r2, [pc, #108]	; (8017364 <input_parameter+0x274>)
 80172f6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 80172fa:	4b1a      	ldr	r3, [pc, #104]	; (8017364 <input_parameter+0x274>)
 80172fc:	4a1b      	ldr	r2, [pc, #108]	; (801736c <input_parameter+0x27c>)
 80172fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017302:	4b18      	ldr	r3, [pc, #96]	; (8017364 <input_parameter+0x274>)
 8017304:	4a1a      	ldr	r2, [pc, #104]	; (8017370 <input_parameter+0x280>)
 8017306:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 801730a:	4b16      	ldr	r3, [pc, #88]	; (8017364 <input_parameter+0x274>)
 801730c:	4a2b      	ldr	r2, [pc, #172]	; (80173bc <input_parameter+0x2cc>)
 801730e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017312:	4b14      	ldr	r3, [pc, #80]	; (8017364 <input_parameter+0x274>)
 8017314:	4a29      	ldr	r2, [pc, #164]	; (80173bc <input_parameter+0x2cc>)
 8017316:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801731a:	4b12      	ldr	r3, [pc, #72]	; (8017364 <input_parameter+0x274>)
 801731c:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 801731e:	4a11      	ldr	r2, [pc, #68]	; (8017364 <input_parameter+0x274>)
 8017320:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017324:	4b0f      	ldr	r3, [pc, #60]	; (8017364 <input_parameter+0x274>)
 8017326:	4a11      	ldr	r2, [pc, #68]	; (801736c <input_parameter+0x27c>)
 8017328:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 801732c:	4b0d      	ldr	r3, [pc, #52]	; (8017364 <input_parameter+0x274>)
 801732e:	4a10      	ldr	r2, [pc, #64]	; (8017370 <input_parameter+0x280>)
 8017330:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017334:	4b0b      	ldr	r3, [pc, #44]	; (8017364 <input_parameter+0x274>)
 8017336:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 801733a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 801733e:	4b09      	ldr	r3, [pc, #36]	; (8017364 <input_parameter+0x274>)
 8017340:	4a1f      	ldr	r2, [pc, #124]	; (80173c0 <input_parameter+0x2d0>)
 8017342:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017346:	4b07      	ldr	r3, [pc, #28]	; (8017364 <input_parameter+0x274>)
 8017348:	685b      	ldr	r3, [r3, #4]
 801734a:	e03b      	b.n	80173c4 <input_parameter+0x2d4>
 801734c:	2000db2c 	.word	0x2000db2c
 8017350:	43960000 	.word	0x43960000
 8017354:	44688000 	.word	0x44688000
 8017358:	462be000 	.word	0x462be000
 801735c:	41a00000 	.word	0x41a00000
 8017360:	41980000 	.word	0x41980000
 8017364:	2000dc74 	.word	0x2000dc74
 8017368:	43480000 	.word	0x43480000
 801736c:	44160000 	.word	0x44160000
 8017370:	461c4000 	.word	0x461c4000
 8017374:	42980000 	.word	0x42980000
 8017378:	42d60000 	.word	0x42d60000
 801737c:	429a0000 	.word	0x429a0000
 8017380:	42ce0000 	.word	0x42ce0000
 8017384:	43d70000 	.word	0x43d70000
 8017388:	45fa0000 	.word	0x45fa0000
 801738c:	42820000 	.word	0x42820000
 8017390:	42a00000 	.word	0x42a00000
 8017394:	43e10000 	.word	0x43e10000
 8017398:	42700000 	.word	0x42700000
 801739c:	428e0000 	.word	0x428e0000
 80173a0:	41d80000 	.word	0x41d80000
 80173a4:	42b20000 	.word	0x42b20000
 80173a8:	42040000 	.word	0x42040000
 80173ac:	42b40000 	.word	0x42b40000
 80173b0:	44188000 	.word	0x44188000
 80173b4:	42860000 	.word	0x42860000
 80173b8:	42920000 	.word	0x42920000
 80173bc:	42640000 	.word	0x42640000
 80173c0:	42500000 	.word	0x42500000
	speed300_shortest.turn135out_R.g_speed =
 80173c4:	4a99      	ldr	r2, [pc, #612]	; (801762c <input_parameter+0x53c>)
 80173c6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 80173ca:	4b98      	ldr	r3, [pc, #608]	; (801762c <input_parameter+0x53c>)
 80173cc:	4a98      	ldr	r2, [pc, #608]	; (8017630 <input_parameter+0x540>)
 80173ce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 80173d2:	4b96      	ldr	r3, [pc, #600]	; (801762c <input_parameter+0x53c>)
 80173d4:	4a97      	ldr	r2, [pc, #604]	; (8017634 <input_parameter+0x544>)
 80173d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 80173da:	4b94      	ldr	r3, [pc, #592]	; (801762c <input_parameter+0x53c>)
 80173dc:	4a96      	ldr	r2, [pc, #600]	; (8017638 <input_parameter+0x548>)
 80173de:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 80173e2:	4b92      	ldr	r3, [pc, #584]	; (801762c <input_parameter+0x53c>)
 80173e4:	4a95      	ldr	r2, [pc, #596]	; (801763c <input_parameter+0x54c>)
 80173e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80173ea:	4b90      	ldr	r3, [pc, #576]	; (801762c <input_parameter+0x53c>)
 80173ec:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 80173ee:	4a8f      	ldr	r2, [pc, #572]	; (801762c <input_parameter+0x53c>)
 80173f0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 80173f4:	4b8d      	ldr	r3, [pc, #564]	; (801762c <input_parameter+0x53c>)
 80173f6:	4a8e      	ldr	r2, [pc, #568]	; (8017630 <input_parameter+0x540>)
 80173f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 80173fc:	4b8b      	ldr	r3, [pc, #556]	; (801762c <input_parameter+0x53c>)
 80173fe:	4a8d      	ldr	r2, [pc, #564]	; (8017634 <input_parameter+0x544>)
 8017400:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8017404:	4b89      	ldr	r3, [pc, #548]	; (801762c <input_parameter+0x53c>)
 8017406:	4a8c      	ldr	r2, [pc, #560]	; (8017638 <input_parameter+0x548>)
 8017408:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 801740c:	4b87      	ldr	r3, [pc, #540]	; (801762c <input_parameter+0x53c>)
 801740e:	4a8c      	ldr	r2, [pc, #560]	; (8017640 <input_parameter+0x550>)
 8017410:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017414:	4b85      	ldr	r3, [pc, #532]	; (801762c <input_parameter+0x53c>)
 8017416:	685b      	ldr	r3, [r3, #4]
 8017418:	4a84      	ldr	r2, [pc, #528]	; (801762c <input_parameter+0x53c>)
 801741a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 801741e:	4b83      	ldr	r3, [pc, #524]	; (801762c <input_parameter+0x53c>)
 8017420:	4a88      	ldr	r2, [pc, #544]	; (8017644 <input_parameter+0x554>)
 8017422:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8017426:	4b81      	ldr	r3, [pc, #516]	; (801762c <input_parameter+0x53c>)
 8017428:	4a87      	ldr	r2, [pc, #540]	; (8017648 <input_parameter+0x558>)
 801742a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 801742e:	4b7f      	ldr	r3, [pc, #508]	; (801762c <input_parameter+0x53c>)
 8017430:	4a86      	ldr	r2, [pc, #536]	; (801764c <input_parameter+0x55c>)
 8017432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8017436:	4b7d      	ldr	r3, [pc, #500]	; (801762c <input_parameter+0x53c>)
 8017438:	4a85      	ldr	r2, [pc, #532]	; (8017650 <input_parameter+0x560>)
 801743a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 801743e:	4b7b      	ldr	r3, [pc, #492]	; (801762c <input_parameter+0x53c>)
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	4a7a      	ldr	r2, [pc, #488]	; (801762c <input_parameter+0x53c>)
 8017444:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017448:	4b78      	ldr	r3, [pc, #480]	; (801762c <input_parameter+0x53c>)
 801744a:	4a7e      	ldr	r2, [pc, #504]	; (8017644 <input_parameter+0x554>)
 801744c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8017450:	4b76      	ldr	r3, [pc, #472]	; (801762c <input_parameter+0x53c>)
 8017452:	4a7d      	ldr	r2, [pc, #500]	; (8017648 <input_parameter+0x558>)
 8017454:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017458:	4b74      	ldr	r3, [pc, #464]	; (801762c <input_parameter+0x53c>)
 801745a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801745e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 8017462:	4b72      	ldr	r3, [pc, #456]	; (801762c <input_parameter+0x53c>)
 8017464:	4a7b      	ldr	r2, [pc, #492]	; (8017654 <input_parameter+0x564>)
 8017466:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 801746a:	4b7b      	ldr	r3, [pc, #492]	; (8017658 <input_parameter+0x568>)
 801746c:	4a7b      	ldr	r2, [pc, #492]	; (801765c <input_parameter+0x56c>)
 801746e:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8017470:	4b79      	ldr	r3, [pc, #484]	; (8017658 <input_parameter+0x568>)
 8017472:	4a7a      	ldr	r2, [pc, #488]	; (801765c <input_parameter+0x56c>)
 8017474:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017476:	4b78      	ldr	r3, [pc, #480]	; (8017658 <input_parameter+0x568>)
 8017478:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 801747a:	4a77      	ldr	r2, [pc, #476]	; (8017658 <input_parameter+0x568>)
 801747c:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 801747e:	4b76      	ldr	r3, [pc, #472]	; (8017658 <input_parameter+0x568>)
 8017480:	4a77      	ldr	r2, [pc, #476]	; (8017660 <input_parameter+0x570>)
 8017482:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8017484:	4b74      	ldr	r3, [pc, #464]	; (8017658 <input_parameter+0x568>)
 8017486:	4a77      	ldr	r2, [pc, #476]	; (8017664 <input_parameter+0x574>)
 8017488:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 801748a:	4b73      	ldr	r3, [pc, #460]	; (8017658 <input_parameter+0x568>)
 801748c:	4a76      	ldr	r2, [pc, #472]	; (8017668 <input_parameter+0x578>)
 801748e:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8017490:	4b71      	ldr	r3, [pc, #452]	; (8017658 <input_parameter+0x568>)
 8017492:	4a76      	ldr	r2, [pc, #472]	; (801766c <input_parameter+0x57c>)
 8017494:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017496:	4b70      	ldr	r3, [pc, #448]	; (8017658 <input_parameter+0x568>)
 8017498:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 801749a:	4a6f      	ldr	r2, [pc, #444]	; (8017658 <input_parameter+0x568>)
 801749c:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 801749e:	4b6e      	ldr	r3, [pc, #440]	; (8017658 <input_parameter+0x568>)
 80174a0:	4a6f      	ldr	r2, [pc, #444]	; (8017660 <input_parameter+0x570>)
 80174a2:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 80174a4:	4b6c      	ldr	r3, [pc, #432]	; (8017658 <input_parameter+0x568>)
 80174a6:	4a6f      	ldr	r2, [pc, #444]	; (8017664 <input_parameter+0x574>)
 80174a8:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 80174aa:	4b6b      	ldr	r3, [pc, #428]	; (8017658 <input_parameter+0x568>)
 80174ac:	4a6e      	ldr	r2, [pc, #440]	; (8017668 <input_parameter+0x578>)
 80174ae:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 80174b0:	4b69      	ldr	r3, [pc, #420]	; (8017658 <input_parameter+0x568>)
 80174b2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80174b6:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 80174b8:	4b67      	ldr	r3, [pc, #412]	; (8017658 <input_parameter+0x568>)
 80174ba:	4a68      	ldr	r2, [pc, #416]	; (801765c <input_parameter+0x56c>)
 80174bc:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 80174be:	4b66      	ldr	r3, [pc, #408]	; (8017658 <input_parameter+0x568>)
 80174c0:	4a6b      	ldr	r2, [pc, #428]	; (8017670 <input_parameter+0x580>)
 80174c2:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 80174c4:	4b64      	ldr	r3, [pc, #400]	; (8017658 <input_parameter+0x568>)
 80174c6:	4a6b      	ldr	r2, [pc, #428]	; (8017674 <input_parameter+0x584>)
 80174c8:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 29;
 80174ca:	4b63      	ldr	r3, [pc, #396]	; (8017658 <input_parameter+0x568>)
 80174cc:	4a6a      	ldr	r2, [pc, #424]	; (8017678 <input_parameter+0x588>)
 80174ce:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 80174d0:	4b61      	ldr	r3, [pc, #388]	; (8017658 <input_parameter+0x568>)
 80174d2:	4a6a      	ldr	r2, [pc, #424]	; (801767c <input_parameter+0x58c>)
 80174d4:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 80174d6:	4b60      	ldr	r3, [pc, #384]	; (8017658 <input_parameter+0x568>)
 80174d8:	4a60      	ldr	r2, [pc, #384]	; (801765c <input_parameter+0x56c>)
 80174da:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 80174dc:	4b5e      	ldr	r3, [pc, #376]	; (8017658 <input_parameter+0x568>)
 80174de:	4a64      	ldr	r2, [pc, #400]	; (8017670 <input_parameter+0x580>)
 80174e0:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 80174e2:	4b5d      	ldr	r3, [pc, #372]	; (8017658 <input_parameter+0x568>)
 80174e4:	4a63      	ldr	r2, [pc, #396]	; (8017674 <input_parameter+0x584>)
 80174e6:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 29;
 80174e8:	4b5b      	ldr	r3, [pc, #364]	; (8017658 <input_parameter+0x568>)
 80174ea:	4a63      	ldr	r2, [pc, #396]	; (8017678 <input_parameter+0x588>)
 80174ec:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 80174ee:	4b5a      	ldr	r3, [pc, #360]	; (8017658 <input_parameter+0x568>)
 80174f0:	4a56      	ldr	r2, [pc, #344]	; (801764c <input_parameter+0x55c>)
 80174f2:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 80174f4:	4b58      	ldr	r3, [pc, #352]	; (8017658 <input_parameter+0x568>)
 80174f6:	4a59      	ldr	r2, [pc, #356]	; (801765c <input_parameter+0x56c>)
 80174f8:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 820;
 80174fa:	4b57      	ldr	r3, [pc, #348]	; (8017658 <input_parameter+0x568>)
 80174fc:	4a60      	ldr	r2, [pc, #384]	; (8017680 <input_parameter+0x590>)
 80174fe:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017500:	4b55      	ldr	r3, [pc, #340]	; (8017658 <input_parameter+0x568>)
 8017502:	4a60      	ldr	r2, [pc, #384]	; (8017684 <input_parameter+0x594>)
 8017504:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8017506:	4b54      	ldr	r3, [pc, #336]	; (8017658 <input_parameter+0x568>)
 8017508:	4a5f      	ldr	r2, [pc, #380]	; (8017688 <input_parameter+0x598>)
 801750a:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 35;
 801750c:	4b52      	ldr	r3, [pc, #328]	; (8017658 <input_parameter+0x568>)
 801750e:	4a4f      	ldr	r2, [pc, #316]	; (801764c <input_parameter+0x55c>)
 8017510:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8017512:	4b51      	ldr	r3, [pc, #324]	; (8017658 <input_parameter+0x568>)
 8017514:	4a51      	ldr	r2, [pc, #324]	; (801765c <input_parameter+0x56c>)
 8017516:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8017518:	4b4f      	ldr	r3, [pc, #316]	; (8017658 <input_parameter+0x568>)
 801751a:	4a59      	ldr	r2, [pc, #356]	; (8017680 <input_parameter+0x590>)
 801751c:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 801751e:	4b4e      	ldr	r3, [pc, #312]	; (8017658 <input_parameter+0x568>)
 8017520:	4a58      	ldr	r2, [pc, #352]	; (8017684 <input_parameter+0x594>)
 8017522:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8017524:	4b4c      	ldr	r3, [pc, #304]	; (8017658 <input_parameter+0x568>)
 8017526:	4a58      	ldr	r2, [pc, #352]	; (8017688 <input_parameter+0x598>)
 8017528:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 33;
 801752a:	4b4b      	ldr	r3, [pc, #300]	; (8017658 <input_parameter+0x568>)
 801752c:	4a57      	ldr	r2, [pc, #348]	; (801768c <input_parameter+0x59c>)
 801752e:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8017530:	4b49      	ldr	r3, [pc, #292]	; (8017658 <input_parameter+0x568>)
 8017532:	4a4a      	ldr	r2, [pc, #296]	; (801765c <input_parameter+0x56c>)
 8017534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8017538:	4b47      	ldr	r3, [pc, #284]	; (8017658 <input_parameter+0x568>)
 801753a:	4a55      	ldr	r2, [pc, #340]	; (8017690 <input_parameter+0x5a0>)
 801753c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8017540:	4b45      	ldr	r3, [pc, #276]	; (8017658 <input_parameter+0x568>)
 8017542:	4a54      	ldr	r2, [pc, #336]	; (8017694 <input_parameter+0x5a4>)
 8017544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8017548:	4b43      	ldr	r3, [pc, #268]	; (8017658 <input_parameter+0x568>)
 801754a:	4a53      	ldr	r2, [pc, #332]	; (8017698 <input_parameter+0x5a8>)
 801754c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8017550:	4b41      	ldr	r3, [pc, #260]	; (8017658 <input_parameter+0x568>)
 8017552:	4a52      	ldr	r2, [pc, #328]	; (801769c <input_parameter+0x5ac>)
 8017554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8017558:	4b3f      	ldr	r3, [pc, #252]	; (8017658 <input_parameter+0x568>)
 801755a:	4a40      	ldr	r2, [pc, #256]	; (801765c <input_parameter+0x56c>)
 801755c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8017560:	4b3d      	ldr	r3, [pc, #244]	; (8017658 <input_parameter+0x568>)
 8017562:	4a4f      	ldr	r2, [pc, #316]	; (80176a0 <input_parameter+0x5b0>)
 8017564:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8017568:	4b3b      	ldr	r3, [pc, #236]	; (8017658 <input_parameter+0x568>)
 801756a:	4a4a      	ldr	r2, [pc, #296]	; (8017694 <input_parameter+0x5a4>)
 801756c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8017570:	4b39      	ldr	r3, [pc, #228]	; (8017658 <input_parameter+0x568>)
 8017572:	4a4c      	ldr	r2, [pc, #304]	; (80176a4 <input_parameter+0x5b4>)
 8017574:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8017578:	4b37      	ldr	r3, [pc, #220]	; (8017658 <input_parameter+0x568>)
 801757a:	4a4b      	ldr	r2, [pc, #300]	; (80176a8 <input_parameter+0x5b8>)
 801757c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8017580:	4b35      	ldr	r3, [pc, #212]	; (8017658 <input_parameter+0x568>)
 8017582:	4a36      	ldr	r2, [pc, #216]	; (801765c <input_parameter+0x56c>)
 8017584:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8017588:	4b33      	ldr	r3, [pc, #204]	; (8017658 <input_parameter+0x568>)
 801758a:	4a48      	ldr	r2, [pc, #288]	; (80176ac <input_parameter+0x5bc>)
 801758c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8017590:	4b31      	ldr	r3, [pc, #196]	; (8017658 <input_parameter+0x568>)
 8017592:	4a3c      	ldr	r2, [pc, #240]	; (8017684 <input_parameter+0x594>)
 8017594:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 7;
 8017598:	4b2f      	ldr	r3, [pc, #188]	; (8017658 <input_parameter+0x568>)
 801759a:	4a3b      	ldr	r2, [pc, #236]	; (8017688 <input_parameter+0x598>)
 801759c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 46;
 80175a0:	4b2d      	ldr	r3, [pc, #180]	; (8017658 <input_parameter+0x568>)
 80175a2:	4a43      	ldr	r2, [pc, #268]	; (80176b0 <input_parameter+0x5c0>)
 80175a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 80175a8:	4b2b      	ldr	r3, [pc, #172]	; (8017658 <input_parameter+0x568>)
 80175aa:	4a2c      	ldr	r2, [pc, #176]	; (801765c <input_parameter+0x56c>)
 80175ac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 80175b0:	4b29      	ldr	r3, [pc, #164]	; (8017658 <input_parameter+0x568>)
 80175b2:	4a40      	ldr	r2, [pc, #256]	; (80176b4 <input_parameter+0x5c4>)
 80175b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 80175b8:	4b27      	ldr	r3, [pc, #156]	; (8017658 <input_parameter+0x568>)
 80175ba:	4a32      	ldr	r2, [pc, #200]	; (8017684 <input_parameter+0x594>)
 80175bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 80175c0:	4b25      	ldr	r3, [pc, #148]	; (8017658 <input_parameter+0x568>)
 80175c2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80175c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 41;
 80175ca:	4b23      	ldr	r3, [pc, #140]	; (8017658 <input_parameter+0x568>)
 80175cc:	4a3a      	ldr	r2, [pc, #232]	; (80176b8 <input_parameter+0x5c8>)
 80175ce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 80175d2:	4b21      	ldr	r3, [pc, #132]	; (8017658 <input_parameter+0x568>)
 80175d4:	4a21      	ldr	r2, [pc, #132]	; (801765c <input_parameter+0x56c>)
 80175d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 80175da:	4b1f      	ldr	r3, [pc, #124]	; (8017658 <input_parameter+0x568>)
 80175dc:	4a37      	ldr	r2, [pc, #220]	; (80176bc <input_parameter+0x5cc>)
 80175de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 80175e2:	4b1d      	ldr	r3, [pc, #116]	; (8017658 <input_parameter+0x568>)
 80175e4:	4a2b      	ldr	r2, [pc, #172]	; (8017694 <input_parameter+0x5a4>)
 80175e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 80175ea:	4b1b      	ldr	r3, [pc, #108]	; (8017658 <input_parameter+0x568>)
 80175ec:	4a34      	ldr	r2, [pc, #208]	; (80176c0 <input_parameter+0x5d0>)
 80175ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 28;
 80175f2:	4b19      	ldr	r3, [pc, #100]	; (8017658 <input_parameter+0x568>)
 80175f4:	4a1d      	ldr	r2, [pc, #116]	; (801766c <input_parameter+0x57c>)
 80175f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 80175fa:	4b17      	ldr	r3, [pc, #92]	; (8017658 <input_parameter+0x568>)
 80175fc:	4a17      	ldr	r2, [pc, #92]	; (801765c <input_parameter+0x56c>)
 80175fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 8017602:	4b15      	ldr	r3, [pc, #84]	; (8017658 <input_parameter+0x568>)
 8017604:	4a2f      	ldr	r2, [pc, #188]	; (80176c4 <input_parameter+0x5d4>)
 8017606:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 801760a:	4b13      	ldr	r3, [pc, #76]	; (8017658 <input_parameter+0x568>)
 801760c:	4a21      	ldr	r2, [pc, #132]	; (8017694 <input_parameter+0x5a4>)
 801760e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 8017612:	4b11      	ldr	r3, [pc, #68]	; (8017658 <input_parameter+0x568>)
 8017614:	4a2c      	ldr	r2, [pc, #176]	; (80176c8 <input_parameter+0x5d8>)
 8017616:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 31;
 801761a:	4b0f      	ldr	r3, [pc, #60]	; (8017658 <input_parameter+0x568>)
 801761c:	4a17      	ldr	r2, [pc, #92]	; (801767c <input_parameter+0x58c>)
 801761e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 8017622:	4b0d      	ldr	r3, [pc, #52]	; (8017658 <input_parameter+0x568>)
 8017624:	4a0d      	ldr	r2, [pc, #52]	; (801765c <input_parameter+0x56c>)
 8017626:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 801762a:	e04f      	b.n	80176cc <input_parameter+0x5dc>
 801762c:	2000dc74 	.word	0x2000dc74
 8017630:	44250000 	.word	0x44250000
 8017634:	45fa0000 	.word	0x45fa0000
 8017638:	425c0000 	.word	0x425c0000
 801763c:	42c80000 	.word	0x42c80000
 8017640:	42ce0000 	.word	0x42ce0000
 8017644:	442f0000 	.word	0x442f0000
 8017648:	462be000 	.word	0x462be000
 801764c:	420c0000 	.word	0x420c0000
 8017650:	42600000 	.word	0x42600000
 8017654:	42700000 	.word	0x42700000
 8017658:	2000ddbc 	.word	0x2000ddbc
 801765c:	44160000 	.word	0x44160000
 8017660:	44898000 	.word	0x44898000
 8017664:	476a6000 	.word	0x476a6000
 8017668:	40a00000 	.word	0x40a00000
 801766c:	41e00000 	.word	0x41e00000
 8017670:	446d8000 	.word	0x446d8000
 8017674:	466a6000 	.word	0x466a6000
 8017678:	41e80000 	.word	0x41e80000
 801767c:	41f80000 	.word	0x41f80000
 8017680:	444d0000 	.word	0x444d0000
 8017684:	465ac000 	.word	0x465ac000
 8017688:	40e00000 	.word	0x40e00000
 801768c:	42040000 	.word	0x42040000
 8017690:	444f8000 	.word	0x444f8000
 8017694:	463b8000 	.word	0x463b8000
 8017698:	41500000 	.word	0x41500000
 801769c:	42180000 	.word	0x42180000
 80176a0:	44608000 	.word	0x44608000
 80176a4:	41400000 	.word	0x41400000
 80176a8:	42100000 	.word	0x42100000
 80176ac:	446b0000 	.word	0x446b0000
 80176b0:	42380000 	.word	0x42380000
 80176b4:	44610000 	.word	0x44610000
 80176b8:	42240000 	.word	0x42240000
 80176bc:	44340000 	.word	0x44340000
 80176c0:	422c0000 	.word	0x422c0000
 80176c4:	443b8000 	.word	0x443b8000
 80176c8:	42200000 	.word	0x42200000
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 80176cc:	4b29      	ldr	r3, [pc, #164]	; (8017774 <input_parameter+0x684>)
 80176ce:	4a2a      	ldr	r2, [pc, #168]	; (8017778 <input_parameter+0x688>)
 80176d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 80176d4:	4b27      	ldr	r3, [pc, #156]	; (8017774 <input_parameter+0x684>)
 80176d6:	4a29      	ldr	r2, [pc, #164]	; (801777c <input_parameter+0x68c>)
 80176d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 80176dc:	4b25      	ldr	r3, [pc, #148]	; (8017774 <input_parameter+0x684>)
 80176de:	4a28      	ldr	r2, [pc, #160]	; (8017780 <input_parameter+0x690>)
 80176e0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 32;
 80176e4:	4b23      	ldr	r3, [pc, #140]	; (8017774 <input_parameter+0x684>)
 80176e6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80176ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 80176ee:	4b21      	ldr	r3, [pc, #132]	; (8017774 <input_parameter+0x684>)
 80176f0:	4a24      	ldr	r2, [pc, #144]	; (8017784 <input_parameter+0x694>)
 80176f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 80176f6:	4b1f      	ldr	r3, [pc, #124]	; (8017774 <input_parameter+0x684>)
 80176f8:	4a23      	ldr	r2, [pc, #140]	; (8017788 <input_parameter+0x698>)
 80176fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 80176fe:	4b1d      	ldr	r3, [pc, #116]	; (8017774 <input_parameter+0x684>)
 8017700:	4a22      	ldr	r2, [pc, #136]	; (801778c <input_parameter+0x69c>)
 8017702:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8017706:	4b1b      	ldr	r3, [pc, #108]	; (8017774 <input_parameter+0x684>)
 8017708:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801770c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 46;
 8017710:	4b18      	ldr	r3, [pc, #96]	; (8017774 <input_parameter+0x684>)
 8017712:	4a1f      	ldr	r2, [pc, #124]	; (8017790 <input_parameter+0x6a0>)
 8017714:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8017718:	4b16      	ldr	r3, [pc, #88]	; (8017774 <input_parameter+0x684>)
 801771a:	4a1a      	ldr	r2, [pc, #104]	; (8017784 <input_parameter+0x694>)
 801771c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8017720:	4b14      	ldr	r3, [pc, #80]	; (8017774 <input_parameter+0x684>)
 8017722:	4a1c      	ldr	r2, [pc, #112]	; (8017794 <input_parameter+0x6a4>)
 8017724:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8017728:	4b12      	ldr	r3, [pc, #72]	; (8017774 <input_parameter+0x684>)
 801772a:	4a14      	ldr	r2, [pc, #80]	; (801777c <input_parameter+0x68c>)
 801772c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8017730:	4b10      	ldr	r3, [pc, #64]	; (8017774 <input_parameter+0x684>)
 8017732:	4a19      	ldr	r2, [pc, #100]	; (8017798 <input_parameter+0x6a8>)
 8017734:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8017738:	4b0e      	ldr	r3, [pc, #56]	; (8017774 <input_parameter+0x684>)
 801773a:	4a18      	ldr	r2, [pc, #96]	; (801779c <input_parameter+0x6ac>)
 801773c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8017740:	4b0c      	ldr	r3, [pc, #48]	; (8017774 <input_parameter+0x684>)
 8017742:	4a10      	ldr	r2, [pc, #64]	; (8017784 <input_parameter+0x694>)
 8017744:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8017748:	4b0a      	ldr	r3, [pc, #40]	; (8017774 <input_parameter+0x684>)
 801774a:	4a15      	ldr	r2, [pc, #84]	; (80177a0 <input_parameter+0x6b0>)
 801774c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8017750:	4b08      	ldr	r3, [pc, #32]	; (8017774 <input_parameter+0x684>)
 8017752:	4a14      	ldr	r2, [pc, #80]	; (80177a4 <input_parameter+0x6b4>)
 8017754:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8017758:	4b06      	ldr	r3, [pc, #24]	; (8017774 <input_parameter+0x684>)
 801775a:	4a13      	ldr	r2, [pc, #76]	; (80177a8 <input_parameter+0x6b8>)
 801775c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8017760:	4b04      	ldr	r3, [pc, #16]	; (8017774 <input_parameter+0x684>)
 8017762:	4a0e      	ldr	r2, [pc, #56]	; (801779c <input_parameter+0x6ac>)
 8017764:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



}
 8017768:	bf00      	nop
 801776a:	46bd      	mov	sp, r7
 801776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017770:	4770      	bx	lr
 8017772:	bf00      	nop
 8017774:	2000ddbc 	.word	0x2000ddbc
 8017778:	44660000 	.word	0x44660000
 801777c:	466a6000 	.word	0x466a6000
 8017780:	40a00000 	.word	0x40a00000
 8017784:	44160000 	.word	0x44160000
 8017788:	445e8000 	.word	0x445e8000
 801778c:	465ac000 	.word	0x465ac000
 8017790:	42380000 	.word	0x42380000
 8017794:	446b0000 	.word	0x446b0000
 8017798:	41880000 	.word	0x41880000
 801779c:	41a00000 	.word	0x41a00000
 80177a0:	44700000 	.word	0x44700000
 80177a4:	467a0000 	.word	0x467a0000
 80177a8:	41200000 	.word	0x41200000

080177ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80177b0:	4b22      	ldr	r3, [pc, #136]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177b2:	4a23      	ldr	r2, [pc, #140]	; (8017840 <MX_USART1_UART_Init+0x94>)
 80177b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80177b6:	4b21      	ldr	r3, [pc, #132]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80177bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80177be:	4b1f      	ldr	r3, [pc, #124]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177c0:	2200      	movs	r2, #0
 80177c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80177c4:	4b1d      	ldr	r3, [pc, #116]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177c6:	2200      	movs	r2, #0
 80177c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80177ca:	4b1c      	ldr	r3, [pc, #112]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177cc:	2200      	movs	r2, #0
 80177ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80177d0:	4b1a      	ldr	r3, [pc, #104]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177d2:	220c      	movs	r2, #12
 80177d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80177d6:	4b19      	ldr	r3, [pc, #100]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177d8:	2200      	movs	r2, #0
 80177da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80177dc:	4b17      	ldr	r3, [pc, #92]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177de:	2200      	movs	r2, #0
 80177e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80177e2:	4b16      	ldr	r3, [pc, #88]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177e4:	2200      	movs	r2, #0
 80177e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80177e8:	4b14      	ldr	r3, [pc, #80]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177ea:	2200      	movs	r2, #0
 80177ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80177ee:	4b13      	ldr	r3, [pc, #76]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177f0:	2200      	movs	r2, #0
 80177f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80177f4:	4811      	ldr	r0, [pc, #68]	; (801783c <MX_USART1_UART_Init+0x90>)
 80177f6:	f006 fd25 	bl	801e244 <HAL_UART_Init>
 80177fa:	4603      	mov	r3, r0
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d001      	beq.n	8017804 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8017800:	f7f2 fd15 	bl	800a22e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017804:	2100      	movs	r1, #0
 8017806:	480d      	ldr	r0, [pc, #52]	; (801783c <MX_USART1_UART_Init+0x90>)
 8017808:	f007 faec 	bl	801ede4 <HAL_UARTEx_SetTxFifoThreshold>
 801780c:	4603      	mov	r3, r0
 801780e:	2b00      	cmp	r3, #0
 8017810:	d001      	beq.n	8017816 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8017812:	f7f2 fd0c 	bl	800a22e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017816:	2100      	movs	r1, #0
 8017818:	4808      	ldr	r0, [pc, #32]	; (801783c <MX_USART1_UART_Init+0x90>)
 801781a:	f007 fb21 	bl	801ee60 <HAL_UARTEx_SetRxFifoThreshold>
 801781e:	4603      	mov	r3, r0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d001      	beq.n	8017828 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8017824:	f7f2 fd03 	bl	800a22e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8017828:	4804      	ldr	r0, [pc, #16]	; (801783c <MX_USART1_UART_Init+0x90>)
 801782a:	f007 faa2 	bl	801ed72 <HAL_UARTEx_DisableFifoMode>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d001      	beq.n	8017838 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8017834:	f7f2 fcfb 	bl	800a22e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8017838:	bf00      	nop
 801783a:	bd80      	pop	{r7, pc}
 801783c:	2000df04 	.word	0x2000df04
 8017840:	40013800 	.word	0x40013800

08017844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b09e      	sub	sp, #120	; 0x78
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801784c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017850:	2200      	movs	r2, #0
 8017852:	601a      	str	r2, [r3, #0]
 8017854:	605a      	str	r2, [r3, #4]
 8017856:	609a      	str	r2, [r3, #8]
 8017858:	60da      	str	r2, [r3, #12]
 801785a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801785c:	f107 0314 	add.w	r3, r7, #20
 8017860:	2250      	movs	r2, #80	; 0x50
 8017862:	2100      	movs	r1, #0
 8017864:	4618      	mov	r0, r3
 8017866:	f007 fbbf 	bl	801efe8 <memset>
  if(uartHandle->Instance==USART1)
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4a1f      	ldr	r2, [pc, #124]	; (80178ec <HAL_UART_MspInit+0xa8>)
 8017870:	4293      	cmp	r3, r2
 8017872:	d137      	bne.n	80178e4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017874:	2301      	movs	r3, #1
 8017876:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8017878:	2300      	movs	r3, #0
 801787a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801787c:	f107 0314 	add.w	r3, r7, #20
 8017880:	4618      	mov	r0, r3
 8017882:	f004 f889 	bl	801b998 <HAL_RCCEx_PeriphCLKConfig>
 8017886:	4603      	mov	r3, r0
 8017888:	2b00      	cmp	r3, #0
 801788a:	d001      	beq.n	8017890 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 801788c:	f7f2 fccf 	bl	800a22e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017890:	4b17      	ldr	r3, [pc, #92]	; (80178f0 <HAL_UART_MspInit+0xac>)
 8017892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017894:	4a16      	ldr	r2, [pc, #88]	; (80178f0 <HAL_UART_MspInit+0xac>)
 8017896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801789a:	6613      	str	r3, [r2, #96]	; 0x60
 801789c:	4b14      	ldr	r3, [pc, #80]	; (80178f0 <HAL_UART_MspInit+0xac>)
 801789e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80178a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80178a4:	613b      	str	r3, [r7, #16]
 80178a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80178a8:	4b11      	ldr	r3, [pc, #68]	; (80178f0 <HAL_UART_MspInit+0xac>)
 80178aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178ac:	4a10      	ldr	r2, [pc, #64]	; (80178f0 <HAL_UART_MspInit+0xac>)
 80178ae:	f043 0301 	orr.w	r3, r3, #1
 80178b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80178b4:	4b0e      	ldr	r3, [pc, #56]	; (80178f0 <HAL_UART_MspInit+0xac>)
 80178b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80178b8:	f003 0301 	and.w	r3, r3, #1
 80178bc:	60fb      	str	r3, [r7, #12]
 80178be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80178c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80178c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178c6:	2302      	movs	r3, #2
 80178c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178ca:	2300      	movs	r3, #0
 80178cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178ce:	2300      	movs	r3, #0
 80178d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80178d2:	2307      	movs	r3, #7
 80178d4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80178d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80178da:	4619      	mov	r1, r3
 80178dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80178e0:	f003 f8dc 	bl	801aa9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80178e4:	bf00      	nop
 80178e6:	3778      	adds	r7, #120	; 0x78
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	40013800 	.word	0x40013800
 80178f0:	40021000 	.word	0x40021000

080178f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80178f4:	480d      	ldr	r0, [pc, #52]	; (801792c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80178f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80178f8:	480d      	ldr	r0, [pc, #52]	; (8017930 <LoopForever+0x6>)
  ldr r1, =_edata
 80178fa:	490e      	ldr	r1, [pc, #56]	; (8017934 <LoopForever+0xa>)
  ldr r2, =_sidata
 80178fc:	4a0e      	ldr	r2, [pc, #56]	; (8017938 <LoopForever+0xe>)
  movs r3, #0
 80178fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8017900:	e002      	b.n	8017908 <LoopCopyDataInit>

08017902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017906:	3304      	adds	r3, #4

08017908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801790a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801790c:	d3f9      	bcc.n	8017902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801790e:	4a0b      	ldr	r2, [pc, #44]	; (801793c <LoopForever+0x12>)
  ldr r4, =_ebss
 8017910:	4c0b      	ldr	r4, [pc, #44]	; (8017940 <LoopForever+0x16>)
  movs r3, #0
 8017912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017914:	e001      	b.n	801791a <LoopFillZerobss>

08017916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017918:	3204      	adds	r2, #4

0801791a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801791a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801791c:	d3fb      	bcc.n	8017916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801791e:	f7ff f91f 	bl	8016b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017922:	f007 fb2f 	bl	801ef84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8017926:	f7f2 fb87 	bl	800a038 <main>

0801792a <LoopForever>:

LoopForever:
    b LoopForever
 801792a:	e7fe      	b.n	801792a <LoopForever>
  ldr   r0, =_estack
 801792c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8017930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017934:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8017938:	08022740 	.word	0x08022740
  ldr r2, =_sbss
 801793c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8017940:	2000dfa8 	.word	0x2000dfa8

08017944 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8017944:	e7fe      	b.n	8017944 <ADC3_IRQHandler>

08017946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017946:	b580      	push	{r7, lr}
 8017948:	b082      	sub	sp, #8
 801794a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801794c:	2300      	movs	r3, #0
 801794e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017950:	2003      	movs	r0, #3
 8017952:	f002 fb2f 	bl	8019fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8017956:	200f      	movs	r0, #15
 8017958:	f000 f80e 	bl	8017978 <HAL_InitTick>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d002      	beq.n	8017968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8017962:	2301      	movs	r3, #1
 8017964:	71fb      	strb	r3, [r7, #7]
 8017966:	e001      	b.n	801796c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8017968:	f7fe ffa8 	bl	80168bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801796c:	79fb      	ldrb	r3, [r7, #7]

}
 801796e:	4618      	mov	r0, r3
 8017970:	3708      	adds	r7, #8
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}
	...

08017978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b084      	sub	sp, #16
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017980:	2300      	movs	r3, #0
 8017982:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8017984:	4b16      	ldr	r3, [pc, #88]	; (80179e0 <HAL_InitTick+0x68>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d022      	beq.n	80179d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 801798c:	4b15      	ldr	r3, [pc, #84]	; (80179e4 <HAL_InitTick+0x6c>)
 801798e:	681a      	ldr	r2, [r3, #0]
 8017990:	4b13      	ldr	r3, [pc, #76]	; (80179e0 <HAL_InitTick+0x68>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017998:	fbb1 f3f3 	udiv	r3, r1, r3
 801799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80179a0:	4618      	mov	r0, r3
 80179a2:	f002 fb3a 	bl	801a01a <HAL_SYSTICK_Config>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d10f      	bne.n	80179cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b0f      	cmp	r3, #15
 80179b0:	d809      	bhi.n	80179c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80179b2:	2200      	movs	r2, #0
 80179b4:	6879      	ldr	r1, [r7, #4]
 80179b6:	f04f 30ff 	mov.w	r0, #4294967295
 80179ba:	f002 fb06 	bl	8019fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80179be:	4a0a      	ldr	r2, [pc, #40]	; (80179e8 <HAL_InitTick+0x70>)
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	6013      	str	r3, [r2, #0]
 80179c4:	e007      	b.n	80179d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80179c6:	2301      	movs	r3, #1
 80179c8:	73fb      	strb	r3, [r7, #15]
 80179ca:	e004      	b.n	80179d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80179cc:	2301      	movs	r3, #1
 80179ce:	73fb      	strb	r3, [r7, #15]
 80179d0:	e001      	b.n	80179d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80179d2:	2301      	movs	r3, #1
 80179d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80179d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80179d8:	4618      	mov	r0, r3
 80179da:	3710      	adds	r7, #16
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}
 80179e0:	20000008 	.word	0x20000008
 80179e4:	20000000 	.word	0x20000000
 80179e8:	20000004 	.word	0x20000004

080179ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80179ec:	b480      	push	{r7}
 80179ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80179f0:	4b05      	ldr	r3, [pc, #20]	; (8017a08 <HAL_IncTick+0x1c>)
 80179f2:	681a      	ldr	r2, [r3, #0]
 80179f4:	4b05      	ldr	r3, [pc, #20]	; (8017a0c <HAL_IncTick+0x20>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	4413      	add	r3, r2
 80179fa:	4a03      	ldr	r2, [pc, #12]	; (8017a08 <HAL_IncTick+0x1c>)
 80179fc:	6013      	str	r3, [r2, #0]
}
 80179fe:	bf00      	nop
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr
 8017a08:	2000df94 	.word	0x2000df94
 8017a0c:	20000008 	.word	0x20000008

08017a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017a10:	b480      	push	{r7}
 8017a12:	af00      	add	r7, sp, #0
  return uwTick;
 8017a14:	4b03      	ldr	r3, [pc, #12]	; (8017a24 <HAL_GetTick+0x14>)
 8017a16:	681b      	ldr	r3, [r3, #0]
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a20:	4770      	bx	lr
 8017a22:	bf00      	nop
 8017a24:	2000df94 	.word	0x2000df94

08017a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017a30:	f7ff ffee 	bl	8017a10 <HAL_GetTick>
 8017a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a40:	d004      	beq.n	8017a4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8017a42:	4b09      	ldr	r3, [pc, #36]	; (8017a68 <HAL_Delay+0x40>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	68fa      	ldr	r2, [r7, #12]
 8017a48:	4413      	add	r3, r2
 8017a4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017a4c:	bf00      	nop
 8017a4e:	f7ff ffdf 	bl	8017a10 <HAL_GetTick>
 8017a52:	4602      	mov	r2, r0
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	1ad3      	subs	r3, r2, r3
 8017a58:	68fa      	ldr	r2, [r7, #12]
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d8f7      	bhi.n	8017a4e <HAL_Delay+0x26>
  {
  }
}
 8017a5e:	bf00      	nop
 8017a60:	bf00      	nop
 8017a62:	3710      	adds	r7, #16
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	20000008 	.word	0x20000008

08017a6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b083      	sub	sp, #12
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
 8017a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	689b      	ldr	r3, [r3, #8]
 8017a7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	431a      	orrs	r2, r3
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	609a      	str	r2, [r3, #8]
}
 8017a86:	bf00      	nop
 8017a88:	370c      	adds	r7, #12
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a90:	4770      	bx	lr

08017a92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8017a92:	b480      	push	{r7}
 8017a94:	b083      	sub	sp, #12
 8017a96:	af00      	add	r7, sp, #0
 8017a98:	6078      	str	r0, [r7, #4]
 8017a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	689b      	ldr	r3, [r3, #8]
 8017aa0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8017aa4:	683b      	ldr	r3, [r7, #0]
 8017aa6:	431a      	orrs	r2, r3
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	609a      	str	r2, [r3, #8]
}
 8017aac:	bf00      	nop
 8017aae:	370c      	adds	r7, #12
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab6:	4770      	bx	lr

08017ab8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017ab8:	b480      	push	{r7}
 8017aba:	b083      	sub	sp, #12
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	689b      	ldr	r3, [r3, #8]
 8017ac4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	370c      	adds	r7, #12
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr

08017ad4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	b087      	sub	sp, #28
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	60f8      	str	r0, [r7, #12]
 8017adc:	60b9      	str	r1, [r7, #8]
 8017ade:	607a      	str	r2, [r7, #4]
 8017ae0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	3360      	adds	r3, #96	; 0x60
 8017ae6:	461a      	mov	r2, r3
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	009b      	lsls	r3, r3, #2
 8017aec:	4413      	add	r3, r2
 8017aee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	681a      	ldr	r2, [r3, #0]
 8017af4:	4b08      	ldr	r3, [pc, #32]	; (8017b18 <LL_ADC_SetOffset+0x44>)
 8017af6:	4013      	ands	r3, r2
 8017af8:	687a      	ldr	r2, [r7, #4]
 8017afa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8017afe:	683a      	ldr	r2, [r7, #0]
 8017b00:	430a      	orrs	r2, r1
 8017b02:	4313      	orrs	r3, r2
 8017b04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017b08:	697b      	ldr	r3, [r7, #20]
 8017b0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8017b0c:	bf00      	nop
 8017b0e:	371c      	adds	r7, #28
 8017b10:	46bd      	mov	sp, r7
 8017b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b16:	4770      	bx	lr
 8017b18:	03fff000 	.word	0x03fff000

08017b1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b085      	sub	sp, #20
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	3360      	adds	r3, #96	; 0x60
 8017b2a:	461a      	mov	r2, r3
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	009b      	lsls	r3, r3, #2
 8017b30:	4413      	add	r3, r2
 8017b32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3714      	adds	r7, #20
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr

08017b48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8017b48:	b480      	push	{r7}
 8017b4a:	b087      	sub	sp, #28
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	3360      	adds	r3, #96	; 0x60
 8017b58:	461a      	mov	r2, r3
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	009b      	lsls	r3, r3, #2
 8017b5e:	4413      	add	r3, r2
 8017b60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	431a      	orrs	r2, r3
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8017b72:	bf00      	nop
 8017b74:	371c      	adds	r7, #28
 8017b76:	46bd      	mov	sp, r7
 8017b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7c:	4770      	bx	lr

08017b7e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8017b7e:	b480      	push	{r7}
 8017b80:	b087      	sub	sp, #28
 8017b82:	af00      	add	r7, sp, #0
 8017b84:	60f8      	str	r0, [r7, #12]
 8017b86:	60b9      	str	r1, [r7, #8]
 8017b88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	3360      	adds	r3, #96	; 0x60
 8017b8e:	461a      	mov	r2, r3
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	009b      	lsls	r3, r3, #2
 8017b94:	4413      	add	r3, r2
 8017b96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017b98:	697b      	ldr	r3, [r7, #20]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	431a      	orrs	r2, r3
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8017ba8:	bf00      	nop
 8017baa:	371c      	adds	r7, #28
 8017bac:	46bd      	mov	sp, r7
 8017bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb2:	4770      	bx	lr

08017bb4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8017bb4:	b480      	push	{r7}
 8017bb6:	b087      	sub	sp, #28
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	60f8      	str	r0, [r7, #12]
 8017bbc:	60b9      	str	r1, [r7, #8]
 8017bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	3360      	adds	r3, #96	; 0x60
 8017bc4:	461a      	mov	r2, r3
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	009b      	lsls	r3, r3, #2
 8017bca:	4413      	add	r3, r2
 8017bcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	431a      	orrs	r2, r3
 8017bda:	697b      	ldr	r3, [r7, #20]
 8017bdc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8017bde:	bf00      	nop
 8017be0:	371c      	adds	r7, #28
 8017be2:	46bd      	mov	sp, r7
 8017be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be8:	4770      	bx	lr

08017bea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8017bea:	b480      	push	{r7}
 8017bec:	b083      	sub	sp, #12
 8017bee:	af00      	add	r7, sp, #0
 8017bf0:	6078      	str	r0, [r7, #4]
 8017bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	695b      	ldr	r3, [r3, #20]
 8017bf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	431a      	orrs	r2, r3
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	615a      	str	r2, [r3, #20]
}
 8017c04:	bf00      	nop
 8017c06:	370c      	adds	r7, #12
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0e:	4770      	bx	lr

08017c10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017c10:	b480      	push	{r7}
 8017c12:	b083      	sub	sp, #12
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	68db      	ldr	r3, [r3, #12]
 8017c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d101      	bne.n	8017c28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8017c24:	2301      	movs	r3, #1
 8017c26:	e000      	b.n	8017c2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8017c28:	2300      	movs	r3, #0
}
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	370c      	adds	r7, #12
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c34:	4770      	bx	lr

08017c36 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8017c36:	b480      	push	{r7}
 8017c38:	b087      	sub	sp, #28
 8017c3a:	af00      	add	r7, sp, #0
 8017c3c:	60f8      	str	r0, [r7, #12]
 8017c3e:	60b9      	str	r1, [r7, #8]
 8017c40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	3330      	adds	r3, #48	; 0x30
 8017c46:	461a      	mov	r2, r3
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	0a1b      	lsrs	r3, r3, #8
 8017c4c:	009b      	lsls	r3, r3, #2
 8017c4e:	f003 030c 	and.w	r3, r3, #12
 8017c52:	4413      	add	r3, r2
 8017c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	681a      	ldr	r2, [r3, #0]
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	f003 031f 	and.w	r3, r3, #31
 8017c60:	211f      	movs	r1, #31
 8017c62:	fa01 f303 	lsl.w	r3, r1, r3
 8017c66:	43db      	mvns	r3, r3
 8017c68:	401a      	ands	r2, r3
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	0e9b      	lsrs	r3, r3, #26
 8017c6e:	f003 011f 	and.w	r1, r3, #31
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	f003 031f 	and.w	r3, r3, #31
 8017c78:	fa01 f303 	lsl.w	r3, r1, r3
 8017c7c:	431a      	orrs	r2, r3
 8017c7e:	697b      	ldr	r3, [r7, #20]
 8017c80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8017c82:	bf00      	nop
 8017c84:	371c      	adds	r7, #28
 8017c86:	46bd      	mov	sp, r7
 8017c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8c:	4770      	bx	lr

08017c8e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017c8e:	b480      	push	{r7}
 8017c90:	b083      	sub	sp, #12
 8017c92:	af00      	add	r7, sp, #0
 8017c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017c9a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d101      	bne.n	8017ca6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	e000      	b.n	8017ca8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8017ca6:	2300      	movs	r3, #0
}
 8017ca8:	4618      	mov	r0, r3
 8017caa:	370c      	adds	r7, #12
 8017cac:	46bd      	mov	sp, r7
 8017cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb2:	4770      	bx	lr

08017cb4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8017cb4:	b480      	push	{r7}
 8017cb6:	b087      	sub	sp, #28
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	60f8      	str	r0, [r7, #12]
 8017cbc:	60b9      	str	r1, [r7, #8]
 8017cbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	3314      	adds	r3, #20
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	68bb      	ldr	r3, [r7, #8]
 8017cc8:	0e5b      	lsrs	r3, r3, #25
 8017cca:	009b      	lsls	r3, r3, #2
 8017ccc:	f003 0304 	and.w	r3, r3, #4
 8017cd0:	4413      	add	r3, r2
 8017cd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017cd4:	697b      	ldr	r3, [r7, #20]
 8017cd6:	681a      	ldr	r2, [r3, #0]
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	0d1b      	lsrs	r3, r3, #20
 8017cdc:	f003 031f 	and.w	r3, r3, #31
 8017ce0:	2107      	movs	r1, #7
 8017ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8017ce6:	43db      	mvns	r3, r3
 8017ce8:	401a      	ands	r2, r3
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	0d1b      	lsrs	r3, r3, #20
 8017cee:	f003 031f 	and.w	r3, r3, #31
 8017cf2:	6879      	ldr	r1, [r7, #4]
 8017cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8017cf8:	431a      	orrs	r2, r3
 8017cfa:	697b      	ldr	r3, [r7, #20]
 8017cfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8017cfe:	bf00      	nop
 8017d00:	371c      	adds	r7, #28
 8017d02:	46bd      	mov	sp, r7
 8017d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d08:	4770      	bx	lr
	...

08017d0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8017d0c:	b480      	push	{r7}
 8017d0e:	b085      	sub	sp, #20
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	4a0f      	ldr	r2, [pc, #60]	; (8017d58 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	d10a      	bne.n	8017d36 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017d2c:	431a      	orrs	r2, r3
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8017d34:	e00a      	b.n	8017d4c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017d42:	43db      	mvns	r3, r3
 8017d44:	401a      	ands	r2, r3
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8017d4c:	bf00      	nop
 8017d4e:	3714      	adds	r7, #20
 8017d50:	46bd      	mov	sp, r7
 8017d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d56:	4770      	bx	lr
 8017d58:	407f0000 	.word	0x407f0000

08017d5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017d5c:	b480      	push	{r7}
 8017d5e:	b083      	sub	sp, #12
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	689b      	ldr	r3, [r3, #8]
 8017d68:	f003 031f 	and.w	r3, r3, #31
}
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	370c      	adds	r7, #12
 8017d70:	46bd      	mov	sp, r7
 8017d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d76:	4770      	bx	lr

08017d78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017d78:	b480      	push	{r7}
 8017d7a:	b083      	sub	sp, #12
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	689b      	ldr	r3, [r3, #8]
 8017d84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	370c      	adds	r7, #12
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d92:	4770      	bx	lr

08017d94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8017d94:	b480      	push	{r7}
 8017d96:	b083      	sub	sp, #12
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	689b      	ldr	r3, [r3, #8]
 8017da0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8017da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017da8:	687a      	ldr	r2, [r7, #4]
 8017daa:	6093      	str	r3, [r2, #8]
}
 8017dac:	bf00      	nop
 8017dae:	370c      	adds	r7, #12
 8017db0:	46bd      	mov	sp, r7
 8017db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db6:	4770      	bx	lr

08017db8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	689b      	ldr	r3, [r3, #8]
 8017dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017dcc:	d101      	bne.n	8017dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8017dce:	2301      	movs	r3, #1
 8017dd0:	e000      	b.n	8017dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8017dd2:	2300      	movs	r3, #0
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	370c      	adds	r7, #12
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dde:	4770      	bx	lr

08017de0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8017de0:	b480      	push	{r7}
 8017de2:	b083      	sub	sp, #12
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	689b      	ldr	r3, [r3, #8]
 8017dec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8017df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8017dfc:	bf00      	nop
 8017dfe:	370c      	adds	r7, #12
 8017e00:	46bd      	mov	sp, r7
 8017e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e06:	4770      	bx	lr

08017e08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8017e08:	b480      	push	{r7}
 8017e0a:	b083      	sub	sp, #12
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	689b      	ldr	r3, [r3, #8]
 8017e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017e1c:	d101      	bne.n	8017e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8017e1e:	2301      	movs	r3, #1
 8017e20:	e000      	b.n	8017e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8017e22:	2300      	movs	r3, #0
}
 8017e24:	4618      	mov	r0, r3
 8017e26:	370c      	adds	r7, #12
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2e:	4770      	bx	lr

08017e30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8017e30:	b480      	push	{r7}
 8017e32:	b083      	sub	sp, #12
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	689b      	ldr	r3, [r3, #8]
 8017e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017e44:	f043 0201 	orr.w	r2, r3, #1
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8017e4c:	bf00      	nop
 8017e4e:	370c      	adds	r7, #12
 8017e50:	46bd      	mov	sp, r7
 8017e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e56:	4770      	bx	lr

08017e58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8017e58:	b480      	push	{r7}
 8017e5a:	b083      	sub	sp, #12
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	689b      	ldr	r3, [r3, #8]
 8017e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017e6c:	f043 0202 	orr.w	r2, r3, #2
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8017e74:	bf00      	nop
 8017e76:	370c      	adds	r7, #12
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7e:	4770      	bx	lr

08017e80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8017e80:	b480      	push	{r7}
 8017e82:	b083      	sub	sp, #12
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	689b      	ldr	r3, [r3, #8]
 8017e8c:	f003 0301 	and.w	r3, r3, #1
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d101      	bne.n	8017e98 <LL_ADC_IsEnabled+0x18>
 8017e94:	2301      	movs	r3, #1
 8017e96:	e000      	b.n	8017e9a <LL_ADC_IsEnabled+0x1a>
 8017e98:	2300      	movs	r3, #0
}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	370c      	adds	r7, #12
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea4:	4770      	bx	lr

08017ea6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8017ea6:	b480      	push	{r7}
 8017ea8:	b083      	sub	sp, #12
 8017eaa:	af00      	add	r7, sp, #0
 8017eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	689b      	ldr	r3, [r3, #8]
 8017eb2:	f003 0302 	and.w	r3, r3, #2
 8017eb6:	2b02      	cmp	r3, #2
 8017eb8:	d101      	bne.n	8017ebe <LL_ADC_IsDisableOngoing+0x18>
 8017eba:	2301      	movs	r3, #1
 8017ebc:	e000      	b.n	8017ec0 <LL_ADC_IsDisableOngoing+0x1a>
 8017ebe:	2300      	movs	r3, #0
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	370c      	adds	r7, #12
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eca:	4770      	bx	lr

08017ecc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	689b      	ldr	r3, [r3, #8]
 8017ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017ee0:	f043 0204 	orr.w	r2, r3, #4
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8017ee8:	bf00      	nop
 8017eea:	370c      	adds	r7, #12
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr

08017ef4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8017ef4:	b480      	push	{r7}
 8017ef6:	b083      	sub	sp, #12
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	689b      	ldr	r3, [r3, #8]
 8017f00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017f08:	f043 0210 	orr.w	r2, r3, #16
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8017f10:	bf00      	nop
 8017f12:	370c      	adds	r7, #12
 8017f14:	46bd      	mov	sp, r7
 8017f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1a:	4770      	bx	lr

08017f1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8017f1c:	b480      	push	{r7}
 8017f1e:	b083      	sub	sp, #12
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	689b      	ldr	r3, [r3, #8]
 8017f28:	f003 0304 	and.w	r3, r3, #4
 8017f2c:	2b04      	cmp	r3, #4
 8017f2e:	d101      	bne.n	8017f34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8017f30:	2301      	movs	r3, #1
 8017f32:	e000      	b.n	8017f36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8017f34:	2300      	movs	r3, #0
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	370c      	adds	r7, #12
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f40:	4770      	bx	lr

08017f42 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8017f42:	b480      	push	{r7}
 8017f44:	b083      	sub	sp, #12
 8017f46:	af00      	add	r7, sp, #0
 8017f48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	689b      	ldr	r3, [r3, #8]
 8017f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017f56:	f043 0220 	orr.w	r2, r3, #32
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8017f5e:	bf00      	nop
 8017f60:	370c      	adds	r7, #12
 8017f62:	46bd      	mov	sp, r7
 8017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f68:	4770      	bx	lr

08017f6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8017f6a:	b480      	push	{r7}
 8017f6c:	b083      	sub	sp, #12
 8017f6e:	af00      	add	r7, sp, #0
 8017f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	689b      	ldr	r3, [r3, #8]
 8017f76:	f003 0308 	and.w	r3, r3, #8
 8017f7a:	2b08      	cmp	r3, #8
 8017f7c:	d101      	bne.n	8017f82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8017f7e:	2301      	movs	r3, #1
 8017f80:	e000      	b.n	8017f84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8017f82:	2300      	movs	r3, #0
}
 8017f84:	4618      	mov	r0, r3
 8017f86:	370c      	adds	r7, #12
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8e:	4770      	bx	lr

08017f90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8017f90:	b590      	push	{r4, r7, lr}
 8017f92:	b089      	sub	sp, #36	; 0x24
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d101      	bne.n	8017faa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	e1a1      	b.n	80182ee <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	695b      	ldr	r3, [r3, #20]
 8017fae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d109      	bne.n	8017fcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f7f0 fae1 	bl	8008580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7ff fef1 	bl	8017db8 <LL_ADC_IsDeepPowerDownEnabled>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d004      	beq.n	8017fe6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7ff fed7 	bl	8017d94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7ff ff0c 	bl	8017e08 <LL_ADC_IsInternalRegulatorEnabled>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d115      	bne.n	8018022 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7ff fef0 	bl	8017de0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8018000:	4b9a      	ldr	r3, [pc, #616]	; (801826c <HAL_ADC_Init+0x2dc>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	099b      	lsrs	r3, r3, #6
 8018006:	4a9a      	ldr	r2, [pc, #616]	; (8018270 <HAL_ADC_Init+0x2e0>)
 8018008:	fba2 2303 	umull	r2, r3, r2, r3
 801800c:	099b      	lsrs	r3, r3, #6
 801800e:	3301      	adds	r3, #1
 8018010:	005b      	lsls	r3, r3, #1
 8018012:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8018014:	e002      	b.n	801801c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	3b01      	subs	r3, #1
 801801a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1f9      	bne.n	8018016 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	4618      	mov	r0, r3
 8018028:	f7ff feee 	bl	8017e08 <LL_ADC_IsInternalRegulatorEnabled>
 801802c:	4603      	mov	r3, r0
 801802e:	2b00      	cmp	r3, #0
 8018030:	d10d      	bne.n	801804e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018036:	f043 0210 	orr.w	r2, r3, #16
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018042:	f043 0201 	orr.w	r2, r3, #1
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 801804a:	2301      	movs	r3, #1
 801804c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	4618      	mov	r0, r3
 8018054:	f7ff ff62 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 8018058:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801805e:	f003 0310 	and.w	r3, r3, #16
 8018062:	2b00      	cmp	r3, #0
 8018064:	f040 813a 	bne.w	80182dc <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	2b00      	cmp	r3, #0
 801806c:	f040 8136 	bne.w	80182dc <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018074:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8018078:	f043 0202 	orr.w	r2, r3, #2
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	4618      	mov	r0, r3
 8018086:	f7ff fefb 	bl	8017e80 <LL_ADC_IsEnabled>
 801808a:	4603      	mov	r3, r0
 801808c:	2b00      	cmp	r3, #0
 801808e:	d137      	bne.n	8018100 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018098:	d004      	beq.n	80180a4 <HAL_ADC_Init+0x114>
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	4a75      	ldr	r2, [pc, #468]	; (8018274 <HAL_ADC_Init+0x2e4>)
 80180a0:	4293      	cmp	r3, r2
 80180a2:	d10f      	bne.n	80180c4 <HAL_ADC_Init+0x134>
 80180a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80180a8:	f7ff feea 	bl	8017e80 <LL_ADC_IsEnabled>
 80180ac:	4604      	mov	r4, r0
 80180ae:	4871      	ldr	r0, [pc, #452]	; (8018274 <HAL_ADC_Init+0x2e4>)
 80180b0:	f7ff fee6 	bl	8017e80 <LL_ADC_IsEnabled>
 80180b4:	4603      	mov	r3, r0
 80180b6:	4323      	orrs	r3, r4
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	bf0c      	ite	eq
 80180bc:	2301      	moveq	r3, #1
 80180be:	2300      	movne	r3, #0
 80180c0:	b2db      	uxtb	r3, r3
 80180c2:	e008      	b.n	80180d6 <HAL_ADC_Init+0x146>
 80180c4:	486c      	ldr	r0, [pc, #432]	; (8018278 <HAL_ADC_Init+0x2e8>)
 80180c6:	f7ff fedb 	bl	8017e80 <LL_ADC_IsEnabled>
 80180ca:	4603      	mov	r3, r0
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	bf0c      	ite	eq
 80180d0:	2301      	moveq	r3, #1
 80180d2:	2300      	movne	r3, #0
 80180d4:	b2db      	uxtb	r3, r3
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d012      	beq.n	8018100 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80180e2:	d004      	beq.n	80180ee <HAL_ADC_Init+0x15e>
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	4a62      	ldr	r2, [pc, #392]	; (8018274 <HAL_ADC_Init+0x2e4>)
 80180ea:	4293      	cmp	r3, r2
 80180ec:	d101      	bne.n	80180f2 <HAL_ADC_Init+0x162>
 80180ee:	4a63      	ldr	r2, [pc, #396]	; (801827c <HAL_ADC_Init+0x2ec>)
 80180f0:	e000      	b.n	80180f4 <HAL_ADC_Init+0x164>
 80180f2:	4a63      	ldr	r2, [pc, #396]	; (8018280 <HAL_ADC_Init+0x2f0>)
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	685b      	ldr	r3, [r3, #4]
 80180f8:	4619      	mov	r1, r3
 80180fa:	4610      	mov	r0, r2
 80180fc:	f7ff fcb6 	bl	8017a6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	7f5b      	ldrb	r3, [r3, #29]
 8018104:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801810a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8018110:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8018116:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801811e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018120:	4313      	orrs	r3, r2
 8018122:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801812a:	2b01      	cmp	r3, #1
 801812c:	d106      	bne.n	801813c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018132:	3b01      	subs	r3, #1
 8018134:	045b      	lsls	r3, r3, #17
 8018136:	69ba      	ldr	r2, [r7, #24]
 8018138:	4313      	orrs	r3, r2
 801813a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018140:	2b00      	cmp	r3, #0
 8018142:	d009      	beq.n	8018158 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018148:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018150:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8018152:	69ba      	ldr	r2, [r7, #24]
 8018154:	4313      	orrs	r3, r2
 8018156:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	68da      	ldr	r2, [r3, #12]
 801815e:	4b49      	ldr	r3, [pc, #292]	; (8018284 <HAL_ADC_Init+0x2f4>)
 8018160:	4013      	ands	r3, r2
 8018162:	687a      	ldr	r2, [r7, #4]
 8018164:	6812      	ldr	r2, [r2, #0]
 8018166:	69b9      	ldr	r1, [r7, #24]
 8018168:	430b      	orrs	r3, r1
 801816a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	691b      	ldr	r3, [r3, #16]
 8018172:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	430a      	orrs	r2, r1
 8018180:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	4618      	mov	r0, r3
 8018188:	f7ff fec8 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 801818c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	4618      	mov	r0, r3
 8018194:	f7ff fee9 	bl	8017f6a <LL_ADC_INJ_IsConversionOngoing>
 8018198:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d17b      	bne.n	8018298 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d178      	bne.n	8018298 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80181aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80181b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80181b4:	4313      	orrs	r3, r2
 80181b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	68db      	ldr	r3, [r3, #12]
 80181be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80181c2:	f023 0302 	bic.w	r3, r3, #2
 80181c6:	687a      	ldr	r2, [r7, #4]
 80181c8:	6812      	ldr	r2, [r2, #0]
 80181ca:	69b9      	ldr	r1, [r7, #24]
 80181cc:	430b      	orrs	r3, r1
 80181ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	691b      	ldr	r3, [r3, #16]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d017      	beq.n	8018208 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	691a      	ldr	r2, [r3, #16]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80181e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80181f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80181f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	6911      	ldr	r1, [r2, #16]
 80181fc:	687a      	ldr	r2, [r7, #4]
 80181fe:	6812      	ldr	r2, [r2, #0]
 8018200:	430b      	orrs	r3, r1
 8018202:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8018206:	e013      	b.n	8018230 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	691a      	ldr	r2, [r3, #16]
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018216:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	6812      	ldr	r2, [r2, #0]
 8018224:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801822c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018236:	2b01      	cmp	r3, #1
 8018238:	d126      	bne.n	8018288 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	691b      	ldr	r3, [r3, #16]
 8018240:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8018244:	f023 0304 	bic.w	r3, r3, #4
 8018248:	687a      	ldr	r2, [r7, #4]
 801824a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8018250:	4311      	orrs	r1, r2
 8018252:	687a      	ldr	r2, [r7, #4]
 8018254:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8018256:	4311      	orrs	r1, r2
 8018258:	687a      	ldr	r2, [r7, #4]
 801825a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801825c:	430a      	orrs	r2, r1
 801825e:	431a      	orrs	r2, r3
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	f042 0201 	orr.w	r2, r2, #1
 8018268:	611a      	str	r2, [r3, #16]
 801826a:	e015      	b.n	8018298 <HAL_ADC_Init+0x308>
 801826c:	20000000 	.word	0x20000000
 8018270:	053e2d63 	.word	0x053e2d63
 8018274:	50000100 	.word	0x50000100
 8018278:	50000400 	.word	0x50000400
 801827c:	50000300 	.word	0x50000300
 8018280:	50000700 	.word	0x50000700
 8018284:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	691a      	ldr	r2, [r3, #16]
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	f022 0201 	bic.w	r2, r2, #1
 8018296:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	695b      	ldr	r3, [r3, #20]
 801829c:	2b01      	cmp	r3, #1
 801829e:	d10c      	bne.n	80182ba <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182a6:	f023 010f 	bic.w	r1, r3, #15
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	6a1b      	ldr	r3, [r3, #32]
 80182ae:	1e5a      	subs	r2, r3, #1
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	430a      	orrs	r2, r1
 80182b6:	631a      	str	r2, [r3, #48]	; 0x30
 80182b8:	e007      	b.n	80182ca <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	f022 020f 	bic.w	r2, r2, #15
 80182c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182ce:	f023 0303 	bic.w	r3, r3, #3
 80182d2:	f043 0201 	orr.w	r2, r3, #1
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80182da:	e007      	b.n	80182ec <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182e0:	f043 0210 	orr.w	r2, r3, #16
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80182e8:	2301      	movs	r3, #1
 80182ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80182ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	3724      	adds	r7, #36	; 0x24
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd90      	pop	{r4, r7, pc}
 80182f6:	bf00      	nop

080182f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b086      	sub	sp, #24
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018308:	d004      	beq.n	8018314 <HAL_ADC_Start+0x1c>
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	4a5c      	ldr	r2, [pc, #368]	; (8018480 <HAL_ADC_Start+0x188>)
 8018310:	4293      	cmp	r3, r2
 8018312:	d101      	bne.n	8018318 <HAL_ADC_Start+0x20>
 8018314:	4b5b      	ldr	r3, [pc, #364]	; (8018484 <HAL_ADC_Start+0x18c>)
 8018316:	e000      	b.n	801831a <HAL_ADC_Start+0x22>
 8018318:	4b5b      	ldr	r3, [pc, #364]	; (8018488 <HAL_ADC_Start+0x190>)
 801831a:	4618      	mov	r0, r3
 801831c:	f7ff fd1e 	bl	8017d5c <LL_ADC_GetMultimode>
 8018320:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	4618      	mov	r0, r3
 8018328:	f7ff fdf8 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 801832c:	4603      	mov	r3, r0
 801832e:	2b00      	cmp	r3, #0
 8018330:	f040 809f 	bne.w	8018472 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801833a:	2b01      	cmp	r3, #1
 801833c:	d101      	bne.n	8018342 <HAL_ADC_Start+0x4a>
 801833e:	2302      	movs	r3, #2
 8018340:	e09a      	b.n	8018478 <HAL_ADC_Start+0x180>
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	2201      	movs	r2, #1
 8018346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f001 fa3e 	bl	80197cc <ADC_Enable>
 8018350:	4603      	mov	r3, r0
 8018352:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8018354:	7dfb      	ldrb	r3, [r7, #23]
 8018356:	2b00      	cmp	r3, #0
 8018358:	f040 8086 	bne.w	8018468 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018364:	f023 0301 	bic.w	r3, r3, #1
 8018368:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	4a42      	ldr	r2, [pc, #264]	; (8018480 <HAL_ADC_Start+0x188>)
 8018376:	4293      	cmp	r3, r2
 8018378:	d002      	beq.n	8018380 <HAL_ADC_Start+0x88>
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	e001      	b.n	8018384 <HAL_ADC_Start+0x8c>
 8018380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018384:	687a      	ldr	r2, [r7, #4]
 8018386:	6812      	ldr	r2, [r2, #0]
 8018388:	4293      	cmp	r3, r2
 801838a:	d002      	beq.n	8018392 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801838c:	693b      	ldr	r3, [r7, #16]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d105      	bne.n	801839e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018396:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80183a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80183aa:	d106      	bne.n	80183ba <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183b0:	f023 0206 	bic.w	r2, r3, #6
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	661a      	str	r2, [r3, #96]	; 0x60
 80183b8:	e002      	b.n	80183c0 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2200      	movs	r2, #0
 80183be:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	221c      	movs	r2, #28
 80183c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2200      	movs	r2, #0
 80183cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	4a2a      	ldr	r2, [pc, #168]	; (8018480 <HAL_ADC_Start+0x188>)
 80183d6:	4293      	cmp	r3, r2
 80183d8:	d002      	beq.n	80183e0 <HAL_ADC_Start+0xe8>
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	e001      	b.n	80183e4 <HAL_ADC_Start+0xec>
 80183e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80183e4:	687a      	ldr	r2, [r7, #4]
 80183e6:	6812      	ldr	r2, [r2, #0]
 80183e8:	4293      	cmp	r3, r2
 80183ea:	d008      	beq.n	80183fe <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80183ec:	693b      	ldr	r3, [r7, #16]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d005      	beq.n	80183fe <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80183f2:	693b      	ldr	r3, [r7, #16]
 80183f4:	2b05      	cmp	r3, #5
 80183f6:	d002      	beq.n	80183fe <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80183f8:	693b      	ldr	r3, [r7, #16]
 80183fa:	2b09      	cmp	r3, #9
 80183fc:	d114      	bne.n	8018428 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	68db      	ldr	r3, [r3, #12]
 8018404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018408:	2b00      	cmp	r3, #0
 801840a:	d007      	beq.n	801841c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018410:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8018414:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	4618      	mov	r0, r3
 8018422:	f7ff fd53 	bl	8017ecc <LL_ADC_REG_StartConversion>
 8018426:	e026      	b.n	8018476 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801842c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	4a11      	ldr	r2, [pc, #68]	; (8018480 <HAL_ADC_Start+0x188>)
 801843a:	4293      	cmp	r3, r2
 801843c:	d002      	beq.n	8018444 <HAL_ADC_Start+0x14c>
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	e001      	b.n	8018448 <HAL_ADC_Start+0x150>
 8018444:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018448:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	68db      	ldr	r3, [r3, #12]
 801844e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018452:	2b00      	cmp	r3, #0
 8018454:	d00f      	beq.n	8018476 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801845a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801845e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	65da      	str	r2, [r3, #92]	; 0x5c
 8018466:	e006      	b.n	8018476 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	2200      	movs	r2, #0
 801846c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8018470:	e001      	b.n	8018476 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8018472:	2302      	movs	r3, #2
 8018474:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8018476:	7dfb      	ldrb	r3, [r7, #23]
}
 8018478:	4618      	mov	r0, r3
 801847a:	3718      	adds	r7, #24
 801847c:	46bd      	mov	sp, r7
 801847e:	bd80      	pop	{r7, pc}
 8018480:	50000100 	.word	0x50000100
 8018484:	50000300 	.word	0x50000300
 8018488:	50000700 	.word	0x50000700

0801848c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b084      	sub	sp, #16
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801849a:	2b01      	cmp	r3, #1
 801849c:	d101      	bne.n	80184a2 <HAL_ADC_Stop+0x16>
 801849e:	2302      	movs	r3, #2
 80184a0:	e023      	b.n	80184ea <HAL_ADC_Stop+0x5e>
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2201      	movs	r2, #1
 80184a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80184aa:	2103      	movs	r1, #3
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f001 f8d1 	bl	8019654 <ADC_ConversionStop>
 80184b2:	4603      	mov	r3, r0
 80184b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80184b6:	7bfb      	ldrb	r3, [r7, #15]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d111      	bne.n	80184e0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	f001 f9e7 	bl	8019890 <ADC_Disable>
 80184c2:	4603      	mov	r3, r0
 80184c4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80184c6:	7bfb      	ldrb	r3, [r7, #15]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d109      	bne.n	80184e0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80184d4:	f023 0301 	bic.w	r3, r3, #1
 80184d8:	f043 0201 	orr.w	r2, r3, #1
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2200      	movs	r2, #0
 80184e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80184e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80184ea:	4618      	mov	r0, r3
 80184ec:	3710      	adds	r7, #16
 80184ee:	46bd      	mov	sp, r7
 80184f0:	bd80      	pop	{r7, pc}
	...

080184f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b088      	sub	sp, #32
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018506:	d004      	beq.n	8018512 <HAL_ADC_PollForConversion+0x1e>
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	4a70      	ldr	r2, [pc, #448]	; (80186d0 <HAL_ADC_PollForConversion+0x1dc>)
 801850e:	4293      	cmp	r3, r2
 8018510:	d101      	bne.n	8018516 <HAL_ADC_PollForConversion+0x22>
 8018512:	4b70      	ldr	r3, [pc, #448]	; (80186d4 <HAL_ADC_PollForConversion+0x1e0>)
 8018514:	e000      	b.n	8018518 <HAL_ADC_PollForConversion+0x24>
 8018516:	4b70      	ldr	r3, [pc, #448]	; (80186d8 <HAL_ADC_PollForConversion+0x1e4>)
 8018518:	4618      	mov	r0, r3
 801851a:	f7ff fc1f 	bl	8017d5c <LL_ADC_GetMultimode>
 801851e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	699b      	ldr	r3, [r3, #24]
 8018524:	2b08      	cmp	r3, #8
 8018526:	d102      	bne.n	801852e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8018528:	2308      	movs	r3, #8
 801852a:	61fb      	str	r3, [r7, #28]
 801852c:	e037      	b.n	801859e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d005      	beq.n	8018540 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018534:	697b      	ldr	r3, [r7, #20]
 8018536:	2b05      	cmp	r3, #5
 8018538:	d002      	beq.n	8018540 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	2b09      	cmp	r3, #9
 801853e:	d111      	bne.n	8018564 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	68db      	ldr	r3, [r3, #12]
 8018546:	f003 0301 	and.w	r3, r3, #1
 801854a:	2b00      	cmp	r3, #0
 801854c:	d007      	beq.n	801855e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018552:	f043 0220 	orr.w	r2, r3, #32
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801855a:	2301      	movs	r3, #1
 801855c:	e0b3      	b.n	80186c6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801855e:	2304      	movs	r3, #4
 8018560:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8018562:	e01c      	b.n	801859e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801856c:	d004      	beq.n	8018578 <HAL_ADC_PollForConversion+0x84>
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	4a57      	ldr	r2, [pc, #348]	; (80186d0 <HAL_ADC_PollForConversion+0x1dc>)
 8018574:	4293      	cmp	r3, r2
 8018576:	d101      	bne.n	801857c <HAL_ADC_PollForConversion+0x88>
 8018578:	4b56      	ldr	r3, [pc, #344]	; (80186d4 <HAL_ADC_PollForConversion+0x1e0>)
 801857a:	e000      	b.n	801857e <HAL_ADC_PollForConversion+0x8a>
 801857c:	4b56      	ldr	r3, [pc, #344]	; (80186d8 <HAL_ADC_PollForConversion+0x1e4>)
 801857e:	4618      	mov	r0, r3
 8018580:	f7ff fbfa 	bl	8017d78 <LL_ADC_GetMultiDMATransfer>
 8018584:	4603      	mov	r3, r0
 8018586:	2b00      	cmp	r3, #0
 8018588:	d007      	beq.n	801859a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801858e:	f043 0220 	orr.w	r2, r3, #32
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8018596:	2301      	movs	r3, #1
 8018598:	e095      	b.n	80186c6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801859a:	2304      	movs	r3, #4
 801859c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801859e:	f7ff fa37 	bl	8017a10 <HAL_GetTick>
 80185a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80185a4:	e021      	b.n	80185ea <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185ac:	d01d      	beq.n	80185ea <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80185ae:	f7ff fa2f 	bl	8017a10 <HAL_GetTick>
 80185b2:	4602      	mov	r2, r0
 80185b4:	693b      	ldr	r3, [r7, #16]
 80185b6:	1ad3      	subs	r3, r2, r3
 80185b8:	683a      	ldr	r2, [r7, #0]
 80185ba:	429a      	cmp	r2, r3
 80185bc:	d302      	bcc.n	80185c4 <HAL_ADC_PollForConversion+0xd0>
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d112      	bne.n	80185ea <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	681a      	ldr	r2, [r3, #0]
 80185ca:	69fb      	ldr	r3, [r7, #28]
 80185cc:	4013      	ands	r3, r2
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d10b      	bne.n	80185ea <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185d6:	f043 0204 	orr.w	r2, r3, #4
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	2200      	movs	r2, #0
 80185e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80185e6:	2303      	movs	r3, #3
 80185e8:	e06d      	b.n	80186c6 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	69fb      	ldr	r3, [r7, #28]
 80185f2:	4013      	ands	r3, r2
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d0d6      	beq.n	80185a6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	4618      	mov	r0, r3
 801860a:	f7ff fb01 	bl	8017c10 <LL_ADC_REG_IsTriggerSourceSWStart>
 801860e:	4603      	mov	r3, r0
 8018610:	2b00      	cmp	r3, #0
 8018612:	d01c      	beq.n	801864e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	7f5b      	ldrb	r3, [r3, #29]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d118      	bne.n	801864e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	f003 0308 	and.w	r3, r3, #8
 8018626:	2b08      	cmp	r3, #8
 8018628:	d111      	bne.n	801864e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801862e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801863a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801863e:	2b00      	cmp	r3, #0
 8018640:	d105      	bne.n	801864e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018646:	f043 0201 	orr.w	r2, r3, #1
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	4a1f      	ldr	r2, [pc, #124]	; (80186d0 <HAL_ADC_PollForConversion+0x1dc>)
 8018654:	4293      	cmp	r3, r2
 8018656:	d002      	beq.n	801865e <HAL_ADC_PollForConversion+0x16a>
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	e001      	b.n	8018662 <HAL_ADC_PollForConversion+0x16e>
 801865e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018662:	687a      	ldr	r2, [r7, #4]
 8018664:	6812      	ldr	r2, [r2, #0]
 8018666:	4293      	cmp	r3, r2
 8018668:	d008      	beq.n	801867c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d005      	beq.n	801867c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	2b05      	cmp	r3, #5
 8018674:	d002      	beq.n	801867c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	2b09      	cmp	r3, #9
 801867a:	d104      	bne.n	8018686 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	68db      	ldr	r3, [r3, #12]
 8018682:	61bb      	str	r3, [r7, #24]
 8018684:	e00d      	b.n	80186a2 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	4a11      	ldr	r2, [pc, #68]	; (80186d0 <HAL_ADC_PollForConversion+0x1dc>)
 801868c:	4293      	cmp	r3, r2
 801868e:	d002      	beq.n	8018696 <HAL_ADC_PollForConversion+0x1a2>
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	e001      	b.n	801869a <HAL_ADC_PollForConversion+0x1a6>
 8018696:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801869a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	2b08      	cmp	r3, #8
 80186a6:	d104      	bne.n	80186b2 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	2208      	movs	r2, #8
 80186ae:	601a      	str	r2, [r3, #0]
 80186b0:	e008      	b.n	80186c4 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80186b2:	69bb      	ldr	r3, [r7, #24]
 80186b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d103      	bne.n	80186c4 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	220c      	movs	r2, #12
 80186c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80186c4:	2300      	movs	r3, #0
}
 80186c6:	4618      	mov	r0, r3
 80186c8:	3720      	adds	r7, #32
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bd80      	pop	{r7, pc}
 80186ce:	bf00      	nop
 80186d0:	50000100 	.word	0x50000100
 80186d4:	50000300 	.word	0x50000300
 80186d8:	50000700 	.word	0x50000700

080186dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b086      	sub	sp, #24
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	60f8      	str	r0, [r7, #12]
 80186e4:	60b9      	str	r1, [r7, #8]
 80186e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80186f0:	d004      	beq.n	80186fc <HAL_ADC_Start_DMA+0x20>
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	4a57      	ldr	r2, [pc, #348]	; (8018854 <HAL_ADC_Start_DMA+0x178>)
 80186f8:	4293      	cmp	r3, r2
 80186fa:	d101      	bne.n	8018700 <HAL_ADC_Start_DMA+0x24>
 80186fc:	4b56      	ldr	r3, [pc, #344]	; (8018858 <HAL_ADC_Start_DMA+0x17c>)
 80186fe:	e000      	b.n	8018702 <HAL_ADC_Start_DMA+0x26>
 8018700:	4b56      	ldr	r3, [pc, #344]	; (801885c <HAL_ADC_Start_DMA+0x180>)
 8018702:	4618      	mov	r0, r3
 8018704:	f7ff fb2a 	bl	8017d5c <LL_ADC_GetMultimode>
 8018708:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	4618      	mov	r0, r3
 8018710:	f7ff fc04 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 8018714:	4603      	mov	r3, r0
 8018716:	2b00      	cmp	r3, #0
 8018718:	f040 8094 	bne.w	8018844 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018722:	2b01      	cmp	r3, #1
 8018724:	d101      	bne.n	801872a <HAL_ADC_Start_DMA+0x4e>
 8018726:	2302      	movs	r3, #2
 8018728:	e08f      	b.n	801884a <HAL_ADC_Start_DMA+0x16e>
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	2201      	movs	r2, #1
 801872e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	4a4a      	ldr	r2, [pc, #296]	; (8018860 <HAL_ADC_Start_DMA+0x184>)
 8018738:	4293      	cmp	r3, r2
 801873a:	d008      	beq.n	801874e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801873c:	693b      	ldr	r3, [r7, #16]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d005      	beq.n	801874e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	2b05      	cmp	r3, #5
 8018746:	d002      	beq.n	801874e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018748:	693b      	ldr	r3, [r7, #16]
 801874a:	2b09      	cmp	r3, #9
 801874c:	d173      	bne.n	8018836 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801874e:	68f8      	ldr	r0, [r7, #12]
 8018750:	f001 f83c 	bl	80197cc <ADC_Enable>
 8018754:	4603      	mov	r3, r0
 8018756:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8018758:	7dfb      	ldrb	r3, [r7, #23]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d166      	bne.n	801882c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018762:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018766:	f023 0301 	bic.w	r3, r3, #1
 801876a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	4a37      	ldr	r2, [pc, #220]	; (8018854 <HAL_ADC_Start_DMA+0x178>)
 8018778:	4293      	cmp	r3, r2
 801877a:	d002      	beq.n	8018782 <HAL_ADC_Start_DMA+0xa6>
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	e001      	b.n	8018786 <HAL_ADC_Start_DMA+0xaa>
 8018782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018786:	68fa      	ldr	r2, [r7, #12]
 8018788:	6812      	ldr	r2, [r2, #0]
 801878a:	4293      	cmp	r3, r2
 801878c:	d002      	beq.n	8018794 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d105      	bne.n	80187a0 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018798:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d006      	beq.n	80187ba <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187b0:	f023 0206 	bic.w	r2, r3, #6
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	661a      	str	r2, [r3, #96]	; 0x60
 80187b8:	e002      	b.n	80187c0 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	2200      	movs	r2, #0
 80187be:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80187c4:	4a27      	ldr	r2, [pc, #156]	; (8018864 <HAL_ADC_Start_DMA+0x188>)
 80187c6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80187cc:	4a26      	ldr	r2, [pc, #152]	; (8018868 <HAL_ADC_Start_DMA+0x18c>)
 80187ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80187d4:	4a25      	ldr	r2, [pc, #148]	; (801886c <HAL_ADC_Start_DMA+0x190>)
 80187d6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	221c      	movs	r2, #28
 80187de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	2200      	movs	r2, #0
 80187e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	685a      	ldr	r2, [r3, #4]
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	f042 0210 	orr.w	r2, r2, #16
 80187f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	68da      	ldr	r2, [r3, #12]
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	f042 0201 	orr.w	r2, r2, #1
 8018806:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	3340      	adds	r3, #64	; 0x40
 8018812:	4619      	mov	r1, r3
 8018814:	68ba      	ldr	r2, [r7, #8]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	f001 fcb4 	bl	801a184 <HAL_DMA_Start_IT>
 801881c:	4603      	mov	r3, r0
 801881e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	4618      	mov	r0, r3
 8018826:	f7ff fb51 	bl	8017ecc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801882a:	e00d      	b.n	8018848 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	2200      	movs	r2, #0
 8018830:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8018834:	e008      	b.n	8018848 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8018836:	2301      	movs	r3, #1
 8018838:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2200      	movs	r2, #0
 801883e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8018842:	e001      	b.n	8018848 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8018844:	2302      	movs	r3, #2
 8018846:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8018848:	7dfb      	ldrb	r3, [r7, #23]
}
 801884a:	4618      	mov	r0, r3
 801884c:	3718      	adds	r7, #24
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}
 8018852:	bf00      	nop
 8018854:	50000100 	.word	0x50000100
 8018858:	50000300 	.word	0x50000300
 801885c:	50000700 	.word	0x50000700
 8018860:	50000400 	.word	0x50000400
 8018864:	0801994f 	.word	0x0801994f
 8018868:	08019a27 	.word	0x08019a27
 801886c:	08019a43 	.word	0x08019a43

08018870 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801887e:	2b01      	cmp	r3, #1
 8018880:	d101      	bne.n	8018886 <HAL_ADC_Stop_DMA+0x16>
 8018882:	2302      	movs	r3, #2
 8018884:	e051      	b.n	801892a <HAL_ADC_Stop_DMA+0xba>
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	2201      	movs	r2, #1
 801888a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801888e:	2103      	movs	r1, #3
 8018890:	6878      	ldr	r0, [r7, #4]
 8018892:	f000 fedf 	bl	8019654 <ADC_ConversionStop>
 8018896:	4603      	mov	r3, r0
 8018898:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801889a:	7bfb      	ldrb	r3, [r7, #15]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d13f      	bne.n	8018920 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	68da      	ldr	r2, [r3, #12]
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	f022 0201 	bic.w	r2, r2, #1
 80188ae:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80188b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80188b8:	b2db      	uxtb	r3, r3
 80188ba:	2b02      	cmp	r3, #2
 80188bc:	d10f      	bne.n	80188de <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80188c2:	4618      	mov	r0, r3
 80188c4:	f001 fcd9 	bl	801a27a <HAL_DMA_Abort>
 80188c8:	4603      	mov	r3, r0
 80188ca:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80188cc:	7bfb      	ldrb	r3, [r7, #15]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d005      	beq.n	80188de <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	685a      	ldr	r2, [r3, #4]
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	f022 0210 	bic.w	r2, r2, #16
 80188ec:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80188ee:	7bfb      	ldrb	r3, [r7, #15]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d105      	bne.n	8018900 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	f000 ffcb 	bl	8019890 <ADC_Disable>
 80188fa:	4603      	mov	r3, r0
 80188fc:	73fb      	strb	r3, [r7, #15]
 80188fe:	e002      	b.n	8018906 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8018900:	6878      	ldr	r0, [r7, #4]
 8018902:	f000 ffc5 	bl	8019890 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8018906:	7bfb      	ldrb	r3, [r7, #15]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d109      	bne.n	8018920 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018910:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018914:	f023 0301 	bic.w	r3, r3, #1
 8018918:	f043 0201 	orr.w	r2, r3, #1
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2200      	movs	r2, #0
 8018924:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018928:	7bfb      	ldrb	r3, [r7, #15]
}
 801892a:	4618      	mov	r0, r3
 801892c:	3710      	adds	r7, #16
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}

08018932 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8018932:	b480      	push	{r7}
 8018934:	b083      	sub	sp, #12
 8018936:	af00      	add	r7, sp, #0
 8018938:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8018940:	4618      	mov	r0, r3
 8018942:	370c      	adds	r7, #12
 8018944:	46bd      	mov	sp, r7
 8018946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894a:	4770      	bx	lr

0801894c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b08a      	sub	sp, #40	; 0x28
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8018954:	2300      	movs	r3, #0
 8018956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018970:	d004      	beq.n	801897c <HAL_ADC_IRQHandler+0x30>
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	4a87      	ldr	r2, [pc, #540]	; (8018b94 <HAL_ADC_IRQHandler+0x248>)
 8018978:	4293      	cmp	r3, r2
 801897a:	d101      	bne.n	8018980 <HAL_ADC_IRQHandler+0x34>
 801897c:	4b86      	ldr	r3, [pc, #536]	; (8018b98 <HAL_ADC_IRQHandler+0x24c>)
 801897e:	e000      	b.n	8018982 <HAL_ADC_IRQHandler+0x36>
 8018980:	4b86      	ldr	r3, [pc, #536]	; (8018b9c <HAL_ADC_IRQHandler+0x250>)
 8018982:	4618      	mov	r0, r3
 8018984:	f7ff f9ea 	bl	8017d5c <LL_ADC_GetMultimode>
 8018988:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801898a:	69fb      	ldr	r3, [r7, #28]
 801898c:	f003 0302 	and.w	r3, r3, #2
 8018990:	2b00      	cmp	r3, #0
 8018992:	d017      	beq.n	80189c4 <HAL_ADC_IRQHandler+0x78>
 8018994:	69bb      	ldr	r3, [r7, #24]
 8018996:	f003 0302 	and.w	r3, r3, #2
 801899a:	2b00      	cmp	r3, #0
 801899c:	d012      	beq.n	80189c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189a2:	f003 0310 	and.w	r3, r3, #16
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d105      	bne.n	80189b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189ae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f001 f93a 	bl	8019c30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	2202      	movs	r2, #2
 80189c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80189c4:	69fb      	ldr	r3, [r7, #28]
 80189c6:	f003 0304 	and.w	r3, r3, #4
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d004      	beq.n	80189d8 <HAL_ADC_IRQHandler+0x8c>
 80189ce:	69bb      	ldr	r3, [r7, #24]
 80189d0:	f003 0304 	and.w	r3, r3, #4
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d10a      	bne.n	80189ee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80189d8:	69fb      	ldr	r3, [r7, #28]
 80189da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80189de:	2b00      	cmp	r3, #0
 80189e0:	f000 8085 	beq.w	8018aee <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80189e4:	69bb      	ldr	r3, [r7, #24]
 80189e6:	f003 0308 	and.w	r3, r3, #8
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d07f      	beq.n	8018aee <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189f2:	f003 0310 	and.w	r3, r3, #16
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d105      	bne.n	8018a06 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7ff f900 	bl	8017c10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8018a10:	4603      	mov	r3, r0
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d064      	beq.n	8018ae0 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	4a5e      	ldr	r2, [pc, #376]	; (8018b94 <HAL_ADC_IRQHandler+0x248>)
 8018a1c:	4293      	cmp	r3, r2
 8018a1e:	d002      	beq.n	8018a26 <HAL_ADC_IRQHandler+0xda>
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	e001      	b.n	8018a2a <HAL_ADC_IRQHandler+0xde>
 8018a26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018a2a:	687a      	ldr	r2, [r7, #4]
 8018a2c:	6812      	ldr	r2, [r2, #0]
 8018a2e:	4293      	cmp	r3, r2
 8018a30:	d008      	beq.n	8018a44 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d005      	beq.n	8018a44 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018a38:	697b      	ldr	r3, [r7, #20]
 8018a3a:	2b05      	cmp	r3, #5
 8018a3c:	d002      	beq.n	8018a44 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018a3e:	697b      	ldr	r3, [r7, #20]
 8018a40:	2b09      	cmp	r3, #9
 8018a42:	d104      	bne.n	8018a4e <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	68db      	ldr	r3, [r3, #12]
 8018a4a:	623b      	str	r3, [r7, #32]
 8018a4c:	e00d      	b.n	8018a6a <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	4a50      	ldr	r2, [pc, #320]	; (8018b94 <HAL_ADC_IRQHandler+0x248>)
 8018a54:	4293      	cmp	r3, r2
 8018a56:	d002      	beq.n	8018a5e <HAL_ADC_IRQHandler+0x112>
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	e001      	b.n	8018a62 <HAL_ADC_IRQHandler+0x116>
 8018a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018a62:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8018a64:	693b      	ldr	r3, [r7, #16]
 8018a66:	68db      	ldr	r3, [r3, #12]
 8018a68:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8018a6a:	6a3b      	ldr	r3, [r7, #32]
 8018a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d135      	bne.n	8018ae0 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	f003 0308 	and.w	r3, r3, #8
 8018a7e:	2b08      	cmp	r3, #8
 8018a80:	d12e      	bne.n	8018ae0 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	4618      	mov	r0, r3
 8018a88:	f7ff fa48 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d11a      	bne.n	8018ac8 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	685a      	ldr	r2, [r3, #4]
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	f022 020c 	bic.w	r2, r2, #12
 8018aa0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d112      	bne.n	8018ae0 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018abe:	f043 0201 	orr.w	r2, r3, #1
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	65da      	str	r2, [r3, #92]	; 0x5c
 8018ac6:	e00b      	b.n	8018ae0 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018acc:	f043 0210 	orr.w	r2, r3, #16
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018ad8:	f043 0201 	orr.w	r2, r3, #1
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	f7ef fdf5 	bl	80086d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	220c      	movs	r2, #12
 8018aec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018aee:	69fb      	ldr	r3, [r7, #28]
 8018af0:	f003 0320 	and.w	r3, r3, #32
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d004      	beq.n	8018b02 <HAL_ADC_IRQHandler+0x1b6>
 8018af8:	69bb      	ldr	r3, [r7, #24]
 8018afa:	f003 0320 	and.w	r3, r3, #32
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d10b      	bne.n	8018b1a <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8018b02:	69fb      	ldr	r3, [r7, #28]
 8018b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	f000 80a1 	beq.w	8018c50 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8018b0e:	69bb      	ldr	r3, [r7, #24]
 8018b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	f000 809b 	beq.w	8018c50 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b1e:	f003 0310 	and.w	r3, r3, #16
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d105      	bne.n	8018b32 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7ff f8a9 	bl	8017c8e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8018b3c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7ff f864 	bl	8017c10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8018b48:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	4a11      	ldr	r2, [pc, #68]	; (8018b94 <HAL_ADC_IRQHandler+0x248>)
 8018b50:	4293      	cmp	r3, r2
 8018b52:	d002      	beq.n	8018b5a <HAL_ADC_IRQHandler+0x20e>
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	e001      	b.n	8018b5e <HAL_ADC_IRQHandler+0x212>
 8018b5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018b5e:	687a      	ldr	r2, [r7, #4]
 8018b60:	6812      	ldr	r2, [r2, #0]
 8018b62:	4293      	cmp	r3, r2
 8018b64:	d008      	beq.n	8018b78 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018b66:	697b      	ldr	r3, [r7, #20]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d005      	beq.n	8018b78 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8018b6c:	697b      	ldr	r3, [r7, #20]
 8018b6e:	2b06      	cmp	r3, #6
 8018b70:	d002      	beq.n	8018b78 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8018b72:	697b      	ldr	r3, [r7, #20]
 8018b74:	2b07      	cmp	r3, #7
 8018b76:	d104      	bne.n	8018b82 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	68db      	ldr	r3, [r3, #12]
 8018b7e:	623b      	str	r3, [r7, #32]
 8018b80:	e014      	b.n	8018bac <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	4a03      	ldr	r2, [pc, #12]	; (8018b94 <HAL_ADC_IRQHandler+0x248>)
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	d009      	beq.n	8018ba0 <HAL_ADC_IRQHandler+0x254>
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	e008      	b.n	8018ba4 <HAL_ADC_IRQHandler+0x258>
 8018b92:	bf00      	nop
 8018b94:	50000100 	.word	0x50000100
 8018b98:	50000300 	.word	0x50000300
 8018b9c:	50000700 	.word	0x50000700
 8018ba0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018ba4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8018ba6:	693b      	ldr	r3, [r7, #16]
 8018ba8:	68db      	ldr	r3, [r3, #12]
 8018baa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d047      	beq.n	8018c42 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8018bb2:	6a3b      	ldr	r3, [r7, #32]
 8018bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d007      	beq.n	8018bcc <HAL_ADC_IRQHandler+0x280>
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d03f      	beq.n	8018c42 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8018bc2:	6a3b      	ldr	r3, [r7, #32]
 8018bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d13a      	bne.n	8018c42 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018bd6:	2b40      	cmp	r3, #64	; 0x40
 8018bd8:	d133      	bne.n	8018c42 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8018bda:	6a3b      	ldr	r3, [r7, #32]
 8018bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d12e      	bne.n	8018c42 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	4618      	mov	r0, r3
 8018bea:	f7ff f9be 	bl	8017f6a <LL_ADC_INJ_IsConversionOngoing>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d11a      	bne.n	8018c2a <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	685a      	ldr	r2, [r3, #4]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018c02:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d112      	bne.n	8018c42 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c20:	f043 0201 	orr.w	r2, r3, #1
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	65da      	str	r2, [r3, #92]	; 0x5c
 8018c28:	e00b      	b.n	8018c42 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c2e:	f043 0210 	orr.w	r2, r3, #16
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c3a:	f043 0201 	orr.w	r2, r3, #1
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	f000 ffcc 	bl	8019be0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	2260      	movs	r2, #96	; 0x60
 8018c4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8018c50:	69fb      	ldr	r3, [r7, #28]
 8018c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d011      	beq.n	8018c7e <HAL_ADC_IRQHandler+0x332>
 8018c5a:	69bb      	ldr	r3, [r7, #24]
 8018c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d00c      	beq.n	8018c7e <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f000 f8af 	bl	8018dd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	2280      	movs	r2, #128	; 0x80
 8018c7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8018c7e:	69fb      	ldr	r3, [r7, #28]
 8018c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d012      	beq.n	8018cae <HAL_ADC_IRQHandler+0x362>
 8018c88:	69bb      	ldr	r3, [r7, #24]
 8018c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d00d      	beq.n	8018cae <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f000 ffb2 	bl	8019c08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018cac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8018cae:	69fb      	ldr	r3, [r7, #28]
 8018cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d012      	beq.n	8018cde <HAL_ADC_IRQHandler+0x392>
 8018cb8:	69bb      	ldr	r3, [r7, #24]
 8018cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d00d      	beq.n	8018cde <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f000 ffa4 	bl	8019c1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018cdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8018cde:	69fb      	ldr	r3, [r7, #28]
 8018ce0:	f003 0310 	and.w	r3, r3, #16
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d043      	beq.n	8018d70 <HAL_ADC_IRQHandler+0x424>
 8018ce8:	69bb      	ldr	r3, [r7, #24]
 8018cea:	f003 0310 	and.w	r3, r3, #16
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d03e      	beq.n	8018d70 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d102      	bne.n	8018d00 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8018cfa:	2301      	movs	r3, #1
 8018cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8018cfe:	e021      	b.n	8018d44 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8018d00:	697b      	ldr	r3, [r7, #20]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d015      	beq.n	8018d32 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018d0e:	d004      	beq.n	8018d1a <HAL_ADC_IRQHandler+0x3ce>
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	4a27      	ldr	r2, [pc, #156]	; (8018db4 <HAL_ADC_IRQHandler+0x468>)
 8018d16:	4293      	cmp	r3, r2
 8018d18:	d101      	bne.n	8018d1e <HAL_ADC_IRQHandler+0x3d2>
 8018d1a:	4b27      	ldr	r3, [pc, #156]	; (8018db8 <HAL_ADC_IRQHandler+0x46c>)
 8018d1c:	e000      	b.n	8018d20 <HAL_ADC_IRQHandler+0x3d4>
 8018d1e:	4b27      	ldr	r3, [pc, #156]	; (8018dbc <HAL_ADC_IRQHandler+0x470>)
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7ff f829 	bl	8017d78 <LL_ADC_GetMultiDMATransfer>
 8018d26:	4603      	mov	r3, r0
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d00b      	beq.n	8018d44 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018d2c:	2301      	movs	r3, #1
 8018d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8018d30:	e008      	b.n	8018d44 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	68db      	ldr	r3, [r3, #12]
 8018d38:	f003 0301 	and.w	r3, r3, #1
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d001      	beq.n	8018d44 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018d40:	2301      	movs	r3, #1
 8018d42:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8018d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d46:	2b01      	cmp	r3, #1
 8018d48:	d10e      	bne.n	8018d68 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d4e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018d5a:	f043 0202 	orr.w	r2, r3, #2
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	f000 f840 	bl	8018de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	2210      	movs	r2, #16
 8018d6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8018d70:	69fb      	ldr	r3, [r7, #28]
 8018d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d018      	beq.n	8018dac <HAL_ADC_IRQHandler+0x460>
 8018d7a:	69bb      	ldr	r3, [r7, #24]
 8018d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d013      	beq.n	8018dac <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d88:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018d94:	f043 0208 	orr.w	r2, r3, #8
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018da4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8018da6:	6878      	ldr	r0, [r7, #4]
 8018da8:	f000 ff24 	bl	8019bf4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8018dac:	bf00      	nop
 8018dae:	3728      	adds	r7, #40	; 0x28
 8018db0:	46bd      	mov	sp, r7
 8018db2:	bd80      	pop	{r7, pc}
 8018db4:	50000100 	.word	0x50000100
 8018db8:	50000300 	.word	0x50000300
 8018dbc:	50000700 	.word	0x50000700

08018dc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8018dc0:	b480      	push	{r7}
 8018dc2:	b083      	sub	sp, #12
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8018dc8:	bf00      	nop
 8018dca:	370c      	adds	r7, #12
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd2:	4770      	bx	lr

08018dd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	b083      	sub	sp, #12
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8018ddc:	bf00      	nop
 8018dde:	370c      	adds	r7, #12
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr

08018de8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8018de8:	b480      	push	{r7}
 8018dea:	b083      	sub	sp, #12
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8018df0:	bf00      	nop
 8018df2:	370c      	adds	r7, #12
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr

08018dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b0b6      	sub	sp, #216	; 0xd8
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
 8018e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018e06:	2300      	movs	r3, #0
 8018e08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d102      	bne.n	8018e20 <HAL_ADC_ConfigChannel+0x24>
 8018e1a:	2302      	movs	r3, #2
 8018e1c:	f000 bc04 	b.w	8019628 <HAL_ADC_ConfigChannel+0x82c>
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2201      	movs	r2, #1
 8018e24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7ff f875 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 8018e32:	4603      	mov	r3, r0
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	f040 83e8 	bne.w	801960a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	6818      	ldr	r0, [r3, #0]
 8018e3e:	683b      	ldr	r3, [r7, #0]
 8018e40:	6859      	ldr	r1, [r3, #4]
 8018e42:	683b      	ldr	r3, [r7, #0]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	461a      	mov	r2, r3
 8018e48:	f7fe fef5 	bl	8017c36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	4618      	mov	r0, r3
 8018e52:	f7ff f863 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 8018e56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f7ff f883 	bl	8017f6a <LL_ADC_INJ_IsConversionOngoing>
 8018e64:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8018e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	f040 81d9 	bne.w	8019224 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8018e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	f040 81d4 	bne.w	8019224 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	689b      	ldr	r3, [r3, #8]
 8018e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018e84:	d10f      	bne.n	8018ea6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6818      	ldr	r0, [r3, #0]
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	4619      	mov	r1, r3
 8018e92:	f7fe ff0f 	bl	8017cb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f7fe fea3 	bl	8017bea <LL_ADC_SetSamplingTimeCommonConfig>
 8018ea4:	e00e      	b.n	8018ec4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6818      	ldr	r0, [r3, #0]
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	6819      	ldr	r1, [r3, #0]
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	689b      	ldr	r3, [r3, #8]
 8018eb2:	461a      	mov	r2, r3
 8018eb4:	f7fe fefe 	bl	8017cb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	2100      	movs	r1, #0
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7fe fe93 	bl	8017bea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8018ec4:	683b      	ldr	r3, [r7, #0]
 8018ec6:	695a      	ldr	r2, [r3, #20]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	68db      	ldr	r3, [r3, #12]
 8018ece:	08db      	lsrs	r3, r3, #3
 8018ed0:	f003 0303 	and.w	r3, r3, #3
 8018ed4:	005b      	lsls	r3, r3, #1
 8018ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8018eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8018ede:	683b      	ldr	r3, [r7, #0]
 8018ee0:	691b      	ldr	r3, [r3, #16]
 8018ee2:	2b04      	cmp	r3, #4
 8018ee4:	d022      	beq.n	8018f2c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	6818      	ldr	r0, [r3, #0]
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	6919      	ldr	r1, [r3, #16]
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	681a      	ldr	r2, [r3, #0]
 8018ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018ef6:	f7fe fded 	bl	8017ad4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6818      	ldr	r0, [r3, #0]
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	6919      	ldr	r1, [r3, #16]
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	699b      	ldr	r3, [r3, #24]
 8018f06:	461a      	mov	r2, r3
 8018f08:	f7fe fe39 	bl	8017b7e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6818      	ldr	r0, [r3, #0]
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	6919      	ldr	r1, [r3, #16]
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	7f1b      	ldrb	r3, [r3, #28]
 8018f18:	2b01      	cmp	r3, #1
 8018f1a:	d102      	bne.n	8018f22 <HAL_ADC_ConfigChannel+0x126>
 8018f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018f20:	e000      	b.n	8018f24 <HAL_ADC_ConfigChannel+0x128>
 8018f22:	2300      	movs	r3, #0
 8018f24:	461a      	mov	r2, r3
 8018f26:	f7fe fe45 	bl	8017bb4 <LL_ADC_SetOffsetSaturation>
 8018f2a:	e17b      	b.n	8019224 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	2100      	movs	r1, #0
 8018f32:	4618      	mov	r0, r3
 8018f34:	f7fe fdf2 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 8018f38:	4603      	mov	r3, r0
 8018f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d10a      	bne.n	8018f58 <HAL_ADC_ConfigChannel+0x15c>
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	2100      	movs	r1, #0
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f7fe fde7 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	0e9b      	lsrs	r3, r3, #26
 8018f52:	f003 021f 	and.w	r2, r3, #31
 8018f56:	e01e      	b.n	8018f96 <HAL_ADC_ConfigChannel+0x19a>
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	2100      	movs	r1, #0
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7fe fddc 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 8018f64:	4603      	mov	r3, r0
 8018f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018f6e:	fa93 f3a3 	rbit	r3, r3
 8018f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8018f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8018f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d101      	bne.n	8018f8a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8018f86:	2320      	movs	r3, #32
 8018f88:	e004      	b.n	8018f94 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8018f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018f8e:	fab3 f383 	clz	r3, r3
 8018f92:	b2db      	uxtb	r3, r3
 8018f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d105      	bne.n	8018fae <HAL_ADC_ConfigChannel+0x1b2>
 8018fa2:	683b      	ldr	r3, [r7, #0]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	0e9b      	lsrs	r3, r3, #26
 8018fa8:	f003 031f 	and.w	r3, r3, #31
 8018fac:	e018      	b.n	8018fe0 <HAL_ADC_ConfigChannel+0x1e4>
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018fba:	fa93 f3a3 	rbit	r3, r3
 8018fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8018fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8018fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d101      	bne.n	8018fd6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8018fd2:	2320      	movs	r3, #32
 8018fd4:	e004      	b.n	8018fe0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8018fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018fda:	fab3 f383 	clz	r3, r3
 8018fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018fe0:	429a      	cmp	r2, r3
 8018fe2:	d106      	bne.n	8018ff2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	2100      	movs	r1, #0
 8018fec:	4618      	mov	r0, r3
 8018fee:	f7fe fdab 	bl	8017b48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	2101      	movs	r1, #1
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7fe fd8f 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 8018ffe:	4603      	mov	r3, r0
 8019000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019004:	2b00      	cmp	r3, #0
 8019006:	d10a      	bne.n	801901e <HAL_ADC_ConfigChannel+0x222>
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	2101      	movs	r1, #1
 801900e:	4618      	mov	r0, r3
 8019010:	f7fe fd84 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 8019014:	4603      	mov	r3, r0
 8019016:	0e9b      	lsrs	r3, r3, #26
 8019018:	f003 021f 	and.w	r2, r3, #31
 801901c:	e01e      	b.n	801905c <HAL_ADC_ConfigChannel+0x260>
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	2101      	movs	r1, #1
 8019024:	4618      	mov	r0, r3
 8019026:	f7fe fd79 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 801902a:	4603      	mov	r3, r0
 801902c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019034:	fa93 f3a3 	rbit	r3, r3
 8019038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801903c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8019044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019048:	2b00      	cmp	r3, #0
 801904a:	d101      	bne.n	8019050 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801904c:	2320      	movs	r3, #32
 801904e:	e004      	b.n	801905a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8019050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019054:	fab3 f383 	clz	r3, r3
 8019058:	b2db      	uxtb	r3, r3
 801905a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019064:	2b00      	cmp	r3, #0
 8019066:	d105      	bne.n	8019074 <HAL_ADC_ConfigChannel+0x278>
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	0e9b      	lsrs	r3, r3, #26
 801906e:	f003 031f 	and.w	r3, r3, #31
 8019072:	e018      	b.n	80190a6 <HAL_ADC_ConfigChannel+0x2aa>
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801907c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019080:	fa93 f3a3 	rbit	r3, r3
 8019084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8019088:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801908c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8019090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019094:	2b00      	cmp	r3, #0
 8019096:	d101      	bne.n	801909c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8019098:	2320      	movs	r3, #32
 801909a:	e004      	b.n	80190a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801909c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190a0:	fab3 f383 	clz	r3, r3
 80190a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80190a6:	429a      	cmp	r2, r3
 80190a8:	d106      	bne.n	80190b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	2200      	movs	r2, #0
 80190b0:	2101      	movs	r1, #1
 80190b2:	4618      	mov	r0, r3
 80190b4:	f7fe fd48 	bl	8017b48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	2102      	movs	r1, #2
 80190be:	4618      	mov	r0, r3
 80190c0:	f7fe fd2c 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 80190c4:	4603      	mov	r3, r0
 80190c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d10a      	bne.n	80190e4 <HAL_ADC_ConfigChannel+0x2e8>
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	2102      	movs	r1, #2
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7fe fd21 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 80190da:	4603      	mov	r3, r0
 80190dc:	0e9b      	lsrs	r3, r3, #26
 80190de:	f003 021f 	and.w	r2, r3, #31
 80190e2:	e01e      	b.n	8019122 <HAL_ADC_ConfigChannel+0x326>
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	2102      	movs	r1, #2
 80190ea:	4618      	mov	r0, r3
 80190ec:	f7fe fd16 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 80190f0:	4603      	mov	r3, r0
 80190f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80190f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80190fa:	fa93 f3a3 	rbit	r3, r3
 80190fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8019102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801910a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801910e:	2b00      	cmp	r3, #0
 8019110:	d101      	bne.n	8019116 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8019112:	2320      	movs	r3, #32
 8019114:	e004      	b.n	8019120 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8019116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801911a:	fab3 f383 	clz	r3, r3
 801911e:	b2db      	uxtb	r3, r3
 8019120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801912a:	2b00      	cmp	r3, #0
 801912c:	d105      	bne.n	801913a <HAL_ADC_ConfigChannel+0x33e>
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	0e9b      	lsrs	r3, r3, #26
 8019134:	f003 031f 	and.w	r3, r3, #31
 8019138:	e016      	b.n	8019168 <HAL_ADC_ConfigChannel+0x36c>
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019146:	fa93 f3a3 	rbit	r3, r3
 801914a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801914c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801914e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8019152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019156:	2b00      	cmp	r3, #0
 8019158:	d101      	bne.n	801915e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801915a:	2320      	movs	r3, #32
 801915c:	e004      	b.n	8019168 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801915e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019162:	fab3 f383 	clz	r3, r3
 8019166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019168:	429a      	cmp	r2, r3
 801916a:	d106      	bne.n	801917a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	2200      	movs	r2, #0
 8019172:	2102      	movs	r1, #2
 8019174:	4618      	mov	r0, r3
 8019176:	f7fe fce7 	bl	8017b48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	2103      	movs	r1, #3
 8019180:	4618      	mov	r0, r3
 8019182:	f7fe fccb 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 8019186:	4603      	mov	r3, r0
 8019188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801918c:	2b00      	cmp	r3, #0
 801918e:	d10a      	bne.n	80191a6 <HAL_ADC_ConfigChannel+0x3aa>
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	2103      	movs	r1, #3
 8019196:	4618      	mov	r0, r3
 8019198:	f7fe fcc0 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 801919c:	4603      	mov	r3, r0
 801919e:	0e9b      	lsrs	r3, r3, #26
 80191a0:	f003 021f 	and.w	r2, r3, #31
 80191a4:	e017      	b.n	80191d6 <HAL_ADC_ConfigChannel+0x3da>
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	2103      	movs	r1, #3
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7fe fcb5 	bl	8017b1c <LL_ADC_GetOffsetChannel>
 80191b2:	4603      	mov	r3, r0
 80191b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80191b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80191b8:	fa93 f3a3 	rbit	r3, r3
 80191bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80191be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80191c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80191c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d101      	bne.n	80191cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80191c8:	2320      	movs	r3, #32
 80191ca:	e003      	b.n	80191d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80191cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80191ce:	fab3 f383 	clz	r3, r3
 80191d2:	b2db      	uxtb	r3, r3
 80191d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d105      	bne.n	80191ee <HAL_ADC_ConfigChannel+0x3f2>
 80191e2:	683b      	ldr	r3, [r7, #0]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	0e9b      	lsrs	r3, r3, #26
 80191e8:	f003 031f 	and.w	r3, r3, #31
 80191ec:	e011      	b.n	8019212 <HAL_ADC_ConfigChannel+0x416>
 80191ee:	683b      	ldr	r3, [r7, #0]
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80191f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80191f6:	fa93 f3a3 	rbit	r3, r3
 80191fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80191fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8019200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019202:	2b00      	cmp	r3, #0
 8019204:	d101      	bne.n	801920a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8019206:	2320      	movs	r3, #32
 8019208:	e003      	b.n	8019212 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801920a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801920c:	fab3 f383 	clz	r3, r3
 8019210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8019212:	429a      	cmp	r2, r3
 8019214:	d106      	bne.n	8019224 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2200      	movs	r2, #0
 801921c:	2103      	movs	r1, #3
 801921e:	4618      	mov	r0, r3
 8019220:	f7fe fc92 	bl	8017b48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	4618      	mov	r0, r3
 801922a:	f7fe fe29 	bl	8017e80 <LL_ADC_IsEnabled>
 801922e:	4603      	mov	r3, r0
 8019230:	2b00      	cmp	r3, #0
 8019232:	f040 813d 	bne.w	80194b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6818      	ldr	r0, [r3, #0]
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	6819      	ldr	r1, [r3, #0]
 801923e:	683b      	ldr	r3, [r7, #0]
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	461a      	mov	r2, r3
 8019244:	f7fe fd62 	bl	8017d0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	68db      	ldr	r3, [r3, #12]
 801924c:	4aa2      	ldr	r2, [pc, #648]	; (80194d8 <HAL_ADC_ConfigChannel+0x6dc>)
 801924e:	4293      	cmp	r3, r2
 8019250:	f040 812e 	bne.w	80194b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019260:	2b00      	cmp	r3, #0
 8019262:	d10b      	bne.n	801927c <HAL_ADC_ConfigChannel+0x480>
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	0e9b      	lsrs	r3, r3, #26
 801926a:	3301      	adds	r3, #1
 801926c:	f003 031f 	and.w	r3, r3, #31
 8019270:	2b09      	cmp	r3, #9
 8019272:	bf94      	ite	ls
 8019274:	2301      	movls	r3, #1
 8019276:	2300      	movhi	r3, #0
 8019278:	b2db      	uxtb	r3, r3
 801927a:	e019      	b.n	80192b0 <HAL_ADC_ConfigChannel+0x4b4>
 801927c:	683b      	ldr	r3, [r7, #0]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019284:	fa93 f3a3 	rbit	r3, r3
 8019288:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801928a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801928c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801928e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019290:	2b00      	cmp	r3, #0
 8019292:	d101      	bne.n	8019298 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8019294:	2320      	movs	r3, #32
 8019296:	e003      	b.n	80192a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8019298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801929a:	fab3 f383 	clz	r3, r3
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	3301      	adds	r3, #1
 80192a2:	f003 031f 	and.w	r3, r3, #31
 80192a6:	2b09      	cmp	r3, #9
 80192a8:	bf94      	ite	ls
 80192aa:	2301      	movls	r3, #1
 80192ac:	2300      	movhi	r3, #0
 80192ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d079      	beq.n	80193a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80192b4:	683b      	ldr	r3, [r7, #0]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d107      	bne.n	80192d0 <HAL_ADC_ConfigChannel+0x4d4>
 80192c0:	683b      	ldr	r3, [r7, #0]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	0e9b      	lsrs	r3, r3, #26
 80192c6:	3301      	adds	r3, #1
 80192c8:	069b      	lsls	r3, r3, #26
 80192ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80192ce:	e015      	b.n	80192fc <HAL_ADC_ConfigChannel+0x500>
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80192d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192d8:	fa93 f3a3 	rbit	r3, r3
 80192dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80192de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80192e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80192e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d101      	bne.n	80192ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80192e8:	2320      	movs	r3, #32
 80192ea:	e003      	b.n	80192f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80192ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192ee:	fab3 f383 	clz	r3, r3
 80192f2:	b2db      	uxtb	r3, r3
 80192f4:	3301      	adds	r3, #1
 80192f6:	069b      	lsls	r3, r3, #26
 80192f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019304:	2b00      	cmp	r3, #0
 8019306:	d109      	bne.n	801931c <HAL_ADC_ConfigChannel+0x520>
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	0e9b      	lsrs	r3, r3, #26
 801930e:	3301      	adds	r3, #1
 8019310:	f003 031f 	and.w	r3, r3, #31
 8019314:	2101      	movs	r1, #1
 8019316:	fa01 f303 	lsl.w	r3, r1, r3
 801931a:	e017      	b.n	801934c <HAL_ADC_ConfigChannel+0x550>
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019324:	fa93 f3a3 	rbit	r3, r3
 8019328:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801932c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801932e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019330:	2b00      	cmp	r3, #0
 8019332:	d101      	bne.n	8019338 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8019334:	2320      	movs	r3, #32
 8019336:	e003      	b.n	8019340 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8019338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801933a:	fab3 f383 	clz	r3, r3
 801933e:	b2db      	uxtb	r3, r3
 8019340:	3301      	adds	r3, #1
 8019342:	f003 031f 	and.w	r3, r3, #31
 8019346:	2101      	movs	r1, #1
 8019348:	fa01 f303 	lsl.w	r3, r1, r3
 801934c:	ea42 0103 	orr.w	r1, r2, r3
 8019350:	683b      	ldr	r3, [r7, #0]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019358:	2b00      	cmp	r3, #0
 801935a:	d10a      	bne.n	8019372 <HAL_ADC_ConfigChannel+0x576>
 801935c:	683b      	ldr	r3, [r7, #0]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	0e9b      	lsrs	r3, r3, #26
 8019362:	3301      	adds	r3, #1
 8019364:	f003 021f 	and.w	r2, r3, #31
 8019368:	4613      	mov	r3, r2
 801936a:	005b      	lsls	r3, r3, #1
 801936c:	4413      	add	r3, r2
 801936e:	051b      	lsls	r3, r3, #20
 8019370:	e018      	b.n	80193a4 <HAL_ADC_ConfigChannel+0x5a8>
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801937a:	fa93 f3a3 	rbit	r3, r3
 801937e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8019380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8019384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019386:	2b00      	cmp	r3, #0
 8019388:	d101      	bne.n	801938e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801938a:	2320      	movs	r3, #32
 801938c:	e003      	b.n	8019396 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801938e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019390:	fab3 f383 	clz	r3, r3
 8019394:	b2db      	uxtb	r3, r3
 8019396:	3301      	adds	r3, #1
 8019398:	f003 021f 	and.w	r2, r3, #31
 801939c:	4613      	mov	r3, r2
 801939e:	005b      	lsls	r3, r3, #1
 80193a0:	4413      	add	r3, r2
 80193a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80193a4:	430b      	orrs	r3, r1
 80193a6:	e07e      	b.n	80194a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80193a8:	683b      	ldr	r3, [r7, #0]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d107      	bne.n	80193c4 <HAL_ADC_ConfigChannel+0x5c8>
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	0e9b      	lsrs	r3, r3, #26
 80193ba:	3301      	adds	r3, #1
 80193bc:	069b      	lsls	r3, r3, #26
 80193be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80193c2:	e015      	b.n	80193f0 <HAL_ADC_ConfigChannel+0x5f4>
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80193ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193cc:	fa93 f3a3 	rbit	r3, r3
 80193d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80193d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80193d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d101      	bne.n	80193e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80193dc:	2320      	movs	r3, #32
 80193de:	e003      	b.n	80193e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80193e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193e2:	fab3 f383 	clz	r3, r3
 80193e6:	b2db      	uxtb	r3, r3
 80193e8:	3301      	adds	r3, #1
 80193ea:	069b      	lsls	r3, r3, #26
 80193ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d109      	bne.n	8019410 <HAL_ADC_ConfigChannel+0x614>
 80193fc:	683b      	ldr	r3, [r7, #0]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	0e9b      	lsrs	r3, r3, #26
 8019402:	3301      	adds	r3, #1
 8019404:	f003 031f 	and.w	r3, r3, #31
 8019408:	2101      	movs	r1, #1
 801940a:	fa01 f303 	lsl.w	r3, r1, r3
 801940e:	e017      	b.n	8019440 <HAL_ADC_ConfigChannel+0x644>
 8019410:	683b      	ldr	r3, [r7, #0]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019416:	6a3b      	ldr	r3, [r7, #32]
 8019418:	fa93 f3a3 	rbit	r3, r3
 801941c:	61fb      	str	r3, [r7, #28]
  return result;
 801941e:	69fb      	ldr	r3, [r7, #28]
 8019420:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8019422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019424:	2b00      	cmp	r3, #0
 8019426:	d101      	bne.n	801942c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8019428:	2320      	movs	r3, #32
 801942a:	e003      	b.n	8019434 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801942e:	fab3 f383 	clz	r3, r3
 8019432:	b2db      	uxtb	r3, r3
 8019434:	3301      	adds	r3, #1
 8019436:	f003 031f 	and.w	r3, r3, #31
 801943a:	2101      	movs	r1, #1
 801943c:	fa01 f303 	lsl.w	r3, r1, r3
 8019440:	ea42 0103 	orr.w	r1, r2, r3
 8019444:	683b      	ldr	r3, [r7, #0]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801944c:	2b00      	cmp	r3, #0
 801944e:	d10d      	bne.n	801946c <HAL_ADC_ConfigChannel+0x670>
 8019450:	683b      	ldr	r3, [r7, #0]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	0e9b      	lsrs	r3, r3, #26
 8019456:	3301      	adds	r3, #1
 8019458:	f003 021f 	and.w	r2, r3, #31
 801945c:	4613      	mov	r3, r2
 801945e:	005b      	lsls	r3, r3, #1
 8019460:	4413      	add	r3, r2
 8019462:	3b1e      	subs	r3, #30
 8019464:	051b      	lsls	r3, r3, #20
 8019466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801946a:	e01b      	b.n	80194a4 <HAL_ADC_ConfigChannel+0x6a8>
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	fa93 f3a3 	rbit	r3, r3
 8019478:	613b      	str	r3, [r7, #16]
  return result;
 801947a:	693b      	ldr	r3, [r7, #16]
 801947c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d101      	bne.n	8019488 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8019484:	2320      	movs	r3, #32
 8019486:	e003      	b.n	8019490 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8019488:	69bb      	ldr	r3, [r7, #24]
 801948a:	fab3 f383 	clz	r3, r3
 801948e:	b2db      	uxtb	r3, r3
 8019490:	3301      	adds	r3, #1
 8019492:	f003 021f 	and.w	r2, r3, #31
 8019496:	4613      	mov	r3, r2
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	4413      	add	r3, r2
 801949c:	3b1e      	subs	r3, #30
 801949e:	051b      	lsls	r3, r3, #20
 80194a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80194a4:	430b      	orrs	r3, r1
 80194a6:	683a      	ldr	r2, [r7, #0]
 80194a8:	6892      	ldr	r2, [r2, #8]
 80194aa:	4619      	mov	r1, r3
 80194ac:	f7fe fc02 	bl	8017cb4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80194b0:	683b      	ldr	r3, [r7, #0]
 80194b2:	681a      	ldr	r2, [r3, #0]
 80194b4:	4b09      	ldr	r3, [pc, #36]	; (80194dc <HAL_ADC_ConfigChannel+0x6e0>)
 80194b6:	4013      	ands	r3, r2
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	f000 80af 	beq.w	801961c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80194c6:	d004      	beq.n	80194d2 <HAL_ADC_ConfigChannel+0x6d6>
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4a04      	ldr	r2, [pc, #16]	; (80194e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80194ce:	4293      	cmp	r3, r2
 80194d0:	d10a      	bne.n	80194e8 <HAL_ADC_ConfigChannel+0x6ec>
 80194d2:	4b04      	ldr	r3, [pc, #16]	; (80194e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80194d4:	e009      	b.n	80194ea <HAL_ADC_ConfigChannel+0x6ee>
 80194d6:	bf00      	nop
 80194d8:	407f0000 	.word	0x407f0000
 80194dc:	80080000 	.word	0x80080000
 80194e0:	50000100 	.word	0x50000100
 80194e4:	50000300 	.word	0x50000300
 80194e8:	4b51      	ldr	r3, [pc, #324]	; (8019630 <HAL_ADC_ConfigChannel+0x834>)
 80194ea:	4618      	mov	r0, r3
 80194ec:	f7fe fae4 	bl	8017ab8 <LL_ADC_GetCommonPathInternalCh>
 80194f0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	4a4e      	ldr	r2, [pc, #312]	; (8019634 <HAL_ADC_ConfigChannel+0x838>)
 80194fa:	4293      	cmp	r3, r2
 80194fc:	d004      	beq.n	8019508 <HAL_ADC_ConfigChannel+0x70c>
 80194fe:	683b      	ldr	r3, [r7, #0]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	4a4d      	ldr	r2, [pc, #308]	; (8019638 <HAL_ADC_ConfigChannel+0x83c>)
 8019504:	4293      	cmp	r3, r2
 8019506:	d134      	bne.n	8019572 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8019508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801950c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019510:	2b00      	cmp	r3, #0
 8019512:	d12e      	bne.n	8019572 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801951c:	d17e      	bne.n	801961c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019526:	d004      	beq.n	8019532 <HAL_ADC_ConfigChannel+0x736>
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	4a43      	ldr	r2, [pc, #268]	; (801963c <HAL_ADC_ConfigChannel+0x840>)
 801952e:	4293      	cmp	r3, r2
 8019530:	d101      	bne.n	8019536 <HAL_ADC_ConfigChannel+0x73a>
 8019532:	4a43      	ldr	r2, [pc, #268]	; (8019640 <HAL_ADC_ConfigChannel+0x844>)
 8019534:	e000      	b.n	8019538 <HAL_ADC_ConfigChannel+0x73c>
 8019536:	4a3e      	ldr	r2, [pc, #248]	; (8019630 <HAL_ADC_ConfigChannel+0x834>)
 8019538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801953c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019540:	4619      	mov	r1, r3
 8019542:	4610      	mov	r0, r2
 8019544:	f7fe faa5 	bl	8017a92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019548:	4b3e      	ldr	r3, [pc, #248]	; (8019644 <HAL_ADC_ConfigChannel+0x848>)
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	099b      	lsrs	r3, r3, #6
 801954e:	4a3e      	ldr	r2, [pc, #248]	; (8019648 <HAL_ADC_ConfigChannel+0x84c>)
 8019550:	fba2 2303 	umull	r2, r3, r2, r3
 8019554:	099b      	lsrs	r3, r3, #6
 8019556:	1c5a      	adds	r2, r3, #1
 8019558:	4613      	mov	r3, r2
 801955a:	005b      	lsls	r3, r3, #1
 801955c:	4413      	add	r3, r2
 801955e:	009b      	lsls	r3, r3, #2
 8019560:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8019562:	e002      	b.n	801956a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	3b01      	subs	r3, #1
 8019568:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d1f9      	bne.n	8019564 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019570:	e054      	b.n	801961c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	4a35      	ldr	r2, [pc, #212]	; (801964c <HAL_ADC_ConfigChannel+0x850>)
 8019578:	4293      	cmp	r3, r2
 801957a:	d120      	bne.n	80195be <HAL_ADC_ConfigChannel+0x7c2>
 801957c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019584:	2b00      	cmp	r3, #0
 8019586:	d11a      	bne.n	80195be <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019590:	d144      	bne.n	801961c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801959a:	d004      	beq.n	80195a6 <HAL_ADC_ConfigChannel+0x7aa>
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	4a26      	ldr	r2, [pc, #152]	; (801963c <HAL_ADC_ConfigChannel+0x840>)
 80195a2:	4293      	cmp	r3, r2
 80195a4:	d101      	bne.n	80195aa <HAL_ADC_ConfigChannel+0x7ae>
 80195a6:	4a26      	ldr	r2, [pc, #152]	; (8019640 <HAL_ADC_ConfigChannel+0x844>)
 80195a8:	e000      	b.n	80195ac <HAL_ADC_ConfigChannel+0x7b0>
 80195aa:	4a21      	ldr	r2, [pc, #132]	; (8019630 <HAL_ADC_ConfigChannel+0x834>)
 80195ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80195b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80195b4:	4619      	mov	r1, r3
 80195b6:	4610      	mov	r0, r2
 80195b8:	f7fe fa6b 	bl	8017a92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80195bc:	e02e      	b.n	801961c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	4a23      	ldr	r2, [pc, #140]	; (8019650 <HAL_ADC_ConfigChannel+0x854>)
 80195c4:	4293      	cmp	r3, r2
 80195c6:	d129      	bne.n	801961c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80195c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80195cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d123      	bne.n	801961c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	4a18      	ldr	r2, [pc, #96]	; (801963c <HAL_ADC_ConfigChannel+0x840>)
 80195da:	4293      	cmp	r3, r2
 80195dc:	d01e      	beq.n	801961c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195e6:	d004      	beq.n	80195f2 <HAL_ADC_ConfigChannel+0x7f6>
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	4a13      	ldr	r2, [pc, #76]	; (801963c <HAL_ADC_ConfigChannel+0x840>)
 80195ee:	4293      	cmp	r3, r2
 80195f0:	d101      	bne.n	80195f6 <HAL_ADC_ConfigChannel+0x7fa>
 80195f2:	4a13      	ldr	r2, [pc, #76]	; (8019640 <HAL_ADC_ConfigChannel+0x844>)
 80195f4:	e000      	b.n	80195f8 <HAL_ADC_ConfigChannel+0x7fc>
 80195f6:	4a0e      	ldr	r2, [pc, #56]	; (8019630 <HAL_ADC_ConfigChannel+0x834>)
 80195f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80195fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8019600:	4619      	mov	r1, r3
 8019602:	4610      	mov	r0, r2
 8019604:	f7fe fa45 	bl	8017a92 <LL_ADC_SetCommonPathInternalCh>
 8019608:	e008      	b.n	801961c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801960e:	f043 0220 	orr.w	r2, r3, #32
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019616:	2301      	movs	r3, #1
 8019618:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	2200      	movs	r2, #0
 8019620:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019624:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8019628:	4618      	mov	r0, r3
 801962a:	37d8      	adds	r7, #216	; 0xd8
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}
 8019630:	50000700 	.word	0x50000700
 8019634:	c3210000 	.word	0xc3210000
 8019638:	90c00010 	.word	0x90c00010
 801963c:	50000100 	.word	0x50000100
 8019640:	50000300 	.word	0x50000300
 8019644:	20000000 	.word	0x20000000
 8019648:	053e2d63 	.word	0x053e2d63
 801964c:	c7520000 	.word	0xc7520000
 8019650:	cb840000 	.word	0xcb840000

08019654 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8019654:	b580      	push	{r7, lr}
 8019656:	b088      	sub	sp, #32
 8019658:	af00      	add	r7, sp, #0
 801965a:	6078      	str	r0, [r7, #4]
 801965c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801965e:	2300      	movs	r3, #0
 8019660:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	4618      	mov	r0, r3
 801966c:	f7fe fc56 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 8019670:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	4618      	mov	r0, r3
 8019678:	f7fe fc77 	bl	8017f6a <LL_ADC_INJ_IsConversionOngoing>
 801967c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d103      	bne.n	801968c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2b00      	cmp	r3, #0
 8019688:	f000 8098 	beq.w	80197bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	68db      	ldr	r3, [r3, #12]
 8019692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019696:	2b00      	cmp	r3, #0
 8019698:	d02a      	beq.n	80196f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	7f5b      	ldrb	r3, [r3, #29]
 801969e:	2b01      	cmp	r3, #1
 80196a0:	d126      	bne.n	80196f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	7f1b      	ldrb	r3, [r3, #28]
 80196a6:	2b01      	cmp	r3, #1
 80196a8:	d122      	bne.n	80196f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80196aa:	2301      	movs	r3, #1
 80196ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80196ae:	e014      	b.n	80196da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80196b0:	69fb      	ldr	r3, [r7, #28]
 80196b2:	4a45      	ldr	r2, [pc, #276]	; (80197c8 <ADC_ConversionStop+0x174>)
 80196b4:	4293      	cmp	r3, r2
 80196b6:	d90d      	bls.n	80196d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196bc:	f043 0210 	orr.w	r2, r3, #16
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196c8:	f043 0201 	orr.w	r2, r3, #1
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80196d0:	2301      	movs	r3, #1
 80196d2:	e074      	b.n	80197be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80196d4:	69fb      	ldr	r3, [r7, #28]
 80196d6:	3301      	adds	r3, #1
 80196d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80196e4:	2b40      	cmp	r3, #64	; 0x40
 80196e6:	d1e3      	bne.n	80196b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	2240      	movs	r2, #64	; 0x40
 80196ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80196f0:	69bb      	ldr	r3, [r7, #24]
 80196f2:	2b02      	cmp	r3, #2
 80196f4:	d014      	beq.n	8019720 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	4618      	mov	r0, r3
 80196fc:	f7fe fc0e 	bl	8017f1c <LL_ADC_REG_IsConversionOngoing>
 8019700:	4603      	mov	r3, r0
 8019702:	2b00      	cmp	r3, #0
 8019704:	d00c      	beq.n	8019720 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4618      	mov	r0, r3
 801970c:	f7fe fbcb 	bl	8017ea6 <LL_ADC_IsDisableOngoing>
 8019710:	4603      	mov	r3, r0
 8019712:	2b00      	cmp	r3, #0
 8019714:	d104      	bne.n	8019720 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	4618      	mov	r0, r3
 801971c:	f7fe fbea 	bl	8017ef4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8019720:	69bb      	ldr	r3, [r7, #24]
 8019722:	2b01      	cmp	r3, #1
 8019724:	d014      	beq.n	8019750 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	4618      	mov	r0, r3
 801972c:	f7fe fc1d 	bl	8017f6a <LL_ADC_INJ_IsConversionOngoing>
 8019730:	4603      	mov	r3, r0
 8019732:	2b00      	cmp	r3, #0
 8019734:	d00c      	beq.n	8019750 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	4618      	mov	r0, r3
 801973c:	f7fe fbb3 	bl	8017ea6 <LL_ADC_IsDisableOngoing>
 8019740:	4603      	mov	r3, r0
 8019742:	2b00      	cmp	r3, #0
 8019744:	d104      	bne.n	8019750 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	4618      	mov	r0, r3
 801974c:	f7fe fbf9 	bl	8017f42 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8019750:	69bb      	ldr	r3, [r7, #24]
 8019752:	2b02      	cmp	r3, #2
 8019754:	d005      	beq.n	8019762 <ADC_ConversionStop+0x10e>
 8019756:	69bb      	ldr	r3, [r7, #24]
 8019758:	2b03      	cmp	r3, #3
 801975a:	d105      	bne.n	8019768 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801975c:	230c      	movs	r3, #12
 801975e:	617b      	str	r3, [r7, #20]
        break;
 8019760:	e005      	b.n	801976e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8019762:	2308      	movs	r3, #8
 8019764:	617b      	str	r3, [r7, #20]
        break;
 8019766:	e002      	b.n	801976e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8019768:	2304      	movs	r3, #4
 801976a:	617b      	str	r3, [r7, #20]
        break;
 801976c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801976e:	f7fe f94f 	bl	8017a10 <HAL_GetTick>
 8019772:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8019774:	e01b      	b.n	80197ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8019776:	f7fe f94b 	bl	8017a10 <HAL_GetTick>
 801977a:	4602      	mov	r2, r0
 801977c:	68bb      	ldr	r3, [r7, #8]
 801977e:	1ad3      	subs	r3, r2, r3
 8019780:	2b05      	cmp	r3, #5
 8019782:	d914      	bls.n	80197ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	689a      	ldr	r2, [r3, #8]
 801978a:	697b      	ldr	r3, [r7, #20]
 801978c:	4013      	ands	r3, r2
 801978e:	2b00      	cmp	r3, #0
 8019790:	d00d      	beq.n	80197ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019796:	f043 0210 	orr.w	r2, r3, #16
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80197a2:	f043 0201 	orr.w	r2, r3, #1
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80197aa:	2301      	movs	r3, #1
 80197ac:	e007      	b.n	80197be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	689a      	ldr	r2, [r3, #8]
 80197b4:	697b      	ldr	r3, [r7, #20]
 80197b6:	4013      	ands	r3, r2
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d1dc      	bne.n	8019776 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80197bc:	2300      	movs	r3, #0
}
 80197be:	4618      	mov	r0, r3
 80197c0:	3720      	adds	r7, #32
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	a33fffff 	.word	0xa33fffff

080197cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b084      	sub	sp, #16
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	4618      	mov	r0, r3
 80197da:	f7fe fb51 	bl	8017e80 <LL_ADC_IsEnabled>
 80197de:	4603      	mov	r3, r0
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d14d      	bne.n	8019880 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	689a      	ldr	r2, [r3, #8]
 80197ea:	4b28      	ldr	r3, [pc, #160]	; (801988c <ADC_Enable+0xc0>)
 80197ec:	4013      	ands	r3, r2
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d00d      	beq.n	801980e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197f6:	f043 0210 	orr.w	r2, r3, #16
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019802:	f043 0201 	orr.w	r2, r3, #1
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801980a:	2301      	movs	r3, #1
 801980c:	e039      	b.n	8019882 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	4618      	mov	r0, r3
 8019814:	f7fe fb0c 	bl	8017e30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8019818:	f7fe f8fa 	bl	8017a10 <HAL_GetTick>
 801981c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801981e:	e028      	b.n	8019872 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	4618      	mov	r0, r3
 8019826:	f7fe fb2b 	bl	8017e80 <LL_ADC_IsEnabled>
 801982a:	4603      	mov	r3, r0
 801982c:	2b00      	cmp	r3, #0
 801982e:	d104      	bne.n	801983a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	4618      	mov	r0, r3
 8019836:	f7fe fafb 	bl	8017e30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801983a:	f7fe f8e9 	bl	8017a10 <HAL_GetTick>
 801983e:	4602      	mov	r2, r0
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	1ad3      	subs	r3, r2, r3
 8019844:	2b02      	cmp	r3, #2
 8019846:	d914      	bls.n	8019872 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	f003 0301 	and.w	r3, r3, #1
 8019852:	2b01      	cmp	r3, #1
 8019854:	d00d      	beq.n	8019872 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801985a:	f043 0210 	orr.w	r2, r3, #16
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019866:	f043 0201 	orr.w	r2, r3, #1
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801986e:	2301      	movs	r3, #1
 8019870:	e007      	b.n	8019882 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	f003 0301 	and.w	r3, r3, #1
 801987c:	2b01      	cmp	r3, #1
 801987e:	d1cf      	bne.n	8019820 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8019880:	2300      	movs	r3, #0
}
 8019882:	4618      	mov	r0, r3
 8019884:	3710      	adds	r7, #16
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	8000003f 	.word	0x8000003f

08019890 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b084      	sub	sp, #16
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	4618      	mov	r0, r3
 801989e:	f7fe fb02 	bl	8017ea6 <LL_ADC_IsDisableOngoing>
 80198a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7fe fae9 	bl	8017e80 <LL_ADC_IsEnabled>
 80198ae:	4603      	mov	r3, r0
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d047      	beq.n	8019944 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d144      	bne.n	8019944 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	689b      	ldr	r3, [r3, #8]
 80198c0:	f003 030d 	and.w	r3, r3, #13
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d10c      	bne.n	80198e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7fe fac3 	bl	8017e58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	2203      	movs	r2, #3
 80198d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80198da:	f7fe f899 	bl	8017a10 <HAL_GetTick>
 80198de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80198e0:	e029      	b.n	8019936 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198e6:	f043 0210 	orr.w	r2, r3, #16
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80198f2:	f043 0201 	orr.w	r2, r3, #1
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80198fa:	2301      	movs	r3, #1
 80198fc:	e023      	b.n	8019946 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80198fe:	f7fe f887 	bl	8017a10 <HAL_GetTick>
 8019902:	4602      	mov	r2, r0
 8019904:	68bb      	ldr	r3, [r7, #8]
 8019906:	1ad3      	subs	r3, r2, r3
 8019908:	2b02      	cmp	r3, #2
 801990a:	d914      	bls.n	8019936 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	689b      	ldr	r3, [r3, #8]
 8019912:	f003 0301 	and.w	r3, r3, #1
 8019916:	2b00      	cmp	r3, #0
 8019918:	d00d      	beq.n	8019936 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801991e:	f043 0210 	orr.w	r2, r3, #16
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801992a:	f043 0201 	orr.w	r2, r3, #1
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8019932:	2301      	movs	r3, #1
 8019934:	e007      	b.n	8019946 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	689b      	ldr	r3, [r3, #8]
 801993c:	f003 0301 	and.w	r3, r3, #1
 8019940:	2b00      	cmp	r3, #0
 8019942:	d1dc      	bne.n	80198fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8019944:	2300      	movs	r3, #0
}
 8019946:	4618      	mov	r0, r3
 8019948:	3710      	adds	r7, #16
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}

0801994e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801994e:	b580      	push	{r7, lr}
 8019950:	b084      	sub	sp, #16
 8019952:	af00      	add	r7, sp, #0
 8019954:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801995a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019960:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019964:	2b00      	cmp	r3, #0
 8019966:	d14b      	bne.n	8019a00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801996c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	f003 0308 	and.w	r3, r3, #8
 801997e:	2b00      	cmp	r3, #0
 8019980:	d021      	beq.n	80199c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	4618      	mov	r0, r3
 8019988:	f7fe f942 	bl	8017c10 <LL_ADC_REG_IsTriggerSourceSWStart>
 801998c:	4603      	mov	r3, r0
 801998e:	2b00      	cmp	r3, #0
 8019990:	d032      	beq.n	80199f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	68db      	ldr	r3, [r3, #12]
 8019998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801999c:	2b00      	cmp	r3, #0
 801999e:	d12b      	bne.n	80199f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d11f      	bne.n	80199f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199bc:	f043 0201 	orr.w	r2, r3, #1
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80199c4:	e018      	b.n	80199f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	68db      	ldr	r3, [r3, #12]
 80199cc:	f003 0302 	and.w	r3, r3, #2
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d111      	bne.n	80199f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d105      	bne.n	80199f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199f0:	f043 0201 	orr.w	r2, r3, #1
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80199f8:	68f8      	ldr	r0, [r7, #12]
 80199fa:	f7ee fe69 	bl	80086d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80199fe:	e00e      	b.n	8019a1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a04:	f003 0310 	and.w	r3, r3, #16
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d003      	beq.n	8019a14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8019a0c:	68f8      	ldr	r0, [r7, #12]
 8019a0e:	f7ff f9eb 	bl	8018de8 <HAL_ADC_ErrorCallback>
}
 8019a12:	e004      	b.n	8019a1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a1a:	6878      	ldr	r0, [r7, #4]
 8019a1c:	4798      	blx	r3
}
 8019a1e:	bf00      	nop
 8019a20:	3710      	adds	r7, #16
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bd80      	pop	{r7, pc}

08019a26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8019a26:	b580      	push	{r7, lr}
 8019a28:	b084      	sub	sp, #16
 8019a2a:	af00      	add	r7, sp, #0
 8019a2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8019a34:	68f8      	ldr	r0, [r7, #12]
 8019a36:	f7ff f9c3 	bl	8018dc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8019a3a:	bf00      	nop
 8019a3c:	3710      	adds	r7, #16
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}

08019a42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8019a42:	b580      	push	{r7, lr}
 8019a44:	b084      	sub	sp, #16
 8019a46:	af00      	add	r7, sp, #0
 8019a48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019a60:	f043 0204 	orr.w	r2, r3, #4
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8019a68:	68f8      	ldr	r0, [r7, #12]
 8019a6a:	f7ff f9bd 	bl	8018de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8019a6e:	bf00      	nop
 8019a70:	3710      	adds	r7, #16
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}

08019a76 <LL_ADC_IsEnabled>:
{
 8019a76:	b480      	push	{r7}
 8019a78:	b083      	sub	sp, #12
 8019a7a:	af00      	add	r7, sp, #0
 8019a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	689b      	ldr	r3, [r3, #8]
 8019a82:	f003 0301 	and.w	r3, r3, #1
 8019a86:	2b01      	cmp	r3, #1
 8019a88:	d101      	bne.n	8019a8e <LL_ADC_IsEnabled+0x18>
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	e000      	b.n	8019a90 <LL_ADC_IsEnabled+0x1a>
 8019a8e:	2300      	movs	r3, #0
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	370c      	adds	r7, #12
 8019a94:	46bd      	mov	sp, r7
 8019a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9a:	4770      	bx	lr

08019a9c <LL_ADC_StartCalibration>:
{
 8019a9c:	b480      	push	{r7}
 8019a9e:	b083      	sub	sp, #12
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	6078      	str	r0, [r7, #4]
 8019aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	689b      	ldr	r3, [r3, #8]
 8019aaa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8019aae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ab2:	683a      	ldr	r2, [r7, #0]
 8019ab4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8019ab8:	4313      	orrs	r3, r2
 8019aba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	609a      	str	r2, [r3, #8]
}
 8019ac2:	bf00      	nop
 8019ac4:	370c      	adds	r7, #12
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019acc:	4770      	bx	lr

08019ace <LL_ADC_IsCalibrationOnGoing>:
{
 8019ace:	b480      	push	{r7}
 8019ad0:	b083      	sub	sp, #12
 8019ad2:	af00      	add	r7, sp, #0
 8019ad4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	689b      	ldr	r3, [r3, #8]
 8019ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019ae2:	d101      	bne.n	8019ae8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	e000      	b.n	8019aea <LL_ADC_IsCalibrationOnGoing+0x1c>
 8019ae8:	2300      	movs	r3, #0
}
 8019aea:	4618      	mov	r0, r3
 8019aec:	370c      	adds	r7, #12
 8019aee:	46bd      	mov	sp, r7
 8019af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af4:	4770      	bx	lr

08019af6 <LL_ADC_REG_IsConversionOngoing>:
{
 8019af6:	b480      	push	{r7}
 8019af8:	b083      	sub	sp, #12
 8019afa:	af00      	add	r7, sp, #0
 8019afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	689b      	ldr	r3, [r3, #8]
 8019b02:	f003 0304 	and.w	r3, r3, #4
 8019b06:	2b04      	cmp	r3, #4
 8019b08:	d101      	bne.n	8019b0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	e000      	b.n	8019b10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019b0e:	2300      	movs	r3, #0
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	370c      	adds	r7, #12
 8019b14:	46bd      	mov	sp, r7
 8019b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1a:	4770      	bx	lr

08019b1c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b084      	sub	sp, #16
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8019b26:	2300      	movs	r3, #0
 8019b28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019b30:	2b01      	cmp	r3, #1
 8019b32:	d101      	bne.n	8019b38 <HAL_ADCEx_Calibration_Start+0x1c>
 8019b34:	2302      	movs	r3, #2
 8019b36:	e04d      	b.n	8019bd4 <HAL_ADCEx_Calibration_Start+0xb8>
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	f7ff fea5 	bl	8019890 <ADC_Disable>
 8019b46:	4603      	mov	r3, r0
 8019b48:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8019b4a:	7bfb      	ldrb	r3, [r7, #15]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d136      	bne.n	8019bbe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019b58:	f023 0302 	bic.w	r3, r3, #2
 8019b5c:	f043 0202 	orr.w	r2, r3, #2
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	6839      	ldr	r1, [r7, #0]
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	f7ff ff96 	bl	8019a9c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8019b70:	e014      	b.n	8019b9c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	3301      	adds	r3, #1
 8019b76:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8019b78:	68bb      	ldr	r3, [r7, #8]
 8019b7a:	4a18      	ldr	r2, [pc, #96]	; (8019bdc <HAL_ADCEx_Calibration_Start+0xc0>)
 8019b7c:	4293      	cmp	r3, r2
 8019b7e:	d90d      	bls.n	8019b9c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b84:	f023 0312 	bic.w	r3, r3, #18
 8019b88:	f043 0210 	orr.w	r2, r3, #16
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2200      	movs	r2, #0
 8019b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8019b98:	2301      	movs	r3, #1
 8019b9a:	e01b      	b.n	8019bd4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7ff ff94 	bl	8019ace <LL_ADC_IsCalibrationOnGoing>
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d1e2      	bne.n	8019b72 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bb0:	f023 0303 	bic.w	r3, r3, #3
 8019bb4:	f043 0201 	orr.w	r2, r3, #1
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	65da      	str	r2, [r3, #92]	; 0x5c
 8019bbc:	e005      	b.n	8019bca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bc2:	f043 0210 	orr.w	r2, r3, #16
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	2200      	movs	r2, #0
 8019bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	3710      	adds	r7, #16
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bd80      	pop	{r7, pc}
 8019bdc:	0004de01 	.word	0x0004de01

08019be0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019be0:	b480      	push	{r7}
 8019be2:	b083      	sub	sp, #12
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8019be8:	bf00      	nop
 8019bea:	370c      	adds	r7, #12
 8019bec:	46bd      	mov	sp, r7
 8019bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf2:	4770      	bx	lr

08019bf4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8019bf4:	b480      	push	{r7}
 8019bf6:	b083      	sub	sp, #12
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8019bfc:	bf00      	nop
 8019bfe:	370c      	adds	r7, #12
 8019c00:	46bd      	mov	sp, r7
 8019c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c06:	4770      	bx	lr

08019c08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8019c08:	b480      	push	{r7}
 8019c0a:	b083      	sub	sp, #12
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8019c10:	bf00      	nop
 8019c12:	370c      	adds	r7, #12
 8019c14:	46bd      	mov	sp, r7
 8019c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1a:	4770      	bx	lr

08019c1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8019c1c:	b480      	push	{r7}
 8019c1e:	b083      	sub	sp, #12
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8019c24:	bf00      	nop
 8019c26:	370c      	adds	r7, #12
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c2e:	4770      	bx	lr

08019c30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8019c30:	b480      	push	{r7}
 8019c32:	b083      	sub	sp, #12
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8019c38:	bf00      	nop
 8019c3a:	370c      	adds	r7, #12
 8019c3c:	46bd      	mov	sp, r7
 8019c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c42:	4770      	bx	lr

08019c44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8019c44:	b590      	push	{r4, r7, lr}
 8019c46:	b0a1      	sub	sp, #132	; 0x84
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
 8019c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019c5a:	2b01      	cmp	r3, #1
 8019c5c:	d101      	bne.n	8019c62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8019c5e:	2302      	movs	r3, #2
 8019c60:	e0cb      	b.n	8019dfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	2201      	movs	r2, #1
 8019c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8019c6e:	2300      	movs	r3, #0
 8019c70:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019c7a:	d102      	bne.n	8019c82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8019c7c:	4b61      	ldr	r3, [pc, #388]	; (8019e04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019c7e:	60bb      	str	r3, [r7, #8]
 8019c80:	e001      	b.n	8019c86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8019c82:	2300      	movs	r3, #0
 8019c84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d10b      	bne.n	8019ca4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c90:	f043 0220 	orr.w	r2, r3, #32
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8019ca0:	2301      	movs	r3, #1
 8019ca2:	e0aa      	b.n	8019dfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8019ca4:	68bb      	ldr	r3, [r7, #8]
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7ff ff25 	bl	8019af6 <LL_ADC_REG_IsConversionOngoing>
 8019cac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7ff ff1f 	bl	8019af6 <LL_ADC_REG_IsConversionOngoing>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	f040 808c 	bne.w	8019dd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8019cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	f040 8088 	bne.w	8019dd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019cd0:	d004      	beq.n	8019cdc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	4a4b      	ldr	r2, [pc, #300]	; (8019e04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019cd8:	4293      	cmp	r3, r2
 8019cda:	d101      	bne.n	8019ce0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8019cdc:	4b4a      	ldr	r3, [pc, #296]	; (8019e08 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8019cde:	e000      	b.n	8019ce2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8019ce0:	4b4a      	ldr	r3, [pc, #296]	; (8019e0c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8019ce2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019ce4:	683b      	ldr	r3, [r7, #0]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d041      	beq.n	8019d70 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8019cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019cee:	689b      	ldr	r3, [r3, #8]
 8019cf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019cf4:	683b      	ldr	r3, [r7, #0]
 8019cf6:	6859      	ldr	r1, [r3, #4]
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019cfe:	035b      	lsls	r3, r3, #13
 8019d00:	430b      	orrs	r3, r1
 8019d02:	431a      	orrs	r2, r3
 8019d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d10:	d004      	beq.n	8019d1c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	4a3b      	ldr	r2, [pc, #236]	; (8019e04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d10f      	bne.n	8019d3c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8019d1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019d20:	f7ff fea9 	bl	8019a76 <LL_ADC_IsEnabled>
 8019d24:	4604      	mov	r4, r0
 8019d26:	4837      	ldr	r0, [pc, #220]	; (8019e04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019d28:	f7ff fea5 	bl	8019a76 <LL_ADC_IsEnabled>
 8019d2c:	4603      	mov	r3, r0
 8019d2e:	4323      	orrs	r3, r4
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	bf0c      	ite	eq
 8019d34:	2301      	moveq	r3, #1
 8019d36:	2300      	movne	r3, #0
 8019d38:	b2db      	uxtb	r3, r3
 8019d3a:	e008      	b.n	8019d4e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8019d3c:	4834      	ldr	r0, [pc, #208]	; (8019e10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019d3e:	f7ff fe9a 	bl	8019a76 <LL_ADC_IsEnabled>
 8019d42:	4603      	mov	r3, r0
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	bf0c      	ite	eq
 8019d48:	2301      	moveq	r3, #1
 8019d4a:	2300      	movne	r3, #0
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d04c      	beq.n	8019dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8019d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d54:	689b      	ldr	r3, [r3, #8]
 8019d56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019d5a:	f023 030f 	bic.w	r3, r3, #15
 8019d5e:	683a      	ldr	r2, [r7, #0]
 8019d60:	6811      	ldr	r1, [r2, #0]
 8019d62:	683a      	ldr	r2, [r7, #0]
 8019d64:	6892      	ldr	r2, [r2, #8]
 8019d66:	430a      	orrs	r2, r1
 8019d68:	431a      	orrs	r2, r3
 8019d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d6c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019d6e:	e03d      	b.n	8019dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8019d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d72:	689b      	ldr	r3, [r3, #8]
 8019d74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d84:	d004      	beq.n	8019d90 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	4a1e      	ldr	r2, [pc, #120]	; (8019e04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019d8c:	4293      	cmp	r3, r2
 8019d8e:	d10f      	bne.n	8019db0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8019d90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019d94:	f7ff fe6f 	bl	8019a76 <LL_ADC_IsEnabled>
 8019d98:	4604      	mov	r4, r0
 8019d9a:	481a      	ldr	r0, [pc, #104]	; (8019e04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019d9c:	f7ff fe6b 	bl	8019a76 <LL_ADC_IsEnabled>
 8019da0:	4603      	mov	r3, r0
 8019da2:	4323      	orrs	r3, r4
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	bf0c      	ite	eq
 8019da8:	2301      	moveq	r3, #1
 8019daa:	2300      	movne	r3, #0
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	e008      	b.n	8019dc2 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8019db0:	4817      	ldr	r0, [pc, #92]	; (8019e10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019db2:	f7ff fe60 	bl	8019a76 <LL_ADC_IsEnabled>
 8019db6:	4603      	mov	r3, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	bf0c      	ite	eq
 8019dbc:	2301      	moveq	r3, #1
 8019dbe:	2300      	movne	r3, #0
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d012      	beq.n	8019dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8019dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019dc8:	689b      	ldr	r3, [r3, #8]
 8019dca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019dce:	f023 030f 	bic.w	r3, r3, #15
 8019dd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019dd4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019dd6:	e009      	b.n	8019dec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ddc:	f043 0220 	orr.w	r2, r3, #32
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019de4:	2301      	movs	r3, #1
 8019de6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8019dea:	e000      	b.n	8019dee <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019dec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2200      	movs	r2, #0
 8019df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019df6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	3784      	adds	r7, #132	; 0x84
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bd90      	pop	{r4, r7, pc}
 8019e02:	bf00      	nop
 8019e04:	50000100 	.word	0x50000100
 8019e08:	50000300 	.word	0x50000300
 8019e0c:	50000700 	.word	0x50000700
 8019e10:	50000400 	.word	0x50000400

08019e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019e14:	b480      	push	{r7}
 8019e16:	b085      	sub	sp, #20
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	f003 0307 	and.w	r3, r3, #7
 8019e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019e24:	4b0c      	ldr	r3, [pc, #48]	; (8019e58 <__NVIC_SetPriorityGrouping+0x44>)
 8019e26:	68db      	ldr	r3, [r3, #12]
 8019e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019e2a:	68ba      	ldr	r2, [r7, #8]
 8019e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019e30:	4013      	ands	r3, r2
 8019e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8019e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8019e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019e46:	4a04      	ldr	r2, [pc, #16]	; (8019e58 <__NVIC_SetPriorityGrouping+0x44>)
 8019e48:	68bb      	ldr	r3, [r7, #8]
 8019e4a:	60d3      	str	r3, [r2, #12]
}
 8019e4c:	bf00      	nop
 8019e4e:	3714      	adds	r7, #20
 8019e50:	46bd      	mov	sp, r7
 8019e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e56:	4770      	bx	lr
 8019e58:	e000ed00 	.word	0xe000ed00

08019e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8019e5c:	b480      	push	{r7}
 8019e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019e60:	4b04      	ldr	r3, [pc, #16]	; (8019e74 <__NVIC_GetPriorityGrouping+0x18>)
 8019e62:	68db      	ldr	r3, [r3, #12]
 8019e64:	0a1b      	lsrs	r3, r3, #8
 8019e66:	f003 0307 	and.w	r3, r3, #7
}
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e72:	4770      	bx	lr
 8019e74:	e000ed00 	.word	0xe000ed00

08019e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019e78:	b480      	push	{r7}
 8019e7a:	b083      	sub	sp, #12
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	4603      	mov	r3, r0
 8019e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	db0b      	blt.n	8019ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019e8a:	79fb      	ldrb	r3, [r7, #7]
 8019e8c:	f003 021f 	and.w	r2, r3, #31
 8019e90:	4907      	ldr	r1, [pc, #28]	; (8019eb0 <__NVIC_EnableIRQ+0x38>)
 8019e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e96:	095b      	lsrs	r3, r3, #5
 8019e98:	2001      	movs	r0, #1
 8019e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8019e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8019ea2:	bf00      	nop
 8019ea4:	370c      	adds	r7, #12
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eac:	4770      	bx	lr
 8019eae:	bf00      	nop
 8019eb0:	e000e100 	.word	0xe000e100

08019eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8019eb4:	b480      	push	{r7}
 8019eb6:	b083      	sub	sp, #12
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	4603      	mov	r3, r0
 8019ebc:	6039      	str	r1, [r7, #0]
 8019ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	db0a      	blt.n	8019ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	b2da      	uxtb	r2, r3
 8019ecc:	490c      	ldr	r1, [pc, #48]	; (8019f00 <__NVIC_SetPriority+0x4c>)
 8019ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ed2:	0112      	lsls	r2, r2, #4
 8019ed4:	b2d2      	uxtb	r2, r2
 8019ed6:	440b      	add	r3, r1
 8019ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8019edc:	e00a      	b.n	8019ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019ede:	683b      	ldr	r3, [r7, #0]
 8019ee0:	b2da      	uxtb	r2, r3
 8019ee2:	4908      	ldr	r1, [pc, #32]	; (8019f04 <__NVIC_SetPriority+0x50>)
 8019ee4:	79fb      	ldrb	r3, [r7, #7]
 8019ee6:	f003 030f 	and.w	r3, r3, #15
 8019eea:	3b04      	subs	r3, #4
 8019eec:	0112      	lsls	r2, r2, #4
 8019eee:	b2d2      	uxtb	r2, r2
 8019ef0:	440b      	add	r3, r1
 8019ef2:	761a      	strb	r2, [r3, #24]
}
 8019ef4:	bf00      	nop
 8019ef6:	370c      	adds	r7, #12
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019efe:	4770      	bx	lr
 8019f00:	e000e100 	.word	0xe000e100
 8019f04:	e000ed00 	.word	0xe000ed00

08019f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019f08:	b480      	push	{r7}
 8019f0a:	b089      	sub	sp, #36	; 0x24
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	60f8      	str	r0, [r7, #12]
 8019f10:	60b9      	str	r1, [r7, #8]
 8019f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	f003 0307 	and.w	r3, r3, #7
 8019f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019f1c:	69fb      	ldr	r3, [r7, #28]
 8019f1e:	f1c3 0307 	rsb	r3, r3, #7
 8019f22:	2b04      	cmp	r3, #4
 8019f24:	bf28      	it	cs
 8019f26:	2304      	movcs	r3, #4
 8019f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019f2a:	69fb      	ldr	r3, [r7, #28]
 8019f2c:	3304      	adds	r3, #4
 8019f2e:	2b06      	cmp	r3, #6
 8019f30:	d902      	bls.n	8019f38 <NVIC_EncodePriority+0x30>
 8019f32:	69fb      	ldr	r3, [r7, #28]
 8019f34:	3b03      	subs	r3, #3
 8019f36:	e000      	b.n	8019f3a <NVIC_EncodePriority+0x32>
 8019f38:	2300      	movs	r3, #0
 8019f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8019f40:	69bb      	ldr	r3, [r7, #24]
 8019f42:	fa02 f303 	lsl.w	r3, r2, r3
 8019f46:	43da      	mvns	r2, r3
 8019f48:	68bb      	ldr	r3, [r7, #8]
 8019f4a:	401a      	ands	r2, r3
 8019f4c:	697b      	ldr	r3, [r7, #20]
 8019f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019f50:	f04f 31ff 	mov.w	r1, #4294967295
 8019f54:	697b      	ldr	r3, [r7, #20]
 8019f56:	fa01 f303 	lsl.w	r3, r1, r3
 8019f5a:	43d9      	mvns	r1, r3
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019f60:	4313      	orrs	r3, r2
         );
}
 8019f62:	4618      	mov	r0, r3
 8019f64:	3724      	adds	r7, #36	; 0x24
 8019f66:	46bd      	mov	sp, r7
 8019f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6c:	4770      	bx	lr
	...

08019f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b082      	sub	sp, #8
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	3b01      	subs	r3, #1
 8019f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019f80:	d301      	bcc.n	8019f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019f82:	2301      	movs	r3, #1
 8019f84:	e00f      	b.n	8019fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019f86:	4a0a      	ldr	r2, [pc, #40]	; (8019fb0 <SysTick_Config+0x40>)
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	3b01      	subs	r3, #1
 8019f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019f8e:	210f      	movs	r1, #15
 8019f90:	f04f 30ff 	mov.w	r0, #4294967295
 8019f94:	f7ff ff8e 	bl	8019eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019f98:	4b05      	ldr	r3, [pc, #20]	; (8019fb0 <SysTick_Config+0x40>)
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019f9e:	4b04      	ldr	r3, [pc, #16]	; (8019fb0 <SysTick_Config+0x40>)
 8019fa0:	2207      	movs	r2, #7
 8019fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019fa4:	2300      	movs	r3, #0
}
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	3708      	adds	r7, #8
 8019faa:	46bd      	mov	sp, r7
 8019fac:	bd80      	pop	{r7, pc}
 8019fae:	bf00      	nop
 8019fb0:	e000e010 	.word	0xe000e010

08019fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f7ff ff29 	bl	8019e14 <__NVIC_SetPriorityGrouping>
}
 8019fc2:	bf00      	nop
 8019fc4:	3708      	adds	r7, #8
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}

08019fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019fca:	b580      	push	{r7, lr}
 8019fcc:	b086      	sub	sp, #24
 8019fce:	af00      	add	r7, sp, #0
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	60b9      	str	r1, [r7, #8]
 8019fd4:	607a      	str	r2, [r7, #4]
 8019fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019fd8:	f7ff ff40 	bl	8019e5c <__NVIC_GetPriorityGrouping>
 8019fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019fde:	687a      	ldr	r2, [r7, #4]
 8019fe0:	68b9      	ldr	r1, [r7, #8]
 8019fe2:	6978      	ldr	r0, [r7, #20]
 8019fe4:	f7ff ff90 	bl	8019f08 <NVIC_EncodePriority>
 8019fe8:	4602      	mov	r2, r0
 8019fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fee:	4611      	mov	r1, r2
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7ff ff5f 	bl	8019eb4 <__NVIC_SetPriority>
}
 8019ff6:	bf00      	nop
 8019ff8:	3718      	adds	r7, #24
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	bd80      	pop	{r7, pc}

08019ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019ffe:	b580      	push	{r7, lr}
 801a000:	b082      	sub	sp, #8
 801a002:	af00      	add	r7, sp, #0
 801a004:	4603      	mov	r3, r0
 801a006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a00c:	4618      	mov	r0, r3
 801a00e:	f7ff ff33 	bl	8019e78 <__NVIC_EnableIRQ>
}
 801a012:	bf00      	nop
 801a014:	3708      	adds	r7, #8
 801a016:	46bd      	mov	sp, r7
 801a018:	bd80      	pop	{r7, pc}

0801a01a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a01a:	b580      	push	{r7, lr}
 801a01c:	b082      	sub	sp, #8
 801a01e:	af00      	add	r7, sp, #0
 801a020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a022:	6878      	ldr	r0, [r7, #4]
 801a024:	f7ff ffa4 	bl	8019f70 <SysTick_Config>
 801a028:	4603      	mov	r3, r0
}
 801a02a:	4618      	mov	r0, r3
 801a02c:	3708      	adds	r7, #8
 801a02e:	46bd      	mov	sp, r7
 801a030:	bd80      	pop	{r7, pc}
	...

0801a034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b084      	sub	sp, #16
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d101      	bne.n	801a046 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801a042:	2301      	movs	r3, #1
 801a044:	e08d      	b.n	801a162 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	461a      	mov	r2, r3
 801a04c:	4b47      	ldr	r3, [pc, #284]	; (801a16c <HAL_DMA_Init+0x138>)
 801a04e:	429a      	cmp	r2, r3
 801a050:	d80f      	bhi.n	801a072 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	461a      	mov	r2, r3
 801a058:	4b45      	ldr	r3, [pc, #276]	; (801a170 <HAL_DMA_Init+0x13c>)
 801a05a:	4413      	add	r3, r2
 801a05c:	4a45      	ldr	r2, [pc, #276]	; (801a174 <HAL_DMA_Init+0x140>)
 801a05e:	fba2 2303 	umull	r2, r3, r2, r3
 801a062:	091b      	lsrs	r3, r3, #4
 801a064:	009a      	lsls	r2, r3, #2
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	4a42      	ldr	r2, [pc, #264]	; (801a178 <HAL_DMA_Init+0x144>)
 801a06e:	641a      	str	r2, [r3, #64]	; 0x40
 801a070:	e00e      	b.n	801a090 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	461a      	mov	r2, r3
 801a078:	4b40      	ldr	r3, [pc, #256]	; (801a17c <HAL_DMA_Init+0x148>)
 801a07a:	4413      	add	r3, r2
 801a07c:	4a3d      	ldr	r2, [pc, #244]	; (801a174 <HAL_DMA_Init+0x140>)
 801a07e:	fba2 2303 	umull	r2, r3, r2, r3
 801a082:	091b      	lsrs	r3, r3, #4
 801a084:	009a      	lsls	r2, r3, #2
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	4a3c      	ldr	r2, [pc, #240]	; (801a180 <HAL_DMA_Init+0x14c>)
 801a08e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	2202      	movs	r2, #2
 801a094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801a0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a0aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801a0b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	691b      	ldr	r3, [r3, #16]
 801a0ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a0c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	699b      	ldr	r3, [r3, #24]
 801a0c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a0cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	6a1b      	ldr	r3, [r3, #32]
 801a0d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801a0d4:	68fa      	ldr	r2, [r7, #12]
 801a0d6:	4313      	orrs	r3, r2
 801a0d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	68fa      	ldr	r2, [r7, #12]
 801a0e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a0e2:	6878      	ldr	r0, [r7, #4]
 801a0e4:	f000 fa10 	bl	801a508 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	689b      	ldr	r3, [r3, #8]
 801a0ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a0f0:	d102      	bne.n	801a0f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	685a      	ldr	r2, [r3, #4]
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a100:	b2d2      	uxtb	r2, r2
 801a102:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a108:	687a      	ldr	r2, [r7, #4]
 801a10a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a10c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	685b      	ldr	r3, [r3, #4]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d010      	beq.n	801a138 <HAL_DMA_Init+0x104>
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	685b      	ldr	r3, [r3, #4]
 801a11a:	2b04      	cmp	r3, #4
 801a11c:	d80c      	bhi.n	801a138 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a11e:	6878      	ldr	r0, [r7, #4]
 801a120:	f000 fa30 	bl	801a584 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a128:	2200      	movs	r2, #0
 801a12a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a130:	687a      	ldr	r2, [r7, #4]
 801a132:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a134:	605a      	str	r2, [r3, #4]
 801a136:	e008      	b.n	801a14a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	2200      	movs	r2, #0
 801a13c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2200      	movs	r2, #0
 801a142:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	2200      	movs	r2, #0
 801a148:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	2200      	movs	r2, #0
 801a14e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	2201      	movs	r2, #1
 801a154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	2200      	movs	r2, #0
 801a15c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801a160:	2300      	movs	r3, #0
}
 801a162:	4618      	mov	r0, r3
 801a164:	3710      	adds	r7, #16
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
 801a16a:	bf00      	nop
 801a16c:	40020407 	.word	0x40020407
 801a170:	bffdfff8 	.word	0xbffdfff8
 801a174:	cccccccd 	.word	0xcccccccd
 801a178:	40020000 	.word	0x40020000
 801a17c:	bffdfbf8 	.word	0xbffdfbf8
 801a180:	40020400 	.word	0x40020400

0801a184 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b086      	sub	sp, #24
 801a188:	af00      	add	r7, sp, #0
 801a18a:	60f8      	str	r0, [r7, #12]
 801a18c:	60b9      	str	r1, [r7, #8]
 801a18e:	607a      	str	r2, [r7, #4]
 801a190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a192:	2300      	movs	r3, #0
 801a194:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a19c:	2b01      	cmp	r3, #1
 801a19e:	d101      	bne.n	801a1a4 <HAL_DMA_Start_IT+0x20>
 801a1a0:	2302      	movs	r3, #2
 801a1a2:	e066      	b.n	801a272 <HAL_DMA_Start_IT+0xee>
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	2201      	movs	r2, #1
 801a1a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a1b2:	b2db      	uxtb	r3, r3
 801a1b4:	2b01      	cmp	r3, #1
 801a1b6:	d155      	bne.n	801a264 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	2202      	movs	r2, #2
 801a1bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	681a      	ldr	r2, [r3, #0]
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f022 0201 	bic.w	r2, r2, #1
 801a1d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801a1d6:	683b      	ldr	r3, [r7, #0]
 801a1d8:	687a      	ldr	r2, [r7, #4]
 801a1da:	68b9      	ldr	r1, [r7, #8]
 801a1dc:	68f8      	ldr	r0, [r7, #12]
 801a1de:	f000 f954 	bl	801a48a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d008      	beq.n	801a1fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	681a      	ldr	r2, [r3, #0]
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	f042 020e 	orr.w	r2, r2, #14
 801a1f8:	601a      	str	r2, [r3, #0]
 801a1fa:	e00f      	b.n	801a21c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	681a      	ldr	r2, [r3, #0]
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	f022 0204 	bic.w	r2, r2, #4
 801a20a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	681a      	ldr	r2, [r3, #0]
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	f042 020a 	orr.w	r2, r2, #10
 801a21a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a226:	2b00      	cmp	r3, #0
 801a228:	d007      	beq.n	801a23a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a22e:	681a      	ldr	r2, [r3, #0]
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a238:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d007      	beq.n	801a252 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a246:	681a      	ldr	r2, [r3, #0]
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a24c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a250:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	681a      	ldr	r2, [r3, #0]
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	f042 0201 	orr.w	r2, r2, #1
 801a260:	601a      	str	r2, [r3, #0]
 801a262:	e005      	b.n	801a270 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	2200      	movs	r2, #0
 801a268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801a26c:	2302      	movs	r3, #2
 801a26e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801a270:	7dfb      	ldrb	r3, [r7, #23]
}
 801a272:	4618      	mov	r0, r3
 801a274:	3718      	adds	r7, #24
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}

0801a27a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a27a:	b480      	push	{r7}
 801a27c:	b085      	sub	sp, #20
 801a27e:	af00      	add	r7, sp, #0
 801a280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a282:	2300      	movs	r3, #0
 801a284:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a28c:	b2db      	uxtb	r3, r3
 801a28e:	2b02      	cmp	r3, #2
 801a290:	d005      	beq.n	801a29e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	2204      	movs	r2, #4
 801a296:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801a298:	2301      	movs	r3, #1
 801a29a:	73fb      	strb	r3, [r7, #15]
 801a29c:	e037      	b.n	801a30e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	681a      	ldr	r2, [r3, #0]
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	f022 020e 	bic.w	r2, r2, #14
 801a2ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a2b2:	681a      	ldr	r2, [r3, #0]
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a2b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a2bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	681a      	ldr	r2, [r3, #0]
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	f022 0201 	bic.w	r2, r2, #1
 801a2cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2d2:	f003 021f 	and.w	r2, r3, #31
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2da:	2101      	movs	r1, #1
 801a2dc:	fa01 f202 	lsl.w	r2, r1, r2
 801a2e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2e6:	687a      	ldr	r2, [r7, #4]
 801a2e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a2ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d00c      	beq.n	801a30e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2f8:	681a      	ldr	r2, [r3, #0]
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a302:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a308:	687a      	ldr	r2, [r7, #4]
 801a30a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a30c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	2201      	movs	r2, #1
 801a312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	2200      	movs	r2, #0
 801a31a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801a31e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a320:	4618      	mov	r0, r3
 801a322:	3714      	adds	r7, #20
 801a324:	46bd      	mov	sp, r7
 801a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a32a:	4770      	bx	lr

0801a32c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b084      	sub	sp, #16
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a348:	f003 031f 	and.w	r3, r3, #31
 801a34c:	2204      	movs	r2, #4
 801a34e:	409a      	lsls	r2, r3
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	4013      	ands	r3, r2
 801a354:	2b00      	cmp	r3, #0
 801a356:	d026      	beq.n	801a3a6 <HAL_DMA_IRQHandler+0x7a>
 801a358:	68bb      	ldr	r3, [r7, #8]
 801a35a:	f003 0304 	and.w	r3, r3, #4
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d021      	beq.n	801a3a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	f003 0320 	and.w	r3, r3, #32
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d107      	bne.n	801a380 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	681a      	ldr	r2, [r3, #0]
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	f022 0204 	bic.w	r2, r2, #4
 801a37e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a384:	f003 021f 	and.w	r2, r3, #31
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a38c:	2104      	movs	r1, #4
 801a38e:	fa01 f202 	lsl.w	r2, r1, r2
 801a392:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d071      	beq.n	801a480 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801a3a4:	e06c      	b.n	801a480 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3aa:	f003 031f 	and.w	r3, r3, #31
 801a3ae:	2202      	movs	r2, #2
 801a3b0:	409a      	lsls	r2, r3
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	4013      	ands	r3, r2
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d02e      	beq.n	801a418 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801a3ba:	68bb      	ldr	r3, [r7, #8]
 801a3bc:	f003 0302 	and.w	r3, r3, #2
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d029      	beq.n	801a418 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	f003 0320 	and.w	r3, r3, #32
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d10b      	bne.n	801a3ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	681a      	ldr	r2, [r3, #0]
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	f022 020a 	bic.w	r2, r2, #10
 801a3e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	2201      	movs	r2, #1
 801a3e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3ee:	f003 021f 	and.w	r2, r3, #31
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3f6:	2102      	movs	r1, #2
 801a3f8:	fa01 f202 	lsl.w	r2, r1, r2
 801a3fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	2200      	movs	r2, #0
 801a402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d038      	beq.n	801a480 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a412:	6878      	ldr	r0, [r7, #4]
 801a414:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801a416:	e033      	b.n	801a480 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a41c:	f003 031f 	and.w	r3, r3, #31
 801a420:	2208      	movs	r2, #8
 801a422:	409a      	lsls	r2, r3
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	4013      	ands	r3, r2
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d02a      	beq.n	801a482 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	f003 0308 	and.w	r3, r3, #8
 801a432:	2b00      	cmp	r3, #0
 801a434:	d025      	beq.n	801a482 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	681a      	ldr	r2, [r3, #0]
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	f022 020e 	bic.w	r2, r2, #14
 801a444:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a44a:	f003 021f 	and.w	r2, r3, #31
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a452:	2101      	movs	r1, #1
 801a454:	fa01 f202 	lsl.w	r2, r1, r2
 801a458:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	2201      	movs	r2, #1
 801a45e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	2201      	movs	r2, #1
 801a464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	2200      	movs	r2, #0
 801a46c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a474:	2b00      	cmp	r3, #0
 801a476:	d004      	beq.n	801a482 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a47c:	6878      	ldr	r0, [r7, #4]
 801a47e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801a480:	bf00      	nop
 801a482:	bf00      	nop
}
 801a484:	3710      	adds	r7, #16
 801a486:	46bd      	mov	sp, r7
 801a488:	bd80      	pop	{r7, pc}

0801a48a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801a48a:	b480      	push	{r7}
 801a48c:	b085      	sub	sp, #20
 801a48e:	af00      	add	r7, sp, #0
 801a490:	60f8      	str	r0, [r7, #12]
 801a492:	60b9      	str	r1, [r7, #8]
 801a494:	607a      	str	r2, [r7, #4]
 801a496:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a49c:	68fa      	ldr	r2, [r7, #12]
 801a49e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a4a0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d004      	beq.n	801a4b4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a4ae:	68fa      	ldr	r2, [r7, #12]
 801a4b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a4b2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4b8:	f003 021f 	and.w	r2, r3, #31
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4c0:	2101      	movs	r1, #1
 801a4c2:	fa01 f202 	lsl.w	r2, r1, r2
 801a4c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	683a      	ldr	r2, [r7, #0]
 801a4ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	689b      	ldr	r3, [r3, #8]
 801a4d4:	2b10      	cmp	r3, #16
 801a4d6:	d108      	bne.n	801a4ea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	687a      	ldr	r2, [r7, #4]
 801a4de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	68ba      	ldr	r2, [r7, #8]
 801a4e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801a4e8:	e007      	b.n	801a4fa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	68ba      	ldr	r2, [r7, #8]
 801a4f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	687a      	ldr	r2, [r7, #4]
 801a4f8:	60da      	str	r2, [r3, #12]
}
 801a4fa:	bf00      	nop
 801a4fc:	3714      	adds	r7, #20
 801a4fe:	46bd      	mov	sp, r7
 801a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a504:	4770      	bx	lr
	...

0801a508 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a508:	b480      	push	{r7}
 801a50a:	b087      	sub	sp, #28
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	461a      	mov	r2, r3
 801a516:	4b16      	ldr	r3, [pc, #88]	; (801a570 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801a518:	429a      	cmp	r2, r3
 801a51a:	d802      	bhi.n	801a522 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801a51c:	4b15      	ldr	r3, [pc, #84]	; (801a574 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801a51e:	617b      	str	r3, [r7, #20]
 801a520:	e001      	b.n	801a526 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801a522:	4b15      	ldr	r3, [pc, #84]	; (801a578 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801a524:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801a526:	697b      	ldr	r3, [r7, #20]
 801a528:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	b2db      	uxtb	r3, r3
 801a530:	3b08      	subs	r3, #8
 801a532:	4a12      	ldr	r2, [pc, #72]	; (801a57c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801a534:	fba2 2303 	umull	r2, r3, r2, r3
 801a538:	091b      	lsrs	r3, r3, #4
 801a53a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a540:	089b      	lsrs	r3, r3, #2
 801a542:	009a      	lsls	r2, r3, #2
 801a544:	693b      	ldr	r3, [r7, #16]
 801a546:	4413      	add	r3, r2
 801a548:	461a      	mov	r2, r3
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	4a0b      	ldr	r2, [pc, #44]	; (801a580 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801a552:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	f003 031f 	and.w	r3, r3, #31
 801a55a:	2201      	movs	r2, #1
 801a55c:	409a      	lsls	r2, r3
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	651a      	str	r2, [r3, #80]	; 0x50
}
 801a562:	bf00      	nop
 801a564:	371c      	adds	r7, #28
 801a566:	46bd      	mov	sp, r7
 801a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a56c:	4770      	bx	lr
 801a56e:	bf00      	nop
 801a570:	40020407 	.word	0x40020407
 801a574:	40020800 	.word	0x40020800
 801a578:	40020820 	.word	0x40020820
 801a57c:	cccccccd 	.word	0xcccccccd
 801a580:	40020880 	.word	0x40020880

0801a584 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a584:	b480      	push	{r7}
 801a586:	b085      	sub	sp, #20
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	685b      	ldr	r3, [r3, #4]
 801a590:	b2db      	uxtb	r3, r3
 801a592:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801a594:	68fa      	ldr	r2, [r7, #12]
 801a596:	4b0b      	ldr	r3, [pc, #44]	; (801a5c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801a598:	4413      	add	r3, r2
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	461a      	mov	r2, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	4a08      	ldr	r2, [pc, #32]	; (801a5c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801a5a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	3b01      	subs	r3, #1
 801a5ac:	f003 031f 	and.w	r3, r3, #31
 801a5b0:	2201      	movs	r2, #1
 801a5b2:	409a      	lsls	r2, r3
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801a5b8:	bf00      	nop
 801a5ba:	3714      	adds	r7, #20
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c2:	4770      	bx	lr
 801a5c4:	1000823f 	.word	0x1000823f
 801a5c8:	40020940 	.word	0x40020940

0801a5cc <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b086      	sub	sp, #24
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	60f8      	str	r0, [r7, #12]
 801a5d4:	60b9      	str	r1, [r7, #8]
 801a5d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801a5da:	2300      	movs	r3, #0
 801a5dc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a5de:	4b24      	ldr	r3, [pc, #144]	; (801a670 <HAL_FLASH_Program+0xa4>)
 801a5e0:	781b      	ldrb	r3, [r3, #0]
 801a5e2:	2b01      	cmp	r3, #1
 801a5e4:	d101      	bne.n	801a5ea <HAL_FLASH_Program+0x1e>
 801a5e6:	2302      	movs	r3, #2
 801a5e8:	e03e      	b.n	801a668 <HAL_FLASH_Program+0x9c>
 801a5ea:	4b21      	ldr	r3, [pc, #132]	; (801a670 <HAL_FLASH_Program+0xa4>)
 801a5ec:	2201      	movs	r2, #1
 801a5ee:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a5f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a5f4:	f000 f87c 	bl	801a6f0 <FLASH_WaitForLastOperation>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801a5fc:	7dfb      	ldrb	r3, [r7, #23]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d12e      	bne.n	801a660 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a602:	4b1b      	ldr	r3, [pc, #108]	; (801a670 <HAL_FLASH_Program+0xa4>)
 801a604:	2200      	movs	r2, #0
 801a606:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d107      	bne.n	801a61e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801a60e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a612:	68b8      	ldr	r0, [r7, #8]
 801a614:	f000 f8c0 	bl	801a798 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801a618:	2301      	movs	r3, #1
 801a61a:	613b      	str	r3, [r7, #16]
 801a61c:	e010      	b.n	801a640 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	2b01      	cmp	r3, #1
 801a622:	d002      	beq.n	801a62a <HAL_FLASH_Program+0x5e>
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2b02      	cmp	r3, #2
 801a628:	d10a      	bne.n	801a640 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801a62a:	683b      	ldr	r3, [r7, #0]
 801a62c:	4619      	mov	r1, r3
 801a62e:	68b8      	ldr	r0, [r7, #8]
 801a630:	f000 f8d8 	bl	801a7e4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	2b02      	cmp	r3, #2
 801a638:	d102      	bne.n	801a640 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801a63a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a63e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a644:	f000 f854 	bl	801a6f0 <FLASH_WaitForLastOperation>
 801a648:	4603      	mov	r3, r0
 801a64a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801a64c:	693b      	ldr	r3, [r7, #16]
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d006      	beq.n	801a660 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801a652:	4b08      	ldr	r3, [pc, #32]	; (801a674 <HAL_FLASH_Program+0xa8>)
 801a654:	695a      	ldr	r2, [r3, #20]
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	43db      	mvns	r3, r3
 801a65a:	4906      	ldr	r1, [pc, #24]	; (801a674 <HAL_FLASH_Program+0xa8>)
 801a65c:	4013      	ands	r3, r2
 801a65e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a660:	4b03      	ldr	r3, [pc, #12]	; (801a670 <HAL_FLASH_Program+0xa4>)
 801a662:	2200      	movs	r2, #0
 801a664:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801a666:	7dfb      	ldrb	r3, [r7, #23]
}
 801a668:	4618      	mov	r0, r3
 801a66a:	3718      	adds	r7, #24
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd80      	pop	{r7, pc}
 801a670:	2000000c 	.word	0x2000000c
 801a674:	40022000 	.word	0x40022000

0801a678 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801a678:	b480      	push	{r7}
 801a67a:	b083      	sub	sp, #12
 801a67c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801a67e:	2300      	movs	r3, #0
 801a680:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a682:	4b0b      	ldr	r3, [pc, #44]	; (801a6b0 <HAL_FLASH_Unlock+0x38>)
 801a684:	695b      	ldr	r3, [r3, #20]
 801a686:	2b00      	cmp	r3, #0
 801a688:	da0b      	bge.n	801a6a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801a68a:	4b09      	ldr	r3, [pc, #36]	; (801a6b0 <HAL_FLASH_Unlock+0x38>)
 801a68c:	4a09      	ldr	r2, [pc, #36]	; (801a6b4 <HAL_FLASH_Unlock+0x3c>)
 801a68e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801a690:	4b07      	ldr	r3, [pc, #28]	; (801a6b0 <HAL_FLASH_Unlock+0x38>)
 801a692:	4a09      	ldr	r2, [pc, #36]	; (801a6b8 <HAL_FLASH_Unlock+0x40>)
 801a694:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a696:	4b06      	ldr	r3, [pc, #24]	; (801a6b0 <HAL_FLASH_Unlock+0x38>)
 801a698:	695b      	ldr	r3, [r3, #20]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	da01      	bge.n	801a6a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801a69e:	2301      	movs	r3, #1
 801a6a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801a6a2:	79fb      	ldrb	r3, [r7, #7]
}
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	370c      	adds	r7, #12
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ae:	4770      	bx	lr
 801a6b0:	40022000 	.word	0x40022000
 801a6b4:	45670123 	.word	0x45670123
 801a6b8:	cdef89ab 	.word	0xcdef89ab

0801a6bc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801a6bc:	b480      	push	{r7}
 801a6be:	b083      	sub	sp, #12
 801a6c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801a6c2:	2301      	movs	r3, #1
 801a6c4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801a6c6:	4b09      	ldr	r3, [pc, #36]	; (801a6ec <HAL_FLASH_Lock+0x30>)
 801a6c8:	695b      	ldr	r3, [r3, #20]
 801a6ca:	4a08      	ldr	r2, [pc, #32]	; (801a6ec <HAL_FLASH_Lock+0x30>)
 801a6cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a6d0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a6d2:	4b06      	ldr	r3, [pc, #24]	; (801a6ec <HAL_FLASH_Lock+0x30>)
 801a6d4:	695b      	ldr	r3, [r3, #20]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	da01      	bge.n	801a6de <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801a6da:	2300      	movs	r3, #0
 801a6dc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801a6de:	79fb      	ldrb	r3, [r7, #7]
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	370c      	adds	r7, #12
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ea:	4770      	bx	lr
 801a6ec:	40022000 	.word	0x40022000

0801a6f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	b084      	sub	sp, #16
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801a6f8:	f7fd f98a 	bl	8017a10 <HAL_GetTick>
 801a6fc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a6fe:	e009      	b.n	801a714 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801a700:	f7fd f986 	bl	8017a10 <HAL_GetTick>
 801a704:	4602      	mov	r2, r0
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	1ad3      	subs	r3, r2, r3
 801a70a:	687a      	ldr	r2, [r7, #4]
 801a70c:	429a      	cmp	r2, r3
 801a70e:	d201      	bcs.n	801a714 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801a710:	2303      	movs	r3, #3
 801a712:	e038      	b.n	801a786 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a714:	4b1e      	ldr	r3, [pc, #120]	; (801a790 <FLASH_WaitForLastOperation+0xa0>)
 801a716:	691b      	ldr	r3, [r3, #16]
 801a718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a720:	d0ee      	beq.n	801a700 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801a722:	4b1b      	ldr	r3, [pc, #108]	; (801a790 <FLASH_WaitForLastOperation+0xa0>)
 801a724:	691a      	ldr	r2, [r3, #16]
 801a726:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801a72a:	4013      	ands	r3, r2
 801a72c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d01e      	beq.n	801a772 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801a734:	4b17      	ldr	r3, [pc, #92]	; (801a794 <FLASH_WaitForLastOperation+0xa4>)
 801a736:	685a      	ldr	r2, [r3, #4]
 801a738:	68bb      	ldr	r3, [r7, #8]
 801a73a:	4313      	orrs	r3, r2
 801a73c:	4a15      	ldr	r2, [pc, #84]	; (801a794 <FLASH_WaitForLastOperation+0xa4>)
 801a73e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801a740:	68bb      	ldr	r3, [r7, #8]
 801a742:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a746:	2b00      	cmp	r3, #0
 801a748:	d007      	beq.n	801a75a <FLASH_WaitForLastOperation+0x6a>
 801a74a:	4b11      	ldr	r3, [pc, #68]	; (801a790 <FLASH_WaitForLastOperation+0xa0>)
 801a74c:	699a      	ldr	r2, [r3, #24]
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a754:	490e      	ldr	r1, [pc, #56]	; (801a790 <FLASH_WaitForLastOperation+0xa0>)
 801a756:	4313      	orrs	r3, r2
 801a758:	618b      	str	r3, [r1, #24]
 801a75a:	68bb      	ldr	r3, [r7, #8]
 801a75c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a760:	2b00      	cmp	r3, #0
 801a762:	d004      	beq.n	801a76e <FLASH_WaitForLastOperation+0x7e>
 801a764:	4a0a      	ldr	r2, [pc, #40]	; (801a790 <FLASH_WaitForLastOperation+0xa0>)
 801a766:	68bb      	ldr	r3, [r7, #8]
 801a768:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a76c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801a76e:	2301      	movs	r3, #1
 801a770:	e009      	b.n	801a786 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801a772:	4b07      	ldr	r3, [pc, #28]	; (801a790 <FLASH_WaitForLastOperation+0xa0>)
 801a774:	691b      	ldr	r3, [r3, #16]
 801a776:	f003 0301 	and.w	r3, r3, #1
 801a77a:	2b01      	cmp	r3, #1
 801a77c:	d102      	bne.n	801a784 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801a77e:	4b04      	ldr	r3, [pc, #16]	; (801a790 <FLASH_WaitForLastOperation+0xa0>)
 801a780:	2201      	movs	r2, #1
 801a782:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801a784:	2300      	movs	r3, #0
}
 801a786:	4618      	mov	r0, r3
 801a788:	3710      	adds	r7, #16
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd80      	pop	{r7, pc}
 801a78e:	bf00      	nop
 801a790:	40022000 	.word	0x40022000
 801a794:	2000000c 	.word	0x2000000c

0801a798 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801a798:	b480      	push	{r7}
 801a79a:	b085      	sub	sp, #20
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801a7a4:	4b0e      	ldr	r3, [pc, #56]	; (801a7e0 <FLASH_Program_DoubleWord+0x48>)
 801a7a6:	695b      	ldr	r3, [r3, #20]
 801a7a8:	4a0d      	ldr	r2, [pc, #52]	; (801a7e0 <FLASH_Program_DoubleWord+0x48>)
 801a7aa:	f043 0301 	orr.w	r3, r3, #1
 801a7ae:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	683a      	ldr	r2, [r7, #0]
 801a7b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801a7b6:	f3bf 8f6f 	isb	sy
}
 801a7ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801a7bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a7c0:	f04f 0200 	mov.w	r2, #0
 801a7c4:	f04f 0300 	mov.w	r3, #0
 801a7c8:	000a      	movs	r2, r1
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	68f9      	ldr	r1, [r7, #12]
 801a7ce:	3104      	adds	r1, #4
 801a7d0:	4613      	mov	r3, r2
 801a7d2:	600b      	str	r3, [r1, #0]
}
 801a7d4:	bf00      	nop
 801a7d6:	3714      	adds	r7, #20
 801a7d8:	46bd      	mov	sp, r7
 801a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7de:	4770      	bx	lr
 801a7e0:	40022000 	.word	0x40022000

0801a7e4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801a7e4:	b480      	push	{r7}
 801a7e6:	b089      	sub	sp, #36	; 0x24
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
 801a7ec:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801a7ee:	2340      	movs	r3, #64	; 0x40
 801a7f0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801a7fa:	4b14      	ldr	r3, [pc, #80]	; (801a84c <FLASH_Program_Fast+0x68>)
 801a7fc:	695b      	ldr	r3, [r3, #20]
 801a7fe:	4a13      	ldr	r2, [pc, #76]	; (801a84c <FLASH_Program_Fast+0x68>)
 801a800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a804:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a806:	f3ef 8310 	mrs	r3, PRIMASK
 801a80a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a80c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801a80e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a810:	b672      	cpsid	i
}
 801a812:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	681a      	ldr	r2, [r3, #0]
 801a818:	69bb      	ldr	r3, [r7, #24]
 801a81a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801a81c:	69bb      	ldr	r3, [r7, #24]
 801a81e:	3304      	adds	r3, #4
 801a820:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801a822:	697b      	ldr	r3, [r7, #20]
 801a824:	3304      	adds	r3, #4
 801a826:	617b      	str	r3, [r7, #20]
    row_index--;
 801a828:	7ffb      	ldrb	r3, [r7, #31]
 801a82a:	3b01      	subs	r3, #1
 801a82c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801a82e:	7ffb      	ldrb	r3, [r7, #31]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d1ef      	bne.n	801a814 <FLASH_Program_Fast+0x30>
 801a834:	693b      	ldr	r3, [r7, #16]
 801a836:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	f383 8810 	msr	PRIMASK, r3
}
 801a83e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801a840:	bf00      	nop
 801a842:	3724      	adds	r7, #36	; 0x24
 801a844:	46bd      	mov	sp, r7
 801a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a84a:	4770      	bx	lr
 801a84c:	40022000 	.word	0x40022000

0801a850 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801a850:	b580      	push	{r7, lr}
 801a852:	b084      	sub	sp, #16
 801a854:	af00      	add	r7, sp, #0
 801a856:	6078      	str	r0, [r7, #4]
 801a858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a85a:	4b48      	ldr	r3, [pc, #288]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a85c:	781b      	ldrb	r3, [r3, #0]
 801a85e:	2b01      	cmp	r3, #1
 801a860:	d101      	bne.n	801a866 <HAL_FLASHEx_Erase+0x16>
 801a862:	2302      	movs	r3, #2
 801a864:	e085      	b.n	801a972 <HAL_FLASHEx_Erase+0x122>
 801a866:	4b45      	ldr	r3, [pc, #276]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a868:	2201      	movs	r2, #1
 801a86a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a86c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a870:	f7ff ff3e 	bl	801a6f0 <FLASH_WaitForLastOperation>
 801a874:	4603      	mov	r3, r0
 801a876:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801a878:	7bfb      	ldrb	r3, [r7, #15]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d175      	bne.n	801a96a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a87e:	4b3f      	ldr	r3, [pc, #252]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a880:	2200      	movs	r2, #0
 801a882:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801a884:	4b3e      	ldr	r3, [pc, #248]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d013      	beq.n	801a8b8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a890:	4b3b      	ldr	r3, [pc, #236]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d009      	beq.n	801a8b0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801a89c:	4b38      	ldr	r3, [pc, #224]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	4a37      	ldr	r2, [pc, #220]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a8a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a8a6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801a8a8:	4b34      	ldr	r3, [pc, #208]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a8aa:	2203      	movs	r2, #3
 801a8ac:	771a      	strb	r2, [r3, #28]
 801a8ae:	e016      	b.n	801a8de <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801a8b0:	4b32      	ldr	r3, [pc, #200]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a8b2:	2201      	movs	r2, #1
 801a8b4:	771a      	strb	r2, [r3, #28]
 801a8b6:	e012      	b.n	801a8de <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a8b8:	4b31      	ldr	r3, [pc, #196]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d009      	beq.n	801a8d8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801a8c4:	4b2e      	ldr	r3, [pc, #184]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	4a2d      	ldr	r2, [pc, #180]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a8ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a8ce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801a8d0:	4b2a      	ldr	r3, [pc, #168]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a8d2:	2202      	movs	r2, #2
 801a8d4:	771a      	strb	r2, [r3, #28]
 801a8d6:	e002      	b.n	801a8de <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801a8d8:	4b28      	ldr	r3, [pc, #160]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a8da:	2200      	movs	r2, #0
 801a8dc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	2b01      	cmp	r3, #1
 801a8e4:	d111      	bne.n	801a90a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	685b      	ldr	r3, [r3, #4]
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	f000 f84a 	bl	801a984 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a8f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a8f4:	f7ff fefc 	bl	801a6f0 <FLASH_WaitForLastOperation>
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801a8fc:	4b20      	ldr	r3, [pc, #128]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a8fe:	695b      	ldr	r3, [r3, #20]
 801a900:	4a1f      	ldr	r2, [pc, #124]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a902:	f023 0304 	bic.w	r3, r3, #4
 801a906:	6153      	str	r3, [r2, #20]
 801a908:	e02d      	b.n	801a966 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801a90a:	683b      	ldr	r3, [r7, #0]
 801a90c:	f04f 32ff 	mov.w	r2, #4294967295
 801a910:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	689b      	ldr	r3, [r3, #8]
 801a916:	60bb      	str	r3, [r7, #8]
 801a918:	e01d      	b.n	801a956 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	685b      	ldr	r3, [r3, #4]
 801a91e:	4619      	mov	r1, r3
 801a920:	68b8      	ldr	r0, [r7, #8]
 801a922:	f000 f84d 	bl	801a9c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a92a:	f7ff fee1 	bl	801a6f0 <FLASH_WaitForLastOperation>
 801a92e:	4603      	mov	r3, r0
 801a930:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801a932:	4b13      	ldr	r3, [pc, #76]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a934:	695b      	ldr	r3, [r3, #20]
 801a936:	4a12      	ldr	r2, [pc, #72]	; (801a980 <HAL_FLASHEx_Erase+0x130>)
 801a938:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801a93c:	f023 0302 	bic.w	r3, r3, #2
 801a940:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801a942:	7bfb      	ldrb	r3, [r7, #15]
 801a944:	2b00      	cmp	r3, #0
 801a946:	d003      	beq.n	801a950 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801a948:	683b      	ldr	r3, [r7, #0]
 801a94a:	68ba      	ldr	r2, [r7, #8]
 801a94c:	601a      	str	r2, [r3, #0]
          break;
 801a94e:	e00a      	b.n	801a966 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	3301      	adds	r3, #1
 801a954:	60bb      	str	r3, [r7, #8]
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	689a      	ldr	r2, [r3, #8]
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	68db      	ldr	r3, [r3, #12]
 801a95e:	4413      	add	r3, r2
 801a960:	68ba      	ldr	r2, [r7, #8]
 801a962:	429a      	cmp	r2, r3
 801a964:	d3d9      	bcc.n	801a91a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801a966:	f000 f84f 	bl	801aa08 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a96a:	4b04      	ldr	r3, [pc, #16]	; (801a97c <HAL_FLASHEx_Erase+0x12c>)
 801a96c:	2200      	movs	r2, #0
 801a96e:	701a      	strb	r2, [r3, #0]

  return status;
 801a970:	7bfb      	ldrb	r3, [r7, #15]
}
 801a972:	4618      	mov	r0, r3
 801a974:	3710      	adds	r7, #16
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}
 801a97a:	bf00      	nop
 801a97c:	2000000c 	.word	0x2000000c
 801a980:	40022000 	.word	0x40022000

0801a984 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801a984:	b480      	push	{r7}
 801a986:	b083      	sub	sp, #12
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	f003 0301 	and.w	r3, r3, #1
 801a992:	2b00      	cmp	r3, #0
 801a994:	d005      	beq.n	801a9a2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801a996:	4b09      	ldr	r3, [pc, #36]	; (801a9bc <FLASH_MassErase+0x38>)
 801a998:	695b      	ldr	r3, [r3, #20]
 801a99a:	4a08      	ldr	r2, [pc, #32]	; (801a9bc <FLASH_MassErase+0x38>)
 801a99c:	f043 0304 	orr.w	r3, r3, #4
 801a9a0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801a9a2:	4b06      	ldr	r3, [pc, #24]	; (801a9bc <FLASH_MassErase+0x38>)
 801a9a4:	695b      	ldr	r3, [r3, #20]
 801a9a6:	4a05      	ldr	r2, [pc, #20]	; (801a9bc <FLASH_MassErase+0x38>)
 801a9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a9ac:	6153      	str	r3, [r2, #20]
}
 801a9ae:	bf00      	nop
 801a9b0:	370c      	adds	r7, #12
 801a9b2:	46bd      	mov	sp, r7
 801a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b8:	4770      	bx	lr
 801a9ba:	bf00      	nop
 801a9bc:	40022000 	.word	0x40022000

0801a9c0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801a9c0:	b480      	push	{r7}
 801a9c2:	b083      	sub	sp, #12
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
 801a9c8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801a9ca:	4b0e      	ldr	r3, [pc, #56]	; (801aa04 <FLASH_PageErase+0x44>)
 801a9cc:	695b      	ldr	r3, [r3, #20]
 801a9ce:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	00db      	lsls	r3, r3, #3
 801a9d6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801a9da:	490a      	ldr	r1, [pc, #40]	; (801aa04 <FLASH_PageErase+0x44>)
 801a9dc:	4313      	orrs	r3, r2
 801a9de:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801a9e0:	4b08      	ldr	r3, [pc, #32]	; (801aa04 <FLASH_PageErase+0x44>)
 801a9e2:	695b      	ldr	r3, [r3, #20]
 801a9e4:	4a07      	ldr	r2, [pc, #28]	; (801aa04 <FLASH_PageErase+0x44>)
 801a9e6:	f043 0302 	orr.w	r3, r3, #2
 801a9ea:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801a9ec:	4b05      	ldr	r3, [pc, #20]	; (801aa04 <FLASH_PageErase+0x44>)
 801a9ee:	695b      	ldr	r3, [r3, #20]
 801a9f0:	4a04      	ldr	r2, [pc, #16]	; (801aa04 <FLASH_PageErase+0x44>)
 801a9f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a9f6:	6153      	str	r3, [r2, #20]
}
 801a9f8:	bf00      	nop
 801a9fa:	370c      	adds	r7, #12
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa02:	4770      	bx	lr
 801aa04:	40022000 	.word	0x40022000

0801aa08 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801aa08:	b480      	push	{r7}
 801aa0a:	b083      	sub	sp, #12
 801aa0c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801aa0e:	4b21      	ldr	r3, [pc, #132]	; (801aa94 <FLASH_FlushCaches+0x8c>)
 801aa10:	7f1b      	ldrb	r3, [r3, #28]
 801aa12:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801aa14:	79fb      	ldrb	r3, [r7, #7]
 801aa16:	2b01      	cmp	r3, #1
 801aa18:	d002      	beq.n	801aa20 <FLASH_FlushCaches+0x18>
 801aa1a:	79fb      	ldrb	r3, [r7, #7]
 801aa1c:	2b03      	cmp	r3, #3
 801aa1e:	d117      	bne.n	801aa50 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801aa20:	4b1d      	ldr	r3, [pc, #116]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	4a1c      	ldr	r2, [pc, #112]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801aa2a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801aa2c:	4b1a      	ldr	r3, [pc, #104]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	4a19      	ldr	r2, [pc, #100]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801aa36:	6013      	str	r3, [r2, #0]
 801aa38:	4b17      	ldr	r3, [pc, #92]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	4a16      	ldr	r2, [pc, #88]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aa42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801aa44:	4b14      	ldr	r3, [pc, #80]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	4a13      	ldr	r2, [pc, #76]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801aa4e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801aa50:	79fb      	ldrb	r3, [r7, #7]
 801aa52:	2b02      	cmp	r3, #2
 801aa54:	d002      	beq.n	801aa5c <FLASH_FlushCaches+0x54>
 801aa56:	79fb      	ldrb	r3, [r7, #7]
 801aa58:	2b03      	cmp	r3, #3
 801aa5a:	d111      	bne.n	801aa80 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801aa5c:	4b0e      	ldr	r3, [pc, #56]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	4a0d      	ldr	r2, [pc, #52]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801aa66:	6013      	str	r3, [r2, #0]
 801aa68:	4b0b      	ldr	r3, [pc, #44]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	4a0a      	ldr	r2, [pc, #40]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aa72:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801aa74:	4b08      	ldr	r3, [pc, #32]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	4a07      	ldr	r2, [pc, #28]	; (801aa98 <FLASH_FlushCaches+0x90>)
 801aa7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801aa7e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801aa80:	4b04      	ldr	r3, [pc, #16]	; (801aa94 <FLASH_FlushCaches+0x8c>)
 801aa82:	2200      	movs	r2, #0
 801aa84:	771a      	strb	r2, [r3, #28]
}
 801aa86:	bf00      	nop
 801aa88:	370c      	adds	r7, #12
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa90:	4770      	bx	lr
 801aa92:	bf00      	nop
 801aa94:	2000000c 	.word	0x2000000c
 801aa98:	40022000 	.word	0x40022000

0801aa9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801aa9c:	b480      	push	{r7}
 801aa9e:	b087      	sub	sp, #28
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
 801aaa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801aaa6:	2300      	movs	r3, #0
 801aaa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801aaaa:	e15a      	b.n	801ad62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	681a      	ldr	r2, [r3, #0]
 801aab0:	2101      	movs	r1, #1
 801aab2:	697b      	ldr	r3, [r7, #20]
 801aab4:	fa01 f303 	lsl.w	r3, r1, r3
 801aab8:	4013      	ands	r3, r2
 801aaba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	f000 814c 	beq.w	801ad5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	685b      	ldr	r3, [r3, #4]
 801aac8:	f003 0303 	and.w	r3, r3, #3
 801aacc:	2b01      	cmp	r3, #1
 801aace:	d005      	beq.n	801aadc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801aad0:	683b      	ldr	r3, [r7, #0]
 801aad2:	685b      	ldr	r3, [r3, #4]
 801aad4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801aad8:	2b02      	cmp	r3, #2
 801aada:	d130      	bne.n	801ab3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	689b      	ldr	r3, [r3, #8]
 801aae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801aae2:	697b      	ldr	r3, [r7, #20]
 801aae4:	005b      	lsls	r3, r3, #1
 801aae6:	2203      	movs	r2, #3
 801aae8:	fa02 f303 	lsl.w	r3, r2, r3
 801aaec:	43db      	mvns	r3, r3
 801aaee:	693a      	ldr	r2, [r7, #16]
 801aaf0:	4013      	ands	r3, r2
 801aaf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	68da      	ldr	r2, [r3, #12]
 801aaf8:	697b      	ldr	r3, [r7, #20]
 801aafa:	005b      	lsls	r3, r3, #1
 801aafc:	fa02 f303 	lsl.w	r3, r2, r3
 801ab00:	693a      	ldr	r2, [r7, #16]
 801ab02:	4313      	orrs	r3, r2
 801ab04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	693a      	ldr	r2, [r7, #16]
 801ab0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ab12:	2201      	movs	r2, #1
 801ab14:	697b      	ldr	r3, [r7, #20]
 801ab16:	fa02 f303 	lsl.w	r3, r2, r3
 801ab1a:	43db      	mvns	r3, r3
 801ab1c:	693a      	ldr	r2, [r7, #16]
 801ab1e:	4013      	ands	r3, r2
 801ab20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ab22:	683b      	ldr	r3, [r7, #0]
 801ab24:	685b      	ldr	r3, [r3, #4]
 801ab26:	091b      	lsrs	r3, r3, #4
 801ab28:	f003 0201 	and.w	r2, r3, #1
 801ab2c:	697b      	ldr	r3, [r7, #20]
 801ab2e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab32:	693a      	ldr	r2, [r7, #16]
 801ab34:	4313      	orrs	r3, r2
 801ab36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	693a      	ldr	r2, [r7, #16]
 801ab3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ab3e:	683b      	ldr	r3, [r7, #0]
 801ab40:	685b      	ldr	r3, [r3, #4]
 801ab42:	f003 0303 	and.w	r3, r3, #3
 801ab46:	2b03      	cmp	r3, #3
 801ab48:	d017      	beq.n	801ab7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	68db      	ldr	r3, [r3, #12]
 801ab4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801ab50:	697b      	ldr	r3, [r7, #20]
 801ab52:	005b      	lsls	r3, r3, #1
 801ab54:	2203      	movs	r2, #3
 801ab56:	fa02 f303 	lsl.w	r3, r2, r3
 801ab5a:	43db      	mvns	r3, r3
 801ab5c:	693a      	ldr	r2, [r7, #16]
 801ab5e:	4013      	ands	r3, r2
 801ab60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ab62:	683b      	ldr	r3, [r7, #0]
 801ab64:	689a      	ldr	r2, [r3, #8]
 801ab66:	697b      	ldr	r3, [r7, #20]
 801ab68:	005b      	lsls	r3, r3, #1
 801ab6a:	fa02 f303 	lsl.w	r3, r2, r3
 801ab6e:	693a      	ldr	r2, [r7, #16]
 801ab70:	4313      	orrs	r3, r2
 801ab72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	693a      	ldr	r2, [r7, #16]
 801ab78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ab7a:	683b      	ldr	r3, [r7, #0]
 801ab7c:	685b      	ldr	r3, [r3, #4]
 801ab7e:	f003 0303 	and.w	r3, r3, #3
 801ab82:	2b02      	cmp	r3, #2
 801ab84:	d123      	bne.n	801abce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	08da      	lsrs	r2, r3, #3
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	3208      	adds	r2, #8
 801ab8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801ab94:	697b      	ldr	r3, [r7, #20]
 801ab96:	f003 0307 	and.w	r3, r3, #7
 801ab9a:	009b      	lsls	r3, r3, #2
 801ab9c:	220f      	movs	r2, #15
 801ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 801aba2:	43db      	mvns	r3, r3
 801aba4:	693a      	ldr	r2, [r7, #16]
 801aba6:	4013      	ands	r3, r2
 801aba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801abaa:	683b      	ldr	r3, [r7, #0]
 801abac:	691a      	ldr	r2, [r3, #16]
 801abae:	697b      	ldr	r3, [r7, #20]
 801abb0:	f003 0307 	and.w	r3, r3, #7
 801abb4:	009b      	lsls	r3, r3, #2
 801abb6:	fa02 f303 	lsl.w	r3, r2, r3
 801abba:	693a      	ldr	r2, [r7, #16]
 801abbc:	4313      	orrs	r3, r2
 801abbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801abc0:	697b      	ldr	r3, [r7, #20]
 801abc2:	08da      	lsrs	r2, r3, #3
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	3208      	adds	r2, #8
 801abc8:	6939      	ldr	r1, [r7, #16]
 801abca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	005b      	lsls	r3, r3, #1
 801abd8:	2203      	movs	r2, #3
 801abda:	fa02 f303 	lsl.w	r3, r2, r3
 801abde:	43db      	mvns	r3, r3
 801abe0:	693a      	ldr	r2, [r7, #16]
 801abe2:	4013      	ands	r3, r2
 801abe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	685b      	ldr	r3, [r3, #4]
 801abea:	f003 0203 	and.w	r2, r3, #3
 801abee:	697b      	ldr	r3, [r7, #20]
 801abf0:	005b      	lsls	r3, r3, #1
 801abf2:	fa02 f303 	lsl.w	r3, r2, r3
 801abf6:	693a      	ldr	r2, [r7, #16]
 801abf8:	4313      	orrs	r3, r2
 801abfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	693a      	ldr	r2, [r7, #16]
 801ac00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801ac02:	683b      	ldr	r3, [r7, #0]
 801ac04:	685b      	ldr	r3, [r3, #4]
 801ac06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	f000 80a6 	beq.w	801ad5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ac10:	4b5b      	ldr	r3, [pc, #364]	; (801ad80 <HAL_GPIO_Init+0x2e4>)
 801ac12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac14:	4a5a      	ldr	r2, [pc, #360]	; (801ad80 <HAL_GPIO_Init+0x2e4>)
 801ac16:	f043 0301 	orr.w	r3, r3, #1
 801ac1a:	6613      	str	r3, [r2, #96]	; 0x60
 801ac1c:	4b58      	ldr	r3, [pc, #352]	; (801ad80 <HAL_GPIO_Init+0x2e4>)
 801ac1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac20:	f003 0301 	and.w	r3, r3, #1
 801ac24:	60bb      	str	r3, [r7, #8]
 801ac26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ac28:	4a56      	ldr	r2, [pc, #344]	; (801ad84 <HAL_GPIO_Init+0x2e8>)
 801ac2a:	697b      	ldr	r3, [r7, #20]
 801ac2c:	089b      	lsrs	r3, r3, #2
 801ac2e:	3302      	adds	r3, #2
 801ac30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ac36:	697b      	ldr	r3, [r7, #20]
 801ac38:	f003 0303 	and.w	r3, r3, #3
 801ac3c:	009b      	lsls	r3, r3, #2
 801ac3e:	220f      	movs	r2, #15
 801ac40:	fa02 f303 	lsl.w	r3, r2, r3
 801ac44:	43db      	mvns	r3, r3
 801ac46:	693a      	ldr	r2, [r7, #16]
 801ac48:	4013      	ands	r3, r2
 801ac4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801ac52:	d01f      	beq.n	801ac94 <HAL_GPIO_Init+0x1f8>
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	4a4c      	ldr	r2, [pc, #304]	; (801ad88 <HAL_GPIO_Init+0x2ec>)
 801ac58:	4293      	cmp	r3, r2
 801ac5a:	d019      	beq.n	801ac90 <HAL_GPIO_Init+0x1f4>
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	4a4b      	ldr	r2, [pc, #300]	; (801ad8c <HAL_GPIO_Init+0x2f0>)
 801ac60:	4293      	cmp	r3, r2
 801ac62:	d013      	beq.n	801ac8c <HAL_GPIO_Init+0x1f0>
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	4a4a      	ldr	r2, [pc, #296]	; (801ad90 <HAL_GPIO_Init+0x2f4>)
 801ac68:	4293      	cmp	r3, r2
 801ac6a:	d00d      	beq.n	801ac88 <HAL_GPIO_Init+0x1ec>
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	4a49      	ldr	r2, [pc, #292]	; (801ad94 <HAL_GPIO_Init+0x2f8>)
 801ac70:	4293      	cmp	r3, r2
 801ac72:	d007      	beq.n	801ac84 <HAL_GPIO_Init+0x1e8>
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	4a48      	ldr	r2, [pc, #288]	; (801ad98 <HAL_GPIO_Init+0x2fc>)
 801ac78:	4293      	cmp	r3, r2
 801ac7a:	d101      	bne.n	801ac80 <HAL_GPIO_Init+0x1e4>
 801ac7c:	2305      	movs	r3, #5
 801ac7e:	e00a      	b.n	801ac96 <HAL_GPIO_Init+0x1fa>
 801ac80:	2306      	movs	r3, #6
 801ac82:	e008      	b.n	801ac96 <HAL_GPIO_Init+0x1fa>
 801ac84:	2304      	movs	r3, #4
 801ac86:	e006      	b.n	801ac96 <HAL_GPIO_Init+0x1fa>
 801ac88:	2303      	movs	r3, #3
 801ac8a:	e004      	b.n	801ac96 <HAL_GPIO_Init+0x1fa>
 801ac8c:	2302      	movs	r3, #2
 801ac8e:	e002      	b.n	801ac96 <HAL_GPIO_Init+0x1fa>
 801ac90:	2301      	movs	r3, #1
 801ac92:	e000      	b.n	801ac96 <HAL_GPIO_Init+0x1fa>
 801ac94:	2300      	movs	r3, #0
 801ac96:	697a      	ldr	r2, [r7, #20]
 801ac98:	f002 0203 	and.w	r2, r2, #3
 801ac9c:	0092      	lsls	r2, r2, #2
 801ac9e:	4093      	lsls	r3, r2
 801aca0:	693a      	ldr	r2, [r7, #16]
 801aca2:	4313      	orrs	r3, r2
 801aca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801aca6:	4937      	ldr	r1, [pc, #220]	; (801ad84 <HAL_GPIO_Init+0x2e8>)
 801aca8:	697b      	ldr	r3, [r7, #20]
 801acaa:	089b      	lsrs	r3, r3, #2
 801acac:	3302      	adds	r3, #2
 801acae:	693a      	ldr	r2, [r7, #16]
 801acb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801acb4:	4b39      	ldr	r3, [pc, #228]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801acb6:	689b      	ldr	r3, [r3, #8]
 801acb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	43db      	mvns	r3, r3
 801acbe:	693a      	ldr	r2, [r7, #16]
 801acc0:	4013      	ands	r3, r2
 801acc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801acc4:	683b      	ldr	r3, [r7, #0]
 801acc6:	685b      	ldr	r3, [r3, #4]
 801acc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801accc:	2b00      	cmp	r3, #0
 801acce:	d003      	beq.n	801acd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801acd0:	693a      	ldr	r2, [r7, #16]
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	4313      	orrs	r3, r2
 801acd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801acd8:	4a30      	ldr	r2, [pc, #192]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801acda:	693b      	ldr	r3, [r7, #16]
 801acdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801acde:	4b2f      	ldr	r3, [pc, #188]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801ace0:	68db      	ldr	r3, [r3, #12]
 801ace2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	43db      	mvns	r3, r3
 801ace8:	693a      	ldr	r2, [r7, #16]
 801acea:	4013      	ands	r3, r2
 801acec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	685b      	ldr	r3, [r3, #4]
 801acf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d003      	beq.n	801ad02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801acfa:	693a      	ldr	r2, [r7, #16]
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	4313      	orrs	r3, r2
 801ad00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801ad02:	4a26      	ldr	r2, [pc, #152]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801ad04:	693b      	ldr	r3, [r7, #16]
 801ad06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801ad08:	4b24      	ldr	r3, [pc, #144]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801ad0a:	685b      	ldr	r3, [r3, #4]
 801ad0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	43db      	mvns	r3, r3
 801ad12:	693a      	ldr	r2, [r7, #16]
 801ad14:	4013      	ands	r3, r2
 801ad16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	685b      	ldr	r3, [r3, #4]
 801ad1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d003      	beq.n	801ad2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801ad24:	693a      	ldr	r2, [r7, #16]
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	4313      	orrs	r3, r2
 801ad2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801ad2c:	4a1b      	ldr	r2, [pc, #108]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801ad2e:	693b      	ldr	r3, [r7, #16]
 801ad30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801ad32:	4b1a      	ldr	r3, [pc, #104]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	43db      	mvns	r3, r3
 801ad3c:	693a      	ldr	r2, [r7, #16]
 801ad3e:	4013      	ands	r3, r2
 801ad40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	685b      	ldr	r3, [r3, #4]
 801ad46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d003      	beq.n	801ad56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801ad4e:	693a      	ldr	r2, [r7, #16]
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	4313      	orrs	r3, r2
 801ad54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801ad56:	4a11      	ldr	r2, [pc, #68]	; (801ad9c <HAL_GPIO_Init+0x300>)
 801ad58:	693b      	ldr	r3, [r7, #16]
 801ad5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801ad5c:	697b      	ldr	r3, [r7, #20]
 801ad5e:	3301      	adds	r3, #1
 801ad60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	681a      	ldr	r2, [r3, #0]
 801ad66:	697b      	ldr	r3, [r7, #20]
 801ad68:	fa22 f303 	lsr.w	r3, r2, r3
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	f47f ae9d 	bne.w	801aaac <HAL_GPIO_Init+0x10>
  }
}
 801ad72:	bf00      	nop
 801ad74:	bf00      	nop
 801ad76:	371c      	adds	r7, #28
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7e:	4770      	bx	lr
 801ad80:	40021000 	.word	0x40021000
 801ad84:	40010000 	.word	0x40010000
 801ad88:	48000400 	.word	0x48000400
 801ad8c:	48000800 	.word	0x48000800
 801ad90:	48000c00 	.word	0x48000c00
 801ad94:	48001000 	.word	0x48001000
 801ad98:	48001400 	.word	0x48001400
 801ad9c:	40010400 	.word	0x40010400

0801ada0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ada0:	b480      	push	{r7}
 801ada2:	b083      	sub	sp, #12
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
 801ada8:	460b      	mov	r3, r1
 801adaa:	807b      	strh	r3, [r7, #2]
 801adac:	4613      	mov	r3, r2
 801adae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801adb0:	787b      	ldrb	r3, [r7, #1]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d003      	beq.n	801adbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801adb6:	887a      	ldrh	r2, [r7, #2]
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801adbc:	e002      	b.n	801adc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801adbe:	887a      	ldrh	r2, [r7, #2]
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 801adc4:	bf00      	nop
 801adc6:	370c      	adds	r7, #12
 801adc8:	46bd      	mov	sp, r7
 801adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adce:	4770      	bx	lr

0801add0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801add0:	b480      	push	{r7}
 801add2:	b085      	sub	sp, #20
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d141      	bne.n	801ae62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801adde:	4b4b      	ldr	r3, [pc, #300]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ade6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801adea:	d131      	bne.n	801ae50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801adec:	4b47      	ldr	r3, [pc, #284]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801adee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801adf2:	4a46      	ldr	r2, [pc, #280]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801adf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801adf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801adfc:	4b43      	ldr	r3, [pc, #268]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ae04:	4a41      	ldr	r2, [pc, #260]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ae0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801ae0c:	4b40      	ldr	r3, [pc, #256]	; (801af10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	2232      	movs	r2, #50	; 0x32
 801ae12:	fb02 f303 	mul.w	r3, r2, r3
 801ae16:	4a3f      	ldr	r2, [pc, #252]	; (801af14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801ae18:	fba2 2303 	umull	r2, r3, r2, r3
 801ae1c:	0c9b      	lsrs	r3, r3, #18
 801ae1e:	3301      	adds	r3, #1
 801ae20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ae22:	e002      	b.n	801ae2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	3b01      	subs	r3, #1
 801ae28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ae2a:	4b38      	ldr	r3, [pc, #224]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae2c:	695b      	ldr	r3, [r3, #20]
 801ae2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ae32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ae36:	d102      	bne.n	801ae3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d1f2      	bne.n	801ae24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ae3e:	4b33      	ldr	r3, [pc, #204]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae40:	695b      	ldr	r3, [r3, #20]
 801ae42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ae46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ae4a:	d158      	bne.n	801aefe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801ae4c:	2303      	movs	r3, #3
 801ae4e:	e057      	b.n	801af00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ae50:	4b2e      	ldr	r3, [pc, #184]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ae56:	4a2d      	ldr	r2, [pc, #180]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ae5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801ae60:	e04d      	b.n	801aefe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ae68:	d141      	bne.n	801aeee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801ae6a:	4b28      	ldr	r3, [pc, #160]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ae72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ae76:	d131      	bne.n	801aedc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ae78:	4b24      	ldr	r3, [pc, #144]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ae7e:	4a23      	ldr	r2, [pc, #140]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ae84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801ae88:	4b20      	ldr	r3, [pc, #128]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ae90:	4a1e      	ldr	r2, [pc, #120]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ae92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ae96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801ae98:	4b1d      	ldr	r3, [pc, #116]	; (801af10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	2232      	movs	r2, #50	; 0x32
 801ae9e:	fb02 f303 	mul.w	r3, r2, r3
 801aea2:	4a1c      	ldr	r2, [pc, #112]	; (801af14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801aea4:	fba2 2303 	umull	r2, r3, r2, r3
 801aea8:	0c9b      	lsrs	r3, r3, #18
 801aeaa:	3301      	adds	r3, #1
 801aeac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801aeae:	e002      	b.n	801aeb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	3b01      	subs	r3, #1
 801aeb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801aeb6:	4b15      	ldr	r3, [pc, #84]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aeb8:	695b      	ldr	r3, [r3, #20]
 801aeba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aec2:	d102      	bne.n	801aeca <HAL_PWREx_ControlVoltageScaling+0xfa>
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d1f2      	bne.n	801aeb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801aeca:	4b10      	ldr	r3, [pc, #64]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aecc:	695b      	ldr	r3, [r3, #20]
 801aece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aed6:	d112      	bne.n	801aefe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801aed8:	2303      	movs	r3, #3
 801aeda:	e011      	b.n	801af00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801aedc:	4b0b      	ldr	r3, [pc, #44]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801aee2:	4a0a      	ldr	r2, [pc, #40]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801aee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801aeec:	e007      	b.n	801aefe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801aeee:	4b07      	ldr	r3, [pc, #28]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801aef6:	4a05      	ldr	r2, [pc, #20]	; (801af0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801aefc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801aefe:	2300      	movs	r3, #0
}
 801af00:	4618      	mov	r0, r3
 801af02:	3714      	adds	r7, #20
 801af04:	46bd      	mov	sp, r7
 801af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0a:	4770      	bx	lr
 801af0c:	40007000 	.word	0x40007000
 801af10:	20000000 	.word	0x20000000
 801af14:	431bde83 	.word	0x431bde83

0801af18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801af18:	b480      	push	{r7}
 801af1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801af1c:	4b05      	ldr	r3, [pc, #20]	; (801af34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801af1e:	689b      	ldr	r3, [r3, #8]
 801af20:	4a04      	ldr	r2, [pc, #16]	; (801af34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801af22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801af26:	6093      	str	r3, [r2, #8]
}
 801af28:	bf00      	nop
 801af2a:	46bd      	mov	sp, r7
 801af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af30:	4770      	bx	lr
 801af32:	bf00      	nop
 801af34:	40007000 	.word	0x40007000

0801af38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b088      	sub	sp, #32
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d101      	bne.n	801af4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801af46:	2301      	movs	r3, #1
 801af48:	e306      	b.n	801b558 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	f003 0301 	and.w	r3, r3, #1
 801af52:	2b00      	cmp	r3, #0
 801af54:	d075      	beq.n	801b042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801af56:	4b97      	ldr	r3, [pc, #604]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801af58:	689b      	ldr	r3, [r3, #8]
 801af5a:	f003 030c 	and.w	r3, r3, #12
 801af5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801af60:	4b94      	ldr	r3, [pc, #592]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801af62:	68db      	ldr	r3, [r3, #12]
 801af64:	f003 0303 	and.w	r3, r3, #3
 801af68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801af6a:	69bb      	ldr	r3, [r7, #24]
 801af6c:	2b0c      	cmp	r3, #12
 801af6e:	d102      	bne.n	801af76 <HAL_RCC_OscConfig+0x3e>
 801af70:	697b      	ldr	r3, [r7, #20]
 801af72:	2b03      	cmp	r3, #3
 801af74:	d002      	beq.n	801af7c <HAL_RCC_OscConfig+0x44>
 801af76:	69bb      	ldr	r3, [r7, #24]
 801af78:	2b08      	cmp	r3, #8
 801af7a:	d10b      	bne.n	801af94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801af7c:	4b8d      	ldr	r3, [pc, #564]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af84:	2b00      	cmp	r3, #0
 801af86:	d05b      	beq.n	801b040 <HAL_RCC_OscConfig+0x108>
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	685b      	ldr	r3, [r3, #4]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d157      	bne.n	801b040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801af90:	2301      	movs	r3, #1
 801af92:	e2e1      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	685b      	ldr	r3, [r3, #4]
 801af98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af9c:	d106      	bne.n	801afac <HAL_RCC_OscConfig+0x74>
 801af9e:	4b85      	ldr	r3, [pc, #532]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	4a84      	ldr	r2, [pc, #528]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afa8:	6013      	str	r3, [r2, #0]
 801afaa:	e01d      	b.n	801afe8 <HAL_RCC_OscConfig+0xb0>
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	685b      	ldr	r3, [r3, #4]
 801afb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801afb4:	d10c      	bne.n	801afd0 <HAL_RCC_OscConfig+0x98>
 801afb6:	4b7f      	ldr	r3, [pc, #508]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	4a7e      	ldr	r2, [pc, #504]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801afc0:	6013      	str	r3, [r2, #0]
 801afc2:	4b7c      	ldr	r3, [pc, #496]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	4a7b      	ldr	r2, [pc, #492]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afcc:	6013      	str	r3, [r2, #0]
 801afce:	e00b      	b.n	801afe8 <HAL_RCC_OscConfig+0xb0>
 801afd0:	4b78      	ldr	r3, [pc, #480]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	4a77      	ldr	r2, [pc, #476]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801afda:	6013      	str	r3, [r2, #0]
 801afdc:	4b75      	ldr	r3, [pc, #468]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	4a74      	ldr	r2, [pc, #464]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801afe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801afe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	685b      	ldr	r3, [r3, #4]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d013      	beq.n	801b018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aff0:	f7fc fd0e 	bl	8017a10 <HAL_GetTick>
 801aff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801aff6:	e008      	b.n	801b00a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801aff8:	f7fc fd0a 	bl	8017a10 <HAL_GetTick>
 801affc:	4602      	mov	r2, r0
 801affe:	693b      	ldr	r3, [r7, #16]
 801b000:	1ad3      	subs	r3, r2, r3
 801b002:	2b64      	cmp	r3, #100	; 0x64
 801b004:	d901      	bls.n	801b00a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801b006:	2303      	movs	r3, #3
 801b008:	e2a6      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b00a:	4b6a      	ldr	r3, [pc, #424]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b012:	2b00      	cmp	r3, #0
 801b014:	d0f0      	beq.n	801aff8 <HAL_RCC_OscConfig+0xc0>
 801b016:	e014      	b.n	801b042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b018:	f7fc fcfa 	bl	8017a10 <HAL_GetTick>
 801b01c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b01e:	e008      	b.n	801b032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b020:	f7fc fcf6 	bl	8017a10 <HAL_GetTick>
 801b024:	4602      	mov	r2, r0
 801b026:	693b      	ldr	r3, [r7, #16]
 801b028:	1ad3      	subs	r3, r2, r3
 801b02a:	2b64      	cmp	r3, #100	; 0x64
 801b02c:	d901      	bls.n	801b032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b02e:	2303      	movs	r3, #3
 801b030:	e292      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801b032:	4b60      	ldr	r3, [pc, #384]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d1f0      	bne.n	801b020 <HAL_RCC_OscConfig+0xe8>
 801b03e:	e000      	b.n	801b042 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	f003 0302 	and.w	r3, r3, #2
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d075      	beq.n	801b13a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b04e:	4b59      	ldr	r3, [pc, #356]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b050:	689b      	ldr	r3, [r3, #8]
 801b052:	f003 030c 	and.w	r3, r3, #12
 801b056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b058:	4b56      	ldr	r3, [pc, #344]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b05a:	68db      	ldr	r3, [r3, #12]
 801b05c:	f003 0303 	and.w	r3, r3, #3
 801b060:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801b062:	69bb      	ldr	r3, [r7, #24]
 801b064:	2b0c      	cmp	r3, #12
 801b066:	d102      	bne.n	801b06e <HAL_RCC_OscConfig+0x136>
 801b068:	697b      	ldr	r3, [r7, #20]
 801b06a:	2b02      	cmp	r3, #2
 801b06c:	d002      	beq.n	801b074 <HAL_RCC_OscConfig+0x13c>
 801b06e:	69bb      	ldr	r3, [r7, #24]
 801b070:	2b04      	cmp	r3, #4
 801b072:	d11f      	bne.n	801b0b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b074:	4b4f      	ldr	r3, [pc, #316]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d005      	beq.n	801b08c <HAL_RCC_OscConfig+0x154>
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	68db      	ldr	r3, [r3, #12]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d101      	bne.n	801b08c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801b088:	2301      	movs	r3, #1
 801b08a:	e265      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b08c:	4b49      	ldr	r3, [pc, #292]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b08e:	685b      	ldr	r3, [r3, #4]
 801b090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	691b      	ldr	r3, [r3, #16]
 801b098:	061b      	lsls	r3, r3, #24
 801b09a:	4946      	ldr	r1, [pc, #280]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b09c:	4313      	orrs	r3, r2
 801b09e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801b0a0:	4b45      	ldr	r3, [pc, #276]	; (801b1b8 <HAL_RCC_OscConfig+0x280>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f7fc fc67 	bl	8017978 <HAL_InitTick>
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d043      	beq.n	801b138 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801b0b0:	2301      	movs	r3, #1
 801b0b2:	e251      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	68db      	ldr	r3, [r3, #12]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d023      	beq.n	801b104 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b0bc:	4b3d      	ldr	r3, [pc, #244]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	4a3c      	ldr	r2, [pc, #240]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b0c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b0c8:	f7fc fca2 	bl	8017a10 <HAL_GetTick>
 801b0cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b0ce:	e008      	b.n	801b0e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b0d0:	f7fc fc9e 	bl	8017a10 <HAL_GetTick>
 801b0d4:	4602      	mov	r2, r0
 801b0d6:	693b      	ldr	r3, [r7, #16]
 801b0d8:	1ad3      	subs	r3, r2, r3
 801b0da:	2b02      	cmp	r3, #2
 801b0dc:	d901      	bls.n	801b0e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801b0de:	2303      	movs	r3, #3
 801b0e0:	e23a      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b0e2:	4b34      	ldr	r3, [pc, #208]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d0f0      	beq.n	801b0d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b0ee:	4b31      	ldr	r3, [pc, #196]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b0f0:	685b      	ldr	r3, [r3, #4]
 801b0f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	691b      	ldr	r3, [r3, #16]
 801b0fa:	061b      	lsls	r3, r3, #24
 801b0fc:	492d      	ldr	r1, [pc, #180]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b0fe:	4313      	orrs	r3, r2
 801b100:	604b      	str	r3, [r1, #4]
 801b102:	e01a      	b.n	801b13a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b104:	4b2b      	ldr	r3, [pc, #172]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	4a2a      	ldr	r2, [pc, #168]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b10a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b110:	f7fc fc7e 	bl	8017a10 <HAL_GetTick>
 801b114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b116:	e008      	b.n	801b12a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b118:	f7fc fc7a 	bl	8017a10 <HAL_GetTick>
 801b11c:	4602      	mov	r2, r0
 801b11e:	693b      	ldr	r3, [r7, #16]
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	2b02      	cmp	r3, #2
 801b124:	d901      	bls.n	801b12a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801b126:	2303      	movs	r3, #3
 801b128:	e216      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801b12a:	4b22      	ldr	r3, [pc, #136]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1f0      	bne.n	801b118 <HAL_RCC_OscConfig+0x1e0>
 801b136:	e000      	b.n	801b13a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	f003 0308 	and.w	r3, r3, #8
 801b142:	2b00      	cmp	r3, #0
 801b144:	d041      	beq.n	801b1ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	695b      	ldr	r3, [r3, #20]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d01c      	beq.n	801b188 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b14e:	4b19      	ldr	r3, [pc, #100]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b154:	4a17      	ldr	r2, [pc, #92]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b156:	f043 0301 	orr.w	r3, r3, #1
 801b15a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b15e:	f7fc fc57 	bl	8017a10 <HAL_GetTick>
 801b162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b164:	e008      	b.n	801b178 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b166:	f7fc fc53 	bl	8017a10 <HAL_GetTick>
 801b16a:	4602      	mov	r2, r0
 801b16c:	693b      	ldr	r3, [r7, #16]
 801b16e:	1ad3      	subs	r3, r2, r3
 801b170:	2b02      	cmp	r3, #2
 801b172:	d901      	bls.n	801b178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801b174:	2303      	movs	r3, #3
 801b176:	e1ef      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801b178:	4b0e      	ldr	r3, [pc, #56]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b17a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b17e:	f003 0302 	and.w	r3, r3, #2
 801b182:	2b00      	cmp	r3, #0
 801b184:	d0ef      	beq.n	801b166 <HAL_RCC_OscConfig+0x22e>
 801b186:	e020      	b.n	801b1ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b188:	4b0a      	ldr	r3, [pc, #40]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b18e:	4a09      	ldr	r2, [pc, #36]	; (801b1b4 <HAL_RCC_OscConfig+0x27c>)
 801b190:	f023 0301 	bic.w	r3, r3, #1
 801b194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b198:	f7fc fc3a 	bl	8017a10 <HAL_GetTick>
 801b19c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b19e:	e00d      	b.n	801b1bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b1a0:	f7fc fc36 	bl	8017a10 <HAL_GetTick>
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	693b      	ldr	r3, [r7, #16]
 801b1a8:	1ad3      	subs	r3, r2, r3
 801b1aa:	2b02      	cmp	r3, #2
 801b1ac:	d906      	bls.n	801b1bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801b1ae:	2303      	movs	r3, #3
 801b1b0:	e1d2      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
 801b1b2:	bf00      	nop
 801b1b4:	40021000 	.word	0x40021000
 801b1b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801b1bc:	4b8c      	ldr	r3, [pc, #560]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b1be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b1c2:	f003 0302 	and.w	r3, r3, #2
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d1ea      	bne.n	801b1a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	f003 0304 	and.w	r3, r3, #4
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	f000 80a6 	beq.w	801b324 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b1d8:	2300      	movs	r3, #0
 801b1da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801b1dc:	4b84      	ldr	r3, [pc, #528]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b1de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b1e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d101      	bne.n	801b1ec <HAL_RCC_OscConfig+0x2b4>
 801b1e8:	2301      	movs	r3, #1
 801b1ea:	e000      	b.n	801b1ee <HAL_RCC_OscConfig+0x2b6>
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d00d      	beq.n	801b20e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b1f2:	4b7f      	ldr	r3, [pc, #508]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b1f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b1f6:	4a7e      	ldr	r2, [pc, #504]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b1fc:	6593      	str	r3, [r2, #88]	; 0x58
 801b1fe:	4b7c      	ldr	r3, [pc, #496]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b206:	60fb      	str	r3, [r7, #12]
 801b208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801b20a:	2301      	movs	r3, #1
 801b20c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b20e:	4b79      	ldr	r3, [pc, #484]	; (801b3f4 <HAL_RCC_OscConfig+0x4bc>)
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b216:	2b00      	cmp	r3, #0
 801b218:	d118      	bne.n	801b24c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b21a:	4b76      	ldr	r3, [pc, #472]	; (801b3f4 <HAL_RCC_OscConfig+0x4bc>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	4a75      	ldr	r2, [pc, #468]	; (801b3f4 <HAL_RCC_OscConfig+0x4bc>)
 801b220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b226:	f7fc fbf3 	bl	8017a10 <HAL_GetTick>
 801b22a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b22c:	e008      	b.n	801b240 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b22e:	f7fc fbef 	bl	8017a10 <HAL_GetTick>
 801b232:	4602      	mov	r2, r0
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	1ad3      	subs	r3, r2, r3
 801b238:	2b02      	cmp	r3, #2
 801b23a:	d901      	bls.n	801b240 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801b23c:	2303      	movs	r3, #3
 801b23e:	e18b      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b240:	4b6c      	ldr	r3, [pc, #432]	; (801b3f4 <HAL_RCC_OscConfig+0x4bc>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d0f0      	beq.n	801b22e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	689b      	ldr	r3, [r3, #8]
 801b250:	2b01      	cmp	r3, #1
 801b252:	d108      	bne.n	801b266 <HAL_RCC_OscConfig+0x32e>
 801b254:	4b66      	ldr	r3, [pc, #408]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b25a:	4a65      	ldr	r2, [pc, #404]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b25c:	f043 0301 	orr.w	r3, r3, #1
 801b260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b264:	e024      	b.n	801b2b0 <HAL_RCC_OscConfig+0x378>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	689b      	ldr	r3, [r3, #8]
 801b26a:	2b05      	cmp	r3, #5
 801b26c:	d110      	bne.n	801b290 <HAL_RCC_OscConfig+0x358>
 801b26e:	4b60      	ldr	r3, [pc, #384]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b274:	4a5e      	ldr	r2, [pc, #376]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b276:	f043 0304 	orr.w	r3, r3, #4
 801b27a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b27e:	4b5c      	ldr	r3, [pc, #368]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b284:	4a5a      	ldr	r2, [pc, #360]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b286:	f043 0301 	orr.w	r3, r3, #1
 801b28a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b28e:	e00f      	b.n	801b2b0 <HAL_RCC_OscConfig+0x378>
 801b290:	4b57      	ldr	r3, [pc, #348]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b296:	4a56      	ldr	r2, [pc, #344]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b298:	f023 0301 	bic.w	r3, r3, #1
 801b29c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b2a0:	4b53      	ldr	r3, [pc, #332]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b2a6:	4a52      	ldr	r2, [pc, #328]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b2a8:	f023 0304 	bic.w	r3, r3, #4
 801b2ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	689b      	ldr	r3, [r3, #8]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d016      	beq.n	801b2e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2b8:	f7fc fbaa 	bl	8017a10 <HAL_GetTick>
 801b2bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b2be:	e00a      	b.n	801b2d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b2c0:	f7fc fba6 	bl	8017a10 <HAL_GetTick>
 801b2c4:	4602      	mov	r2, r0
 801b2c6:	693b      	ldr	r3, [r7, #16]
 801b2c8:	1ad3      	subs	r3, r2, r3
 801b2ca:	f241 3288 	movw	r2, #5000	; 0x1388
 801b2ce:	4293      	cmp	r3, r2
 801b2d0:	d901      	bls.n	801b2d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801b2d2:	2303      	movs	r3, #3
 801b2d4:	e140      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b2d6:	4b46      	ldr	r3, [pc, #280]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b2dc:	f003 0302 	and.w	r3, r3, #2
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d0ed      	beq.n	801b2c0 <HAL_RCC_OscConfig+0x388>
 801b2e4:	e015      	b.n	801b312 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2e6:	f7fc fb93 	bl	8017a10 <HAL_GetTick>
 801b2ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b2ec:	e00a      	b.n	801b304 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b2ee:	f7fc fb8f 	bl	8017a10 <HAL_GetTick>
 801b2f2:	4602      	mov	r2, r0
 801b2f4:	693b      	ldr	r3, [r7, #16]
 801b2f6:	1ad3      	subs	r3, r2, r3
 801b2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 801b2fc:	4293      	cmp	r3, r2
 801b2fe:	d901      	bls.n	801b304 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801b300:	2303      	movs	r3, #3
 801b302:	e129      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b304:	4b3a      	ldr	r3, [pc, #232]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b30a:	f003 0302 	and.w	r3, r3, #2
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d1ed      	bne.n	801b2ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b312:	7ffb      	ldrb	r3, [r7, #31]
 801b314:	2b01      	cmp	r3, #1
 801b316:	d105      	bne.n	801b324 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b318:	4b35      	ldr	r3, [pc, #212]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b31c:	4a34      	ldr	r2, [pc, #208]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b31e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b322:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	f003 0320 	and.w	r3, r3, #32
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d03c      	beq.n	801b3aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	699b      	ldr	r3, [r3, #24]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d01c      	beq.n	801b372 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b338:	4b2d      	ldr	r3, [pc, #180]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b33a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b33e:	4a2c      	ldr	r2, [pc, #176]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b340:	f043 0301 	orr.w	r3, r3, #1
 801b344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b348:	f7fc fb62 	bl	8017a10 <HAL_GetTick>
 801b34c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b34e:	e008      	b.n	801b362 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b350:	f7fc fb5e 	bl	8017a10 <HAL_GetTick>
 801b354:	4602      	mov	r2, r0
 801b356:	693b      	ldr	r3, [r7, #16]
 801b358:	1ad3      	subs	r3, r2, r3
 801b35a:	2b02      	cmp	r3, #2
 801b35c:	d901      	bls.n	801b362 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801b35e:	2303      	movs	r3, #3
 801b360:	e0fa      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b362:	4b23      	ldr	r3, [pc, #140]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b368:	f003 0302 	and.w	r3, r3, #2
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d0ef      	beq.n	801b350 <HAL_RCC_OscConfig+0x418>
 801b370:	e01b      	b.n	801b3aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b372:	4b1f      	ldr	r3, [pc, #124]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b378:	4a1d      	ldr	r2, [pc, #116]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b37a:	f023 0301 	bic.w	r3, r3, #1
 801b37e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b382:	f7fc fb45 	bl	8017a10 <HAL_GetTick>
 801b386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b388:	e008      	b.n	801b39c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b38a:	f7fc fb41 	bl	8017a10 <HAL_GetTick>
 801b38e:	4602      	mov	r2, r0
 801b390:	693b      	ldr	r3, [r7, #16]
 801b392:	1ad3      	subs	r3, r2, r3
 801b394:	2b02      	cmp	r3, #2
 801b396:	d901      	bls.n	801b39c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801b398:	2303      	movs	r3, #3
 801b39a:	e0dd      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b39c:	4b14      	ldr	r3, [pc, #80]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b39e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b3a2:	f003 0302 	and.w	r3, r3, #2
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d1ef      	bne.n	801b38a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	69db      	ldr	r3, [r3, #28]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	f000 80d1 	beq.w	801b556 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801b3b4:	4b0e      	ldr	r3, [pc, #56]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b3b6:	689b      	ldr	r3, [r3, #8]
 801b3b8:	f003 030c 	and.w	r3, r3, #12
 801b3bc:	2b0c      	cmp	r3, #12
 801b3be:	f000 808b 	beq.w	801b4d8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	69db      	ldr	r3, [r3, #28]
 801b3c6:	2b02      	cmp	r3, #2
 801b3c8:	d15e      	bne.n	801b488 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b3ca:	4b09      	ldr	r3, [pc, #36]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	4a08      	ldr	r2, [pc, #32]	; (801b3f0 <HAL_RCC_OscConfig+0x4b8>)
 801b3d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b3d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b3d6:	f7fc fb1b 	bl	8017a10 <HAL_GetTick>
 801b3da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b3dc:	e00c      	b.n	801b3f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b3de:	f7fc fb17 	bl	8017a10 <HAL_GetTick>
 801b3e2:	4602      	mov	r2, r0
 801b3e4:	693b      	ldr	r3, [r7, #16]
 801b3e6:	1ad3      	subs	r3, r2, r3
 801b3e8:	2b02      	cmp	r3, #2
 801b3ea:	d905      	bls.n	801b3f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801b3ec:	2303      	movs	r3, #3
 801b3ee:	e0b3      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
 801b3f0:	40021000 	.word	0x40021000
 801b3f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b3f8:	4b59      	ldr	r3, [pc, #356]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b400:	2b00      	cmp	r3, #0
 801b402:	d1ec      	bne.n	801b3de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b404:	4b56      	ldr	r3, [pc, #344]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b406:	68da      	ldr	r2, [r3, #12]
 801b408:	4b56      	ldr	r3, [pc, #344]	; (801b564 <HAL_RCC_OscConfig+0x62c>)
 801b40a:	4013      	ands	r3, r2
 801b40c:	687a      	ldr	r2, [r7, #4]
 801b40e:	6a11      	ldr	r1, [r2, #32]
 801b410:	687a      	ldr	r2, [r7, #4]
 801b412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b414:	3a01      	subs	r2, #1
 801b416:	0112      	lsls	r2, r2, #4
 801b418:	4311      	orrs	r1, r2
 801b41a:	687a      	ldr	r2, [r7, #4]
 801b41c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b41e:	0212      	lsls	r2, r2, #8
 801b420:	4311      	orrs	r1, r2
 801b422:	687a      	ldr	r2, [r7, #4]
 801b424:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801b426:	0852      	lsrs	r2, r2, #1
 801b428:	3a01      	subs	r2, #1
 801b42a:	0552      	lsls	r2, r2, #21
 801b42c:	4311      	orrs	r1, r2
 801b42e:	687a      	ldr	r2, [r7, #4]
 801b430:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b432:	0852      	lsrs	r2, r2, #1
 801b434:	3a01      	subs	r2, #1
 801b436:	0652      	lsls	r2, r2, #25
 801b438:	4311      	orrs	r1, r2
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b43e:	06d2      	lsls	r2, r2, #27
 801b440:	430a      	orrs	r2, r1
 801b442:	4947      	ldr	r1, [pc, #284]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b444:	4313      	orrs	r3, r2
 801b446:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b448:	4b45      	ldr	r3, [pc, #276]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	4a44      	ldr	r2, [pc, #272]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b44e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b452:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801b454:	4b42      	ldr	r3, [pc, #264]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b456:	68db      	ldr	r3, [r3, #12]
 801b458:	4a41      	ldr	r2, [pc, #260]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b45a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b45e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b460:	f7fc fad6 	bl	8017a10 <HAL_GetTick>
 801b464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b466:	e008      	b.n	801b47a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b468:	f7fc fad2 	bl	8017a10 <HAL_GetTick>
 801b46c:	4602      	mov	r2, r0
 801b46e:	693b      	ldr	r3, [r7, #16]
 801b470:	1ad3      	subs	r3, r2, r3
 801b472:	2b02      	cmp	r3, #2
 801b474:	d901      	bls.n	801b47a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801b476:	2303      	movs	r3, #3
 801b478:	e06e      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b47a:	4b39      	ldr	r3, [pc, #228]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b482:	2b00      	cmp	r3, #0
 801b484:	d0f0      	beq.n	801b468 <HAL_RCC_OscConfig+0x530>
 801b486:	e066      	b.n	801b556 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b488:	4b35      	ldr	r3, [pc, #212]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	4a34      	ldr	r2, [pc, #208]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b48e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b492:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801b494:	4b32      	ldr	r3, [pc, #200]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b496:	68db      	ldr	r3, [r3, #12]
 801b498:	4a31      	ldr	r2, [pc, #196]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b49a:	f023 0303 	bic.w	r3, r3, #3
 801b49e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801b4a0:	4b2f      	ldr	r3, [pc, #188]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b4a2:	68db      	ldr	r3, [r3, #12]
 801b4a4:	4a2e      	ldr	r2, [pc, #184]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b4a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801b4aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b4ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4b0:	f7fc faae 	bl	8017a10 <HAL_GetTick>
 801b4b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b4b6:	e008      	b.n	801b4ca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b4b8:	f7fc faaa 	bl	8017a10 <HAL_GetTick>
 801b4bc:	4602      	mov	r2, r0
 801b4be:	693b      	ldr	r3, [r7, #16]
 801b4c0:	1ad3      	subs	r3, r2, r3
 801b4c2:	2b02      	cmp	r3, #2
 801b4c4:	d901      	bls.n	801b4ca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801b4c6:	2303      	movs	r3, #3
 801b4c8:	e046      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b4ca:	4b25      	ldr	r3, [pc, #148]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d1f0      	bne.n	801b4b8 <HAL_RCC_OscConfig+0x580>
 801b4d6:	e03e      	b.n	801b556 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	69db      	ldr	r3, [r3, #28]
 801b4dc:	2b01      	cmp	r3, #1
 801b4de:	d101      	bne.n	801b4e4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801b4e0:	2301      	movs	r3, #1
 801b4e2:	e039      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801b4e4:	4b1e      	ldr	r3, [pc, #120]	; (801b560 <HAL_RCC_OscConfig+0x628>)
 801b4e6:	68db      	ldr	r3, [r3, #12]
 801b4e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b4ea:	697b      	ldr	r3, [r7, #20]
 801b4ec:	f003 0203 	and.w	r2, r3, #3
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	6a1b      	ldr	r3, [r3, #32]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d12c      	bne.n	801b552 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b4f8:	697b      	ldr	r3, [r7, #20]
 801b4fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b502:	3b01      	subs	r3, #1
 801b504:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b506:	429a      	cmp	r2, r3
 801b508:	d123      	bne.n	801b552 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b50a:	697b      	ldr	r3, [r7, #20]
 801b50c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b514:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b516:	429a      	cmp	r2, r3
 801b518:	d11b      	bne.n	801b552 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b51a:	697b      	ldr	r3, [r7, #20]
 801b51c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b524:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b526:	429a      	cmp	r2, r3
 801b528:	d113      	bne.n	801b552 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b52a:	697b      	ldr	r3, [r7, #20]
 801b52c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b534:	085b      	lsrs	r3, r3, #1
 801b536:	3b01      	subs	r3, #1
 801b538:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b53a:	429a      	cmp	r2, r3
 801b53c:	d109      	bne.n	801b552 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801b53e:	697b      	ldr	r3, [r7, #20]
 801b540:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b548:	085b      	lsrs	r3, r3, #1
 801b54a:	3b01      	subs	r3, #1
 801b54c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b54e:	429a      	cmp	r2, r3
 801b550:	d001      	beq.n	801b556 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801b552:	2301      	movs	r3, #1
 801b554:	e000      	b.n	801b558 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801b556:	2300      	movs	r3, #0
}
 801b558:	4618      	mov	r0, r3
 801b55a:	3720      	adds	r7, #32
 801b55c:	46bd      	mov	sp, r7
 801b55e:	bd80      	pop	{r7, pc}
 801b560:	40021000 	.word	0x40021000
 801b564:	019f800c 	.word	0x019f800c

0801b568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b086      	sub	sp, #24
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
 801b570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801b572:	2300      	movs	r3, #0
 801b574:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d101      	bne.n	801b580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801b57c:	2301      	movs	r3, #1
 801b57e:	e11e      	b.n	801b7be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b580:	4b91      	ldr	r3, [pc, #580]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	f003 030f 	and.w	r3, r3, #15
 801b588:	683a      	ldr	r2, [r7, #0]
 801b58a:	429a      	cmp	r2, r3
 801b58c:	d910      	bls.n	801b5b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b58e:	4b8e      	ldr	r3, [pc, #568]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	f023 020f 	bic.w	r2, r3, #15
 801b596:	498c      	ldr	r1, [pc, #560]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b598:	683b      	ldr	r3, [r7, #0]
 801b59a:	4313      	orrs	r3, r2
 801b59c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b59e:	4b8a      	ldr	r3, [pc, #552]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	f003 030f 	and.w	r3, r3, #15
 801b5a6:	683a      	ldr	r2, [r7, #0]
 801b5a8:	429a      	cmp	r2, r3
 801b5aa:	d001      	beq.n	801b5b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801b5ac:	2301      	movs	r3, #1
 801b5ae:	e106      	b.n	801b7be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	f003 0301 	and.w	r3, r3, #1
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d073      	beq.n	801b6a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	685b      	ldr	r3, [r3, #4]
 801b5c0:	2b03      	cmp	r3, #3
 801b5c2:	d129      	bne.n	801b618 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b5c4:	4b81      	ldr	r3, [pc, #516]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d101      	bne.n	801b5d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801b5d0:	2301      	movs	r3, #1
 801b5d2:	e0f4      	b.n	801b7be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801b5d4:	f000 f99c 	bl	801b910 <RCC_GetSysClockFreqFromPLLSource>
 801b5d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801b5da:	693b      	ldr	r3, [r7, #16]
 801b5dc:	4a7c      	ldr	r2, [pc, #496]	; (801b7d0 <HAL_RCC_ClockConfig+0x268>)
 801b5de:	4293      	cmp	r3, r2
 801b5e0:	d93f      	bls.n	801b662 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b5e2:	4b7a      	ldr	r3, [pc, #488]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b5e4:	689b      	ldr	r3, [r3, #8]
 801b5e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d009      	beq.n	801b602 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d033      	beq.n	801b662 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d12f      	bne.n	801b662 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b602:	4b72      	ldr	r3, [pc, #456]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b604:	689b      	ldr	r3, [r3, #8]
 801b606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b60a:	4a70      	ldr	r2, [pc, #448]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b610:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801b612:	2380      	movs	r3, #128	; 0x80
 801b614:	617b      	str	r3, [r7, #20]
 801b616:	e024      	b.n	801b662 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	685b      	ldr	r3, [r3, #4]
 801b61c:	2b02      	cmp	r3, #2
 801b61e:	d107      	bne.n	801b630 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b620:	4b6a      	ldr	r3, [pc, #424]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d109      	bne.n	801b640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b62c:	2301      	movs	r3, #1
 801b62e:	e0c6      	b.n	801b7be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b630:	4b66      	ldr	r3, [pc, #408]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d101      	bne.n	801b640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b63c:	2301      	movs	r3, #1
 801b63e:	e0be      	b.n	801b7be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801b640:	f000 f8ce 	bl	801b7e0 <HAL_RCC_GetSysClockFreq>
 801b644:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801b646:	693b      	ldr	r3, [r7, #16]
 801b648:	4a61      	ldr	r2, [pc, #388]	; (801b7d0 <HAL_RCC_ClockConfig+0x268>)
 801b64a:	4293      	cmp	r3, r2
 801b64c:	d909      	bls.n	801b662 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b64e:	4b5f      	ldr	r3, [pc, #380]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b650:	689b      	ldr	r3, [r3, #8]
 801b652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b656:	4a5d      	ldr	r2, [pc, #372]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b65c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801b65e:	2380      	movs	r3, #128	; 0x80
 801b660:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b662:	4b5a      	ldr	r3, [pc, #360]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b664:	689b      	ldr	r3, [r3, #8]
 801b666:	f023 0203 	bic.w	r2, r3, #3
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	685b      	ldr	r3, [r3, #4]
 801b66e:	4957      	ldr	r1, [pc, #348]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b670:	4313      	orrs	r3, r2
 801b672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b674:	f7fc f9cc 	bl	8017a10 <HAL_GetTick>
 801b678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b67a:	e00a      	b.n	801b692 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b67c:	f7fc f9c8 	bl	8017a10 <HAL_GetTick>
 801b680:	4602      	mov	r2, r0
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	1ad3      	subs	r3, r2, r3
 801b686:	f241 3288 	movw	r2, #5000	; 0x1388
 801b68a:	4293      	cmp	r3, r2
 801b68c:	d901      	bls.n	801b692 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801b68e:	2303      	movs	r3, #3
 801b690:	e095      	b.n	801b7be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b692:	4b4e      	ldr	r3, [pc, #312]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b694:	689b      	ldr	r3, [r3, #8]
 801b696:	f003 020c 	and.w	r2, r3, #12
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	685b      	ldr	r3, [r3, #4]
 801b69e:	009b      	lsls	r3, r3, #2
 801b6a0:	429a      	cmp	r2, r3
 801b6a2:	d1eb      	bne.n	801b67c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	f003 0302 	and.w	r3, r3, #2
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d023      	beq.n	801b6f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	f003 0304 	and.w	r3, r3, #4
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d005      	beq.n	801b6c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b6bc:	4b43      	ldr	r3, [pc, #268]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b6be:	689b      	ldr	r3, [r3, #8]
 801b6c0:	4a42      	ldr	r2, [pc, #264]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b6c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b6c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	f003 0308 	and.w	r3, r3, #8
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d007      	beq.n	801b6e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801b6d4:	4b3d      	ldr	r3, [pc, #244]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b6d6:	689b      	ldr	r3, [r3, #8]
 801b6d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b6dc:	4a3b      	ldr	r2, [pc, #236]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b6de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b6e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b6e4:	4b39      	ldr	r3, [pc, #228]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b6e6:	689b      	ldr	r3, [r3, #8]
 801b6e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	689b      	ldr	r3, [r3, #8]
 801b6f0:	4936      	ldr	r1, [pc, #216]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b6f2:	4313      	orrs	r3, r2
 801b6f4:	608b      	str	r3, [r1, #8]
 801b6f6:	e008      	b.n	801b70a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	2b80      	cmp	r3, #128	; 0x80
 801b6fc:	d105      	bne.n	801b70a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801b6fe:	4b33      	ldr	r3, [pc, #204]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b700:	689b      	ldr	r3, [r3, #8]
 801b702:	4a32      	ldr	r2, [pc, #200]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b708:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b70a:	4b2f      	ldr	r3, [pc, #188]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	f003 030f 	and.w	r3, r3, #15
 801b712:	683a      	ldr	r2, [r7, #0]
 801b714:	429a      	cmp	r2, r3
 801b716:	d21d      	bcs.n	801b754 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b718:	4b2b      	ldr	r3, [pc, #172]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	f023 020f 	bic.w	r2, r3, #15
 801b720:	4929      	ldr	r1, [pc, #164]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b722:	683b      	ldr	r3, [r7, #0]
 801b724:	4313      	orrs	r3, r2
 801b726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b728:	f7fc f972 	bl	8017a10 <HAL_GetTick>
 801b72c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b72e:	e00a      	b.n	801b746 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b730:	f7fc f96e 	bl	8017a10 <HAL_GetTick>
 801b734:	4602      	mov	r2, r0
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	1ad3      	subs	r3, r2, r3
 801b73a:	f241 3288 	movw	r2, #5000	; 0x1388
 801b73e:	4293      	cmp	r3, r2
 801b740:	d901      	bls.n	801b746 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801b742:	2303      	movs	r3, #3
 801b744:	e03b      	b.n	801b7be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b746:	4b20      	ldr	r3, [pc, #128]	; (801b7c8 <HAL_RCC_ClockConfig+0x260>)
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	f003 030f 	and.w	r3, r3, #15
 801b74e:	683a      	ldr	r2, [r7, #0]
 801b750:	429a      	cmp	r2, r3
 801b752:	d1ed      	bne.n	801b730 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	f003 0304 	and.w	r3, r3, #4
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d008      	beq.n	801b772 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b760:	4b1a      	ldr	r3, [pc, #104]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b762:	689b      	ldr	r3, [r3, #8]
 801b764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	68db      	ldr	r3, [r3, #12]
 801b76c:	4917      	ldr	r1, [pc, #92]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b76e:	4313      	orrs	r3, r2
 801b770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	f003 0308 	and.w	r3, r3, #8
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d009      	beq.n	801b792 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b77e:	4b13      	ldr	r3, [pc, #76]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b780:	689b      	ldr	r3, [r3, #8]
 801b782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	691b      	ldr	r3, [r3, #16]
 801b78a:	00db      	lsls	r3, r3, #3
 801b78c:	490f      	ldr	r1, [pc, #60]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b78e:	4313      	orrs	r3, r2
 801b790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801b792:	f000 f825 	bl	801b7e0 <HAL_RCC_GetSysClockFreq>
 801b796:	4602      	mov	r2, r0
 801b798:	4b0c      	ldr	r3, [pc, #48]	; (801b7cc <HAL_RCC_ClockConfig+0x264>)
 801b79a:	689b      	ldr	r3, [r3, #8]
 801b79c:	091b      	lsrs	r3, r3, #4
 801b79e:	f003 030f 	and.w	r3, r3, #15
 801b7a2:	490c      	ldr	r1, [pc, #48]	; (801b7d4 <HAL_RCC_ClockConfig+0x26c>)
 801b7a4:	5ccb      	ldrb	r3, [r1, r3]
 801b7a6:	f003 031f 	and.w	r3, r3, #31
 801b7aa:	fa22 f303 	lsr.w	r3, r2, r3
 801b7ae:	4a0a      	ldr	r2, [pc, #40]	; (801b7d8 <HAL_RCC_ClockConfig+0x270>)
 801b7b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801b7b2:	4b0a      	ldr	r3, [pc, #40]	; (801b7dc <HAL_RCC_ClockConfig+0x274>)
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7fc f8de 	bl	8017978 <HAL_InitTick>
 801b7bc:	4603      	mov	r3, r0
}
 801b7be:	4618      	mov	r0, r3
 801b7c0:	3718      	adds	r7, #24
 801b7c2:	46bd      	mov	sp, r7
 801b7c4:	bd80      	pop	{r7, pc}
 801b7c6:	bf00      	nop
 801b7c8:	40022000 	.word	0x40022000
 801b7cc:	40021000 	.word	0x40021000
 801b7d0:	04c4b400 	.word	0x04c4b400
 801b7d4:	080222e4 	.word	0x080222e4
 801b7d8:	20000000 	.word	0x20000000
 801b7dc:	20000004 	.word	0x20000004

0801b7e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b7e0:	b480      	push	{r7}
 801b7e2:	b087      	sub	sp, #28
 801b7e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801b7e6:	4b2c      	ldr	r3, [pc, #176]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b7e8:	689b      	ldr	r3, [r3, #8]
 801b7ea:	f003 030c 	and.w	r3, r3, #12
 801b7ee:	2b04      	cmp	r3, #4
 801b7f0:	d102      	bne.n	801b7f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801b7f2:	4b2a      	ldr	r3, [pc, #168]	; (801b89c <HAL_RCC_GetSysClockFreq+0xbc>)
 801b7f4:	613b      	str	r3, [r7, #16]
 801b7f6:	e047      	b.n	801b888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801b7f8:	4b27      	ldr	r3, [pc, #156]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b7fa:	689b      	ldr	r3, [r3, #8]
 801b7fc:	f003 030c 	and.w	r3, r3, #12
 801b800:	2b08      	cmp	r3, #8
 801b802:	d102      	bne.n	801b80a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801b804:	4b25      	ldr	r3, [pc, #148]	; (801b89c <HAL_RCC_GetSysClockFreq+0xbc>)
 801b806:	613b      	str	r3, [r7, #16]
 801b808:	e03e      	b.n	801b888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801b80a:	4b23      	ldr	r3, [pc, #140]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b80c:	689b      	ldr	r3, [r3, #8]
 801b80e:	f003 030c 	and.w	r3, r3, #12
 801b812:	2b0c      	cmp	r3, #12
 801b814:	d136      	bne.n	801b884 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b816:	4b20      	ldr	r3, [pc, #128]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b818:	68db      	ldr	r3, [r3, #12]
 801b81a:	f003 0303 	and.w	r3, r3, #3
 801b81e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b820:	4b1d      	ldr	r3, [pc, #116]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b822:	68db      	ldr	r3, [r3, #12]
 801b824:	091b      	lsrs	r3, r3, #4
 801b826:	f003 030f 	and.w	r3, r3, #15
 801b82a:	3301      	adds	r3, #1
 801b82c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	2b03      	cmp	r3, #3
 801b832:	d10c      	bne.n	801b84e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b834:	4a19      	ldr	r2, [pc, #100]	; (801b89c <HAL_RCC_GetSysClockFreq+0xbc>)
 801b836:	68bb      	ldr	r3, [r7, #8]
 801b838:	fbb2 f3f3 	udiv	r3, r2, r3
 801b83c:	4a16      	ldr	r2, [pc, #88]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b83e:	68d2      	ldr	r2, [r2, #12]
 801b840:	0a12      	lsrs	r2, r2, #8
 801b842:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b846:	fb02 f303 	mul.w	r3, r2, r3
 801b84a:	617b      	str	r3, [r7, #20]
      break;
 801b84c:	e00c      	b.n	801b868 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b84e:	4a13      	ldr	r2, [pc, #76]	; (801b89c <HAL_RCC_GetSysClockFreq+0xbc>)
 801b850:	68bb      	ldr	r3, [r7, #8]
 801b852:	fbb2 f3f3 	udiv	r3, r2, r3
 801b856:	4a10      	ldr	r2, [pc, #64]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b858:	68d2      	ldr	r2, [r2, #12]
 801b85a:	0a12      	lsrs	r2, r2, #8
 801b85c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b860:	fb02 f303 	mul.w	r3, r2, r3
 801b864:	617b      	str	r3, [r7, #20]
      break;
 801b866:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801b868:	4b0b      	ldr	r3, [pc, #44]	; (801b898 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b86a:	68db      	ldr	r3, [r3, #12]
 801b86c:	0e5b      	lsrs	r3, r3, #25
 801b86e:	f003 0303 	and.w	r3, r3, #3
 801b872:	3301      	adds	r3, #1
 801b874:	005b      	lsls	r3, r3, #1
 801b876:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801b878:	697a      	ldr	r2, [r7, #20]
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b880:	613b      	str	r3, [r7, #16]
 801b882:	e001      	b.n	801b888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801b884:	2300      	movs	r3, #0
 801b886:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801b888:	693b      	ldr	r3, [r7, #16]
}
 801b88a:	4618      	mov	r0, r3
 801b88c:	371c      	adds	r7, #28
 801b88e:	46bd      	mov	sp, r7
 801b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b894:	4770      	bx	lr
 801b896:	bf00      	nop
 801b898:	40021000 	.word	0x40021000
 801b89c:	00f42400 	.word	0x00f42400

0801b8a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b8a0:	b480      	push	{r7}
 801b8a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b8a4:	4b03      	ldr	r3, [pc, #12]	; (801b8b4 <HAL_RCC_GetHCLKFreq+0x14>)
 801b8a6:	681b      	ldr	r3, [r3, #0]
}
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	46bd      	mov	sp, r7
 801b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8b0:	4770      	bx	lr
 801b8b2:	bf00      	nop
 801b8b4:	20000000 	.word	0x20000000

0801b8b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801b8bc:	f7ff fff0 	bl	801b8a0 <HAL_RCC_GetHCLKFreq>
 801b8c0:	4602      	mov	r2, r0
 801b8c2:	4b06      	ldr	r3, [pc, #24]	; (801b8dc <HAL_RCC_GetPCLK1Freq+0x24>)
 801b8c4:	689b      	ldr	r3, [r3, #8]
 801b8c6:	0a1b      	lsrs	r3, r3, #8
 801b8c8:	f003 0307 	and.w	r3, r3, #7
 801b8cc:	4904      	ldr	r1, [pc, #16]	; (801b8e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b8ce:	5ccb      	ldrb	r3, [r1, r3]
 801b8d0:	f003 031f 	and.w	r3, r3, #31
 801b8d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b8d8:	4618      	mov	r0, r3
 801b8da:	bd80      	pop	{r7, pc}
 801b8dc:	40021000 	.word	0x40021000
 801b8e0:	080222f4 	.word	0x080222f4

0801b8e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801b8e8:	f7ff ffda 	bl	801b8a0 <HAL_RCC_GetHCLKFreq>
 801b8ec:	4602      	mov	r2, r0
 801b8ee:	4b06      	ldr	r3, [pc, #24]	; (801b908 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b8f0:	689b      	ldr	r3, [r3, #8]
 801b8f2:	0adb      	lsrs	r3, r3, #11
 801b8f4:	f003 0307 	and.w	r3, r3, #7
 801b8f8:	4904      	ldr	r1, [pc, #16]	; (801b90c <HAL_RCC_GetPCLK2Freq+0x28>)
 801b8fa:	5ccb      	ldrb	r3, [r1, r3]
 801b8fc:	f003 031f 	and.w	r3, r3, #31
 801b900:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b904:	4618      	mov	r0, r3
 801b906:	bd80      	pop	{r7, pc}
 801b908:	40021000 	.word	0x40021000
 801b90c:	080222f4 	.word	0x080222f4

0801b910 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801b910:	b480      	push	{r7}
 801b912:	b087      	sub	sp, #28
 801b914:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b916:	4b1e      	ldr	r3, [pc, #120]	; (801b990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b918:	68db      	ldr	r3, [r3, #12]
 801b91a:	f003 0303 	and.w	r3, r3, #3
 801b91e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b920:	4b1b      	ldr	r3, [pc, #108]	; (801b990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b922:	68db      	ldr	r3, [r3, #12]
 801b924:	091b      	lsrs	r3, r3, #4
 801b926:	f003 030f 	and.w	r3, r3, #15
 801b92a:	3301      	adds	r3, #1
 801b92c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801b92e:	693b      	ldr	r3, [r7, #16]
 801b930:	2b03      	cmp	r3, #3
 801b932:	d10c      	bne.n	801b94e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b934:	4a17      	ldr	r2, [pc, #92]	; (801b994 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	fbb2 f3f3 	udiv	r3, r2, r3
 801b93c:	4a14      	ldr	r2, [pc, #80]	; (801b990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b93e:	68d2      	ldr	r2, [r2, #12]
 801b940:	0a12      	lsrs	r2, r2, #8
 801b942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b946:	fb02 f303 	mul.w	r3, r2, r3
 801b94a:	617b      	str	r3, [r7, #20]
    break;
 801b94c:	e00c      	b.n	801b968 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b94e:	4a11      	ldr	r2, [pc, #68]	; (801b994 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	fbb2 f3f3 	udiv	r3, r2, r3
 801b956:	4a0e      	ldr	r2, [pc, #56]	; (801b990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b958:	68d2      	ldr	r2, [r2, #12]
 801b95a:	0a12      	lsrs	r2, r2, #8
 801b95c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b960:	fb02 f303 	mul.w	r3, r2, r3
 801b964:	617b      	str	r3, [r7, #20]
    break;
 801b966:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801b968:	4b09      	ldr	r3, [pc, #36]	; (801b990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b96a:	68db      	ldr	r3, [r3, #12]
 801b96c:	0e5b      	lsrs	r3, r3, #25
 801b96e:	f003 0303 	and.w	r3, r3, #3
 801b972:	3301      	adds	r3, #1
 801b974:	005b      	lsls	r3, r3, #1
 801b976:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801b978:	697a      	ldr	r2, [r7, #20]
 801b97a:	68bb      	ldr	r3, [r7, #8]
 801b97c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b980:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801b982:	687b      	ldr	r3, [r7, #4]
}
 801b984:	4618      	mov	r0, r3
 801b986:	371c      	adds	r7, #28
 801b988:	46bd      	mov	sp, r7
 801b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b98e:	4770      	bx	lr
 801b990:	40021000 	.word	0x40021000
 801b994:	00f42400 	.word	0x00f42400

0801b998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b998:	b580      	push	{r7, lr}
 801b99a:	b086      	sub	sp, #24
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801b9a0:	2300      	movs	r3, #0
 801b9a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	f000 8098 	beq.w	801bae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b9ba:	4b43      	ldr	r3, [pc, #268]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b9be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d10d      	bne.n	801b9e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b9c6:	4b40      	ldr	r3, [pc, #256]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b9ca:	4a3f      	ldr	r2, [pc, #252]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b9cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b9d0:	6593      	str	r3, [r2, #88]	; 0x58
 801b9d2:	4b3d      	ldr	r3, [pc, #244]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b9da:	60bb      	str	r3, [r7, #8]
 801b9dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801b9de:	2301      	movs	r3, #1
 801b9e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b9e2:	4b3a      	ldr	r3, [pc, #232]	; (801bacc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	4a39      	ldr	r2, [pc, #228]	; (801bacc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b9e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b9ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b9ee:	f7fc f80f 	bl	8017a10 <HAL_GetTick>
 801b9f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b9f4:	e009      	b.n	801ba0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b9f6:	f7fc f80b 	bl	8017a10 <HAL_GetTick>
 801b9fa:	4602      	mov	r2, r0
 801b9fc:	68fb      	ldr	r3, [r7, #12]
 801b9fe:	1ad3      	subs	r3, r2, r3
 801ba00:	2b02      	cmp	r3, #2
 801ba02:	d902      	bls.n	801ba0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801ba04:	2303      	movs	r3, #3
 801ba06:	74fb      	strb	r3, [r7, #19]
        break;
 801ba08:	e005      	b.n	801ba16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ba0a:	4b30      	ldr	r3, [pc, #192]	; (801bacc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d0ef      	beq.n	801b9f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801ba16:	7cfb      	ldrb	r3, [r7, #19]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d159      	bne.n	801bad0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801ba1c:	4b2a      	ldr	r3, [pc, #168]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ba26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801ba28:	697b      	ldr	r3, [r7, #20]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d01e      	beq.n	801ba6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ba32:	697a      	ldr	r2, [r7, #20]
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d019      	beq.n	801ba6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801ba38:	4b23      	ldr	r3, [pc, #140]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ba42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801ba44:	4b20      	ldr	r3, [pc, #128]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba4a:	4a1f      	ldr	r2, [pc, #124]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ba50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801ba54:	4b1c      	ldr	r3, [pc, #112]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba5a:	4a1b      	ldr	r2, [pc, #108]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ba60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801ba64:	4a18      	ldr	r2, [pc, #96]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba66:	697b      	ldr	r3, [r7, #20]
 801ba68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801ba6c:	697b      	ldr	r3, [r7, #20]
 801ba6e:	f003 0301 	and.w	r3, r3, #1
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d016      	beq.n	801baa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ba76:	f7fb ffcb 	bl	8017a10 <HAL_GetTick>
 801ba7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ba7c:	e00b      	b.n	801ba96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ba7e:	f7fb ffc7 	bl	8017a10 <HAL_GetTick>
 801ba82:	4602      	mov	r2, r0
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	1ad3      	subs	r3, r2, r3
 801ba88:	f241 3288 	movw	r2, #5000	; 0x1388
 801ba8c:	4293      	cmp	r3, r2
 801ba8e:	d902      	bls.n	801ba96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801ba90:	2303      	movs	r3, #3
 801ba92:	74fb      	strb	r3, [r7, #19]
            break;
 801ba94:	e006      	b.n	801baa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ba96:	4b0c      	ldr	r3, [pc, #48]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ba98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba9c:	f003 0302 	and.w	r3, r3, #2
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d0ec      	beq.n	801ba7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801baa4:	7cfb      	ldrb	r3, [r7, #19]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d10b      	bne.n	801bac2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801baaa:	4b07      	ldr	r3, [pc, #28]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801baac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bab8:	4903      	ldr	r1, [pc, #12]	; (801bac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801baba:	4313      	orrs	r3, r2
 801babc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801bac0:	e008      	b.n	801bad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801bac2:	7cfb      	ldrb	r3, [r7, #19]
 801bac4:	74bb      	strb	r3, [r7, #18]
 801bac6:	e005      	b.n	801bad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801bac8:	40021000 	.word	0x40021000
 801bacc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bad0:	7cfb      	ldrb	r3, [r7, #19]
 801bad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bad4:	7c7b      	ldrb	r3, [r7, #17]
 801bad6:	2b01      	cmp	r3, #1
 801bad8:	d105      	bne.n	801bae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bada:	4ba7      	ldr	r3, [pc, #668]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801badc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bade:	4aa6      	ldr	r2, [pc, #664]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bae4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	f003 0301 	and.w	r3, r3, #1
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d00a      	beq.n	801bb08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801baf2:	4ba1      	ldr	r3, [pc, #644]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801baf8:	f023 0203 	bic.w	r2, r3, #3
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	685b      	ldr	r3, [r3, #4]
 801bb00:	499d      	ldr	r1, [pc, #628]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb02:	4313      	orrs	r3, r2
 801bb04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	f003 0302 	and.w	r3, r3, #2
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d00a      	beq.n	801bb2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bb14:	4b98      	ldr	r3, [pc, #608]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb1a:	f023 020c 	bic.w	r2, r3, #12
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	689b      	ldr	r3, [r3, #8]
 801bb22:	4995      	ldr	r1, [pc, #596]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb24:	4313      	orrs	r3, r2
 801bb26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	f003 0304 	and.w	r3, r3, #4
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d00a      	beq.n	801bb4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801bb36:	4b90      	ldr	r3, [pc, #576]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	68db      	ldr	r3, [r3, #12]
 801bb44:	498c      	ldr	r1, [pc, #560]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb46:	4313      	orrs	r3, r2
 801bb48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	f003 0308 	and.w	r3, r3, #8
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d00a      	beq.n	801bb6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801bb58:	4b87      	ldr	r3, [pc, #540]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	691b      	ldr	r3, [r3, #16]
 801bb66:	4984      	ldr	r1, [pc, #528]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb68:	4313      	orrs	r3, r2
 801bb6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	f003 0310 	and.w	r3, r3, #16
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d00a      	beq.n	801bb90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801bb7a:	4b7f      	ldr	r3, [pc, #508]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	695b      	ldr	r3, [r3, #20]
 801bb88:	497b      	ldr	r1, [pc, #492]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb8a:	4313      	orrs	r3, r2
 801bb8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	f003 0320 	and.w	r3, r3, #32
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d00a      	beq.n	801bbb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bb9c:	4b76      	ldr	r3, [pc, #472]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bba2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	699b      	ldr	r3, [r3, #24]
 801bbaa:	4973      	ldr	r1, [pc, #460]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbac:	4313      	orrs	r3, r2
 801bbae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d00a      	beq.n	801bbd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bbbe:	4b6e      	ldr	r3, [pc, #440]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	69db      	ldr	r3, [r3, #28]
 801bbcc:	496a      	ldr	r1, [pc, #424]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbce:	4313      	orrs	r3, r2
 801bbd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d00a      	beq.n	801bbf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801bbe0:	4b65      	ldr	r3, [pc, #404]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbe6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	6a1b      	ldr	r3, [r3, #32]
 801bbee:	4962      	ldr	r1, [pc, #392]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbf0:	4313      	orrs	r3, r2
 801bbf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d00a      	beq.n	801bc18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801bc02:	4b5d      	ldr	r3, [pc, #372]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc10:	4959      	ldr	r1, [pc, #356]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc12:	4313      	orrs	r3, r2
 801bc14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d00a      	beq.n	801bc3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801bc24:	4b54      	ldr	r3, [pc, #336]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc2a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc32:	4951      	ldr	r1, [pc, #324]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc34:	4313      	orrs	r3, r2
 801bc36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d015      	beq.n	801bc72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bc46:	4b4c      	ldr	r3, [pc, #304]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc54:	4948      	ldr	r1, [pc, #288]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc56:	4313      	orrs	r3, r2
 801bc58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bc64:	d105      	bne.n	801bc72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bc66:	4b44      	ldr	r3, [pc, #272]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc68:	68db      	ldr	r3, [r3, #12]
 801bc6a:	4a43      	ldr	r2, [pc, #268]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bc70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d015      	beq.n	801bcaa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801bc7e:	4b3e      	ldr	r3, [pc, #248]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc8c:	493a      	ldr	r1, [pc, #232]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bc8e:	4313      	orrs	r3, r2
 801bc90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bc9c:	d105      	bne.n	801bcaa <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bc9e:	4b36      	ldr	r3, [pc, #216]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bca0:	68db      	ldr	r3, [r3, #12]
 801bca2:	4a35      	ldr	r2, [pc, #212]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bca8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d015      	beq.n	801bce2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801bcb6:	4b30      	ldr	r3, [pc, #192]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bcbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcc4:	492c      	ldr	r1, [pc, #176]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcc6:	4313      	orrs	r3, r2
 801bcc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bcd4:	d105      	bne.n	801bce2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bcd6:	4b28      	ldr	r3, [pc, #160]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcd8:	68db      	ldr	r3, [r3, #12]
 801bcda:	4a27      	ldr	r2, [pc, #156]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bce0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d015      	beq.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801bcee:	4b22      	ldr	r3, [pc, #136]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bcf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bcfc:	491e      	ldr	r1, [pc, #120]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bcfe:	4313      	orrs	r3, r2
 801bd00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bd0c:	d105      	bne.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bd0e:	4b1a      	ldr	r3, [pc, #104]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd10:	68db      	ldr	r3, [r3, #12]
 801bd12:	4a19      	ldr	r2, [pc, #100]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bd18:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d015      	beq.n	801bd52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801bd26:	4b14      	ldr	r3, [pc, #80]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd34:	4910      	ldr	r1, [pc, #64]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd36:	4313      	orrs	r3, r2
 801bd38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bd44:	d105      	bne.n	801bd52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bd46:	4b0c      	ldr	r3, [pc, #48]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd48:	68db      	ldr	r3, [r3, #12]
 801bd4a:	4a0b      	ldr	r2, [pc, #44]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bd50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d018      	beq.n	801bd90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801bd5e:	4b06      	ldr	r3, [pc, #24]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd6c:	4902      	ldr	r1, [pc, #8]	; (801bd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bd6e:	4313      	orrs	r3, r2
 801bd70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	e001      	b.n	801bd7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801bd78:	40021000 	.word	0x40021000
 801bd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801bd82:	d105      	bne.n	801bd90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bd84:	4b21      	ldr	r3, [pc, #132]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bd86:	68db      	ldr	r3, [r3, #12]
 801bd88:	4a20      	ldr	r2, [pc, #128]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bd8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bd8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d015      	beq.n	801bdc8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801bd9c:	4b1b      	ldr	r3, [pc, #108]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bda2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bdaa:	4918      	ldr	r1, [pc, #96]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bdac:	4313      	orrs	r3, r2
 801bdae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bdb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bdba:	d105      	bne.n	801bdc8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bdbc:	4b13      	ldr	r3, [pc, #76]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bdbe:	68db      	ldr	r3, [r3, #12]
 801bdc0:	4a12      	ldr	r2, [pc, #72]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bdc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bdc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d015      	beq.n	801be00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801bdd4:	4b0d      	ldr	r3, [pc, #52]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bdd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bdda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bde2:	490a      	ldr	r1, [pc, #40]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bde4:	4313      	orrs	r3, r2
 801bde6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bdee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bdf2:	d105      	bne.n	801be00 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bdf4:	4b05      	ldr	r3, [pc, #20]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bdf6:	68db      	ldr	r3, [r3, #12]
 801bdf8:	4a04      	ldr	r2, [pc, #16]	; (801be0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bdfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bdfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801be00:	7cbb      	ldrb	r3, [r7, #18]
}
 801be02:	4618      	mov	r0, r3
 801be04:	3718      	adds	r7, #24
 801be06:	46bd      	mov	sp, r7
 801be08:	bd80      	pop	{r7, pc}
 801be0a:	bf00      	nop
 801be0c:	40021000 	.word	0x40021000

0801be10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b084      	sub	sp, #16
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d101      	bne.n	801be22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801be1e:	2301      	movs	r3, #1
 801be20:	e09d      	b.n	801bf5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be26:	2b00      	cmp	r3, #0
 801be28:	d108      	bne.n	801be3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	685b      	ldr	r3, [r3, #4]
 801be2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801be32:	d009      	beq.n	801be48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	2200      	movs	r2, #0
 801be38:	61da      	str	r2, [r3, #28]
 801be3a:	e005      	b.n	801be48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	2200      	movs	r2, #0
 801be40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	2200      	movs	r2, #0
 801be46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	2200      	movs	r2, #0
 801be4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801be54:	b2db      	uxtb	r3, r3
 801be56:	2b00      	cmp	r3, #0
 801be58:	d106      	bne.n	801be68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	2200      	movs	r2, #0
 801be5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801be62:	6878      	ldr	r0, [r7, #4]
 801be64:	f7fa fc96 	bl	8016794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	2202      	movs	r2, #2
 801be6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	681a      	ldr	r2, [r3, #0]
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801be7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	68db      	ldr	r3, [r3, #12]
 801be84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801be88:	d902      	bls.n	801be90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801be8a:	2300      	movs	r3, #0
 801be8c:	60fb      	str	r3, [r7, #12]
 801be8e:	e002      	b.n	801be96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801be90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801be94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	68db      	ldr	r3, [r3, #12]
 801be9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801be9e:	d007      	beq.n	801beb0 <HAL_SPI_Init+0xa0>
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	68db      	ldr	r3, [r3, #12]
 801bea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bea8:	d002      	beq.n	801beb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	2200      	movs	r2, #0
 801beae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	685b      	ldr	r3, [r3, #4]
 801beb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	689b      	ldr	r3, [r3, #8]
 801bebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801bec0:	431a      	orrs	r2, r3
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	691b      	ldr	r3, [r3, #16]
 801bec6:	f003 0302 	and.w	r3, r3, #2
 801beca:	431a      	orrs	r2, r3
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	695b      	ldr	r3, [r3, #20]
 801bed0:	f003 0301 	and.w	r3, r3, #1
 801bed4:	431a      	orrs	r2, r3
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	699b      	ldr	r3, [r3, #24]
 801beda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bede:	431a      	orrs	r2, r3
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	69db      	ldr	r3, [r3, #28]
 801bee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bee8:	431a      	orrs	r2, r3
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	6a1b      	ldr	r3, [r3, #32]
 801beee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bef2:	ea42 0103 	orr.w	r1, r2, r3
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801befa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	430a      	orrs	r2, r1
 801bf04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	699b      	ldr	r3, [r3, #24]
 801bf0a:	0c1b      	lsrs	r3, r3, #16
 801bf0c:	f003 0204 	and.w	r2, r3, #4
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf14:	f003 0310 	and.w	r3, r3, #16
 801bf18:	431a      	orrs	r2, r3
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf1e:	f003 0308 	and.w	r3, r3, #8
 801bf22:	431a      	orrs	r2, r3
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	68db      	ldr	r3, [r3, #12]
 801bf28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801bf2c:	ea42 0103 	orr.w	r1, r2, r3
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	430a      	orrs	r2, r1
 801bf3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	69da      	ldr	r2, [r3, #28]
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bf4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	2200      	movs	r2, #0
 801bf52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	2201      	movs	r2, #1
 801bf58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801bf5c:	2300      	movs	r3, #0
}
 801bf5e:	4618      	mov	r0, r3
 801bf60:	3710      	adds	r7, #16
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bd80      	pop	{r7, pc}

0801bf66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bf66:	b580      	push	{r7, lr}
 801bf68:	b088      	sub	sp, #32
 801bf6a:	af00      	add	r7, sp, #0
 801bf6c:	60f8      	str	r0, [r7, #12]
 801bf6e:	60b9      	str	r1, [r7, #8]
 801bf70:	603b      	str	r3, [r7, #0]
 801bf72:	4613      	mov	r3, r2
 801bf74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801bf76:	2300      	movs	r3, #0
 801bf78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801bf80:	2b01      	cmp	r3, #1
 801bf82:	d101      	bne.n	801bf88 <HAL_SPI_Transmit+0x22>
 801bf84:	2302      	movs	r3, #2
 801bf86:	e158      	b.n	801c23a <HAL_SPI_Transmit+0x2d4>
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	2201      	movs	r2, #1
 801bf8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801bf90:	f7fb fd3e 	bl	8017a10 <HAL_GetTick>
 801bf94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801bf96:	88fb      	ldrh	r3, [r7, #6]
 801bf98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801bfa0:	b2db      	uxtb	r3, r3
 801bfa2:	2b01      	cmp	r3, #1
 801bfa4:	d002      	beq.n	801bfac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801bfa6:	2302      	movs	r3, #2
 801bfa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 801bfaa:	e13d      	b.n	801c228 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801bfac:	68bb      	ldr	r3, [r7, #8]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d002      	beq.n	801bfb8 <HAL_SPI_Transmit+0x52>
 801bfb2:	88fb      	ldrh	r3, [r7, #6]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d102      	bne.n	801bfbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801bfb8:	2301      	movs	r3, #1
 801bfba:	77fb      	strb	r3, [r7, #31]
    goto error;
 801bfbc:	e134      	b.n	801c228 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	2203      	movs	r2, #3
 801bfc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	2200      	movs	r2, #0
 801bfca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	68ba      	ldr	r2, [r7, #8]
 801bfd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	88fa      	ldrh	r2, [r7, #6]
 801bfd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	88fa      	ldrh	r2, [r7, #6]
 801bfdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	2200      	movs	r2, #0
 801bfe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	2200      	movs	r2, #0
 801bff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	2200      	movs	r2, #0
 801bff8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	2200      	movs	r2, #0
 801bffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	689b      	ldr	r3, [r3, #8]
 801c004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c008:	d10f      	bne.n	801c02a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	681a      	ldr	r2, [r3, #0]
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	681a      	ldr	r2, [r3, #0]
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c034:	2b40      	cmp	r3, #64	; 0x40
 801c036:	d007      	beq.n	801c048 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	681a      	ldr	r2, [r3, #0]
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	68db      	ldr	r3, [r3, #12]
 801c04c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c050:	d94b      	bls.n	801c0ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	685b      	ldr	r3, [r3, #4]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d002      	beq.n	801c060 <HAL_SPI_Transmit+0xfa>
 801c05a:	8afb      	ldrh	r3, [r7, #22]
 801c05c:	2b01      	cmp	r3, #1
 801c05e:	d13e      	bne.n	801c0de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c064:	881a      	ldrh	r2, [r3, #0]
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c070:	1c9a      	adds	r2, r3, #2
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c07a:	b29b      	uxth	r3, r3
 801c07c:	3b01      	subs	r3, #1
 801c07e:	b29a      	uxth	r2, r3
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c084:	e02b      	b.n	801c0de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	689b      	ldr	r3, [r3, #8]
 801c08c:	f003 0302 	and.w	r3, r3, #2
 801c090:	2b02      	cmp	r3, #2
 801c092:	d112      	bne.n	801c0ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c098:	881a      	ldrh	r2, [r3, #0]
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0a4:	1c9a      	adds	r2, r3, #2
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c0ae:	b29b      	uxth	r3, r3
 801c0b0:	3b01      	subs	r3, #1
 801c0b2:	b29a      	uxth	r2, r3
 801c0b4:	68fb      	ldr	r3, [r7, #12]
 801c0b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c0b8:	e011      	b.n	801c0de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c0ba:	f7fb fca9 	bl	8017a10 <HAL_GetTick>
 801c0be:	4602      	mov	r2, r0
 801c0c0:	69bb      	ldr	r3, [r7, #24]
 801c0c2:	1ad3      	subs	r3, r2, r3
 801c0c4:	683a      	ldr	r2, [r7, #0]
 801c0c6:	429a      	cmp	r2, r3
 801c0c8:	d803      	bhi.n	801c0d2 <HAL_SPI_Transmit+0x16c>
 801c0ca:	683b      	ldr	r3, [r7, #0]
 801c0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0d0:	d102      	bne.n	801c0d8 <HAL_SPI_Transmit+0x172>
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d102      	bne.n	801c0de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801c0d8:	2303      	movs	r3, #3
 801c0da:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c0dc:	e0a4      	b.n	801c228 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c0e2:	b29b      	uxth	r3, r3
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d1ce      	bne.n	801c086 <HAL_SPI_Transmit+0x120>
 801c0e8:	e07c      	b.n	801c1e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	685b      	ldr	r3, [r3, #4]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d002      	beq.n	801c0f8 <HAL_SPI_Transmit+0x192>
 801c0f2:	8afb      	ldrh	r3, [r7, #22]
 801c0f4:	2b01      	cmp	r3, #1
 801c0f6:	d170      	bne.n	801c1da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c0fc:	b29b      	uxth	r3, r3
 801c0fe:	2b01      	cmp	r3, #1
 801c100:	d912      	bls.n	801c128 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c106:	881a      	ldrh	r2, [r3, #0]
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c112:	1c9a      	adds	r2, r3, #2
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c11c:	b29b      	uxth	r3, r3
 801c11e:	3b02      	subs	r3, #2
 801c120:	b29a      	uxth	r2, r3
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c126:	e058      	b.n	801c1da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	330c      	adds	r3, #12
 801c132:	7812      	ldrb	r2, [r2, #0]
 801c134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c13a:	1c5a      	adds	r2, r3, #1
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c144:	b29b      	uxth	r3, r3
 801c146:	3b01      	subs	r3, #1
 801c148:	b29a      	uxth	r2, r3
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801c14e:	e044      	b.n	801c1da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	689b      	ldr	r3, [r3, #8]
 801c156:	f003 0302 	and.w	r3, r3, #2
 801c15a:	2b02      	cmp	r3, #2
 801c15c:	d12b      	bne.n	801c1b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c162:	b29b      	uxth	r3, r3
 801c164:	2b01      	cmp	r3, #1
 801c166:	d912      	bls.n	801c18e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c16c:	881a      	ldrh	r2, [r3, #0]
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c178:	1c9a      	adds	r2, r3, #2
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c182:	b29b      	uxth	r3, r3
 801c184:	3b02      	subs	r3, #2
 801c186:	b29a      	uxth	r2, r3
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c18c:	e025      	b.n	801c1da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	330c      	adds	r3, #12
 801c198:	7812      	ldrb	r2, [r2, #0]
 801c19a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1a0:	1c5a      	adds	r2, r3, #1
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c1aa:	b29b      	uxth	r3, r3
 801c1ac:	3b01      	subs	r3, #1
 801c1ae:	b29a      	uxth	r2, r3
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c1b4:	e011      	b.n	801c1da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c1b6:	f7fb fc2b 	bl	8017a10 <HAL_GetTick>
 801c1ba:	4602      	mov	r2, r0
 801c1bc:	69bb      	ldr	r3, [r7, #24]
 801c1be:	1ad3      	subs	r3, r2, r3
 801c1c0:	683a      	ldr	r2, [r7, #0]
 801c1c2:	429a      	cmp	r2, r3
 801c1c4:	d803      	bhi.n	801c1ce <HAL_SPI_Transmit+0x268>
 801c1c6:	683b      	ldr	r3, [r7, #0]
 801c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1cc:	d102      	bne.n	801c1d4 <HAL_SPI_Transmit+0x26e>
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d102      	bne.n	801c1da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801c1d4:	2303      	movs	r3, #3
 801c1d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c1d8:	e026      	b.n	801c228 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c1de:	b29b      	uxth	r3, r3
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d1b5      	bne.n	801c150 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c1e4:	69ba      	ldr	r2, [r7, #24]
 801c1e6:	6839      	ldr	r1, [r7, #0]
 801c1e8:	68f8      	ldr	r0, [r7, #12]
 801c1ea:	f000 fce3 	bl	801cbb4 <SPI_EndRxTxTransaction>
 801c1ee:	4603      	mov	r3, r0
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d002      	beq.n	801c1fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	2220      	movs	r2, #32
 801c1f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	689b      	ldr	r3, [r3, #8]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d10a      	bne.n	801c218 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c202:	2300      	movs	r3, #0
 801c204:	613b      	str	r3, [r7, #16]
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	68db      	ldr	r3, [r3, #12]
 801c20c:	613b      	str	r3, [r7, #16]
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	689b      	ldr	r3, [r3, #8]
 801c214:	613b      	str	r3, [r7, #16]
 801c216:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d002      	beq.n	801c226 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801c220:	2301      	movs	r3, #1
 801c222:	77fb      	strb	r3, [r7, #31]
 801c224:	e000      	b.n	801c228 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801c226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	2201      	movs	r2, #1
 801c22c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	2200      	movs	r2, #0
 801c234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c238:	7ffb      	ldrb	r3, [r7, #31]
}
 801c23a:	4618      	mov	r0, r3
 801c23c:	3720      	adds	r7, #32
 801c23e:	46bd      	mov	sp, r7
 801c240:	bd80      	pop	{r7, pc}

0801c242 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c242:	b580      	push	{r7, lr}
 801c244:	b088      	sub	sp, #32
 801c246:	af02      	add	r7, sp, #8
 801c248:	60f8      	str	r0, [r7, #12]
 801c24a:	60b9      	str	r1, [r7, #8]
 801c24c:	603b      	str	r3, [r7, #0]
 801c24e:	4613      	mov	r3, r2
 801c250:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c252:	2300      	movs	r3, #0
 801c254:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	685b      	ldr	r3, [r3, #4]
 801c25a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c25e:	d112      	bne.n	801c286 <HAL_SPI_Receive+0x44>
 801c260:	68fb      	ldr	r3, [r7, #12]
 801c262:	689b      	ldr	r3, [r3, #8]
 801c264:	2b00      	cmp	r3, #0
 801c266:	d10e      	bne.n	801c286 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	2204      	movs	r2, #4
 801c26c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c270:	88fa      	ldrh	r2, [r7, #6]
 801c272:	683b      	ldr	r3, [r7, #0]
 801c274:	9300      	str	r3, [sp, #0]
 801c276:	4613      	mov	r3, r2
 801c278:	68ba      	ldr	r2, [r7, #8]
 801c27a:	68b9      	ldr	r1, [r7, #8]
 801c27c:	68f8      	ldr	r0, [r7, #12]
 801c27e:	f000 f910 	bl	801c4a2 <HAL_SPI_TransmitReceive>
 801c282:	4603      	mov	r3, r0
 801c284:	e109      	b.n	801c49a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c28c:	2b01      	cmp	r3, #1
 801c28e:	d101      	bne.n	801c294 <HAL_SPI_Receive+0x52>
 801c290:	2302      	movs	r3, #2
 801c292:	e102      	b.n	801c49a <HAL_SPI_Receive+0x258>
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	2201      	movs	r2, #1
 801c298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c29c:	f7fb fbb8 	bl	8017a10 <HAL_GetTick>
 801c2a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c2a8:	b2db      	uxtb	r3, r3
 801c2aa:	2b01      	cmp	r3, #1
 801c2ac:	d002      	beq.n	801c2b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c2ae:	2302      	movs	r3, #2
 801c2b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c2b2:	e0e9      	b.n	801c488 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801c2b4:	68bb      	ldr	r3, [r7, #8]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d002      	beq.n	801c2c0 <HAL_SPI_Receive+0x7e>
 801c2ba:	88fb      	ldrh	r3, [r7, #6]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d102      	bne.n	801c2c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c2c0:	2301      	movs	r3, #1
 801c2c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c2c4:	e0e0      	b.n	801c488 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	2204      	movs	r2, #4
 801c2ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	68ba      	ldr	r2, [r7, #8]
 801c2d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	88fa      	ldrh	r2, [r7, #6]
 801c2de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801c2e2:	68fb      	ldr	r3, [r7, #12]
 801c2e4:	88fa      	ldrh	r2, [r7, #6]
 801c2e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	2200      	movs	r2, #0
 801c2ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	2200      	movs	r2, #0
 801c300:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	2200      	movs	r2, #0
 801c306:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	68db      	ldr	r3, [r3, #12]
 801c30c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c310:	d908      	bls.n	801c324 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	685a      	ldr	r2, [r3, #4]
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c320:	605a      	str	r2, [r3, #4]
 801c322:	e007      	b.n	801c334 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	685a      	ldr	r2, [r3, #4]
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c332:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	689b      	ldr	r3, [r3, #8]
 801c338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c33c:	d10f      	bne.n	801c35e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c33e:	68fb      	ldr	r3, [r7, #12]
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	681a      	ldr	r2, [r3, #0]
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c34c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	681a      	ldr	r2, [r3, #0]
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c35c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c368:	2b40      	cmp	r3, #64	; 0x40
 801c36a:	d007      	beq.n	801c37c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	681a      	ldr	r2, [r3, #0]
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c37a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	68db      	ldr	r3, [r3, #12]
 801c380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c384:	d867      	bhi.n	801c456 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c386:	e030      	b.n	801c3ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	689b      	ldr	r3, [r3, #8]
 801c38e:	f003 0301 	and.w	r3, r3, #1
 801c392:	2b01      	cmp	r3, #1
 801c394:	d117      	bne.n	801c3c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	f103 020c 	add.w	r2, r3, #12
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3a2:	7812      	ldrb	r2, [r2, #0]
 801c3a4:	b2d2      	uxtb	r2, r2
 801c3a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3ac:	1c5a      	adds	r2, r3, #1
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	3b01      	subs	r3, #1
 801c3bc:	b29a      	uxth	r2, r3
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c3c4:	e011      	b.n	801c3ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c3c6:	f7fb fb23 	bl	8017a10 <HAL_GetTick>
 801c3ca:	4602      	mov	r2, r0
 801c3cc:	693b      	ldr	r3, [r7, #16]
 801c3ce:	1ad3      	subs	r3, r2, r3
 801c3d0:	683a      	ldr	r2, [r7, #0]
 801c3d2:	429a      	cmp	r2, r3
 801c3d4:	d803      	bhi.n	801c3de <HAL_SPI_Receive+0x19c>
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3dc:	d102      	bne.n	801c3e4 <HAL_SPI_Receive+0x1a2>
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d102      	bne.n	801c3ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801c3e4:	2303      	movs	r3, #3
 801c3e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c3e8:	e04e      	b.n	801c488 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c3f0:	b29b      	uxth	r3, r3
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d1c8      	bne.n	801c388 <HAL_SPI_Receive+0x146>
 801c3f6:	e034      	b.n	801c462 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	689b      	ldr	r3, [r3, #8]
 801c3fe:	f003 0301 	and.w	r3, r3, #1
 801c402:	2b01      	cmp	r3, #1
 801c404:	d115      	bne.n	801c432 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	68da      	ldr	r2, [r3, #12]
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c410:	b292      	uxth	r2, r2
 801c412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c418:	1c9a      	adds	r2, r3, #2
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c424:	b29b      	uxth	r3, r3
 801c426:	3b01      	subs	r3, #1
 801c428:	b29a      	uxth	r2, r3
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c430:	e011      	b.n	801c456 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c432:	f7fb faed 	bl	8017a10 <HAL_GetTick>
 801c436:	4602      	mov	r2, r0
 801c438:	693b      	ldr	r3, [r7, #16]
 801c43a:	1ad3      	subs	r3, r2, r3
 801c43c:	683a      	ldr	r2, [r7, #0]
 801c43e:	429a      	cmp	r2, r3
 801c440:	d803      	bhi.n	801c44a <HAL_SPI_Receive+0x208>
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c448:	d102      	bne.n	801c450 <HAL_SPI_Receive+0x20e>
 801c44a:	683b      	ldr	r3, [r7, #0]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d102      	bne.n	801c456 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801c450:	2303      	movs	r3, #3
 801c452:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c454:	e018      	b.n	801c488 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c45c:	b29b      	uxth	r3, r3
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d1ca      	bne.n	801c3f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c462:	693a      	ldr	r2, [r7, #16]
 801c464:	6839      	ldr	r1, [r7, #0]
 801c466:	68f8      	ldr	r0, [r7, #12]
 801c468:	f000 fb4c 	bl	801cb04 <SPI_EndRxTransaction>
 801c46c:	4603      	mov	r3, r0
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d002      	beq.n	801c478 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	2220      	movs	r2, #32
 801c476:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d002      	beq.n	801c486 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801c480:	2301      	movs	r3, #1
 801c482:	75fb      	strb	r3, [r7, #23]
 801c484:	e000      	b.n	801c488 <HAL_SPI_Receive+0x246>
  }

error :
 801c486:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	2201      	movs	r2, #1
 801c48c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	2200      	movs	r2, #0
 801c494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c498:	7dfb      	ldrb	r3, [r7, #23]
}
 801c49a:	4618      	mov	r0, r3
 801c49c:	3718      	adds	r7, #24
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bd80      	pop	{r7, pc}

0801c4a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c4a2:	b580      	push	{r7, lr}
 801c4a4:	b08a      	sub	sp, #40	; 0x28
 801c4a6:	af00      	add	r7, sp, #0
 801c4a8:	60f8      	str	r0, [r7, #12]
 801c4aa:	60b9      	str	r1, [r7, #8]
 801c4ac:	607a      	str	r2, [r7, #4]
 801c4ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c4b0:	2301      	movs	r3, #1
 801c4b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c4c0:	2b01      	cmp	r3, #1
 801c4c2:	d101      	bne.n	801c4c8 <HAL_SPI_TransmitReceive+0x26>
 801c4c4:	2302      	movs	r3, #2
 801c4c6:	e1fb      	b.n	801c8c0 <HAL_SPI_TransmitReceive+0x41e>
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2201      	movs	r2, #1
 801c4cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c4d0:	f7fb fa9e 	bl	8017a10 <HAL_GetTick>
 801c4d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c4dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	685b      	ldr	r3, [r3, #4]
 801c4e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801c4e4:	887b      	ldrh	r3, [r7, #2]
 801c4e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801c4e8:	887b      	ldrh	r3, [r7, #2]
 801c4ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c4ec:	7efb      	ldrb	r3, [r7, #27]
 801c4ee:	2b01      	cmp	r3, #1
 801c4f0:	d00e      	beq.n	801c510 <HAL_SPI_TransmitReceive+0x6e>
 801c4f2:	697b      	ldr	r3, [r7, #20]
 801c4f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c4f8:	d106      	bne.n	801c508 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	689b      	ldr	r3, [r3, #8]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d102      	bne.n	801c508 <HAL_SPI_TransmitReceive+0x66>
 801c502:	7efb      	ldrb	r3, [r7, #27]
 801c504:	2b04      	cmp	r3, #4
 801c506:	d003      	beq.n	801c510 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801c508:	2302      	movs	r3, #2
 801c50a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c50e:	e1cd      	b.n	801c8ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c510:	68bb      	ldr	r3, [r7, #8]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d005      	beq.n	801c522 <HAL_SPI_TransmitReceive+0x80>
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d002      	beq.n	801c522 <HAL_SPI_TransmitReceive+0x80>
 801c51c:	887b      	ldrh	r3, [r7, #2]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d103      	bne.n	801c52a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801c522:	2301      	movs	r3, #1
 801c524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c528:	e1c0      	b.n	801c8ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c530:	b2db      	uxtb	r3, r3
 801c532:	2b04      	cmp	r3, #4
 801c534:	d003      	beq.n	801c53e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	2205      	movs	r2, #5
 801c53a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	2200      	movs	r2, #0
 801c542:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	687a      	ldr	r2, [r7, #4]
 801c548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	887a      	ldrh	r2, [r7, #2]
 801c54e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	887a      	ldrh	r2, [r7, #2]
 801c556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c55a:	68fb      	ldr	r3, [r7, #12]
 801c55c:	68ba      	ldr	r2, [r7, #8]
 801c55e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	887a      	ldrh	r2, [r7, #2]
 801c564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	887a      	ldrh	r2, [r7, #2]
 801c56a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	2200      	movs	r2, #0
 801c570:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	2200      	movs	r2, #0
 801c576:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	68db      	ldr	r3, [r3, #12]
 801c57c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c580:	d802      	bhi.n	801c588 <HAL_SPI_TransmitReceive+0xe6>
 801c582:	8a3b      	ldrh	r3, [r7, #16]
 801c584:	2b01      	cmp	r3, #1
 801c586:	d908      	bls.n	801c59a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	685a      	ldr	r2, [r3, #4]
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c596:	605a      	str	r2, [r3, #4]
 801c598:	e007      	b.n	801c5aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	685a      	ldr	r2, [r3, #4]
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c5a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c5b4:	2b40      	cmp	r3, #64	; 0x40
 801c5b6:	d007      	beq.n	801c5c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	681a      	ldr	r2, [r3, #0]
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c5c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	68db      	ldr	r3, [r3, #12]
 801c5cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c5d0:	d97c      	bls.n	801c6cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	685b      	ldr	r3, [r3, #4]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d002      	beq.n	801c5e0 <HAL_SPI_TransmitReceive+0x13e>
 801c5da:	8a7b      	ldrh	r3, [r7, #18]
 801c5dc:	2b01      	cmp	r3, #1
 801c5de:	d169      	bne.n	801c6b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5e4:	881a      	ldrh	r2, [r3, #0]
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5f0:	1c9a      	adds	r2, r3, #2
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5fa:	b29b      	uxth	r3, r3
 801c5fc:	3b01      	subs	r3, #1
 801c5fe:	b29a      	uxth	r2, r3
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c604:	e056      	b.n	801c6b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	689b      	ldr	r3, [r3, #8]
 801c60c:	f003 0302 	and.w	r3, r3, #2
 801c610:	2b02      	cmp	r3, #2
 801c612:	d11b      	bne.n	801c64c <HAL_SPI_TransmitReceive+0x1aa>
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c618:	b29b      	uxth	r3, r3
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d016      	beq.n	801c64c <HAL_SPI_TransmitReceive+0x1aa>
 801c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c620:	2b01      	cmp	r3, #1
 801c622:	d113      	bne.n	801c64c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c628:	881a      	ldrh	r2, [r3, #0]
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c634:	1c9a      	adds	r2, r3, #2
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c63e:	b29b      	uxth	r3, r3
 801c640:	3b01      	subs	r3, #1
 801c642:	b29a      	uxth	r2, r3
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c648:	2300      	movs	r3, #0
 801c64a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	689b      	ldr	r3, [r3, #8]
 801c652:	f003 0301 	and.w	r3, r3, #1
 801c656:	2b01      	cmp	r3, #1
 801c658:	d11c      	bne.n	801c694 <HAL_SPI_TransmitReceive+0x1f2>
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c660:	b29b      	uxth	r3, r3
 801c662:	2b00      	cmp	r3, #0
 801c664:	d016      	beq.n	801c694 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	68da      	ldr	r2, [r3, #12]
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c670:	b292      	uxth	r2, r2
 801c672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c678:	1c9a      	adds	r2, r3, #2
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c684:	b29b      	uxth	r3, r3
 801c686:	3b01      	subs	r3, #1
 801c688:	b29a      	uxth	r2, r3
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c690:	2301      	movs	r3, #1
 801c692:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c694:	f7fb f9bc 	bl	8017a10 <HAL_GetTick>
 801c698:	4602      	mov	r2, r0
 801c69a:	69fb      	ldr	r3, [r7, #28]
 801c69c:	1ad3      	subs	r3, r2, r3
 801c69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c6a0:	429a      	cmp	r2, r3
 801c6a2:	d807      	bhi.n	801c6b4 <HAL_SPI_TransmitReceive+0x212>
 801c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6aa:	d003      	beq.n	801c6b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801c6ac:	2303      	movs	r3, #3
 801c6ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c6b2:	e0fb      	b.n	801c8ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c6b8:	b29b      	uxth	r3, r3
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d1a3      	bne.n	801c606 <HAL_SPI_TransmitReceive+0x164>
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c6c4:	b29b      	uxth	r3, r3
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d19d      	bne.n	801c606 <HAL_SPI_TransmitReceive+0x164>
 801c6ca:	e0df      	b.n	801c88c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	685b      	ldr	r3, [r3, #4]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d003      	beq.n	801c6dc <HAL_SPI_TransmitReceive+0x23a>
 801c6d4:	8a7b      	ldrh	r3, [r7, #18]
 801c6d6:	2b01      	cmp	r3, #1
 801c6d8:	f040 80cb 	bne.w	801c872 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c6e0:	b29b      	uxth	r3, r3
 801c6e2:	2b01      	cmp	r3, #1
 801c6e4:	d912      	bls.n	801c70c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6ea:	881a      	ldrh	r2, [r3, #0]
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6f6:	1c9a      	adds	r2, r3, #2
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c700:	b29b      	uxth	r3, r3
 801c702:	3b02      	subs	r3, #2
 801c704:	b29a      	uxth	r2, r3
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c70a:	e0b2      	b.n	801c872 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	330c      	adds	r3, #12
 801c716:	7812      	ldrb	r2, [r2, #0]
 801c718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c71e:	1c5a      	adds	r2, r3, #1
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c728:	b29b      	uxth	r3, r3
 801c72a:	3b01      	subs	r3, #1
 801c72c:	b29a      	uxth	r2, r3
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c732:	e09e      	b.n	801c872 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	689b      	ldr	r3, [r3, #8]
 801c73a:	f003 0302 	and.w	r3, r3, #2
 801c73e:	2b02      	cmp	r3, #2
 801c740:	d134      	bne.n	801c7ac <HAL_SPI_TransmitReceive+0x30a>
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c746:	b29b      	uxth	r3, r3
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d02f      	beq.n	801c7ac <HAL_SPI_TransmitReceive+0x30a>
 801c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c74e:	2b01      	cmp	r3, #1
 801c750:	d12c      	bne.n	801c7ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c756:	b29b      	uxth	r3, r3
 801c758:	2b01      	cmp	r3, #1
 801c75a:	d912      	bls.n	801c782 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c760:	881a      	ldrh	r2, [r3, #0]
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c76c:	1c9a      	adds	r2, r3, #2
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c776:	b29b      	uxth	r3, r3
 801c778:	3b02      	subs	r3, #2
 801c77a:	b29a      	uxth	r2, r3
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c780:	e012      	b.n	801c7a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	330c      	adds	r3, #12
 801c78c:	7812      	ldrb	r2, [r2, #0]
 801c78e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c794:	1c5a      	adds	r2, r3, #1
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c79e:	b29b      	uxth	r3, r3
 801c7a0:	3b01      	subs	r3, #1
 801c7a2:	b29a      	uxth	r2, r3
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	689b      	ldr	r3, [r3, #8]
 801c7b2:	f003 0301 	and.w	r3, r3, #1
 801c7b6:	2b01      	cmp	r3, #1
 801c7b8:	d148      	bne.n	801c84c <HAL_SPI_TransmitReceive+0x3aa>
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c7c0:	b29b      	uxth	r3, r3
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d042      	beq.n	801c84c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c7cc:	b29b      	uxth	r3, r3
 801c7ce:	2b01      	cmp	r3, #1
 801c7d0:	d923      	bls.n	801c81a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	68da      	ldr	r2, [r3, #12]
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c7dc:	b292      	uxth	r2, r2
 801c7de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c7e4:	1c9a      	adds	r2, r3, #2
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c7f0:	b29b      	uxth	r3, r3
 801c7f2:	3b02      	subs	r3, #2
 801c7f4:	b29a      	uxth	r2, r3
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c802:	b29b      	uxth	r3, r3
 801c804:	2b01      	cmp	r3, #1
 801c806:	d81f      	bhi.n	801c848 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	685a      	ldr	r2, [r3, #4]
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c816:	605a      	str	r2, [r3, #4]
 801c818:	e016      	b.n	801c848 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	f103 020c 	add.w	r2, r3, #12
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c826:	7812      	ldrb	r2, [r2, #0]
 801c828:	b2d2      	uxtb	r2, r2
 801c82a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c830:	1c5a      	adds	r2, r3, #1
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	3b01      	subs	r3, #1
 801c840:	b29a      	uxth	r2, r3
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c848:	2301      	movs	r3, #1
 801c84a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c84c:	f7fb f8e0 	bl	8017a10 <HAL_GetTick>
 801c850:	4602      	mov	r2, r0
 801c852:	69fb      	ldr	r3, [r7, #28]
 801c854:	1ad3      	subs	r3, r2, r3
 801c856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c858:	429a      	cmp	r2, r3
 801c85a:	d803      	bhi.n	801c864 <HAL_SPI_TransmitReceive+0x3c2>
 801c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c862:	d102      	bne.n	801c86a <HAL_SPI_TransmitReceive+0x3c8>
 801c864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c866:	2b00      	cmp	r3, #0
 801c868:	d103      	bne.n	801c872 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801c86a:	2303      	movs	r3, #3
 801c86c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c870:	e01c      	b.n	801c8ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c876:	b29b      	uxth	r3, r3
 801c878:	2b00      	cmp	r3, #0
 801c87a:	f47f af5b 	bne.w	801c734 <HAL_SPI_TransmitReceive+0x292>
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c884:	b29b      	uxth	r3, r3
 801c886:	2b00      	cmp	r3, #0
 801c888:	f47f af54 	bne.w	801c734 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c88c:	69fa      	ldr	r2, [r7, #28]
 801c88e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c890:	68f8      	ldr	r0, [r7, #12]
 801c892:	f000 f98f 	bl	801cbb4 <SPI_EndRxTxTransaction>
 801c896:	4603      	mov	r3, r0
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d006      	beq.n	801c8aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801c89c:	2301      	movs	r3, #1
 801c89e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	2220      	movs	r2, #32
 801c8a6:	661a      	str	r2, [r3, #96]	; 0x60
 801c8a8:	e000      	b.n	801c8ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801c8aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2201      	movs	r2, #1
 801c8b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c8bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	3728      	adds	r7, #40	; 0x28
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd80      	pop	{r7, pc}

0801c8c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b088      	sub	sp, #32
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	60f8      	str	r0, [r7, #12]
 801c8d0:	60b9      	str	r1, [r7, #8]
 801c8d2:	603b      	str	r3, [r7, #0]
 801c8d4:	4613      	mov	r3, r2
 801c8d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801c8d8:	f7fb f89a 	bl	8017a10 <HAL_GetTick>
 801c8dc:	4602      	mov	r2, r0
 801c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8e0:	1a9b      	subs	r3, r3, r2
 801c8e2:	683a      	ldr	r2, [r7, #0]
 801c8e4:	4413      	add	r3, r2
 801c8e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801c8e8:	f7fb f892 	bl	8017a10 <HAL_GetTick>
 801c8ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801c8ee:	4b39      	ldr	r3, [pc, #228]	; (801c9d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	015b      	lsls	r3, r3, #5
 801c8f4:	0d1b      	lsrs	r3, r3, #20
 801c8f6:	69fa      	ldr	r2, [r7, #28]
 801c8f8:	fb02 f303 	mul.w	r3, r2, r3
 801c8fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c8fe:	e054      	b.n	801c9aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c906:	d050      	beq.n	801c9aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801c908:	f7fb f882 	bl	8017a10 <HAL_GetTick>
 801c90c:	4602      	mov	r2, r0
 801c90e:	69bb      	ldr	r3, [r7, #24]
 801c910:	1ad3      	subs	r3, r2, r3
 801c912:	69fa      	ldr	r2, [r7, #28]
 801c914:	429a      	cmp	r2, r3
 801c916:	d902      	bls.n	801c91e <SPI_WaitFlagStateUntilTimeout+0x56>
 801c918:	69fb      	ldr	r3, [r7, #28]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d13d      	bne.n	801c99a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	685a      	ldr	r2, [r3, #4]
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c92c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	685b      	ldr	r3, [r3, #4]
 801c932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c936:	d111      	bne.n	801c95c <SPI_WaitFlagStateUntilTimeout+0x94>
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	689b      	ldr	r3, [r3, #8]
 801c93c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c940:	d004      	beq.n	801c94c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	689b      	ldr	r3, [r3, #8]
 801c946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c94a:	d107      	bne.n	801c95c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	681a      	ldr	r2, [r3, #0]
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c95a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c964:	d10f      	bne.n	801c986 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	681a      	ldr	r2, [r3, #0]
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c974:	601a      	str	r2, [r3, #0]
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	681a      	ldr	r2, [r3, #0]
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	2201      	movs	r2, #1
 801c98a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	2200      	movs	r2, #0
 801c992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801c996:	2303      	movs	r3, #3
 801c998:	e017      	b.n	801c9ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801c99a:	697b      	ldr	r3, [r7, #20]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d101      	bne.n	801c9a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801c9a4:	697b      	ldr	r3, [r7, #20]
 801c9a6:	3b01      	subs	r3, #1
 801c9a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	689a      	ldr	r2, [r3, #8]
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	4013      	ands	r3, r2
 801c9b4:	68ba      	ldr	r2, [r7, #8]
 801c9b6:	429a      	cmp	r2, r3
 801c9b8:	bf0c      	ite	eq
 801c9ba:	2301      	moveq	r3, #1
 801c9bc:	2300      	movne	r3, #0
 801c9be:	b2db      	uxtb	r3, r3
 801c9c0:	461a      	mov	r2, r3
 801c9c2:	79fb      	ldrb	r3, [r7, #7]
 801c9c4:	429a      	cmp	r2, r3
 801c9c6:	d19b      	bne.n	801c900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801c9c8:	2300      	movs	r3, #0
}
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	3720      	adds	r7, #32
 801c9ce:	46bd      	mov	sp, r7
 801c9d0:	bd80      	pop	{r7, pc}
 801c9d2:	bf00      	nop
 801c9d4:	20000000 	.word	0x20000000

0801c9d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c9d8:	b580      	push	{r7, lr}
 801c9da:	b08a      	sub	sp, #40	; 0x28
 801c9dc:	af00      	add	r7, sp, #0
 801c9de:	60f8      	str	r0, [r7, #12]
 801c9e0:	60b9      	str	r1, [r7, #8]
 801c9e2:	607a      	str	r2, [r7, #4]
 801c9e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801c9ea:	f7fb f811 	bl	8017a10 <HAL_GetTick>
 801c9ee:	4602      	mov	r2, r0
 801c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9f2:	1a9b      	subs	r3, r3, r2
 801c9f4:	683a      	ldr	r2, [r7, #0]
 801c9f6:	4413      	add	r3, r2
 801c9f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801c9fa:	f7fb f809 	bl	8017a10 <HAL_GetTick>
 801c9fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	330c      	adds	r3, #12
 801ca06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801ca08:	4b3d      	ldr	r3, [pc, #244]	; (801cb00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801ca0a:	681a      	ldr	r2, [r3, #0]
 801ca0c:	4613      	mov	r3, r2
 801ca0e:	009b      	lsls	r3, r3, #2
 801ca10:	4413      	add	r3, r2
 801ca12:	00da      	lsls	r2, r3, #3
 801ca14:	1ad3      	subs	r3, r2, r3
 801ca16:	0d1b      	lsrs	r3, r3, #20
 801ca18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca1a:	fb02 f303 	mul.w	r3, r2, r3
 801ca1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801ca20:	e060      	b.n	801cae4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801ca22:	68bb      	ldr	r3, [r7, #8]
 801ca24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801ca28:	d107      	bne.n	801ca3a <SPI_WaitFifoStateUntilTimeout+0x62>
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d104      	bne.n	801ca3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801ca30:	69fb      	ldr	r3, [r7, #28]
 801ca32:	781b      	ldrb	r3, [r3, #0]
 801ca34:	b2db      	uxtb	r3, r3
 801ca36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801ca38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca40:	d050      	beq.n	801cae4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ca42:	f7fa ffe5 	bl	8017a10 <HAL_GetTick>
 801ca46:	4602      	mov	r2, r0
 801ca48:	6a3b      	ldr	r3, [r7, #32]
 801ca4a:	1ad3      	subs	r3, r2, r3
 801ca4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca4e:	429a      	cmp	r2, r3
 801ca50:	d902      	bls.n	801ca58 <SPI_WaitFifoStateUntilTimeout+0x80>
 801ca52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d13d      	bne.n	801cad4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	685a      	ldr	r2, [r3, #4]
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ca66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	685b      	ldr	r3, [r3, #4]
 801ca6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ca70:	d111      	bne.n	801ca96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	689b      	ldr	r3, [r3, #8]
 801ca76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ca7a:	d004      	beq.n	801ca86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	689b      	ldr	r3, [r3, #8]
 801ca80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca84:	d107      	bne.n	801ca96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	681a      	ldr	r2, [r3, #0]
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ca94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ca9e:	d10f      	bne.n	801cac0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	681a      	ldr	r2, [r3, #0]
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801caae:	601a      	str	r2, [r3, #0]
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	681a      	ldr	r2, [r3, #0]
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cabe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	2201      	movs	r2, #1
 801cac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	2200      	movs	r2, #0
 801cacc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801cad0:	2303      	movs	r3, #3
 801cad2:	e010      	b.n	801caf6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cad4:	69bb      	ldr	r3, [r7, #24]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d101      	bne.n	801cade <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801cada:	2300      	movs	r3, #0
 801cadc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801cade:	69bb      	ldr	r3, [r7, #24]
 801cae0:	3b01      	subs	r3, #1
 801cae2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	689a      	ldr	r2, [r3, #8]
 801caea:	68bb      	ldr	r3, [r7, #8]
 801caec:	4013      	ands	r3, r2
 801caee:	687a      	ldr	r2, [r7, #4]
 801caf0:	429a      	cmp	r2, r3
 801caf2:	d196      	bne.n	801ca22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801caf4:	2300      	movs	r3, #0
}
 801caf6:	4618      	mov	r0, r3
 801caf8:	3728      	adds	r7, #40	; 0x28
 801cafa:	46bd      	mov	sp, r7
 801cafc:	bd80      	pop	{r7, pc}
 801cafe:	bf00      	nop
 801cb00:	20000000 	.word	0x20000000

0801cb04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b086      	sub	sp, #24
 801cb08:	af02      	add	r7, sp, #8
 801cb0a:	60f8      	str	r0, [r7, #12]
 801cb0c:	60b9      	str	r1, [r7, #8]
 801cb0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	685b      	ldr	r3, [r3, #4]
 801cb14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cb18:	d111      	bne.n	801cb3e <SPI_EndRxTransaction+0x3a>
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	689b      	ldr	r3, [r3, #8]
 801cb1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cb22:	d004      	beq.n	801cb2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	689b      	ldr	r3, [r3, #8]
 801cb28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb2c:	d107      	bne.n	801cb3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	681b      	ldr	r3, [r3, #0]
 801cb32:	681a      	ldr	r2, [r3, #0]
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cb3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	9300      	str	r3, [sp, #0]
 801cb42:	68bb      	ldr	r3, [r7, #8]
 801cb44:	2200      	movs	r2, #0
 801cb46:	2180      	movs	r1, #128	; 0x80
 801cb48:	68f8      	ldr	r0, [r7, #12]
 801cb4a:	f7ff febd 	bl	801c8c8 <SPI_WaitFlagStateUntilTimeout>
 801cb4e:	4603      	mov	r3, r0
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d007      	beq.n	801cb64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cb54:	68fb      	ldr	r3, [r7, #12]
 801cb56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cb58:	f043 0220 	orr.w	r2, r3, #32
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cb60:	2303      	movs	r3, #3
 801cb62:	e023      	b.n	801cbac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	685b      	ldr	r3, [r3, #4]
 801cb68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cb6c:	d11d      	bne.n	801cbaa <SPI_EndRxTransaction+0xa6>
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	689b      	ldr	r3, [r3, #8]
 801cb72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cb76:	d004      	beq.n	801cb82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	689b      	ldr	r3, [r3, #8]
 801cb7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb80:	d113      	bne.n	801cbaa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	9300      	str	r3, [sp, #0]
 801cb86:	68bb      	ldr	r3, [r7, #8]
 801cb88:	2200      	movs	r2, #0
 801cb8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801cb8e:	68f8      	ldr	r0, [r7, #12]
 801cb90:	f7ff ff22 	bl	801c9d8 <SPI_WaitFifoStateUntilTimeout>
 801cb94:	4603      	mov	r3, r0
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d007      	beq.n	801cbaa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cb9e:	f043 0220 	orr.w	r2, r3, #32
 801cba2:	68fb      	ldr	r3, [r7, #12]
 801cba4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801cba6:	2303      	movs	r3, #3
 801cba8:	e000      	b.n	801cbac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801cbaa:	2300      	movs	r3, #0
}
 801cbac:	4618      	mov	r0, r3
 801cbae:	3710      	adds	r7, #16
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	bd80      	pop	{r7, pc}

0801cbb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b086      	sub	sp, #24
 801cbb8:	af02      	add	r7, sp, #8
 801cbba:	60f8      	str	r0, [r7, #12]
 801cbbc:	60b9      	str	r1, [r7, #8]
 801cbbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	9300      	str	r3, [sp, #0]
 801cbc4:	68bb      	ldr	r3, [r7, #8]
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801cbcc:	68f8      	ldr	r0, [r7, #12]
 801cbce:	f7ff ff03 	bl	801c9d8 <SPI_WaitFifoStateUntilTimeout>
 801cbd2:	4603      	mov	r3, r0
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d007      	beq.n	801cbe8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cbdc:	f043 0220 	orr.w	r2, r3, #32
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cbe4:	2303      	movs	r3, #3
 801cbe6:	e027      	b.n	801cc38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	9300      	str	r3, [sp, #0]
 801cbec:	68bb      	ldr	r3, [r7, #8]
 801cbee:	2200      	movs	r2, #0
 801cbf0:	2180      	movs	r1, #128	; 0x80
 801cbf2:	68f8      	ldr	r0, [r7, #12]
 801cbf4:	f7ff fe68 	bl	801c8c8 <SPI_WaitFlagStateUntilTimeout>
 801cbf8:	4603      	mov	r3, r0
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d007      	beq.n	801cc0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cbfe:	68fb      	ldr	r3, [r7, #12]
 801cc00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cc02:	f043 0220 	orr.w	r2, r3, #32
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cc0a:	2303      	movs	r3, #3
 801cc0c:	e014      	b.n	801cc38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	9300      	str	r3, [sp, #0]
 801cc12:	68bb      	ldr	r3, [r7, #8]
 801cc14:	2200      	movs	r2, #0
 801cc16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801cc1a:	68f8      	ldr	r0, [r7, #12]
 801cc1c:	f7ff fedc 	bl	801c9d8 <SPI_WaitFifoStateUntilTimeout>
 801cc20:	4603      	mov	r3, r0
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d007      	beq.n	801cc36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cc2a:	f043 0220 	orr.w	r2, r3, #32
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801cc32:	2303      	movs	r3, #3
 801cc34:	e000      	b.n	801cc38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801cc36:	2300      	movs	r3, #0
}
 801cc38:	4618      	mov	r0, r3
 801cc3a:	3710      	adds	r7, #16
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	bd80      	pop	{r7, pc}

0801cc40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	b082      	sub	sp, #8
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d101      	bne.n	801cc52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cc4e:	2301      	movs	r3, #1
 801cc50:	e049      	b.n	801cce6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cc58:	b2db      	uxtb	r3, r3
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d106      	bne.n	801cc6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	2200      	movs	r2, #0
 801cc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cc66:	6878      	ldr	r0, [r7, #4]
 801cc68:	f7fa f8da 	bl	8016e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	2202      	movs	r2, #2
 801cc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	681a      	ldr	r2, [r3, #0]
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	3304      	adds	r3, #4
 801cc7c:	4619      	mov	r1, r3
 801cc7e:	4610      	mov	r0, r2
 801cc80:	f000 fd6c 	bl	801d75c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2201      	movs	r2, #1
 801cc88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	2201      	movs	r2, #1
 801cc90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	2201      	movs	r2, #1
 801cc98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	2201      	movs	r2, #1
 801cca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	2201      	movs	r2, #1
 801cca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2201      	movs	r2, #1
 801ccb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	2201      	movs	r2, #1
 801ccb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	2201      	movs	r2, #1
 801ccc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	2201      	movs	r2, #1
 801ccc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	2201      	movs	r2, #1
 801ccd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	2201      	movs	r2, #1
 801ccd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	2201      	movs	r2, #1
 801cce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cce4:	2300      	movs	r3, #0
}
 801cce6:	4618      	mov	r0, r3
 801cce8:	3708      	adds	r7, #8
 801ccea:	46bd      	mov	sp, r7
 801ccec:	bd80      	pop	{r7, pc}
	...

0801ccf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ccf0:	b480      	push	{r7}
 801ccf2:	b085      	sub	sp, #20
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ccfe:	b2db      	uxtb	r3, r3
 801cd00:	2b01      	cmp	r3, #1
 801cd02:	d001      	beq.n	801cd08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cd04:	2301      	movs	r3, #1
 801cd06:	e04f      	b.n	801cda8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	2202      	movs	r2, #2
 801cd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	68da      	ldr	r2, [r3, #12]
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	f042 0201 	orr.w	r2, r2, #1
 801cd1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	4a23      	ldr	r2, [pc, #140]	; (801cdb4 <HAL_TIM_Base_Start_IT+0xc4>)
 801cd26:	4293      	cmp	r3, r2
 801cd28:	d01d      	beq.n	801cd66 <HAL_TIM_Base_Start_IT+0x76>
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cd32:	d018      	beq.n	801cd66 <HAL_TIM_Base_Start_IT+0x76>
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	4a1f      	ldr	r2, [pc, #124]	; (801cdb8 <HAL_TIM_Base_Start_IT+0xc8>)
 801cd3a:	4293      	cmp	r3, r2
 801cd3c:	d013      	beq.n	801cd66 <HAL_TIM_Base_Start_IT+0x76>
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	4a1e      	ldr	r2, [pc, #120]	; (801cdbc <HAL_TIM_Base_Start_IT+0xcc>)
 801cd44:	4293      	cmp	r3, r2
 801cd46:	d00e      	beq.n	801cd66 <HAL_TIM_Base_Start_IT+0x76>
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	4a1c      	ldr	r2, [pc, #112]	; (801cdc0 <HAL_TIM_Base_Start_IT+0xd0>)
 801cd4e:	4293      	cmp	r3, r2
 801cd50:	d009      	beq.n	801cd66 <HAL_TIM_Base_Start_IT+0x76>
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	4a1b      	ldr	r2, [pc, #108]	; (801cdc4 <HAL_TIM_Base_Start_IT+0xd4>)
 801cd58:	4293      	cmp	r3, r2
 801cd5a:	d004      	beq.n	801cd66 <HAL_TIM_Base_Start_IT+0x76>
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	4a19      	ldr	r2, [pc, #100]	; (801cdc8 <HAL_TIM_Base_Start_IT+0xd8>)
 801cd62:	4293      	cmp	r3, r2
 801cd64:	d115      	bne.n	801cd92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	689a      	ldr	r2, [r3, #8]
 801cd6c:	4b17      	ldr	r3, [pc, #92]	; (801cdcc <HAL_TIM_Base_Start_IT+0xdc>)
 801cd6e:	4013      	ands	r3, r2
 801cd70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	2b06      	cmp	r3, #6
 801cd76:	d015      	beq.n	801cda4 <HAL_TIM_Base_Start_IT+0xb4>
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd7e:	d011      	beq.n	801cda4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	681a      	ldr	r2, [r3, #0]
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	f042 0201 	orr.w	r2, r2, #1
 801cd8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd90:	e008      	b.n	801cda4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	681a      	ldr	r2, [r3, #0]
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	f042 0201 	orr.w	r2, r2, #1
 801cda0:	601a      	str	r2, [r3, #0]
 801cda2:	e000      	b.n	801cda6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cda4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cda6:	2300      	movs	r3, #0
}
 801cda8:	4618      	mov	r0, r3
 801cdaa:	3714      	adds	r7, #20
 801cdac:	46bd      	mov	sp, r7
 801cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdb2:	4770      	bx	lr
 801cdb4:	40012c00 	.word	0x40012c00
 801cdb8:	40000400 	.word	0x40000400
 801cdbc:	40000800 	.word	0x40000800
 801cdc0:	40013400 	.word	0x40013400
 801cdc4:	40014000 	.word	0x40014000
 801cdc8:	40015000 	.word	0x40015000
 801cdcc:	00010007 	.word	0x00010007

0801cdd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b082      	sub	sp, #8
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d101      	bne.n	801cde2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cdde:	2301      	movs	r3, #1
 801cde0:	e049      	b.n	801ce76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cde8:	b2db      	uxtb	r3, r3
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d106      	bne.n	801cdfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	2200      	movs	r2, #0
 801cdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cdf6:	6878      	ldr	r0, [r7, #4]
 801cdf8:	f7fa f84c 	bl	8016e94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	2202      	movs	r2, #2
 801ce00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	681a      	ldr	r2, [r3, #0]
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	3304      	adds	r3, #4
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	4610      	mov	r0, r2
 801ce10:	f000 fca4 	bl	801d75c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	2201      	movs	r2, #1
 801ce18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	2201      	movs	r2, #1
 801ce20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	2201      	movs	r2, #1
 801ce28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	2201      	movs	r2, #1
 801ce30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2201      	movs	r2, #1
 801ce38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	2201      	movs	r2, #1
 801ce40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	2201      	movs	r2, #1
 801ce48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2201      	movs	r2, #1
 801ce50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2201      	movs	r2, #1
 801ce58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2201      	movs	r2, #1
 801ce60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2201      	movs	r2, #1
 801ce68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	2201      	movs	r2, #1
 801ce70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ce74:	2300      	movs	r3, #0
}
 801ce76:	4618      	mov	r0, r3
 801ce78:	3708      	adds	r7, #8
 801ce7a:	46bd      	mov	sp, r7
 801ce7c:	bd80      	pop	{r7, pc}
	...

0801ce80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b084      	sub	sp, #16
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	6078      	str	r0, [r7, #4]
 801ce88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ce8a:	683b      	ldr	r3, [r7, #0]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d109      	bne.n	801cea4 <HAL_TIM_PWM_Start+0x24>
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ce96:	b2db      	uxtb	r3, r3
 801ce98:	2b01      	cmp	r3, #1
 801ce9a:	bf14      	ite	ne
 801ce9c:	2301      	movne	r3, #1
 801ce9e:	2300      	moveq	r3, #0
 801cea0:	b2db      	uxtb	r3, r3
 801cea2:	e03c      	b.n	801cf1e <HAL_TIM_PWM_Start+0x9e>
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	2b04      	cmp	r3, #4
 801cea8:	d109      	bne.n	801cebe <HAL_TIM_PWM_Start+0x3e>
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ceb0:	b2db      	uxtb	r3, r3
 801ceb2:	2b01      	cmp	r3, #1
 801ceb4:	bf14      	ite	ne
 801ceb6:	2301      	movne	r3, #1
 801ceb8:	2300      	moveq	r3, #0
 801ceba:	b2db      	uxtb	r3, r3
 801cebc:	e02f      	b.n	801cf1e <HAL_TIM_PWM_Start+0x9e>
 801cebe:	683b      	ldr	r3, [r7, #0]
 801cec0:	2b08      	cmp	r3, #8
 801cec2:	d109      	bne.n	801ced8 <HAL_TIM_PWM_Start+0x58>
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ceca:	b2db      	uxtb	r3, r3
 801cecc:	2b01      	cmp	r3, #1
 801cece:	bf14      	ite	ne
 801ced0:	2301      	movne	r3, #1
 801ced2:	2300      	moveq	r3, #0
 801ced4:	b2db      	uxtb	r3, r3
 801ced6:	e022      	b.n	801cf1e <HAL_TIM_PWM_Start+0x9e>
 801ced8:	683b      	ldr	r3, [r7, #0]
 801ceda:	2b0c      	cmp	r3, #12
 801cedc:	d109      	bne.n	801cef2 <HAL_TIM_PWM_Start+0x72>
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cee4:	b2db      	uxtb	r3, r3
 801cee6:	2b01      	cmp	r3, #1
 801cee8:	bf14      	ite	ne
 801ceea:	2301      	movne	r3, #1
 801ceec:	2300      	moveq	r3, #0
 801ceee:	b2db      	uxtb	r3, r3
 801cef0:	e015      	b.n	801cf1e <HAL_TIM_PWM_Start+0x9e>
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	2b10      	cmp	r3, #16
 801cef6:	d109      	bne.n	801cf0c <HAL_TIM_PWM_Start+0x8c>
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cefe:	b2db      	uxtb	r3, r3
 801cf00:	2b01      	cmp	r3, #1
 801cf02:	bf14      	ite	ne
 801cf04:	2301      	movne	r3, #1
 801cf06:	2300      	moveq	r3, #0
 801cf08:	b2db      	uxtb	r3, r3
 801cf0a:	e008      	b.n	801cf1e <HAL_TIM_PWM_Start+0x9e>
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801cf12:	b2db      	uxtb	r3, r3
 801cf14:	2b01      	cmp	r3, #1
 801cf16:	bf14      	ite	ne
 801cf18:	2301      	movne	r3, #1
 801cf1a:	2300      	moveq	r3, #0
 801cf1c:	b2db      	uxtb	r3, r3
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d001      	beq.n	801cf26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801cf22:	2301      	movs	r3, #1
 801cf24:	e0a1      	b.n	801d06a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cf26:	683b      	ldr	r3, [r7, #0]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d104      	bne.n	801cf36 <HAL_TIM_PWM_Start+0xb6>
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	2202      	movs	r2, #2
 801cf30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cf34:	e023      	b.n	801cf7e <HAL_TIM_PWM_Start+0xfe>
 801cf36:	683b      	ldr	r3, [r7, #0]
 801cf38:	2b04      	cmp	r3, #4
 801cf3a:	d104      	bne.n	801cf46 <HAL_TIM_PWM_Start+0xc6>
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	2202      	movs	r2, #2
 801cf40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cf44:	e01b      	b.n	801cf7e <HAL_TIM_PWM_Start+0xfe>
 801cf46:	683b      	ldr	r3, [r7, #0]
 801cf48:	2b08      	cmp	r3, #8
 801cf4a:	d104      	bne.n	801cf56 <HAL_TIM_PWM_Start+0xd6>
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	2202      	movs	r2, #2
 801cf50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cf54:	e013      	b.n	801cf7e <HAL_TIM_PWM_Start+0xfe>
 801cf56:	683b      	ldr	r3, [r7, #0]
 801cf58:	2b0c      	cmp	r3, #12
 801cf5a:	d104      	bne.n	801cf66 <HAL_TIM_PWM_Start+0xe6>
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	2202      	movs	r2, #2
 801cf60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cf64:	e00b      	b.n	801cf7e <HAL_TIM_PWM_Start+0xfe>
 801cf66:	683b      	ldr	r3, [r7, #0]
 801cf68:	2b10      	cmp	r3, #16
 801cf6a:	d104      	bne.n	801cf76 <HAL_TIM_PWM_Start+0xf6>
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	2202      	movs	r2, #2
 801cf70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cf74:	e003      	b.n	801cf7e <HAL_TIM_PWM_Start+0xfe>
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	2202      	movs	r2, #2
 801cf7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	2201      	movs	r2, #1
 801cf84:	6839      	ldr	r1, [r7, #0]
 801cf86:	4618      	mov	r0, r3
 801cf88:	f000 ffb0 	bl	801deec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	4a38      	ldr	r2, [pc, #224]	; (801d074 <HAL_TIM_PWM_Start+0x1f4>)
 801cf92:	4293      	cmp	r3, r2
 801cf94:	d018      	beq.n	801cfc8 <HAL_TIM_PWM_Start+0x148>
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	4a37      	ldr	r2, [pc, #220]	; (801d078 <HAL_TIM_PWM_Start+0x1f8>)
 801cf9c:	4293      	cmp	r3, r2
 801cf9e:	d013      	beq.n	801cfc8 <HAL_TIM_PWM_Start+0x148>
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	4a35      	ldr	r2, [pc, #212]	; (801d07c <HAL_TIM_PWM_Start+0x1fc>)
 801cfa6:	4293      	cmp	r3, r2
 801cfa8:	d00e      	beq.n	801cfc8 <HAL_TIM_PWM_Start+0x148>
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	4a34      	ldr	r2, [pc, #208]	; (801d080 <HAL_TIM_PWM_Start+0x200>)
 801cfb0:	4293      	cmp	r3, r2
 801cfb2:	d009      	beq.n	801cfc8 <HAL_TIM_PWM_Start+0x148>
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	4a32      	ldr	r2, [pc, #200]	; (801d084 <HAL_TIM_PWM_Start+0x204>)
 801cfba:	4293      	cmp	r3, r2
 801cfbc:	d004      	beq.n	801cfc8 <HAL_TIM_PWM_Start+0x148>
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	4a31      	ldr	r2, [pc, #196]	; (801d088 <HAL_TIM_PWM_Start+0x208>)
 801cfc4:	4293      	cmp	r3, r2
 801cfc6:	d101      	bne.n	801cfcc <HAL_TIM_PWM_Start+0x14c>
 801cfc8:	2301      	movs	r3, #1
 801cfca:	e000      	b.n	801cfce <HAL_TIM_PWM_Start+0x14e>
 801cfcc:	2300      	movs	r3, #0
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d007      	beq.n	801cfe2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cfe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	4a23      	ldr	r2, [pc, #140]	; (801d074 <HAL_TIM_PWM_Start+0x1f4>)
 801cfe8:	4293      	cmp	r3, r2
 801cfea:	d01d      	beq.n	801d028 <HAL_TIM_PWM_Start+0x1a8>
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cff4:	d018      	beq.n	801d028 <HAL_TIM_PWM_Start+0x1a8>
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	4a24      	ldr	r2, [pc, #144]	; (801d08c <HAL_TIM_PWM_Start+0x20c>)
 801cffc:	4293      	cmp	r3, r2
 801cffe:	d013      	beq.n	801d028 <HAL_TIM_PWM_Start+0x1a8>
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	4a22      	ldr	r2, [pc, #136]	; (801d090 <HAL_TIM_PWM_Start+0x210>)
 801d006:	4293      	cmp	r3, r2
 801d008:	d00e      	beq.n	801d028 <HAL_TIM_PWM_Start+0x1a8>
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	4a1a      	ldr	r2, [pc, #104]	; (801d078 <HAL_TIM_PWM_Start+0x1f8>)
 801d010:	4293      	cmp	r3, r2
 801d012:	d009      	beq.n	801d028 <HAL_TIM_PWM_Start+0x1a8>
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	4a18      	ldr	r2, [pc, #96]	; (801d07c <HAL_TIM_PWM_Start+0x1fc>)
 801d01a:	4293      	cmp	r3, r2
 801d01c:	d004      	beq.n	801d028 <HAL_TIM_PWM_Start+0x1a8>
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	4a19      	ldr	r2, [pc, #100]	; (801d088 <HAL_TIM_PWM_Start+0x208>)
 801d024:	4293      	cmp	r3, r2
 801d026:	d115      	bne.n	801d054 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	689a      	ldr	r2, [r3, #8]
 801d02e:	4b19      	ldr	r3, [pc, #100]	; (801d094 <HAL_TIM_PWM_Start+0x214>)
 801d030:	4013      	ands	r3, r2
 801d032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	2b06      	cmp	r3, #6
 801d038:	d015      	beq.n	801d066 <HAL_TIM_PWM_Start+0x1e6>
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d040:	d011      	beq.n	801d066 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	681a      	ldr	r2, [r3, #0]
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	f042 0201 	orr.w	r2, r2, #1
 801d050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d052:	e008      	b.n	801d066 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	681a      	ldr	r2, [r3, #0]
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	f042 0201 	orr.w	r2, r2, #1
 801d062:	601a      	str	r2, [r3, #0]
 801d064:	e000      	b.n	801d068 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801d068:	2300      	movs	r3, #0
}
 801d06a:	4618      	mov	r0, r3
 801d06c:	3710      	adds	r7, #16
 801d06e:	46bd      	mov	sp, r7
 801d070:	bd80      	pop	{r7, pc}
 801d072:	bf00      	nop
 801d074:	40012c00 	.word	0x40012c00
 801d078:	40013400 	.word	0x40013400
 801d07c:	40014000 	.word	0x40014000
 801d080:	40014400 	.word	0x40014400
 801d084:	40014800 	.word	0x40014800
 801d088:	40015000 	.word	0x40015000
 801d08c:	40000400 	.word	0x40000400
 801d090:	40000800 	.word	0x40000800
 801d094:	00010007 	.word	0x00010007

0801d098 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b082      	sub	sp, #8
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
 801d0a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	2200      	movs	r2, #0
 801d0a8:	6839      	ldr	r1, [r7, #0]
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f000 ff1e 	bl	801deec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	4a40      	ldr	r2, [pc, #256]	; (801d1b8 <HAL_TIM_PWM_Stop+0x120>)
 801d0b6:	4293      	cmp	r3, r2
 801d0b8:	d018      	beq.n	801d0ec <HAL_TIM_PWM_Stop+0x54>
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	4a3f      	ldr	r2, [pc, #252]	; (801d1bc <HAL_TIM_PWM_Stop+0x124>)
 801d0c0:	4293      	cmp	r3, r2
 801d0c2:	d013      	beq.n	801d0ec <HAL_TIM_PWM_Stop+0x54>
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	4a3d      	ldr	r2, [pc, #244]	; (801d1c0 <HAL_TIM_PWM_Stop+0x128>)
 801d0ca:	4293      	cmp	r3, r2
 801d0cc:	d00e      	beq.n	801d0ec <HAL_TIM_PWM_Stop+0x54>
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	4a3c      	ldr	r2, [pc, #240]	; (801d1c4 <HAL_TIM_PWM_Stop+0x12c>)
 801d0d4:	4293      	cmp	r3, r2
 801d0d6:	d009      	beq.n	801d0ec <HAL_TIM_PWM_Stop+0x54>
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	4a3a      	ldr	r2, [pc, #232]	; (801d1c8 <HAL_TIM_PWM_Stop+0x130>)
 801d0de:	4293      	cmp	r3, r2
 801d0e0:	d004      	beq.n	801d0ec <HAL_TIM_PWM_Stop+0x54>
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	4a39      	ldr	r2, [pc, #228]	; (801d1cc <HAL_TIM_PWM_Stop+0x134>)
 801d0e8:	4293      	cmp	r3, r2
 801d0ea:	d101      	bne.n	801d0f0 <HAL_TIM_PWM_Stop+0x58>
 801d0ec:	2301      	movs	r3, #1
 801d0ee:	e000      	b.n	801d0f2 <HAL_TIM_PWM_Stop+0x5a>
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d017      	beq.n	801d126 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	6a1a      	ldr	r2, [r3, #32]
 801d0fc:	f241 1311 	movw	r3, #4369	; 0x1111
 801d100:	4013      	ands	r3, r2
 801d102:	2b00      	cmp	r3, #0
 801d104:	d10f      	bne.n	801d126 <HAL_TIM_PWM_Stop+0x8e>
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	6a1a      	ldr	r2, [r3, #32]
 801d10c:	f244 4344 	movw	r3, #17476	; 0x4444
 801d110:	4013      	ands	r3, r2
 801d112:	2b00      	cmp	r3, #0
 801d114:	d107      	bne.n	801d126 <HAL_TIM_PWM_Stop+0x8e>
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	6a1a      	ldr	r2, [r3, #32]
 801d12c:	f241 1311 	movw	r3, #4369	; 0x1111
 801d130:	4013      	ands	r3, r2
 801d132:	2b00      	cmp	r3, #0
 801d134:	d10f      	bne.n	801d156 <HAL_TIM_PWM_Stop+0xbe>
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	6a1a      	ldr	r2, [r3, #32]
 801d13c:	f244 4344 	movw	r3, #17476	; 0x4444
 801d140:	4013      	ands	r3, r2
 801d142:	2b00      	cmp	r3, #0
 801d144:	d107      	bne.n	801d156 <HAL_TIM_PWM_Stop+0xbe>
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	681a      	ldr	r2, [r3, #0]
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	f022 0201 	bic.w	r2, r2, #1
 801d154:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d104      	bne.n	801d166 <HAL_TIM_PWM_Stop+0xce>
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	2201      	movs	r2, #1
 801d160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d164:	e023      	b.n	801d1ae <HAL_TIM_PWM_Stop+0x116>
 801d166:	683b      	ldr	r3, [r7, #0]
 801d168:	2b04      	cmp	r3, #4
 801d16a:	d104      	bne.n	801d176 <HAL_TIM_PWM_Stop+0xde>
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	2201      	movs	r2, #1
 801d170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d174:	e01b      	b.n	801d1ae <HAL_TIM_PWM_Stop+0x116>
 801d176:	683b      	ldr	r3, [r7, #0]
 801d178:	2b08      	cmp	r3, #8
 801d17a:	d104      	bne.n	801d186 <HAL_TIM_PWM_Stop+0xee>
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	2201      	movs	r2, #1
 801d180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d184:	e013      	b.n	801d1ae <HAL_TIM_PWM_Stop+0x116>
 801d186:	683b      	ldr	r3, [r7, #0]
 801d188:	2b0c      	cmp	r3, #12
 801d18a:	d104      	bne.n	801d196 <HAL_TIM_PWM_Stop+0xfe>
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	2201      	movs	r2, #1
 801d190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801d194:	e00b      	b.n	801d1ae <HAL_TIM_PWM_Stop+0x116>
 801d196:	683b      	ldr	r3, [r7, #0]
 801d198:	2b10      	cmp	r3, #16
 801d19a:	d104      	bne.n	801d1a6 <HAL_TIM_PWM_Stop+0x10e>
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	2201      	movs	r2, #1
 801d1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d1a4:	e003      	b.n	801d1ae <HAL_TIM_PWM_Stop+0x116>
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	2201      	movs	r2, #1
 801d1aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801d1ae:	2300      	movs	r3, #0
}
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	3708      	adds	r7, #8
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	bd80      	pop	{r7, pc}
 801d1b8:	40012c00 	.word	0x40012c00
 801d1bc:	40013400 	.word	0x40013400
 801d1c0:	40014000 	.word	0x40014000
 801d1c4:	40014400 	.word	0x40014400
 801d1c8:	40014800 	.word	0x40014800
 801d1cc:	40015000 	.word	0x40015000

0801d1d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d1d0:	b580      	push	{r7, lr}
 801d1d2:	b082      	sub	sp, #8
 801d1d4:	af00      	add	r7, sp, #0
 801d1d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	691b      	ldr	r3, [r3, #16]
 801d1de:	f003 0302 	and.w	r3, r3, #2
 801d1e2:	2b02      	cmp	r3, #2
 801d1e4:	d122      	bne.n	801d22c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	68db      	ldr	r3, [r3, #12]
 801d1ec:	f003 0302 	and.w	r3, r3, #2
 801d1f0:	2b02      	cmp	r3, #2
 801d1f2:	d11b      	bne.n	801d22c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	f06f 0202 	mvn.w	r2, #2
 801d1fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	2201      	movs	r2, #1
 801d202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	699b      	ldr	r3, [r3, #24]
 801d20a:	f003 0303 	and.w	r3, r3, #3
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d003      	beq.n	801d21a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d212:	6878      	ldr	r0, [r7, #4]
 801d214:	f000 fa84 	bl	801d720 <HAL_TIM_IC_CaptureCallback>
 801d218:	e005      	b.n	801d226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d21a:	6878      	ldr	r0, [r7, #4]
 801d21c:	f000 fa76 	bl	801d70c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d220:	6878      	ldr	r0, [r7, #4]
 801d222:	f000 fa87 	bl	801d734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	2200      	movs	r2, #0
 801d22a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	691b      	ldr	r3, [r3, #16]
 801d232:	f003 0304 	and.w	r3, r3, #4
 801d236:	2b04      	cmp	r3, #4
 801d238:	d122      	bne.n	801d280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	68db      	ldr	r3, [r3, #12]
 801d240:	f003 0304 	and.w	r3, r3, #4
 801d244:	2b04      	cmp	r3, #4
 801d246:	d11b      	bne.n	801d280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	f06f 0204 	mvn.w	r2, #4
 801d250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	2202      	movs	r2, #2
 801d256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	699b      	ldr	r3, [r3, #24]
 801d25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d262:	2b00      	cmp	r3, #0
 801d264:	d003      	beq.n	801d26e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d266:	6878      	ldr	r0, [r7, #4]
 801d268:	f000 fa5a 	bl	801d720 <HAL_TIM_IC_CaptureCallback>
 801d26c:	e005      	b.n	801d27a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d26e:	6878      	ldr	r0, [r7, #4]
 801d270:	f000 fa4c 	bl	801d70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d274:	6878      	ldr	r0, [r7, #4]
 801d276:	f000 fa5d 	bl	801d734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	2200      	movs	r2, #0
 801d27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	691b      	ldr	r3, [r3, #16]
 801d286:	f003 0308 	and.w	r3, r3, #8
 801d28a:	2b08      	cmp	r3, #8
 801d28c:	d122      	bne.n	801d2d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	68db      	ldr	r3, [r3, #12]
 801d294:	f003 0308 	and.w	r3, r3, #8
 801d298:	2b08      	cmp	r3, #8
 801d29a:	d11b      	bne.n	801d2d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	f06f 0208 	mvn.w	r2, #8
 801d2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	2204      	movs	r2, #4
 801d2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	69db      	ldr	r3, [r3, #28]
 801d2b2:	f003 0303 	and.w	r3, r3, #3
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d003      	beq.n	801d2c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d2ba:	6878      	ldr	r0, [r7, #4]
 801d2bc:	f000 fa30 	bl	801d720 <HAL_TIM_IC_CaptureCallback>
 801d2c0:	e005      	b.n	801d2ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d2c2:	6878      	ldr	r0, [r7, #4]
 801d2c4:	f000 fa22 	bl	801d70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2c8:	6878      	ldr	r0, [r7, #4]
 801d2ca:	f000 fa33 	bl	801d734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	691b      	ldr	r3, [r3, #16]
 801d2da:	f003 0310 	and.w	r3, r3, #16
 801d2de:	2b10      	cmp	r3, #16
 801d2e0:	d122      	bne.n	801d328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	68db      	ldr	r3, [r3, #12]
 801d2e8:	f003 0310 	and.w	r3, r3, #16
 801d2ec:	2b10      	cmp	r3, #16
 801d2ee:	d11b      	bne.n	801d328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	f06f 0210 	mvn.w	r2, #16
 801d2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	2208      	movs	r2, #8
 801d2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	69db      	ldr	r3, [r3, #28]
 801d306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d003      	beq.n	801d316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d30e:	6878      	ldr	r0, [r7, #4]
 801d310:	f000 fa06 	bl	801d720 <HAL_TIM_IC_CaptureCallback>
 801d314:	e005      	b.n	801d322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d316:	6878      	ldr	r0, [r7, #4]
 801d318:	f000 f9f8 	bl	801d70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d31c:	6878      	ldr	r0, [r7, #4]
 801d31e:	f000 fa09 	bl	801d734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	2200      	movs	r2, #0
 801d326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	691b      	ldr	r3, [r3, #16]
 801d32e:	f003 0301 	and.w	r3, r3, #1
 801d332:	2b01      	cmp	r3, #1
 801d334:	d10e      	bne.n	801d354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	68db      	ldr	r3, [r3, #12]
 801d33c:	f003 0301 	and.w	r3, r3, #1
 801d340:	2b01      	cmp	r3, #1
 801d342:	d107      	bne.n	801d354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	f06f 0201 	mvn.w	r2, #1
 801d34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d34e:	6878      	ldr	r0, [r7, #4]
 801d350:	f000 f9d2 	bl	801d6f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	691b      	ldr	r3, [r3, #16]
 801d35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d35e:	2b80      	cmp	r3, #128	; 0x80
 801d360:	d10e      	bne.n	801d380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	68db      	ldr	r3, [r3, #12]
 801d368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d36c:	2b80      	cmp	r3, #128	; 0x80
 801d36e:	d107      	bne.n	801d380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d37a:	6878      	ldr	r0, [r7, #4]
 801d37c:	f000 ff26 	bl	801e1cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	691b      	ldr	r3, [r3, #16]
 801d386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d38e:	d10e      	bne.n	801d3ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	68db      	ldr	r3, [r3, #12]
 801d396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d39a:	2b80      	cmp	r3, #128	; 0x80
 801d39c:	d107      	bne.n	801d3ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d3a8:	6878      	ldr	r0, [r7, #4]
 801d3aa:	f000 ff19 	bl	801e1e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	691b      	ldr	r3, [r3, #16]
 801d3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3b8:	2b40      	cmp	r3, #64	; 0x40
 801d3ba:	d10e      	bne.n	801d3da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	68db      	ldr	r3, [r3, #12]
 801d3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3c6:	2b40      	cmp	r3, #64	; 0x40
 801d3c8:	d107      	bne.n	801d3da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d3d4:	6878      	ldr	r0, [r7, #4]
 801d3d6:	f000 f9b7 	bl	801d748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	691b      	ldr	r3, [r3, #16]
 801d3e0:	f003 0320 	and.w	r3, r3, #32
 801d3e4:	2b20      	cmp	r3, #32
 801d3e6:	d10e      	bne.n	801d406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	68db      	ldr	r3, [r3, #12]
 801d3ee:	f003 0320 	and.w	r3, r3, #32
 801d3f2:	2b20      	cmp	r3, #32
 801d3f4:	d107      	bne.n	801d406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	f06f 0220 	mvn.w	r2, #32
 801d3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d400:	6878      	ldr	r0, [r7, #4]
 801d402:	f000 fed9 	bl	801e1b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	691b      	ldr	r3, [r3, #16]
 801d40c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d414:	d10f      	bne.n	801d436 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	68db      	ldr	r3, [r3, #12]
 801d41c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d424:	d107      	bne.n	801d436 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801d42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801d430:	6878      	ldr	r0, [r7, #4]
 801d432:	f000 fedf 	bl	801e1f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	691b      	ldr	r3, [r3, #16]
 801d43c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d444:	d10f      	bne.n	801d466 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	68db      	ldr	r3, [r3, #12]
 801d44c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d454:	d107      	bne.n	801d466 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801d45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801d460:	6878      	ldr	r0, [r7, #4]
 801d462:	f000 fed1 	bl	801e208 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	691b      	ldr	r3, [r3, #16]
 801d46c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d474:	d10f      	bne.n	801d496 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	68db      	ldr	r3, [r3, #12]
 801d47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d484:	d107      	bne.n	801d496 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801d48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801d490:	6878      	ldr	r0, [r7, #4]
 801d492:	f000 fec3 	bl	801e21c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	691b      	ldr	r3, [r3, #16]
 801d49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d4a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d4a4:	d10f      	bne.n	801d4c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	681b      	ldr	r3, [r3, #0]
 801d4aa:	68db      	ldr	r3, [r3, #12]
 801d4ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d4b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d4b4:	d107      	bne.n	801d4c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801d4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801d4c0:	6878      	ldr	r0, [r7, #4]
 801d4c2:	f000 feb5 	bl	801e230 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d4c6:	bf00      	nop
 801d4c8:	3708      	adds	r7, #8
 801d4ca:	46bd      	mov	sp, r7
 801d4cc:	bd80      	pop	{r7, pc}
	...

0801d4d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b086      	sub	sp, #24
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	60f8      	str	r0, [r7, #12]
 801d4d8:	60b9      	str	r1, [r7, #8]
 801d4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d4dc:	2300      	movs	r3, #0
 801d4de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d4e6:	2b01      	cmp	r3, #1
 801d4e8:	d101      	bne.n	801d4ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 801d4ea:	2302      	movs	r3, #2
 801d4ec:	e0ff      	b.n	801d6ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	2201      	movs	r2, #1
 801d4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	2b14      	cmp	r3, #20
 801d4fa:	f200 80f0 	bhi.w	801d6de <HAL_TIM_PWM_ConfigChannel+0x20e>
 801d4fe:	a201      	add	r2, pc, #4	; (adr r2, 801d504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801d500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d504:	0801d559 	.word	0x0801d559
 801d508:	0801d6df 	.word	0x0801d6df
 801d50c:	0801d6df 	.word	0x0801d6df
 801d510:	0801d6df 	.word	0x0801d6df
 801d514:	0801d599 	.word	0x0801d599
 801d518:	0801d6df 	.word	0x0801d6df
 801d51c:	0801d6df 	.word	0x0801d6df
 801d520:	0801d6df 	.word	0x0801d6df
 801d524:	0801d5db 	.word	0x0801d5db
 801d528:	0801d6df 	.word	0x0801d6df
 801d52c:	0801d6df 	.word	0x0801d6df
 801d530:	0801d6df 	.word	0x0801d6df
 801d534:	0801d61b 	.word	0x0801d61b
 801d538:	0801d6df 	.word	0x0801d6df
 801d53c:	0801d6df 	.word	0x0801d6df
 801d540:	0801d6df 	.word	0x0801d6df
 801d544:	0801d65d 	.word	0x0801d65d
 801d548:	0801d6df 	.word	0x0801d6df
 801d54c:	0801d6df 	.word	0x0801d6df
 801d550:	0801d6df 	.word	0x0801d6df
 801d554:	0801d69d 	.word	0x0801d69d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	681b      	ldr	r3, [r3, #0]
 801d55c:	68b9      	ldr	r1, [r7, #8]
 801d55e:	4618      	mov	r0, r3
 801d560:	f000 f99a 	bl	801d898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	699a      	ldr	r2, [r3, #24]
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	681b      	ldr	r3, [r3, #0]
 801d56e:	f042 0208 	orr.w	r2, r2, #8
 801d572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	699a      	ldr	r2, [r3, #24]
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	f022 0204 	bic.w	r2, r2, #4
 801d582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	6999      	ldr	r1, [r3, #24]
 801d58a:	68bb      	ldr	r3, [r7, #8]
 801d58c:	691a      	ldr	r2, [r3, #16]
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	430a      	orrs	r2, r1
 801d594:	619a      	str	r2, [r3, #24]
      break;
 801d596:	e0a5      	b.n	801d6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	68b9      	ldr	r1, [r7, #8]
 801d59e:	4618      	mov	r0, r3
 801d5a0:	f000 fa14 	bl	801d9cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	699a      	ldr	r2, [r3, #24]
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d5b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	699a      	ldr	r2, [r3, #24]
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d5c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	6999      	ldr	r1, [r3, #24]
 801d5ca:	68bb      	ldr	r3, [r7, #8]
 801d5cc:	691b      	ldr	r3, [r3, #16]
 801d5ce:	021a      	lsls	r2, r3, #8
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	430a      	orrs	r2, r1
 801d5d6:	619a      	str	r2, [r3, #24]
      break;
 801d5d8:	e084      	b.n	801d6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	68b9      	ldr	r1, [r7, #8]
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f000 fa87 	bl	801daf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	69da      	ldr	r2, [r3, #28]
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	f042 0208 	orr.w	r2, r2, #8
 801d5f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	681b      	ldr	r3, [r3, #0]
 801d5fa:	69da      	ldr	r2, [r3, #28]
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	f022 0204 	bic.w	r2, r2, #4
 801d604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	69d9      	ldr	r1, [r3, #28]
 801d60c:	68bb      	ldr	r3, [r7, #8]
 801d60e:	691a      	ldr	r2, [r3, #16]
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	430a      	orrs	r2, r1
 801d616:	61da      	str	r2, [r3, #28]
      break;
 801d618:	e064      	b.n	801d6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	68b9      	ldr	r1, [r7, #8]
 801d620:	4618      	mov	r0, r3
 801d622:	f000 faf9 	bl	801dc18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	69da      	ldr	r2, [r3, #28]
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	69da      	ldr	r2, [r3, #28]
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	69d9      	ldr	r1, [r3, #28]
 801d64c:	68bb      	ldr	r3, [r7, #8]
 801d64e:	691b      	ldr	r3, [r3, #16]
 801d650:	021a      	lsls	r2, r3, #8
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	430a      	orrs	r2, r1
 801d658:	61da      	str	r2, [r3, #28]
      break;
 801d65a:	e043      	b.n	801d6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	68b9      	ldr	r1, [r7, #8]
 801d662:	4618      	mov	r0, r3
 801d664:	f000 fb6c 	bl	801dd40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	681b      	ldr	r3, [r3, #0]
 801d672:	f042 0208 	orr.w	r2, r2, #8
 801d676:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	f022 0204 	bic.w	r2, r2, #4
 801d686:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d68e:	68bb      	ldr	r3, [r7, #8]
 801d690:	691a      	ldr	r2, [r3, #16]
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	430a      	orrs	r2, r1
 801d698:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d69a:	e023      	b.n	801d6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	68b9      	ldr	r1, [r7, #8]
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	f000 fbb6 	bl	801de14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d6b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d6b8:	68fb      	ldr	r3, [r7, #12]
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d6c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d6ce:	68bb      	ldr	r3, [r7, #8]
 801d6d0:	691b      	ldr	r3, [r3, #16]
 801d6d2:	021a      	lsls	r2, r3, #8
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	681b      	ldr	r3, [r3, #0]
 801d6d8:	430a      	orrs	r2, r1
 801d6da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d6dc:	e002      	b.n	801d6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801d6de:	2301      	movs	r3, #1
 801d6e0:	75fb      	strb	r3, [r7, #23]
      break;
 801d6e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	3718      	adds	r7, #24
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	bd80      	pop	{r7, pc}
 801d6f6:	bf00      	nop

0801d6f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d6f8:	b480      	push	{r7}
 801d6fa:	b083      	sub	sp, #12
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801d700:	bf00      	nop
 801d702:	370c      	adds	r7, #12
 801d704:	46bd      	mov	sp, r7
 801d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d70a:	4770      	bx	lr

0801d70c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d70c:	b480      	push	{r7}
 801d70e:	b083      	sub	sp, #12
 801d710:	af00      	add	r7, sp, #0
 801d712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d714:	bf00      	nop
 801d716:	370c      	adds	r7, #12
 801d718:	46bd      	mov	sp, r7
 801d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d71e:	4770      	bx	lr

0801d720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d720:	b480      	push	{r7}
 801d722:	b083      	sub	sp, #12
 801d724:	af00      	add	r7, sp, #0
 801d726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d728:	bf00      	nop
 801d72a:	370c      	adds	r7, #12
 801d72c:	46bd      	mov	sp, r7
 801d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d732:	4770      	bx	lr

0801d734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d734:	b480      	push	{r7}
 801d736:	b083      	sub	sp, #12
 801d738:	af00      	add	r7, sp, #0
 801d73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d73c:	bf00      	nop
 801d73e:	370c      	adds	r7, #12
 801d740:	46bd      	mov	sp, r7
 801d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d746:	4770      	bx	lr

0801d748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d748:	b480      	push	{r7}
 801d74a:	b083      	sub	sp, #12
 801d74c:	af00      	add	r7, sp, #0
 801d74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d750:	bf00      	nop
 801d752:	370c      	adds	r7, #12
 801d754:	46bd      	mov	sp, r7
 801d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d75a:	4770      	bx	lr

0801d75c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d75c:	b480      	push	{r7}
 801d75e:	b085      	sub	sp, #20
 801d760:	af00      	add	r7, sp, #0
 801d762:	6078      	str	r0, [r7, #4]
 801d764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	4a42      	ldr	r2, [pc, #264]	; (801d878 <TIM_Base_SetConfig+0x11c>)
 801d770:	4293      	cmp	r3, r2
 801d772:	d013      	beq.n	801d79c <TIM_Base_SetConfig+0x40>
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d77a:	d00f      	beq.n	801d79c <TIM_Base_SetConfig+0x40>
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	4a3f      	ldr	r2, [pc, #252]	; (801d87c <TIM_Base_SetConfig+0x120>)
 801d780:	4293      	cmp	r3, r2
 801d782:	d00b      	beq.n	801d79c <TIM_Base_SetConfig+0x40>
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	4a3e      	ldr	r2, [pc, #248]	; (801d880 <TIM_Base_SetConfig+0x124>)
 801d788:	4293      	cmp	r3, r2
 801d78a:	d007      	beq.n	801d79c <TIM_Base_SetConfig+0x40>
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	4a3d      	ldr	r2, [pc, #244]	; (801d884 <TIM_Base_SetConfig+0x128>)
 801d790:	4293      	cmp	r3, r2
 801d792:	d003      	beq.n	801d79c <TIM_Base_SetConfig+0x40>
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	4a3c      	ldr	r2, [pc, #240]	; (801d888 <TIM_Base_SetConfig+0x12c>)
 801d798:	4293      	cmp	r3, r2
 801d79a:	d108      	bne.n	801d7ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d7a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d7a4:	683b      	ldr	r3, [r7, #0]
 801d7a6:	685b      	ldr	r3, [r3, #4]
 801d7a8:	68fa      	ldr	r2, [r7, #12]
 801d7aa:	4313      	orrs	r3, r2
 801d7ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	4a31      	ldr	r2, [pc, #196]	; (801d878 <TIM_Base_SetConfig+0x11c>)
 801d7b2:	4293      	cmp	r3, r2
 801d7b4:	d01f      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d7bc:	d01b      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	4a2e      	ldr	r2, [pc, #184]	; (801d87c <TIM_Base_SetConfig+0x120>)
 801d7c2:	4293      	cmp	r3, r2
 801d7c4:	d017      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	4a2d      	ldr	r2, [pc, #180]	; (801d880 <TIM_Base_SetConfig+0x124>)
 801d7ca:	4293      	cmp	r3, r2
 801d7cc:	d013      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	4a2c      	ldr	r2, [pc, #176]	; (801d884 <TIM_Base_SetConfig+0x128>)
 801d7d2:	4293      	cmp	r3, r2
 801d7d4:	d00f      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	4a2c      	ldr	r2, [pc, #176]	; (801d88c <TIM_Base_SetConfig+0x130>)
 801d7da:	4293      	cmp	r3, r2
 801d7dc:	d00b      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	4a2b      	ldr	r2, [pc, #172]	; (801d890 <TIM_Base_SetConfig+0x134>)
 801d7e2:	4293      	cmp	r3, r2
 801d7e4:	d007      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	4a2a      	ldr	r2, [pc, #168]	; (801d894 <TIM_Base_SetConfig+0x138>)
 801d7ea:	4293      	cmp	r3, r2
 801d7ec:	d003      	beq.n	801d7f6 <TIM_Base_SetConfig+0x9a>
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	4a25      	ldr	r2, [pc, #148]	; (801d888 <TIM_Base_SetConfig+0x12c>)
 801d7f2:	4293      	cmp	r3, r2
 801d7f4:	d108      	bne.n	801d808 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d7fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d7fe:	683b      	ldr	r3, [r7, #0]
 801d800:	68db      	ldr	r3, [r3, #12]
 801d802:	68fa      	ldr	r2, [r7, #12]
 801d804:	4313      	orrs	r3, r2
 801d806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d80e:	683b      	ldr	r3, [r7, #0]
 801d810:	695b      	ldr	r3, [r3, #20]
 801d812:	4313      	orrs	r3, r2
 801d814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	68fa      	ldr	r2, [r7, #12]
 801d81a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d81c:	683b      	ldr	r3, [r7, #0]
 801d81e:	689a      	ldr	r2, [r3, #8]
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d824:	683b      	ldr	r3, [r7, #0]
 801d826:	681a      	ldr	r2, [r3, #0]
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	4a12      	ldr	r2, [pc, #72]	; (801d878 <TIM_Base_SetConfig+0x11c>)
 801d830:	4293      	cmp	r3, r2
 801d832:	d013      	beq.n	801d85c <TIM_Base_SetConfig+0x100>
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	4a13      	ldr	r2, [pc, #76]	; (801d884 <TIM_Base_SetConfig+0x128>)
 801d838:	4293      	cmp	r3, r2
 801d83a:	d00f      	beq.n	801d85c <TIM_Base_SetConfig+0x100>
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	4a13      	ldr	r2, [pc, #76]	; (801d88c <TIM_Base_SetConfig+0x130>)
 801d840:	4293      	cmp	r3, r2
 801d842:	d00b      	beq.n	801d85c <TIM_Base_SetConfig+0x100>
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	4a12      	ldr	r2, [pc, #72]	; (801d890 <TIM_Base_SetConfig+0x134>)
 801d848:	4293      	cmp	r3, r2
 801d84a:	d007      	beq.n	801d85c <TIM_Base_SetConfig+0x100>
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	4a11      	ldr	r2, [pc, #68]	; (801d894 <TIM_Base_SetConfig+0x138>)
 801d850:	4293      	cmp	r3, r2
 801d852:	d003      	beq.n	801d85c <TIM_Base_SetConfig+0x100>
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	4a0c      	ldr	r2, [pc, #48]	; (801d888 <TIM_Base_SetConfig+0x12c>)
 801d858:	4293      	cmp	r3, r2
 801d85a:	d103      	bne.n	801d864 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d85c:	683b      	ldr	r3, [r7, #0]
 801d85e:	691a      	ldr	r2, [r3, #16]
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	2201      	movs	r2, #1
 801d868:	615a      	str	r2, [r3, #20]
}
 801d86a:	bf00      	nop
 801d86c:	3714      	adds	r7, #20
 801d86e:	46bd      	mov	sp, r7
 801d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d874:	4770      	bx	lr
 801d876:	bf00      	nop
 801d878:	40012c00 	.word	0x40012c00
 801d87c:	40000400 	.word	0x40000400
 801d880:	40000800 	.word	0x40000800
 801d884:	40013400 	.word	0x40013400
 801d888:	40015000 	.word	0x40015000
 801d88c:	40014000 	.word	0x40014000
 801d890:	40014400 	.word	0x40014400
 801d894:	40014800 	.word	0x40014800

0801d898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d898:	b480      	push	{r7}
 801d89a:	b087      	sub	sp, #28
 801d89c:	af00      	add	r7, sp, #0
 801d89e:	6078      	str	r0, [r7, #4]
 801d8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	6a1b      	ldr	r3, [r3, #32]
 801d8a6:	f023 0201 	bic.w	r2, r3, #1
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	6a1b      	ldr	r3, [r3, #32]
 801d8b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	685b      	ldr	r3, [r3, #4]
 801d8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	699b      	ldr	r3, [r3, #24]
 801d8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	f023 0303 	bic.w	r3, r3, #3
 801d8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d8d4:	683b      	ldr	r3, [r7, #0]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	68fa      	ldr	r2, [r7, #12]
 801d8da:	4313      	orrs	r3, r2
 801d8dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d8de:	697b      	ldr	r3, [r7, #20]
 801d8e0:	f023 0302 	bic.w	r3, r3, #2
 801d8e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d8e6:	683b      	ldr	r3, [r7, #0]
 801d8e8:	689b      	ldr	r3, [r3, #8]
 801d8ea:	697a      	ldr	r2, [r7, #20]
 801d8ec:	4313      	orrs	r3, r2
 801d8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	4a30      	ldr	r2, [pc, #192]	; (801d9b4 <TIM_OC1_SetConfig+0x11c>)
 801d8f4:	4293      	cmp	r3, r2
 801d8f6:	d013      	beq.n	801d920 <TIM_OC1_SetConfig+0x88>
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	4a2f      	ldr	r2, [pc, #188]	; (801d9b8 <TIM_OC1_SetConfig+0x120>)
 801d8fc:	4293      	cmp	r3, r2
 801d8fe:	d00f      	beq.n	801d920 <TIM_OC1_SetConfig+0x88>
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	4a2e      	ldr	r2, [pc, #184]	; (801d9bc <TIM_OC1_SetConfig+0x124>)
 801d904:	4293      	cmp	r3, r2
 801d906:	d00b      	beq.n	801d920 <TIM_OC1_SetConfig+0x88>
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	4a2d      	ldr	r2, [pc, #180]	; (801d9c0 <TIM_OC1_SetConfig+0x128>)
 801d90c:	4293      	cmp	r3, r2
 801d90e:	d007      	beq.n	801d920 <TIM_OC1_SetConfig+0x88>
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	4a2c      	ldr	r2, [pc, #176]	; (801d9c4 <TIM_OC1_SetConfig+0x12c>)
 801d914:	4293      	cmp	r3, r2
 801d916:	d003      	beq.n	801d920 <TIM_OC1_SetConfig+0x88>
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	4a2b      	ldr	r2, [pc, #172]	; (801d9c8 <TIM_OC1_SetConfig+0x130>)
 801d91c:	4293      	cmp	r3, r2
 801d91e:	d10c      	bne.n	801d93a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d920:	697b      	ldr	r3, [r7, #20]
 801d922:	f023 0308 	bic.w	r3, r3, #8
 801d926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d928:	683b      	ldr	r3, [r7, #0]
 801d92a:	68db      	ldr	r3, [r3, #12]
 801d92c:	697a      	ldr	r2, [r7, #20]
 801d92e:	4313      	orrs	r3, r2
 801d930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d932:	697b      	ldr	r3, [r7, #20]
 801d934:	f023 0304 	bic.w	r3, r3, #4
 801d938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	4a1d      	ldr	r2, [pc, #116]	; (801d9b4 <TIM_OC1_SetConfig+0x11c>)
 801d93e:	4293      	cmp	r3, r2
 801d940:	d013      	beq.n	801d96a <TIM_OC1_SetConfig+0xd2>
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	4a1c      	ldr	r2, [pc, #112]	; (801d9b8 <TIM_OC1_SetConfig+0x120>)
 801d946:	4293      	cmp	r3, r2
 801d948:	d00f      	beq.n	801d96a <TIM_OC1_SetConfig+0xd2>
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	4a1b      	ldr	r2, [pc, #108]	; (801d9bc <TIM_OC1_SetConfig+0x124>)
 801d94e:	4293      	cmp	r3, r2
 801d950:	d00b      	beq.n	801d96a <TIM_OC1_SetConfig+0xd2>
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	4a1a      	ldr	r2, [pc, #104]	; (801d9c0 <TIM_OC1_SetConfig+0x128>)
 801d956:	4293      	cmp	r3, r2
 801d958:	d007      	beq.n	801d96a <TIM_OC1_SetConfig+0xd2>
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	4a19      	ldr	r2, [pc, #100]	; (801d9c4 <TIM_OC1_SetConfig+0x12c>)
 801d95e:	4293      	cmp	r3, r2
 801d960:	d003      	beq.n	801d96a <TIM_OC1_SetConfig+0xd2>
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	4a18      	ldr	r2, [pc, #96]	; (801d9c8 <TIM_OC1_SetConfig+0x130>)
 801d966:	4293      	cmp	r3, r2
 801d968:	d111      	bne.n	801d98e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d96a:	693b      	ldr	r3, [r7, #16]
 801d96c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d972:	693b      	ldr	r3, [r7, #16]
 801d974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d97a:	683b      	ldr	r3, [r7, #0]
 801d97c:	695b      	ldr	r3, [r3, #20]
 801d97e:	693a      	ldr	r2, [r7, #16]
 801d980:	4313      	orrs	r3, r2
 801d982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d984:	683b      	ldr	r3, [r7, #0]
 801d986:	699b      	ldr	r3, [r3, #24]
 801d988:	693a      	ldr	r2, [r7, #16]
 801d98a:	4313      	orrs	r3, r2
 801d98c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	693a      	ldr	r2, [r7, #16]
 801d992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	68fa      	ldr	r2, [r7, #12]
 801d998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d99a:	683b      	ldr	r3, [r7, #0]
 801d99c:	685a      	ldr	r2, [r3, #4]
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	697a      	ldr	r2, [r7, #20]
 801d9a6:	621a      	str	r2, [r3, #32]
}
 801d9a8:	bf00      	nop
 801d9aa:	371c      	adds	r7, #28
 801d9ac:	46bd      	mov	sp, r7
 801d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9b2:	4770      	bx	lr
 801d9b4:	40012c00 	.word	0x40012c00
 801d9b8:	40013400 	.word	0x40013400
 801d9bc:	40014000 	.word	0x40014000
 801d9c0:	40014400 	.word	0x40014400
 801d9c4:	40014800 	.word	0x40014800
 801d9c8:	40015000 	.word	0x40015000

0801d9cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d9cc:	b480      	push	{r7}
 801d9ce:	b087      	sub	sp, #28
 801d9d0:	af00      	add	r7, sp, #0
 801d9d2:	6078      	str	r0, [r7, #4]
 801d9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	6a1b      	ldr	r3, [r3, #32]
 801d9da:	f023 0210 	bic.w	r2, r3, #16
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	6a1b      	ldr	r3, [r3, #32]
 801d9e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	685b      	ldr	r3, [r3, #4]
 801d9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	699b      	ldr	r3, [r3, #24]
 801d9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d9fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d9fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801da08:	683b      	ldr	r3, [r7, #0]
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	021b      	lsls	r3, r3, #8
 801da0e:	68fa      	ldr	r2, [r7, #12]
 801da10:	4313      	orrs	r3, r2
 801da12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801da14:	697b      	ldr	r3, [r7, #20]
 801da16:	f023 0320 	bic.w	r3, r3, #32
 801da1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801da1c:	683b      	ldr	r3, [r7, #0]
 801da1e:	689b      	ldr	r3, [r3, #8]
 801da20:	011b      	lsls	r3, r3, #4
 801da22:	697a      	ldr	r2, [r7, #20]
 801da24:	4313      	orrs	r3, r2
 801da26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	4a2c      	ldr	r2, [pc, #176]	; (801dadc <TIM_OC2_SetConfig+0x110>)
 801da2c:	4293      	cmp	r3, r2
 801da2e:	d007      	beq.n	801da40 <TIM_OC2_SetConfig+0x74>
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	4a2b      	ldr	r2, [pc, #172]	; (801dae0 <TIM_OC2_SetConfig+0x114>)
 801da34:	4293      	cmp	r3, r2
 801da36:	d003      	beq.n	801da40 <TIM_OC2_SetConfig+0x74>
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	4a2a      	ldr	r2, [pc, #168]	; (801dae4 <TIM_OC2_SetConfig+0x118>)
 801da3c:	4293      	cmp	r3, r2
 801da3e:	d10d      	bne.n	801da5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801da40:	697b      	ldr	r3, [r7, #20]
 801da42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801da46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801da48:	683b      	ldr	r3, [r7, #0]
 801da4a:	68db      	ldr	r3, [r3, #12]
 801da4c:	011b      	lsls	r3, r3, #4
 801da4e:	697a      	ldr	r2, [r7, #20]
 801da50:	4313      	orrs	r3, r2
 801da52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801da54:	697b      	ldr	r3, [r7, #20]
 801da56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801da5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	4a1f      	ldr	r2, [pc, #124]	; (801dadc <TIM_OC2_SetConfig+0x110>)
 801da60:	4293      	cmp	r3, r2
 801da62:	d013      	beq.n	801da8c <TIM_OC2_SetConfig+0xc0>
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	4a1e      	ldr	r2, [pc, #120]	; (801dae0 <TIM_OC2_SetConfig+0x114>)
 801da68:	4293      	cmp	r3, r2
 801da6a:	d00f      	beq.n	801da8c <TIM_OC2_SetConfig+0xc0>
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	4a1e      	ldr	r2, [pc, #120]	; (801dae8 <TIM_OC2_SetConfig+0x11c>)
 801da70:	4293      	cmp	r3, r2
 801da72:	d00b      	beq.n	801da8c <TIM_OC2_SetConfig+0xc0>
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	4a1d      	ldr	r2, [pc, #116]	; (801daec <TIM_OC2_SetConfig+0x120>)
 801da78:	4293      	cmp	r3, r2
 801da7a:	d007      	beq.n	801da8c <TIM_OC2_SetConfig+0xc0>
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	4a1c      	ldr	r2, [pc, #112]	; (801daf0 <TIM_OC2_SetConfig+0x124>)
 801da80:	4293      	cmp	r3, r2
 801da82:	d003      	beq.n	801da8c <TIM_OC2_SetConfig+0xc0>
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	4a17      	ldr	r2, [pc, #92]	; (801dae4 <TIM_OC2_SetConfig+0x118>)
 801da88:	4293      	cmp	r3, r2
 801da8a:	d113      	bne.n	801dab4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801da8c:	693b      	ldr	r3, [r7, #16]
 801da8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801da92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801da94:	693b      	ldr	r3, [r7, #16]
 801da96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801da9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801da9c:	683b      	ldr	r3, [r7, #0]
 801da9e:	695b      	ldr	r3, [r3, #20]
 801daa0:	009b      	lsls	r3, r3, #2
 801daa2:	693a      	ldr	r2, [r7, #16]
 801daa4:	4313      	orrs	r3, r2
 801daa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801daa8:	683b      	ldr	r3, [r7, #0]
 801daaa:	699b      	ldr	r3, [r3, #24]
 801daac:	009b      	lsls	r3, r3, #2
 801daae:	693a      	ldr	r2, [r7, #16]
 801dab0:	4313      	orrs	r3, r2
 801dab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	693a      	ldr	r2, [r7, #16]
 801dab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	68fa      	ldr	r2, [r7, #12]
 801dabe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801dac0:	683b      	ldr	r3, [r7, #0]
 801dac2:	685a      	ldr	r2, [r3, #4]
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	697a      	ldr	r2, [r7, #20]
 801dacc:	621a      	str	r2, [r3, #32]
}
 801dace:	bf00      	nop
 801dad0:	371c      	adds	r7, #28
 801dad2:	46bd      	mov	sp, r7
 801dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dad8:	4770      	bx	lr
 801dada:	bf00      	nop
 801dadc:	40012c00 	.word	0x40012c00
 801dae0:	40013400 	.word	0x40013400
 801dae4:	40015000 	.word	0x40015000
 801dae8:	40014000 	.word	0x40014000
 801daec:	40014400 	.word	0x40014400
 801daf0:	40014800 	.word	0x40014800

0801daf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801daf4:	b480      	push	{r7}
 801daf6:	b087      	sub	sp, #28
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	6078      	str	r0, [r7, #4]
 801dafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	6a1b      	ldr	r3, [r3, #32]
 801db02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	6a1b      	ldr	r3, [r3, #32]
 801db0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	685b      	ldr	r3, [r3, #4]
 801db14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	69db      	ldr	r3, [r3, #28]
 801db1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801db22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801db26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	f023 0303 	bic.w	r3, r3, #3
 801db2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801db30:	683b      	ldr	r3, [r7, #0]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	68fa      	ldr	r2, [r7, #12]
 801db36:	4313      	orrs	r3, r2
 801db38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801db3a:	697b      	ldr	r3, [r7, #20]
 801db3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801db40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801db42:	683b      	ldr	r3, [r7, #0]
 801db44:	689b      	ldr	r3, [r3, #8]
 801db46:	021b      	lsls	r3, r3, #8
 801db48:	697a      	ldr	r2, [r7, #20]
 801db4a:	4313      	orrs	r3, r2
 801db4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	4a2b      	ldr	r2, [pc, #172]	; (801dc00 <TIM_OC3_SetConfig+0x10c>)
 801db52:	4293      	cmp	r3, r2
 801db54:	d007      	beq.n	801db66 <TIM_OC3_SetConfig+0x72>
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	4a2a      	ldr	r2, [pc, #168]	; (801dc04 <TIM_OC3_SetConfig+0x110>)
 801db5a:	4293      	cmp	r3, r2
 801db5c:	d003      	beq.n	801db66 <TIM_OC3_SetConfig+0x72>
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	4a29      	ldr	r2, [pc, #164]	; (801dc08 <TIM_OC3_SetConfig+0x114>)
 801db62:	4293      	cmp	r3, r2
 801db64:	d10d      	bne.n	801db82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801db66:	697b      	ldr	r3, [r7, #20]
 801db68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801db6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	68db      	ldr	r3, [r3, #12]
 801db72:	021b      	lsls	r3, r3, #8
 801db74:	697a      	ldr	r2, [r7, #20]
 801db76:	4313      	orrs	r3, r2
 801db78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801db7a:	697b      	ldr	r3, [r7, #20]
 801db7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801db80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	4a1e      	ldr	r2, [pc, #120]	; (801dc00 <TIM_OC3_SetConfig+0x10c>)
 801db86:	4293      	cmp	r3, r2
 801db88:	d013      	beq.n	801dbb2 <TIM_OC3_SetConfig+0xbe>
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	4a1d      	ldr	r2, [pc, #116]	; (801dc04 <TIM_OC3_SetConfig+0x110>)
 801db8e:	4293      	cmp	r3, r2
 801db90:	d00f      	beq.n	801dbb2 <TIM_OC3_SetConfig+0xbe>
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	4a1d      	ldr	r2, [pc, #116]	; (801dc0c <TIM_OC3_SetConfig+0x118>)
 801db96:	4293      	cmp	r3, r2
 801db98:	d00b      	beq.n	801dbb2 <TIM_OC3_SetConfig+0xbe>
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	4a1c      	ldr	r2, [pc, #112]	; (801dc10 <TIM_OC3_SetConfig+0x11c>)
 801db9e:	4293      	cmp	r3, r2
 801dba0:	d007      	beq.n	801dbb2 <TIM_OC3_SetConfig+0xbe>
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	4a1b      	ldr	r2, [pc, #108]	; (801dc14 <TIM_OC3_SetConfig+0x120>)
 801dba6:	4293      	cmp	r3, r2
 801dba8:	d003      	beq.n	801dbb2 <TIM_OC3_SetConfig+0xbe>
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	4a16      	ldr	r2, [pc, #88]	; (801dc08 <TIM_OC3_SetConfig+0x114>)
 801dbae:	4293      	cmp	r3, r2
 801dbb0:	d113      	bne.n	801dbda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801dbb2:	693b      	ldr	r3, [r7, #16]
 801dbb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dbb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801dbba:	693b      	ldr	r3, [r7, #16]
 801dbbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dbc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801dbc2:	683b      	ldr	r3, [r7, #0]
 801dbc4:	695b      	ldr	r3, [r3, #20]
 801dbc6:	011b      	lsls	r3, r3, #4
 801dbc8:	693a      	ldr	r2, [r7, #16]
 801dbca:	4313      	orrs	r3, r2
 801dbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801dbce:	683b      	ldr	r3, [r7, #0]
 801dbd0:	699b      	ldr	r3, [r3, #24]
 801dbd2:	011b      	lsls	r3, r3, #4
 801dbd4:	693a      	ldr	r2, [r7, #16]
 801dbd6:	4313      	orrs	r3, r2
 801dbd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	693a      	ldr	r2, [r7, #16]
 801dbde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	68fa      	ldr	r2, [r7, #12]
 801dbe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801dbe6:	683b      	ldr	r3, [r7, #0]
 801dbe8:	685a      	ldr	r2, [r3, #4]
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	697a      	ldr	r2, [r7, #20]
 801dbf2:	621a      	str	r2, [r3, #32]
}
 801dbf4:	bf00      	nop
 801dbf6:	371c      	adds	r7, #28
 801dbf8:	46bd      	mov	sp, r7
 801dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbfe:	4770      	bx	lr
 801dc00:	40012c00 	.word	0x40012c00
 801dc04:	40013400 	.word	0x40013400
 801dc08:	40015000 	.word	0x40015000
 801dc0c:	40014000 	.word	0x40014000
 801dc10:	40014400 	.word	0x40014400
 801dc14:	40014800 	.word	0x40014800

0801dc18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801dc18:	b480      	push	{r7}
 801dc1a:	b087      	sub	sp, #28
 801dc1c:	af00      	add	r7, sp, #0
 801dc1e:	6078      	str	r0, [r7, #4]
 801dc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	6a1b      	ldr	r3, [r3, #32]
 801dc26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	6a1b      	ldr	r3, [r3, #32]
 801dc32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	685b      	ldr	r3, [r3, #4]
 801dc38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	69db      	ldr	r3, [r3, #28]
 801dc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dc46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dc52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dc54:	683b      	ldr	r3, [r7, #0]
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	021b      	lsls	r3, r3, #8
 801dc5a:	68fa      	ldr	r2, [r7, #12]
 801dc5c:	4313      	orrs	r3, r2
 801dc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801dc60:	697b      	ldr	r3, [r7, #20]
 801dc62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801dc66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801dc68:	683b      	ldr	r3, [r7, #0]
 801dc6a:	689b      	ldr	r3, [r3, #8]
 801dc6c:	031b      	lsls	r3, r3, #12
 801dc6e:	697a      	ldr	r2, [r7, #20]
 801dc70:	4313      	orrs	r3, r2
 801dc72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	4a2c      	ldr	r2, [pc, #176]	; (801dd28 <TIM_OC4_SetConfig+0x110>)
 801dc78:	4293      	cmp	r3, r2
 801dc7a:	d007      	beq.n	801dc8c <TIM_OC4_SetConfig+0x74>
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	4a2b      	ldr	r2, [pc, #172]	; (801dd2c <TIM_OC4_SetConfig+0x114>)
 801dc80:	4293      	cmp	r3, r2
 801dc82:	d003      	beq.n	801dc8c <TIM_OC4_SetConfig+0x74>
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	4a2a      	ldr	r2, [pc, #168]	; (801dd30 <TIM_OC4_SetConfig+0x118>)
 801dc88:	4293      	cmp	r3, r2
 801dc8a:	d10d      	bne.n	801dca8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801dc8c:	697b      	ldr	r3, [r7, #20]
 801dc8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dc92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801dc94:	683b      	ldr	r3, [r7, #0]
 801dc96:	68db      	ldr	r3, [r3, #12]
 801dc98:	031b      	lsls	r3, r3, #12
 801dc9a:	697a      	ldr	r2, [r7, #20]
 801dc9c:	4313      	orrs	r3, r2
 801dc9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801dca0:	697b      	ldr	r3, [r7, #20]
 801dca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	4a1f      	ldr	r2, [pc, #124]	; (801dd28 <TIM_OC4_SetConfig+0x110>)
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d013      	beq.n	801dcd8 <TIM_OC4_SetConfig+0xc0>
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	4a1e      	ldr	r2, [pc, #120]	; (801dd2c <TIM_OC4_SetConfig+0x114>)
 801dcb4:	4293      	cmp	r3, r2
 801dcb6:	d00f      	beq.n	801dcd8 <TIM_OC4_SetConfig+0xc0>
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	4a1e      	ldr	r2, [pc, #120]	; (801dd34 <TIM_OC4_SetConfig+0x11c>)
 801dcbc:	4293      	cmp	r3, r2
 801dcbe:	d00b      	beq.n	801dcd8 <TIM_OC4_SetConfig+0xc0>
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	4a1d      	ldr	r2, [pc, #116]	; (801dd38 <TIM_OC4_SetConfig+0x120>)
 801dcc4:	4293      	cmp	r3, r2
 801dcc6:	d007      	beq.n	801dcd8 <TIM_OC4_SetConfig+0xc0>
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	4a1c      	ldr	r2, [pc, #112]	; (801dd3c <TIM_OC4_SetConfig+0x124>)
 801dccc:	4293      	cmp	r3, r2
 801dcce:	d003      	beq.n	801dcd8 <TIM_OC4_SetConfig+0xc0>
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	4a17      	ldr	r2, [pc, #92]	; (801dd30 <TIM_OC4_SetConfig+0x118>)
 801dcd4:	4293      	cmp	r3, r2
 801dcd6:	d113      	bne.n	801dd00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801dcd8:	693b      	ldr	r3, [r7, #16]
 801dcda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dcde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801dce0:	693b      	ldr	r3, [r7, #16]
 801dce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dce6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801dce8:	683b      	ldr	r3, [r7, #0]
 801dcea:	695b      	ldr	r3, [r3, #20]
 801dcec:	019b      	lsls	r3, r3, #6
 801dcee:	693a      	ldr	r2, [r7, #16]
 801dcf0:	4313      	orrs	r3, r2
 801dcf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801dcf4:	683b      	ldr	r3, [r7, #0]
 801dcf6:	699b      	ldr	r3, [r3, #24]
 801dcf8:	019b      	lsls	r3, r3, #6
 801dcfa:	693a      	ldr	r2, [r7, #16]
 801dcfc:	4313      	orrs	r3, r2
 801dcfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	693a      	ldr	r2, [r7, #16]
 801dd04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	68fa      	ldr	r2, [r7, #12]
 801dd0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801dd0c:	683b      	ldr	r3, [r7, #0]
 801dd0e:	685a      	ldr	r2, [r3, #4]
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	697a      	ldr	r2, [r7, #20]
 801dd18:	621a      	str	r2, [r3, #32]
}
 801dd1a:	bf00      	nop
 801dd1c:	371c      	adds	r7, #28
 801dd1e:	46bd      	mov	sp, r7
 801dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd24:	4770      	bx	lr
 801dd26:	bf00      	nop
 801dd28:	40012c00 	.word	0x40012c00
 801dd2c:	40013400 	.word	0x40013400
 801dd30:	40015000 	.word	0x40015000
 801dd34:	40014000 	.word	0x40014000
 801dd38:	40014400 	.word	0x40014400
 801dd3c:	40014800 	.word	0x40014800

0801dd40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801dd40:	b480      	push	{r7}
 801dd42:	b087      	sub	sp, #28
 801dd44:	af00      	add	r7, sp, #0
 801dd46:	6078      	str	r0, [r7, #4]
 801dd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	6a1b      	ldr	r3, [r3, #32]
 801dd4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	6a1b      	ldr	r3, [r3, #32]
 801dd5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	685b      	ldr	r3, [r3, #4]
 801dd60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dd62:	687b      	ldr	r3, [r7, #4]
 801dd64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dd6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dd72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dd74:	683b      	ldr	r3, [r7, #0]
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	68fa      	ldr	r2, [r7, #12]
 801dd7a:	4313      	orrs	r3, r2
 801dd7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801dd7e:	693b      	ldr	r3, [r7, #16]
 801dd80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801dd84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801dd86:	683b      	ldr	r3, [r7, #0]
 801dd88:	689b      	ldr	r3, [r3, #8]
 801dd8a:	041b      	lsls	r3, r3, #16
 801dd8c:	693a      	ldr	r2, [r7, #16]
 801dd8e:	4313      	orrs	r3, r2
 801dd90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	4a19      	ldr	r2, [pc, #100]	; (801ddfc <TIM_OC5_SetConfig+0xbc>)
 801dd96:	4293      	cmp	r3, r2
 801dd98:	d013      	beq.n	801ddc2 <TIM_OC5_SetConfig+0x82>
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	4a18      	ldr	r2, [pc, #96]	; (801de00 <TIM_OC5_SetConfig+0xc0>)
 801dd9e:	4293      	cmp	r3, r2
 801dda0:	d00f      	beq.n	801ddc2 <TIM_OC5_SetConfig+0x82>
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	4a17      	ldr	r2, [pc, #92]	; (801de04 <TIM_OC5_SetConfig+0xc4>)
 801dda6:	4293      	cmp	r3, r2
 801dda8:	d00b      	beq.n	801ddc2 <TIM_OC5_SetConfig+0x82>
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	4a16      	ldr	r2, [pc, #88]	; (801de08 <TIM_OC5_SetConfig+0xc8>)
 801ddae:	4293      	cmp	r3, r2
 801ddb0:	d007      	beq.n	801ddc2 <TIM_OC5_SetConfig+0x82>
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	4a15      	ldr	r2, [pc, #84]	; (801de0c <TIM_OC5_SetConfig+0xcc>)
 801ddb6:	4293      	cmp	r3, r2
 801ddb8:	d003      	beq.n	801ddc2 <TIM_OC5_SetConfig+0x82>
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	4a14      	ldr	r2, [pc, #80]	; (801de10 <TIM_OC5_SetConfig+0xd0>)
 801ddbe:	4293      	cmp	r3, r2
 801ddc0:	d109      	bne.n	801ddd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ddc2:	697b      	ldr	r3, [r7, #20]
 801ddc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ddc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ddca:	683b      	ldr	r3, [r7, #0]
 801ddcc:	695b      	ldr	r3, [r3, #20]
 801ddce:	021b      	lsls	r3, r3, #8
 801ddd0:	697a      	ldr	r2, [r7, #20]
 801ddd2:	4313      	orrs	r3, r2
 801ddd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	697a      	ldr	r2, [r7, #20]
 801ddda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	68fa      	ldr	r2, [r7, #12]
 801dde0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801dde2:	683b      	ldr	r3, [r7, #0]
 801dde4:	685a      	ldr	r2, [r3, #4]
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	693a      	ldr	r2, [r7, #16]
 801ddee:	621a      	str	r2, [r3, #32]
}
 801ddf0:	bf00      	nop
 801ddf2:	371c      	adds	r7, #28
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddfa:	4770      	bx	lr
 801ddfc:	40012c00 	.word	0x40012c00
 801de00:	40013400 	.word	0x40013400
 801de04:	40014000 	.word	0x40014000
 801de08:	40014400 	.word	0x40014400
 801de0c:	40014800 	.word	0x40014800
 801de10:	40015000 	.word	0x40015000

0801de14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801de14:	b480      	push	{r7}
 801de16:	b087      	sub	sp, #28
 801de18:	af00      	add	r7, sp, #0
 801de1a:	6078      	str	r0, [r7, #4]
 801de1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	6a1b      	ldr	r3, [r3, #32]
 801de22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	6a1b      	ldr	r3, [r3, #32]
 801de2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	685b      	ldr	r3, [r3, #4]
 801de34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801de3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801de42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801de46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801de48:	683b      	ldr	r3, [r7, #0]
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	021b      	lsls	r3, r3, #8
 801de4e:	68fa      	ldr	r2, [r7, #12]
 801de50:	4313      	orrs	r3, r2
 801de52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801de54:	693b      	ldr	r3, [r7, #16]
 801de56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801de5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801de5c:	683b      	ldr	r3, [r7, #0]
 801de5e:	689b      	ldr	r3, [r3, #8]
 801de60:	051b      	lsls	r3, r3, #20
 801de62:	693a      	ldr	r2, [r7, #16]
 801de64:	4313      	orrs	r3, r2
 801de66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	4a1a      	ldr	r2, [pc, #104]	; (801ded4 <TIM_OC6_SetConfig+0xc0>)
 801de6c:	4293      	cmp	r3, r2
 801de6e:	d013      	beq.n	801de98 <TIM_OC6_SetConfig+0x84>
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	4a19      	ldr	r2, [pc, #100]	; (801ded8 <TIM_OC6_SetConfig+0xc4>)
 801de74:	4293      	cmp	r3, r2
 801de76:	d00f      	beq.n	801de98 <TIM_OC6_SetConfig+0x84>
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	4a18      	ldr	r2, [pc, #96]	; (801dedc <TIM_OC6_SetConfig+0xc8>)
 801de7c:	4293      	cmp	r3, r2
 801de7e:	d00b      	beq.n	801de98 <TIM_OC6_SetConfig+0x84>
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	4a17      	ldr	r2, [pc, #92]	; (801dee0 <TIM_OC6_SetConfig+0xcc>)
 801de84:	4293      	cmp	r3, r2
 801de86:	d007      	beq.n	801de98 <TIM_OC6_SetConfig+0x84>
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	4a16      	ldr	r2, [pc, #88]	; (801dee4 <TIM_OC6_SetConfig+0xd0>)
 801de8c:	4293      	cmp	r3, r2
 801de8e:	d003      	beq.n	801de98 <TIM_OC6_SetConfig+0x84>
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	4a15      	ldr	r2, [pc, #84]	; (801dee8 <TIM_OC6_SetConfig+0xd4>)
 801de94:	4293      	cmp	r3, r2
 801de96:	d109      	bne.n	801deac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801de98:	697b      	ldr	r3, [r7, #20]
 801de9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801de9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801dea0:	683b      	ldr	r3, [r7, #0]
 801dea2:	695b      	ldr	r3, [r3, #20]
 801dea4:	029b      	lsls	r3, r3, #10
 801dea6:	697a      	ldr	r2, [r7, #20]
 801dea8:	4313      	orrs	r3, r2
 801deaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	697a      	ldr	r2, [r7, #20]
 801deb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	68fa      	ldr	r2, [r7, #12]
 801deb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801deb8:	683b      	ldr	r3, [r7, #0]
 801deba:	685a      	ldr	r2, [r3, #4]
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	693a      	ldr	r2, [r7, #16]
 801dec4:	621a      	str	r2, [r3, #32]
}
 801dec6:	bf00      	nop
 801dec8:	371c      	adds	r7, #28
 801deca:	46bd      	mov	sp, r7
 801decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ded0:	4770      	bx	lr
 801ded2:	bf00      	nop
 801ded4:	40012c00 	.word	0x40012c00
 801ded8:	40013400 	.word	0x40013400
 801dedc:	40014000 	.word	0x40014000
 801dee0:	40014400 	.word	0x40014400
 801dee4:	40014800 	.word	0x40014800
 801dee8:	40015000 	.word	0x40015000

0801deec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801deec:	b480      	push	{r7}
 801deee:	b087      	sub	sp, #28
 801def0:	af00      	add	r7, sp, #0
 801def2:	60f8      	str	r0, [r7, #12]
 801def4:	60b9      	str	r1, [r7, #8]
 801def6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801def8:	68bb      	ldr	r3, [r7, #8]
 801defa:	f003 031f 	and.w	r3, r3, #31
 801defe:	2201      	movs	r2, #1
 801df00:	fa02 f303 	lsl.w	r3, r2, r3
 801df04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	6a1a      	ldr	r2, [r3, #32]
 801df0a:	697b      	ldr	r3, [r7, #20]
 801df0c:	43db      	mvns	r3, r3
 801df0e:	401a      	ands	r2, r3
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	6a1a      	ldr	r2, [r3, #32]
 801df18:	68bb      	ldr	r3, [r7, #8]
 801df1a:	f003 031f 	and.w	r3, r3, #31
 801df1e:	6879      	ldr	r1, [r7, #4]
 801df20:	fa01 f303 	lsl.w	r3, r1, r3
 801df24:	431a      	orrs	r2, r3
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	621a      	str	r2, [r3, #32]
}
 801df2a:	bf00      	nop
 801df2c:	371c      	adds	r7, #28
 801df2e:	46bd      	mov	sp, r7
 801df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df34:	4770      	bx	lr
	...

0801df38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801df38:	b480      	push	{r7}
 801df3a:	b085      	sub	sp, #20
 801df3c:	af00      	add	r7, sp, #0
 801df3e:	6078      	str	r0, [r7, #4]
 801df40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801df48:	2b01      	cmp	r3, #1
 801df4a:	d101      	bne.n	801df50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801df4c:	2302      	movs	r3, #2
 801df4e:	e06f      	b.n	801e030 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	2201      	movs	r2, #1
 801df54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	2202      	movs	r2, #2
 801df5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	685b      	ldr	r3, [r3, #4]
 801df66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	689b      	ldr	r3, [r3, #8]
 801df6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	4a31      	ldr	r2, [pc, #196]	; (801e03c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801df76:	4293      	cmp	r3, r2
 801df78:	d009      	beq.n	801df8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	4a30      	ldr	r2, [pc, #192]	; (801e040 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801df80:	4293      	cmp	r3, r2
 801df82:	d004      	beq.n	801df8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	4a2e      	ldr	r2, [pc, #184]	; (801e044 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801df8a:	4293      	cmp	r3, r2
 801df8c:	d108      	bne.n	801dfa0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801df94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801df96:	683b      	ldr	r3, [r7, #0]
 801df98:	685b      	ldr	r3, [r3, #4]
 801df9a:	68fa      	ldr	r2, [r7, #12]
 801df9c:	4313      	orrs	r3, r2
 801df9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801dfa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dfaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801dfac:	683b      	ldr	r3, [r7, #0]
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	68fa      	ldr	r2, [r7, #12]
 801dfb2:	4313      	orrs	r3, r2
 801dfb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	68fa      	ldr	r2, [r7, #12]
 801dfbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	4a1e      	ldr	r2, [pc, #120]	; (801e03c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801dfc4:	4293      	cmp	r3, r2
 801dfc6:	d01d      	beq.n	801e004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dfd0:	d018      	beq.n	801e004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	4a1c      	ldr	r2, [pc, #112]	; (801e048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801dfd8:	4293      	cmp	r3, r2
 801dfda:	d013      	beq.n	801e004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	4a1a      	ldr	r2, [pc, #104]	; (801e04c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801dfe2:	4293      	cmp	r3, r2
 801dfe4:	d00e      	beq.n	801e004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	4a15      	ldr	r2, [pc, #84]	; (801e040 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801dfec:	4293      	cmp	r3, r2
 801dfee:	d009      	beq.n	801e004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	4a16      	ldr	r2, [pc, #88]	; (801e050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801dff6:	4293      	cmp	r3, r2
 801dff8:	d004      	beq.n	801e004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	681b      	ldr	r3, [r3, #0]
 801dffe:	4a11      	ldr	r2, [pc, #68]	; (801e044 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801e000:	4293      	cmp	r3, r2
 801e002:	d10c      	bne.n	801e01e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801e004:	68bb      	ldr	r3, [r7, #8]
 801e006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e00a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801e00c:	683b      	ldr	r3, [r7, #0]
 801e00e:	689b      	ldr	r3, [r3, #8]
 801e010:	68ba      	ldr	r2, [r7, #8]
 801e012:	4313      	orrs	r3, r2
 801e014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	681b      	ldr	r3, [r3, #0]
 801e01a:	68ba      	ldr	r2, [r7, #8]
 801e01c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801e01e:	687b      	ldr	r3, [r7, #4]
 801e020:	2201      	movs	r2, #1
 801e022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	2200      	movs	r2, #0
 801e02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e02e:	2300      	movs	r3, #0
}
 801e030:	4618      	mov	r0, r3
 801e032:	3714      	adds	r7, #20
 801e034:	46bd      	mov	sp, r7
 801e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e03a:	4770      	bx	lr
 801e03c:	40012c00 	.word	0x40012c00
 801e040:	40013400 	.word	0x40013400
 801e044:	40015000 	.word	0x40015000
 801e048:	40000400 	.word	0x40000400
 801e04c:	40000800 	.word	0x40000800
 801e050:	40014000 	.word	0x40014000

0801e054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801e054:	b480      	push	{r7}
 801e056:	b085      	sub	sp, #20
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
 801e05c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801e05e:	2300      	movs	r3, #0
 801e060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e068:	2b01      	cmp	r3, #1
 801e06a:	d101      	bne.n	801e070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801e06c:	2302      	movs	r3, #2
 801e06e:	e096      	b.n	801e19e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	2201      	movs	r2, #1
 801e074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801e07e:	683b      	ldr	r3, [r7, #0]
 801e080:	68db      	ldr	r3, [r3, #12]
 801e082:	4313      	orrs	r3, r2
 801e084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801e08c:	683b      	ldr	r3, [r7, #0]
 801e08e:	689b      	ldr	r3, [r3, #8]
 801e090:	4313      	orrs	r3, r2
 801e092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801e094:	68fb      	ldr	r3, [r7, #12]
 801e096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801e09a:	683b      	ldr	r3, [r7, #0]
 801e09c:	685b      	ldr	r3, [r3, #4]
 801e09e:	4313      	orrs	r3, r2
 801e0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801e0a8:	683b      	ldr	r3, [r7, #0]
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	4313      	orrs	r3, r2
 801e0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801e0b0:	68fb      	ldr	r3, [r7, #12]
 801e0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801e0b6:	683b      	ldr	r3, [r7, #0]
 801e0b8:	691b      	ldr	r3, [r3, #16]
 801e0ba:	4313      	orrs	r3, r2
 801e0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801e0c4:	683b      	ldr	r3, [r7, #0]
 801e0c6:	695b      	ldr	r3, [r3, #20]
 801e0c8:	4313      	orrs	r3, r2
 801e0ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801e0cc:	68fb      	ldr	r3, [r7, #12]
 801e0ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801e0d2:	683b      	ldr	r3, [r7, #0]
 801e0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0d6:	4313      	orrs	r3, r2
 801e0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801e0da:	68fb      	ldr	r3, [r7, #12]
 801e0dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801e0e0:	683b      	ldr	r3, [r7, #0]
 801e0e2:	699b      	ldr	r3, [r3, #24]
 801e0e4:	041b      	lsls	r3, r3, #16
 801e0e6:	4313      	orrs	r3, r2
 801e0e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	4a2f      	ldr	r2, [pc, #188]	; (801e1ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e0f0:	4293      	cmp	r3, r2
 801e0f2:	d009      	beq.n	801e108 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	4a2d      	ldr	r2, [pc, #180]	; (801e1b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e0fa:	4293      	cmp	r3, r2
 801e0fc:	d004      	beq.n	801e108 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	4a2c      	ldr	r2, [pc, #176]	; (801e1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e104:	4293      	cmp	r3, r2
 801e106:	d106      	bne.n	801e116 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801e10e:	683b      	ldr	r3, [r7, #0]
 801e110:	69db      	ldr	r3, [r3, #28]
 801e112:	4313      	orrs	r3, r2
 801e114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	4a24      	ldr	r2, [pc, #144]	; (801e1ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e11c:	4293      	cmp	r3, r2
 801e11e:	d009      	beq.n	801e134 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	4a22      	ldr	r2, [pc, #136]	; (801e1b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e126:	4293      	cmp	r3, r2
 801e128:	d004      	beq.n	801e134 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	4a21      	ldr	r2, [pc, #132]	; (801e1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e130:	4293      	cmp	r3, r2
 801e132:	d12b      	bne.n	801e18c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801e13a:	683b      	ldr	r3, [r7, #0]
 801e13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e13e:	051b      	lsls	r3, r3, #20
 801e140:	4313      	orrs	r3, r2
 801e142:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801e14a:	683b      	ldr	r3, [r7, #0]
 801e14c:	6a1b      	ldr	r3, [r3, #32]
 801e14e:	4313      	orrs	r3, r2
 801e150:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801e158:	683b      	ldr	r3, [r7, #0]
 801e15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e15c:	4313      	orrs	r3, r2
 801e15e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	4a11      	ldr	r2, [pc, #68]	; (801e1ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801e166:	4293      	cmp	r3, r2
 801e168:	d009      	beq.n	801e17e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	4a10      	ldr	r2, [pc, #64]	; (801e1b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801e170:	4293      	cmp	r3, r2
 801e172:	d004      	beq.n	801e17e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	4a0e      	ldr	r2, [pc, #56]	; (801e1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801e17a:	4293      	cmp	r3, r2
 801e17c:	d106      	bne.n	801e18c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801e184:	683b      	ldr	r3, [r7, #0]
 801e186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e188:	4313      	orrs	r3, r2
 801e18a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	68fa      	ldr	r2, [r7, #12]
 801e192:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	2200      	movs	r2, #0
 801e198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e19c:	2300      	movs	r3, #0
}
 801e19e:	4618      	mov	r0, r3
 801e1a0:	3714      	adds	r7, #20
 801e1a2:	46bd      	mov	sp, r7
 801e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a8:	4770      	bx	lr
 801e1aa:	bf00      	nop
 801e1ac:	40012c00 	.word	0x40012c00
 801e1b0:	40013400 	.word	0x40013400
 801e1b4:	40015000 	.word	0x40015000

0801e1b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801e1b8:	b480      	push	{r7}
 801e1ba:	b083      	sub	sp, #12
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801e1c0:	bf00      	nop
 801e1c2:	370c      	adds	r7, #12
 801e1c4:	46bd      	mov	sp, r7
 801e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1ca:	4770      	bx	lr

0801e1cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e1cc:	b480      	push	{r7}
 801e1ce:	b083      	sub	sp, #12
 801e1d0:	af00      	add	r7, sp, #0
 801e1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e1d4:	bf00      	nop
 801e1d6:	370c      	adds	r7, #12
 801e1d8:	46bd      	mov	sp, r7
 801e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1de:	4770      	bx	lr

0801e1e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e1e0:	b480      	push	{r7}
 801e1e2:	b083      	sub	sp, #12
 801e1e4:	af00      	add	r7, sp, #0
 801e1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e1e8:	bf00      	nop
 801e1ea:	370c      	adds	r7, #12
 801e1ec:	46bd      	mov	sp, r7
 801e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1f2:	4770      	bx	lr

0801e1f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801e1f4:	b480      	push	{r7}
 801e1f6:	b083      	sub	sp, #12
 801e1f8:	af00      	add	r7, sp, #0
 801e1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801e1fc:	bf00      	nop
 801e1fe:	370c      	adds	r7, #12
 801e200:	46bd      	mov	sp, r7
 801e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e206:	4770      	bx	lr

0801e208 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801e208:	b480      	push	{r7}
 801e20a:	b083      	sub	sp, #12
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801e210:	bf00      	nop
 801e212:	370c      	adds	r7, #12
 801e214:	46bd      	mov	sp, r7
 801e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e21a:	4770      	bx	lr

0801e21c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801e21c:	b480      	push	{r7}
 801e21e:	b083      	sub	sp, #12
 801e220:	af00      	add	r7, sp, #0
 801e222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801e224:	bf00      	nop
 801e226:	370c      	adds	r7, #12
 801e228:	46bd      	mov	sp, r7
 801e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e22e:	4770      	bx	lr

0801e230 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801e230:	b480      	push	{r7}
 801e232:	b083      	sub	sp, #12
 801e234:	af00      	add	r7, sp, #0
 801e236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801e238:	bf00      	nop
 801e23a:	370c      	adds	r7, #12
 801e23c:	46bd      	mov	sp, r7
 801e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e242:	4770      	bx	lr

0801e244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e244:	b580      	push	{r7, lr}
 801e246:	b082      	sub	sp, #8
 801e248:	af00      	add	r7, sp, #0
 801e24a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d101      	bne.n	801e256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e252:	2301      	movs	r3, #1
 801e254:	e042      	b.n	801e2dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d106      	bne.n	801e26e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	2200      	movs	r2, #0
 801e264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e268:	6878      	ldr	r0, [r7, #4]
 801e26a:	f7f9 faeb 	bl	8017844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	2224      	movs	r2, #36	; 0x24
 801e272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	681a      	ldr	r2, [r3, #0]
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	f022 0201 	bic.w	r2, r2, #1
 801e284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e286:	6878      	ldr	r0, [r7, #4]
 801e288:	f000 f8c2 	bl	801e410 <UART_SetConfig>
 801e28c:	4603      	mov	r3, r0
 801e28e:	2b01      	cmp	r3, #1
 801e290:	d101      	bne.n	801e296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801e292:	2301      	movs	r3, #1
 801e294:	e022      	b.n	801e2dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d002      	beq.n	801e2a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801e29e:	6878      	ldr	r0, [r7, #4]
 801e2a0:	f000 fbb2 	bl	801ea08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e2a4:	687b      	ldr	r3, [r7, #4]
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	685a      	ldr	r2, [r3, #4]
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e2b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	689a      	ldr	r2, [r3, #8]
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e2c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	681a      	ldr	r2, [r3, #0]
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	f042 0201 	orr.w	r2, r2, #1
 801e2d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e2d4:	6878      	ldr	r0, [r7, #4]
 801e2d6:	f000 fc39 	bl	801eb4c <UART_CheckIdleState>
 801e2da:	4603      	mov	r3, r0
}
 801e2dc:	4618      	mov	r0, r3
 801e2de:	3708      	adds	r7, #8
 801e2e0:	46bd      	mov	sp, r7
 801e2e2:	bd80      	pop	{r7, pc}

0801e2e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e2e4:	b580      	push	{r7, lr}
 801e2e6:	b08a      	sub	sp, #40	; 0x28
 801e2e8:	af02      	add	r7, sp, #8
 801e2ea:	60f8      	str	r0, [r7, #12]
 801e2ec:	60b9      	str	r1, [r7, #8]
 801e2ee:	603b      	str	r3, [r7, #0]
 801e2f0:	4613      	mov	r3, r2
 801e2f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e2fa:	2b20      	cmp	r3, #32
 801e2fc:	f040 8083 	bne.w	801e406 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801e300:	68bb      	ldr	r3, [r7, #8]
 801e302:	2b00      	cmp	r3, #0
 801e304:	d002      	beq.n	801e30c <HAL_UART_Transmit+0x28>
 801e306:	88fb      	ldrh	r3, [r7, #6]
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d101      	bne.n	801e310 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801e30c:	2301      	movs	r3, #1
 801e30e:	e07b      	b.n	801e408 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801e316:	2b01      	cmp	r3, #1
 801e318:	d101      	bne.n	801e31e <HAL_UART_Transmit+0x3a>
 801e31a:	2302      	movs	r3, #2
 801e31c:	e074      	b.n	801e408 <HAL_UART_Transmit+0x124>
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	2201      	movs	r2, #1
 801e322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	2200      	movs	r2, #0
 801e32a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	2221      	movs	r2, #33	; 0x21
 801e332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e336:	f7f9 fb6b 	bl	8017a10 <HAL_GetTick>
 801e33a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	88fa      	ldrh	r2, [r7, #6]
 801e340:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	88fa      	ldrh	r2, [r7, #6]
 801e348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	689b      	ldr	r3, [r3, #8]
 801e350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e354:	d108      	bne.n	801e368 <HAL_UART_Transmit+0x84>
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	691b      	ldr	r3, [r3, #16]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d104      	bne.n	801e368 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801e35e:	2300      	movs	r3, #0
 801e360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e362:	68bb      	ldr	r3, [r7, #8]
 801e364:	61bb      	str	r3, [r7, #24]
 801e366:	e003      	b.n	801e370 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801e368:	68bb      	ldr	r3, [r7, #8]
 801e36a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e36c:	2300      	movs	r3, #0
 801e36e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	2200      	movs	r2, #0
 801e374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801e378:	e02c      	b.n	801e3d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e37a:	683b      	ldr	r3, [r7, #0]
 801e37c:	9300      	str	r3, [sp, #0]
 801e37e:	697b      	ldr	r3, [r7, #20]
 801e380:	2200      	movs	r2, #0
 801e382:	2180      	movs	r1, #128	; 0x80
 801e384:	68f8      	ldr	r0, [r7, #12]
 801e386:	f000 fc2c 	bl	801ebe2 <UART_WaitOnFlagUntilTimeout>
 801e38a:	4603      	mov	r3, r0
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d001      	beq.n	801e394 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801e390:	2303      	movs	r3, #3
 801e392:	e039      	b.n	801e408 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801e394:	69fb      	ldr	r3, [r7, #28]
 801e396:	2b00      	cmp	r3, #0
 801e398:	d10b      	bne.n	801e3b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e39a:	69bb      	ldr	r3, [r7, #24]
 801e39c:	881b      	ldrh	r3, [r3, #0]
 801e39e:	461a      	mov	r2, r3
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e3a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801e3aa:	69bb      	ldr	r3, [r7, #24]
 801e3ac:	3302      	adds	r3, #2
 801e3ae:	61bb      	str	r3, [r7, #24]
 801e3b0:	e007      	b.n	801e3c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e3b2:	69fb      	ldr	r3, [r7, #28]
 801e3b4:	781a      	ldrb	r2, [r3, #0]
 801e3b6:	68fb      	ldr	r3, [r7, #12]
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801e3bc:	69fb      	ldr	r3, [r7, #28]
 801e3be:	3301      	adds	r3, #1
 801e3c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e3c8:	b29b      	uxth	r3, r3
 801e3ca:	3b01      	subs	r3, #1
 801e3cc:	b29a      	uxth	r2, r3
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e3da:	b29b      	uxth	r3, r3
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d1cc      	bne.n	801e37a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e3e0:	683b      	ldr	r3, [r7, #0]
 801e3e2:	9300      	str	r3, [sp, #0]
 801e3e4:	697b      	ldr	r3, [r7, #20]
 801e3e6:	2200      	movs	r2, #0
 801e3e8:	2140      	movs	r1, #64	; 0x40
 801e3ea:	68f8      	ldr	r0, [r7, #12]
 801e3ec:	f000 fbf9 	bl	801ebe2 <UART_WaitOnFlagUntilTimeout>
 801e3f0:	4603      	mov	r3, r0
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d001      	beq.n	801e3fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801e3f6:	2303      	movs	r3, #3
 801e3f8:	e006      	b.n	801e408 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	2220      	movs	r2, #32
 801e3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801e402:	2300      	movs	r3, #0
 801e404:	e000      	b.n	801e408 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801e406:	2302      	movs	r3, #2
  }
}
 801e408:	4618      	mov	r0, r3
 801e40a:	3720      	adds	r7, #32
 801e40c:	46bd      	mov	sp, r7
 801e40e:	bd80      	pop	{r7, pc}

0801e410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e414:	b08c      	sub	sp, #48	; 0x30
 801e416:	af00      	add	r7, sp, #0
 801e418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e41a:	2300      	movs	r3, #0
 801e41c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e420:	697b      	ldr	r3, [r7, #20]
 801e422:	689a      	ldr	r2, [r3, #8]
 801e424:	697b      	ldr	r3, [r7, #20]
 801e426:	691b      	ldr	r3, [r3, #16]
 801e428:	431a      	orrs	r2, r3
 801e42a:	697b      	ldr	r3, [r7, #20]
 801e42c:	695b      	ldr	r3, [r3, #20]
 801e42e:	431a      	orrs	r2, r3
 801e430:	697b      	ldr	r3, [r7, #20]
 801e432:	69db      	ldr	r3, [r3, #28]
 801e434:	4313      	orrs	r3, r2
 801e436:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e438:	697b      	ldr	r3, [r7, #20]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	681a      	ldr	r2, [r3, #0]
 801e43e:	4baa      	ldr	r3, [pc, #680]	; (801e6e8 <UART_SetConfig+0x2d8>)
 801e440:	4013      	ands	r3, r2
 801e442:	697a      	ldr	r2, [r7, #20]
 801e444:	6812      	ldr	r2, [r2, #0]
 801e446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e448:	430b      	orrs	r3, r1
 801e44a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e44c:	697b      	ldr	r3, [r7, #20]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	685b      	ldr	r3, [r3, #4]
 801e452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e456:	697b      	ldr	r3, [r7, #20]
 801e458:	68da      	ldr	r2, [r3, #12]
 801e45a:	697b      	ldr	r3, [r7, #20]
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	430a      	orrs	r2, r1
 801e460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e462:	697b      	ldr	r3, [r7, #20]
 801e464:	699b      	ldr	r3, [r3, #24]
 801e466:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e468:	697b      	ldr	r3, [r7, #20]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	4a9f      	ldr	r2, [pc, #636]	; (801e6ec <UART_SetConfig+0x2dc>)
 801e46e:	4293      	cmp	r3, r2
 801e470:	d004      	beq.n	801e47c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e472:	697b      	ldr	r3, [r7, #20]
 801e474:	6a1b      	ldr	r3, [r3, #32]
 801e476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e478:	4313      	orrs	r3, r2
 801e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e47c:	697b      	ldr	r3, [r7, #20]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	689b      	ldr	r3, [r3, #8]
 801e482:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801e486:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801e48a:	697a      	ldr	r2, [r7, #20]
 801e48c:	6812      	ldr	r2, [r2, #0]
 801e48e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e490:	430b      	orrs	r3, r1
 801e492:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e494:	697b      	ldr	r3, [r7, #20]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e49a:	f023 010f 	bic.w	r1, r3, #15
 801e49e:	697b      	ldr	r3, [r7, #20]
 801e4a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e4a2:	697b      	ldr	r3, [r7, #20]
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	430a      	orrs	r2, r1
 801e4a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e4aa:	697b      	ldr	r3, [r7, #20]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	4a90      	ldr	r2, [pc, #576]	; (801e6f0 <UART_SetConfig+0x2e0>)
 801e4b0:	4293      	cmp	r3, r2
 801e4b2:	d125      	bne.n	801e500 <UART_SetConfig+0xf0>
 801e4b4:	4b8f      	ldr	r3, [pc, #572]	; (801e6f4 <UART_SetConfig+0x2e4>)
 801e4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e4ba:	f003 0303 	and.w	r3, r3, #3
 801e4be:	2b03      	cmp	r3, #3
 801e4c0:	d81a      	bhi.n	801e4f8 <UART_SetConfig+0xe8>
 801e4c2:	a201      	add	r2, pc, #4	; (adr r2, 801e4c8 <UART_SetConfig+0xb8>)
 801e4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4c8:	0801e4d9 	.word	0x0801e4d9
 801e4cc:	0801e4e9 	.word	0x0801e4e9
 801e4d0:	0801e4e1 	.word	0x0801e4e1
 801e4d4:	0801e4f1 	.word	0x0801e4f1
 801e4d8:	2301      	movs	r3, #1
 801e4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4de:	e116      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e4e0:	2302      	movs	r3, #2
 801e4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4e6:	e112      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e4e8:	2304      	movs	r3, #4
 801e4ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4ee:	e10e      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e4f0:	2308      	movs	r3, #8
 801e4f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4f6:	e10a      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e4f8:	2310      	movs	r3, #16
 801e4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4fe:	e106      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e500:	697b      	ldr	r3, [r7, #20]
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	4a7c      	ldr	r2, [pc, #496]	; (801e6f8 <UART_SetConfig+0x2e8>)
 801e506:	4293      	cmp	r3, r2
 801e508:	d138      	bne.n	801e57c <UART_SetConfig+0x16c>
 801e50a:	4b7a      	ldr	r3, [pc, #488]	; (801e6f4 <UART_SetConfig+0x2e4>)
 801e50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e510:	f003 030c 	and.w	r3, r3, #12
 801e514:	2b0c      	cmp	r3, #12
 801e516:	d82d      	bhi.n	801e574 <UART_SetConfig+0x164>
 801e518:	a201      	add	r2, pc, #4	; (adr r2, 801e520 <UART_SetConfig+0x110>)
 801e51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e51e:	bf00      	nop
 801e520:	0801e555 	.word	0x0801e555
 801e524:	0801e575 	.word	0x0801e575
 801e528:	0801e575 	.word	0x0801e575
 801e52c:	0801e575 	.word	0x0801e575
 801e530:	0801e565 	.word	0x0801e565
 801e534:	0801e575 	.word	0x0801e575
 801e538:	0801e575 	.word	0x0801e575
 801e53c:	0801e575 	.word	0x0801e575
 801e540:	0801e55d 	.word	0x0801e55d
 801e544:	0801e575 	.word	0x0801e575
 801e548:	0801e575 	.word	0x0801e575
 801e54c:	0801e575 	.word	0x0801e575
 801e550:	0801e56d 	.word	0x0801e56d
 801e554:	2300      	movs	r3, #0
 801e556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e55a:	e0d8      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e55c:	2302      	movs	r3, #2
 801e55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e562:	e0d4      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e564:	2304      	movs	r3, #4
 801e566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e56a:	e0d0      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e56c:	2308      	movs	r3, #8
 801e56e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e572:	e0cc      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e574:	2310      	movs	r3, #16
 801e576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e57a:	e0c8      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e57c:	697b      	ldr	r3, [r7, #20]
 801e57e:	681b      	ldr	r3, [r3, #0]
 801e580:	4a5e      	ldr	r2, [pc, #376]	; (801e6fc <UART_SetConfig+0x2ec>)
 801e582:	4293      	cmp	r3, r2
 801e584:	d125      	bne.n	801e5d2 <UART_SetConfig+0x1c2>
 801e586:	4b5b      	ldr	r3, [pc, #364]	; (801e6f4 <UART_SetConfig+0x2e4>)
 801e588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e58c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801e590:	2b30      	cmp	r3, #48	; 0x30
 801e592:	d016      	beq.n	801e5c2 <UART_SetConfig+0x1b2>
 801e594:	2b30      	cmp	r3, #48	; 0x30
 801e596:	d818      	bhi.n	801e5ca <UART_SetConfig+0x1ba>
 801e598:	2b20      	cmp	r3, #32
 801e59a:	d00a      	beq.n	801e5b2 <UART_SetConfig+0x1a2>
 801e59c:	2b20      	cmp	r3, #32
 801e59e:	d814      	bhi.n	801e5ca <UART_SetConfig+0x1ba>
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d002      	beq.n	801e5aa <UART_SetConfig+0x19a>
 801e5a4:	2b10      	cmp	r3, #16
 801e5a6:	d008      	beq.n	801e5ba <UART_SetConfig+0x1aa>
 801e5a8:	e00f      	b.n	801e5ca <UART_SetConfig+0x1ba>
 801e5aa:	2300      	movs	r3, #0
 801e5ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5b0:	e0ad      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e5b2:	2302      	movs	r3, #2
 801e5b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5b8:	e0a9      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e5ba:	2304      	movs	r3, #4
 801e5bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5c0:	e0a5      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e5c2:	2308      	movs	r3, #8
 801e5c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5c8:	e0a1      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e5ca:	2310      	movs	r3, #16
 801e5cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e5d0:	e09d      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e5d2:	697b      	ldr	r3, [r7, #20]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	4a4a      	ldr	r2, [pc, #296]	; (801e700 <UART_SetConfig+0x2f0>)
 801e5d8:	4293      	cmp	r3, r2
 801e5da:	d125      	bne.n	801e628 <UART_SetConfig+0x218>
 801e5dc:	4b45      	ldr	r3, [pc, #276]	; (801e6f4 <UART_SetConfig+0x2e4>)
 801e5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e5e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e5e6:	2bc0      	cmp	r3, #192	; 0xc0
 801e5e8:	d016      	beq.n	801e618 <UART_SetConfig+0x208>
 801e5ea:	2bc0      	cmp	r3, #192	; 0xc0
 801e5ec:	d818      	bhi.n	801e620 <UART_SetConfig+0x210>
 801e5ee:	2b80      	cmp	r3, #128	; 0x80
 801e5f0:	d00a      	beq.n	801e608 <UART_SetConfig+0x1f8>
 801e5f2:	2b80      	cmp	r3, #128	; 0x80
 801e5f4:	d814      	bhi.n	801e620 <UART_SetConfig+0x210>
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d002      	beq.n	801e600 <UART_SetConfig+0x1f0>
 801e5fa:	2b40      	cmp	r3, #64	; 0x40
 801e5fc:	d008      	beq.n	801e610 <UART_SetConfig+0x200>
 801e5fe:	e00f      	b.n	801e620 <UART_SetConfig+0x210>
 801e600:	2300      	movs	r3, #0
 801e602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e606:	e082      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e608:	2302      	movs	r3, #2
 801e60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e60e:	e07e      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e610:	2304      	movs	r3, #4
 801e612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e616:	e07a      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e618:	2308      	movs	r3, #8
 801e61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e61e:	e076      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e620:	2310      	movs	r3, #16
 801e622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e626:	e072      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e628:	697b      	ldr	r3, [r7, #20]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	4a35      	ldr	r2, [pc, #212]	; (801e704 <UART_SetConfig+0x2f4>)
 801e62e:	4293      	cmp	r3, r2
 801e630:	d12a      	bne.n	801e688 <UART_SetConfig+0x278>
 801e632:	4b30      	ldr	r3, [pc, #192]	; (801e6f4 <UART_SetConfig+0x2e4>)
 801e634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e63c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e640:	d01a      	beq.n	801e678 <UART_SetConfig+0x268>
 801e642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e646:	d81b      	bhi.n	801e680 <UART_SetConfig+0x270>
 801e648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e64c:	d00c      	beq.n	801e668 <UART_SetConfig+0x258>
 801e64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e652:	d815      	bhi.n	801e680 <UART_SetConfig+0x270>
 801e654:	2b00      	cmp	r3, #0
 801e656:	d003      	beq.n	801e660 <UART_SetConfig+0x250>
 801e658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e65c:	d008      	beq.n	801e670 <UART_SetConfig+0x260>
 801e65e:	e00f      	b.n	801e680 <UART_SetConfig+0x270>
 801e660:	2300      	movs	r3, #0
 801e662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e666:	e052      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e668:	2302      	movs	r3, #2
 801e66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e66e:	e04e      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e670:	2304      	movs	r3, #4
 801e672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e676:	e04a      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e678:	2308      	movs	r3, #8
 801e67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e67e:	e046      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e680:	2310      	movs	r3, #16
 801e682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e686:	e042      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e688:	697b      	ldr	r3, [r7, #20]
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	4a17      	ldr	r2, [pc, #92]	; (801e6ec <UART_SetConfig+0x2dc>)
 801e68e:	4293      	cmp	r3, r2
 801e690:	d13a      	bne.n	801e708 <UART_SetConfig+0x2f8>
 801e692:	4b18      	ldr	r3, [pc, #96]	; (801e6f4 <UART_SetConfig+0x2e4>)
 801e694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801e69c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e6a0:	d01a      	beq.n	801e6d8 <UART_SetConfig+0x2c8>
 801e6a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e6a6:	d81b      	bhi.n	801e6e0 <UART_SetConfig+0x2d0>
 801e6a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e6ac:	d00c      	beq.n	801e6c8 <UART_SetConfig+0x2b8>
 801e6ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e6b2:	d815      	bhi.n	801e6e0 <UART_SetConfig+0x2d0>
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d003      	beq.n	801e6c0 <UART_SetConfig+0x2b0>
 801e6b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e6bc:	d008      	beq.n	801e6d0 <UART_SetConfig+0x2c0>
 801e6be:	e00f      	b.n	801e6e0 <UART_SetConfig+0x2d0>
 801e6c0:	2300      	movs	r3, #0
 801e6c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6c6:	e022      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e6c8:	2302      	movs	r3, #2
 801e6ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6ce:	e01e      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e6d0:	2304      	movs	r3, #4
 801e6d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6d6:	e01a      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e6d8:	2308      	movs	r3, #8
 801e6da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6de:	e016      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e6e0:	2310      	movs	r3, #16
 801e6e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e6e6:	e012      	b.n	801e70e <UART_SetConfig+0x2fe>
 801e6e8:	cfff69f3 	.word	0xcfff69f3
 801e6ec:	40008000 	.word	0x40008000
 801e6f0:	40013800 	.word	0x40013800
 801e6f4:	40021000 	.word	0x40021000
 801e6f8:	40004400 	.word	0x40004400
 801e6fc:	40004800 	.word	0x40004800
 801e700:	40004c00 	.word	0x40004c00
 801e704:	40005000 	.word	0x40005000
 801e708:	2310      	movs	r3, #16
 801e70a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e70e:	697b      	ldr	r3, [r7, #20]
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	4aae      	ldr	r2, [pc, #696]	; (801e9cc <UART_SetConfig+0x5bc>)
 801e714:	4293      	cmp	r3, r2
 801e716:	f040 8097 	bne.w	801e848 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e71a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e71e:	2b08      	cmp	r3, #8
 801e720:	d823      	bhi.n	801e76a <UART_SetConfig+0x35a>
 801e722:	a201      	add	r2, pc, #4	; (adr r2, 801e728 <UART_SetConfig+0x318>)
 801e724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e728:	0801e74d 	.word	0x0801e74d
 801e72c:	0801e76b 	.word	0x0801e76b
 801e730:	0801e755 	.word	0x0801e755
 801e734:	0801e76b 	.word	0x0801e76b
 801e738:	0801e75b 	.word	0x0801e75b
 801e73c:	0801e76b 	.word	0x0801e76b
 801e740:	0801e76b 	.word	0x0801e76b
 801e744:	0801e76b 	.word	0x0801e76b
 801e748:	0801e763 	.word	0x0801e763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e74c:	f7fd f8b4 	bl	801b8b8 <HAL_RCC_GetPCLK1Freq>
 801e750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e752:	e010      	b.n	801e776 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e754:	4b9e      	ldr	r3, [pc, #632]	; (801e9d0 <UART_SetConfig+0x5c0>)
 801e756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e758:	e00d      	b.n	801e776 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e75a:	f7fd f841 	bl	801b7e0 <HAL_RCC_GetSysClockFreq>
 801e75e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e760:	e009      	b.n	801e776 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e768:	e005      	b.n	801e776 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801e76a:	2300      	movs	r3, #0
 801e76c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e76e:	2301      	movs	r3, #1
 801e770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e774:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e778:	2b00      	cmp	r3, #0
 801e77a:	f000 8130 	beq.w	801e9de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801e77e:	697b      	ldr	r3, [r7, #20]
 801e780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e782:	4a94      	ldr	r2, [pc, #592]	; (801e9d4 <UART_SetConfig+0x5c4>)
 801e784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e788:	461a      	mov	r2, r3
 801e78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e78c:	fbb3 f3f2 	udiv	r3, r3, r2
 801e790:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e792:	697b      	ldr	r3, [r7, #20]
 801e794:	685a      	ldr	r2, [r3, #4]
 801e796:	4613      	mov	r3, r2
 801e798:	005b      	lsls	r3, r3, #1
 801e79a:	4413      	add	r3, r2
 801e79c:	69ba      	ldr	r2, [r7, #24]
 801e79e:	429a      	cmp	r2, r3
 801e7a0:	d305      	bcc.n	801e7ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801e7a2:	697b      	ldr	r3, [r7, #20]
 801e7a4:	685b      	ldr	r3, [r3, #4]
 801e7a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e7a8:	69ba      	ldr	r2, [r7, #24]
 801e7aa:	429a      	cmp	r2, r3
 801e7ac:	d903      	bls.n	801e7b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801e7ae:	2301      	movs	r3, #1
 801e7b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e7b4:	e113      	b.n	801e9de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7b8:	2200      	movs	r2, #0
 801e7ba:	60bb      	str	r3, [r7, #8]
 801e7bc:	60fa      	str	r2, [r7, #12]
 801e7be:	697b      	ldr	r3, [r7, #20]
 801e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7c2:	4a84      	ldr	r2, [pc, #528]	; (801e9d4 <UART_SetConfig+0x5c4>)
 801e7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e7c8:	b29b      	uxth	r3, r3
 801e7ca:	2200      	movs	r2, #0
 801e7cc:	603b      	str	r3, [r7, #0]
 801e7ce:	607a      	str	r2, [r7, #4]
 801e7d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e7d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e7d8:	f7e2 fa5e 	bl	8000c98 <__aeabi_uldivmod>
 801e7dc:	4602      	mov	r2, r0
 801e7de:	460b      	mov	r3, r1
 801e7e0:	4610      	mov	r0, r2
 801e7e2:	4619      	mov	r1, r3
 801e7e4:	f04f 0200 	mov.w	r2, #0
 801e7e8:	f04f 0300 	mov.w	r3, #0
 801e7ec:	020b      	lsls	r3, r1, #8
 801e7ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801e7f2:	0202      	lsls	r2, r0, #8
 801e7f4:	6979      	ldr	r1, [r7, #20]
 801e7f6:	6849      	ldr	r1, [r1, #4]
 801e7f8:	0849      	lsrs	r1, r1, #1
 801e7fa:	2000      	movs	r0, #0
 801e7fc:	460c      	mov	r4, r1
 801e7fe:	4605      	mov	r5, r0
 801e800:	eb12 0804 	adds.w	r8, r2, r4
 801e804:	eb43 0905 	adc.w	r9, r3, r5
 801e808:	697b      	ldr	r3, [r7, #20]
 801e80a:	685b      	ldr	r3, [r3, #4]
 801e80c:	2200      	movs	r2, #0
 801e80e:	469a      	mov	sl, r3
 801e810:	4693      	mov	fp, r2
 801e812:	4652      	mov	r2, sl
 801e814:	465b      	mov	r3, fp
 801e816:	4640      	mov	r0, r8
 801e818:	4649      	mov	r1, r9
 801e81a:	f7e2 fa3d 	bl	8000c98 <__aeabi_uldivmod>
 801e81e:	4602      	mov	r2, r0
 801e820:	460b      	mov	r3, r1
 801e822:	4613      	mov	r3, r2
 801e824:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e826:	6a3b      	ldr	r3, [r7, #32]
 801e828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e82c:	d308      	bcc.n	801e840 <UART_SetConfig+0x430>
 801e82e:	6a3b      	ldr	r3, [r7, #32]
 801e830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e834:	d204      	bcs.n	801e840 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801e836:	697b      	ldr	r3, [r7, #20]
 801e838:	681b      	ldr	r3, [r3, #0]
 801e83a:	6a3a      	ldr	r2, [r7, #32]
 801e83c:	60da      	str	r2, [r3, #12]
 801e83e:	e0ce      	b.n	801e9de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801e840:	2301      	movs	r3, #1
 801e842:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e846:	e0ca      	b.n	801e9de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e848:	697b      	ldr	r3, [r7, #20]
 801e84a:	69db      	ldr	r3, [r3, #28]
 801e84c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e850:	d166      	bne.n	801e920 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801e852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e856:	2b08      	cmp	r3, #8
 801e858:	d827      	bhi.n	801e8aa <UART_SetConfig+0x49a>
 801e85a:	a201      	add	r2, pc, #4	; (adr r2, 801e860 <UART_SetConfig+0x450>)
 801e85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e860:	0801e885 	.word	0x0801e885
 801e864:	0801e88d 	.word	0x0801e88d
 801e868:	0801e895 	.word	0x0801e895
 801e86c:	0801e8ab 	.word	0x0801e8ab
 801e870:	0801e89b 	.word	0x0801e89b
 801e874:	0801e8ab 	.word	0x0801e8ab
 801e878:	0801e8ab 	.word	0x0801e8ab
 801e87c:	0801e8ab 	.word	0x0801e8ab
 801e880:	0801e8a3 	.word	0x0801e8a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e884:	f7fd f818 	bl	801b8b8 <HAL_RCC_GetPCLK1Freq>
 801e888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e88a:	e014      	b.n	801e8b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e88c:	f7fd f82a 	bl	801b8e4 <HAL_RCC_GetPCLK2Freq>
 801e890:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e892:	e010      	b.n	801e8b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e894:	4b4e      	ldr	r3, [pc, #312]	; (801e9d0 <UART_SetConfig+0x5c0>)
 801e896:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e898:	e00d      	b.n	801e8b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e89a:	f7fc ffa1 	bl	801b7e0 <HAL_RCC_GetSysClockFreq>
 801e89e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e8a0:	e009      	b.n	801e8b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e8a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e8a8:	e005      	b.n	801e8b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e8ae:	2301      	movs	r3, #1
 801e8b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e8b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	f000 8090 	beq.w	801e9de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e8be:	697b      	ldr	r3, [r7, #20]
 801e8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8c2:	4a44      	ldr	r2, [pc, #272]	; (801e9d4 <UART_SetConfig+0x5c4>)
 801e8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e8c8:	461a      	mov	r2, r3
 801e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8cc:	fbb3 f3f2 	udiv	r3, r3, r2
 801e8d0:	005a      	lsls	r2, r3, #1
 801e8d2:	697b      	ldr	r3, [r7, #20]
 801e8d4:	685b      	ldr	r3, [r3, #4]
 801e8d6:	085b      	lsrs	r3, r3, #1
 801e8d8:	441a      	add	r2, r3
 801e8da:	697b      	ldr	r3, [r7, #20]
 801e8dc:	685b      	ldr	r3, [r3, #4]
 801e8de:	fbb2 f3f3 	udiv	r3, r2, r3
 801e8e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e8e4:	6a3b      	ldr	r3, [r7, #32]
 801e8e6:	2b0f      	cmp	r3, #15
 801e8e8:	d916      	bls.n	801e918 <UART_SetConfig+0x508>
 801e8ea:	6a3b      	ldr	r3, [r7, #32]
 801e8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e8f0:	d212      	bcs.n	801e918 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e8f2:	6a3b      	ldr	r3, [r7, #32]
 801e8f4:	b29b      	uxth	r3, r3
 801e8f6:	f023 030f 	bic.w	r3, r3, #15
 801e8fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e8fc:	6a3b      	ldr	r3, [r7, #32]
 801e8fe:	085b      	lsrs	r3, r3, #1
 801e900:	b29b      	uxth	r3, r3
 801e902:	f003 0307 	and.w	r3, r3, #7
 801e906:	b29a      	uxth	r2, r3
 801e908:	8bfb      	ldrh	r3, [r7, #30]
 801e90a:	4313      	orrs	r3, r2
 801e90c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801e90e:	697b      	ldr	r3, [r7, #20]
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	8bfa      	ldrh	r2, [r7, #30]
 801e914:	60da      	str	r2, [r3, #12]
 801e916:	e062      	b.n	801e9de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801e918:	2301      	movs	r3, #1
 801e91a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e91e:	e05e      	b.n	801e9de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e924:	2b08      	cmp	r3, #8
 801e926:	d828      	bhi.n	801e97a <UART_SetConfig+0x56a>
 801e928:	a201      	add	r2, pc, #4	; (adr r2, 801e930 <UART_SetConfig+0x520>)
 801e92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e92e:	bf00      	nop
 801e930:	0801e955 	.word	0x0801e955
 801e934:	0801e95d 	.word	0x0801e95d
 801e938:	0801e965 	.word	0x0801e965
 801e93c:	0801e97b 	.word	0x0801e97b
 801e940:	0801e96b 	.word	0x0801e96b
 801e944:	0801e97b 	.word	0x0801e97b
 801e948:	0801e97b 	.word	0x0801e97b
 801e94c:	0801e97b 	.word	0x0801e97b
 801e950:	0801e973 	.word	0x0801e973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e954:	f7fc ffb0 	bl	801b8b8 <HAL_RCC_GetPCLK1Freq>
 801e958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e95a:	e014      	b.n	801e986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e95c:	f7fc ffc2 	bl	801b8e4 <HAL_RCC_GetPCLK2Freq>
 801e960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e962:	e010      	b.n	801e986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e964:	4b1a      	ldr	r3, [pc, #104]	; (801e9d0 <UART_SetConfig+0x5c0>)
 801e966:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e968:	e00d      	b.n	801e986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e96a:	f7fc ff39 	bl	801b7e0 <HAL_RCC_GetSysClockFreq>
 801e96e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e970:	e009      	b.n	801e986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e978:	e005      	b.n	801e986 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801e97a:	2300      	movs	r3, #0
 801e97c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e97e:	2301      	movs	r3, #1
 801e980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e984:	bf00      	nop
    }

    if (pclk != 0U)
 801e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d028      	beq.n	801e9de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e98c:	697b      	ldr	r3, [r7, #20]
 801e98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e990:	4a10      	ldr	r2, [pc, #64]	; (801e9d4 <UART_SetConfig+0x5c4>)
 801e992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e996:	461a      	mov	r2, r3
 801e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e99a:	fbb3 f2f2 	udiv	r2, r3, r2
 801e99e:	697b      	ldr	r3, [r7, #20]
 801e9a0:	685b      	ldr	r3, [r3, #4]
 801e9a2:	085b      	lsrs	r3, r3, #1
 801e9a4:	441a      	add	r2, r3
 801e9a6:	697b      	ldr	r3, [r7, #20]
 801e9a8:	685b      	ldr	r3, [r3, #4]
 801e9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 801e9ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e9b0:	6a3b      	ldr	r3, [r7, #32]
 801e9b2:	2b0f      	cmp	r3, #15
 801e9b4:	d910      	bls.n	801e9d8 <UART_SetConfig+0x5c8>
 801e9b6:	6a3b      	ldr	r3, [r7, #32]
 801e9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e9bc:	d20c      	bcs.n	801e9d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e9be:	6a3b      	ldr	r3, [r7, #32]
 801e9c0:	b29a      	uxth	r2, r3
 801e9c2:	697b      	ldr	r3, [r7, #20]
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	60da      	str	r2, [r3, #12]
 801e9c8:	e009      	b.n	801e9de <UART_SetConfig+0x5ce>
 801e9ca:	bf00      	nop
 801e9cc:	40008000 	.word	0x40008000
 801e9d0:	00f42400 	.word	0x00f42400
 801e9d4:	080222fc 	.word	0x080222fc
      }
      else
      {
        ret = HAL_ERROR;
 801e9d8:	2301      	movs	r3, #1
 801e9da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801e9de:	697b      	ldr	r3, [r7, #20]
 801e9e0:	2201      	movs	r2, #1
 801e9e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801e9e6:	697b      	ldr	r3, [r7, #20]
 801e9e8:	2201      	movs	r2, #1
 801e9ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e9ee:	697b      	ldr	r3, [r7, #20]
 801e9f0:	2200      	movs	r2, #0
 801e9f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801e9f4:	697b      	ldr	r3, [r7, #20]
 801e9f6:	2200      	movs	r2, #0
 801e9f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801e9fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801e9fe:	4618      	mov	r0, r3
 801ea00:	3730      	adds	r7, #48	; 0x30
 801ea02:	46bd      	mov	sp, r7
 801ea04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ea08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801ea08:	b480      	push	{r7}
 801ea0a:	b083      	sub	sp, #12
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea14:	f003 0301 	and.w	r3, r3, #1
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d00a      	beq.n	801ea32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	685b      	ldr	r3, [r3, #4]
 801ea22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	681b      	ldr	r3, [r3, #0]
 801ea2e:	430a      	orrs	r2, r1
 801ea30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea36:	f003 0302 	and.w	r3, r3, #2
 801ea3a:	2b00      	cmp	r3, #0
 801ea3c:	d00a      	beq.n	801ea54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ea3e:	687b      	ldr	r3, [r7, #4]
 801ea40:	681b      	ldr	r3, [r3, #0]
 801ea42:	685b      	ldr	r3, [r3, #4]
 801ea44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	430a      	orrs	r2, r1
 801ea52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea58:	f003 0304 	and.w	r3, r3, #4
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d00a      	beq.n	801ea76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	681b      	ldr	r3, [r3, #0]
 801ea64:	685b      	ldr	r3, [r3, #4]
 801ea66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	430a      	orrs	r2, r1
 801ea74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea7a:	f003 0308 	and.w	r3, r3, #8
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d00a      	beq.n	801ea98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	685b      	ldr	r3, [r3, #4]
 801ea88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	430a      	orrs	r2, r1
 801ea96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea9c:	f003 0310 	and.w	r3, r3, #16
 801eaa0:	2b00      	cmp	r3, #0
 801eaa2:	d00a      	beq.n	801eaba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	689b      	ldr	r3, [r3, #8]
 801eaaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	430a      	orrs	r2, r1
 801eab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eabe:	f003 0320 	and.w	r3, r3, #32
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d00a      	beq.n	801eadc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	681b      	ldr	r3, [r3, #0]
 801eaca:	689b      	ldr	r3, [r3, #8]
 801eacc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	430a      	orrs	r2, r1
 801eada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d01a      	beq.n	801eb1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	685b      	ldr	r3, [r3, #4]
 801eaee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	430a      	orrs	r2, r1
 801eafc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eb02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801eb06:	d10a      	bne.n	801eb1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	685b      	ldr	r3, [r3, #4]
 801eb0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	430a      	orrs	r2, r1
 801eb1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	d00a      	beq.n	801eb40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	685b      	ldr	r3, [r3, #4]
 801eb30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	430a      	orrs	r2, r1
 801eb3e:	605a      	str	r2, [r3, #4]
  }
}
 801eb40:	bf00      	nop
 801eb42:	370c      	adds	r7, #12
 801eb44:	46bd      	mov	sp, r7
 801eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb4a:	4770      	bx	lr

0801eb4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801eb4c:	b580      	push	{r7, lr}
 801eb4e:	b086      	sub	sp, #24
 801eb50:	af02      	add	r7, sp, #8
 801eb52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	2200      	movs	r2, #0
 801eb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801eb5c:	f7f8 ff58 	bl	8017a10 <HAL_GetTick>
 801eb60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	f003 0308 	and.w	r3, r3, #8
 801eb6c:	2b08      	cmp	r3, #8
 801eb6e:	d10e      	bne.n	801eb8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801eb70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801eb74:	9300      	str	r3, [sp, #0]
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	2200      	movs	r2, #0
 801eb7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801eb7e:	6878      	ldr	r0, [r7, #4]
 801eb80:	f000 f82f 	bl	801ebe2 <UART_WaitOnFlagUntilTimeout>
 801eb84:	4603      	mov	r3, r0
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d001      	beq.n	801eb8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801eb8a:	2303      	movs	r3, #3
 801eb8c:	e025      	b.n	801ebda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	f003 0304 	and.w	r3, r3, #4
 801eb98:	2b04      	cmp	r3, #4
 801eb9a:	d10e      	bne.n	801ebba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801eb9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801eba0:	9300      	str	r3, [sp, #0]
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	2200      	movs	r2, #0
 801eba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801ebaa:	6878      	ldr	r0, [r7, #4]
 801ebac:	f000 f819 	bl	801ebe2 <UART_WaitOnFlagUntilTimeout>
 801ebb0:	4603      	mov	r3, r0
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d001      	beq.n	801ebba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ebb6:	2303      	movs	r3, #3
 801ebb8:	e00f      	b.n	801ebda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	2220      	movs	r2, #32
 801ebbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	2220      	movs	r2, #32
 801ebc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	2200      	movs	r2, #0
 801ebce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	2200      	movs	r2, #0
 801ebd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ebd8:	2300      	movs	r3, #0
}
 801ebda:	4618      	mov	r0, r3
 801ebdc:	3710      	adds	r7, #16
 801ebde:	46bd      	mov	sp, r7
 801ebe0:	bd80      	pop	{r7, pc}

0801ebe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ebe2:	b580      	push	{r7, lr}
 801ebe4:	b09c      	sub	sp, #112	; 0x70
 801ebe6:	af00      	add	r7, sp, #0
 801ebe8:	60f8      	str	r0, [r7, #12]
 801ebea:	60b9      	str	r1, [r7, #8]
 801ebec:	603b      	str	r3, [r7, #0]
 801ebee:	4613      	mov	r3, r2
 801ebf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ebf2:	e0a9      	b.n	801ed48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ebf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ebf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebfa:	f000 80a5 	beq.w	801ed48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ebfe:	f7f8 ff07 	bl	8017a10 <HAL_GetTick>
 801ec02:	4602      	mov	r2, r0
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	1ad3      	subs	r3, r2, r3
 801ec08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ec0a:	429a      	cmp	r2, r3
 801ec0c:	d302      	bcc.n	801ec14 <UART_WaitOnFlagUntilTimeout+0x32>
 801ec0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d140      	bne.n	801ec96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ec14:	68fb      	ldr	r3, [r7, #12]
 801ec16:	681b      	ldr	r3, [r3, #0]
 801ec18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ec1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ec1c:	e853 3f00 	ldrex	r3, [r3]
 801ec20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ec22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ec24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ec28:	667b      	str	r3, [r7, #100]	; 0x64
 801ec2a:	68fb      	ldr	r3, [r7, #12]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	461a      	mov	r2, r3
 801ec30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ec32:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ec34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ec36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ec38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ec3a:	e841 2300 	strex	r3, r2, [r1]
 801ec3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ec40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d1e6      	bne.n	801ec14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	3308      	adds	r3, #8
 801ec4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ec4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec50:	e853 3f00 	ldrex	r3, [r3]
 801ec54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ec56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ec58:	f023 0301 	bic.w	r3, r3, #1
 801ec5c:	663b      	str	r3, [r7, #96]	; 0x60
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	3308      	adds	r3, #8
 801ec64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ec66:	64ba      	str	r2, [r7, #72]	; 0x48
 801ec68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ec6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ec6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ec6e:	e841 2300 	strex	r3, r2, [r1]
 801ec72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801ec74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d1e5      	bne.n	801ec46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	2220      	movs	r2, #32
 801ec7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	2220      	movs	r2, #32
 801ec86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801ec8a:	68fb      	ldr	r3, [r7, #12]
 801ec8c:	2200      	movs	r2, #0
 801ec8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801ec92:	2303      	movs	r3, #3
 801ec94:	e069      	b.n	801ed6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ec96:	68fb      	ldr	r3, [r7, #12]
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	681b      	ldr	r3, [r3, #0]
 801ec9c:	f003 0304 	and.w	r3, r3, #4
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d051      	beq.n	801ed48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	69db      	ldr	r3, [r3, #28]
 801ecaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ecae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ecb2:	d149      	bne.n	801ed48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ecb4:	68fb      	ldr	r3, [r7, #12]
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ecbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ecbe:	68fb      	ldr	r3, [r7, #12]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ecc6:	e853 3f00 	ldrex	r3, [r3]
 801ecca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ecd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ecd4:	68fb      	ldr	r3, [r7, #12]
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	461a      	mov	r2, r3
 801ecda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecdc:	637b      	str	r3, [r7, #52]	; 0x34
 801ecde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ece0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ece2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ece4:	e841 2300 	strex	r3, r2, [r1]
 801ece8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d1e6      	bne.n	801ecbe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	3308      	adds	r3, #8
 801ecf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ecf8:	697b      	ldr	r3, [r7, #20]
 801ecfa:	e853 3f00 	ldrex	r3, [r3]
 801ecfe:	613b      	str	r3, [r7, #16]
   return(result);
 801ed00:	693b      	ldr	r3, [r7, #16]
 801ed02:	f023 0301 	bic.w	r3, r3, #1
 801ed06:	66bb      	str	r3, [r7, #104]	; 0x68
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	3308      	adds	r3, #8
 801ed0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ed10:	623a      	str	r2, [r7, #32]
 801ed12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ed14:	69f9      	ldr	r1, [r7, #28]
 801ed16:	6a3a      	ldr	r2, [r7, #32]
 801ed18:	e841 2300 	strex	r3, r2, [r1]
 801ed1c:	61bb      	str	r3, [r7, #24]
   return(result);
 801ed1e:	69bb      	ldr	r3, [r7, #24]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d1e5      	bne.n	801ecf0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801ed24:	68fb      	ldr	r3, [r7, #12]
 801ed26:	2220      	movs	r2, #32
 801ed28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801ed2c:	68fb      	ldr	r3, [r7, #12]
 801ed2e:	2220      	movs	r2, #32
 801ed30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	2220      	movs	r2, #32
 801ed38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	2200      	movs	r2, #0
 801ed40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801ed44:	2303      	movs	r3, #3
 801ed46:	e010      	b.n	801ed6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ed48:	68fb      	ldr	r3, [r7, #12]
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	69da      	ldr	r2, [r3, #28]
 801ed4e:	68bb      	ldr	r3, [r7, #8]
 801ed50:	4013      	ands	r3, r2
 801ed52:	68ba      	ldr	r2, [r7, #8]
 801ed54:	429a      	cmp	r2, r3
 801ed56:	bf0c      	ite	eq
 801ed58:	2301      	moveq	r3, #1
 801ed5a:	2300      	movne	r3, #0
 801ed5c:	b2db      	uxtb	r3, r3
 801ed5e:	461a      	mov	r2, r3
 801ed60:	79fb      	ldrb	r3, [r7, #7]
 801ed62:	429a      	cmp	r2, r3
 801ed64:	f43f af46 	beq.w	801ebf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ed68:	2300      	movs	r3, #0
}
 801ed6a:	4618      	mov	r0, r3
 801ed6c:	3770      	adds	r7, #112	; 0x70
 801ed6e:	46bd      	mov	sp, r7
 801ed70:	bd80      	pop	{r7, pc}

0801ed72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ed72:	b480      	push	{r7}
 801ed74:	b085      	sub	sp, #20
 801ed76:	af00      	add	r7, sp, #0
 801ed78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ed80:	2b01      	cmp	r3, #1
 801ed82:	d101      	bne.n	801ed88 <HAL_UARTEx_DisableFifoMode+0x16>
 801ed84:	2302      	movs	r3, #2
 801ed86:	e027      	b.n	801edd8 <HAL_UARTEx_DisableFifoMode+0x66>
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	2201      	movs	r2, #1
 801ed8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	2224      	movs	r2, #36	; 0x24
 801ed94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	681a      	ldr	r2, [r3, #0]
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	f022 0201 	bic.w	r2, r2, #1
 801edae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801edb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	2200      	movs	r2, #0
 801edbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	68fa      	ldr	r2, [r7, #12]
 801edc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	2220      	movs	r2, #32
 801edca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	2200      	movs	r2, #0
 801edd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801edd6:	2300      	movs	r3, #0
}
 801edd8:	4618      	mov	r0, r3
 801edda:	3714      	adds	r7, #20
 801eddc:	46bd      	mov	sp, r7
 801edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ede2:	4770      	bx	lr

0801ede4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b084      	sub	sp, #16
 801ede8:	af00      	add	r7, sp, #0
 801edea:	6078      	str	r0, [r7, #4]
 801edec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801edf4:	2b01      	cmp	r3, #1
 801edf6:	d101      	bne.n	801edfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801edf8:	2302      	movs	r3, #2
 801edfa:	e02d      	b.n	801ee58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	2201      	movs	r2, #1
 801ee00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	2224      	movs	r2, #36	; 0x24
 801ee08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	681a      	ldr	r2, [r3, #0]
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	f022 0201 	bic.w	r2, r2, #1
 801ee22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	681b      	ldr	r3, [r3, #0]
 801ee28:	689b      	ldr	r3, [r3, #8]
 801ee2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	683a      	ldr	r2, [r7, #0]
 801ee34:	430a      	orrs	r2, r1
 801ee36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ee38:	6878      	ldr	r0, [r7, #4]
 801ee3a:	f000 f84f 	bl	801eedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	68fa      	ldr	r2, [r7, #12]
 801ee44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	2220      	movs	r2, #32
 801ee4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	2200      	movs	r2, #0
 801ee52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ee56:	2300      	movs	r3, #0
}
 801ee58:	4618      	mov	r0, r3
 801ee5a:	3710      	adds	r7, #16
 801ee5c:	46bd      	mov	sp, r7
 801ee5e:	bd80      	pop	{r7, pc}

0801ee60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ee60:	b580      	push	{r7, lr}
 801ee62:	b084      	sub	sp, #16
 801ee64:	af00      	add	r7, sp, #0
 801ee66:	6078      	str	r0, [r7, #4]
 801ee68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ee70:	2b01      	cmp	r3, #1
 801ee72:	d101      	bne.n	801ee78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ee74:	2302      	movs	r3, #2
 801ee76:	e02d      	b.n	801eed4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	2201      	movs	r2, #1
 801ee7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	2224      	movs	r2, #36	; 0x24
 801ee84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	681b      	ldr	r3, [r3, #0]
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	681a      	ldr	r2, [r3, #0]
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	f022 0201 	bic.w	r2, r2, #1
 801ee9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	689b      	ldr	r3, [r3, #8]
 801eea6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	681b      	ldr	r3, [r3, #0]
 801eeae:	683a      	ldr	r2, [r7, #0]
 801eeb0:	430a      	orrs	r2, r1
 801eeb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801eeb4:	6878      	ldr	r0, [r7, #4]
 801eeb6:	f000 f811 	bl	801eedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	68fa      	ldr	r2, [r7, #12]
 801eec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	2220      	movs	r2, #32
 801eec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	2200      	movs	r2, #0
 801eece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801eed2:	2300      	movs	r3, #0
}
 801eed4:	4618      	mov	r0, r3
 801eed6:	3710      	adds	r7, #16
 801eed8:	46bd      	mov	sp, r7
 801eeda:	bd80      	pop	{r7, pc}

0801eedc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801eedc:	b480      	push	{r7}
 801eede:	b085      	sub	sp, #20
 801eee0:	af00      	add	r7, sp, #0
 801eee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	d108      	bne.n	801eefe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	2201      	movs	r2, #1
 801eef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	2201      	movs	r2, #1
 801eef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801eefc:	e031      	b.n	801ef62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801eefe:	2308      	movs	r3, #8
 801ef00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ef02:	2308      	movs	r3, #8
 801ef04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	689b      	ldr	r3, [r3, #8]
 801ef0c:	0e5b      	lsrs	r3, r3, #25
 801ef0e:	b2db      	uxtb	r3, r3
 801ef10:	f003 0307 	and.w	r3, r3, #7
 801ef14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	689b      	ldr	r3, [r3, #8]
 801ef1c:	0f5b      	lsrs	r3, r3, #29
 801ef1e:	b2db      	uxtb	r3, r3
 801ef20:	f003 0307 	and.w	r3, r3, #7
 801ef24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ef26:	7bbb      	ldrb	r3, [r7, #14]
 801ef28:	7b3a      	ldrb	r2, [r7, #12]
 801ef2a:	4911      	ldr	r1, [pc, #68]	; (801ef70 <UARTEx_SetNbDataToProcess+0x94>)
 801ef2c:	5c8a      	ldrb	r2, [r1, r2]
 801ef2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ef32:	7b3a      	ldrb	r2, [r7, #12]
 801ef34:	490f      	ldr	r1, [pc, #60]	; (801ef74 <UARTEx_SetNbDataToProcess+0x98>)
 801ef36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ef38:	fb93 f3f2 	sdiv	r3, r3, r2
 801ef3c:	b29a      	uxth	r2, r3
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ef44:	7bfb      	ldrb	r3, [r7, #15]
 801ef46:	7b7a      	ldrb	r2, [r7, #13]
 801ef48:	4909      	ldr	r1, [pc, #36]	; (801ef70 <UARTEx_SetNbDataToProcess+0x94>)
 801ef4a:	5c8a      	ldrb	r2, [r1, r2]
 801ef4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ef50:	7b7a      	ldrb	r2, [r7, #13]
 801ef52:	4908      	ldr	r1, [pc, #32]	; (801ef74 <UARTEx_SetNbDataToProcess+0x98>)
 801ef54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ef56:	fb93 f3f2 	sdiv	r3, r3, r2
 801ef5a:	b29a      	uxth	r2, r3
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801ef62:	bf00      	nop
 801ef64:	3714      	adds	r7, #20
 801ef66:	46bd      	mov	sp, r7
 801ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef6c:	4770      	bx	lr
 801ef6e:	bf00      	nop
 801ef70:	08022314 	.word	0x08022314
 801ef74:	0802231c 	.word	0x0802231c

0801ef78 <__errno>:
 801ef78:	4b01      	ldr	r3, [pc, #4]	; (801ef80 <__errno+0x8>)
 801ef7a:	6818      	ldr	r0, [r3, #0]
 801ef7c:	4770      	bx	lr
 801ef7e:	bf00      	nop
 801ef80:	2000002c 	.word	0x2000002c

0801ef84 <__libc_init_array>:
 801ef84:	b570      	push	{r4, r5, r6, lr}
 801ef86:	4d0d      	ldr	r5, [pc, #52]	; (801efbc <__libc_init_array+0x38>)
 801ef88:	4c0d      	ldr	r4, [pc, #52]	; (801efc0 <__libc_init_array+0x3c>)
 801ef8a:	1b64      	subs	r4, r4, r5
 801ef8c:	10a4      	asrs	r4, r4, #2
 801ef8e:	2600      	movs	r6, #0
 801ef90:	42a6      	cmp	r6, r4
 801ef92:	d109      	bne.n	801efa8 <__libc_init_array+0x24>
 801ef94:	4d0b      	ldr	r5, [pc, #44]	; (801efc4 <__libc_init_array+0x40>)
 801ef96:	4c0c      	ldr	r4, [pc, #48]	; (801efc8 <__libc_init_array+0x44>)
 801ef98:	f003 f828 	bl	8021fec <_init>
 801ef9c:	1b64      	subs	r4, r4, r5
 801ef9e:	10a4      	asrs	r4, r4, #2
 801efa0:	2600      	movs	r6, #0
 801efa2:	42a6      	cmp	r6, r4
 801efa4:	d105      	bne.n	801efb2 <__libc_init_array+0x2e>
 801efa6:	bd70      	pop	{r4, r5, r6, pc}
 801efa8:	f855 3b04 	ldr.w	r3, [r5], #4
 801efac:	4798      	blx	r3
 801efae:	3601      	adds	r6, #1
 801efb0:	e7ee      	b.n	801ef90 <__libc_init_array+0xc>
 801efb2:	f855 3b04 	ldr.w	r3, [r5], #4
 801efb6:	4798      	blx	r3
 801efb8:	3601      	adds	r6, #1
 801efba:	e7f2      	b.n	801efa2 <__libc_init_array+0x1e>
 801efbc:	08022738 	.word	0x08022738
 801efc0:	08022738 	.word	0x08022738
 801efc4:	08022738 	.word	0x08022738
 801efc8:	0802273c 	.word	0x0802273c

0801efcc <memcpy>:
 801efcc:	440a      	add	r2, r1
 801efce:	4291      	cmp	r1, r2
 801efd0:	f100 33ff 	add.w	r3, r0, #4294967295
 801efd4:	d100      	bne.n	801efd8 <memcpy+0xc>
 801efd6:	4770      	bx	lr
 801efd8:	b510      	push	{r4, lr}
 801efda:	f811 4b01 	ldrb.w	r4, [r1], #1
 801efde:	f803 4f01 	strb.w	r4, [r3, #1]!
 801efe2:	4291      	cmp	r1, r2
 801efe4:	d1f9      	bne.n	801efda <memcpy+0xe>
 801efe6:	bd10      	pop	{r4, pc}

0801efe8 <memset>:
 801efe8:	4402      	add	r2, r0
 801efea:	4603      	mov	r3, r0
 801efec:	4293      	cmp	r3, r2
 801efee:	d100      	bne.n	801eff2 <memset+0xa>
 801eff0:	4770      	bx	lr
 801eff2:	f803 1b01 	strb.w	r1, [r3], #1
 801eff6:	e7f9      	b.n	801efec <memset+0x4>

0801eff8 <__cvt>:
 801eff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801effc:	ec55 4b10 	vmov	r4, r5, d0
 801f000:	2d00      	cmp	r5, #0
 801f002:	460e      	mov	r6, r1
 801f004:	4619      	mov	r1, r3
 801f006:	462b      	mov	r3, r5
 801f008:	bfbb      	ittet	lt
 801f00a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f00e:	461d      	movlt	r5, r3
 801f010:	2300      	movge	r3, #0
 801f012:	232d      	movlt	r3, #45	; 0x2d
 801f014:	700b      	strb	r3, [r1, #0]
 801f016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f01c:	4691      	mov	r9, r2
 801f01e:	f023 0820 	bic.w	r8, r3, #32
 801f022:	bfbc      	itt	lt
 801f024:	4622      	movlt	r2, r4
 801f026:	4614      	movlt	r4, r2
 801f028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f02c:	d005      	beq.n	801f03a <__cvt+0x42>
 801f02e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f032:	d100      	bne.n	801f036 <__cvt+0x3e>
 801f034:	3601      	adds	r6, #1
 801f036:	2102      	movs	r1, #2
 801f038:	e000      	b.n	801f03c <__cvt+0x44>
 801f03a:	2103      	movs	r1, #3
 801f03c:	ab03      	add	r3, sp, #12
 801f03e:	9301      	str	r3, [sp, #4]
 801f040:	ab02      	add	r3, sp, #8
 801f042:	9300      	str	r3, [sp, #0]
 801f044:	ec45 4b10 	vmov	d0, r4, r5
 801f048:	4653      	mov	r3, sl
 801f04a:	4632      	mov	r2, r6
 801f04c:	f000 fe30 	bl	801fcb0 <_dtoa_r>
 801f050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f054:	4607      	mov	r7, r0
 801f056:	d102      	bne.n	801f05e <__cvt+0x66>
 801f058:	f019 0f01 	tst.w	r9, #1
 801f05c:	d022      	beq.n	801f0a4 <__cvt+0xac>
 801f05e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f062:	eb07 0906 	add.w	r9, r7, r6
 801f066:	d110      	bne.n	801f08a <__cvt+0x92>
 801f068:	783b      	ldrb	r3, [r7, #0]
 801f06a:	2b30      	cmp	r3, #48	; 0x30
 801f06c:	d10a      	bne.n	801f084 <__cvt+0x8c>
 801f06e:	2200      	movs	r2, #0
 801f070:	2300      	movs	r3, #0
 801f072:	4620      	mov	r0, r4
 801f074:	4629      	mov	r1, r5
 801f076:	f7e1 fd4f 	bl	8000b18 <__aeabi_dcmpeq>
 801f07a:	b918      	cbnz	r0, 801f084 <__cvt+0x8c>
 801f07c:	f1c6 0601 	rsb	r6, r6, #1
 801f080:	f8ca 6000 	str.w	r6, [sl]
 801f084:	f8da 3000 	ldr.w	r3, [sl]
 801f088:	4499      	add	r9, r3
 801f08a:	2200      	movs	r2, #0
 801f08c:	2300      	movs	r3, #0
 801f08e:	4620      	mov	r0, r4
 801f090:	4629      	mov	r1, r5
 801f092:	f7e1 fd41 	bl	8000b18 <__aeabi_dcmpeq>
 801f096:	b108      	cbz	r0, 801f09c <__cvt+0xa4>
 801f098:	f8cd 900c 	str.w	r9, [sp, #12]
 801f09c:	2230      	movs	r2, #48	; 0x30
 801f09e:	9b03      	ldr	r3, [sp, #12]
 801f0a0:	454b      	cmp	r3, r9
 801f0a2:	d307      	bcc.n	801f0b4 <__cvt+0xbc>
 801f0a4:	9b03      	ldr	r3, [sp, #12]
 801f0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f0a8:	1bdb      	subs	r3, r3, r7
 801f0aa:	4638      	mov	r0, r7
 801f0ac:	6013      	str	r3, [r2, #0]
 801f0ae:	b004      	add	sp, #16
 801f0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0b4:	1c59      	adds	r1, r3, #1
 801f0b6:	9103      	str	r1, [sp, #12]
 801f0b8:	701a      	strb	r2, [r3, #0]
 801f0ba:	e7f0      	b.n	801f09e <__cvt+0xa6>

0801f0bc <__exponent>:
 801f0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f0be:	4603      	mov	r3, r0
 801f0c0:	2900      	cmp	r1, #0
 801f0c2:	bfb8      	it	lt
 801f0c4:	4249      	neglt	r1, r1
 801f0c6:	f803 2b02 	strb.w	r2, [r3], #2
 801f0ca:	bfb4      	ite	lt
 801f0cc:	222d      	movlt	r2, #45	; 0x2d
 801f0ce:	222b      	movge	r2, #43	; 0x2b
 801f0d0:	2909      	cmp	r1, #9
 801f0d2:	7042      	strb	r2, [r0, #1]
 801f0d4:	dd2a      	ble.n	801f12c <__exponent+0x70>
 801f0d6:	f10d 0407 	add.w	r4, sp, #7
 801f0da:	46a4      	mov	ip, r4
 801f0dc:	270a      	movs	r7, #10
 801f0de:	46a6      	mov	lr, r4
 801f0e0:	460a      	mov	r2, r1
 801f0e2:	fb91 f6f7 	sdiv	r6, r1, r7
 801f0e6:	fb07 1516 	mls	r5, r7, r6, r1
 801f0ea:	3530      	adds	r5, #48	; 0x30
 801f0ec:	2a63      	cmp	r2, #99	; 0x63
 801f0ee:	f104 34ff 	add.w	r4, r4, #4294967295
 801f0f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f0f6:	4631      	mov	r1, r6
 801f0f8:	dcf1      	bgt.n	801f0de <__exponent+0x22>
 801f0fa:	3130      	adds	r1, #48	; 0x30
 801f0fc:	f1ae 0502 	sub.w	r5, lr, #2
 801f100:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f104:	1c44      	adds	r4, r0, #1
 801f106:	4629      	mov	r1, r5
 801f108:	4561      	cmp	r1, ip
 801f10a:	d30a      	bcc.n	801f122 <__exponent+0x66>
 801f10c:	f10d 0209 	add.w	r2, sp, #9
 801f110:	eba2 020e 	sub.w	r2, r2, lr
 801f114:	4565      	cmp	r5, ip
 801f116:	bf88      	it	hi
 801f118:	2200      	movhi	r2, #0
 801f11a:	4413      	add	r3, r2
 801f11c:	1a18      	subs	r0, r3, r0
 801f11e:	b003      	add	sp, #12
 801f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f122:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f126:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f12a:	e7ed      	b.n	801f108 <__exponent+0x4c>
 801f12c:	2330      	movs	r3, #48	; 0x30
 801f12e:	3130      	adds	r1, #48	; 0x30
 801f130:	7083      	strb	r3, [r0, #2]
 801f132:	70c1      	strb	r1, [r0, #3]
 801f134:	1d03      	adds	r3, r0, #4
 801f136:	e7f1      	b.n	801f11c <__exponent+0x60>

0801f138 <_printf_float>:
 801f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f13c:	ed2d 8b02 	vpush	{d8}
 801f140:	b08d      	sub	sp, #52	; 0x34
 801f142:	460c      	mov	r4, r1
 801f144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f148:	4616      	mov	r6, r2
 801f14a:	461f      	mov	r7, r3
 801f14c:	4605      	mov	r5, r0
 801f14e:	f001 fd55 	bl	8020bfc <_localeconv_r>
 801f152:	f8d0 a000 	ldr.w	sl, [r0]
 801f156:	4650      	mov	r0, sl
 801f158:	f7e1 f862 	bl	8000220 <strlen>
 801f15c:	2300      	movs	r3, #0
 801f15e:	930a      	str	r3, [sp, #40]	; 0x28
 801f160:	6823      	ldr	r3, [r4, #0]
 801f162:	9305      	str	r3, [sp, #20]
 801f164:	f8d8 3000 	ldr.w	r3, [r8]
 801f168:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f16c:	3307      	adds	r3, #7
 801f16e:	f023 0307 	bic.w	r3, r3, #7
 801f172:	f103 0208 	add.w	r2, r3, #8
 801f176:	f8c8 2000 	str.w	r2, [r8]
 801f17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f17e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f18a:	9307      	str	r3, [sp, #28]
 801f18c:	f8cd 8018 	str.w	r8, [sp, #24]
 801f190:	ee08 0a10 	vmov	s16, r0
 801f194:	4b9f      	ldr	r3, [pc, #636]	; (801f414 <_printf_float+0x2dc>)
 801f196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f19a:	f04f 32ff 	mov.w	r2, #4294967295
 801f19e:	f7e1 fced 	bl	8000b7c <__aeabi_dcmpun>
 801f1a2:	bb88      	cbnz	r0, 801f208 <_printf_float+0xd0>
 801f1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f1a8:	4b9a      	ldr	r3, [pc, #616]	; (801f414 <_printf_float+0x2dc>)
 801f1aa:	f04f 32ff 	mov.w	r2, #4294967295
 801f1ae:	f7e1 fcc7 	bl	8000b40 <__aeabi_dcmple>
 801f1b2:	bb48      	cbnz	r0, 801f208 <_printf_float+0xd0>
 801f1b4:	2200      	movs	r2, #0
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	4640      	mov	r0, r8
 801f1ba:	4649      	mov	r1, r9
 801f1bc:	f7e1 fcb6 	bl	8000b2c <__aeabi_dcmplt>
 801f1c0:	b110      	cbz	r0, 801f1c8 <_printf_float+0x90>
 801f1c2:	232d      	movs	r3, #45	; 0x2d
 801f1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f1c8:	4b93      	ldr	r3, [pc, #588]	; (801f418 <_printf_float+0x2e0>)
 801f1ca:	4894      	ldr	r0, [pc, #592]	; (801f41c <_printf_float+0x2e4>)
 801f1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f1d0:	bf94      	ite	ls
 801f1d2:	4698      	movls	r8, r3
 801f1d4:	4680      	movhi	r8, r0
 801f1d6:	2303      	movs	r3, #3
 801f1d8:	6123      	str	r3, [r4, #16]
 801f1da:	9b05      	ldr	r3, [sp, #20]
 801f1dc:	f023 0204 	bic.w	r2, r3, #4
 801f1e0:	6022      	str	r2, [r4, #0]
 801f1e2:	f04f 0900 	mov.w	r9, #0
 801f1e6:	9700      	str	r7, [sp, #0]
 801f1e8:	4633      	mov	r3, r6
 801f1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 801f1ec:	4621      	mov	r1, r4
 801f1ee:	4628      	mov	r0, r5
 801f1f0:	f000 f9d8 	bl	801f5a4 <_printf_common>
 801f1f4:	3001      	adds	r0, #1
 801f1f6:	f040 8090 	bne.w	801f31a <_printf_float+0x1e2>
 801f1fa:	f04f 30ff 	mov.w	r0, #4294967295
 801f1fe:	b00d      	add	sp, #52	; 0x34
 801f200:	ecbd 8b02 	vpop	{d8}
 801f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f208:	4642      	mov	r2, r8
 801f20a:	464b      	mov	r3, r9
 801f20c:	4640      	mov	r0, r8
 801f20e:	4649      	mov	r1, r9
 801f210:	f7e1 fcb4 	bl	8000b7c <__aeabi_dcmpun>
 801f214:	b140      	cbz	r0, 801f228 <_printf_float+0xf0>
 801f216:	464b      	mov	r3, r9
 801f218:	2b00      	cmp	r3, #0
 801f21a:	bfbc      	itt	lt
 801f21c:	232d      	movlt	r3, #45	; 0x2d
 801f21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f222:	487f      	ldr	r0, [pc, #508]	; (801f420 <_printf_float+0x2e8>)
 801f224:	4b7f      	ldr	r3, [pc, #508]	; (801f424 <_printf_float+0x2ec>)
 801f226:	e7d1      	b.n	801f1cc <_printf_float+0x94>
 801f228:	6863      	ldr	r3, [r4, #4]
 801f22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f22e:	9206      	str	r2, [sp, #24]
 801f230:	1c5a      	adds	r2, r3, #1
 801f232:	d13f      	bne.n	801f2b4 <_printf_float+0x17c>
 801f234:	2306      	movs	r3, #6
 801f236:	6063      	str	r3, [r4, #4]
 801f238:	9b05      	ldr	r3, [sp, #20]
 801f23a:	6861      	ldr	r1, [r4, #4]
 801f23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f240:	2300      	movs	r3, #0
 801f242:	9303      	str	r3, [sp, #12]
 801f244:	ab0a      	add	r3, sp, #40	; 0x28
 801f246:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f24a:	ab09      	add	r3, sp, #36	; 0x24
 801f24c:	ec49 8b10 	vmov	d0, r8, r9
 801f250:	9300      	str	r3, [sp, #0]
 801f252:	6022      	str	r2, [r4, #0]
 801f254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f258:	4628      	mov	r0, r5
 801f25a:	f7ff fecd 	bl	801eff8 <__cvt>
 801f25e:	9b06      	ldr	r3, [sp, #24]
 801f260:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f262:	2b47      	cmp	r3, #71	; 0x47
 801f264:	4680      	mov	r8, r0
 801f266:	d108      	bne.n	801f27a <_printf_float+0x142>
 801f268:	1cc8      	adds	r0, r1, #3
 801f26a:	db02      	blt.n	801f272 <_printf_float+0x13a>
 801f26c:	6863      	ldr	r3, [r4, #4]
 801f26e:	4299      	cmp	r1, r3
 801f270:	dd41      	ble.n	801f2f6 <_printf_float+0x1be>
 801f272:	f1ab 0b02 	sub.w	fp, fp, #2
 801f276:	fa5f fb8b 	uxtb.w	fp, fp
 801f27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f27e:	d820      	bhi.n	801f2c2 <_printf_float+0x18a>
 801f280:	3901      	subs	r1, #1
 801f282:	465a      	mov	r2, fp
 801f284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f288:	9109      	str	r1, [sp, #36]	; 0x24
 801f28a:	f7ff ff17 	bl	801f0bc <__exponent>
 801f28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f290:	1813      	adds	r3, r2, r0
 801f292:	2a01      	cmp	r2, #1
 801f294:	4681      	mov	r9, r0
 801f296:	6123      	str	r3, [r4, #16]
 801f298:	dc02      	bgt.n	801f2a0 <_printf_float+0x168>
 801f29a:	6822      	ldr	r2, [r4, #0]
 801f29c:	07d2      	lsls	r2, r2, #31
 801f29e:	d501      	bpl.n	801f2a4 <_printf_float+0x16c>
 801f2a0:	3301      	adds	r3, #1
 801f2a2:	6123      	str	r3, [r4, #16]
 801f2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d09c      	beq.n	801f1e6 <_printf_float+0xae>
 801f2ac:	232d      	movs	r3, #45	; 0x2d
 801f2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f2b2:	e798      	b.n	801f1e6 <_printf_float+0xae>
 801f2b4:	9a06      	ldr	r2, [sp, #24]
 801f2b6:	2a47      	cmp	r2, #71	; 0x47
 801f2b8:	d1be      	bne.n	801f238 <_printf_float+0x100>
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d1bc      	bne.n	801f238 <_printf_float+0x100>
 801f2be:	2301      	movs	r3, #1
 801f2c0:	e7b9      	b.n	801f236 <_printf_float+0xfe>
 801f2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f2c6:	d118      	bne.n	801f2fa <_printf_float+0x1c2>
 801f2c8:	2900      	cmp	r1, #0
 801f2ca:	6863      	ldr	r3, [r4, #4]
 801f2cc:	dd0b      	ble.n	801f2e6 <_printf_float+0x1ae>
 801f2ce:	6121      	str	r1, [r4, #16]
 801f2d0:	b913      	cbnz	r3, 801f2d8 <_printf_float+0x1a0>
 801f2d2:	6822      	ldr	r2, [r4, #0]
 801f2d4:	07d0      	lsls	r0, r2, #31
 801f2d6:	d502      	bpl.n	801f2de <_printf_float+0x1a6>
 801f2d8:	3301      	adds	r3, #1
 801f2da:	440b      	add	r3, r1
 801f2dc:	6123      	str	r3, [r4, #16]
 801f2de:	65a1      	str	r1, [r4, #88]	; 0x58
 801f2e0:	f04f 0900 	mov.w	r9, #0
 801f2e4:	e7de      	b.n	801f2a4 <_printf_float+0x16c>
 801f2e6:	b913      	cbnz	r3, 801f2ee <_printf_float+0x1b6>
 801f2e8:	6822      	ldr	r2, [r4, #0]
 801f2ea:	07d2      	lsls	r2, r2, #31
 801f2ec:	d501      	bpl.n	801f2f2 <_printf_float+0x1ba>
 801f2ee:	3302      	adds	r3, #2
 801f2f0:	e7f4      	b.n	801f2dc <_printf_float+0x1a4>
 801f2f2:	2301      	movs	r3, #1
 801f2f4:	e7f2      	b.n	801f2dc <_printf_float+0x1a4>
 801f2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2fc:	4299      	cmp	r1, r3
 801f2fe:	db05      	blt.n	801f30c <_printf_float+0x1d4>
 801f300:	6823      	ldr	r3, [r4, #0]
 801f302:	6121      	str	r1, [r4, #16]
 801f304:	07d8      	lsls	r0, r3, #31
 801f306:	d5ea      	bpl.n	801f2de <_printf_float+0x1a6>
 801f308:	1c4b      	adds	r3, r1, #1
 801f30a:	e7e7      	b.n	801f2dc <_printf_float+0x1a4>
 801f30c:	2900      	cmp	r1, #0
 801f30e:	bfd4      	ite	le
 801f310:	f1c1 0202 	rsble	r2, r1, #2
 801f314:	2201      	movgt	r2, #1
 801f316:	4413      	add	r3, r2
 801f318:	e7e0      	b.n	801f2dc <_printf_float+0x1a4>
 801f31a:	6823      	ldr	r3, [r4, #0]
 801f31c:	055a      	lsls	r2, r3, #21
 801f31e:	d407      	bmi.n	801f330 <_printf_float+0x1f8>
 801f320:	6923      	ldr	r3, [r4, #16]
 801f322:	4642      	mov	r2, r8
 801f324:	4631      	mov	r1, r6
 801f326:	4628      	mov	r0, r5
 801f328:	47b8      	blx	r7
 801f32a:	3001      	adds	r0, #1
 801f32c:	d12c      	bne.n	801f388 <_printf_float+0x250>
 801f32e:	e764      	b.n	801f1fa <_printf_float+0xc2>
 801f330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f334:	f240 80e0 	bls.w	801f4f8 <_printf_float+0x3c0>
 801f338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f33c:	2200      	movs	r2, #0
 801f33e:	2300      	movs	r3, #0
 801f340:	f7e1 fbea 	bl	8000b18 <__aeabi_dcmpeq>
 801f344:	2800      	cmp	r0, #0
 801f346:	d034      	beq.n	801f3b2 <_printf_float+0x27a>
 801f348:	4a37      	ldr	r2, [pc, #220]	; (801f428 <_printf_float+0x2f0>)
 801f34a:	2301      	movs	r3, #1
 801f34c:	4631      	mov	r1, r6
 801f34e:	4628      	mov	r0, r5
 801f350:	47b8      	blx	r7
 801f352:	3001      	adds	r0, #1
 801f354:	f43f af51 	beq.w	801f1fa <_printf_float+0xc2>
 801f358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f35c:	429a      	cmp	r2, r3
 801f35e:	db02      	blt.n	801f366 <_printf_float+0x22e>
 801f360:	6823      	ldr	r3, [r4, #0]
 801f362:	07d8      	lsls	r0, r3, #31
 801f364:	d510      	bpl.n	801f388 <_printf_float+0x250>
 801f366:	ee18 3a10 	vmov	r3, s16
 801f36a:	4652      	mov	r2, sl
 801f36c:	4631      	mov	r1, r6
 801f36e:	4628      	mov	r0, r5
 801f370:	47b8      	blx	r7
 801f372:	3001      	adds	r0, #1
 801f374:	f43f af41 	beq.w	801f1fa <_printf_float+0xc2>
 801f378:	f04f 0800 	mov.w	r8, #0
 801f37c:	f104 091a 	add.w	r9, r4, #26
 801f380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f382:	3b01      	subs	r3, #1
 801f384:	4543      	cmp	r3, r8
 801f386:	dc09      	bgt.n	801f39c <_printf_float+0x264>
 801f388:	6823      	ldr	r3, [r4, #0]
 801f38a:	079b      	lsls	r3, r3, #30
 801f38c:	f100 8105 	bmi.w	801f59a <_printf_float+0x462>
 801f390:	68e0      	ldr	r0, [r4, #12]
 801f392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f394:	4298      	cmp	r0, r3
 801f396:	bfb8      	it	lt
 801f398:	4618      	movlt	r0, r3
 801f39a:	e730      	b.n	801f1fe <_printf_float+0xc6>
 801f39c:	2301      	movs	r3, #1
 801f39e:	464a      	mov	r2, r9
 801f3a0:	4631      	mov	r1, r6
 801f3a2:	4628      	mov	r0, r5
 801f3a4:	47b8      	blx	r7
 801f3a6:	3001      	adds	r0, #1
 801f3a8:	f43f af27 	beq.w	801f1fa <_printf_float+0xc2>
 801f3ac:	f108 0801 	add.w	r8, r8, #1
 801f3b0:	e7e6      	b.n	801f380 <_printf_float+0x248>
 801f3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	dc39      	bgt.n	801f42c <_printf_float+0x2f4>
 801f3b8:	4a1b      	ldr	r2, [pc, #108]	; (801f428 <_printf_float+0x2f0>)
 801f3ba:	2301      	movs	r3, #1
 801f3bc:	4631      	mov	r1, r6
 801f3be:	4628      	mov	r0, r5
 801f3c0:	47b8      	blx	r7
 801f3c2:	3001      	adds	r0, #1
 801f3c4:	f43f af19 	beq.w	801f1fa <_printf_float+0xc2>
 801f3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f3cc:	4313      	orrs	r3, r2
 801f3ce:	d102      	bne.n	801f3d6 <_printf_float+0x29e>
 801f3d0:	6823      	ldr	r3, [r4, #0]
 801f3d2:	07d9      	lsls	r1, r3, #31
 801f3d4:	d5d8      	bpl.n	801f388 <_printf_float+0x250>
 801f3d6:	ee18 3a10 	vmov	r3, s16
 801f3da:	4652      	mov	r2, sl
 801f3dc:	4631      	mov	r1, r6
 801f3de:	4628      	mov	r0, r5
 801f3e0:	47b8      	blx	r7
 801f3e2:	3001      	adds	r0, #1
 801f3e4:	f43f af09 	beq.w	801f1fa <_printf_float+0xc2>
 801f3e8:	f04f 0900 	mov.w	r9, #0
 801f3ec:	f104 0a1a 	add.w	sl, r4, #26
 801f3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3f2:	425b      	negs	r3, r3
 801f3f4:	454b      	cmp	r3, r9
 801f3f6:	dc01      	bgt.n	801f3fc <_printf_float+0x2c4>
 801f3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3fa:	e792      	b.n	801f322 <_printf_float+0x1ea>
 801f3fc:	2301      	movs	r3, #1
 801f3fe:	4652      	mov	r2, sl
 801f400:	4631      	mov	r1, r6
 801f402:	4628      	mov	r0, r5
 801f404:	47b8      	blx	r7
 801f406:	3001      	adds	r0, #1
 801f408:	f43f aef7 	beq.w	801f1fa <_printf_float+0xc2>
 801f40c:	f109 0901 	add.w	r9, r9, #1
 801f410:	e7ee      	b.n	801f3f0 <_printf_float+0x2b8>
 801f412:	bf00      	nop
 801f414:	7fefffff 	.word	0x7fefffff
 801f418:	08022328 	.word	0x08022328
 801f41c:	0802232c 	.word	0x0802232c
 801f420:	08022334 	.word	0x08022334
 801f424:	08022330 	.word	0x08022330
 801f428:	08022338 	.word	0x08022338
 801f42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f430:	429a      	cmp	r2, r3
 801f432:	bfa8      	it	ge
 801f434:	461a      	movge	r2, r3
 801f436:	2a00      	cmp	r2, #0
 801f438:	4691      	mov	r9, r2
 801f43a:	dc37      	bgt.n	801f4ac <_printf_float+0x374>
 801f43c:	f04f 0b00 	mov.w	fp, #0
 801f440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f444:	f104 021a 	add.w	r2, r4, #26
 801f448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f44a:	9305      	str	r3, [sp, #20]
 801f44c:	eba3 0309 	sub.w	r3, r3, r9
 801f450:	455b      	cmp	r3, fp
 801f452:	dc33      	bgt.n	801f4bc <_printf_float+0x384>
 801f454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f458:	429a      	cmp	r2, r3
 801f45a:	db3b      	blt.n	801f4d4 <_printf_float+0x39c>
 801f45c:	6823      	ldr	r3, [r4, #0]
 801f45e:	07da      	lsls	r2, r3, #31
 801f460:	d438      	bmi.n	801f4d4 <_printf_float+0x39c>
 801f462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f464:	9a05      	ldr	r2, [sp, #20]
 801f466:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f468:	1a9a      	subs	r2, r3, r2
 801f46a:	eba3 0901 	sub.w	r9, r3, r1
 801f46e:	4591      	cmp	r9, r2
 801f470:	bfa8      	it	ge
 801f472:	4691      	movge	r9, r2
 801f474:	f1b9 0f00 	cmp.w	r9, #0
 801f478:	dc35      	bgt.n	801f4e6 <_printf_float+0x3ae>
 801f47a:	f04f 0800 	mov.w	r8, #0
 801f47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f482:	f104 0a1a 	add.w	sl, r4, #26
 801f486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f48a:	1a9b      	subs	r3, r3, r2
 801f48c:	eba3 0309 	sub.w	r3, r3, r9
 801f490:	4543      	cmp	r3, r8
 801f492:	f77f af79 	ble.w	801f388 <_printf_float+0x250>
 801f496:	2301      	movs	r3, #1
 801f498:	4652      	mov	r2, sl
 801f49a:	4631      	mov	r1, r6
 801f49c:	4628      	mov	r0, r5
 801f49e:	47b8      	blx	r7
 801f4a0:	3001      	adds	r0, #1
 801f4a2:	f43f aeaa 	beq.w	801f1fa <_printf_float+0xc2>
 801f4a6:	f108 0801 	add.w	r8, r8, #1
 801f4aa:	e7ec      	b.n	801f486 <_printf_float+0x34e>
 801f4ac:	4613      	mov	r3, r2
 801f4ae:	4631      	mov	r1, r6
 801f4b0:	4642      	mov	r2, r8
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	47b8      	blx	r7
 801f4b6:	3001      	adds	r0, #1
 801f4b8:	d1c0      	bne.n	801f43c <_printf_float+0x304>
 801f4ba:	e69e      	b.n	801f1fa <_printf_float+0xc2>
 801f4bc:	2301      	movs	r3, #1
 801f4be:	4631      	mov	r1, r6
 801f4c0:	4628      	mov	r0, r5
 801f4c2:	9205      	str	r2, [sp, #20]
 801f4c4:	47b8      	blx	r7
 801f4c6:	3001      	adds	r0, #1
 801f4c8:	f43f ae97 	beq.w	801f1fa <_printf_float+0xc2>
 801f4cc:	9a05      	ldr	r2, [sp, #20]
 801f4ce:	f10b 0b01 	add.w	fp, fp, #1
 801f4d2:	e7b9      	b.n	801f448 <_printf_float+0x310>
 801f4d4:	ee18 3a10 	vmov	r3, s16
 801f4d8:	4652      	mov	r2, sl
 801f4da:	4631      	mov	r1, r6
 801f4dc:	4628      	mov	r0, r5
 801f4de:	47b8      	blx	r7
 801f4e0:	3001      	adds	r0, #1
 801f4e2:	d1be      	bne.n	801f462 <_printf_float+0x32a>
 801f4e4:	e689      	b.n	801f1fa <_printf_float+0xc2>
 801f4e6:	9a05      	ldr	r2, [sp, #20]
 801f4e8:	464b      	mov	r3, r9
 801f4ea:	4442      	add	r2, r8
 801f4ec:	4631      	mov	r1, r6
 801f4ee:	4628      	mov	r0, r5
 801f4f0:	47b8      	blx	r7
 801f4f2:	3001      	adds	r0, #1
 801f4f4:	d1c1      	bne.n	801f47a <_printf_float+0x342>
 801f4f6:	e680      	b.n	801f1fa <_printf_float+0xc2>
 801f4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4fa:	2a01      	cmp	r2, #1
 801f4fc:	dc01      	bgt.n	801f502 <_printf_float+0x3ca>
 801f4fe:	07db      	lsls	r3, r3, #31
 801f500:	d538      	bpl.n	801f574 <_printf_float+0x43c>
 801f502:	2301      	movs	r3, #1
 801f504:	4642      	mov	r2, r8
 801f506:	4631      	mov	r1, r6
 801f508:	4628      	mov	r0, r5
 801f50a:	47b8      	blx	r7
 801f50c:	3001      	adds	r0, #1
 801f50e:	f43f ae74 	beq.w	801f1fa <_printf_float+0xc2>
 801f512:	ee18 3a10 	vmov	r3, s16
 801f516:	4652      	mov	r2, sl
 801f518:	4631      	mov	r1, r6
 801f51a:	4628      	mov	r0, r5
 801f51c:	47b8      	blx	r7
 801f51e:	3001      	adds	r0, #1
 801f520:	f43f ae6b 	beq.w	801f1fa <_printf_float+0xc2>
 801f524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f528:	2200      	movs	r2, #0
 801f52a:	2300      	movs	r3, #0
 801f52c:	f7e1 faf4 	bl	8000b18 <__aeabi_dcmpeq>
 801f530:	b9d8      	cbnz	r0, 801f56a <_printf_float+0x432>
 801f532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f534:	f108 0201 	add.w	r2, r8, #1
 801f538:	3b01      	subs	r3, #1
 801f53a:	4631      	mov	r1, r6
 801f53c:	4628      	mov	r0, r5
 801f53e:	47b8      	blx	r7
 801f540:	3001      	adds	r0, #1
 801f542:	d10e      	bne.n	801f562 <_printf_float+0x42a>
 801f544:	e659      	b.n	801f1fa <_printf_float+0xc2>
 801f546:	2301      	movs	r3, #1
 801f548:	4652      	mov	r2, sl
 801f54a:	4631      	mov	r1, r6
 801f54c:	4628      	mov	r0, r5
 801f54e:	47b8      	blx	r7
 801f550:	3001      	adds	r0, #1
 801f552:	f43f ae52 	beq.w	801f1fa <_printf_float+0xc2>
 801f556:	f108 0801 	add.w	r8, r8, #1
 801f55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f55c:	3b01      	subs	r3, #1
 801f55e:	4543      	cmp	r3, r8
 801f560:	dcf1      	bgt.n	801f546 <_printf_float+0x40e>
 801f562:	464b      	mov	r3, r9
 801f564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f568:	e6dc      	b.n	801f324 <_printf_float+0x1ec>
 801f56a:	f04f 0800 	mov.w	r8, #0
 801f56e:	f104 0a1a 	add.w	sl, r4, #26
 801f572:	e7f2      	b.n	801f55a <_printf_float+0x422>
 801f574:	2301      	movs	r3, #1
 801f576:	4642      	mov	r2, r8
 801f578:	e7df      	b.n	801f53a <_printf_float+0x402>
 801f57a:	2301      	movs	r3, #1
 801f57c:	464a      	mov	r2, r9
 801f57e:	4631      	mov	r1, r6
 801f580:	4628      	mov	r0, r5
 801f582:	47b8      	blx	r7
 801f584:	3001      	adds	r0, #1
 801f586:	f43f ae38 	beq.w	801f1fa <_printf_float+0xc2>
 801f58a:	f108 0801 	add.w	r8, r8, #1
 801f58e:	68e3      	ldr	r3, [r4, #12]
 801f590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f592:	1a5b      	subs	r3, r3, r1
 801f594:	4543      	cmp	r3, r8
 801f596:	dcf0      	bgt.n	801f57a <_printf_float+0x442>
 801f598:	e6fa      	b.n	801f390 <_printf_float+0x258>
 801f59a:	f04f 0800 	mov.w	r8, #0
 801f59e:	f104 0919 	add.w	r9, r4, #25
 801f5a2:	e7f4      	b.n	801f58e <_printf_float+0x456>

0801f5a4 <_printf_common>:
 801f5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5a8:	4616      	mov	r6, r2
 801f5aa:	4699      	mov	r9, r3
 801f5ac:	688a      	ldr	r2, [r1, #8]
 801f5ae:	690b      	ldr	r3, [r1, #16]
 801f5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f5b4:	4293      	cmp	r3, r2
 801f5b6:	bfb8      	it	lt
 801f5b8:	4613      	movlt	r3, r2
 801f5ba:	6033      	str	r3, [r6, #0]
 801f5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f5c0:	4607      	mov	r7, r0
 801f5c2:	460c      	mov	r4, r1
 801f5c4:	b10a      	cbz	r2, 801f5ca <_printf_common+0x26>
 801f5c6:	3301      	adds	r3, #1
 801f5c8:	6033      	str	r3, [r6, #0]
 801f5ca:	6823      	ldr	r3, [r4, #0]
 801f5cc:	0699      	lsls	r1, r3, #26
 801f5ce:	bf42      	ittt	mi
 801f5d0:	6833      	ldrmi	r3, [r6, #0]
 801f5d2:	3302      	addmi	r3, #2
 801f5d4:	6033      	strmi	r3, [r6, #0]
 801f5d6:	6825      	ldr	r5, [r4, #0]
 801f5d8:	f015 0506 	ands.w	r5, r5, #6
 801f5dc:	d106      	bne.n	801f5ec <_printf_common+0x48>
 801f5de:	f104 0a19 	add.w	sl, r4, #25
 801f5e2:	68e3      	ldr	r3, [r4, #12]
 801f5e4:	6832      	ldr	r2, [r6, #0]
 801f5e6:	1a9b      	subs	r3, r3, r2
 801f5e8:	42ab      	cmp	r3, r5
 801f5ea:	dc26      	bgt.n	801f63a <_printf_common+0x96>
 801f5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f5f0:	1e13      	subs	r3, r2, #0
 801f5f2:	6822      	ldr	r2, [r4, #0]
 801f5f4:	bf18      	it	ne
 801f5f6:	2301      	movne	r3, #1
 801f5f8:	0692      	lsls	r2, r2, #26
 801f5fa:	d42b      	bmi.n	801f654 <_printf_common+0xb0>
 801f5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f600:	4649      	mov	r1, r9
 801f602:	4638      	mov	r0, r7
 801f604:	47c0      	blx	r8
 801f606:	3001      	adds	r0, #1
 801f608:	d01e      	beq.n	801f648 <_printf_common+0xa4>
 801f60a:	6823      	ldr	r3, [r4, #0]
 801f60c:	68e5      	ldr	r5, [r4, #12]
 801f60e:	6832      	ldr	r2, [r6, #0]
 801f610:	f003 0306 	and.w	r3, r3, #6
 801f614:	2b04      	cmp	r3, #4
 801f616:	bf08      	it	eq
 801f618:	1aad      	subeq	r5, r5, r2
 801f61a:	68a3      	ldr	r3, [r4, #8]
 801f61c:	6922      	ldr	r2, [r4, #16]
 801f61e:	bf0c      	ite	eq
 801f620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f624:	2500      	movne	r5, #0
 801f626:	4293      	cmp	r3, r2
 801f628:	bfc4      	itt	gt
 801f62a:	1a9b      	subgt	r3, r3, r2
 801f62c:	18ed      	addgt	r5, r5, r3
 801f62e:	2600      	movs	r6, #0
 801f630:	341a      	adds	r4, #26
 801f632:	42b5      	cmp	r5, r6
 801f634:	d11a      	bne.n	801f66c <_printf_common+0xc8>
 801f636:	2000      	movs	r0, #0
 801f638:	e008      	b.n	801f64c <_printf_common+0xa8>
 801f63a:	2301      	movs	r3, #1
 801f63c:	4652      	mov	r2, sl
 801f63e:	4649      	mov	r1, r9
 801f640:	4638      	mov	r0, r7
 801f642:	47c0      	blx	r8
 801f644:	3001      	adds	r0, #1
 801f646:	d103      	bne.n	801f650 <_printf_common+0xac>
 801f648:	f04f 30ff 	mov.w	r0, #4294967295
 801f64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f650:	3501      	adds	r5, #1
 801f652:	e7c6      	b.n	801f5e2 <_printf_common+0x3e>
 801f654:	18e1      	adds	r1, r4, r3
 801f656:	1c5a      	adds	r2, r3, #1
 801f658:	2030      	movs	r0, #48	; 0x30
 801f65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f65e:	4422      	add	r2, r4
 801f660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f668:	3302      	adds	r3, #2
 801f66a:	e7c7      	b.n	801f5fc <_printf_common+0x58>
 801f66c:	2301      	movs	r3, #1
 801f66e:	4622      	mov	r2, r4
 801f670:	4649      	mov	r1, r9
 801f672:	4638      	mov	r0, r7
 801f674:	47c0      	blx	r8
 801f676:	3001      	adds	r0, #1
 801f678:	d0e6      	beq.n	801f648 <_printf_common+0xa4>
 801f67a:	3601      	adds	r6, #1
 801f67c:	e7d9      	b.n	801f632 <_printf_common+0x8e>
	...

0801f680 <_printf_i>:
 801f680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f684:	7e0f      	ldrb	r7, [r1, #24]
 801f686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f688:	2f78      	cmp	r7, #120	; 0x78
 801f68a:	4691      	mov	r9, r2
 801f68c:	4680      	mov	r8, r0
 801f68e:	460c      	mov	r4, r1
 801f690:	469a      	mov	sl, r3
 801f692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f696:	d807      	bhi.n	801f6a8 <_printf_i+0x28>
 801f698:	2f62      	cmp	r7, #98	; 0x62
 801f69a:	d80a      	bhi.n	801f6b2 <_printf_i+0x32>
 801f69c:	2f00      	cmp	r7, #0
 801f69e:	f000 80d8 	beq.w	801f852 <_printf_i+0x1d2>
 801f6a2:	2f58      	cmp	r7, #88	; 0x58
 801f6a4:	f000 80a3 	beq.w	801f7ee <_printf_i+0x16e>
 801f6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f6b0:	e03a      	b.n	801f728 <_printf_i+0xa8>
 801f6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f6b6:	2b15      	cmp	r3, #21
 801f6b8:	d8f6      	bhi.n	801f6a8 <_printf_i+0x28>
 801f6ba:	a101      	add	r1, pc, #4	; (adr r1, 801f6c0 <_printf_i+0x40>)
 801f6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f6c0:	0801f719 	.word	0x0801f719
 801f6c4:	0801f72d 	.word	0x0801f72d
 801f6c8:	0801f6a9 	.word	0x0801f6a9
 801f6cc:	0801f6a9 	.word	0x0801f6a9
 801f6d0:	0801f6a9 	.word	0x0801f6a9
 801f6d4:	0801f6a9 	.word	0x0801f6a9
 801f6d8:	0801f72d 	.word	0x0801f72d
 801f6dc:	0801f6a9 	.word	0x0801f6a9
 801f6e0:	0801f6a9 	.word	0x0801f6a9
 801f6e4:	0801f6a9 	.word	0x0801f6a9
 801f6e8:	0801f6a9 	.word	0x0801f6a9
 801f6ec:	0801f839 	.word	0x0801f839
 801f6f0:	0801f75d 	.word	0x0801f75d
 801f6f4:	0801f81b 	.word	0x0801f81b
 801f6f8:	0801f6a9 	.word	0x0801f6a9
 801f6fc:	0801f6a9 	.word	0x0801f6a9
 801f700:	0801f85b 	.word	0x0801f85b
 801f704:	0801f6a9 	.word	0x0801f6a9
 801f708:	0801f75d 	.word	0x0801f75d
 801f70c:	0801f6a9 	.word	0x0801f6a9
 801f710:	0801f6a9 	.word	0x0801f6a9
 801f714:	0801f823 	.word	0x0801f823
 801f718:	682b      	ldr	r3, [r5, #0]
 801f71a:	1d1a      	adds	r2, r3, #4
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	602a      	str	r2, [r5, #0]
 801f720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f728:	2301      	movs	r3, #1
 801f72a:	e0a3      	b.n	801f874 <_printf_i+0x1f4>
 801f72c:	6820      	ldr	r0, [r4, #0]
 801f72e:	6829      	ldr	r1, [r5, #0]
 801f730:	0606      	lsls	r6, r0, #24
 801f732:	f101 0304 	add.w	r3, r1, #4
 801f736:	d50a      	bpl.n	801f74e <_printf_i+0xce>
 801f738:	680e      	ldr	r6, [r1, #0]
 801f73a:	602b      	str	r3, [r5, #0]
 801f73c:	2e00      	cmp	r6, #0
 801f73e:	da03      	bge.n	801f748 <_printf_i+0xc8>
 801f740:	232d      	movs	r3, #45	; 0x2d
 801f742:	4276      	negs	r6, r6
 801f744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f748:	485e      	ldr	r0, [pc, #376]	; (801f8c4 <_printf_i+0x244>)
 801f74a:	230a      	movs	r3, #10
 801f74c:	e019      	b.n	801f782 <_printf_i+0x102>
 801f74e:	680e      	ldr	r6, [r1, #0]
 801f750:	602b      	str	r3, [r5, #0]
 801f752:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f756:	bf18      	it	ne
 801f758:	b236      	sxthne	r6, r6
 801f75a:	e7ef      	b.n	801f73c <_printf_i+0xbc>
 801f75c:	682b      	ldr	r3, [r5, #0]
 801f75e:	6820      	ldr	r0, [r4, #0]
 801f760:	1d19      	adds	r1, r3, #4
 801f762:	6029      	str	r1, [r5, #0]
 801f764:	0601      	lsls	r1, r0, #24
 801f766:	d501      	bpl.n	801f76c <_printf_i+0xec>
 801f768:	681e      	ldr	r6, [r3, #0]
 801f76a:	e002      	b.n	801f772 <_printf_i+0xf2>
 801f76c:	0646      	lsls	r6, r0, #25
 801f76e:	d5fb      	bpl.n	801f768 <_printf_i+0xe8>
 801f770:	881e      	ldrh	r6, [r3, #0]
 801f772:	4854      	ldr	r0, [pc, #336]	; (801f8c4 <_printf_i+0x244>)
 801f774:	2f6f      	cmp	r7, #111	; 0x6f
 801f776:	bf0c      	ite	eq
 801f778:	2308      	moveq	r3, #8
 801f77a:	230a      	movne	r3, #10
 801f77c:	2100      	movs	r1, #0
 801f77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f782:	6865      	ldr	r5, [r4, #4]
 801f784:	60a5      	str	r5, [r4, #8]
 801f786:	2d00      	cmp	r5, #0
 801f788:	bfa2      	ittt	ge
 801f78a:	6821      	ldrge	r1, [r4, #0]
 801f78c:	f021 0104 	bicge.w	r1, r1, #4
 801f790:	6021      	strge	r1, [r4, #0]
 801f792:	b90e      	cbnz	r6, 801f798 <_printf_i+0x118>
 801f794:	2d00      	cmp	r5, #0
 801f796:	d04d      	beq.n	801f834 <_printf_i+0x1b4>
 801f798:	4615      	mov	r5, r2
 801f79a:	fbb6 f1f3 	udiv	r1, r6, r3
 801f79e:	fb03 6711 	mls	r7, r3, r1, r6
 801f7a2:	5dc7      	ldrb	r7, [r0, r7]
 801f7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f7a8:	4637      	mov	r7, r6
 801f7aa:	42bb      	cmp	r3, r7
 801f7ac:	460e      	mov	r6, r1
 801f7ae:	d9f4      	bls.n	801f79a <_printf_i+0x11a>
 801f7b0:	2b08      	cmp	r3, #8
 801f7b2:	d10b      	bne.n	801f7cc <_printf_i+0x14c>
 801f7b4:	6823      	ldr	r3, [r4, #0]
 801f7b6:	07de      	lsls	r6, r3, #31
 801f7b8:	d508      	bpl.n	801f7cc <_printf_i+0x14c>
 801f7ba:	6923      	ldr	r3, [r4, #16]
 801f7bc:	6861      	ldr	r1, [r4, #4]
 801f7be:	4299      	cmp	r1, r3
 801f7c0:	bfde      	ittt	le
 801f7c2:	2330      	movle	r3, #48	; 0x30
 801f7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f7cc:	1b52      	subs	r2, r2, r5
 801f7ce:	6122      	str	r2, [r4, #16]
 801f7d0:	f8cd a000 	str.w	sl, [sp]
 801f7d4:	464b      	mov	r3, r9
 801f7d6:	aa03      	add	r2, sp, #12
 801f7d8:	4621      	mov	r1, r4
 801f7da:	4640      	mov	r0, r8
 801f7dc:	f7ff fee2 	bl	801f5a4 <_printf_common>
 801f7e0:	3001      	adds	r0, #1
 801f7e2:	d14c      	bne.n	801f87e <_printf_i+0x1fe>
 801f7e4:	f04f 30ff 	mov.w	r0, #4294967295
 801f7e8:	b004      	add	sp, #16
 801f7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7ee:	4835      	ldr	r0, [pc, #212]	; (801f8c4 <_printf_i+0x244>)
 801f7f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f7f4:	6829      	ldr	r1, [r5, #0]
 801f7f6:	6823      	ldr	r3, [r4, #0]
 801f7f8:	f851 6b04 	ldr.w	r6, [r1], #4
 801f7fc:	6029      	str	r1, [r5, #0]
 801f7fe:	061d      	lsls	r5, r3, #24
 801f800:	d514      	bpl.n	801f82c <_printf_i+0x1ac>
 801f802:	07df      	lsls	r7, r3, #31
 801f804:	bf44      	itt	mi
 801f806:	f043 0320 	orrmi.w	r3, r3, #32
 801f80a:	6023      	strmi	r3, [r4, #0]
 801f80c:	b91e      	cbnz	r6, 801f816 <_printf_i+0x196>
 801f80e:	6823      	ldr	r3, [r4, #0]
 801f810:	f023 0320 	bic.w	r3, r3, #32
 801f814:	6023      	str	r3, [r4, #0]
 801f816:	2310      	movs	r3, #16
 801f818:	e7b0      	b.n	801f77c <_printf_i+0xfc>
 801f81a:	6823      	ldr	r3, [r4, #0]
 801f81c:	f043 0320 	orr.w	r3, r3, #32
 801f820:	6023      	str	r3, [r4, #0]
 801f822:	2378      	movs	r3, #120	; 0x78
 801f824:	4828      	ldr	r0, [pc, #160]	; (801f8c8 <_printf_i+0x248>)
 801f826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f82a:	e7e3      	b.n	801f7f4 <_printf_i+0x174>
 801f82c:	0659      	lsls	r1, r3, #25
 801f82e:	bf48      	it	mi
 801f830:	b2b6      	uxthmi	r6, r6
 801f832:	e7e6      	b.n	801f802 <_printf_i+0x182>
 801f834:	4615      	mov	r5, r2
 801f836:	e7bb      	b.n	801f7b0 <_printf_i+0x130>
 801f838:	682b      	ldr	r3, [r5, #0]
 801f83a:	6826      	ldr	r6, [r4, #0]
 801f83c:	6961      	ldr	r1, [r4, #20]
 801f83e:	1d18      	adds	r0, r3, #4
 801f840:	6028      	str	r0, [r5, #0]
 801f842:	0635      	lsls	r5, r6, #24
 801f844:	681b      	ldr	r3, [r3, #0]
 801f846:	d501      	bpl.n	801f84c <_printf_i+0x1cc>
 801f848:	6019      	str	r1, [r3, #0]
 801f84a:	e002      	b.n	801f852 <_printf_i+0x1d2>
 801f84c:	0670      	lsls	r0, r6, #25
 801f84e:	d5fb      	bpl.n	801f848 <_printf_i+0x1c8>
 801f850:	8019      	strh	r1, [r3, #0]
 801f852:	2300      	movs	r3, #0
 801f854:	6123      	str	r3, [r4, #16]
 801f856:	4615      	mov	r5, r2
 801f858:	e7ba      	b.n	801f7d0 <_printf_i+0x150>
 801f85a:	682b      	ldr	r3, [r5, #0]
 801f85c:	1d1a      	adds	r2, r3, #4
 801f85e:	602a      	str	r2, [r5, #0]
 801f860:	681d      	ldr	r5, [r3, #0]
 801f862:	6862      	ldr	r2, [r4, #4]
 801f864:	2100      	movs	r1, #0
 801f866:	4628      	mov	r0, r5
 801f868:	f7e0 fce2 	bl	8000230 <memchr>
 801f86c:	b108      	cbz	r0, 801f872 <_printf_i+0x1f2>
 801f86e:	1b40      	subs	r0, r0, r5
 801f870:	6060      	str	r0, [r4, #4]
 801f872:	6863      	ldr	r3, [r4, #4]
 801f874:	6123      	str	r3, [r4, #16]
 801f876:	2300      	movs	r3, #0
 801f878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f87c:	e7a8      	b.n	801f7d0 <_printf_i+0x150>
 801f87e:	6923      	ldr	r3, [r4, #16]
 801f880:	462a      	mov	r2, r5
 801f882:	4649      	mov	r1, r9
 801f884:	4640      	mov	r0, r8
 801f886:	47d0      	blx	sl
 801f888:	3001      	adds	r0, #1
 801f88a:	d0ab      	beq.n	801f7e4 <_printf_i+0x164>
 801f88c:	6823      	ldr	r3, [r4, #0]
 801f88e:	079b      	lsls	r3, r3, #30
 801f890:	d413      	bmi.n	801f8ba <_printf_i+0x23a>
 801f892:	68e0      	ldr	r0, [r4, #12]
 801f894:	9b03      	ldr	r3, [sp, #12]
 801f896:	4298      	cmp	r0, r3
 801f898:	bfb8      	it	lt
 801f89a:	4618      	movlt	r0, r3
 801f89c:	e7a4      	b.n	801f7e8 <_printf_i+0x168>
 801f89e:	2301      	movs	r3, #1
 801f8a0:	4632      	mov	r2, r6
 801f8a2:	4649      	mov	r1, r9
 801f8a4:	4640      	mov	r0, r8
 801f8a6:	47d0      	blx	sl
 801f8a8:	3001      	adds	r0, #1
 801f8aa:	d09b      	beq.n	801f7e4 <_printf_i+0x164>
 801f8ac:	3501      	adds	r5, #1
 801f8ae:	68e3      	ldr	r3, [r4, #12]
 801f8b0:	9903      	ldr	r1, [sp, #12]
 801f8b2:	1a5b      	subs	r3, r3, r1
 801f8b4:	42ab      	cmp	r3, r5
 801f8b6:	dcf2      	bgt.n	801f89e <_printf_i+0x21e>
 801f8b8:	e7eb      	b.n	801f892 <_printf_i+0x212>
 801f8ba:	2500      	movs	r5, #0
 801f8bc:	f104 0619 	add.w	r6, r4, #25
 801f8c0:	e7f5      	b.n	801f8ae <_printf_i+0x22e>
 801f8c2:	bf00      	nop
 801f8c4:	0802233a 	.word	0x0802233a
 801f8c8:	0802234b 	.word	0x0802234b

0801f8cc <iprintf>:
 801f8cc:	b40f      	push	{r0, r1, r2, r3}
 801f8ce:	4b0a      	ldr	r3, [pc, #40]	; (801f8f8 <iprintf+0x2c>)
 801f8d0:	b513      	push	{r0, r1, r4, lr}
 801f8d2:	681c      	ldr	r4, [r3, #0]
 801f8d4:	b124      	cbz	r4, 801f8e0 <iprintf+0x14>
 801f8d6:	69a3      	ldr	r3, [r4, #24]
 801f8d8:	b913      	cbnz	r3, 801f8e0 <iprintf+0x14>
 801f8da:	4620      	mov	r0, r4
 801f8dc:	f001 f8f0 	bl	8020ac0 <__sinit>
 801f8e0:	ab05      	add	r3, sp, #20
 801f8e2:	9a04      	ldr	r2, [sp, #16]
 801f8e4:	68a1      	ldr	r1, [r4, #8]
 801f8e6:	9301      	str	r3, [sp, #4]
 801f8e8:	4620      	mov	r0, r4
 801f8ea:	f001 fe9f 	bl	802162c <_vfiprintf_r>
 801f8ee:	b002      	add	sp, #8
 801f8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8f4:	b004      	add	sp, #16
 801f8f6:	4770      	bx	lr
 801f8f8:	2000002c 	.word	0x2000002c

0801f8fc <putchar>:
 801f8fc:	4b09      	ldr	r3, [pc, #36]	; (801f924 <putchar+0x28>)
 801f8fe:	b513      	push	{r0, r1, r4, lr}
 801f900:	681c      	ldr	r4, [r3, #0]
 801f902:	4601      	mov	r1, r0
 801f904:	b134      	cbz	r4, 801f914 <putchar+0x18>
 801f906:	69a3      	ldr	r3, [r4, #24]
 801f908:	b923      	cbnz	r3, 801f914 <putchar+0x18>
 801f90a:	9001      	str	r0, [sp, #4]
 801f90c:	4620      	mov	r0, r4
 801f90e:	f001 f8d7 	bl	8020ac0 <__sinit>
 801f912:	9901      	ldr	r1, [sp, #4]
 801f914:	68a2      	ldr	r2, [r4, #8]
 801f916:	4620      	mov	r0, r4
 801f918:	b002      	add	sp, #8
 801f91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f91e:	f001 bfb5 	b.w	802188c <_putc_r>
 801f922:	bf00      	nop
 801f924:	2000002c 	.word	0x2000002c

0801f928 <_puts_r>:
 801f928:	b570      	push	{r4, r5, r6, lr}
 801f92a:	460e      	mov	r6, r1
 801f92c:	4605      	mov	r5, r0
 801f92e:	b118      	cbz	r0, 801f938 <_puts_r+0x10>
 801f930:	6983      	ldr	r3, [r0, #24]
 801f932:	b90b      	cbnz	r3, 801f938 <_puts_r+0x10>
 801f934:	f001 f8c4 	bl	8020ac0 <__sinit>
 801f938:	69ab      	ldr	r3, [r5, #24]
 801f93a:	68ac      	ldr	r4, [r5, #8]
 801f93c:	b913      	cbnz	r3, 801f944 <_puts_r+0x1c>
 801f93e:	4628      	mov	r0, r5
 801f940:	f001 f8be 	bl	8020ac0 <__sinit>
 801f944:	4b2c      	ldr	r3, [pc, #176]	; (801f9f8 <_puts_r+0xd0>)
 801f946:	429c      	cmp	r4, r3
 801f948:	d120      	bne.n	801f98c <_puts_r+0x64>
 801f94a:	686c      	ldr	r4, [r5, #4]
 801f94c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f94e:	07db      	lsls	r3, r3, #31
 801f950:	d405      	bmi.n	801f95e <_puts_r+0x36>
 801f952:	89a3      	ldrh	r3, [r4, #12]
 801f954:	0598      	lsls	r0, r3, #22
 801f956:	d402      	bmi.n	801f95e <_puts_r+0x36>
 801f958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f95a:	f001 f954 	bl	8020c06 <__retarget_lock_acquire_recursive>
 801f95e:	89a3      	ldrh	r3, [r4, #12]
 801f960:	0719      	lsls	r1, r3, #28
 801f962:	d51d      	bpl.n	801f9a0 <_puts_r+0x78>
 801f964:	6923      	ldr	r3, [r4, #16]
 801f966:	b1db      	cbz	r3, 801f9a0 <_puts_r+0x78>
 801f968:	3e01      	subs	r6, #1
 801f96a:	68a3      	ldr	r3, [r4, #8]
 801f96c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f970:	3b01      	subs	r3, #1
 801f972:	60a3      	str	r3, [r4, #8]
 801f974:	bb39      	cbnz	r1, 801f9c6 <_puts_r+0x9e>
 801f976:	2b00      	cmp	r3, #0
 801f978:	da38      	bge.n	801f9ec <_puts_r+0xc4>
 801f97a:	4622      	mov	r2, r4
 801f97c:	210a      	movs	r1, #10
 801f97e:	4628      	mov	r0, r5
 801f980:	f000 f848 	bl	801fa14 <__swbuf_r>
 801f984:	3001      	adds	r0, #1
 801f986:	d011      	beq.n	801f9ac <_puts_r+0x84>
 801f988:	250a      	movs	r5, #10
 801f98a:	e011      	b.n	801f9b0 <_puts_r+0x88>
 801f98c:	4b1b      	ldr	r3, [pc, #108]	; (801f9fc <_puts_r+0xd4>)
 801f98e:	429c      	cmp	r4, r3
 801f990:	d101      	bne.n	801f996 <_puts_r+0x6e>
 801f992:	68ac      	ldr	r4, [r5, #8]
 801f994:	e7da      	b.n	801f94c <_puts_r+0x24>
 801f996:	4b1a      	ldr	r3, [pc, #104]	; (801fa00 <_puts_r+0xd8>)
 801f998:	429c      	cmp	r4, r3
 801f99a:	bf08      	it	eq
 801f99c:	68ec      	ldreq	r4, [r5, #12]
 801f99e:	e7d5      	b.n	801f94c <_puts_r+0x24>
 801f9a0:	4621      	mov	r1, r4
 801f9a2:	4628      	mov	r0, r5
 801f9a4:	f000 f888 	bl	801fab8 <__swsetup_r>
 801f9a8:	2800      	cmp	r0, #0
 801f9aa:	d0dd      	beq.n	801f968 <_puts_r+0x40>
 801f9ac:	f04f 35ff 	mov.w	r5, #4294967295
 801f9b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f9b2:	07da      	lsls	r2, r3, #31
 801f9b4:	d405      	bmi.n	801f9c2 <_puts_r+0x9a>
 801f9b6:	89a3      	ldrh	r3, [r4, #12]
 801f9b8:	059b      	lsls	r3, r3, #22
 801f9ba:	d402      	bmi.n	801f9c2 <_puts_r+0x9a>
 801f9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f9be:	f001 f923 	bl	8020c08 <__retarget_lock_release_recursive>
 801f9c2:	4628      	mov	r0, r5
 801f9c4:	bd70      	pop	{r4, r5, r6, pc}
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	da04      	bge.n	801f9d4 <_puts_r+0xac>
 801f9ca:	69a2      	ldr	r2, [r4, #24]
 801f9cc:	429a      	cmp	r2, r3
 801f9ce:	dc06      	bgt.n	801f9de <_puts_r+0xb6>
 801f9d0:	290a      	cmp	r1, #10
 801f9d2:	d004      	beq.n	801f9de <_puts_r+0xb6>
 801f9d4:	6823      	ldr	r3, [r4, #0]
 801f9d6:	1c5a      	adds	r2, r3, #1
 801f9d8:	6022      	str	r2, [r4, #0]
 801f9da:	7019      	strb	r1, [r3, #0]
 801f9dc:	e7c5      	b.n	801f96a <_puts_r+0x42>
 801f9de:	4622      	mov	r2, r4
 801f9e0:	4628      	mov	r0, r5
 801f9e2:	f000 f817 	bl	801fa14 <__swbuf_r>
 801f9e6:	3001      	adds	r0, #1
 801f9e8:	d1bf      	bne.n	801f96a <_puts_r+0x42>
 801f9ea:	e7df      	b.n	801f9ac <_puts_r+0x84>
 801f9ec:	6823      	ldr	r3, [r4, #0]
 801f9ee:	250a      	movs	r5, #10
 801f9f0:	1c5a      	adds	r2, r3, #1
 801f9f2:	6022      	str	r2, [r4, #0]
 801f9f4:	701d      	strb	r5, [r3, #0]
 801f9f6:	e7db      	b.n	801f9b0 <_puts_r+0x88>
 801f9f8:	0802240c 	.word	0x0802240c
 801f9fc:	0802242c 	.word	0x0802242c
 801fa00:	080223ec 	.word	0x080223ec

0801fa04 <puts>:
 801fa04:	4b02      	ldr	r3, [pc, #8]	; (801fa10 <puts+0xc>)
 801fa06:	4601      	mov	r1, r0
 801fa08:	6818      	ldr	r0, [r3, #0]
 801fa0a:	f7ff bf8d 	b.w	801f928 <_puts_r>
 801fa0e:	bf00      	nop
 801fa10:	2000002c 	.word	0x2000002c

0801fa14 <__swbuf_r>:
 801fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa16:	460e      	mov	r6, r1
 801fa18:	4614      	mov	r4, r2
 801fa1a:	4605      	mov	r5, r0
 801fa1c:	b118      	cbz	r0, 801fa26 <__swbuf_r+0x12>
 801fa1e:	6983      	ldr	r3, [r0, #24]
 801fa20:	b90b      	cbnz	r3, 801fa26 <__swbuf_r+0x12>
 801fa22:	f001 f84d 	bl	8020ac0 <__sinit>
 801fa26:	4b21      	ldr	r3, [pc, #132]	; (801faac <__swbuf_r+0x98>)
 801fa28:	429c      	cmp	r4, r3
 801fa2a:	d12b      	bne.n	801fa84 <__swbuf_r+0x70>
 801fa2c:	686c      	ldr	r4, [r5, #4]
 801fa2e:	69a3      	ldr	r3, [r4, #24]
 801fa30:	60a3      	str	r3, [r4, #8]
 801fa32:	89a3      	ldrh	r3, [r4, #12]
 801fa34:	071a      	lsls	r2, r3, #28
 801fa36:	d52f      	bpl.n	801fa98 <__swbuf_r+0x84>
 801fa38:	6923      	ldr	r3, [r4, #16]
 801fa3a:	b36b      	cbz	r3, 801fa98 <__swbuf_r+0x84>
 801fa3c:	6923      	ldr	r3, [r4, #16]
 801fa3e:	6820      	ldr	r0, [r4, #0]
 801fa40:	1ac0      	subs	r0, r0, r3
 801fa42:	6963      	ldr	r3, [r4, #20]
 801fa44:	b2f6      	uxtb	r6, r6
 801fa46:	4283      	cmp	r3, r0
 801fa48:	4637      	mov	r7, r6
 801fa4a:	dc04      	bgt.n	801fa56 <__swbuf_r+0x42>
 801fa4c:	4621      	mov	r1, r4
 801fa4e:	4628      	mov	r0, r5
 801fa50:	f000 ffa2 	bl	8020998 <_fflush_r>
 801fa54:	bb30      	cbnz	r0, 801faa4 <__swbuf_r+0x90>
 801fa56:	68a3      	ldr	r3, [r4, #8]
 801fa58:	3b01      	subs	r3, #1
 801fa5a:	60a3      	str	r3, [r4, #8]
 801fa5c:	6823      	ldr	r3, [r4, #0]
 801fa5e:	1c5a      	adds	r2, r3, #1
 801fa60:	6022      	str	r2, [r4, #0]
 801fa62:	701e      	strb	r6, [r3, #0]
 801fa64:	6963      	ldr	r3, [r4, #20]
 801fa66:	3001      	adds	r0, #1
 801fa68:	4283      	cmp	r3, r0
 801fa6a:	d004      	beq.n	801fa76 <__swbuf_r+0x62>
 801fa6c:	89a3      	ldrh	r3, [r4, #12]
 801fa6e:	07db      	lsls	r3, r3, #31
 801fa70:	d506      	bpl.n	801fa80 <__swbuf_r+0x6c>
 801fa72:	2e0a      	cmp	r6, #10
 801fa74:	d104      	bne.n	801fa80 <__swbuf_r+0x6c>
 801fa76:	4621      	mov	r1, r4
 801fa78:	4628      	mov	r0, r5
 801fa7a:	f000 ff8d 	bl	8020998 <_fflush_r>
 801fa7e:	b988      	cbnz	r0, 801faa4 <__swbuf_r+0x90>
 801fa80:	4638      	mov	r0, r7
 801fa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa84:	4b0a      	ldr	r3, [pc, #40]	; (801fab0 <__swbuf_r+0x9c>)
 801fa86:	429c      	cmp	r4, r3
 801fa88:	d101      	bne.n	801fa8e <__swbuf_r+0x7a>
 801fa8a:	68ac      	ldr	r4, [r5, #8]
 801fa8c:	e7cf      	b.n	801fa2e <__swbuf_r+0x1a>
 801fa8e:	4b09      	ldr	r3, [pc, #36]	; (801fab4 <__swbuf_r+0xa0>)
 801fa90:	429c      	cmp	r4, r3
 801fa92:	bf08      	it	eq
 801fa94:	68ec      	ldreq	r4, [r5, #12]
 801fa96:	e7ca      	b.n	801fa2e <__swbuf_r+0x1a>
 801fa98:	4621      	mov	r1, r4
 801fa9a:	4628      	mov	r0, r5
 801fa9c:	f000 f80c 	bl	801fab8 <__swsetup_r>
 801faa0:	2800      	cmp	r0, #0
 801faa2:	d0cb      	beq.n	801fa3c <__swbuf_r+0x28>
 801faa4:	f04f 37ff 	mov.w	r7, #4294967295
 801faa8:	e7ea      	b.n	801fa80 <__swbuf_r+0x6c>
 801faaa:	bf00      	nop
 801faac:	0802240c 	.word	0x0802240c
 801fab0:	0802242c 	.word	0x0802242c
 801fab4:	080223ec 	.word	0x080223ec

0801fab8 <__swsetup_r>:
 801fab8:	4b32      	ldr	r3, [pc, #200]	; (801fb84 <__swsetup_r+0xcc>)
 801faba:	b570      	push	{r4, r5, r6, lr}
 801fabc:	681d      	ldr	r5, [r3, #0]
 801fabe:	4606      	mov	r6, r0
 801fac0:	460c      	mov	r4, r1
 801fac2:	b125      	cbz	r5, 801face <__swsetup_r+0x16>
 801fac4:	69ab      	ldr	r3, [r5, #24]
 801fac6:	b913      	cbnz	r3, 801face <__swsetup_r+0x16>
 801fac8:	4628      	mov	r0, r5
 801faca:	f000 fff9 	bl	8020ac0 <__sinit>
 801face:	4b2e      	ldr	r3, [pc, #184]	; (801fb88 <__swsetup_r+0xd0>)
 801fad0:	429c      	cmp	r4, r3
 801fad2:	d10f      	bne.n	801faf4 <__swsetup_r+0x3c>
 801fad4:	686c      	ldr	r4, [r5, #4]
 801fad6:	89a3      	ldrh	r3, [r4, #12]
 801fad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fadc:	0719      	lsls	r1, r3, #28
 801fade:	d42c      	bmi.n	801fb3a <__swsetup_r+0x82>
 801fae0:	06dd      	lsls	r5, r3, #27
 801fae2:	d411      	bmi.n	801fb08 <__swsetup_r+0x50>
 801fae4:	2309      	movs	r3, #9
 801fae6:	6033      	str	r3, [r6, #0]
 801fae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801faec:	81a3      	strh	r3, [r4, #12]
 801faee:	f04f 30ff 	mov.w	r0, #4294967295
 801faf2:	e03e      	b.n	801fb72 <__swsetup_r+0xba>
 801faf4:	4b25      	ldr	r3, [pc, #148]	; (801fb8c <__swsetup_r+0xd4>)
 801faf6:	429c      	cmp	r4, r3
 801faf8:	d101      	bne.n	801fafe <__swsetup_r+0x46>
 801fafa:	68ac      	ldr	r4, [r5, #8]
 801fafc:	e7eb      	b.n	801fad6 <__swsetup_r+0x1e>
 801fafe:	4b24      	ldr	r3, [pc, #144]	; (801fb90 <__swsetup_r+0xd8>)
 801fb00:	429c      	cmp	r4, r3
 801fb02:	bf08      	it	eq
 801fb04:	68ec      	ldreq	r4, [r5, #12]
 801fb06:	e7e6      	b.n	801fad6 <__swsetup_r+0x1e>
 801fb08:	0758      	lsls	r0, r3, #29
 801fb0a:	d512      	bpl.n	801fb32 <__swsetup_r+0x7a>
 801fb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb0e:	b141      	cbz	r1, 801fb22 <__swsetup_r+0x6a>
 801fb10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb14:	4299      	cmp	r1, r3
 801fb16:	d002      	beq.n	801fb1e <__swsetup_r+0x66>
 801fb18:	4630      	mov	r0, r6
 801fb1a:	f001 fc7d 	bl	8021418 <_free_r>
 801fb1e:	2300      	movs	r3, #0
 801fb20:	6363      	str	r3, [r4, #52]	; 0x34
 801fb22:	89a3      	ldrh	r3, [r4, #12]
 801fb24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fb28:	81a3      	strh	r3, [r4, #12]
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	6063      	str	r3, [r4, #4]
 801fb2e:	6923      	ldr	r3, [r4, #16]
 801fb30:	6023      	str	r3, [r4, #0]
 801fb32:	89a3      	ldrh	r3, [r4, #12]
 801fb34:	f043 0308 	orr.w	r3, r3, #8
 801fb38:	81a3      	strh	r3, [r4, #12]
 801fb3a:	6923      	ldr	r3, [r4, #16]
 801fb3c:	b94b      	cbnz	r3, 801fb52 <__swsetup_r+0x9a>
 801fb3e:	89a3      	ldrh	r3, [r4, #12]
 801fb40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fb44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fb48:	d003      	beq.n	801fb52 <__swsetup_r+0x9a>
 801fb4a:	4621      	mov	r1, r4
 801fb4c:	4630      	mov	r0, r6
 801fb4e:	f001 f881 	bl	8020c54 <__smakebuf_r>
 801fb52:	89a0      	ldrh	r0, [r4, #12]
 801fb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb58:	f010 0301 	ands.w	r3, r0, #1
 801fb5c:	d00a      	beq.n	801fb74 <__swsetup_r+0xbc>
 801fb5e:	2300      	movs	r3, #0
 801fb60:	60a3      	str	r3, [r4, #8]
 801fb62:	6963      	ldr	r3, [r4, #20]
 801fb64:	425b      	negs	r3, r3
 801fb66:	61a3      	str	r3, [r4, #24]
 801fb68:	6923      	ldr	r3, [r4, #16]
 801fb6a:	b943      	cbnz	r3, 801fb7e <__swsetup_r+0xc6>
 801fb6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fb70:	d1ba      	bne.n	801fae8 <__swsetup_r+0x30>
 801fb72:	bd70      	pop	{r4, r5, r6, pc}
 801fb74:	0781      	lsls	r1, r0, #30
 801fb76:	bf58      	it	pl
 801fb78:	6963      	ldrpl	r3, [r4, #20]
 801fb7a:	60a3      	str	r3, [r4, #8]
 801fb7c:	e7f4      	b.n	801fb68 <__swsetup_r+0xb0>
 801fb7e:	2000      	movs	r0, #0
 801fb80:	e7f7      	b.n	801fb72 <__swsetup_r+0xba>
 801fb82:	bf00      	nop
 801fb84:	2000002c 	.word	0x2000002c
 801fb88:	0802240c 	.word	0x0802240c
 801fb8c:	0802242c 	.word	0x0802242c
 801fb90:	080223ec 	.word	0x080223ec

0801fb94 <quorem>:
 801fb94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb98:	6903      	ldr	r3, [r0, #16]
 801fb9a:	690c      	ldr	r4, [r1, #16]
 801fb9c:	42a3      	cmp	r3, r4
 801fb9e:	4607      	mov	r7, r0
 801fba0:	f2c0 8081 	blt.w	801fca6 <quorem+0x112>
 801fba4:	3c01      	subs	r4, #1
 801fba6:	f101 0814 	add.w	r8, r1, #20
 801fbaa:	f100 0514 	add.w	r5, r0, #20
 801fbae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fbb2:	9301      	str	r3, [sp, #4]
 801fbb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fbb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fbbc:	3301      	adds	r3, #1
 801fbbe:	429a      	cmp	r2, r3
 801fbc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fbc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fbc8:	fbb2 f6f3 	udiv	r6, r2, r3
 801fbcc:	d331      	bcc.n	801fc32 <quorem+0x9e>
 801fbce:	f04f 0e00 	mov.w	lr, #0
 801fbd2:	4640      	mov	r0, r8
 801fbd4:	46ac      	mov	ip, r5
 801fbd6:	46f2      	mov	sl, lr
 801fbd8:	f850 2b04 	ldr.w	r2, [r0], #4
 801fbdc:	b293      	uxth	r3, r2
 801fbde:	fb06 e303 	mla	r3, r6, r3, lr
 801fbe2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fbe6:	b29b      	uxth	r3, r3
 801fbe8:	ebaa 0303 	sub.w	r3, sl, r3
 801fbec:	f8dc a000 	ldr.w	sl, [ip]
 801fbf0:	0c12      	lsrs	r2, r2, #16
 801fbf2:	fa13 f38a 	uxtah	r3, r3, sl
 801fbf6:	fb06 e202 	mla	r2, r6, r2, lr
 801fbfa:	9300      	str	r3, [sp, #0]
 801fbfc:	9b00      	ldr	r3, [sp, #0]
 801fbfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fc02:	b292      	uxth	r2, r2
 801fc04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fc08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fc0c:	f8bd 3000 	ldrh.w	r3, [sp]
 801fc10:	4581      	cmp	r9, r0
 801fc12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fc16:	f84c 3b04 	str.w	r3, [ip], #4
 801fc1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fc1e:	d2db      	bcs.n	801fbd8 <quorem+0x44>
 801fc20:	f855 300b 	ldr.w	r3, [r5, fp]
 801fc24:	b92b      	cbnz	r3, 801fc32 <quorem+0x9e>
 801fc26:	9b01      	ldr	r3, [sp, #4]
 801fc28:	3b04      	subs	r3, #4
 801fc2a:	429d      	cmp	r5, r3
 801fc2c:	461a      	mov	r2, r3
 801fc2e:	d32e      	bcc.n	801fc8e <quorem+0xfa>
 801fc30:	613c      	str	r4, [r7, #16]
 801fc32:	4638      	mov	r0, r7
 801fc34:	f001 fad8 	bl	80211e8 <__mcmp>
 801fc38:	2800      	cmp	r0, #0
 801fc3a:	db24      	blt.n	801fc86 <quorem+0xf2>
 801fc3c:	3601      	adds	r6, #1
 801fc3e:	4628      	mov	r0, r5
 801fc40:	f04f 0c00 	mov.w	ip, #0
 801fc44:	f858 2b04 	ldr.w	r2, [r8], #4
 801fc48:	f8d0 e000 	ldr.w	lr, [r0]
 801fc4c:	b293      	uxth	r3, r2
 801fc4e:	ebac 0303 	sub.w	r3, ip, r3
 801fc52:	0c12      	lsrs	r2, r2, #16
 801fc54:	fa13 f38e 	uxtah	r3, r3, lr
 801fc58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fc5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fc60:	b29b      	uxth	r3, r3
 801fc62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fc66:	45c1      	cmp	r9, r8
 801fc68:	f840 3b04 	str.w	r3, [r0], #4
 801fc6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fc70:	d2e8      	bcs.n	801fc44 <quorem+0xb0>
 801fc72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fc76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fc7a:	b922      	cbnz	r2, 801fc86 <quorem+0xf2>
 801fc7c:	3b04      	subs	r3, #4
 801fc7e:	429d      	cmp	r5, r3
 801fc80:	461a      	mov	r2, r3
 801fc82:	d30a      	bcc.n	801fc9a <quorem+0x106>
 801fc84:	613c      	str	r4, [r7, #16]
 801fc86:	4630      	mov	r0, r6
 801fc88:	b003      	add	sp, #12
 801fc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc8e:	6812      	ldr	r2, [r2, #0]
 801fc90:	3b04      	subs	r3, #4
 801fc92:	2a00      	cmp	r2, #0
 801fc94:	d1cc      	bne.n	801fc30 <quorem+0x9c>
 801fc96:	3c01      	subs	r4, #1
 801fc98:	e7c7      	b.n	801fc2a <quorem+0x96>
 801fc9a:	6812      	ldr	r2, [r2, #0]
 801fc9c:	3b04      	subs	r3, #4
 801fc9e:	2a00      	cmp	r2, #0
 801fca0:	d1f0      	bne.n	801fc84 <quorem+0xf0>
 801fca2:	3c01      	subs	r4, #1
 801fca4:	e7eb      	b.n	801fc7e <quorem+0xea>
 801fca6:	2000      	movs	r0, #0
 801fca8:	e7ee      	b.n	801fc88 <quorem+0xf4>
 801fcaa:	0000      	movs	r0, r0
 801fcac:	0000      	movs	r0, r0
	...

0801fcb0 <_dtoa_r>:
 801fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcb4:	ed2d 8b04 	vpush	{d8-d9}
 801fcb8:	ec57 6b10 	vmov	r6, r7, d0
 801fcbc:	b093      	sub	sp, #76	; 0x4c
 801fcbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801fcc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fcc4:	9106      	str	r1, [sp, #24]
 801fcc6:	ee10 aa10 	vmov	sl, s0
 801fcca:	4604      	mov	r4, r0
 801fccc:	9209      	str	r2, [sp, #36]	; 0x24
 801fcce:	930c      	str	r3, [sp, #48]	; 0x30
 801fcd0:	46bb      	mov	fp, r7
 801fcd2:	b975      	cbnz	r5, 801fcf2 <_dtoa_r+0x42>
 801fcd4:	2010      	movs	r0, #16
 801fcd6:	f000 fffd 	bl	8020cd4 <malloc>
 801fcda:	4602      	mov	r2, r0
 801fcdc:	6260      	str	r0, [r4, #36]	; 0x24
 801fcde:	b920      	cbnz	r0, 801fcea <_dtoa_r+0x3a>
 801fce0:	4ba7      	ldr	r3, [pc, #668]	; (801ff80 <_dtoa_r+0x2d0>)
 801fce2:	21ea      	movs	r1, #234	; 0xea
 801fce4:	48a7      	ldr	r0, [pc, #668]	; (801ff84 <_dtoa_r+0x2d4>)
 801fce6:	f001 fe7f 	bl	80219e8 <__assert_func>
 801fcea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fcee:	6005      	str	r5, [r0, #0]
 801fcf0:	60c5      	str	r5, [r0, #12]
 801fcf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fcf4:	6819      	ldr	r1, [r3, #0]
 801fcf6:	b151      	cbz	r1, 801fd0e <_dtoa_r+0x5e>
 801fcf8:	685a      	ldr	r2, [r3, #4]
 801fcfa:	604a      	str	r2, [r1, #4]
 801fcfc:	2301      	movs	r3, #1
 801fcfe:	4093      	lsls	r3, r2
 801fd00:	608b      	str	r3, [r1, #8]
 801fd02:	4620      	mov	r0, r4
 801fd04:	f001 f82e 	bl	8020d64 <_Bfree>
 801fd08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd0a:	2200      	movs	r2, #0
 801fd0c:	601a      	str	r2, [r3, #0]
 801fd0e:	1e3b      	subs	r3, r7, #0
 801fd10:	bfaa      	itet	ge
 801fd12:	2300      	movge	r3, #0
 801fd14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801fd18:	f8c8 3000 	strge.w	r3, [r8]
 801fd1c:	4b9a      	ldr	r3, [pc, #616]	; (801ff88 <_dtoa_r+0x2d8>)
 801fd1e:	bfbc      	itt	lt
 801fd20:	2201      	movlt	r2, #1
 801fd22:	f8c8 2000 	strlt.w	r2, [r8]
 801fd26:	ea33 030b 	bics.w	r3, r3, fp
 801fd2a:	d11b      	bne.n	801fd64 <_dtoa_r+0xb4>
 801fd2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd2e:	f242 730f 	movw	r3, #9999	; 0x270f
 801fd32:	6013      	str	r3, [r2, #0]
 801fd34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fd38:	4333      	orrs	r3, r6
 801fd3a:	f000 8592 	beq.w	8020862 <_dtoa_r+0xbb2>
 801fd3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fd40:	b963      	cbnz	r3, 801fd5c <_dtoa_r+0xac>
 801fd42:	4b92      	ldr	r3, [pc, #584]	; (801ff8c <_dtoa_r+0x2dc>)
 801fd44:	e022      	b.n	801fd8c <_dtoa_r+0xdc>
 801fd46:	4b92      	ldr	r3, [pc, #584]	; (801ff90 <_dtoa_r+0x2e0>)
 801fd48:	9301      	str	r3, [sp, #4]
 801fd4a:	3308      	adds	r3, #8
 801fd4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fd4e:	6013      	str	r3, [r2, #0]
 801fd50:	9801      	ldr	r0, [sp, #4]
 801fd52:	b013      	add	sp, #76	; 0x4c
 801fd54:	ecbd 8b04 	vpop	{d8-d9}
 801fd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd5c:	4b8b      	ldr	r3, [pc, #556]	; (801ff8c <_dtoa_r+0x2dc>)
 801fd5e:	9301      	str	r3, [sp, #4]
 801fd60:	3303      	adds	r3, #3
 801fd62:	e7f3      	b.n	801fd4c <_dtoa_r+0x9c>
 801fd64:	2200      	movs	r2, #0
 801fd66:	2300      	movs	r3, #0
 801fd68:	4650      	mov	r0, sl
 801fd6a:	4659      	mov	r1, fp
 801fd6c:	f7e0 fed4 	bl	8000b18 <__aeabi_dcmpeq>
 801fd70:	ec4b ab19 	vmov	d9, sl, fp
 801fd74:	4680      	mov	r8, r0
 801fd76:	b158      	cbz	r0, 801fd90 <_dtoa_r+0xe0>
 801fd78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd7a:	2301      	movs	r3, #1
 801fd7c:	6013      	str	r3, [r2, #0]
 801fd7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	f000 856b 	beq.w	802085c <_dtoa_r+0xbac>
 801fd86:	4883      	ldr	r0, [pc, #524]	; (801ff94 <_dtoa_r+0x2e4>)
 801fd88:	6018      	str	r0, [r3, #0]
 801fd8a:	1e43      	subs	r3, r0, #1
 801fd8c:	9301      	str	r3, [sp, #4]
 801fd8e:	e7df      	b.n	801fd50 <_dtoa_r+0xa0>
 801fd90:	ec4b ab10 	vmov	d0, sl, fp
 801fd94:	aa10      	add	r2, sp, #64	; 0x40
 801fd96:	a911      	add	r1, sp, #68	; 0x44
 801fd98:	4620      	mov	r0, r4
 801fd9a:	f001 facb 	bl	8021334 <__d2b>
 801fd9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801fda2:	ee08 0a10 	vmov	s16, r0
 801fda6:	2d00      	cmp	r5, #0
 801fda8:	f000 8084 	beq.w	801feb4 <_dtoa_r+0x204>
 801fdac:	ee19 3a90 	vmov	r3, s19
 801fdb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fdb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fdb8:	4656      	mov	r6, sl
 801fdba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fdbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fdc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fdc6:	4b74      	ldr	r3, [pc, #464]	; (801ff98 <_dtoa_r+0x2e8>)
 801fdc8:	2200      	movs	r2, #0
 801fdca:	4630      	mov	r0, r6
 801fdcc:	4639      	mov	r1, r7
 801fdce:	f7e0 fa83 	bl	80002d8 <__aeabi_dsub>
 801fdd2:	a365      	add	r3, pc, #404	; (adr r3, 801ff68 <_dtoa_r+0x2b8>)
 801fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdd8:	f7e0 fc36 	bl	8000648 <__aeabi_dmul>
 801fddc:	a364      	add	r3, pc, #400	; (adr r3, 801ff70 <_dtoa_r+0x2c0>)
 801fdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fde2:	f7e0 fa7b 	bl	80002dc <__adddf3>
 801fde6:	4606      	mov	r6, r0
 801fde8:	4628      	mov	r0, r5
 801fdea:	460f      	mov	r7, r1
 801fdec:	f7e0 fbc2 	bl	8000574 <__aeabi_i2d>
 801fdf0:	a361      	add	r3, pc, #388	; (adr r3, 801ff78 <_dtoa_r+0x2c8>)
 801fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdf6:	f7e0 fc27 	bl	8000648 <__aeabi_dmul>
 801fdfa:	4602      	mov	r2, r0
 801fdfc:	460b      	mov	r3, r1
 801fdfe:	4630      	mov	r0, r6
 801fe00:	4639      	mov	r1, r7
 801fe02:	f7e0 fa6b 	bl	80002dc <__adddf3>
 801fe06:	4606      	mov	r6, r0
 801fe08:	460f      	mov	r7, r1
 801fe0a:	f7e0 fecd 	bl	8000ba8 <__aeabi_d2iz>
 801fe0e:	2200      	movs	r2, #0
 801fe10:	9000      	str	r0, [sp, #0]
 801fe12:	2300      	movs	r3, #0
 801fe14:	4630      	mov	r0, r6
 801fe16:	4639      	mov	r1, r7
 801fe18:	f7e0 fe88 	bl	8000b2c <__aeabi_dcmplt>
 801fe1c:	b150      	cbz	r0, 801fe34 <_dtoa_r+0x184>
 801fe1e:	9800      	ldr	r0, [sp, #0]
 801fe20:	f7e0 fba8 	bl	8000574 <__aeabi_i2d>
 801fe24:	4632      	mov	r2, r6
 801fe26:	463b      	mov	r3, r7
 801fe28:	f7e0 fe76 	bl	8000b18 <__aeabi_dcmpeq>
 801fe2c:	b910      	cbnz	r0, 801fe34 <_dtoa_r+0x184>
 801fe2e:	9b00      	ldr	r3, [sp, #0]
 801fe30:	3b01      	subs	r3, #1
 801fe32:	9300      	str	r3, [sp, #0]
 801fe34:	9b00      	ldr	r3, [sp, #0]
 801fe36:	2b16      	cmp	r3, #22
 801fe38:	d85a      	bhi.n	801fef0 <_dtoa_r+0x240>
 801fe3a:	9a00      	ldr	r2, [sp, #0]
 801fe3c:	4b57      	ldr	r3, [pc, #348]	; (801ff9c <_dtoa_r+0x2ec>)
 801fe3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fe42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe46:	ec51 0b19 	vmov	r0, r1, d9
 801fe4a:	f7e0 fe6f 	bl	8000b2c <__aeabi_dcmplt>
 801fe4e:	2800      	cmp	r0, #0
 801fe50:	d050      	beq.n	801fef4 <_dtoa_r+0x244>
 801fe52:	9b00      	ldr	r3, [sp, #0]
 801fe54:	3b01      	subs	r3, #1
 801fe56:	9300      	str	r3, [sp, #0]
 801fe58:	2300      	movs	r3, #0
 801fe5a:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe5e:	1b5d      	subs	r5, r3, r5
 801fe60:	1e6b      	subs	r3, r5, #1
 801fe62:	9305      	str	r3, [sp, #20]
 801fe64:	bf45      	ittet	mi
 801fe66:	f1c5 0301 	rsbmi	r3, r5, #1
 801fe6a:	9304      	strmi	r3, [sp, #16]
 801fe6c:	2300      	movpl	r3, #0
 801fe6e:	2300      	movmi	r3, #0
 801fe70:	bf4c      	ite	mi
 801fe72:	9305      	strmi	r3, [sp, #20]
 801fe74:	9304      	strpl	r3, [sp, #16]
 801fe76:	9b00      	ldr	r3, [sp, #0]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	db3d      	blt.n	801fef8 <_dtoa_r+0x248>
 801fe7c:	9b05      	ldr	r3, [sp, #20]
 801fe7e:	9a00      	ldr	r2, [sp, #0]
 801fe80:	920a      	str	r2, [sp, #40]	; 0x28
 801fe82:	4413      	add	r3, r2
 801fe84:	9305      	str	r3, [sp, #20]
 801fe86:	2300      	movs	r3, #0
 801fe88:	9307      	str	r3, [sp, #28]
 801fe8a:	9b06      	ldr	r3, [sp, #24]
 801fe8c:	2b09      	cmp	r3, #9
 801fe8e:	f200 8089 	bhi.w	801ffa4 <_dtoa_r+0x2f4>
 801fe92:	2b05      	cmp	r3, #5
 801fe94:	bfc4      	itt	gt
 801fe96:	3b04      	subgt	r3, #4
 801fe98:	9306      	strgt	r3, [sp, #24]
 801fe9a:	9b06      	ldr	r3, [sp, #24]
 801fe9c:	f1a3 0302 	sub.w	r3, r3, #2
 801fea0:	bfcc      	ite	gt
 801fea2:	2500      	movgt	r5, #0
 801fea4:	2501      	movle	r5, #1
 801fea6:	2b03      	cmp	r3, #3
 801fea8:	f200 8087 	bhi.w	801ffba <_dtoa_r+0x30a>
 801feac:	e8df f003 	tbb	[pc, r3]
 801feb0:	59383a2d 	.word	0x59383a2d
 801feb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801feb8:	441d      	add	r5, r3
 801feba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801febe:	2b20      	cmp	r3, #32
 801fec0:	bfc1      	itttt	gt
 801fec2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801fec6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801feca:	fa0b f303 	lslgt.w	r3, fp, r3
 801fece:	fa26 f000 	lsrgt.w	r0, r6, r0
 801fed2:	bfda      	itte	le
 801fed4:	f1c3 0320 	rsble	r3, r3, #32
 801fed8:	fa06 f003 	lslle.w	r0, r6, r3
 801fedc:	4318      	orrgt	r0, r3
 801fede:	f7e0 fb39 	bl	8000554 <__aeabi_ui2d>
 801fee2:	2301      	movs	r3, #1
 801fee4:	4606      	mov	r6, r0
 801fee6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801feea:	3d01      	subs	r5, #1
 801feec:	930e      	str	r3, [sp, #56]	; 0x38
 801feee:	e76a      	b.n	801fdc6 <_dtoa_r+0x116>
 801fef0:	2301      	movs	r3, #1
 801fef2:	e7b2      	b.n	801fe5a <_dtoa_r+0x1aa>
 801fef4:	900b      	str	r0, [sp, #44]	; 0x2c
 801fef6:	e7b1      	b.n	801fe5c <_dtoa_r+0x1ac>
 801fef8:	9b04      	ldr	r3, [sp, #16]
 801fefa:	9a00      	ldr	r2, [sp, #0]
 801fefc:	1a9b      	subs	r3, r3, r2
 801fefe:	9304      	str	r3, [sp, #16]
 801ff00:	4253      	negs	r3, r2
 801ff02:	9307      	str	r3, [sp, #28]
 801ff04:	2300      	movs	r3, #0
 801ff06:	930a      	str	r3, [sp, #40]	; 0x28
 801ff08:	e7bf      	b.n	801fe8a <_dtoa_r+0x1da>
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	9308      	str	r3, [sp, #32]
 801ff0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	dc55      	bgt.n	801ffc0 <_dtoa_r+0x310>
 801ff14:	2301      	movs	r3, #1
 801ff16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ff1a:	461a      	mov	r2, r3
 801ff1c:	9209      	str	r2, [sp, #36]	; 0x24
 801ff1e:	e00c      	b.n	801ff3a <_dtoa_r+0x28a>
 801ff20:	2301      	movs	r3, #1
 801ff22:	e7f3      	b.n	801ff0c <_dtoa_r+0x25c>
 801ff24:	2300      	movs	r3, #0
 801ff26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ff28:	9308      	str	r3, [sp, #32]
 801ff2a:	9b00      	ldr	r3, [sp, #0]
 801ff2c:	4413      	add	r3, r2
 801ff2e:	9302      	str	r3, [sp, #8]
 801ff30:	3301      	adds	r3, #1
 801ff32:	2b01      	cmp	r3, #1
 801ff34:	9303      	str	r3, [sp, #12]
 801ff36:	bfb8      	it	lt
 801ff38:	2301      	movlt	r3, #1
 801ff3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ff3c:	2200      	movs	r2, #0
 801ff3e:	6042      	str	r2, [r0, #4]
 801ff40:	2204      	movs	r2, #4
 801ff42:	f102 0614 	add.w	r6, r2, #20
 801ff46:	429e      	cmp	r6, r3
 801ff48:	6841      	ldr	r1, [r0, #4]
 801ff4a:	d93d      	bls.n	801ffc8 <_dtoa_r+0x318>
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	f000 fec9 	bl	8020ce4 <_Balloc>
 801ff52:	9001      	str	r0, [sp, #4]
 801ff54:	2800      	cmp	r0, #0
 801ff56:	d13b      	bne.n	801ffd0 <_dtoa_r+0x320>
 801ff58:	4b11      	ldr	r3, [pc, #68]	; (801ffa0 <_dtoa_r+0x2f0>)
 801ff5a:	4602      	mov	r2, r0
 801ff5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ff60:	e6c0      	b.n	801fce4 <_dtoa_r+0x34>
 801ff62:	2301      	movs	r3, #1
 801ff64:	e7df      	b.n	801ff26 <_dtoa_r+0x276>
 801ff66:	bf00      	nop
 801ff68:	636f4361 	.word	0x636f4361
 801ff6c:	3fd287a7 	.word	0x3fd287a7
 801ff70:	8b60c8b3 	.word	0x8b60c8b3
 801ff74:	3fc68a28 	.word	0x3fc68a28
 801ff78:	509f79fb 	.word	0x509f79fb
 801ff7c:	3fd34413 	.word	0x3fd34413
 801ff80:	08022369 	.word	0x08022369
 801ff84:	08022380 	.word	0x08022380
 801ff88:	7ff00000 	.word	0x7ff00000
 801ff8c:	08022365 	.word	0x08022365
 801ff90:	0802235c 	.word	0x0802235c
 801ff94:	08022339 	.word	0x08022339
 801ff98:	3ff80000 	.word	0x3ff80000
 801ff9c:	080224d0 	.word	0x080224d0
 801ffa0:	080223db 	.word	0x080223db
 801ffa4:	2501      	movs	r5, #1
 801ffa6:	2300      	movs	r3, #0
 801ffa8:	9306      	str	r3, [sp, #24]
 801ffaa:	9508      	str	r5, [sp, #32]
 801ffac:	f04f 33ff 	mov.w	r3, #4294967295
 801ffb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	2312      	movs	r3, #18
 801ffb8:	e7b0      	b.n	801ff1c <_dtoa_r+0x26c>
 801ffba:	2301      	movs	r3, #1
 801ffbc:	9308      	str	r3, [sp, #32]
 801ffbe:	e7f5      	b.n	801ffac <_dtoa_r+0x2fc>
 801ffc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ffc6:	e7b8      	b.n	801ff3a <_dtoa_r+0x28a>
 801ffc8:	3101      	adds	r1, #1
 801ffca:	6041      	str	r1, [r0, #4]
 801ffcc:	0052      	lsls	r2, r2, #1
 801ffce:	e7b8      	b.n	801ff42 <_dtoa_r+0x292>
 801ffd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ffd2:	9a01      	ldr	r2, [sp, #4]
 801ffd4:	601a      	str	r2, [r3, #0]
 801ffd6:	9b03      	ldr	r3, [sp, #12]
 801ffd8:	2b0e      	cmp	r3, #14
 801ffda:	f200 809d 	bhi.w	8020118 <_dtoa_r+0x468>
 801ffde:	2d00      	cmp	r5, #0
 801ffe0:	f000 809a 	beq.w	8020118 <_dtoa_r+0x468>
 801ffe4:	9b00      	ldr	r3, [sp, #0]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	dd32      	ble.n	8020050 <_dtoa_r+0x3a0>
 801ffea:	4ab7      	ldr	r2, [pc, #732]	; (80202c8 <_dtoa_r+0x618>)
 801ffec:	f003 030f 	and.w	r3, r3, #15
 801fff0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801fff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fff8:	9b00      	ldr	r3, [sp, #0]
 801fffa:	05d8      	lsls	r0, r3, #23
 801fffc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020000:	d516      	bpl.n	8020030 <_dtoa_r+0x380>
 8020002:	4bb2      	ldr	r3, [pc, #712]	; (80202cc <_dtoa_r+0x61c>)
 8020004:	ec51 0b19 	vmov	r0, r1, d9
 8020008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802000c:	f7e0 fc46 	bl	800089c <__aeabi_ddiv>
 8020010:	f007 070f 	and.w	r7, r7, #15
 8020014:	4682      	mov	sl, r0
 8020016:	468b      	mov	fp, r1
 8020018:	2503      	movs	r5, #3
 802001a:	4eac      	ldr	r6, [pc, #688]	; (80202cc <_dtoa_r+0x61c>)
 802001c:	b957      	cbnz	r7, 8020034 <_dtoa_r+0x384>
 802001e:	4642      	mov	r2, r8
 8020020:	464b      	mov	r3, r9
 8020022:	4650      	mov	r0, sl
 8020024:	4659      	mov	r1, fp
 8020026:	f7e0 fc39 	bl	800089c <__aeabi_ddiv>
 802002a:	4682      	mov	sl, r0
 802002c:	468b      	mov	fp, r1
 802002e:	e028      	b.n	8020082 <_dtoa_r+0x3d2>
 8020030:	2502      	movs	r5, #2
 8020032:	e7f2      	b.n	802001a <_dtoa_r+0x36a>
 8020034:	07f9      	lsls	r1, r7, #31
 8020036:	d508      	bpl.n	802004a <_dtoa_r+0x39a>
 8020038:	4640      	mov	r0, r8
 802003a:	4649      	mov	r1, r9
 802003c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020040:	f7e0 fb02 	bl	8000648 <__aeabi_dmul>
 8020044:	3501      	adds	r5, #1
 8020046:	4680      	mov	r8, r0
 8020048:	4689      	mov	r9, r1
 802004a:	107f      	asrs	r7, r7, #1
 802004c:	3608      	adds	r6, #8
 802004e:	e7e5      	b.n	802001c <_dtoa_r+0x36c>
 8020050:	f000 809b 	beq.w	802018a <_dtoa_r+0x4da>
 8020054:	9b00      	ldr	r3, [sp, #0]
 8020056:	4f9d      	ldr	r7, [pc, #628]	; (80202cc <_dtoa_r+0x61c>)
 8020058:	425e      	negs	r6, r3
 802005a:	4b9b      	ldr	r3, [pc, #620]	; (80202c8 <_dtoa_r+0x618>)
 802005c:	f006 020f 	and.w	r2, r6, #15
 8020060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020068:	ec51 0b19 	vmov	r0, r1, d9
 802006c:	f7e0 faec 	bl	8000648 <__aeabi_dmul>
 8020070:	1136      	asrs	r6, r6, #4
 8020072:	4682      	mov	sl, r0
 8020074:	468b      	mov	fp, r1
 8020076:	2300      	movs	r3, #0
 8020078:	2502      	movs	r5, #2
 802007a:	2e00      	cmp	r6, #0
 802007c:	d17a      	bne.n	8020174 <_dtoa_r+0x4c4>
 802007e:	2b00      	cmp	r3, #0
 8020080:	d1d3      	bne.n	802002a <_dtoa_r+0x37a>
 8020082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020084:	2b00      	cmp	r3, #0
 8020086:	f000 8082 	beq.w	802018e <_dtoa_r+0x4de>
 802008a:	4b91      	ldr	r3, [pc, #580]	; (80202d0 <_dtoa_r+0x620>)
 802008c:	2200      	movs	r2, #0
 802008e:	4650      	mov	r0, sl
 8020090:	4659      	mov	r1, fp
 8020092:	f7e0 fd4b 	bl	8000b2c <__aeabi_dcmplt>
 8020096:	2800      	cmp	r0, #0
 8020098:	d079      	beq.n	802018e <_dtoa_r+0x4de>
 802009a:	9b03      	ldr	r3, [sp, #12]
 802009c:	2b00      	cmp	r3, #0
 802009e:	d076      	beq.n	802018e <_dtoa_r+0x4de>
 80200a0:	9b02      	ldr	r3, [sp, #8]
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	dd36      	ble.n	8020114 <_dtoa_r+0x464>
 80200a6:	9b00      	ldr	r3, [sp, #0]
 80200a8:	4650      	mov	r0, sl
 80200aa:	4659      	mov	r1, fp
 80200ac:	1e5f      	subs	r7, r3, #1
 80200ae:	2200      	movs	r2, #0
 80200b0:	4b88      	ldr	r3, [pc, #544]	; (80202d4 <_dtoa_r+0x624>)
 80200b2:	f7e0 fac9 	bl	8000648 <__aeabi_dmul>
 80200b6:	9e02      	ldr	r6, [sp, #8]
 80200b8:	4682      	mov	sl, r0
 80200ba:	468b      	mov	fp, r1
 80200bc:	3501      	adds	r5, #1
 80200be:	4628      	mov	r0, r5
 80200c0:	f7e0 fa58 	bl	8000574 <__aeabi_i2d>
 80200c4:	4652      	mov	r2, sl
 80200c6:	465b      	mov	r3, fp
 80200c8:	f7e0 fabe 	bl	8000648 <__aeabi_dmul>
 80200cc:	4b82      	ldr	r3, [pc, #520]	; (80202d8 <_dtoa_r+0x628>)
 80200ce:	2200      	movs	r2, #0
 80200d0:	f7e0 f904 	bl	80002dc <__adddf3>
 80200d4:	46d0      	mov	r8, sl
 80200d6:	46d9      	mov	r9, fp
 80200d8:	4682      	mov	sl, r0
 80200da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80200de:	2e00      	cmp	r6, #0
 80200e0:	d158      	bne.n	8020194 <_dtoa_r+0x4e4>
 80200e2:	4b7e      	ldr	r3, [pc, #504]	; (80202dc <_dtoa_r+0x62c>)
 80200e4:	2200      	movs	r2, #0
 80200e6:	4640      	mov	r0, r8
 80200e8:	4649      	mov	r1, r9
 80200ea:	f7e0 f8f5 	bl	80002d8 <__aeabi_dsub>
 80200ee:	4652      	mov	r2, sl
 80200f0:	465b      	mov	r3, fp
 80200f2:	4680      	mov	r8, r0
 80200f4:	4689      	mov	r9, r1
 80200f6:	f7e0 fd37 	bl	8000b68 <__aeabi_dcmpgt>
 80200fa:	2800      	cmp	r0, #0
 80200fc:	f040 8295 	bne.w	802062a <_dtoa_r+0x97a>
 8020100:	4652      	mov	r2, sl
 8020102:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8020106:	4640      	mov	r0, r8
 8020108:	4649      	mov	r1, r9
 802010a:	f7e0 fd0f 	bl	8000b2c <__aeabi_dcmplt>
 802010e:	2800      	cmp	r0, #0
 8020110:	f040 8289 	bne.w	8020626 <_dtoa_r+0x976>
 8020114:	ec5b ab19 	vmov	sl, fp, d9
 8020118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802011a:	2b00      	cmp	r3, #0
 802011c:	f2c0 8148 	blt.w	80203b0 <_dtoa_r+0x700>
 8020120:	9a00      	ldr	r2, [sp, #0]
 8020122:	2a0e      	cmp	r2, #14
 8020124:	f300 8144 	bgt.w	80203b0 <_dtoa_r+0x700>
 8020128:	4b67      	ldr	r3, [pc, #412]	; (80202c8 <_dtoa_r+0x618>)
 802012a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802012e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020134:	2b00      	cmp	r3, #0
 8020136:	f280 80d5 	bge.w	80202e4 <_dtoa_r+0x634>
 802013a:	9b03      	ldr	r3, [sp, #12]
 802013c:	2b00      	cmp	r3, #0
 802013e:	f300 80d1 	bgt.w	80202e4 <_dtoa_r+0x634>
 8020142:	f040 826f 	bne.w	8020624 <_dtoa_r+0x974>
 8020146:	4b65      	ldr	r3, [pc, #404]	; (80202dc <_dtoa_r+0x62c>)
 8020148:	2200      	movs	r2, #0
 802014a:	4640      	mov	r0, r8
 802014c:	4649      	mov	r1, r9
 802014e:	f7e0 fa7b 	bl	8000648 <__aeabi_dmul>
 8020152:	4652      	mov	r2, sl
 8020154:	465b      	mov	r3, fp
 8020156:	f7e0 fcfd 	bl	8000b54 <__aeabi_dcmpge>
 802015a:	9e03      	ldr	r6, [sp, #12]
 802015c:	4637      	mov	r7, r6
 802015e:	2800      	cmp	r0, #0
 8020160:	f040 8245 	bne.w	80205ee <_dtoa_r+0x93e>
 8020164:	9d01      	ldr	r5, [sp, #4]
 8020166:	2331      	movs	r3, #49	; 0x31
 8020168:	f805 3b01 	strb.w	r3, [r5], #1
 802016c:	9b00      	ldr	r3, [sp, #0]
 802016e:	3301      	adds	r3, #1
 8020170:	9300      	str	r3, [sp, #0]
 8020172:	e240      	b.n	80205f6 <_dtoa_r+0x946>
 8020174:	07f2      	lsls	r2, r6, #31
 8020176:	d505      	bpl.n	8020184 <_dtoa_r+0x4d4>
 8020178:	e9d7 2300 	ldrd	r2, r3, [r7]
 802017c:	f7e0 fa64 	bl	8000648 <__aeabi_dmul>
 8020180:	3501      	adds	r5, #1
 8020182:	2301      	movs	r3, #1
 8020184:	1076      	asrs	r6, r6, #1
 8020186:	3708      	adds	r7, #8
 8020188:	e777      	b.n	802007a <_dtoa_r+0x3ca>
 802018a:	2502      	movs	r5, #2
 802018c:	e779      	b.n	8020082 <_dtoa_r+0x3d2>
 802018e:	9f00      	ldr	r7, [sp, #0]
 8020190:	9e03      	ldr	r6, [sp, #12]
 8020192:	e794      	b.n	80200be <_dtoa_r+0x40e>
 8020194:	9901      	ldr	r1, [sp, #4]
 8020196:	4b4c      	ldr	r3, [pc, #304]	; (80202c8 <_dtoa_r+0x618>)
 8020198:	4431      	add	r1, r6
 802019a:	910d      	str	r1, [sp, #52]	; 0x34
 802019c:	9908      	ldr	r1, [sp, #32]
 802019e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80201a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80201a6:	2900      	cmp	r1, #0
 80201a8:	d043      	beq.n	8020232 <_dtoa_r+0x582>
 80201aa:	494d      	ldr	r1, [pc, #308]	; (80202e0 <_dtoa_r+0x630>)
 80201ac:	2000      	movs	r0, #0
 80201ae:	f7e0 fb75 	bl	800089c <__aeabi_ddiv>
 80201b2:	4652      	mov	r2, sl
 80201b4:	465b      	mov	r3, fp
 80201b6:	f7e0 f88f 	bl	80002d8 <__aeabi_dsub>
 80201ba:	9d01      	ldr	r5, [sp, #4]
 80201bc:	4682      	mov	sl, r0
 80201be:	468b      	mov	fp, r1
 80201c0:	4649      	mov	r1, r9
 80201c2:	4640      	mov	r0, r8
 80201c4:	f7e0 fcf0 	bl	8000ba8 <__aeabi_d2iz>
 80201c8:	4606      	mov	r6, r0
 80201ca:	f7e0 f9d3 	bl	8000574 <__aeabi_i2d>
 80201ce:	4602      	mov	r2, r0
 80201d0:	460b      	mov	r3, r1
 80201d2:	4640      	mov	r0, r8
 80201d4:	4649      	mov	r1, r9
 80201d6:	f7e0 f87f 	bl	80002d8 <__aeabi_dsub>
 80201da:	3630      	adds	r6, #48	; 0x30
 80201dc:	f805 6b01 	strb.w	r6, [r5], #1
 80201e0:	4652      	mov	r2, sl
 80201e2:	465b      	mov	r3, fp
 80201e4:	4680      	mov	r8, r0
 80201e6:	4689      	mov	r9, r1
 80201e8:	f7e0 fca0 	bl	8000b2c <__aeabi_dcmplt>
 80201ec:	2800      	cmp	r0, #0
 80201ee:	d163      	bne.n	80202b8 <_dtoa_r+0x608>
 80201f0:	4642      	mov	r2, r8
 80201f2:	464b      	mov	r3, r9
 80201f4:	4936      	ldr	r1, [pc, #216]	; (80202d0 <_dtoa_r+0x620>)
 80201f6:	2000      	movs	r0, #0
 80201f8:	f7e0 f86e 	bl	80002d8 <__aeabi_dsub>
 80201fc:	4652      	mov	r2, sl
 80201fe:	465b      	mov	r3, fp
 8020200:	f7e0 fc94 	bl	8000b2c <__aeabi_dcmplt>
 8020204:	2800      	cmp	r0, #0
 8020206:	f040 80b5 	bne.w	8020374 <_dtoa_r+0x6c4>
 802020a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802020c:	429d      	cmp	r5, r3
 802020e:	d081      	beq.n	8020114 <_dtoa_r+0x464>
 8020210:	4b30      	ldr	r3, [pc, #192]	; (80202d4 <_dtoa_r+0x624>)
 8020212:	2200      	movs	r2, #0
 8020214:	4650      	mov	r0, sl
 8020216:	4659      	mov	r1, fp
 8020218:	f7e0 fa16 	bl	8000648 <__aeabi_dmul>
 802021c:	4b2d      	ldr	r3, [pc, #180]	; (80202d4 <_dtoa_r+0x624>)
 802021e:	4682      	mov	sl, r0
 8020220:	468b      	mov	fp, r1
 8020222:	4640      	mov	r0, r8
 8020224:	4649      	mov	r1, r9
 8020226:	2200      	movs	r2, #0
 8020228:	f7e0 fa0e 	bl	8000648 <__aeabi_dmul>
 802022c:	4680      	mov	r8, r0
 802022e:	4689      	mov	r9, r1
 8020230:	e7c6      	b.n	80201c0 <_dtoa_r+0x510>
 8020232:	4650      	mov	r0, sl
 8020234:	4659      	mov	r1, fp
 8020236:	f7e0 fa07 	bl	8000648 <__aeabi_dmul>
 802023a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802023c:	9d01      	ldr	r5, [sp, #4]
 802023e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020240:	4682      	mov	sl, r0
 8020242:	468b      	mov	fp, r1
 8020244:	4649      	mov	r1, r9
 8020246:	4640      	mov	r0, r8
 8020248:	f7e0 fcae 	bl	8000ba8 <__aeabi_d2iz>
 802024c:	4606      	mov	r6, r0
 802024e:	f7e0 f991 	bl	8000574 <__aeabi_i2d>
 8020252:	3630      	adds	r6, #48	; 0x30
 8020254:	4602      	mov	r2, r0
 8020256:	460b      	mov	r3, r1
 8020258:	4640      	mov	r0, r8
 802025a:	4649      	mov	r1, r9
 802025c:	f7e0 f83c 	bl	80002d8 <__aeabi_dsub>
 8020260:	f805 6b01 	strb.w	r6, [r5], #1
 8020264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020266:	429d      	cmp	r5, r3
 8020268:	4680      	mov	r8, r0
 802026a:	4689      	mov	r9, r1
 802026c:	f04f 0200 	mov.w	r2, #0
 8020270:	d124      	bne.n	80202bc <_dtoa_r+0x60c>
 8020272:	4b1b      	ldr	r3, [pc, #108]	; (80202e0 <_dtoa_r+0x630>)
 8020274:	4650      	mov	r0, sl
 8020276:	4659      	mov	r1, fp
 8020278:	f7e0 f830 	bl	80002dc <__adddf3>
 802027c:	4602      	mov	r2, r0
 802027e:	460b      	mov	r3, r1
 8020280:	4640      	mov	r0, r8
 8020282:	4649      	mov	r1, r9
 8020284:	f7e0 fc70 	bl	8000b68 <__aeabi_dcmpgt>
 8020288:	2800      	cmp	r0, #0
 802028a:	d173      	bne.n	8020374 <_dtoa_r+0x6c4>
 802028c:	4652      	mov	r2, sl
 802028e:	465b      	mov	r3, fp
 8020290:	4913      	ldr	r1, [pc, #76]	; (80202e0 <_dtoa_r+0x630>)
 8020292:	2000      	movs	r0, #0
 8020294:	f7e0 f820 	bl	80002d8 <__aeabi_dsub>
 8020298:	4602      	mov	r2, r0
 802029a:	460b      	mov	r3, r1
 802029c:	4640      	mov	r0, r8
 802029e:	4649      	mov	r1, r9
 80202a0:	f7e0 fc44 	bl	8000b2c <__aeabi_dcmplt>
 80202a4:	2800      	cmp	r0, #0
 80202a6:	f43f af35 	beq.w	8020114 <_dtoa_r+0x464>
 80202aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80202ac:	1e6b      	subs	r3, r5, #1
 80202ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80202b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80202b4:	2b30      	cmp	r3, #48	; 0x30
 80202b6:	d0f8      	beq.n	80202aa <_dtoa_r+0x5fa>
 80202b8:	9700      	str	r7, [sp, #0]
 80202ba:	e049      	b.n	8020350 <_dtoa_r+0x6a0>
 80202bc:	4b05      	ldr	r3, [pc, #20]	; (80202d4 <_dtoa_r+0x624>)
 80202be:	f7e0 f9c3 	bl	8000648 <__aeabi_dmul>
 80202c2:	4680      	mov	r8, r0
 80202c4:	4689      	mov	r9, r1
 80202c6:	e7bd      	b.n	8020244 <_dtoa_r+0x594>
 80202c8:	080224d0 	.word	0x080224d0
 80202cc:	080224a8 	.word	0x080224a8
 80202d0:	3ff00000 	.word	0x3ff00000
 80202d4:	40240000 	.word	0x40240000
 80202d8:	401c0000 	.word	0x401c0000
 80202dc:	40140000 	.word	0x40140000
 80202e0:	3fe00000 	.word	0x3fe00000
 80202e4:	9d01      	ldr	r5, [sp, #4]
 80202e6:	4656      	mov	r6, sl
 80202e8:	465f      	mov	r7, fp
 80202ea:	4642      	mov	r2, r8
 80202ec:	464b      	mov	r3, r9
 80202ee:	4630      	mov	r0, r6
 80202f0:	4639      	mov	r1, r7
 80202f2:	f7e0 fad3 	bl	800089c <__aeabi_ddiv>
 80202f6:	f7e0 fc57 	bl	8000ba8 <__aeabi_d2iz>
 80202fa:	4682      	mov	sl, r0
 80202fc:	f7e0 f93a 	bl	8000574 <__aeabi_i2d>
 8020300:	4642      	mov	r2, r8
 8020302:	464b      	mov	r3, r9
 8020304:	f7e0 f9a0 	bl	8000648 <__aeabi_dmul>
 8020308:	4602      	mov	r2, r0
 802030a:	460b      	mov	r3, r1
 802030c:	4630      	mov	r0, r6
 802030e:	4639      	mov	r1, r7
 8020310:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8020314:	f7df ffe0 	bl	80002d8 <__aeabi_dsub>
 8020318:	f805 6b01 	strb.w	r6, [r5], #1
 802031c:	9e01      	ldr	r6, [sp, #4]
 802031e:	9f03      	ldr	r7, [sp, #12]
 8020320:	1bae      	subs	r6, r5, r6
 8020322:	42b7      	cmp	r7, r6
 8020324:	4602      	mov	r2, r0
 8020326:	460b      	mov	r3, r1
 8020328:	d135      	bne.n	8020396 <_dtoa_r+0x6e6>
 802032a:	f7df ffd7 	bl	80002dc <__adddf3>
 802032e:	4642      	mov	r2, r8
 8020330:	464b      	mov	r3, r9
 8020332:	4606      	mov	r6, r0
 8020334:	460f      	mov	r7, r1
 8020336:	f7e0 fc17 	bl	8000b68 <__aeabi_dcmpgt>
 802033a:	b9d0      	cbnz	r0, 8020372 <_dtoa_r+0x6c2>
 802033c:	4642      	mov	r2, r8
 802033e:	464b      	mov	r3, r9
 8020340:	4630      	mov	r0, r6
 8020342:	4639      	mov	r1, r7
 8020344:	f7e0 fbe8 	bl	8000b18 <__aeabi_dcmpeq>
 8020348:	b110      	cbz	r0, 8020350 <_dtoa_r+0x6a0>
 802034a:	f01a 0f01 	tst.w	sl, #1
 802034e:	d110      	bne.n	8020372 <_dtoa_r+0x6c2>
 8020350:	4620      	mov	r0, r4
 8020352:	ee18 1a10 	vmov	r1, s16
 8020356:	f000 fd05 	bl	8020d64 <_Bfree>
 802035a:	2300      	movs	r3, #0
 802035c:	9800      	ldr	r0, [sp, #0]
 802035e:	702b      	strb	r3, [r5, #0]
 8020360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020362:	3001      	adds	r0, #1
 8020364:	6018      	str	r0, [r3, #0]
 8020366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020368:	2b00      	cmp	r3, #0
 802036a:	f43f acf1 	beq.w	801fd50 <_dtoa_r+0xa0>
 802036e:	601d      	str	r5, [r3, #0]
 8020370:	e4ee      	b.n	801fd50 <_dtoa_r+0xa0>
 8020372:	9f00      	ldr	r7, [sp, #0]
 8020374:	462b      	mov	r3, r5
 8020376:	461d      	mov	r5, r3
 8020378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802037c:	2a39      	cmp	r2, #57	; 0x39
 802037e:	d106      	bne.n	802038e <_dtoa_r+0x6de>
 8020380:	9a01      	ldr	r2, [sp, #4]
 8020382:	429a      	cmp	r2, r3
 8020384:	d1f7      	bne.n	8020376 <_dtoa_r+0x6c6>
 8020386:	9901      	ldr	r1, [sp, #4]
 8020388:	2230      	movs	r2, #48	; 0x30
 802038a:	3701      	adds	r7, #1
 802038c:	700a      	strb	r2, [r1, #0]
 802038e:	781a      	ldrb	r2, [r3, #0]
 8020390:	3201      	adds	r2, #1
 8020392:	701a      	strb	r2, [r3, #0]
 8020394:	e790      	b.n	80202b8 <_dtoa_r+0x608>
 8020396:	4ba6      	ldr	r3, [pc, #664]	; (8020630 <_dtoa_r+0x980>)
 8020398:	2200      	movs	r2, #0
 802039a:	f7e0 f955 	bl	8000648 <__aeabi_dmul>
 802039e:	2200      	movs	r2, #0
 80203a0:	2300      	movs	r3, #0
 80203a2:	4606      	mov	r6, r0
 80203a4:	460f      	mov	r7, r1
 80203a6:	f7e0 fbb7 	bl	8000b18 <__aeabi_dcmpeq>
 80203aa:	2800      	cmp	r0, #0
 80203ac:	d09d      	beq.n	80202ea <_dtoa_r+0x63a>
 80203ae:	e7cf      	b.n	8020350 <_dtoa_r+0x6a0>
 80203b0:	9a08      	ldr	r2, [sp, #32]
 80203b2:	2a00      	cmp	r2, #0
 80203b4:	f000 80d7 	beq.w	8020566 <_dtoa_r+0x8b6>
 80203b8:	9a06      	ldr	r2, [sp, #24]
 80203ba:	2a01      	cmp	r2, #1
 80203bc:	f300 80ba 	bgt.w	8020534 <_dtoa_r+0x884>
 80203c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80203c2:	2a00      	cmp	r2, #0
 80203c4:	f000 80b2 	beq.w	802052c <_dtoa_r+0x87c>
 80203c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80203cc:	9e07      	ldr	r6, [sp, #28]
 80203ce:	9d04      	ldr	r5, [sp, #16]
 80203d0:	9a04      	ldr	r2, [sp, #16]
 80203d2:	441a      	add	r2, r3
 80203d4:	9204      	str	r2, [sp, #16]
 80203d6:	9a05      	ldr	r2, [sp, #20]
 80203d8:	2101      	movs	r1, #1
 80203da:	441a      	add	r2, r3
 80203dc:	4620      	mov	r0, r4
 80203de:	9205      	str	r2, [sp, #20]
 80203e0:	f000 fd78 	bl	8020ed4 <__i2b>
 80203e4:	4607      	mov	r7, r0
 80203e6:	2d00      	cmp	r5, #0
 80203e8:	dd0c      	ble.n	8020404 <_dtoa_r+0x754>
 80203ea:	9b05      	ldr	r3, [sp, #20]
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	dd09      	ble.n	8020404 <_dtoa_r+0x754>
 80203f0:	42ab      	cmp	r3, r5
 80203f2:	9a04      	ldr	r2, [sp, #16]
 80203f4:	bfa8      	it	ge
 80203f6:	462b      	movge	r3, r5
 80203f8:	1ad2      	subs	r2, r2, r3
 80203fa:	9204      	str	r2, [sp, #16]
 80203fc:	9a05      	ldr	r2, [sp, #20]
 80203fe:	1aed      	subs	r5, r5, r3
 8020400:	1ad3      	subs	r3, r2, r3
 8020402:	9305      	str	r3, [sp, #20]
 8020404:	9b07      	ldr	r3, [sp, #28]
 8020406:	b31b      	cbz	r3, 8020450 <_dtoa_r+0x7a0>
 8020408:	9b08      	ldr	r3, [sp, #32]
 802040a:	2b00      	cmp	r3, #0
 802040c:	f000 80af 	beq.w	802056e <_dtoa_r+0x8be>
 8020410:	2e00      	cmp	r6, #0
 8020412:	dd13      	ble.n	802043c <_dtoa_r+0x78c>
 8020414:	4639      	mov	r1, r7
 8020416:	4632      	mov	r2, r6
 8020418:	4620      	mov	r0, r4
 802041a:	f000 fe1b 	bl	8021054 <__pow5mult>
 802041e:	ee18 2a10 	vmov	r2, s16
 8020422:	4601      	mov	r1, r0
 8020424:	4607      	mov	r7, r0
 8020426:	4620      	mov	r0, r4
 8020428:	f000 fd6a 	bl	8020f00 <__multiply>
 802042c:	ee18 1a10 	vmov	r1, s16
 8020430:	4680      	mov	r8, r0
 8020432:	4620      	mov	r0, r4
 8020434:	f000 fc96 	bl	8020d64 <_Bfree>
 8020438:	ee08 8a10 	vmov	s16, r8
 802043c:	9b07      	ldr	r3, [sp, #28]
 802043e:	1b9a      	subs	r2, r3, r6
 8020440:	d006      	beq.n	8020450 <_dtoa_r+0x7a0>
 8020442:	ee18 1a10 	vmov	r1, s16
 8020446:	4620      	mov	r0, r4
 8020448:	f000 fe04 	bl	8021054 <__pow5mult>
 802044c:	ee08 0a10 	vmov	s16, r0
 8020450:	2101      	movs	r1, #1
 8020452:	4620      	mov	r0, r4
 8020454:	f000 fd3e 	bl	8020ed4 <__i2b>
 8020458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802045a:	2b00      	cmp	r3, #0
 802045c:	4606      	mov	r6, r0
 802045e:	f340 8088 	ble.w	8020572 <_dtoa_r+0x8c2>
 8020462:	461a      	mov	r2, r3
 8020464:	4601      	mov	r1, r0
 8020466:	4620      	mov	r0, r4
 8020468:	f000 fdf4 	bl	8021054 <__pow5mult>
 802046c:	9b06      	ldr	r3, [sp, #24]
 802046e:	2b01      	cmp	r3, #1
 8020470:	4606      	mov	r6, r0
 8020472:	f340 8081 	ble.w	8020578 <_dtoa_r+0x8c8>
 8020476:	f04f 0800 	mov.w	r8, #0
 802047a:	6933      	ldr	r3, [r6, #16]
 802047c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020480:	6918      	ldr	r0, [r3, #16]
 8020482:	f000 fcd7 	bl	8020e34 <__hi0bits>
 8020486:	f1c0 0020 	rsb	r0, r0, #32
 802048a:	9b05      	ldr	r3, [sp, #20]
 802048c:	4418      	add	r0, r3
 802048e:	f010 001f 	ands.w	r0, r0, #31
 8020492:	f000 8092 	beq.w	80205ba <_dtoa_r+0x90a>
 8020496:	f1c0 0320 	rsb	r3, r0, #32
 802049a:	2b04      	cmp	r3, #4
 802049c:	f340 808a 	ble.w	80205b4 <_dtoa_r+0x904>
 80204a0:	f1c0 001c 	rsb	r0, r0, #28
 80204a4:	9b04      	ldr	r3, [sp, #16]
 80204a6:	4403      	add	r3, r0
 80204a8:	9304      	str	r3, [sp, #16]
 80204aa:	9b05      	ldr	r3, [sp, #20]
 80204ac:	4403      	add	r3, r0
 80204ae:	4405      	add	r5, r0
 80204b0:	9305      	str	r3, [sp, #20]
 80204b2:	9b04      	ldr	r3, [sp, #16]
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	dd07      	ble.n	80204c8 <_dtoa_r+0x818>
 80204b8:	ee18 1a10 	vmov	r1, s16
 80204bc:	461a      	mov	r2, r3
 80204be:	4620      	mov	r0, r4
 80204c0:	f000 fe22 	bl	8021108 <__lshift>
 80204c4:	ee08 0a10 	vmov	s16, r0
 80204c8:	9b05      	ldr	r3, [sp, #20]
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	dd05      	ble.n	80204da <_dtoa_r+0x82a>
 80204ce:	4631      	mov	r1, r6
 80204d0:	461a      	mov	r2, r3
 80204d2:	4620      	mov	r0, r4
 80204d4:	f000 fe18 	bl	8021108 <__lshift>
 80204d8:	4606      	mov	r6, r0
 80204da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d06e      	beq.n	80205be <_dtoa_r+0x90e>
 80204e0:	ee18 0a10 	vmov	r0, s16
 80204e4:	4631      	mov	r1, r6
 80204e6:	f000 fe7f 	bl	80211e8 <__mcmp>
 80204ea:	2800      	cmp	r0, #0
 80204ec:	da67      	bge.n	80205be <_dtoa_r+0x90e>
 80204ee:	9b00      	ldr	r3, [sp, #0]
 80204f0:	3b01      	subs	r3, #1
 80204f2:	ee18 1a10 	vmov	r1, s16
 80204f6:	9300      	str	r3, [sp, #0]
 80204f8:	220a      	movs	r2, #10
 80204fa:	2300      	movs	r3, #0
 80204fc:	4620      	mov	r0, r4
 80204fe:	f000 fc53 	bl	8020da8 <__multadd>
 8020502:	9b08      	ldr	r3, [sp, #32]
 8020504:	ee08 0a10 	vmov	s16, r0
 8020508:	2b00      	cmp	r3, #0
 802050a:	f000 81b1 	beq.w	8020870 <_dtoa_r+0xbc0>
 802050e:	2300      	movs	r3, #0
 8020510:	4639      	mov	r1, r7
 8020512:	220a      	movs	r2, #10
 8020514:	4620      	mov	r0, r4
 8020516:	f000 fc47 	bl	8020da8 <__multadd>
 802051a:	9b02      	ldr	r3, [sp, #8]
 802051c:	2b00      	cmp	r3, #0
 802051e:	4607      	mov	r7, r0
 8020520:	f300 808e 	bgt.w	8020640 <_dtoa_r+0x990>
 8020524:	9b06      	ldr	r3, [sp, #24]
 8020526:	2b02      	cmp	r3, #2
 8020528:	dc51      	bgt.n	80205ce <_dtoa_r+0x91e>
 802052a:	e089      	b.n	8020640 <_dtoa_r+0x990>
 802052c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802052e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020532:	e74b      	b.n	80203cc <_dtoa_r+0x71c>
 8020534:	9b03      	ldr	r3, [sp, #12]
 8020536:	1e5e      	subs	r6, r3, #1
 8020538:	9b07      	ldr	r3, [sp, #28]
 802053a:	42b3      	cmp	r3, r6
 802053c:	bfbf      	itttt	lt
 802053e:	9b07      	ldrlt	r3, [sp, #28]
 8020540:	9607      	strlt	r6, [sp, #28]
 8020542:	1af2      	sublt	r2, r6, r3
 8020544:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8020546:	bfb6      	itet	lt
 8020548:	189b      	addlt	r3, r3, r2
 802054a:	1b9e      	subge	r6, r3, r6
 802054c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802054e:	9b03      	ldr	r3, [sp, #12]
 8020550:	bfb8      	it	lt
 8020552:	2600      	movlt	r6, #0
 8020554:	2b00      	cmp	r3, #0
 8020556:	bfb7      	itett	lt
 8020558:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802055c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020560:	1a9d      	sublt	r5, r3, r2
 8020562:	2300      	movlt	r3, #0
 8020564:	e734      	b.n	80203d0 <_dtoa_r+0x720>
 8020566:	9e07      	ldr	r6, [sp, #28]
 8020568:	9d04      	ldr	r5, [sp, #16]
 802056a:	9f08      	ldr	r7, [sp, #32]
 802056c:	e73b      	b.n	80203e6 <_dtoa_r+0x736>
 802056e:	9a07      	ldr	r2, [sp, #28]
 8020570:	e767      	b.n	8020442 <_dtoa_r+0x792>
 8020572:	9b06      	ldr	r3, [sp, #24]
 8020574:	2b01      	cmp	r3, #1
 8020576:	dc18      	bgt.n	80205aa <_dtoa_r+0x8fa>
 8020578:	f1ba 0f00 	cmp.w	sl, #0
 802057c:	d115      	bne.n	80205aa <_dtoa_r+0x8fa>
 802057e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020582:	b993      	cbnz	r3, 80205aa <_dtoa_r+0x8fa>
 8020584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020588:	0d1b      	lsrs	r3, r3, #20
 802058a:	051b      	lsls	r3, r3, #20
 802058c:	b183      	cbz	r3, 80205b0 <_dtoa_r+0x900>
 802058e:	9b04      	ldr	r3, [sp, #16]
 8020590:	3301      	adds	r3, #1
 8020592:	9304      	str	r3, [sp, #16]
 8020594:	9b05      	ldr	r3, [sp, #20]
 8020596:	3301      	adds	r3, #1
 8020598:	9305      	str	r3, [sp, #20]
 802059a:	f04f 0801 	mov.w	r8, #1
 802059e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	f47f af6a 	bne.w	802047a <_dtoa_r+0x7ca>
 80205a6:	2001      	movs	r0, #1
 80205a8:	e76f      	b.n	802048a <_dtoa_r+0x7da>
 80205aa:	f04f 0800 	mov.w	r8, #0
 80205ae:	e7f6      	b.n	802059e <_dtoa_r+0x8ee>
 80205b0:	4698      	mov	r8, r3
 80205b2:	e7f4      	b.n	802059e <_dtoa_r+0x8ee>
 80205b4:	f43f af7d 	beq.w	80204b2 <_dtoa_r+0x802>
 80205b8:	4618      	mov	r0, r3
 80205ba:	301c      	adds	r0, #28
 80205bc:	e772      	b.n	80204a4 <_dtoa_r+0x7f4>
 80205be:	9b03      	ldr	r3, [sp, #12]
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	dc37      	bgt.n	8020634 <_dtoa_r+0x984>
 80205c4:	9b06      	ldr	r3, [sp, #24]
 80205c6:	2b02      	cmp	r3, #2
 80205c8:	dd34      	ble.n	8020634 <_dtoa_r+0x984>
 80205ca:	9b03      	ldr	r3, [sp, #12]
 80205cc:	9302      	str	r3, [sp, #8]
 80205ce:	9b02      	ldr	r3, [sp, #8]
 80205d0:	b96b      	cbnz	r3, 80205ee <_dtoa_r+0x93e>
 80205d2:	4631      	mov	r1, r6
 80205d4:	2205      	movs	r2, #5
 80205d6:	4620      	mov	r0, r4
 80205d8:	f000 fbe6 	bl	8020da8 <__multadd>
 80205dc:	4601      	mov	r1, r0
 80205de:	4606      	mov	r6, r0
 80205e0:	ee18 0a10 	vmov	r0, s16
 80205e4:	f000 fe00 	bl	80211e8 <__mcmp>
 80205e8:	2800      	cmp	r0, #0
 80205ea:	f73f adbb 	bgt.w	8020164 <_dtoa_r+0x4b4>
 80205ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205f0:	9d01      	ldr	r5, [sp, #4]
 80205f2:	43db      	mvns	r3, r3
 80205f4:	9300      	str	r3, [sp, #0]
 80205f6:	f04f 0800 	mov.w	r8, #0
 80205fa:	4631      	mov	r1, r6
 80205fc:	4620      	mov	r0, r4
 80205fe:	f000 fbb1 	bl	8020d64 <_Bfree>
 8020602:	2f00      	cmp	r7, #0
 8020604:	f43f aea4 	beq.w	8020350 <_dtoa_r+0x6a0>
 8020608:	f1b8 0f00 	cmp.w	r8, #0
 802060c:	d005      	beq.n	802061a <_dtoa_r+0x96a>
 802060e:	45b8      	cmp	r8, r7
 8020610:	d003      	beq.n	802061a <_dtoa_r+0x96a>
 8020612:	4641      	mov	r1, r8
 8020614:	4620      	mov	r0, r4
 8020616:	f000 fba5 	bl	8020d64 <_Bfree>
 802061a:	4639      	mov	r1, r7
 802061c:	4620      	mov	r0, r4
 802061e:	f000 fba1 	bl	8020d64 <_Bfree>
 8020622:	e695      	b.n	8020350 <_dtoa_r+0x6a0>
 8020624:	2600      	movs	r6, #0
 8020626:	4637      	mov	r7, r6
 8020628:	e7e1      	b.n	80205ee <_dtoa_r+0x93e>
 802062a:	9700      	str	r7, [sp, #0]
 802062c:	4637      	mov	r7, r6
 802062e:	e599      	b.n	8020164 <_dtoa_r+0x4b4>
 8020630:	40240000 	.word	0x40240000
 8020634:	9b08      	ldr	r3, [sp, #32]
 8020636:	2b00      	cmp	r3, #0
 8020638:	f000 80ca 	beq.w	80207d0 <_dtoa_r+0xb20>
 802063c:	9b03      	ldr	r3, [sp, #12]
 802063e:	9302      	str	r3, [sp, #8]
 8020640:	2d00      	cmp	r5, #0
 8020642:	dd05      	ble.n	8020650 <_dtoa_r+0x9a0>
 8020644:	4639      	mov	r1, r7
 8020646:	462a      	mov	r2, r5
 8020648:	4620      	mov	r0, r4
 802064a:	f000 fd5d 	bl	8021108 <__lshift>
 802064e:	4607      	mov	r7, r0
 8020650:	f1b8 0f00 	cmp.w	r8, #0
 8020654:	d05b      	beq.n	802070e <_dtoa_r+0xa5e>
 8020656:	6879      	ldr	r1, [r7, #4]
 8020658:	4620      	mov	r0, r4
 802065a:	f000 fb43 	bl	8020ce4 <_Balloc>
 802065e:	4605      	mov	r5, r0
 8020660:	b928      	cbnz	r0, 802066e <_dtoa_r+0x9be>
 8020662:	4b87      	ldr	r3, [pc, #540]	; (8020880 <_dtoa_r+0xbd0>)
 8020664:	4602      	mov	r2, r0
 8020666:	f240 21ea 	movw	r1, #746	; 0x2ea
 802066a:	f7ff bb3b 	b.w	801fce4 <_dtoa_r+0x34>
 802066e:	693a      	ldr	r2, [r7, #16]
 8020670:	3202      	adds	r2, #2
 8020672:	0092      	lsls	r2, r2, #2
 8020674:	f107 010c 	add.w	r1, r7, #12
 8020678:	300c      	adds	r0, #12
 802067a:	f7fe fca7 	bl	801efcc <memcpy>
 802067e:	2201      	movs	r2, #1
 8020680:	4629      	mov	r1, r5
 8020682:	4620      	mov	r0, r4
 8020684:	f000 fd40 	bl	8021108 <__lshift>
 8020688:	9b01      	ldr	r3, [sp, #4]
 802068a:	f103 0901 	add.w	r9, r3, #1
 802068e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8020692:	4413      	add	r3, r2
 8020694:	9305      	str	r3, [sp, #20]
 8020696:	f00a 0301 	and.w	r3, sl, #1
 802069a:	46b8      	mov	r8, r7
 802069c:	9304      	str	r3, [sp, #16]
 802069e:	4607      	mov	r7, r0
 80206a0:	4631      	mov	r1, r6
 80206a2:	ee18 0a10 	vmov	r0, s16
 80206a6:	f7ff fa75 	bl	801fb94 <quorem>
 80206aa:	4641      	mov	r1, r8
 80206ac:	9002      	str	r0, [sp, #8]
 80206ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80206b2:	ee18 0a10 	vmov	r0, s16
 80206b6:	f000 fd97 	bl	80211e8 <__mcmp>
 80206ba:	463a      	mov	r2, r7
 80206bc:	9003      	str	r0, [sp, #12]
 80206be:	4631      	mov	r1, r6
 80206c0:	4620      	mov	r0, r4
 80206c2:	f000 fdad 	bl	8021220 <__mdiff>
 80206c6:	68c2      	ldr	r2, [r0, #12]
 80206c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80206cc:	4605      	mov	r5, r0
 80206ce:	bb02      	cbnz	r2, 8020712 <_dtoa_r+0xa62>
 80206d0:	4601      	mov	r1, r0
 80206d2:	ee18 0a10 	vmov	r0, s16
 80206d6:	f000 fd87 	bl	80211e8 <__mcmp>
 80206da:	4602      	mov	r2, r0
 80206dc:	4629      	mov	r1, r5
 80206de:	4620      	mov	r0, r4
 80206e0:	9207      	str	r2, [sp, #28]
 80206e2:	f000 fb3f 	bl	8020d64 <_Bfree>
 80206e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80206ea:	ea43 0102 	orr.w	r1, r3, r2
 80206ee:	9b04      	ldr	r3, [sp, #16]
 80206f0:	430b      	orrs	r3, r1
 80206f2:	464d      	mov	r5, r9
 80206f4:	d10f      	bne.n	8020716 <_dtoa_r+0xa66>
 80206f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80206fa:	d02a      	beq.n	8020752 <_dtoa_r+0xaa2>
 80206fc:	9b03      	ldr	r3, [sp, #12]
 80206fe:	2b00      	cmp	r3, #0
 8020700:	dd02      	ble.n	8020708 <_dtoa_r+0xa58>
 8020702:	9b02      	ldr	r3, [sp, #8]
 8020704:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020708:	f88b a000 	strb.w	sl, [fp]
 802070c:	e775      	b.n	80205fa <_dtoa_r+0x94a>
 802070e:	4638      	mov	r0, r7
 8020710:	e7ba      	b.n	8020688 <_dtoa_r+0x9d8>
 8020712:	2201      	movs	r2, #1
 8020714:	e7e2      	b.n	80206dc <_dtoa_r+0xa2c>
 8020716:	9b03      	ldr	r3, [sp, #12]
 8020718:	2b00      	cmp	r3, #0
 802071a:	db04      	blt.n	8020726 <_dtoa_r+0xa76>
 802071c:	9906      	ldr	r1, [sp, #24]
 802071e:	430b      	orrs	r3, r1
 8020720:	9904      	ldr	r1, [sp, #16]
 8020722:	430b      	orrs	r3, r1
 8020724:	d122      	bne.n	802076c <_dtoa_r+0xabc>
 8020726:	2a00      	cmp	r2, #0
 8020728:	ddee      	ble.n	8020708 <_dtoa_r+0xa58>
 802072a:	ee18 1a10 	vmov	r1, s16
 802072e:	2201      	movs	r2, #1
 8020730:	4620      	mov	r0, r4
 8020732:	f000 fce9 	bl	8021108 <__lshift>
 8020736:	4631      	mov	r1, r6
 8020738:	ee08 0a10 	vmov	s16, r0
 802073c:	f000 fd54 	bl	80211e8 <__mcmp>
 8020740:	2800      	cmp	r0, #0
 8020742:	dc03      	bgt.n	802074c <_dtoa_r+0xa9c>
 8020744:	d1e0      	bne.n	8020708 <_dtoa_r+0xa58>
 8020746:	f01a 0f01 	tst.w	sl, #1
 802074a:	d0dd      	beq.n	8020708 <_dtoa_r+0xa58>
 802074c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020750:	d1d7      	bne.n	8020702 <_dtoa_r+0xa52>
 8020752:	2339      	movs	r3, #57	; 0x39
 8020754:	f88b 3000 	strb.w	r3, [fp]
 8020758:	462b      	mov	r3, r5
 802075a:	461d      	mov	r5, r3
 802075c:	3b01      	subs	r3, #1
 802075e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020762:	2a39      	cmp	r2, #57	; 0x39
 8020764:	d071      	beq.n	802084a <_dtoa_r+0xb9a>
 8020766:	3201      	adds	r2, #1
 8020768:	701a      	strb	r2, [r3, #0]
 802076a:	e746      	b.n	80205fa <_dtoa_r+0x94a>
 802076c:	2a00      	cmp	r2, #0
 802076e:	dd07      	ble.n	8020780 <_dtoa_r+0xad0>
 8020770:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020774:	d0ed      	beq.n	8020752 <_dtoa_r+0xaa2>
 8020776:	f10a 0301 	add.w	r3, sl, #1
 802077a:	f88b 3000 	strb.w	r3, [fp]
 802077e:	e73c      	b.n	80205fa <_dtoa_r+0x94a>
 8020780:	9b05      	ldr	r3, [sp, #20]
 8020782:	f809 ac01 	strb.w	sl, [r9, #-1]
 8020786:	4599      	cmp	r9, r3
 8020788:	d047      	beq.n	802081a <_dtoa_r+0xb6a>
 802078a:	ee18 1a10 	vmov	r1, s16
 802078e:	2300      	movs	r3, #0
 8020790:	220a      	movs	r2, #10
 8020792:	4620      	mov	r0, r4
 8020794:	f000 fb08 	bl	8020da8 <__multadd>
 8020798:	45b8      	cmp	r8, r7
 802079a:	ee08 0a10 	vmov	s16, r0
 802079e:	f04f 0300 	mov.w	r3, #0
 80207a2:	f04f 020a 	mov.w	r2, #10
 80207a6:	4641      	mov	r1, r8
 80207a8:	4620      	mov	r0, r4
 80207aa:	d106      	bne.n	80207ba <_dtoa_r+0xb0a>
 80207ac:	f000 fafc 	bl	8020da8 <__multadd>
 80207b0:	4680      	mov	r8, r0
 80207b2:	4607      	mov	r7, r0
 80207b4:	f109 0901 	add.w	r9, r9, #1
 80207b8:	e772      	b.n	80206a0 <_dtoa_r+0x9f0>
 80207ba:	f000 faf5 	bl	8020da8 <__multadd>
 80207be:	4639      	mov	r1, r7
 80207c0:	4680      	mov	r8, r0
 80207c2:	2300      	movs	r3, #0
 80207c4:	220a      	movs	r2, #10
 80207c6:	4620      	mov	r0, r4
 80207c8:	f000 faee 	bl	8020da8 <__multadd>
 80207cc:	4607      	mov	r7, r0
 80207ce:	e7f1      	b.n	80207b4 <_dtoa_r+0xb04>
 80207d0:	9b03      	ldr	r3, [sp, #12]
 80207d2:	9302      	str	r3, [sp, #8]
 80207d4:	9d01      	ldr	r5, [sp, #4]
 80207d6:	ee18 0a10 	vmov	r0, s16
 80207da:	4631      	mov	r1, r6
 80207dc:	f7ff f9da 	bl	801fb94 <quorem>
 80207e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80207e4:	9b01      	ldr	r3, [sp, #4]
 80207e6:	f805 ab01 	strb.w	sl, [r5], #1
 80207ea:	1aea      	subs	r2, r5, r3
 80207ec:	9b02      	ldr	r3, [sp, #8]
 80207ee:	4293      	cmp	r3, r2
 80207f0:	dd09      	ble.n	8020806 <_dtoa_r+0xb56>
 80207f2:	ee18 1a10 	vmov	r1, s16
 80207f6:	2300      	movs	r3, #0
 80207f8:	220a      	movs	r2, #10
 80207fa:	4620      	mov	r0, r4
 80207fc:	f000 fad4 	bl	8020da8 <__multadd>
 8020800:	ee08 0a10 	vmov	s16, r0
 8020804:	e7e7      	b.n	80207d6 <_dtoa_r+0xb26>
 8020806:	9b02      	ldr	r3, [sp, #8]
 8020808:	2b00      	cmp	r3, #0
 802080a:	bfc8      	it	gt
 802080c:	461d      	movgt	r5, r3
 802080e:	9b01      	ldr	r3, [sp, #4]
 8020810:	bfd8      	it	le
 8020812:	2501      	movle	r5, #1
 8020814:	441d      	add	r5, r3
 8020816:	f04f 0800 	mov.w	r8, #0
 802081a:	ee18 1a10 	vmov	r1, s16
 802081e:	2201      	movs	r2, #1
 8020820:	4620      	mov	r0, r4
 8020822:	f000 fc71 	bl	8021108 <__lshift>
 8020826:	4631      	mov	r1, r6
 8020828:	ee08 0a10 	vmov	s16, r0
 802082c:	f000 fcdc 	bl	80211e8 <__mcmp>
 8020830:	2800      	cmp	r0, #0
 8020832:	dc91      	bgt.n	8020758 <_dtoa_r+0xaa8>
 8020834:	d102      	bne.n	802083c <_dtoa_r+0xb8c>
 8020836:	f01a 0f01 	tst.w	sl, #1
 802083a:	d18d      	bne.n	8020758 <_dtoa_r+0xaa8>
 802083c:	462b      	mov	r3, r5
 802083e:	461d      	mov	r5, r3
 8020840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020844:	2a30      	cmp	r2, #48	; 0x30
 8020846:	d0fa      	beq.n	802083e <_dtoa_r+0xb8e>
 8020848:	e6d7      	b.n	80205fa <_dtoa_r+0x94a>
 802084a:	9a01      	ldr	r2, [sp, #4]
 802084c:	429a      	cmp	r2, r3
 802084e:	d184      	bne.n	802075a <_dtoa_r+0xaaa>
 8020850:	9b00      	ldr	r3, [sp, #0]
 8020852:	3301      	adds	r3, #1
 8020854:	9300      	str	r3, [sp, #0]
 8020856:	2331      	movs	r3, #49	; 0x31
 8020858:	7013      	strb	r3, [r2, #0]
 802085a:	e6ce      	b.n	80205fa <_dtoa_r+0x94a>
 802085c:	4b09      	ldr	r3, [pc, #36]	; (8020884 <_dtoa_r+0xbd4>)
 802085e:	f7ff ba95 	b.w	801fd8c <_dtoa_r+0xdc>
 8020862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020864:	2b00      	cmp	r3, #0
 8020866:	f47f aa6e 	bne.w	801fd46 <_dtoa_r+0x96>
 802086a:	4b07      	ldr	r3, [pc, #28]	; (8020888 <_dtoa_r+0xbd8>)
 802086c:	f7ff ba8e 	b.w	801fd8c <_dtoa_r+0xdc>
 8020870:	9b02      	ldr	r3, [sp, #8]
 8020872:	2b00      	cmp	r3, #0
 8020874:	dcae      	bgt.n	80207d4 <_dtoa_r+0xb24>
 8020876:	9b06      	ldr	r3, [sp, #24]
 8020878:	2b02      	cmp	r3, #2
 802087a:	f73f aea8 	bgt.w	80205ce <_dtoa_r+0x91e>
 802087e:	e7a9      	b.n	80207d4 <_dtoa_r+0xb24>
 8020880:	080223db 	.word	0x080223db
 8020884:	08022338 	.word	0x08022338
 8020888:	0802235c 	.word	0x0802235c

0802088c <__sflush_r>:
 802088c:	898a      	ldrh	r2, [r1, #12]
 802088e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020892:	4605      	mov	r5, r0
 8020894:	0710      	lsls	r0, r2, #28
 8020896:	460c      	mov	r4, r1
 8020898:	d458      	bmi.n	802094c <__sflush_r+0xc0>
 802089a:	684b      	ldr	r3, [r1, #4]
 802089c:	2b00      	cmp	r3, #0
 802089e:	dc05      	bgt.n	80208ac <__sflush_r+0x20>
 80208a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	dc02      	bgt.n	80208ac <__sflush_r+0x20>
 80208a6:	2000      	movs	r0, #0
 80208a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80208ae:	2e00      	cmp	r6, #0
 80208b0:	d0f9      	beq.n	80208a6 <__sflush_r+0x1a>
 80208b2:	2300      	movs	r3, #0
 80208b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80208b8:	682f      	ldr	r7, [r5, #0]
 80208ba:	602b      	str	r3, [r5, #0]
 80208bc:	d032      	beq.n	8020924 <__sflush_r+0x98>
 80208be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80208c0:	89a3      	ldrh	r3, [r4, #12]
 80208c2:	075a      	lsls	r2, r3, #29
 80208c4:	d505      	bpl.n	80208d2 <__sflush_r+0x46>
 80208c6:	6863      	ldr	r3, [r4, #4]
 80208c8:	1ac0      	subs	r0, r0, r3
 80208ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80208cc:	b10b      	cbz	r3, 80208d2 <__sflush_r+0x46>
 80208ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80208d0:	1ac0      	subs	r0, r0, r3
 80208d2:	2300      	movs	r3, #0
 80208d4:	4602      	mov	r2, r0
 80208d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80208d8:	6a21      	ldr	r1, [r4, #32]
 80208da:	4628      	mov	r0, r5
 80208dc:	47b0      	blx	r6
 80208de:	1c43      	adds	r3, r0, #1
 80208e0:	89a3      	ldrh	r3, [r4, #12]
 80208e2:	d106      	bne.n	80208f2 <__sflush_r+0x66>
 80208e4:	6829      	ldr	r1, [r5, #0]
 80208e6:	291d      	cmp	r1, #29
 80208e8:	d82c      	bhi.n	8020944 <__sflush_r+0xb8>
 80208ea:	4a2a      	ldr	r2, [pc, #168]	; (8020994 <__sflush_r+0x108>)
 80208ec:	40ca      	lsrs	r2, r1
 80208ee:	07d6      	lsls	r6, r2, #31
 80208f0:	d528      	bpl.n	8020944 <__sflush_r+0xb8>
 80208f2:	2200      	movs	r2, #0
 80208f4:	6062      	str	r2, [r4, #4]
 80208f6:	04d9      	lsls	r1, r3, #19
 80208f8:	6922      	ldr	r2, [r4, #16]
 80208fa:	6022      	str	r2, [r4, #0]
 80208fc:	d504      	bpl.n	8020908 <__sflush_r+0x7c>
 80208fe:	1c42      	adds	r2, r0, #1
 8020900:	d101      	bne.n	8020906 <__sflush_r+0x7a>
 8020902:	682b      	ldr	r3, [r5, #0]
 8020904:	b903      	cbnz	r3, 8020908 <__sflush_r+0x7c>
 8020906:	6560      	str	r0, [r4, #84]	; 0x54
 8020908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802090a:	602f      	str	r7, [r5, #0]
 802090c:	2900      	cmp	r1, #0
 802090e:	d0ca      	beq.n	80208a6 <__sflush_r+0x1a>
 8020910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020914:	4299      	cmp	r1, r3
 8020916:	d002      	beq.n	802091e <__sflush_r+0x92>
 8020918:	4628      	mov	r0, r5
 802091a:	f000 fd7d 	bl	8021418 <_free_r>
 802091e:	2000      	movs	r0, #0
 8020920:	6360      	str	r0, [r4, #52]	; 0x34
 8020922:	e7c1      	b.n	80208a8 <__sflush_r+0x1c>
 8020924:	6a21      	ldr	r1, [r4, #32]
 8020926:	2301      	movs	r3, #1
 8020928:	4628      	mov	r0, r5
 802092a:	47b0      	blx	r6
 802092c:	1c41      	adds	r1, r0, #1
 802092e:	d1c7      	bne.n	80208c0 <__sflush_r+0x34>
 8020930:	682b      	ldr	r3, [r5, #0]
 8020932:	2b00      	cmp	r3, #0
 8020934:	d0c4      	beq.n	80208c0 <__sflush_r+0x34>
 8020936:	2b1d      	cmp	r3, #29
 8020938:	d001      	beq.n	802093e <__sflush_r+0xb2>
 802093a:	2b16      	cmp	r3, #22
 802093c:	d101      	bne.n	8020942 <__sflush_r+0xb6>
 802093e:	602f      	str	r7, [r5, #0]
 8020940:	e7b1      	b.n	80208a6 <__sflush_r+0x1a>
 8020942:	89a3      	ldrh	r3, [r4, #12]
 8020944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020948:	81a3      	strh	r3, [r4, #12]
 802094a:	e7ad      	b.n	80208a8 <__sflush_r+0x1c>
 802094c:	690f      	ldr	r7, [r1, #16]
 802094e:	2f00      	cmp	r7, #0
 8020950:	d0a9      	beq.n	80208a6 <__sflush_r+0x1a>
 8020952:	0793      	lsls	r3, r2, #30
 8020954:	680e      	ldr	r6, [r1, #0]
 8020956:	bf08      	it	eq
 8020958:	694b      	ldreq	r3, [r1, #20]
 802095a:	600f      	str	r7, [r1, #0]
 802095c:	bf18      	it	ne
 802095e:	2300      	movne	r3, #0
 8020960:	eba6 0807 	sub.w	r8, r6, r7
 8020964:	608b      	str	r3, [r1, #8]
 8020966:	f1b8 0f00 	cmp.w	r8, #0
 802096a:	dd9c      	ble.n	80208a6 <__sflush_r+0x1a>
 802096c:	6a21      	ldr	r1, [r4, #32]
 802096e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020970:	4643      	mov	r3, r8
 8020972:	463a      	mov	r2, r7
 8020974:	4628      	mov	r0, r5
 8020976:	47b0      	blx	r6
 8020978:	2800      	cmp	r0, #0
 802097a:	dc06      	bgt.n	802098a <__sflush_r+0xfe>
 802097c:	89a3      	ldrh	r3, [r4, #12]
 802097e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020982:	81a3      	strh	r3, [r4, #12]
 8020984:	f04f 30ff 	mov.w	r0, #4294967295
 8020988:	e78e      	b.n	80208a8 <__sflush_r+0x1c>
 802098a:	4407      	add	r7, r0
 802098c:	eba8 0800 	sub.w	r8, r8, r0
 8020990:	e7e9      	b.n	8020966 <__sflush_r+0xda>
 8020992:	bf00      	nop
 8020994:	20400001 	.word	0x20400001

08020998 <_fflush_r>:
 8020998:	b538      	push	{r3, r4, r5, lr}
 802099a:	690b      	ldr	r3, [r1, #16]
 802099c:	4605      	mov	r5, r0
 802099e:	460c      	mov	r4, r1
 80209a0:	b913      	cbnz	r3, 80209a8 <_fflush_r+0x10>
 80209a2:	2500      	movs	r5, #0
 80209a4:	4628      	mov	r0, r5
 80209a6:	bd38      	pop	{r3, r4, r5, pc}
 80209a8:	b118      	cbz	r0, 80209b2 <_fflush_r+0x1a>
 80209aa:	6983      	ldr	r3, [r0, #24]
 80209ac:	b90b      	cbnz	r3, 80209b2 <_fflush_r+0x1a>
 80209ae:	f000 f887 	bl	8020ac0 <__sinit>
 80209b2:	4b14      	ldr	r3, [pc, #80]	; (8020a04 <_fflush_r+0x6c>)
 80209b4:	429c      	cmp	r4, r3
 80209b6:	d11b      	bne.n	80209f0 <_fflush_r+0x58>
 80209b8:	686c      	ldr	r4, [r5, #4]
 80209ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80209be:	2b00      	cmp	r3, #0
 80209c0:	d0ef      	beq.n	80209a2 <_fflush_r+0xa>
 80209c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80209c4:	07d0      	lsls	r0, r2, #31
 80209c6:	d404      	bmi.n	80209d2 <_fflush_r+0x3a>
 80209c8:	0599      	lsls	r1, r3, #22
 80209ca:	d402      	bmi.n	80209d2 <_fflush_r+0x3a>
 80209cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209ce:	f000 f91a 	bl	8020c06 <__retarget_lock_acquire_recursive>
 80209d2:	4628      	mov	r0, r5
 80209d4:	4621      	mov	r1, r4
 80209d6:	f7ff ff59 	bl	802088c <__sflush_r>
 80209da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80209dc:	07da      	lsls	r2, r3, #31
 80209de:	4605      	mov	r5, r0
 80209e0:	d4e0      	bmi.n	80209a4 <_fflush_r+0xc>
 80209e2:	89a3      	ldrh	r3, [r4, #12]
 80209e4:	059b      	lsls	r3, r3, #22
 80209e6:	d4dd      	bmi.n	80209a4 <_fflush_r+0xc>
 80209e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209ea:	f000 f90d 	bl	8020c08 <__retarget_lock_release_recursive>
 80209ee:	e7d9      	b.n	80209a4 <_fflush_r+0xc>
 80209f0:	4b05      	ldr	r3, [pc, #20]	; (8020a08 <_fflush_r+0x70>)
 80209f2:	429c      	cmp	r4, r3
 80209f4:	d101      	bne.n	80209fa <_fflush_r+0x62>
 80209f6:	68ac      	ldr	r4, [r5, #8]
 80209f8:	e7df      	b.n	80209ba <_fflush_r+0x22>
 80209fa:	4b04      	ldr	r3, [pc, #16]	; (8020a0c <_fflush_r+0x74>)
 80209fc:	429c      	cmp	r4, r3
 80209fe:	bf08      	it	eq
 8020a00:	68ec      	ldreq	r4, [r5, #12]
 8020a02:	e7da      	b.n	80209ba <_fflush_r+0x22>
 8020a04:	0802240c 	.word	0x0802240c
 8020a08:	0802242c 	.word	0x0802242c
 8020a0c:	080223ec 	.word	0x080223ec

08020a10 <std>:
 8020a10:	2300      	movs	r3, #0
 8020a12:	b510      	push	{r4, lr}
 8020a14:	4604      	mov	r4, r0
 8020a16:	e9c0 3300 	strd	r3, r3, [r0]
 8020a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020a1e:	6083      	str	r3, [r0, #8]
 8020a20:	8181      	strh	r1, [r0, #12]
 8020a22:	6643      	str	r3, [r0, #100]	; 0x64
 8020a24:	81c2      	strh	r2, [r0, #14]
 8020a26:	6183      	str	r3, [r0, #24]
 8020a28:	4619      	mov	r1, r3
 8020a2a:	2208      	movs	r2, #8
 8020a2c:	305c      	adds	r0, #92	; 0x5c
 8020a2e:	f7fe fadb 	bl	801efe8 <memset>
 8020a32:	4b05      	ldr	r3, [pc, #20]	; (8020a48 <std+0x38>)
 8020a34:	6263      	str	r3, [r4, #36]	; 0x24
 8020a36:	4b05      	ldr	r3, [pc, #20]	; (8020a4c <std+0x3c>)
 8020a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8020a3a:	4b05      	ldr	r3, [pc, #20]	; (8020a50 <std+0x40>)
 8020a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020a3e:	4b05      	ldr	r3, [pc, #20]	; (8020a54 <std+0x44>)
 8020a40:	6224      	str	r4, [r4, #32]
 8020a42:	6323      	str	r3, [r4, #48]	; 0x30
 8020a44:	bd10      	pop	{r4, pc}
 8020a46:	bf00      	nop
 8020a48:	0802193d 	.word	0x0802193d
 8020a4c:	0802195f 	.word	0x0802195f
 8020a50:	08021997 	.word	0x08021997
 8020a54:	080219bb 	.word	0x080219bb

08020a58 <_cleanup_r>:
 8020a58:	4901      	ldr	r1, [pc, #4]	; (8020a60 <_cleanup_r+0x8>)
 8020a5a:	f000 b8af 	b.w	8020bbc <_fwalk_reent>
 8020a5e:	bf00      	nop
 8020a60:	08020999 	.word	0x08020999

08020a64 <__sfmoreglue>:
 8020a64:	b570      	push	{r4, r5, r6, lr}
 8020a66:	2268      	movs	r2, #104	; 0x68
 8020a68:	1e4d      	subs	r5, r1, #1
 8020a6a:	4355      	muls	r5, r2
 8020a6c:	460e      	mov	r6, r1
 8020a6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020a72:	f000 fd3d 	bl	80214f0 <_malloc_r>
 8020a76:	4604      	mov	r4, r0
 8020a78:	b140      	cbz	r0, 8020a8c <__sfmoreglue+0x28>
 8020a7a:	2100      	movs	r1, #0
 8020a7c:	e9c0 1600 	strd	r1, r6, [r0]
 8020a80:	300c      	adds	r0, #12
 8020a82:	60a0      	str	r0, [r4, #8]
 8020a84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020a88:	f7fe faae 	bl	801efe8 <memset>
 8020a8c:	4620      	mov	r0, r4
 8020a8e:	bd70      	pop	{r4, r5, r6, pc}

08020a90 <__sfp_lock_acquire>:
 8020a90:	4801      	ldr	r0, [pc, #4]	; (8020a98 <__sfp_lock_acquire+0x8>)
 8020a92:	f000 b8b8 	b.w	8020c06 <__retarget_lock_acquire_recursive>
 8020a96:	bf00      	nop
 8020a98:	2000df99 	.word	0x2000df99

08020a9c <__sfp_lock_release>:
 8020a9c:	4801      	ldr	r0, [pc, #4]	; (8020aa4 <__sfp_lock_release+0x8>)
 8020a9e:	f000 b8b3 	b.w	8020c08 <__retarget_lock_release_recursive>
 8020aa2:	bf00      	nop
 8020aa4:	2000df99 	.word	0x2000df99

08020aa8 <__sinit_lock_acquire>:
 8020aa8:	4801      	ldr	r0, [pc, #4]	; (8020ab0 <__sinit_lock_acquire+0x8>)
 8020aaa:	f000 b8ac 	b.w	8020c06 <__retarget_lock_acquire_recursive>
 8020aae:	bf00      	nop
 8020ab0:	2000df9a 	.word	0x2000df9a

08020ab4 <__sinit_lock_release>:
 8020ab4:	4801      	ldr	r0, [pc, #4]	; (8020abc <__sinit_lock_release+0x8>)
 8020ab6:	f000 b8a7 	b.w	8020c08 <__retarget_lock_release_recursive>
 8020aba:	bf00      	nop
 8020abc:	2000df9a 	.word	0x2000df9a

08020ac0 <__sinit>:
 8020ac0:	b510      	push	{r4, lr}
 8020ac2:	4604      	mov	r4, r0
 8020ac4:	f7ff fff0 	bl	8020aa8 <__sinit_lock_acquire>
 8020ac8:	69a3      	ldr	r3, [r4, #24]
 8020aca:	b11b      	cbz	r3, 8020ad4 <__sinit+0x14>
 8020acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ad0:	f7ff bff0 	b.w	8020ab4 <__sinit_lock_release>
 8020ad4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020ad8:	6523      	str	r3, [r4, #80]	; 0x50
 8020ada:	4b13      	ldr	r3, [pc, #76]	; (8020b28 <__sinit+0x68>)
 8020adc:	4a13      	ldr	r2, [pc, #76]	; (8020b2c <__sinit+0x6c>)
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	62a2      	str	r2, [r4, #40]	; 0x28
 8020ae2:	42a3      	cmp	r3, r4
 8020ae4:	bf04      	itt	eq
 8020ae6:	2301      	moveq	r3, #1
 8020ae8:	61a3      	streq	r3, [r4, #24]
 8020aea:	4620      	mov	r0, r4
 8020aec:	f000 f820 	bl	8020b30 <__sfp>
 8020af0:	6060      	str	r0, [r4, #4]
 8020af2:	4620      	mov	r0, r4
 8020af4:	f000 f81c 	bl	8020b30 <__sfp>
 8020af8:	60a0      	str	r0, [r4, #8]
 8020afa:	4620      	mov	r0, r4
 8020afc:	f000 f818 	bl	8020b30 <__sfp>
 8020b00:	2200      	movs	r2, #0
 8020b02:	60e0      	str	r0, [r4, #12]
 8020b04:	2104      	movs	r1, #4
 8020b06:	6860      	ldr	r0, [r4, #4]
 8020b08:	f7ff ff82 	bl	8020a10 <std>
 8020b0c:	68a0      	ldr	r0, [r4, #8]
 8020b0e:	2201      	movs	r2, #1
 8020b10:	2109      	movs	r1, #9
 8020b12:	f7ff ff7d 	bl	8020a10 <std>
 8020b16:	68e0      	ldr	r0, [r4, #12]
 8020b18:	2202      	movs	r2, #2
 8020b1a:	2112      	movs	r1, #18
 8020b1c:	f7ff ff78 	bl	8020a10 <std>
 8020b20:	2301      	movs	r3, #1
 8020b22:	61a3      	str	r3, [r4, #24]
 8020b24:	e7d2      	b.n	8020acc <__sinit+0xc>
 8020b26:	bf00      	nop
 8020b28:	08022324 	.word	0x08022324
 8020b2c:	08020a59 	.word	0x08020a59

08020b30 <__sfp>:
 8020b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b32:	4607      	mov	r7, r0
 8020b34:	f7ff ffac 	bl	8020a90 <__sfp_lock_acquire>
 8020b38:	4b1e      	ldr	r3, [pc, #120]	; (8020bb4 <__sfp+0x84>)
 8020b3a:	681e      	ldr	r6, [r3, #0]
 8020b3c:	69b3      	ldr	r3, [r6, #24]
 8020b3e:	b913      	cbnz	r3, 8020b46 <__sfp+0x16>
 8020b40:	4630      	mov	r0, r6
 8020b42:	f7ff ffbd 	bl	8020ac0 <__sinit>
 8020b46:	3648      	adds	r6, #72	; 0x48
 8020b48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020b4c:	3b01      	subs	r3, #1
 8020b4e:	d503      	bpl.n	8020b58 <__sfp+0x28>
 8020b50:	6833      	ldr	r3, [r6, #0]
 8020b52:	b30b      	cbz	r3, 8020b98 <__sfp+0x68>
 8020b54:	6836      	ldr	r6, [r6, #0]
 8020b56:	e7f7      	b.n	8020b48 <__sfp+0x18>
 8020b58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020b5c:	b9d5      	cbnz	r5, 8020b94 <__sfp+0x64>
 8020b5e:	4b16      	ldr	r3, [pc, #88]	; (8020bb8 <__sfp+0x88>)
 8020b60:	60e3      	str	r3, [r4, #12]
 8020b62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020b66:	6665      	str	r5, [r4, #100]	; 0x64
 8020b68:	f000 f84c 	bl	8020c04 <__retarget_lock_init_recursive>
 8020b6c:	f7ff ff96 	bl	8020a9c <__sfp_lock_release>
 8020b70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020b74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020b78:	6025      	str	r5, [r4, #0]
 8020b7a:	61a5      	str	r5, [r4, #24]
 8020b7c:	2208      	movs	r2, #8
 8020b7e:	4629      	mov	r1, r5
 8020b80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020b84:	f7fe fa30 	bl	801efe8 <memset>
 8020b88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020b8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020b90:	4620      	mov	r0, r4
 8020b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b94:	3468      	adds	r4, #104	; 0x68
 8020b96:	e7d9      	b.n	8020b4c <__sfp+0x1c>
 8020b98:	2104      	movs	r1, #4
 8020b9a:	4638      	mov	r0, r7
 8020b9c:	f7ff ff62 	bl	8020a64 <__sfmoreglue>
 8020ba0:	4604      	mov	r4, r0
 8020ba2:	6030      	str	r0, [r6, #0]
 8020ba4:	2800      	cmp	r0, #0
 8020ba6:	d1d5      	bne.n	8020b54 <__sfp+0x24>
 8020ba8:	f7ff ff78 	bl	8020a9c <__sfp_lock_release>
 8020bac:	230c      	movs	r3, #12
 8020bae:	603b      	str	r3, [r7, #0]
 8020bb0:	e7ee      	b.n	8020b90 <__sfp+0x60>
 8020bb2:	bf00      	nop
 8020bb4:	08022324 	.word	0x08022324
 8020bb8:	ffff0001 	.word	0xffff0001

08020bbc <_fwalk_reent>:
 8020bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020bc0:	4606      	mov	r6, r0
 8020bc2:	4688      	mov	r8, r1
 8020bc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020bc8:	2700      	movs	r7, #0
 8020bca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020bce:	f1b9 0901 	subs.w	r9, r9, #1
 8020bd2:	d505      	bpl.n	8020be0 <_fwalk_reent+0x24>
 8020bd4:	6824      	ldr	r4, [r4, #0]
 8020bd6:	2c00      	cmp	r4, #0
 8020bd8:	d1f7      	bne.n	8020bca <_fwalk_reent+0xe>
 8020bda:	4638      	mov	r0, r7
 8020bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020be0:	89ab      	ldrh	r3, [r5, #12]
 8020be2:	2b01      	cmp	r3, #1
 8020be4:	d907      	bls.n	8020bf6 <_fwalk_reent+0x3a>
 8020be6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020bea:	3301      	adds	r3, #1
 8020bec:	d003      	beq.n	8020bf6 <_fwalk_reent+0x3a>
 8020bee:	4629      	mov	r1, r5
 8020bf0:	4630      	mov	r0, r6
 8020bf2:	47c0      	blx	r8
 8020bf4:	4307      	orrs	r7, r0
 8020bf6:	3568      	adds	r5, #104	; 0x68
 8020bf8:	e7e9      	b.n	8020bce <_fwalk_reent+0x12>
	...

08020bfc <_localeconv_r>:
 8020bfc:	4800      	ldr	r0, [pc, #0]	; (8020c00 <_localeconv_r+0x4>)
 8020bfe:	4770      	bx	lr
 8020c00:	20000180 	.word	0x20000180

08020c04 <__retarget_lock_init_recursive>:
 8020c04:	4770      	bx	lr

08020c06 <__retarget_lock_acquire_recursive>:
 8020c06:	4770      	bx	lr

08020c08 <__retarget_lock_release_recursive>:
 8020c08:	4770      	bx	lr

08020c0a <__swhatbuf_r>:
 8020c0a:	b570      	push	{r4, r5, r6, lr}
 8020c0c:	460e      	mov	r6, r1
 8020c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c12:	2900      	cmp	r1, #0
 8020c14:	b096      	sub	sp, #88	; 0x58
 8020c16:	4614      	mov	r4, r2
 8020c18:	461d      	mov	r5, r3
 8020c1a:	da08      	bge.n	8020c2e <__swhatbuf_r+0x24>
 8020c1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020c20:	2200      	movs	r2, #0
 8020c22:	602a      	str	r2, [r5, #0]
 8020c24:	061a      	lsls	r2, r3, #24
 8020c26:	d410      	bmi.n	8020c4a <__swhatbuf_r+0x40>
 8020c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020c2c:	e00e      	b.n	8020c4c <__swhatbuf_r+0x42>
 8020c2e:	466a      	mov	r2, sp
 8020c30:	f000 ff1a 	bl	8021a68 <_fstat_r>
 8020c34:	2800      	cmp	r0, #0
 8020c36:	dbf1      	blt.n	8020c1c <__swhatbuf_r+0x12>
 8020c38:	9a01      	ldr	r2, [sp, #4]
 8020c3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020c3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020c42:	425a      	negs	r2, r3
 8020c44:	415a      	adcs	r2, r3
 8020c46:	602a      	str	r2, [r5, #0]
 8020c48:	e7ee      	b.n	8020c28 <__swhatbuf_r+0x1e>
 8020c4a:	2340      	movs	r3, #64	; 0x40
 8020c4c:	2000      	movs	r0, #0
 8020c4e:	6023      	str	r3, [r4, #0]
 8020c50:	b016      	add	sp, #88	; 0x58
 8020c52:	bd70      	pop	{r4, r5, r6, pc}

08020c54 <__smakebuf_r>:
 8020c54:	898b      	ldrh	r3, [r1, #12]
 8020c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020c58:	079d      	lsls	r5, r3, #30
 8020c5a:	4606      	mov	r6, r0
 8020c5c:	460c      	mov	r4, r1
 8020c5e:	d507      	bpl.n	8020c70 <__smakebuf_r+0x1c>
 8020c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020c64:	6023      	str	r3, [r4, #0]
 8020c66:	6123      	str	r3, [r4, #16]
 8020c68:	2301      	movs	r3, #1
 8020c6a:	6163      	str	r3, [r4, #20]
 8020c6c:	b002      	add	sp, #8
 8020c6e:	bd70      	pop	{r4, r5, r6, pc}
 8020c70:	ab01      	add	r3, sp, #4
 8020c72:	466a      	mov	r2, sp
 8020c74:	f7ff ffc9 	bl	8020c0a <__swhatbuf_r>
 8020c78:	9900      	ldr	r1, [sp, #0]
 8020c7a:	4605      	mov	r5, r0
 8020c7c:	4630      	mov	r0, r6
 8020c7e:	f000 fc37 	bl	80214f0 <_malloc_r>
 8020c82:	b948      	cbnz	r0, 8020c98 <__smakebuf_r+0x44>
 8020c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c88:	059a      	lsls	r2, r3, #22
 8020c8a:	d4ef      	bmi.n	8020c6c <__smakebuf_r+0x18>
 8020c8c:	f023 0303 	bic.w	r3, r3, #3
 8020c90:	f043 0302 	orr.w	r3, r3, #2
 8020c94:	81a3      	strh	r3, [r4, #12]
 8020c96:	e7e3      	b.n	8020c60 <__smakebuf_r+0xc>
 8020c98:	4b0d      	ldr	r3, [pc, #52]	; (8020cd0 <__smakebuf_r+0x7c>)
 8020c9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8020c9c:	89a3      	ldrh	r3, [r4, #12]
 8020c9e:	6020      	str	r0, [r4, #0]
 8020ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ca4:	81a3      	strh	r3, [r4, #12]
 8020ca6:	9b00      	ldr	r3, [sp, #0]
 8020ca8:	6163      	str	r3, [r4, #20]
 8020caa:	9b01      	ldr	r3, [sp, #4]
 8020cac:	6120      	str	r0, [r4, #16]
 8020cae:	b15b      	cbz	r3, 8020cc8 <__smakebuf_r+0x74>
 8020cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020cb4:	4630      	mov	r0, r6
 8020cb6:	f000 fee9 	bl	8021a8c <_isatty_r>
 8020cba:	b128      	cbz	r0, 8020cc8 <__smakebuf_r+0x74>
 8020cbc:	89a3      	ldrh	r3, [r4, #12]
 8020cbe:	f023 0303 	bic.w	r3, r3, #3
 8020cc2:	f043 0301 	orr.w	r3, r3, #1
 8020cc6:	81a3      	strh	r3, [r4, #12]
 8020cc8:	89a0      	ldrh	r0, [r4, #12]
 8020cca:	4305      	orrs	r5, r0
 8020ccc:	81a5      	strh	r5, [r4, #12]
 8020cce:	e7cd      	b.n	8020c6c <__smakebuf_r+0x18>
 8020cd0:	08020a59 	.word	0x08020a59

08020cd4 <malloc>:
 8020cd4:	4b02      	ldr	r3, [pc, #8]	; (8020ce0 <malloc+0xc>)
 8020cd6:	4601      	mov	r1, r0
 8020cd8:	6818      	ldr	r0, [r3, #0]
 8020cda:	f000 bc09 	b.w	80214f0 <_malloc_r>
 8020cde:	bf00      	nop
 8020ce0:	2000002c 	.word	0x2000002c

08020ce4 <_Balloc>:
 8020ce4:	b570      	push	{r4, r5, r6, lr}
 8020ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020ce8:	4604      	mov	r4, r0
 8020cea:	460d      	mov	r5, r1
 8020cec:	b976      	cbnz	r6, 8020d0c <_Balloc+0x28>
 8020cee:	2010      	movs	r0, #16
 8020cf0:	f7ff fff0 	bl	8020cd4 <malloc>
 8020cf4:	4602      	mov	r2, r0
 8020cf6:	6260      	str	r0, [r4, #36]	; 0x24
 8020cf8:	b920      	cbnz	r0, 8020d04 <_Balloc+0x20>
 8020cfa:	4b18      	ldr	r3, [pc, #96]	; (8020d5c <_Balloc+0x78>)
 8020cfc:	4818      	ldr	r0, [pc, #96]	; (8020d60 <_Balloc+0x7c>)
 8020cfe:	2166      	movs	r1, #102	; 0x66
 8020d00:	f000 fe72 	bl	80219e8 <__assert_func>
 8020d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020d08:	6006      	str	r6, [r0, #0]
 8020d0a:	60c6      	str	r6, [r0, #12]
 8020d0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020d0e:	68f3      	ldr	r3, [r6, #12]
 8020d10:	b183      	cbz	r3, 8020d34 <_Balloc+0x50>
 8020d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d14:	68db      	ldr	r3, [r3, #12]
 8020d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020d1a:	b9b8      	cbnz	r0, 8020d4c <_Balloc+0x68>
 8020d1c:	2101      	movs	r1, #1
 8020d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8020d22:	1d72      	adds	r2, r6, #5
 8020d24:	0092      	lsls	r2, r2, #2
 8020d26:	4620      	mov	r0, r4
 8020d28:	f000 fb60 	bl	80213ec <_calloc_r>
 8020d2c:	b160      	cbz	r0, 8020d48 <_Balloc+0x64>
 8020d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020d32:	e00e      	b.n	8020d52 <_Balloc+0x6e>
 8020d34:	2221      	movs	r2, #33	; 0x21
 8020d36:	2104      	movs	r1, #4
 8020d38:	4620      	mov	r0, r4
 8020d3a:	f000 fb57 	bl	80213ec <_calloc_r>
 8020d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d40:	60f0      	str	r0, [r6, #12]
 8020d42:	68db      	ldr	r3, [r3, #12]
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	d1e4      	bne.n	8020d12 <_Balloc+0x2e>
 8020d48:	2000      	movs	r0, #0
 8020d4a:	bd70      	pop	{r4, r5, r6, pc}
 8020d4c:	6802      	ldr	r2, [r0, #0]
 8020d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020d52:	2300      	movs	r3, #0
 8020d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020d58:	e7f7      	b.n	8020d4a <_Balloc+0x66>
 8020d5a:	bf00      	nop
 8020d5c:	08022369 	.word	0x08022369
 8020d60:	0802244c 	.word	0x0802244c

08020d64 <_Bfree>:
 8020d64:	b570      	push	{r4, r5, r6, lr}
 8020d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020d68:	4605      	mov	r5, r0
 8020d6a:	460c      	mov	r4, r1
 8020d6c:	b976      	cbnz	r6, 8020d8c <_Bfree+0x28>
 8020d6e:	2010      	movs	r0, #16
 8020d70:	f7ff ffb0 	bl	8020cd4 <malloc>
 8020d74:	4602      	mov	r2, r0
 8020d76:	6268      	str	r0, [r5, #36]	; 0x24
 8020d78:	b920      	cbnz	r0, 8020d84 <_Bfree+0x20>
 8020d7a:	4b09      	ldr	r3, [pc, #36]	; (8020da0 <_Bfree+0x3c>)
 8020d7c:	4809      	ldr	r0, [pc, #36]	; (8020da4 <_Bfree+0x40>)
 8020d7e:	218a      	movs	r1, #138	; 0x8a
 8020d80:	f000 fe32 	bl	80219e8 <__assert_func>
 8020d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020d88:	6006      	str	r6, [r0, #0]
 8020d8a:	60c6      	str	r6, [r0, #12]
 8020d8c:	b13c      	cbz	r4, 8020d9e <_Bfree+0x3a>
 8020d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020d90:	6862      	ldr	r2, [r4, #4]
 8020d92:	68db      	ldr	r3, [r3, #12]
 8020d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020d98:	6021      	str	r1, [r4, #0]
 8020d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020d9e:	bd70      	pop	{r4, r5, r6, pc}
 8020da0:	08022369 	.word	0x08022369
 8020da4:	0802244c 	.word	0x0802244c

08020da8 <__multadd>:
 8020da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dac:	690d      	ldr	r5, [r1, #16]
 8020dae:	4607      	mov	r7, r0
 8020db0:	460c      	mov	r4, r1
 8020db2:	461e      	mov	r6, r3
 8020db4:	f101 0c14 	add.w	ip, r1, #20
 8020db8:	2000      	movs	r0, #0
 8020dba:	f8dc 3000 	ldr.w	r3, [ip]
 8020dbe:	b299      	uxth	r1, r3
 8020dc0:	fb02 6101 	mla	r1, r2, r1, r6
 8020dc4:	0c1e      	lsrs	r6, r3, #16
 8020dc6:	0c0b      	lsrs	r3, r1, #16
 8020dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8020dcc:	b289      	uxth	r1, r1
 8020dce:	3001      	adds	r0, #1
 8020dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020dd4:	4285      	cmp	r5, r0
 8020dd6:	f84c 1b04 	str.w	r1, [ip], #4
 8020dda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020dde:	dcec      	bgt.n	8020dba <__multadd+0x12>
 8020de0:	b30e      	cbz	r6, 8020e26 <__multadd+0x7e>
 8020de2:	68a3      	ldr	r3, [r4, #8]
 8020de4:	42ab      	cmp	r3, r5
 8020de6:	dc19      	bgt.n	8020e1c <__multadd+0x74>
 8020de8:	6861      	ldr	r1, [r4, #4]
 8020dea:	4638      	mov	r0, r7
 8020dec:	3101      	adds	r1, #1
 8020dee:	f7ff ff79 	bl	8020ce4 <_Balloc>
 8020df2:	4680      	mov	r8, r0
 8020df4:	b928      	cbnz	r0, 8020e02 <__multadd+0x5a>
 8020df6:	4602      	mov	r2, r0
 8020df8:	4b0c      	ldr	r3, [pc, #48]	; (8020e2c <__multadd+0x84>)
 8020dfa:	480d      	ldr	r0, [pc, #52]	; (8020e30 <__multadd+0x88>)
 8020dfc:	21b5      	movs	r1, #181	; 0xb5
 8020dfe:	f000 fdf3 	bl	80219e8 <__assert_func>
 8020e02:	6922      	ldr	r2, [r4, #16]
 8020e04:	3202      	adds	r2, #2
 8020e06:	f104 010c 	add.w	r1, r4, #12
 8020e0a:	0092      	lsls	r2, r2, #2
 8020e0c:	300c      	adds	r0, #12
 8020e0e:	f7fe f8dd 	bl	801efcc <memcpy>
 8020e12:	4621      	mov	r1, r4
 8020e14:	4638      	mov	r0, r7
 8020e16:	f7ff ffa5 	bl	8020d64 <_Bfree>
 8020e1a:	4644      	mov	r4, r8
 8020e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020e20:	3501      	adds	r5, #1
 8020e22:	615e      	str	r6, [r3, #20]
 8020e24:	6125      	str	r5, [r4, #16]
 8020e26:	4620      	mov	r0, r4
 8020e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e2c:	080223db 	.word	0x080223db
 8020e30:	0802244c 	.word	0x0802244c

08020e34 <__hi0bits>:
 8020e34:	0c03      	lsrs	r3, r0, #16
 8020e36:	041b      	lsls	r3, r3, #16
 8020e38:	b9d3      	cbnz	r3, 8020e70 <__hi0bits+0x3c>
 8020e3a:	0400      	lsls	r0, r0, #16
 8020e3c:	2310      	movs	r3, #16
 8020e3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020e42:	bf04      	itt	eq
 8020e44:	0200      	lsleq	r0, r0, #8
 8020e46:	3308      	addeq	r3, #8
 8020e48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020e4c:	bf04      	itt	eq
 8020e4e:	0100      	lsleq	r0, r0, #4
 8020e50:	3304      	addeq	r3, #4
 8020e52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020e56:	bf04      	itt	eq
 8020e58:	0080      	lsleq	r0, r0, #2
 8020e5a:	3302      	addeq	r3, #2
 8020e5c:	2800      	cmp	r0, #0
 8020e5e:	db05      	blt.n	8020e6c <__hi0bits+0x38>
 8020e60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020e64:	f103 0301 	add.w	r3, r3, #1
 8020e68:	bf08      	it	eq
 8020e6a:	2320      	moveq	r3, #32
 8020e6c:	4618      	mov	r0, r3
 8020e6e:	4770      	bx	lr
 8020e70:	2300      	movs	r3, #0
 8020e72:	e7e4      	b.n	8020e3e <__hi0bits+0xa>

08020e74 <__lo0bits>:
 8020e74:	6803      	ldr	r3, [r0, #0]
 8020e76:	f013 0207 	ands.w	r2, r3, #7
 8020e7a:	4601      	mov	r1, r0
 8020e7c:	d00b      	beq.n	8020e96 <__lo0bits+0x22>
 8020e7e:	07da      	lsls	r2, r3, #31
 8020e80:	d423      	bmi.n	8020eca <__lo0bits+0x56>
 8020e82:	0798      	lsls	r0, r3, #30
 8020e84:	bf49      	itett	mi
 8020e86:	085b      	lsrmi	r3, r3, #1
 8020e88:	089b      	lsrpl	r3, r3, #2
 8020e8a:	2001      	movmi	r0, #1
 8020e8c:	600b      	strmi	r3, [r1, #0]
 8020e8e:	bf5c      	itt	pl
 8020e90:	600b      	strpl	r3, [r1, #0]
 8020e92:	2002      	movpl	r0, #2
 8020e94:	4770      	bx	lr
 8020e96:	b298      	uxth	r0, r3
 8020e98:	b9a8      	cbnz	r0, 8020ec6 <__lo0bits+0x52>
 8020e9a:	0c1b      	lsrs	r3, r3, #16
 8020e9c:	2010      	movs	r0, #16
 8020e9e:	b2da      	uxtb	r2, r3
 8020ea0:	b90a      	cbnz	r2, 8020ea6 <__lo0bits+0x32>
 8020ea2:	3008      	adds	r0, #8
 8020ea4:	0a1b      	lsrs	r3, r3, #8
 8020ea6:	071a      	lsls	r2, r3, #28
 8020ea8:	bf04      	itt	eq
 8020eaa:	091b      	lsreq	r3, r3, #4
 8020eac:	3004      	addeq	r0, #4
 8020eae:	079a      	lsls	r2, r3, #30
 8020eb0:	bf04      	itt	eq
 8020eb2:	089b      	lsreq	r3, r3, #2
 8020eb4:	3002      	addeq	r0, #2
 8020eb6:	07da      	lsls	r2, r3, #31
 8020eb8:	d403      	bmi.n	8020ec2 <__lo0bits+0x4e>
 8020eba:	085b      	lsrs	r3, r3, #1
 8020ebc:	f100 0001 	add.w	r0, r0, #1
 8020ec0:	d005      	beq.n	8020ece <__lo0bits+0x5a>
 8020ec2:	600b      	str	r3, [r1, #0]
 8020ec4:	4770      	bx	lr
 8020ec6:	4610      	mov	r0, r2
 8020ec8:	e7e9      	b.n	8020e9e <__lo0bits+0x2a>
 8020eca:	2000      	movs	r0, #0
 8020ecc:	4770      	bx	lr
 8020ece:	2020      	movs	r0, #32
 8020ed0:	4770      	bx	lr
	...

08020ed4 <__i2b>:
 8020ed4:	b510      	push	{r4, lr}
 8020ed6:	460c      	mov	r4, r1
 8020ed8:	2101      	movs	r1, #1
 8020eda:	f7ff ff03 	bl	8020ce4 <_Balloc>
 8020ede:	4602      	mov	r2, r0
 8020ee0:	b928      	cbnz	r0, 8020eee <__i2b+0x1a>
 8020ee2:	4b05      	ldr	r3, [pc, #20]	; (8020ef8 <__i2b+0x24>)
 8020ee4:	4805      	ldr	r0, [pc, #20]	; (8020efc <__i2b+0x28>)
 8020ee6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020eea:	f000 fd7d 	bl	80219e8 <__assert_func>
 8020eee:	2301      	movs	r3, #1
 8020ef0:	6144      	str	r4, [r0, #20]
 8020ef2:	6103      	str	r3, [r0, #16]
 8020ef4:	bd10      	pop	{r4, pc}
 8020ef6:	bf00      	nop
 8020ef8:	080223db 	.word	0x080223db
 8020efc:	0802244c 	.word	0x0802244c

08020f00 <__multiply>:
 8020f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f04:	4691      	mov	r9, r2
 8020f06:	690a      	ldr	r2, [r1, #16]
 8020f08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020f0c:	429a      	cmp	r2, r3
 8020f0e:	bfb8      	it	lt
 8020f10:	460b      	movlt	r3, r1
 8020f12:	460c      	mov	r4, r1
 8020f14:	bfbc      	itt	lt
 8020f16:	464c      	movlt	r4, r9
 8020f18:	4699      	movlt	r9, r3
 8020f1a:	6927      	ldr	r7, [r4, #16]
 8020f1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020f20:	68a3      	ldr	r3, [r4, #8]
 8020f22:	6861      	ldr	r1, [r4, #4]
 8020f24:	eb07 060a 	add.w	r6, r7, sl
 8020f28:	42b3      	cmp	r3, r6
 8020f2a:	b085      	sub	sp, #20
 8020f2c:	bfb8      	it	lt
 8020f2e:	3101      	addlt	r1, #1
 8020f30:	f7ff fed8 	bl	8020ce4 <_Balloc>
 8020f34:	b930      	cbnz	r0, 8020f44 <__multiply+0x44>
 8020f36:	4602      	mov	r2, r0
 8020f38:	4b44      	ldr	r3, [pc, #272]	; (802104c <__multiply+0x14c>)
 8020f3a:	4845      	ldr	r0, [pc, #276]	; (8021050 <__multiply+0x150>)
 8020f3c:	f240 115d 	movw	r1, #349	; 0x15d
 8020f40:	f000 fd52 	bl	80219e8 <__assert_func>
 8020f44:	f100 0514 	add.w	r5, r0, #20
 8020f48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020f4c:	462b      	mov	r3, r5
 8020f4e:	2200      	movs	r2, #0
 8020f50:	4543      	cmp	r3, r8
 8020f52:	d321      	bcc.n	8020f98 <__multiply+0x98>
 8020f54:	f104 0314 	add.w	r3, r4, #20
 8020f58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020f5c:	f109 0314 	add.w	r3, r9, #20
 8020f60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020f64:	9202      	str	r2, [sp, #8]
 8020f66:	1b3a      	subs	r2, r7, r4
 8020f68:	3a15      	subs	r2, #21
 8020f6a:	f022 0203 	bic.w	r2, r2, #3
 8020f6e:	3204      	adds	r2, #4
 8020f70:	f104 0115 	add.w	r1, r4, #21
 8020f74:	428f      	cmp	r7, r1
 8020f76:	bf38      	it	cc
 8020f78:	2204      	movcc	r2, #4
 8020f7a:	9201      	str	r2, [sp, #4]
 8020f7c:	9a02      	ldr	r2, [sp, #8]
 8020f7e:	9303      	str	r3, [sp, #12]
 8020f80:	429a      	cmp	r2, r3
 8020f82:	d80c      	bhi.n	8020f9e <__multiply+0x9e>
 8020f84:	2e00      	cmp	r6, #0
 8020f86:	dd03      	ble.n	8020f90 <__multiply+0x90>
 8020f88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d05a      	beq.n	8021046 <__multiply+0x146>
 8020f90:	6106      	str	r6, [r0, #16]
 8020f92:	b005      	add	sp, #20
 8020f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f98:	f843 2b04 	str.w	r2, [r3], #4
 8020f9c:	e7d8      	b.n	8020f50 <__multiply+0x50>
 8020f9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8020fa2:	f1ba 0f00 	cmp.w	sl, #0
 8020fa6:	d024      	beq.n	8020ff2 <__multiply+0xf2>
 8020fa8:	f104 0e14 	add.w	lr, r4, #20
 8020fac:	46a9      	mov	r9, r5
 8020fae:	f04f 0c00 	mov.w	ip, #0
 8020fb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8020fb6:	f8d9 1000 	ldr.w	r1, [r9]
 8020fba:	fa1f fb82 	uxth.w	fp, r2
 8020fbe:	b289      	uxth	r1, r1
 8020fc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8020fc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8020fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8020fcc:	4461      	add	r1, ip
 8020fce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020fd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8020fd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8020fda:	b289      	uxth	r1, r1
 8020fdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020fe0:	4577      	cmp	r7, lr
 8020fe2:	f849 1b04 	str.w	r1, [r9], #4
 8020fe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020fea:	d8e2      	bhi.n	8020fb2 <__multiply+0xb2>
 8020fec:	9a01      	ldr	r2, [sp, #4]
 8020fee:	f845 c002 	str.w	ip, [r5, r2]
 8020ff2:	9a03      	ldr	r2, [sp, #12]
 8020ff4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020ff8:	3304      	adds	r3, #4
 8020ffa:	f1b9 0f00 	cmp.w	r9, #0
 8020ffe:	d020      	beq.n	8021042 <__multiply+0x142>
 8021000:	6829      	ldr	r1, [r5, #0]
 8021002:	f104 0c14 	add.w	ip, r4, #20
 8021006:	46ae      	mov	lr, r5
 8021008:	f04f 0a00 	mov.w	sl, #0
 802100c:	f8bc b000 	ldrh.w	fp, [ip]
 8021010:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021014:	fb09 220b 	mla	r2, r9, fp, r2
 8021018:	4492      	add	sl, r2
 802101a:	b289      	uxth	r1, r1
 802101c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021020:	f84e 1b04 	str.w	r1, [lr], #4
 8021024:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021028:	f8be 1000 	ldrh.w	r1, [lr]
 802102c:	0c12      	lsrs	r2, r2, #16
 802102e:	fb09 1102 	mla	r1, r9, r2, r1
 8021032:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021036:	4567      	cmp	r7, ip
 8021038:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802103c:	d8e6      	bhi.n	802100c <__multiply+0x10c>
 802103e:	9a01      	ldr	r2, [sp, #4]
 8021040:	50a9      	str	r1, [r5, r2]
 8021042:	3504      	adds	r5, #4
 8021044:	e79a      	b.n	8020f7c <__multiply+0x7c>
 8021046:	3e01      	subs	r6, #1
 8021048:	e79c      	b.n	8020f84 <__multiply+0x84>
 802104a:	bf00      	nop
 802104c:	080223db 	.word	0x080223db
 8021050:	0802244c 	.word	0x0802244c

08021054 <__pow5mult>:
 8021054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021058:	4615      	mov	r5, r2
 802105a:	f012 0203 	ands.w	r2, r2, #3
 802105e:	4606      	mov	r6, r0
 8021060:	460f      	mov	r7, r1
 8021062:	d007      	beq.n	8021074 <__pow5mult+0x20>
 8021064:	4c25      	ldr	r4, [pc, #148]	; (80210fc <__pow5mult+0xa8>)
 8021066:	3a01      	subs	r2, #1
 8021068:	2300      	movs	r3, #0
 802106a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802106e:	f7ff fe9b 	bl	8020da8 <__multadd>
 8021072:	4607      	mov	r7, r0
 8021074:	10ad      	asrs	r5, r5, #2
 8021076:	d03d      	beq.n	80210f4 <__pow5mult+0xa0>
 8021078:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802107a:	b97c      	cbnz	r4, 802109c <__pow5mult+0x48>
 802107c:	2010      	movs	r0, #16
 802107e:	f7ff fe29 	bl	8020cd4 <malloc>
 8021082:	4602      	mov	r2, r0
 8021084:	6270      	str	r0, [r6, #36]	; 0x24
 8021086:	b928      	cbnz	r0, 8021094 <__pow5mult+0x40>
 8021088:	4b1d      	ldr	r3, [pc, #116]	; (8021100 <__pow5mult+0xac>)
 802108a:	481e      	ldr	r0, [pc, #120]	; (8021104 <__pow5mult+0xb0>)
 802108c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021090:	f000 fcaa 	bl	80219e8 <__assert_func>
 8021094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021098:	6004      	str	r4, [r0, #0]
 802109a:	60c4      	str	r4, [r0, #12]
 802109c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80210a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80210a4:	b94c      	cbnz	r4, 80210ba <__pow5mult+0x66>
 80210a6:	f240 2171 	movw	r1, #625	; 0x271
 80210aa:	4630      	mov	r0, r6
 80210ac:	f7ff ff12 	bl	8020ed4 <__i2b>
 80210b0:	2300      	movs	r3, #0
 80210b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80210b6:	4604      	mov	r4, r0
 80210b8:	6003      	str	r3, [r0, #0]
 80210ba:	f04f 0900 	mov.w	r9, #0
 80210be:	07eb      	lsls	r3, r5, #31
 80210c0:	d50a      	bpl.n	80210d8 <__pow5mult+0x84>
 80210c2:	4639      	mov	r1, r7
 80210c4:	4622      	mov	r2, r4
 80210c6:	4630      	mov	r0, r6
 80210c8:	f7ff ff1a 	bl	8020f00 <__multiply>
 80210cc:	4639      	mov	r1, r7
 80210ce:	4680      	mov	r8, r0
 80210d0:	4630      	mov	r0, r6
 80210d2:	f7ff fe47 	bl	8020d64 <_Bfree>
 80210d6:	4647      	mov	r7, r8
 80210d8:	106d      	asrs	r5, r5, #1
 80210da:	d00b      	beq.n	80210f4 <__pow5mult+0xa0>
 80210dc:	6820      	ldr	r0, [r4, #0]
 80210de:	b938      	cbnz	r0, 80210f0 <__pow5mult+0x9c>
 80210e0:	4622      	mov	r2, r4
 80210e2:	4621      	mov	r1, r4
 80210e4:	4630      	mov	r0, r6
 80210e6:	f7ff ff0b 	bl	8020f00 <__multiply>
 80210ea:	6020      	str	r0, [r4, #0]
 80210ec:	f8c0 9000 	str.w	r9, [r0]
 80210f0:	4604      	mov	r4, r0
 80210f2:	e7e4      	b.n	80210be <__pow5mult+0x6a>
 80210f4:	4638      	mov	r0, r7
 80210f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80210fa:	bf00      	nop
 80210fc:	08022598 	.word	0x08022598
 8021100:	08022369 	.word	0x08022369
 8021104:	0802244c 	.word	0x0802244c

08021108 <__lshift>:
 8021108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802110c:	460c      	mov	r4, r1
 802110e:	6849      	ldr	r1, [r1, #4]
 8021110:	6923      	ldr	r3, [r4, #16]
 8021112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021116:	68a3      	ldr	r3, [r4, #8]
 8021118:	4607      	mov	r7, r0
 802111a:	4691      	mov	r9, r2
 802111c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021120:	f108 0601 	add.w	r6, r8, #1
 8021124:	42b3      	cmp	r3, r6
 8021126:	db0b      	blt.n	8021140 <__lshift+0x38>
 8021128:	4638      	mov	r0, r7
 802112a:	f7ff fddb 	bl	8020ce4 <_Balloc>
 802112e:	4605      	mov	r5, r0
 8021130:	b948      	cbnz	r0, 8021146 <__lshift+0x3e>
 8021132:	4602      	mov	r2, r0
 8021134:	4b2a      	ldr	r3, [pc, #168]	; (80211e0 <__lshift+0xd8>)
 8021136:	482b      	ldr	r0, [pc, #172]	; (80211e4 <__lshift+0xdc>)
 8021138:	f240 11d9 	movw	r1, #473	; 0x1d9
 802113c:	f000 fc54 	bl	80219e8 <__assert_func>
 8021140:	3101      	adds	r1, #1
 8021142:	005b      	lsls	r3, r3, #1
 8021144:	e7ee      	b.n	8021124 <__lshift+0x1c>
 8021146:	2300      	movs	r3, #0
 8021148:	f100 0114 	add.w	r1, r0, #20
 802114c:	f100 0210 	add.w	r2, r0, #16
 8021150:	4618      	mov	r0, r3
 8021152:	4553      	cmp	r3, sl
 8021154:	db37      	blt.n	80211c6 <__lshift+0xbe>
 8021156:	6920      	ldr	r0, [r4, #16]
 8021158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802115c:	f104 0314 	add.w	r3, r4, #20
 8021160:	f019 091f 	ands.w	r9, r9, #31
 8021164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021168:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802116c:	d02f      	beq.n	80211ce <__lshift+0xc6>
 802116e:	f1c9 0e20 	rsb	lr, r9, #32
 8021172:	468a      	mov	sl, r1
 8021174:	f04f 0c00 	mov.w	ip, #0
 8021178:	681a      	ldr	r2, [r3, #0]
 802117a:	fa02 f209 	lsl.w	r2, r2, r9
 802117e:	ea42 020c 	orr.w	r2, r2, ip
 8021182:	f84a 2b04 	str.w	r2, [sl], #4
 8021186:	f853 2b04 	ldr.w	r2, [r3], #4
 802118a:	4298      	cmp	r0, r3
 802118c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021190:	d8f2      	bhi.n	8021178 <__lshift+0x70>
 8021192:	1b03      	subs	r3, r0, r4
 8021194:	3b15      	subs	r3, #21
 8021196:	f023 0303 	bic.w	r3, r3, #3
 802119a:	3304      	adds	r3, #4
 802119c:	f104 0215 	add.w	r2, r4, #21
 80211a0:	4290      	cmp	r0, r2
 80211a2:	bf38      	it	cc
 80211a4:	2304      	movcc	r3, #4
 80211a6:	f841 c003 	str.w	ip, [r1, r3]
 80211aa:	f1bc 0f00 	cmp.w	ip, #0
 80211ae:	d001      	beq.n	80211b4 <__lshift+0xac>
 80211b0:	f108 0602 	add.w	r6, r8, #2
 80211b4:	3e01      	subs	r6, #1
 80211b6:	4638      	mov	r0, r7
 80211b8:	612e      	str	r6, [r5, #16]
 80211ba:	4621      	mov	r1, r4
 80211bc:	f7ff fdd2 	bl	8020d64 <_Bfree>
 80211c0:	4628      	mov	r0, r5
 80211c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80211ca:	3301      	adds	r3, #1
 80211cc:	e7c1      	b.n	8021152 <__lshift+0x4a>
 80211ce:	3904      	subs	r1, #4
 80211d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80211d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80211d8:	4298      	cmp	r0, r3
 80211da:	d8f9      	bhi.n	80211d0 <__lshift+0xc8>
 80211dc:	e7ea      	b.n	80211b4 <__lshift+0xac>
 80211de:	bf00      	nop
 80211e0:	080223db 	.word	0x080223db
 80211e4:	0802244c 	.word	0x0802244c

080211e8 <__mcmp>:
 80211e8:	b530      	push	{r4, r5, lr}
 80211ea:	6902      	ldr	r2, [r0, #16]
 80211ec:	690c      	ldr	r4, [r1, #16]
 80211ee:	1b12      	subs	r2, r2, r4
 80211f0:	d10e      	bne.n	8021210 <__mcmp+0x28>
 80211f2:	f100 0314 	add.w	r3, r0, #20
 80211f6:	3114      	adds	r1, #20
 80211f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80211fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021200:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021204:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021208:	42a5      	cmp	r5, r4
 802120a:	d003      	beq.n	8021214 <__mcmp+0x2c>
 802120c:	d305      	bcc.n	802121a <__mcmp+0x32>
 802120e:	2201      	movs	r2, #1
 8021210:	4610      	mov	r0, r2
 8021212:	bd30      	pop	{r4, r5, pc}
 8021214:	4283      	cmp	r3, r0
 8021216:	d3f3      	bcc.n	8021200 <__mcmp+0x18>
 8021218:	e7fa      	b.n	8021210 <__mcmp+0x28>
 802121a:	f04f 32ff 	mov.w	r2, #4294967295
 802121e:	e7f7      	b.n	8021210 <__mcmp+0x28>

08021220 <__mdiff>:
 8021220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021224:	460c      	mov	r4, r1
 8021226:	4606      	mov	r6, r0
 8021228:	4611      	mov	r1, r2
 802122a:	4620      	mov	r0, r4
 802122c:	4690      	mov	r8, r2
 802122e:	f7ff ffdb 	bl	80211e8 <__mcmp>
 8021232:	1e05      	subs	r5, r0, #0
 8021234:	d110      	bne.n	8021258 <__mdiff+0x38>
 8021236:	4629      	mov	r1, r5
 8021238:	4630      	mov	r0, r6
 802123a:	f7ff fd53 	bl	8020ce4 <_Balloc>
 802123e:	b930      	cbnz	r0, 802124e <__mdiff+0x2e>
 8021240:	4b3a      	ldr	r3, [pc, #232]	; (802132c <__mdiff+0x10c>)
 8021242:	4602      	mov	r2, r0
 8021244:	f240 2132 	movw	r1, #562	; 0x232
 8021248:	4839      	ldr	r0, [pc, #228]	; (8021330 <__mdiff+0x110>)
 802124a:	f000 fbcd 	bl	80219e8 <__assert_func>
 802124e:	2301      	movs	r3, #1
 8021250:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021258:	bfa4      	itt	ge
 802125a:	4643      	movge	r3, r8
 802125c:	46a0      	movge	r8, r4
 802125e:	4630      	mov	r0, r6
 8021260:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021264:	bfa6      	itte	ge
 8021266:	461c      	movge	r4, r3
 8021268:	2500      	movge	r5, #0
 802126a:	2501      	movlt	r5, #1
 802126c:	f7ff fd3a 	bl	8020ce4 <_Balloc>
 8021270:	b920      	cbnz	r0, 802127c <__mdiff+0x5c>
 8021272:	4b2e      	ldr	r3, [pc, #184]	; (802132c <__mdiff+0x10c>)
 8021274:	4602      	mov	r2, r0
 8021276:	f44f 7110 	mov.w	r1, #576	; 0x240
 802127a:	e7e5      	b.n	8021248 <__mdiff+0x28>
 802127c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021280:	6926      	ldr	r6, [r4, #16]
 8021282:	60c5      	str	r5, [r0, #12]
 8021284:	f104 0914 	add.w	r9, r4, #20
 8021288:	f108 0514 	add.w	r5, r8, #20
 802128c:	f100 0e14 	add.w	lr, r0, #20
 8021290:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021294:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021298:	f108 0210 	add.w	r2, r8, #16
 802129c:	46f2      	mov	sl, lr
 802129e:	2100      	movs	r1, #0
 80212a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80212a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80212a8:	fa1f f883 	uxth.w	r8, r3
 80212ac:	fa11 f18b 	uxtah	r1, r1, fp
 80212b0:	0c1b      	lsrs	r3, r3, #16
 80212b2:	eba1 0808 	sub.w	r8, r1, r8
 80212b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80212ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80212be:	fa1f f888 	uxth.w	r8, r8
 80212c2:	1419      	asrs	r1, r3, #16
 80212c4:	454e      	cmp	r6, r9
 80212c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80212ca:	f84a 3b04 	str.w	r3, [sl], #4
 80212ce:	d8e7      	bhi.n	80212a0 <__mdiff+0x80>
 80212d0:	1b33      	subs	r3, r6, r4
 80212d2:	3b15      	subs	r3, #21
 80212d4:	f023 0303 	bic.w	r3, r3, #3
 80212d8:	3304      	adds	r3, #4
 80212da:	3415      	adds	r4, #21
 80212dc:	42a6      	cmp	r6, r4
 80212de:	bf38      	it	cc
 80212e0:	2304      	movcc	r3, #4
 80212e2:	441d      	add	r5, r3
 80212e4:	4473      	add	r3, lr
 80212e6:	469e      	mov	lr, r3
 80212e8:	462e      	mov	r6, r5
 80212ea:	4566      	cmp	r6, ip
 80212ec:	d30e      	bcc.n	802130c <__mdiff+0xec>
 80212ee:	f10c 0203 	add.w	r2, ip, #3
 80212f2:	1b52      	subs	r2, r2, r5
 80212f4:	f022 0203 	bic.w	r2, r2, #3
 80212f8:	3d03      	subs	r5, #3
 80212fa:	45ac      	cmp	ip, r5
 80212fc:	bf38      	it	cc
 80212fe:	2200      	movcc	r2, #0
 8021300:	441a      	add	r2, r3
 8021302:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021306:	b17b      	cbz	r3, 8021328 <__mdiff+0x108>
 8021308:	6107      	str	r7, [r0, #16]
 802130a:	e7a3      	b.n	8021254 <__mdiff+0x34>
 802130c:	f856 8b04 	ldr.w	r8, [r6], #4
 8021310:	fa11 f288 	uxtah	r2, r1, r8
 8021314:	1414      	asrs	r4, r2, #16
 8021316:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802131a:	b292      	uxth	r2, r2
 802131c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021320:	f84e 2b04 	str.w	r2, [lr], #4
 8021324:	1421      	asrs	r1, r4, #16
 8021326:	e7e0      	b.n	80212ea <__mdiff+0xca>
 8021328:	3f01      	subs	r7, #1
 802132a:	e7ea      	b.n	8021302 <__mdiff+0xe2>
 802132c:	080223db 	.word	0x080223db
 8021330:	0802244c 	.word	0x0802244c

08021334 <__d2b>:
 8021334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021338:	4689      	mov	r9, r1
 802133a:	2101      	movs	r1, #1
 802133c:	ec57 6b10 	vmov	r6, r7, d0
 8021340:	4690      	mov	r8, r2
 8021342:	f7ff fccf 	bl	8020ce4 <_Balloc>
 8021346:	4604      	mov	r4, r0
 8021348:	b930      	cbnz	r0, 8021358 <__d2b+0x24>
 802134a:	4602      	mov	r2, r0
 802134c:	4b25      	ldr	r3, [pc, #148]	; (80213e4 <__d2b+0xb0>)
 802134e:	4826      	ldr	r0, [pc, #152]	; (80213e8 <__d2b+0xb4>)
 8021350:	f240 310a 	movw	r1, #778	; 0x30a
 8021354:	f000 fb48 	bl	80219e8 <__assert_func>
 8021358:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802135c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021360:	bb35      	cbnz	r5, 80213b0 <__d2b+0x7c>
 8021362:	2e00      	cmp	r6, #0
 8021364:	9301      	str	r3, [sp, #4]
 8021366:	d028      	beq.n	80213ba <__d2b+0x86>
 8021368:	4668      	mov	r0, sp
 802136a:	9600      	str	r6, [sp, #0]
 802136c:	f7ff fd82 	bl	8020e74 <__lo0bits>
 8021370:	9900      	ldr	r1, [sp, #0]
 8021372:	b300      	cbz	r0, 80213b6 <__d2b+0x82>
 8021374:	9a01      	ldr	r2, [sp, #4]
 8021376:	f1c0 0320 	rsb	r3, r0, #32
 802137a:	fa02 f303 	lsl.w	r3, r2, r3
 802137e:	430b      	orrs	r3, r1
 8021380:	40c2      	lsrs	r2, r0
 8021382:	6163      	str	r3, [r4, #20]
 8021384:	9201      	str	r2, [sp, #4]
 8021386:	9b01      	ldr	r3, [sp, #4]
 8021388:	61a3      	str	r3, [r4, #24]
 802138a:	2b00      	cmp	r3, #0
 802138c:	bf14      	ite	ne
 802138e:	2202      	movne	r2, #2
 8021390:	2201      	moveq	r2, #1
 8021392:	6122      	str	r2, [r4, #16]
 8021394:	b1d5      	cbz	r5, 80213cc <__d2b+0x98>
 8021396:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802139a:	4405      	add	r5, r0
 802139c:	f8c9 5000 	str.w	r5, [r9]
 80213a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80213a4:	f8c8 0000 	str.w	r0, [r8]
 80213a8:	4620      	mov	r0, r4
 80213aa:	b003      	add	sp, #12
 80213ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80213b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80213b4:	e7d5      	b.n	8021362 <__d2b+0x2e>
 80213b6:	6161      	str	r1, [r4, #20]
 80213b8:	e7e5      	b.n	8021386 <__d2b+0x52>
 80213ba:	a801      	add	r0, sp, #4
 80213bc:	f7ff fd5a 	bl	8020e74 <__lo0bits>
 80213c0:	9b01      	ldr	r3, [sp, #4]
 80213c2:	6163      	str	r3, [r4, #20]
 80213c4:	2201      	movs	r2, #1
 80213c6:	6122      	str	r2, [r4, #16]
 80213c8:	3020      	adds	r0, #32
 80213ca:	e7e3      	b.n	8021394 <__d2b+0x60>
 80213cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80213d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80213d4:	f8c9 0000 	str.w	r0, [r9]
 80213d8:	6918      	ldr	r0, [r3, #16]
 80213da:	f7ff fd2b 	bl	8020e34 <__hi0bits>
 80213de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80213e2:	e7df      	b.n	80213a4 <__d2b+0x70>
 80213e4:	080223db 	.word	0x080223db
 80213e8:	0802244c 	.word	0x0802244c

080213ec <_calloc_r>:
 80213ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80213ee:	fba1 2402 	umull	r2, r4, r1, r2
 80213f2:	b94c      	cbnz	r4, 8021408 <_calloc_r+0x1c>
 80213f4:	4611      	mov	r1, r2
 80213f6:	9201      	str	r2, [sp, #4]
 80213f8:	f000 f87a 	bl	80214f0 <_malloc_r>
 80213fc:	9a01      	ldr	r2, [sp, #4]
 80213fe:	4605      	mov	r5, r0
 8021400:	b930      	cbnz	r0, 8021410 <_calloc_r+0x24>
 8021402:	4628      	mov	r0, r5
 8021404:	b003      	add	sp, #12
 8021406:	bd30      	pop	{r4, r5, pc}
 8021408:	220c      	movs	r2, #12
 802140a:	6002      	str	r2, [r0, #0]
 802140c:	2500      	movs	r5, #0
 802140e:	e7f8      	b.n	8021402 <_calloc_r+0x16>
 8021410:	4621      	mov	r1, r4
 8021412:	f7fd fde9 	bl	801efe8 <memset>
 8021416:	e7f4      	b.n	8021402 <_calloc_r+0x16>

08021418 <_free_r>:
 8021418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802141a:	2900      	cmp	r1, #0
 802141c:	d044      	beq.n	80214a8 <_free_r+0x90>
 802141e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021422:	9001      	str	r0, [sp, #4]
 8021424:	2b00      	cmp	r3, #0
 8021426:	f1a1 0404 	sub.w	r4, r1, #4
 802142a:	bfb8      	it	lt
 802142c:	18e4      	addlt	r4, r4, r3
 802142e:	f000 fb61 	bl	8021af4 <__malloc_lock>
 8021432:	4a1e      	ldr	r2, [pc, #120]	; (80214ac <_free_r+0x94>)
 8021434:	9801      	ldr	r0, [sp, #4]
 8021436:	6813      	ldr	r3, [r2, #0]
 8021438:	b933      	cbnz	r3, 8021448 <_free_r+0x30>
 802143a:	6063      	str	r3, [r4, #4]
 802143c:	6014      	str	r4, [r2, #0]
 802143e:	b003      	add	sp, #12
 8021440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021444:	f000 bb5c 	b.w	8021b00 <__malloc_unlock>
 8021448:	42a3      	cmp	r3, r4
 802144a:	d908      	bls.n	802145e <_free_r+0x46>
 802144c:	6825      	ldr	r5, [r4, #0]
 802144e:	1961      	adds	r1, r4, r5
 8021450:	428b      	cmp	r3, r1
 8021452:	bf01      	itttt	eq
 8021454:	6819      	ldreq	r1, [r3, #0]
 8021456:	685b      	ldreq	r3, [r3, #4]
 8021458:	1949      	addeq	r1, r1, r5
 802145a:	6021      	streq	r1, [r4, #0]
 802145c:	e7ed      	b.n	802143a <_free_r+0x22>
 802145e:	461a      	mov	r2, r3
 8021460:	685b      	ldr	r3, [r3, #4]
 8021462:	b10b      	cbz	r3, 8021468 <_free_r+0x50>
 8021464:	42a3      	cmp	r3, r4
 8021466:	d9fa      	bls.n	802145e <_free_r+0x46>
 8021468:	6811      	ldr	r1, [r2, #0]
 802146a:	1855      	adds	r5, r2, r1
 802146c:	42a5      	cmp	r5, r4
 802146e:	d10b      	bne.n	8021488 <_free_r+0x70>
 8021470:	6824      	ldr	r4, [r4, #0]
 8021472:	4421      	add	r1, r4
 8021474:	1854      	adds	r4, r2, r1
 8021476:	42a3      	cmp	r3, r4
 8021478:	6011      	str	r1, [r2, #0]
 802147a:	d1e0      	bne.n	802143e <_free_r+0x26>
 802147c:	681c      	ldr	r4, [r3, #0]
 802147e:	685b      	ldr	r3, [r3, #4]
 8021480:	6053      	str	r3, [r2, #4]
 8021482:	4421      	add	r1, r4
 8021484:	6011      	str	r1, [r2, #0]
 8021486:	e7da      	b.n	802143e <_free_r+0x26>
 8021488:	d902      	bls.n	8021490 <_free_r+0x78>
 802148a:	230c      	movs	r3, #12
 802148c:	6003      	str	r3, [r0, #0]
 802148e:	e7d6      	b.n	802143e <_free_r+0x26>
 8021490:	6825      	ldr	r5, [r4, #0]
 8021492:	1961      	adds	r1, r4, r5
 8021494:	428b      	cmp	r3, r1
 8021496:	bf04      	itt	eq
 8021498:	6819      	ldreq	r1, [r3, #0]
 802149a:	685b      	ldreq	r3, [r3, #4]
 802149c:	6063      	str	r3, [r4, #4]
 802149e:	bf04      	itt	eq
 80214a0:	1949      	addeq	r1, r1, r5
 80214a2:	6021      	streq	r1, [r4, #0]
 80214a4:	6054      	str	r4, [r2, #4]
 80214a6:	e7ca      	b.n	802143e <_free_r+0x26>
 80214a8:	b003      	add	sp, #12
 80214aa:	bd30      	pop	{r4, r5, pc}
 80214ac:	2000df9c 	.word	0x2000df9c

080214b0 <sbrk_aligned>:
 80214b0:	b570      	push	{r4, r5, r6, lr}
 80214b2:	4e0e      	ldr	r6, [pc, #56]	; (80214ec <sbrk_aligned+0x3c>)
 80214b4:	460c      	mov	r4, r1
 80214b6:	6831      	ldr	r1, [r6, #0]
 80214b8:	4605      	mov	r5, r0
 80214ba:	b911      	cbnz	r1, 80214c2 <sbrk_aligned+0x12>
 80214bc:	f000 fa2e 	bl	802191c <_sbrk_r>
 80214c0:	6030      	str	r0, [r6, #0]
 80214c2:	4621      	mov	r1, r4
 80214c4:	4628      	mov	r0, r5
 80214c6:	f000 fa29 	bl	802191c <_sbrk_r>
 80214ca:	1c43      	adds	r3, r0, #1
 80214cc:	d00a      	beq.n	80214e4 <sbrk_aligned+0x34>
 80214ce:	1cc4      	adds	r4, r0, #3
 80214d0:	f024 0403 	bic.w	r4, r4, #3
 80214d4:	42a0      	cmp	r0, r4
 80214d6:	d007      	beq.n	80214e8 <sbrk_aligned+0x38>
 80214d8:	1a21      	subs	r1, r4, r0
 80214da:	4628      	mov	r0, r5
 80214dc:	f000 fa1e 	bl	802191c <_sbrk_r>
 80214e0:	3001      	adds	r0, #1
 80214e2:	d101      	bne.n	80214e8 <sbrk_aligned+0x38>
 80214e4:	f04f 34ff 	mov.w	r4, #4294967295
 80214e8:	4620      	mov	r0, r4
 80214ea:	bd70      	pop	{r4, r5, r6, pc}
 80214ec:	2000dfa0 	.word	0x2000dfa0

080214f0 <_malloc_r>:
 80214f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80214f4:	1ccd      	adds	r5, r1, #3
 80214f6:	f025 0503 	bic.w	r5, r5, #3
 80214fa:	3508      	adds	r5, #8
 80214fc:	2d0c      	cmp	r5, #12
 80214fe:	bf38      	it	cc
 8021500:	250c      	movcc	r5, #12
 8021502:	2d00      	cmp	r5, #0
 8021504:	4607      	mov	r7, r0
 8021506:	db01      	blt.n	802150c <_malloc_r+0x1c>
 8021508:	42a9      	cmp	r1, r5
 802150a:	d905      	bls.n	8021518 <_malloc_r+0x28>
 802150c:	230c      	movs	r3, #12
 802150e:	603b      	str	r3, [r7, #0]
 8021510:	2600      	movs	r6, #0
 8021512:	4630      	mov	r0, r6
 8021514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021518:	4e2e      	ldr	r6, [pc, #184]	; (80215d4 <_malloc_r+0xe4>)
 802151a:	f000 faeb 	bl	8021af4 <__malloc_lock>
 802151e:	6833      	ldr	r3, [r6, #0]
 8021520:	461c      	mov	r4, r3
 8021522:	bb34      	cbnz	r4, 8021572 <_malloc_r+0x82>
 8021524:	4629      	mov	r1, r5
 8021526:	4638      	mov	r0, r7
 8021528:	f7ff ffc2 	bl	80214b0 <sbrk_aligned>
 802152c:	1c43      	adds	r3, r0, #1
 802152e:	4604      	mov	r4, r0
 8021530:	d14d      	bne.n	80215ce <_malloc_r+0xde>
 8021532:	6834      	ldr	r4, [r6, #0]
 8021534:	4626      	mov	r6, r4
 8021536:	2e00      	cmp	r6, #0
 8021538:	d140      	bne.n	80215bc <_malloc_r+0xcc>
 802153a:	6823      	ldr	r3, [r4, #0]
 802153c:	4631      	mov	r1, r6
 802153e:	4638      	mov	r0, r7
 8021540:	eb04 0803 	add.w	r8, r4, r3
 8021544:	f000 f9ea 	bl	802191c <_sbrk_r>
 8021548:	4580      	cmp	r8, r0
 802154a:	d13a      	bne.n	80215c2 <_malloc_r+0xd2>
 802154c:	6821      	ldr	r1, [r4, #0]
 802154e:	3503      	adds	r5, #3
 8021550:	1a6d      	subs	r5, r5, r1
 8021552:	f025 0503 	bic.w	r5, r5, #3
 8021556:	3508      	adds	r5, #8
 8021558:	2d0c      	cmp	r5, #12
 802155a:	bf38      	it	cc
 802155c:	250c      	movcc	r5, #12
 802155e:	4629      	mov	r1, r5
 8021560:	4638      	mov	r0, r7
 8021562:	f7ff ffa5 	bl	80214b0 <sbrk_aligned>
 8021566:	3001      	adds	r0, #1
 8021568:	d02b      	beq.n	80215c2 <_malloc_r+0xd2>
 802156a:	6823      	ldr	r3, [r4, #0]
 802156c:	442b      	add	r3, r5
 802156e:	6023      	str	r3, [r4, #0]
 8021570:	e00e      	b.n	8021590 <_malloc_r+0xa0>
 8021572:	6822      	ldr	r2, [r4, #0]
 8021574:	1b52      	subs	r2, r2, r5
 8021576:	d41e      	bmi.n	80215b6 <_malloc_r+0xc6>
 8021578:	2a0b      	cmp	r2, #11
 802157a:	d916      	bls.n	80215aa <_malloc_r+0xba>
 802157c:	1961      	adds	r1, r4, r5
 802157e:	42a3      	cmp	r3, r4
 8021580:	6025      	str	r5, [r4, #0]
 8021582:	bf18      	it	ne
 8021584:	6059      	strne	r1, [r3, #4]
 8021586:	6863      	ldr	r3, [r4, #4]
 8021588:	bf08      	it	eq
 802158a:	6031      	streq	r1, [r6, #0]
 802158c:	5162      	str	r2, [r4, r5]
 802158e:	604b      	str	r3, [r1, #4]
 8021590:	4638      	mov	r0, r7
 8021592:	f104 060b 	add.w	r6, r4, #11
 8021596:	f000 fab3 	bl	8021b00 <__malloc_unlock>
 802159a:	f026 0607 	bic.w	r6, r6, #7
 802159e:	1d23      	adds	r3, r4, #4
 80215a0:	1af2      	subs	r2, r6, r3
 80215a2:	d0b6      	beq.n	8021512 <_malloc_r+0x22>
 80215a4:	1b9b      	subs	r3, r3, r6
 80215a6:	50a3      	str	r3, [r4, r2]
 80215a8:	e7b3      	b.n	8021512 <_malloc_r+0x22>
 80215aa:	6862      	ldr	r2, [r4, #4]
 80215ac:	42a3      	cmp	r3, r4
 80215ae:	bf0c      	ite	eq
 80215b0:	6032      	streq	r2, [r6, #0]
 80215b2:	605a      	strne	r2, [r3, #4]
 80215b4:	e7ec      	b.n	8021590 <_malloc_r+0xa0>
 80215b6:	4623      	mov	r3, r4
 80215b8:	6864      	ldr	r4, [r4, #4]
 80215ba:	e7b2      	b.n	8021522 <_malloc_r+0x32>
 80215bc:	4634      	mov	r4, r6
 80215be:	6876      	ldr	r6, [r6, #4]
 80215c0:	e7b9      	b.n	8021536 <_malloc_r+0x46>
 80215c2:	230c      	movs	r3, #12
 80215c4:	603b      	str	r3, [r7, #0]
 80215c6:	4638      	mov	r0, r7
 80215c8:	f000 fa9a 	bl	8021b00 <__malloc_unlock>
 80215cc:	e7a1      	b.n	8021512 <_malloc_r+0x22>
 80215ce:	6025      	str	r5, [r4, #0]
 80215d0:	e7de      	b.n	8021590 <_malloc_r+0xa0>
 80215d2:	bf00      	nop
 80215d4:	2000df9c 	.word	0x2000df9c

080215d8 <__sfputc_r>:
 80215d8:	6893      	ldr	r3, [r2, #8]
 80215da:	3b01      	subs	r3, #1
 80215dc:	2b00      	cmp	r3, #0
 80215de:	b410      	push	{r4}
 80215e0:	6093      	str	r3, [r2, #8]
 80215e2:	da08      	bge.n	80215f6 <__sfputc_r+0x1e>
 80215e4:	6994      	ldr	r4, [r2, #24]
 80215e6:	42a3      	cmp	r3, r4
 80215e8:	db01      	blt.n	80215ee <__sfputc_r+0x16>
 80215ea:	290a      	cmp	r1, #10
 80215ec:	d103      	bne.n	80215f6 <__sfputc_r+0x1e>
 80215ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215f2:	f7fe ba0f 	b.w	801fa14 <__swbuf_r>
 80215f6:	6813      	ldr	r3, [r2, #0]
 80215f8:	1c58      	adds	r0, r3, #1
 80215fa:	6010      	str	r0, [r2, #0]
 80215fc:	7019      	strb	r1, [r3, #0]
 80215fe:	4608      	mov	r0, r1
 8021600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021604:	4770      	bx	lr

08021606 <__sfputs_r>:
 8021606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021608:	4606      	mov	r6, r0
 802160a:	460f      	mov	r7, r1
 802160c:	4614      	mov	r4, r2
 802160e:	18d5      	adds	r5, r2, r3
 8021610:	42ac      	cmp	r4, r5
 8021612:	d101      	bne.n	8021618 <__sfputs_r+0x12>
 8021614:	2000      	movs	r0, #0
 8021616:	e007      	b.n	8021628 <__sfputs_r+0x22>
 8021618:	f814 1b01 	ldrb.w	r1, [r4], #1
 802161c:	463a      	mov	r2, r7
 802161e:	4630      	mov	r0, r6
 8021620:	f7ff ffda 	bl	80215d8 <__sfputc_r>
 8021624:	1c43      	adds	r3, r0, #1
 8021626:	d1f3      	bne.n	8021610 <__sfputs_r+0xa>
 8021628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802162c <_vfiprintf_r>:
 802162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021630:	460d      	mov	r5, r1
 8021632:	b09d      	sub	sp, #116	; 0x74
 8021634:	4614      	mov	r4, r2
 8021636:	4698      	mov	r8, r3
 8021638:	4606      	mov	r6, r0
 802163a:	b118      	cbz	r0, 8021644 <_vfiprintf_r+0x18>
 802163c:	6983      	ldr	r3, [r0, #24]
 802163e:	b90b      	cbnz	r3, 8021644 <_vfiprintf_r+0x18>
 8021640:	f7ff fa3e 	bl	8020ac0 <__sinit>
 8021644:	4b89      	ldr	r3, [pc, #548]	; (802186c <_vfiprintf_r+0x240>)
 8021646:	429d      	cmp	r5, r3
 8021648:	d11b      	bne.n	8021682 <_vfiprintf_r+0x56>
 802164a:	6875      	ldr	r5, [r6, #4]
 802164c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802164e:	07d9      	lsls	r1, r3, #31
 8021650:	d405      	bmi.n	802165e <_vfiprintf_r+0x32>
 8021652:	89ab      	ldrh	r3, [r5, #12]
 8021654:	059a      	lsls	r2, r3, #22
 8021656:	d402      	bmi.n	802165e <_vfiprintf_r+0x32>
 8021658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802165a:	f7ff fad4 	bl	8020c06 <__retarget_lock_acquire_recursive>
 802165e:	89ab      	ldrh	r3, [r5, #12]
 8021660:	071b      	lsls	r3, r3, #28
 8021662:	d501      	bpl.n	8021668 <_vfiprintf_r+0x3c>
 8021664:	692b      	ldr	r3, [r5, #16]
 8021666:	b9eb      	cbnz	r3, 80216a4 <_vfiprintf_r+0x78>
 8021668:	4629      	mov	r1, r5
 802166a:	4630      	mov	r0, r6
 802166c:	f7fe fa24 	bl	801fab8 <__swsetup_r>
 8021670:	b1c0      	cbz	r0, 80216a4 <_vfiprintf_r+0x78>
 8021672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021674:	07dc      	lsls	r4, r3, #31
 8021676:	d50e      	bpl.n	8021696 <_vfiprintf_r+0x6a>
 8021678:	f04f 30ff 	mov.w	r0, #4294967295
 802167c:	b01d      	add	sp, #116	; 0x74
 802167e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021682:	4b7b      	ldr	r3, [pc, #492]	; (8021870 <_vfiprintf_r+0x244>)
 8021684:	429d      	cmp	r5, r3
 8021686:	d101      	bne.n	802168c <_vfiprintf_r+0x60>
 8021688:	68b5      	ldr	r5, [r6, #8]
 802168a:	e7df      	b.n	802164c <_vfiprintf_r+0x20>
 802168c:	4b79      	ldr	r3, [pc, #484]	; (8021874 <_vfiprintf_r+0x248>)
 802168e:	429d      	cmp	r5, r3
 8021690:	bf08      	it	eq
 8021692:	68f5      	ldreq	r5, [r6, #12]
 8021694:	e7da      	b.n	802164c <_vfiprintf_r+0x20>
 8021696:	89ab      	ldrh	r3, [r5, #12]
 8021698:	0598      	lsls	r0, r3, #22
 802169a:	d4ed      	bmi.n	8021678 <_vfiprintf_r+0x4c>
 802169c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802169e:	f7ff fab3 	bl	8020c08 <__retarget_lock_release_recursive>
 80216a2:	e7e9      	b.n	8021678 <_vfiprintf_r+0x4c>
 80216a4:	2300      	movs	r3, #0
 80216a6:	9309      	str	r3, [sp, #36]	; 0x24
 80216a8:	2320      	movs	r3, #32
 80216aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80216ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80216b2:	2330      	movs	r3, #48	; 0x30
 80216b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021878 <_vfiprintf_r+0x24c>
 80216b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80216bc:	f04f 0901 	mov.w	r9, #1
 80216c0:	4623      	mov	r3, r4
 80216c2:	469a      	mov	sl, r3
 80216c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80216c8:	b10a      	cbz	r2, 80216ce <_vfiprintf_r+0xa2>
 80216ca:	2a25      	cmp	r2, #37	; 0x25
 80216cc:	d1f9      	bne.n	80216c2 <_vfiprintf_r+0x96>
 80216ce:	ebba 0b04 	subs.w	fp, sl, r4
 80216d2:	d00b      	beq.n	80216ec <_vfiprintf_r+0xc0>
 80216d4:	465b      	mov	r3, fp
 80216d6:	4622      	mov	r2, r4
 80216d8:	4629      	mov	r1, r5
 80216da:	4630      	mov	r0, r6
 80216dc:	f7ff ff93 	bl	8021606 <__sfputs_r>
 80216e0:	3001      	adds	r0, #1
 80216e2:	f000 80aa 	beq.w	802183a <_vfiprintf_r+0x20e>
 80216e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80216e8:	445a      	add	r2, fp
 80216ea:	9209      	str	r2, [sp, #36]	; 0x24
 80216ec:	f89a 3000 	ldrb.w	r3, [sl]
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	f000 80a2 	beq.w	802183a <_vfiprintf_r+0x20e>
 80216f6:	2300      	movs	r3, #0
 80216f8:	f04f 32ff 	mov.w	r2, #4294967295
 80216fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021700:	f10a 0a01 	add.w	sl, sl, #1
 8021704:	9304      	str	r3, [sp, #16]
 8021706:	9307      	str	r3, [sp, #28]
 8021708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802170c:	931a      	str	r3, [sp, #104]	; 0x68
 802170e:	4654      	mov	r4, sl
 8021710:	2205      	movs	r2, #5
 8021712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021716:	4858      	ldr	r0, [pc, #352]	; (8021878 <_vfiprintf_r+0x24c>)
 8021718:	f7de fd8a 	bl	8000230 <memchr>
 802171c:	9a04      	ldr	r2, [sp, #16]
 802171e:	b9d8      	cbnz	r0, 8021758 <_vfiprintf_r+0x12c>
 8021720:	06d1      	lsls	r1, r2, #27
 8021722:	bf44      	itt	mi
 8021724:	2320      	movmi	r3, #32
 8021726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802172a:	0713      	lsls	r3, r2, #28
 802172c:	bf44      	itt	mi
 802172e:	232b      	movmi	r3, #43	; 0x2b
 8021730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021734:	f89a 3000 	ldrb.w	r3, [sl]
 8021738:	2b2a      	cmp	r3, #42	; 0x2a
 802173a:	d015      	beq.n	8021768 <_vfiprintf_r+0x13c>
 802173c:	9a07      	ldr	r2, [sp, #28]
 802173e:	4654      	mov	r4, sl
 8021740:	2000      	movs	r0, #0
 8021742:	f04f 0c0a 	mov.w	ip, #10
 8021746:	4621      	mov	r1, r4
 8021748:	f811 3b01 	ldrb.w	r3, [r1], #1
 802174c:	3b30      	subs	r3, #48	; 0x30
 802174e:	2b09      	cmp	r3, #9
 8021750:	d94e      	bls.n	80217f0 <_vfiprintf_r+0x1c4>
 8021752:	b1b0      	cbz	r0, 8021782 <_vfiprintf_r+0x156>
 8021754:	9207      	str	r2, [sp, #28]
 8021756:	e014      	b.n	8021782 <_vfiprintf_r+0x156>
 8021758:	eba0 0308 	sub.w	r3, r0, r8
 802175c:	fa09 f303 	lsl.w	r3, r9, r3
 8021760:	4313      	orrs	r3, r2
 8021762:	9304      	str	r3, [sp, #16]
 8021764:	46a2      	mov	sl, r4
 8021766:	e7d2      	b.n	802170e <_vfiprintf_r+0xe2>
 8021768:	9b03      	ldr	r3, [sp, #12]
 802176a:	1d19      	adds	r1, r3, #4
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	9103      	str	r1, [sp, #12]
 8021770:	2b00      	cmp	r3, #0
 8021772:	bfbb      	ittet	lt
 8021774:	425b      	neglt	r3, r3
 8021776:	f042 0202 	orrlt.w	r2, r2, #2
 802177a:	9307      	strge	r3, [sp, #28]
 802177c:	9307      	strlt	r3, [sp, #28]
 802177e:	bfb8      	it	lt
 8021780:	9204      	strlt	r2, [sp, #16]
 8021782:	7823      	ldrb	r3, [r4, #0]
 8021784:	2b2e      	cmp	r3, #46	; 0x2e
 8021786:	d10c      	bne.n	80217a2 <_vfiprintf_r+0x176>
 8021788:	7863      	ldrb	r3, [r4, #1]
 802178a:	2b2a      	cmp	r3, #42	; 0x2a
 802178c:	d135      	bne.n	80217fa <_vfiprintf_r+0x1ce>
 802178e:	9b03      	ldr	r3, [sp, #12]
 8021790:	1d1a      	adds	r2, r3, #4
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	9203      	str	r2, [sp, #12]
 8021796:	2b00      	cmp	r3, #0
 8021798:	bfb8      	it	lt
 802179a:	f04f 33ff 	movlt.w	r3, #4294967295
 802179e:	3402      	adds	r4, #2
 80217a0:	9305      	str	r3, [sp, #20]
 80217a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021888 <_vfiprintf_r+0x25c>
 80217a6:	7821      	ldrb	r1, [r4, #0]
 80217a8:	2203      	movs	r2, #3
 80217aa:	4650      	mov	r0, sl
 80217ac:	f7de fd40 	bl	8000230 <memchr>
 80217b0:	b140      	cbz	r0, 80217c4 <_vfiprintf_r+0x198>
 80217b2:	2340      	movs	r3, #64	; 0x40
 80217b4:	eba0 000a 	sub.w	r0, r0, sl
 80217b8:	fa03 f000 	lsl.w	r0, r3, r0
 80217bc:	9b04      	ldr	r3, [sp, #16]
 80217be:	4303      	orrs	r3, r0
 80217c0:	3401      	adds	r4, #1
 80217c2:	9304      	str	r3, [sp, #16]
 80217c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80217c8:	482c      	ldr	r0, [pc, #176]	; (802187c <_vfiprintf_r+0x250>)
 80217ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80217ce:	2206      	movs	r2, #6
 80217d0:	f7de fd2e 	bl	8000230 <memchr>
 80217d4:	2800      	cmp	r0, #0
 80217d6:	d03f      	beq.n	8021858 <_vfiprintf_r+0x22c>
 80217d8:	4b29      	ldr	r3, [pc, #164]	; (8021880 <_vfiprintf_r+0x254>)
 80217da:	bb1b      	cbnz	r3, 8021824 <_vfiprintf_r+0x1f8>
 80217dc:	9b03      	ldr	r3, [sp, #12]
 80217de:	3307      	adds	r3, #7
 80217e0:	f023 0307 	bic.w	r3, r3, #7
 80217e4:	3308      	adds	r3, #8
 80217e6:	9303      	str	r3, [sp, #12]
 80217e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217ea:	443b      	add	r3, r7
 80217ec:	9309      	str	r3, [sp, #36]	; 0x24
 80217ee:	e767      	b.n	80216c0 <_vfiprintf_r+0x94>
 80217f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80217f4:	460c      	mov	r4, r1
 80217f6:	2001      	movs	r0, #1
 80217f8:	e7a5      	b.n	8021746 <_vfiprintf_r+0x11a>
 80217fa:	2300      	movs	r3, #0
 80217fc:	3401      	adds	r4, #1
 80217fe:	9305      	str	r3, [sp, #20]
 8021800:	4619      	mov	r1, r3
 8021802:	f04f 0c0a 	mov.w	ip, #10
 8021806:	4620      	mov	r0, r4
 8021808:	f810 2b01 	ldrb.w	r2, [r0], #1
 802180c:	3a30      	subs	r2, #48	; 0x30
 802180e:	2a09      	cmp	r2, #9
 8021810:	d903      	bls.n	802181a <_vfiprintf_r+0x1ee>
 8021812:	2b00      	cmp	r3, #0
 8021814:	d0c5      	beq.n	80217a2 <_vfiprintf_r+0x176>
 8021816:	9105      	str	r1, [sp, #20]
 8021818:	e7c3      	b.n	80217a2 <_vfiprintf_r+0x176>
 802181a:	fb0c 2101 	mla	r1, ip, r1, r2
 802181e:	4604      	mov	r4, r0
 8021820:	2301      	movs	r3, #1
 8021822:	e7f0      	b.n	8021806 <_vfiprintf_r+0x1da>
 8021824:	ab03      	add	r3, sp, #12
 8021826:	9300      	str	r3, [sp, #0]
 8021828:	462a      	mov	r2, r5
 802182a:	4b16      	ldr	r3, [pc, #88]	; (8021884 <_vfiprintf_r+0x258>)
 802182c:	a904      	add	r1, sp, #16
 802182e:	4630      	mov	r0, r6
 8021830:	f7fd fc82 	bl	801f138 <_printf_float>
 8021834:	4607      	mov	r7, r0
 8021836:	1c78      	adds	r0, r7, #1
 8021838:	d1d6      	bne.n	80217e8 <_vfiprintf_r+0x1bc>
 802183a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802183c:	07d9      	lsls	r1, r3, #31
 802183e:	d405      	bmi.n	802184c <_vfiprintf_r+0x220>
 8021840:	89ab      	ldrh	r3, [r5, #12]
 8021842:	059a      	lsls	r2, r3, #22
 8021844:	d402      	bmi.n	802184c <_vfiprintf_r+0x220>
 8021846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021848:	f7ff f9de 	bl	8020c08 <__retarget_lock_release_recursive>
 802184c:	89ab      	ldrh	r3, [r5, #12]
 802184e:	065b      	lsls	r3, r3, #25
 8021850:	f53f af12 	bmi.w	8021678 <_vfiprintf_r+0x4c>
 8021854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021856:	e711      	b.n	802167c <_vfiprintf_r+0x50>
 8021858:	ab03      	add	r3, sp, #12
 802185a:	9300      	str	r3, [sp, #0]
 802185c:	462a      	mov	r2, r5
 802185e:	4b09      	ldr	r3, [pc, #36]	; (8021884 <_vfiprintf_r+0x258>)
 8021860:	a904      	add	r1, sp, #16
 8021862:	4630      	mov	r0, r6
 8021864:	f7fd ff0c 	bl	801f680 <_printf_i>
 8021868:	e7e4      	b.n	8021834 <_vfiprintf_r+0x208>
 802186a:	bf00      	nop
 802186c:	0802240c 	.word	0x0802240c
 8021870:	0802242c 	.word	0x0802242c
 8021874:	080223ec 	.word	0x080223ec
 8021878:	080225a4 	.word	0x080225a4
 802187c:	080225ae 	.word	0x080225ae
 8021880:	0801f139 	.word	0x0801f139
 8021884:	08021607 	.word	0x08021607
 8021888:	080225aa 	.word	0x080225aa

0802188c <_putc_r>:
 802188c:	b570      	push	{r4, r5, r6, lr}
 802188e:	460d      	mov	r5, r1
 8021890:	4614      	mov	r4, r2
 8021892:	4606      	mov	r6, r0
 8021894:	b118      	cbz	r0, 802189e <_putc_r+0x12>
 8021896:	6983      	ldr	r3, [r0, #24]
 8021898:	b90b      	cbnz	r3, 802189e <_putc_r+0x12>
 802189a:	f7ff f911 	bl	8020ac0 <__sinit>
 802189e:	4b1c      	ldr	r3, [pc, #112]	; (8021910 <_putc_r+0x84>)
 80218a0:	429c      	cmp	r4, r3
 80218a2:	d124      	bne.n	80218ee <_putc_r+0x62>
 80218a4:	6874      	ldr	r4, [r6, #4]
 80218a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80218a8:	07d8      	lsls	r0, r3, #31
 80218aa:	d405      	bmi.n	80218b8 <_putc_r+0x2c>
 80218ac:	89a3      	ldrh	r3, [r4, #12]
 80218ae:	0599      	lsls	r1, r3, #22
 80218b0:	d402      	bmi.n	80218b8 <_putc_r+0x2c>
 80218b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80218b4:	f7ff f9a7 	bl	8020c06 <__retarget_lock_acquire_recursive>
 80218b8:	68a3      	ldr	r3, [r4, #8]
 80218ba:	3b01      	subs	r3, #1
 80218bc:	2b00      	cmp	r3, #0
 80218be:	60a3      	str	r3, [r4, #8]
 80218c0:	da05      	bge.n	80218ce <_putc_r+0x42>
 80218c2:	69a2      	ldr	r2, [r4, #24]
 80218c4:	4293      	cmp	r3, r2
 80218c6:	db1c      	blt.n	8021902 <_putc_r+0x76>
 80218c8:	b2eb      	uxtb	r3, r5
 80218ca:	2b0a      	cmp	r3, #10
 80218cc:	d019      	beq.n	8021902 <_putc_r+0x76>
 80218ce:	6823      	ldr	r3, [r4, #0]
 80218d0:	1c5a      	adds	r2, r3, #1
 80218d2:	6022      	str	r2, [r4, #0]
 80218d4:	701d      	strb	r5, [r3, #0]
 80218d6:	b2ed      	uxtb	r5, r5
 80218d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80218da:	07da      	lsls	r2, r3, #31
 80218dc:	d405      	bmi.n	80218ea <_putc_r+0x5e>
 80218de:	89a3      	ldrh	r3, [r4, #12]
 80218e0:	059b      	lsls	r3, r3, #22
 80218e2:	d402      	bmi.n	80218ea <_putc_r+0x5e>
 80218e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80218e6:	f7ff f98f 	bl	8020c08 <__retarget_lock_release_recursive>
 80218ea:	4628      	mov	r0, r5
 80218ec:	bd70      	pop	{r4, r5, r6, pc}
 80218ee:	4b09      	ldr	r3, [pc, #36]	; (8021914 <_putc_r+0x88>)
 80218f0:	429c      	cmp	r4, r3
 80218f2:	d101      	bne.n	80218f8 <_putc_r+0x6c>
 80218f4:	68b4      	ldr	r4, [r6, #8]
 80218f6:	e7d6      	b.n	80218a6 <_putc_r+0x1a>
 80218f8:	4b07      	ldr	r3, [pc, #28]	; (8021918 <_putc_r+0x8c>)
 80218fa:	429c      	cmp	r4, r3
 80218fc:	bf08      	it	eq
 80218fe:	68f4      	ldreq	r4, [r6, #12]
 8021900:	e7d1      	b.n	80218a6 <_putc_r+0x1a>
 8021902:	4629      	mov	r1, r5
 8021904:	4622      	mov	r2, r4
 8021906:	4630      	mov	r0, r6
 8021908:	f7fe f884 	bl	801fa14 <__swbuf_r>
 802190c:	4605      	mov	r5, r0
 802190e:	e7e3      	b.n	80218d8 <_putc_r+0x4c>
 8021910:	0802240c 	.word	0x0802240c
 8021914:	0802242c 	.word	0x0802242c
 8021918:	080223ec 	.word	0x080223ec

0802191c <_sbrk_r>:
 802191c:	b538      	push	{r3, r4, r5, lr}
 802191e:	4d06      	ldr	r5, [pc, #24]	; (8021938 <_sbrk_r+0x1c>)
 8021920:	2300      	movs	r3, #0
 8021922:	4604      	mov	r4, r0
 8021924:	4608      	mov	r0, r1
 8021926:	602b      	str	r3, [r5, #0]
 8021928:	f7f5 f8e4 	bl	8016af4 <_sbrk>
 802192c:	1c43      	adds	r3, r0, #1
 802192e:	d102      	bne.n	8021936 <_sbrk_r+0x1a>
 8021930:	682b      	ldr	r3, [r5, #0]
 8021932:	b103      	cbz	r3, 8021936 <_sbrk_r+0x1a>
 8021934:	6023      	str	r3, [r4, #0]
 8021936:	bd38      	pop	{r3, r4, r5, pc}
 8021938:	2000dfa4 	.word	0x2000dfa4

0802193c <__sread>:
 802193c:	b510      	push	{r4, lr}
 802193e:	460c      	mov	r4, r1
 8021940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021944:	f000 f8e2 	bl	8021b0c <_read_r>
 8021948:	2800      	cmp	r0, #0
 802194a:	bfab      	itete	ge
 802194c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802194e:	89a3      	ldrhlt	r3, [r4, #12]
 8021950:	181b      	addge	r3, r3, r0
 8021952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021956:	bfac      	ite	ge
 8021958:	6563      	strge	r3, [r4, #84]	; 0x54
 802195a:	81a3      	strhlt	r3, [r4, #12]
 802195c:	bd10      	pop	{r4, pc}

0802195e <__swrite>:
 802195e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021962:	461f      	mov	r7, r3
 8021964:	898b      	ldrh	r3, [r1, #12]
 8021966:	05db      	lsls	r3, r3, #23
 8021968:	4605      	mov	r5, r0
 802196a:	460c      	mov	r4, r1
 802196c:	4616      	mov	r6, r2
 802196e:	d505      	bpl.n	802197c <__swrite+0x1e>
 8021970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021974:	2302      	movs	r3, #2
 8021976:	2200      	movs	r2, #0
 8021978:	f000 f898 	bl	8021aac <_lseek_r>
 802197c:	89a3      	ldrh	r3, [r4, #12]
 802197e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021986:	81a3      	strh	r3, [r4, #12]
 8021988:	4632      	mov	r2, r6
 802198a:	463b      	mov	r3, r7
 802198c:	4628      	mov	r0, r5
 802198e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021992:	f000 b817 	b.w	80219c4 <_write_r>

08021996 <__sseek>:
 8021996:	b510      	push	{r4, lr}
 8021998:	460c      	mov	r4, r1
 802199a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802199e:	f000 f885 	bl	8021aac <_lseek_r>
 80219a2:	1c43      	adds	r3, r0, #1
 80219a4:	89a3      	ldrh	r3, [r4, #12]
 80219a6:	bf15      	itete	ne
 80219a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80219aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80219ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80219b2:	81a3      	strheq	r3, [r4, #12]
 80219b4:	bf18      	it	ne
 80219b6:	81a3      	strhne	r3, [r4, #12]
 80219b8:	bd10      	pop	{r4, pc}

080219ba <__sclose>:
 80219ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219be:	f000 b831 	b.w	8021a24 <_close_r>
	...

080219c4 <_write_r>:
 80219c4:	b538      	push	{r3, r4, r5, lr}
 80219c6:	4d07      	ldr	r5, [pc, #28]	; (80219e4 <_write_r+0x20>)
 80219c8:	4604      	mov	r4, r0
 80219ca:	4608      	mov	r0, r1
 80219cc:	4611      	mov	r1, r2
 80219ce:	2200      	movs	r2, #0
 80219d0:	602a      	str	r2, [r5, #0]
 80219d2:	461a      	mov	r2, r3
 80219d4:	f7f5 f83a 	bl	8016a4c <_write>
 80219d8:	1c43      	adds	r3, r0, #1
 80219da:	d102      	bne.n	80219e2 <_write_r+0x1e>
 80219dc:	682b      	ldr	r3, [r5, #0]
 80219de:	b103      	cbz	r3, 80219e2 <_write_r+0x1e>
 80219e0:	6023      	str	r3, [r4, #0]
 80219e2:	bd38      	pop	{r3, r4, r5, pc}
 80219e4:	2000dfa4 	.word	0x2000dfa4

080219e8 <__assert_func>:
 80219e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80219ea:	4614      	mov	r4, r2
 80219ec:	461a      	mov	r2, r3
 80219ee:	4b09      	ldr	r3, [pc, #36]	; (8021a14 <__assert_func+0x2c>)
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	4605      	mov	r5, r0
 80219f4:	68d8      	ldr	r0, [r3, #12]
 80219f6:	b14c      	cbz	r4, 8021a0c <__assert_func+0x24>
 80219f8:	4b07      	ldr	r3, [pc, #28]	; (8021a18 <__assert_func+0x30>)
 80219fa:	9100      	str	r1, [sp, #0]
 80219fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021a00:	4906      	ldr	r1, [pc, #24]	; (8021a1c <__assert_func+0x34>)
 8021a02:	462b      	mov	r3, r5
 8021a04:	f000 f81e 	bl	8021a44 <fiprintf>
 8021a08:	f000 f89f 	bl	8021b4a <abort>
 8021a0c:	4b04      	ldr	r3, [pc, #16]	; (8021a20 <__assert_func+0x38>)
 8021a0e:	461c      	mov	r4, r3
 8021a10:	e7f3      	b.n	80219fa <__assert_func+0x12>
 8021a12:	bf00      	nop
 8021a14:	2000002c 	.word	0x2000002c
 8021a18:	080225b5 	.word	0x080225b5
 8021a1c:	080225c2 	.word	0x080225c2
 8021a20:	080225f0 	.word	0x080225f0

08021a24 <_close_r>:
 8021a24:	b538      	push	{r3, r4, r5, lr}
 8021a26:	4d06      	ldr	r5, [pc, #24]	; (8021a40 <_close_r+0x1c>)
 8021a28:	2300      	movs	r3, #0
 8021a2a:	4604      	mov	r4, r0
 8021a2c:	4608      	mov	r0, r1
 8021a2e:	602b      	str	r3, [r5, #0]
 8021a30:	f7f5 f82c 	bl	8016a8c <_close>
 8021a34:	1c43      	adds	r3, r0, #1
 8021a36:	d102      	bne.n	8021a3e <_close_r+0x1a>
 8021a38:	682b      	ldr	r3, [r5, #0]
 8021a3a:	b103      	cbz	r3, 8021a3e <_close_r+0x1a>
 8021a3c:	6023      	str	r3, [r4, #0]
 8021a3e:	bd38      	pop	{r3, r4, r5, pc}
 8021a40:	2000dfa4 	.word	0x2000dfa4

08021a44 <fiprintf>:
 8021a44:	b40e      	push	{r1, r2, r3}
 8021a46:	b503      	push	{r0, r1, lr}
 8021a48:	4601      	mov	r1, r0
 8021a4a:	ab03      	add	r3, sp, #12
 8021a4c:	4805      	ldr	r0, [pc, #20]	; (8021a64 <fiprintf+0x20>)
 8021a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021a52:	6800      	ldr	r0, [r0, #0]
 8021a54:	9301      	str	r3, [sp, #4]
 8021a56:	f7ff fde9 	bl	802162c <_vfiprintf_r>
 8021a5a:	b002      	add	sp, #8
 8021a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021a60:	b003      	add	sp, #12
 8021a62:	4770      	bx	lr
 8021a64:	2000002c 	.word	0x2000002c

08021a68 <_fstat_r>:
 8021a68:	b538      	push	{r3, r4, r5, lr}
 8021a6a:	4d07      	ldr	r5, [pc, #28]	; (8021a88 <_fstat_r+0x20>)
 8021a6c:	2300      	movs	r3, #0
 8021a6e:	4604      	mov	r4, r0
 8021a70:	4608      	mov	r0, r1
 8021a72:	4611      	mov	r1, r2
 8021a74:	602b      	str	r3, [r5, #0]
 8021a76:	f7f5 f815 	bl	8016aa4 <_fstat>
 8021a7a:	1c43      	adds	r3, r0, #1
 8021a7c:	d102      	bne.n	8021a84 <_fstat_r+0x1c>
 8021a7e:	682b      	ldr	r3, [r5, #0]
 8021a80:	b103      	cbz	r3, 8021a84 <_fstat_r+0x1c>
 8021a82:	6023      	str	r3, [r4, #0]
 8021a84:	bd38      	pop	{r3, r4, r5, pc}
 8021a86:	bf00      	nop
 8021a88:	2000dfa4 	.word	0x2000dfa4

08021a8c <_isatty_r>:
 8021a8c:	b538      	push	{r3, r4, r5, lr}
 8021a8e:	4d06      	ldr	r5, [pc, #24]	; (8021aa8 <_isatty_r+0x1c>)
 8021a90:	2300      	movs	r3, #0
 8021a92:	4604      	mov	r4, r0
 8021a94:	4608      	mov	r0, r1
 8021a96:	602b      	str	r3, [r5, #0]
 8021a98:	f7f5 f814 	bl	8016ac4 <_isatty>
 8021a9c:	1c43      	adds	r3, r0, #1
 8021a9e:	d102      	bne.n	8021aa6 <_isatty_r+0x1a>
 8021aa0:	682b      	ldr	r3, [r5, #0]
 8021aa2:	b103      	cbz	r3, 8021aa6 <_isatty_r+0x1a>
 8021aa4:	6023      	str	r3, [r4, #0]
 8021aa6:	bd38      	pop	{r3, r4, r5, pc}
 8021aa8:	2000dfa4 	.word	0x2000dfa4

08021aac <_lseek_r>:
 8021aac:	b538      	push	{r3, r4, r5, lr}
 8021aae:	4d07      	ldr	r5, [pc, #28]	; (8021acc <_lseek_r+0x20>)
 8021ab0:	4604      	mov	r4, r0
 8021ab2:	4608      	mov	r0, r1
 8021ab4:	4611      	mov	r1, r2
 8021ab6:	2200      	movs	r2, #0
 8021ab8:	602a      	str	r2, [r5, #0]
 8021aba:	461a      	mov	r2, r3
 8021abc:	f7f5 f80d 	bl	8016ada <_lseek>
 8021ac0:	1c43      	adds	r3, r0, #1
 8021ac2:	d102      	bne.n	8021aca <_lseek_r+0x1e>
 8021ac4:	682b      	ldr	r3, [r5, #0]
 8021ac6:	b103      	cbz	r3, 8021aca <_lseek_r+0x1e>
 8021ac8:	6023      	str	r3, [r4, #0]
 8021aca:	bd38      	pop	{r3, r4, r5, pc}
 8021acc:	2000dfa4 	.word	0x2000dfa4

08021ad0 <__ascii_mbtowc>:
 8021ad0:	b082      	sub	sp, #8
 8021ad2:	b901      	cbnz	r1, 8021ad6 <__ascii_mbtowc+0x6>
 8021ad4:	a901      	add	r1, sp, #4
 8021ad6:	b142      	cbz	r2, 8021aea <__ascii_mbtowc+0x1a>
 8021ad8:	b14b      	cbz	r3, 8021aee <__ascii_mbtowc+0x1e>
 8021ada:	7813      	ldrb	r3, [r2, #0]
 8021adc:	600b      	str	r3, [r1, #0]
 8021ade:	7812      	ldrb	r2, [r2, #0]
 8021ae0:	1e10      	subs	r0, r2, #0
 8021ae2:	bf18      	it	ne
 8021ae4:	2001      	movne	r0, #1
 8021ae6:	b002      	add	sp, #8
 8021ae8:	4770      	bx	lr
 8021aea:	4610      	mov	r0, r2
 8021aec:	e7fb      	b.n	8021ae6 <__ascii_mbtowc+0x16>
 8021aee:	f06f 0001 	mvn.w	r0, #1
 8021af2:	e7f8      	b.n	8021ae6 <__ascii_mbtowc+0x16>

08021af4 <__malloc_lock>:
 8021af4:	4801      	ldr	r0, [pc, #4]	; (8021afc <__malloc_lock+0x8>)
 8021af6:	f7ff b886 	b.w	8020c06 <__retarget_lock_acquire_recursive>
 8021afa:	bf00      	nop
 8021afc:	2000df98 	.word	0x2000df98

08021b00 <__malloc_unlock>:
 8021b00:	4801      	ldr	r0, [pc, #4]	; (8021b08 <__malloc_unlock+0x8>)
 8021b02:	f7ff b881 	b.w	8020c08 <__retarget_lock_release_recursive>
 8021b06:	bf00      	nop
 8021b08:	2000df98 	.word	0x2000df98

08021b0c <_read_r>:
 8021b0c:	b538      	push	{r3, r4, r5, lr}
 8021b0e:	4d07      	ldr	r5, [pc, #28]	; (8021b2c <_read_r+0x20>)
 8021b10:	4604      	mov	r4, r0
 8021b12:	4608      	mov	r0, r1
 8021b14:	4611      	mov	r1, r2
 8021b16:	2200      	movs	r2, #0
 8021b18:	602a      	str	r2, [r5, #0]
 8021b1a:	461a      	mov	r2, r3
 8021b1c:	f7f4 ff79 	bl	8016a12 <_read>
 8021b20:	1c43      	adds	r3, r0, #1
 8021b22:	d102      	bne.n	8021b2a <_read_r+0x1e>
 8021b24:	682b      	ldr	r3, [r5, #0]
 8021b26:	b103      	cbz	r3, 8021b2a <_read_r+0x1e>
 8021b28:	6023      	str	r3, [r4, #0]
 8021b2a:	bd38      	pop	{r3, r4, r5, pc}
 8021b2c:	2000dfa4 	.word	0x2000dfa4

08021b30 <__ascii_wctomb>:
 8021b30:	b149      	cbz	r1, 8021b46 <__ascii_wctomb+0x16>
 8021b32:	2aff      	cmp	r2, #255	; 0xff
 8021b34:	bf85      	ittet	hi
 8021b36:	238a      	movhi	r3, #138	; 0x8a
 8021b38:	6003      	strhi	r3, [r0, #0]
 8021b3a:	700a      	strbls	r2, [r1, #0]
 8021b3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021b40:	bf98      	it	ls
 8021b42:	2001      	movls	r0, #1
 8021b44:	4770      	bx	lr
 8021b46:	4608      	mov	r0, r1
 8021b48:	4770      	bx	lr

08021b4a <abort>:
 8021b4a:	b508      	push	{r3, lr}
 8021b4c:	2006      	movs	r0, #6
 8021b4e:	f000 f82b 	bl	8021ba8 <raise>
 8021b52:	2001      	movs	r0, #1
 8021b54:	f7f4 ff53 	bl	80169fe <_exit>

08021b58 <_raise_r>:
 8021b58:	291f      	cmp	r1, #31
 8021b5a:	b538      	push	{r3, r4, r5, lr}
 8021b5c:	4604      	mov	r4, r0
 8021b5e:	460d      	mov	r5, r1
 8021b60:	d904      	bls.n	8021b6c <_raise_r+0x14>
 8021b62:	2316      	movs	r3, #22
 8021b64:	6003      	str	r3, [r0, #0]
 8021b66:	f04f 30ff 	mov.w	r0, #4294967295
 8021b6a:	bd38      	pop	{r3, r4, r5, pc}
 8021b6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021b6e:	b112      	cbz	r2, 8021b76 <_raise_r+0x1e>
 8021b70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021b74:	b94b      	cbnz	r3, 8021b8a <_raise_r+0x32>
 8021b76:	4620      	mov	r0, r4
 8021b78:	f000 f830 	bl	8021bdc <_getpid_r>
 8021b7c:	462a      	mov	r2, r5
 8021b7e:	4601      	mov	r1, r0
 8021b80:	4620      	mov	r0, r4
 8021b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021b86:	f000 b817 	b.w	8021bb8 <_kill_r>
 8021b8a:	2b01      	cmp	r3, #1
 8021b8c:	d00a      	beq.n	8021ba4 <_raise_r+0x4c>
 8021b8e:	1c59      	adds	r1, r3, #1
 8021b90:	d103      	bne.n	8021b9a <_raise_r+0x42>
 8021b92:	2316      	movs	r3, #22
 8021b94:	6003      	str	r3, [r0, #0]
 8021b96:	2001      	movs	r0, #1
 8021b98:	e7e7      	b.n	8021b6a <_raise_r+0x12>
 8021b9a:	2400      	movs	r4, #0
 8021b9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021ba0:	4628      	mov	r0, r5
 8021ba2:	4798      	blx	r3
 8021ba4:	2000      	movs	r0, #0
 8021ba6:	e7e0      	b.n	8021b6a <_raise_r+0x12>

08021ba8 <raise>:
 8021ba8:	4b02      	ldr	r3, [pc, #8]	; (8021bb4 <raise+0xc>)
 8021baa:	4601      	mov	r1, r0
 8021bac:	6818      	ldr	r0, [r3, #0]
 8021bae:	f7ff bfd3 	b.w	8021b58 <_raise_r>
 8021bb2:	bf00      	nop
 8021bb4:	2000002c 	.word	0x2000002c

08021bb8 <_kill_r>:
 8021bb8:	b538      	push	{r3, r4, r5, lr}
 8021bba:	4d07      	ldr	r5, [pc, #28]	; (8021bd8 <_kill_r+0x20>)
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	4604      	mov	r4, r0
 8021bc0:	4608      	mov	r0, r1
 8021bc2:	4611      	mov	r1, r2
 8021bc4:	602b      	str	r3, [r5, #0]
 8021bc6:	f7f4 ff0a 	bl	80169de <_kill>
 8021bca:	1c43      	adds	r3, r0, #1
 8021bcc:	d102      	bne.n	8021bd4 <_kill_r+0x1c>
 8021bce:	682b      	ldr	r3, [r5, #0]
 8021bd0:	b103      	cbz	r3, 8021bd4 <_kill_r+0x1c>
 8021bd2:	6023      	str	r3, [r4, #0]
 8021bd4:	bd38      	pop	{r3, r4, r5, pc}
 8021bd6:	bf00      	nop
 8021bd8:	2000dfa4 	.word	0x2000dfa4

08021bdc <_getpid_r>:
 8021bdc:	f7f4 bef7 	b.w	80169ce <_getpid>

08021be0 <exp>:
 8021be0:	b538      	push	{r3, r4, r5, lr}
 8021be2:	ed2d 8b02 	vpush	{d8}
 8021be6:	ec55 4b10 	vmov	r4, r5, d0
 8021bea:	f000 f841 	bl	8021c70 <__ieee754_exp>
 8021bee:	eeb0 8a40 	vmov.f32	s16, s0
 8021bf2:	eef0 8a60 	vmov.f32	s17, s1
 8021bf6:	ec45 4b10 	vmov	d0, r4, r5
 8021bfa:	f000 f9eb 	bl	8021fd4 <finite>
 8021bfe:	b168      	cbz	r0, 8021c1c <exp+0x3c>
 8021c00:	a317      	add	r3, pc, #92	; (adr r3, 8021c60 <exp+0x80>)
 8021c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c06:	4620      	mov	r0, r4
 8021c08:	4629      	mov	r1, r5
 8021c0a:	f7de ffad 	bl	8000b68 <__aeabi_dcmpgt>
 8021c0e:	b160      	cbz	r0, 8021c2a <exp+0x4a>
 8021c10:	f7fd f9b2 	bl	801ef78 <__errno>
 8021c14:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8021c50 <exp+0x70>
 8021c18:	2322      	movs	r3, #34	; 0x22
 8021c1a:	6003      	str	r3, [r0, #0]
 8021c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8021c20:	eef0 0a68 	vmov.f32	s1, s17
 8021c24:	ecbd 8b02 	vpop	{d8}
 8021c28:	bd38      	pop	{r3, r4, r5, pc}
 8021c2a:	a30f      	add	r3, pc, #60	; (adr r3, 8021c68 <exp+0x88>)
 8021c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c30:	4620      	mov	r0, r4
 8021c32:	4629      	mov	r1, r5
 8021c34:	f7de ff7a 	bl	8000b2c <__aeabi_dcmplt>
 8021c38:	2800      	cmp	r0, #0
 8021c3a:	d0ef      	beq.n	8021c1c <exp+0x3c>
 8021c3c:	f7fd f99c 	bl	801ef78 <__errno>
 8021c40:	2322      	movs	r3, #34	; 0x22
 8021c42:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8021c58 <exp+0x78>
 8021c46:	6003      	str	r3, [r0, #0]
 8021c48:	e7e8      	b.n	8021c1c <exp+0x3c>
 8021c4a:	bf00      	nop
 8021c4c:	f3af 8000 	nop.w
 8021c50:	00000000 	.word	0x00000000
 8021c54:	7ff00000 	.word	0x7ff00000
	...
 8021c60:	fefa39ef 	.word	0xfefa39ef
 8021c64:	40862e42 	.word	0x40862e42
 8021c68:	d52d3051 	.word	0xd52d3051
 8021c6c:	c0874910 	.word	0xc0874910

08021c70 <__ieee754_exp>:
 8021c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c74:	ec55 4b10 	vmov	r4, r5, d0
 8021c78:	49b5      	ldr	r1, [pc, #724]	; (8021f50 <__ieee754_exp+0x2e0>)
 8021c7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021c7e:	428b      	cmp	r3, r1
 8021c80:	ed2d 8b04 	vpush	{d8-d9}
 8021c84:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8021c88:	d93d      	bls.n	8021d06 <__ieee754_exp+0x96>
 8021c8a:	49b2      	ldr	r1, [pc, #712]	; (8021f54 <__ieee754_exp+0x2e4>)
 8021c8c:	428b      	cmp	r3, r1
 8021c8e:	d918      	bls.n	8021cc2 <__ieee754_exp+0x52>
 8021c90:	ee10 3a10 	vmov	r3, s0
 8021c94:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8021c98:	4313      	orrs	r3, r2
 8021c9a:	d009      	beq.n	8021cb0 <__ieee754_exp+0x40>
 8021c9c:	ee10 2a10 	vmov	r2, s0
 8021ca0:	462b      	mov	r3, r5
 8021ca2:	4620      	mov	r0, r4
 8021ca4:	4629      	mov	r1, r5
 8021ca6:	f7de fb19 	bl	80002dc <__adddf3>
 8021caa:	4604      	mov	r4, r0
 8021cac:	460d      	mov	r5, r1
 8021cae:	e002      	b.n	8021cb6 <__ieee754_exp+0x46>
 8021cb0:	b10e      	cbz	r6, 8021cb6 <__ieee754_exp+0x46>
 8021cb2:	2400      	movs	r4, #0
 8021cb4:	2500      	movs	r5, #0
 8021cb6:	ecbd 8b04 	vpop	{d8-d9}
 8021cba:	ec45 4b10 	vmov	d0, r4, r5
 8021cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021cc2:	a38d      	add	r3, pc, #564	; (adr r3, 8021ef8 <__ieee754_exp+0x288>)
 8021cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cc8:	ee10 0a10 	vmov	r0, s0
 8021ccc:	4629      	mov	r1, r5
 8021cce:	f7de ff4b 	bl	8000b68 <__aeabi_dcmpgt>
 8021cd2:	4607      	mov	r7, r0
 8021cd4:	b130      	cbz	r0, 8021ce4 <__ieee754_exp+0x74>
 8021cd6:	ecbd 8b04 	vpop	{d8-d9}
 8021cda:	2000      	movs	r0, #0
 8021cdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ce0:	f000 b96f 	b.w	8021fc2 <__math_oflow>
 8021ce4:	a386      	add	r3, pc, #536	; (adr r3, 8021f00 <__ieee754_exp+0x290>)
 8021ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cea:	4620      	mov	r0, r4
 8021cec:	4629      	mov	r1, r5
 8021cee:	f7de ff1d 	bl	8000b2c <__aeabi_dcmplt>
 8021cf2:	2800      	cmp	r0, #0
 8021cf4:	f000 808b 	beq.w	8021e0e <__ieee754_exp+0x19e>
 8021cf8:	ecbd 8b04 	vpop	{d8-d9}
 8021cfc:	4638      	mov	r0, r7
 8021cfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d02:	f000 b955 	b.w	8021fb0 <__math_uflow>
 8021d06:	4a94      	ldr	r2, [pc, #592]	; (8021f58 <__ieee754_exp+0x2e8>)
 8021d08:	4293      	cmp	r3, r2
 8021d0a:	f240 80ac 	bls.w	8021e66 <__ieee754_exp+0x1f6>
 8021d0e:	4a93      	ldr	r2, [pc, #588]	; (8021f5c <__ieee754_exp+0x2ec>)
 8021d10:	4293      	cmp	r3, r2
 8021d12:	d87c      	bhi.n	8021e0e <__ieee754_exp+0x19e>
 8021d14:	4b92      	ldr	r3, [pc, #584]	; (8021f60 <__ieee754_exp+0x2f0>)
 8021d16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d1e:	ee10 0a10 	vmov	r0, s0
 8021d22:	4629      	mov	r1, r5
 8021d24:	f7de fad8 	bl	80002d8 <__aeabi_dsub>
 8021d28:	4b8e      	ldr	r3, [pc, #568]	; (8021f64 <__ieee754_exp+0x2f4>)
 8021d2a:	00f7      	lsls	r7, r6, #3
 8021d2c:	443b      	add	r3, r7
 8021d2e:	ed93 7b00 	vldr	d7, [r3]
 8021d32:	f1c6 0a01 	rsb	sl, r6, #1
 8021d36:	4680      	mov	r8, r0
 8021d38:	4689      	mov	r9, r1
 8021d3a:	ebaa 0a06 	sub.w	sl, sl, r6
 8021d3e:	eeb0 8a47 	vmov.f32	s16, s14
 8021d42:	eef0 8a67 	vmov.f32	s17, s15
 8021d46:	ec53 2b18 	vmov	r2, r3, d8
 8021d4a:	4640      	mov	r0, r8
 8021d4c:	4649      	mov	r1, r9
 8021d4e:	f7de fac3 	bl	80002d8 <__aeabi_dsub>
 8021d52:	4604      	mov	r4, r0
 8021d54:	460d      	mov	r5, r1
 8021d56:	4622      	mov	r2, r4
 8021d58:	462b      	mov	r3, r5
 8021d5a:	4620      	mov	r0, r4
 8021d5c:	4629      	mov	r1, r5
 8021d5e:	f7de fc73 	bl	8000648 <__aeabi_dmul>
 8021d62:	a369      	add	r3, pc, #420	; (adr r3, 8021f08 <__ieee754_exp+0x298>)
 8021d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d68:	4606      	mov	r6, r0
 8021d6a:	460f      	mov	r7, r1
 8021d6c:	f7de fc6c 	bl	8000648 <__aeabi_dmul>
 8021d70:	a367      	add	r3, pc, #412	; (adr r3, 8021f10 <__ieee754_exp+0x2a0>)
 8021d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d76:	f7de faaf 	bl	80002d8 <__aeabi_dsub>
 8021d7a:	4632      	mov	r2, r6
 8021d7c:	463b      	mov	r3, r7
 8021d7e:	f7de fc63 	bl	8000648 <__aeabi_dmul>
 8021d82:	a365      	add	r3, pc, #404	; (adr r3, 8021f18 <__ieee754_exp+0x2a8>)
 8021d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d88:	f7de faa8 	bl	80002dc <__adddf3>
 8021d8c:	4632      	mov	r2, r6
 8021d8e:	463b      	mov	r3, r7
 8021d90:	f7de fc5a 	bl	8000648 <__aeabi_dmul>
 8021d94:	a362      	add	r3, pc, #392	; (adr r3, 8021f20 <__ieee754_exp+0x2b0>)
 8021d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d9a:	f7de fa9d 	bl	80002d8 <__aeabi_dsub>
 8021d9e:	4632      	mov	r2, r6
 8021da0:	463b      	mov	r3, r7
 8021da2:	f7de fc51 	bl	8000648 <__aeabi_dmul>
 8021da6:	a360      	add	r3, pc, #384	; (adr r3, 8021f28 <__ieee754_exp+0x2b8>)
 8021da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dac:	f7de fa96 	bl	80002dc <__adddf3>
 8021db0:	4632      	mov	r2, r6
 8021db2:	463b      	mov	r3, r7
 8021db4:	f7de fc48 	bl	8000648 <__aeabi_dmul>
 8021db8:	4602      	mov	r2, r0
 8021dba:	460b      	mov	r3, r1
 8021dbc:	4620      	mov	r0, r4
 8021dbe:	4629      	mov	r1, r5
 8021dc0:	f7de fa8a 	bl	80002d8 <__aeabi_dsub>
 8021dc4:	4602      	mov	r2, r0
 8021dc6:	460b      	mov	r3, r1
 8021dc8:	4606      	mov	r6, r0
 8021dca:	460f      	mov	r7, r1
 8021dcc:	4620      	mov	r0, r4
 8021dce:	4629      	mov	r1, r5
 8021dd0:	f7de fc3a 	bl	8000648 <__aeabi_dmul>
 8021dd4:	ec41 0b19 	vmov	d9, r0, r1
 8021dd8:	f1ba 0f00 	cmp.w	sl, #0
 8021ddc:	d15d      	bne.n	8021e9a <__ieee754_exp+0x22a>
 8021dde:	2200      	movs	r2, #0
 8021de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021de4:	4630      	mov	r0, r6
 8021de6:	4639      	mov	r1, r7
 8021de8:	f7de fa76 	bl	80002d8 <__aeabi_dsub>
 8021dec:	4602      	mov	r2, r0
 8021dee:	460b      	mov	r3, r1
 8021df0:	ec51 0b19 	vmov	r0, r1, d9
 8021df4:	f7de fd52 	bl	800089c <__aeabi_ddiv>
 8021df8:	4622      	mov	r2, r4
 8021dfa:	462b      	mov	r3, r5
 8021dfc:	f7de fa6c 	bl	80002d8 <__aeabi_dsub>
 8021e00:	4602      	mov	r2, r0
 8021e02:	460b      	mov	r3, r1
 8021e04:	2000      	movs	r0, #0
 8021e06:	4958      	ldr	r1, [pc, #352]	; (8021f68 <__ieee754_exp+0x2f8>)
 8021e08:	f7de fa66 	bl	80002d8 <__aeabi_dsub>
 8021e0c:	e74d      	b.n	8021caa <__ieee754_exp+0x3a>
 8021e0e:	4857      	ldr	r0, [pc, #348]	; (8021f6c <__ieee754_exp+0x2fc>)
 8021e10:	a347      	add	r3, pc, #284	; (adr r3, 8021f30 <__ieee754_exp+0x2c0>)
 8021e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e16:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8021e1a:	4629      	mov	r1, r5
 8021e1c:	4620      	mov	r0, r4
 8021e1e:	f7de fc13 	bl	8000648 <__aeabi_dmul>
 8021e22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021e26:	f7de fa59 	bl	80002dc <__adddf3>
 8021e2a:	f7de febd 	bl	8000ba8 <__aeabi_d2iz>
 8021e2e:	4682      	mov	sl, r0
 8021e30:	f7de fba0 	bl	8000574 <__aeabi_i2d>
 8021e34:	a340      	add	r3, pc, #256	; (adr r3, 8021f38 <__ieee754_exp+0x2c8>)
 8021e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e3a:	4606      	mov	r6, r0
 8021e3c:	460f      	mov	r7, r1
 8021e3e:	f7de fc03 	bl	8000648 <__aeabi_dmul>
 8021e42:	4602      	mov	r2, r0
 8021e44:	460b      	mov	r3, r1
 8021e46:	4620      	mov	r0, r4
 8021e48:	4629      	mov	r1, r5
 8021e4a:	f7de fa45 	bl	80002d8 <__aeabi_dsub>
 8021e4e:	a33c      	add	r3, pc, #240	; (adr r3, 8021f40 <__ieee754_exp+0x2d0>)
 8021e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e54:	4680      	mov	r8, r0
 8021e56:	4689      	mov	r9, r1
 8021e58:	4630      	mov	r0, r6
 8021e5a:	4639      	mov	r1, r7
 8021e5c:	f7de fbf4 	bl	8000648 <__aeabi_dmul>
 8021e60:	ec41 0b18 	vmov	d8, r0, r1
 8021e64:	e76f      	b.n	8021d46 <__ieee754_exp+0xd6>
 8021e66:	4a42      	ldr	r2, [pc, #264]	; (8021f70 <__ieee754_exp+0x300>)
 8021e68:	4293      	cmp	r3, r2
 8021e6a:	d811      	bhi.n	8021e90 <__ieee754_exp+0x220>
 8021e6c:	a336      	add	r3, pc, #216	; (adr r3, 8021f48 <__ieee754_exp+0x2d8>)
 8021e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e72:	ee10 0a10 	vmov	r0, s0
 8021e76:	4629      	mov	r1, r5
 8021e78:	f7de fa30 	bl	80002dc <__adddf3>
 8021e7c:	4b3a      	ldr	r3, [pc, #232]	; (8021f68 <__ieee754_exp+0x2f8>)
 8021e7e:	2200      	movs	r2, #0
 8021e80:	f7de fe72 	bl	8000b68 <__aeabi_dcmpgt>
 8021e84:	b138      	cbz	r0, 8021e96 <__ieee754_exp+0x226>
 8021e86:	4b38      	ldr	r3, [pc, #224]	; (8021f68 <__ieee754_exp+0x2f8>)
 8021e88:	2200      	movs	r2, #0
 8021e8a:	4620      	mov	r0, r4
 8021e8c:	4629      	mov	r1, r5
 8021e8e:	e70a      	b.n	8021ca6 <__ieee754_exp+0x36>
 8021e90:	f04f 0a00 	mov.w	sl, #0
 8021e94:	e75f      	b.n	8021d56 <__ieee754_exp+0xe6>
 8021e96:	4682      	mov	sl, r0
 8021e98:	e75d      	b.n	8021d56 <__ieee754_exp+0xe6>
 8021e9a:	4632      	mov	r2, r6
 8021e9c:	463b      	mov	r3, r7
 8021e9e:	2000      	movs	r0, #0
 8021ea0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8021ea4:	f7de fa18 	bl	80002d8 <__aeabi_dsub>
 8021ea8:	4602      	mov	r2, r0
 8021eaa:	460b      	mov	r3, r1
 8021eac:	ec51 0b19 	vmov	r0, r1, d9
 8021eb0:	f7de fcf4 	bl	800089c <__aeabi_ddiv>
 8021eb4:	4602      	mov	r2, r0
 8021eb6:	460b      	mov	r3, r1
 8021eb8:	ec51 0b18 	vmov	r0, r1, d8
 8021ebc:	f7de fa0c 	bl	80002d8 <__aeabi_dsub>
 8021ec0:	4642      	mov	r2, r8
 8021ec2:	464b      	mov	r3, r9
 8021ec4:	f7de fa08 	bl	80002d8 <__aeabi_dsub>
 8021ec8:	4602      	mov	r2, r0
 8021eca:	460b      	mov	r3, r1
 8021ecc:	2000      	movs	r0, #0
 8021ece:	4926      	ldr	r1, [pc, #152]	; (8021f68 <__ieee754_exp+0x2f8>)
 8021ed0:	f7de fa02 	bl	80002d8 <__aeabi_dsub>
 8021ed4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8021ed8:	4592      	cmp	sl, r2
 8021eda:	db02      	blt.n	8021ee2 <__ieee754_exp+0x272>
 8021edc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021ee0:	e6e3      	b.n	8021caa <__ieee754_exp+0x3a>
 8021ee2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8021ee6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021eea:	2200      	movs	r2, #0
 8021eec:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8021ef0:	f7de fbaa 	bl	8000648 <__aeabi_dmul>
 8021ef4:	e6d9      	b.n	8021caa <__ieee754_exp+0x3a>
 8021ef6:	bf00      	nop
 8021ef8:	fefa39ef 	.word	0xfefa39ef
 8021efc:	40862e42 	.word	0x40862e42
 8021f00:	d52d3051 	.word	0xd52d3051
 8021f04:	c0874910 	.word	0xc0874910
 8021f08:	72bea4d0 	.word	0x72bea4d0
 8021f0c:	3e663769 	.word	0x3e663769
 8021f10:	c5d26bf1 	.word	0xc5d26bf1
 8021f14:	3ebbbd41 	.word	0x3ebbbd41
 8021f18:	af25de2c 	.word	0xaf25de2c
 8021f1c:	3f11566a 	.word	0x3f11566a
 8021f20:	16bebd93 	.word	0x16bebd93
 8021f24:	3f66c16c 	.word	0x3f66c16c
 8021f28:	5555553e 	.word	0x5555553e
 8021f2c:	3fc55555 	.word	0x3fc55555
 8021f30:	652b82fe 	.word	0x652b82fe
 8021f34:	3ff71547 	.word	0x3ff71547
 8021f38:	fee00000 	.word	0xfee00000
 8021f3c:	3fe62e42 	.word	0x3fe62e42
 8021f40:	35793c76 	.word	0x35793c76
 8021f44:	3dea39ef 	.word	0x3dea39ef
 8021f48:	8800759c 	.word	0x8800759c
 8021f4c:	7e37e43c 	.word	0x7e37e43c
 8021f50:	40862e41 	.word	0x40862e41
 8021f54:	7fefffff 	.word	0x7fefffff
 8021f58:	3fd62e42 	.word	0x3fd62e42
 8021f5c:	3ff0a2b1 	.word	0x3ff0a2b1
 8021f60:	08022710 	.word	0x08022710
 8021f64:	08022720 	.word	0x08022720
 8021f68:	3ff00000 	.word	0x3ff00000
 8021f6c:	08022700 	.word	0x08022700
 8021f70:	3defffff 	.word	0x3defffff

08021f74 <with_errno>:
 8021f74:	b570      	push	{r4, r5, r6, lr}
 8021f76:	4604      	mov	r4, r0
 8021f78:	460d      	mov	r5, r1
 8021f7a:	4616      	mov	r6, r2
 8021f7c:	f7fc fffc 	bl	801ef78 <__errno>
 8021f80:	4629      	mov	r1, r5
 8021f82:	6006      	str	r6, [r0, #0]
 8021f84:	4620      	mov	r0, r4
 8021f86:	bd70      	pop	{r4, r5, r6, pc}

08021f88 <xflow>:
 8021f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021f8a:	4614      	mov	r4, r2
 8021f8c:	461d      	mov	r5, r3
 8021f8e:	b108      	cbz	r0, 8021f94 <xflow+0xc>
 8021f90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021f94:	e9cd 2300 	strd	r2, r3, [sp]
 8021f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021f9c:	4620      	mov	r0, r4
 8021f9e:	4629      	mov	r1, r5
 8021fa0:	f7de fb52 	bl	8000648 <__aeabi_dmul>
 8021fa4:	2222      	movs	r2, #34	; 0x22
 8021fa6:	b003      	add	sp, #12
 8021fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021fac:	f7ff bfe2 	b.w	8021f74 <with_errno>

08021fb0 <__math_uflow>:
 8021fb0:	b508      	push	{r3, lr}
 8021fb2:	2200      	movs	r2, #0
 8021fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8021fb8:	f7ff ffe6 	bl	8021f88 <xflow>
 8021fbc:	ec41 0b10 	vmov	d0, r0, r1
 8021fc0:	bd08      	pop	{r3, pc}

08021fc2 <__math_oflow>:
 8021fc2:	b508      	push	{r3, lr}
 8021fc4:	2200      	movs	r2, #0
 8021fc6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8021fca:	f7ff ffdd 	bl	8021f88 <xflow>
 8021fce:	ec41 0b10 	vmov	d0, r0, r1
 8021fd2:	bd08      	pop	{r3, pc}

08021fd4 <finite>:
 8021fd4:	b082      	sub	sp, #8
 8021fd6:	ed8d 0b00 	vstr	d0, [sp]
 8021fda:	9801      	ldr	r0, [sp, #4]
 8021fdc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8021fe0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021fe4:	0fc0      	lsrs	r0, r0, #31
 8021fe6:	b002      	add	sp, #8
 8021fe8:	4770      	bx	lr
	...

08021fec <_init>:
 8021fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fee:	bf00      	nop
 8021ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ff2:	bc08      	pop	{r3}
 8021ff4:	469e      	mov	lr, r3
 8021ff6:	4770      	bx	lr

08021ff8 <_fini>:
 8021ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ffa:	bf00      	nop
 8021ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ffe:	bc08      	pop	{r3}
 8022000:	469e      	mov	lr, r3
 8022002:	4770      	bx	lr
