
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022d2c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08022f10  08022f10  00032f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023638  08023638  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08023638  08023638  00033638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023640  08023640  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023640  08023640  00033640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023644  08023644  00033644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08023648  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f5d8  200001fc  08023844  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f7d4  08023844  0004f7d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278b8  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ff3  00000000  00000000  00067ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0006dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc0  00000000  00000000  0006fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002853d  00000000  00000000  00071750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031b1a  00000000  00000000  00099c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2d9  00000000  00000000  000cb7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6a80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097a8  00000000  00000000  001b6ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08022ef4 	.word	0x08022ef4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08022ef4 	.word	0x08022ef4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f59999a 	.word	0x3f59999a

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <reset_speed+0x44>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <reset_speed+0x48>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <reset_speed+0x4c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <reset_speed+0x50>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <reset_speed+0x54>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <reset_speed+0x58>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <reset_speed+0x5c>)
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <reset_speed+0x60>)
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c
 8001064:	20000238 	.word	0x20000238
 8001068:	2000023c 	.word	0x2000023c
 800106c:	20000258 	.word	0x20000258
 8001070:	2000025c 	.word	0x2000025c
 8001074:	20000260 	.word	0x20000260
 8001078:	3f59999a 	.word	0x3f59999a
 800107c:	00000000 	.word	0x00000000

08001080 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 8001086:	4bde      	ldr	r3, [pc, #888]	; (8001400 <interupt_calEncoder+0x380>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4bdd      	ldr	r3, [pc, #884]	; (8001404 <interupt_calEncoder+0x384>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7ada 	vldr	s14, [pc, #872]	; 8001408 <interupt_calEncoder+0x388>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd07      	ble.n	80010bc <interupt_calEncoder+0x3c>
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 800140c <interupt_calEncoder+0x38c>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001410 <interupt_calEncoder+0x390>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d507      	bpl.n	80010de <interupt_calEncoder+0x5e>
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7ace 	vldr	s14, [pc, #824]	; 800140c <interupt_calEncoder+0x38c>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010de:	4bcd      	ldr	r3, [pc, #820]	; (8001414 <interupt_calEncoder+0x394>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4bcc      	ldr	r3, [pc, #816]	; (8001418 <interupt_calEncoder+0x398>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	eef1 7a67 	vneg.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001408 <interupt_calEncoder+0x388>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd07      	ble.n	8001118 <interupt_calEncoder+0x98>
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800140c <interupt_calEncoder+0x38c>
 8001110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001114:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001118:	edd7 7a00 	vldr	s15, [r7]
 800111c:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001410 <interupt_calEncoder+0x390>
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d507      	bpl.n	800113a <interupt_calEncoder+0xba>
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800140c <interupt_calEncoder+0x38c>
 8001132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001136:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	a39b      	add	r3, pc, #620	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4bb1      	ldr	r3, [pc, #708]	; (800141c <interupt_calEncoder+0x39c>)
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	a394      	add	r3, pc, #592	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa6d 	bl	8000648 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a392      	add	r3, pc, #584	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa64 	bl	8000648 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a38f      	add	r3, pc, #572	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa5b 	bl	8000648 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a38d      	add	r3, pc, #564	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb7c 	bl	800089c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b9b      	ldr	r3, [pc, #620]	; (8001420 <interupt_calEncoder+0x3a0>)
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	a386      	add	r3, pc, #536	; (adr r3, 80013d8 <interupt_calEncoder+0x358>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b93      	ldr	r3, [pc, #588]	; (8001424 <interupt_calEncoder+0x3a4>)
 80011d6:	f7ff fa37 	bl	8000648 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b90      	ldr	r3, [pc, #576]	; (8001428 <interupt_calEncoder+0x3a8>)
 80011e8:	f7ff fb58 	bl	800089c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	a37a      	add	r3, pc, #488	; (adr r3, 80013e0 <interupt_calEncoder+0x360>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fa25 	bl	8000648 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a378      	add	r3, pc, #480	; (adr r3, 80013e8 <interupt_calEncoder+0x368>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fb46 	bl	800089c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001220:	f7ff fb3c 	bl	800089c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <interupt_calEncoder+0x3ac>)
 8001232:	f7ff fa09 	bl	8000648 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	a36c      	add	r3, pc, #432	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb2a 	bl	800089c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcd2 	bl	8000bf8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	4a76      	ldr	r2, [pc, #472]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001258:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff f99c 	bl	8000598 <__aeabi_f2d>
 8001260:	a353      	add	r3, pc, #332	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9ef 	bl	8000648 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <interupt_calEncoder+0x39c>)
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	a34c      	add	r3, pc, #304	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a34a      	add	r3, pc, #296	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9d4 	bl	8000648 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a347      	add	r3, pc, #284	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9cb 	bl	8000648 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff faec 	bl	800089c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <interupt_calEncoder+0x3a0>)
 80012d2:	f7ff f9b9 	bl	8000648 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a346      	add	r3, pc, #280	; (adr r3, 80013f8 <interupt_calEncoder+0x378>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fada 	bl	800089c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <interupt_calEncoder+0x3a4>)
 80012f6:	f7ff f9a7 	bl	8000648 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <interupt_calEncoder+0x3a8>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff fabe 	bl	800089c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <interupt_calEncoder+0x3ac>)
 800132e:	f7ff f98b 	bl	8000648 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a32d      	add	r3, pc, #180	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff faac 	bl	800089c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc54 	bl	8000bf8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <interupt_calEncoder+0x3b4>)
 8001354:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f91c 	bl	8000598 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f915 	bl	8000598 <__aeabi_f2d>
 800136e:	a320      	add	r3, pc, #128	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f968 	bl	8000648 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ffac 	bl	80002dc <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc34 	bl	8000bf8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001394:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <interupt_calEncoder+0x3bc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8fc 	bl	8000598 <__aeabi_f2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <interupt_calEncoder+0x3b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8f5 	bl	8000598 <__aeabi_f2d>
 80013ae:	e047      	b.n	8001440 <interupt_calEncoder+0x3c0>
 80013b0:	54411744 	.word	0x54411744
 80013b4:	400921fb 	.word	0x400921fb
 80013b8:	4e70a65b 	.word	0x4e70a65b
 80013bc:	3f882f36 	.word	0x3f882f36
 80013c0:	a858793e 	.word	0xa858793e
 80013c4:	3ff1cd35 	.word	0x3ff1cd35
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4078c000 	.word	0x4078c000
 80013d0:	147ae148 	.word	0x147ae148
 80013d4:	4078fbae 	.word	0x4078fbae
 80013d8:	0a3d70a4 	.word	0x0a3d70a4
 80013dc:	4078efd7 	.word	0x4078efd7
 80013e0:	00000000 	.word	0x00000000
 80013e4:	4125eb2e 	.word	0x4125eb2e
 80013e8:	33333333 	.word	0x33333333
 80013ec:	4125f7be 	.word	0x4125f7be
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	5c28f5c3 	.word	0x5c28f5c3
 80013fc:	40792a8f 	.word	0x40792a8f
 8001400:	200006d8 	.word	0x200006d8
 8001404:	20000218 	.word	0x20000218
 8001408:	43340000 	.word	0x43340000
 800140c:	43b40000 	.word	0x43b40000
 8001410:	c3340000 	.word	0xc3340000
 8001414:	200006dc 	.word	0x200006dc
 8001418:	2000021c 	.word	0x2000021c
 800141c:	40668000 	.word	0x40668000
 8001420:	40790000 	.word	0x40790000
 8001424:	40870800 	.word	0x40870800
 8001428:	40868000 	.word	0x40868000
 800142c:	408f4000 	.word	0x408f4000
 8001430:	20000228 	.word	0x20000228
 8001434:	2000022c 	.word	0x2000022c
 8001438:	20000220 	.word	0x20000220
 800143c:	20000224 	.word	0x20000224
 8001440:	a314      	add	r3, pc, #80	; (adr r3, 8001494 <interupt_calEncoder+0x414>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8ff 	bl	8000648 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7fe ff43 	bl	80002dc <__adddf3>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbcb 	bl	8000bf8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <interupt_calEncoder+0x400>)
 8001466:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <interupt_calEncoder+0x404>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <interupt_calEncoder+0x408>)
 800146e:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <interupt_calEncoder+0x40c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <interupt_calEncoder+0x410>)
 8001476:	6013      	str	r3, [r2, #0]

}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	20000224 	.word	0x20000224
 8001484:	200006dc 	.word	0x200006dc
 8001488:	2000021c 	.word	0x2000021c
 800148c:	200006d8 	.word	0x200006d8
 8001490:	20000218 	.word	0x20000218
 8001494:	d2f1a9fc 	.word	0xd2f1a9fc
 8001498:	3f50624d 	.word	0x3f50624d
 800149c:	00000000 	.word	0x00000000

080014a0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80014a6:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <interupt_calFusion+0x298>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4ba3      	ldr	r3, [pc, #652]	; (800173c <interupt_calFusion+0x29c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <interupt_calFusion+0x298>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014c4:	4b9e      	ldr	r3, [pc, #632]	; (8001740 <interupt_calFusion+0x2a0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4b9a      	ldr	r3, [pc, #616]	; (800173c <interupt_calFusion+0x29c>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 80014d8:	4b97      	ldr	r3, [pc, #604]	; (8001738 <interupt_calFusion+0x298>)
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b99      	ldr	r3, [pc, #612]	; (8001744 <interupt_calFusion+0x2a4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	4b93      	ldr	r3, [pc, #588]	; (8001738 <interupt_calFusion+0x298>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f6:	4b94      	ldr	r3, [pc, #592]	; (8001748 <interupt_calFusion+0x2a8>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <interupt_calFusion+0x2a4>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <interupt_calFusion+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f842 	bl	8000598 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b88      	ldr	r3, [pc, #544]	; (800173c <interupt_calFusion+0x29c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f83b 	bl	8000598 <__aeabi_f2d>
 8001522:	a383      	add	r3, pc, #524	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f88e 	bl	8000648 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fed2 	bl	80002dc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb5a 	bl	8000bf8 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	4a81      	ldr	r2, [pc, #516]	; (800174c <interupt_calFusion+0x2ac>)
 8001548:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <interupt_calFusion+0x2b0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f822 	bl	8000598 <__aeabi_f2d>
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
 8001558:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <interupt_calFusion+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f81b 	bl	8000598 <__aeabi_f2d>
 8001562:	a373      	add	r3, pc, #460	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f86e 	bl	8000648 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe feb2 	bl	80002dc <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <interupt_calFusion+0x2b0>)
 8001588:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <interupt_calFusion+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f802 	bl	8000598 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <interupt_calFusion+0x2b4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fffb 	bl	8000598 <__aeabi_f2d>
 80015a2:	4680      	mov	r8, r0
 80015a4:	4689      	mov	r9, r1
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <interupt_calFusion+0x2b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fff4 	bl	8000598 <__aeabi_f2d>
 80015b0:	a35f      	add	r3, pc, #380	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f847 	bl	8000648 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f7fe fe8b 	bl	80002dc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff f83b 	bl	8000648 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <interupt_calFusion+0x298>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <interupt_calFusion+0x2a0>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffcf 	bl	8000598 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fe6b 	bl	80002dc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff faf3 	bl	8000bf8 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <interupt_calFusion+0x2b4>)
 8001616:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <interupt_calFusion+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffbb 	bl	8000598 <__aeabi_f2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <interupt_calFusion+0x2b4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <interupt_calFusion+0x2b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a33c      	add	r3, pc, #240	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe fe44 	bl	80002dc <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe fff4 	bl	8000648 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <interupt_calFusion+0x298>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <interupt_calFusion+0x2a8>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff88 	bl	8000598 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe24 	bl	80002dc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faac 	bl	8000bf8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <interupt_calFusion+0x2bc>)
 80016a4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <interupt_calFusion+0x2c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff74 	bl	8000598 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <interupt_calFusion+0x2b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	a31c      	add	r3, pc, #112	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffc0 	bl	8000648 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fe04 	bl	80002dc <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa8c 	bl	8000bf8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <interupt_calFusion+0x2c0>)
 80016e4:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <interupt_calFusion+0x2c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff54 	bl	8000598 <__aeabi_f2d>
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <interupt_calFusion+0x2bc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff4d 	bl	8000598 <__aeabi_f2d>
 80016fe:	a30c      	add	r3, pc, #48	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ffa0 	bl	8000648 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fde4 	bl	80002dc <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa6c 	bl	8000bf8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <interupt_calFusion+0x2c4>)
 8001724:	6013      	str	r3, [r2, #0]

}
 8001726:	bf00      	nop
 8001728:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	20000260 	.word	0x20000260
 800173c:	20000238 	.word	0x20000238
 8001740:	20000228 	.word	0x20000228
 8001744:	2000023c 	.word	0x2000023c
 8001748:	2000022c 	.word	0x2000022c
 800174c:	20000230 	.word	0x20000230
 8001750:	20000234 	.word	0x20000234
 8001754:	20000258 	.word	0x20000258
 8001758:	20000280 	.word	0x20000280
 800175c:	2000025c 	.word	0x2000025c
 8001760:	20000250 	.word	0x20000250
 8001764:	20000254 	.word	0x20000254

08001768 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	int s = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <reset_gyro+0xfc>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <reset_gyro+0x100>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e026      	b.n	80017d6 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <reset_gyro+0x104>)
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <reset_gyro+0x100>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <reset_gyro+0x100>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <reset_gyro+0x104>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <reset_gyro+0x108>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <reset_gyro+0x108>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <reset_gyro+0x104>)
 80017b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <reset_gyro+0x10c>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <reset_gyro+0x10c>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f006 fb68 	bl	8007ea0 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017dc:	ddd4      	ble.n	8001788 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <reset_gyro+0x100>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001878 <reset_gyro+0x110>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <reset_gyro+0x100>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <reset_gyro+0x108>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001878 <reset_gyro+0x110>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <reset_gyro+0x108>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <reset_gyro+0x10c>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001878 <reset_gyro+0x110>
 8001810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <reset_gyro+0x10c>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <reset_gyro+0xfc>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <reset_gyro+0x114>)
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <reset_gyro+0x118>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <reset_gyro+0x11c>)
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e009      	b.n	8001854 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <reset_gyro+0x120>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf2      	ble.n	8001840 <reset_gyro+0xd8>
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000264 	.word	0x20000264
 8001868:	20000288 	.word	0x20000288
 800186c:	200006e4 	.word	0x200006e4
 8001870:	20000284 	.word	0x20000284
 8001874:	2000028c 	.word	0x2000028c
 8001878:	447a0000 	.word	0x447a0000
 800187c:	2000026c 	.word	0x2000026c
 8001880:	20000278 	.word	0x20000278
 8001884:	2000027c 	.word	0x2000027c
 8001888:	20000290 	.word	0x20000290
 800188c:	00000000 	.word	0x00000000

08001890 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
	int j = 9;
 8001896:	2309      	movs	r3, #9
 8001898:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 800189a:	2309      	movs	r3, #9
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e00d      	b.n	80018bc <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4aa6      	ldr	r2, [pc, #664]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	49a4      	ldr	r1, [pc, #656]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dcee      	bgt.n	80018a0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 80018c2:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80018c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c8:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <interrupt_calGyro+0x2b8>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	ee17 0a90 	vmov	r0, s15
 80018d6:	f7fe fe5f 	bl	8000598 <__aeabi_f2d>
 80018da:	a387      	add	r3, pc, #540	; (adr r3, 8001af8 <interrupt_calGyro+0x268>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe feb2 	bl	8000648 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a384      	add	r3, pc, #528	; (adr r3, 8001b00 <interrupt_calGyro+0x270>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fea9 	bl	8000648 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	a382      	add	r3, pc, #520	; (adr r3, 8001b08 <interrupt_calGyro+0x278>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffca 	bl	800089c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f972 	bl	8000bf8 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <interrupt_calGyro+0x2b0>)
 8001918:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <interrupt_calGyro+0x2b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001920:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <interrupt_calGyro+0x2c0>)
 8001928:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 800192a:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <interrupt_calGyro+0x2b4>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <interrupt_calGyro+0x2c8>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001940:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <interrupt_calGyro+0x2cc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe27 	bl	8000598 <__aeabi_f2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe20 	bl	8000598 <__aeabi_f2d>
 8001958:	a36d      	add	r3, pc, #436	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fcb7 	bl	80002dc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f93f 	bl	8000bf8 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <interrupt_calGyro+0x2cc>)
 800197e:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001980:	4b77      	ldr	r3, [pc, #476]	; (8001b60 <interrupt_calGyro+0x2d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe07 	bl	8000598 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fdf9 	bl	8000598 <__aeabi_f2d>
 80019a6:	a35a      	add	r3, pc, #360	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe4c 	bl	8000648 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc90 	bl	80002dc <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <interrupt_calGyro+0x2d0>)
 80019cc:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80019d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <interrupt_calGyro+0x2d4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fdd9 	bl	8000598 <__aeabi_f2d>
 80019e6:	a34c      	add	r3, pc, #304	; (adr r3, 8001b18 <interrupt_calGyro+0x288>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe2c 	bl	8000648 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a349      	add	r3, pc, #292	; (adr r3, 8001b20 <interrupt_calGyro+0x290>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe23 	bl	8000648 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	a347      	add	r3, pc, #284	; (adr r3, 8001b28 <interrupt_calGyro+0x298>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe ff44 	bl	800089c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <interrupt_calGyro+0x2d8>)
 8001a22:	f7fe fe11 	bl	8000648 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <interrupt_calGyro+0x2a0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff32 	bl	800089c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <interrupt_calGyro+0x2dc>)
 8001a46:	f7fe fdff 	bl	8000648 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	a339      	add	r3, pc, #228	; (adr r3, 8001b38 <interrupt_calGyro+0x2a8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdf6 	bl	8000648 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a6c:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd90 	bl	8000598 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd89 	bl	8000598 <__aeabi_f2d>
 8001a86:	a322      	add	r3, pc, #136	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fddc 	bl	8000648 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fc20 	bl	80002dc <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f8a8 	bl	8000bf8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001aac:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	a312      	add	r3, pc, #72	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fdbc 	bl	8000648 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fc00 	bl	80002dc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f888 	bl	8000bf8 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001aec:	6013      	str	r3, [r2, #0]




}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	70a3d70a 	.word	0x70a3d70a
 8001afc:	3fef0a3d 	.word	0x3fef0a3d
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40acd400 	.word	0x40acd400
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40ac2000 	.word	0x40ac2000
 8001b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b14:	3f50624d 	.word	0x3f50624d
 8001b18:	0fcf80dc 	.word	0x0fcf80dc
 8001b1c:	3ff0a423 	.word	0x3ff0a423
 8001b20:	00000000 	.word	0x00000000
 8001b24:	4078c000 	.word	0x4078c000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	4077d000 	.word	0x4077d000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	407a7000 	.word	0x407a7000
 8001b38:	3a92a305 	.word	0x3a92a305
 8001b3c:	40239d01 	.word	0x40239d01
 8001b40:	20000290 	.word	0x20000290
 8001b44:	200006e4 	.word	0x200006e4
 8001b48:	20000288 	.word	0x20000288
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	20000270 	.word	0x20000270
 8001b54:	20000284 	.word	0x20000284
 8001b58:	20000274 	.word	0x20000274
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	2000026c 	.word	0x2000026c
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	40790000 	.word	0x40790000
 8001b6c:	408f4000 	.word	0x408f4000
 8001b70:	20000280 	.word	0x20000280
 8001b74:	20000278 	.word	0x20000278
 8001b78:	2000027c 	.word	0x2000027c
 8001b7c:	00000000 	.word	0x00000000

08001b80 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e00f      	b.n	8001bac <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001b8c:	f005 ff2c 	bl	80079e8 <pl_getbatt>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <battcheak+0xe8>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f006 f939 	bl	8007e18 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b13      	cmp	r3, #19
 8001bb0:	ddec      	ble.n	8001b8c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <battcheak+0xec>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e010      	b.n	8001be2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <battcheak+0xe8>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <battcheak+0xec>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <battcheak+0xec>)
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b13      	cmp	r3, #19
 8001be6:	ddeb      	ble.n	8001bc0 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <battcheak+0xec>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <battcheak+0xec>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <battcheak+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcc9 	bl	8000598 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <battcheak+0xf0>)
 8001c0c:	f01e fd5e 	bl	80206cc <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <battcheak+0xec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_f2d>
 8001c1a:	a311      	add	r3, pc, #68	; (adr r3, 8001c60 <battcheak+0xe0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe ff8e 	bl	8000b40 <__aeabi_dcmple>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001c2a:	e014      	b.n	8001c56 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f005 f963 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f005 f972 	bl	8006f1c <pl_l_blue_LED>
		wait_ms(500);
 8001c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3c:	f006 f8ec 	bl	8007e18 <wait_ms>
		pl_r_blue_LED(OFF);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f005 f959 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f005 f968 	bl	8006f1c <pl_l_blue_LED>
		wait_ms(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c50:	f006 f8e2 	bl	8007e18 <wait_ms>
		pl_r_blue_LED(ON);
 8001c54:	e7ea      	b.n	8001c2c <battcheak+0xac>
}
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	400d9999 	.word	0x400d9999
 8001c68:	20000484 	.word	0x20000484
 8001c6c:	200004d4 	.word	0x200004d4
 8001c70:	08022f10 	.word	0x08022f10

08001c74 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001c7a:	f006 f853 	bl	8007d24 <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001c7e:	2313      	movs	r3, #19
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e037      	b.n	8001cf4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <interupt_calSensor+0x170>)
 8001c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c8e:	4955      	ldr	r1, [pc, #340]	; (8001de4 <interupt_calSensor+0x170>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <interupt_calSensor+0x170>)
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca2:	4950      	ldr	r1, [pc, #320]	; (8001de4 <interupt_calSensor+0x170>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <interupt_calSensor+0x170>)
 8001cb2:	3328      	adds	r3, #40	; 0x28
 8001cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb8:	494a      	ldr	r1, [pc, #296]	; (8001de4 <interupt_calSensor+0x170>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3328      	adds	r3, #40	; 0x28
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <interupt_calSensor+0x170>)
 8001cc8:	333c      	adds	r3, #60	; 0x3c
 8001cca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cce:	4945      	ldr	r1, [pc, #276]	; (8001de4 <interupt_calSensor+0x170>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <interupt_calSensor+0x170>)
 8001cde:	3350      	adds	r3, #80	; 0x50
 8001ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce4:	493f      	ldr	r1, [pc, #252]	; (8001de4 <interupt_calSensor+0x170>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3350      	adds	r3, #80	; 0x50
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dcc4      	bgt.n	8001c84 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <interupt_calSensor+0x174>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <interupt_calSensor+0x178>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <interupt_calSensor+0x170>)
 8001d08:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <interupt_calSensor+0x174>)
 8001d0c:	885b      	ldrh	r3, [r3, #2]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <interupt_calSensor+0x178>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <interupt_calSensor+0x170>)
 8001d18:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <interupt_calSensor+0x174>)
 8001d1c:	889b      	ldrh	r3, [r3, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <interupt_calSensor+0x178>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <interupt_calSensor+0x170>)
 8001d28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <interupt_calSensor+0x174>)
 8001d2e:	88db      	ldrh	r3, [r3, #6]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <interupt_calSensor+0x178>)
 8001d34:	88db      	ldrh	r3, [r3, #6]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <interupt_calSensor+0x170>)
 8001d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <interupt_calSensor+0x174>)
 8001d40:	891b      	ldrh	r3, [r3, #8]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <interupt_calSensor+0x178>)
 8001d46:	891b      	ldrh	r3, [r3, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <interupt_calSensor+0x170>)
 8001d4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e03d      	b.n	8001dd2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001d56:	4923      	ldr	r1, [pc, #140]	; (8001de4 <interupt_calSensor+0x170>)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <interupt_calSensor+0x170>)
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4403      	add	r3, r0
 8001d74:	332c      	adds	r3, #44	; 0x2c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1aca      	subs	r2, r1, r3
 8001d7a:	491d      	ldr	r1, [pc, #116]	; (8001df0 <interupt_calSensor+0x17c>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <interupt_calSensor+0x170>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <interupt_calSensor+0x170>)
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4403      	add	r3, r0
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4419      	add	r1, r3
 8001da6:	480f      	ldr	r0, [pc, #60]	; (8001de4 <interupt_calSensor+0x170>)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4403      	add	r3, r0
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	440b      	add	r3, r1
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <interupt_calSensor+0x180>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad2      	subs	r2, r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <interupt_calSensor+0x184>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	ddbe      	ble.n	8001d56 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002b8 	.word	0x200002b8
 8001de8:	2000070c 	.word	0x2000070c
 8001dec:	20000718 	.word	0x20000718
 8001df0:	20000448 	.word	0x20000448
 8001df4:	55555556 	.word	0x55555556
 8001df8:	20000470 	.word	0x20000470

08001dfc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <Control_mode_Init+0x28>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <Control_mode_Init+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <Control_mode_Init+0x30>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <Control_mode_Init+0x34>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000528 	.word	0x20000528
 8001e28:	20000805 	.word	0x20000805
 8001e2c:	20000800 	.word	0x20000800
 8001e30:	20000529 	.word	0x20000529

08001e34 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	db14      	blt.n	8001e7e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f005 fcfd 	bl	8007854 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <get_duty+0x11c>)
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001f54 <get_duty+0x120>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e015      	b.n	8001eaa <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f005 fce8 	bl	8007854 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e88:	eef1 6a67 	vneg.f32	s13, s15
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <get_duty+0x11c>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f54 <get_duty+0x120>
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	db14      	blt.n	8001ee2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f005 fcf3 	bl	80078a4 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <get_duty+0x11c>)
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f54 <get_duty+0x120>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed8:	ee17 2a90 	vmov	r2, s15
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e015      	b.n	8001f0e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f005 fcde 	bl	80078a4 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eec:	eef1 6a67 	vneg.f32	s13, s15
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <get_duty+0x11c>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f54 <get_duty+0x120>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f26:	4293      	cmp	r3, r2
 8001f28:	dd03      	ble.n	8001f32 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f30:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	dd03      	ble.n	8001f46 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f44:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200004d4 	.word	0x200004d4
 8001f54:	44d1e000 	.word	0x44d1e000

08001f58 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f5c:	b08c      	sub	sp, #48	; 0x30
 8001f5e:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001f86:	4bd2      	ldr	r3, [pc, #840]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001f8e:	4bd1      	ldr	r3, [pc, #836]	; (80022d4 <interupt_DriveMotor+0x37c>)
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001f94:	4bd0      	ldr	r3, [pc, #832]	; (80022d8 <interupt_DriveMotor+0x380>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001f9a:	4bd0      	ldr	r3, [pc, #832]	; (80022dc <interupt_DriveMotor+0x384>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001fa0:	4bcb      	ldr	r3, [pc, #812]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 828f 	bne.w	80024c8 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001faa:	4bcc      	ldr	r3, [pc, #816]	; (80022dc <interupt_DriveMotor+0x384>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001fb0:	4bcb      	ldr	r3, [pc, #812]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4aca      	ldr	r2, [pc, #808]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb8:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001fba:	4bca      	ldr	r3, [pc, #808]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe faea 	bl	8000598 <__aeabi_f2d>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4bc6      	ldr	r3, [pc, #792]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fae3 	bl	8000598 <__aeabi_f2d>
 8001fd2:	a3bb      	add	r3, pc, #748	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fb36 	bl	8000648 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4bbf      	ldr	r3, [pc, #764]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fad5 	bl	8000598 <__aeabi_f2d>
 8001fee:	a3b4      	add	r3, pc, #720	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb28 	bl	8000648 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	a3af      	add	r3, pc, #700	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb1f 	bl	8000648 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	f7fe fc3f 	bl	800089c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4640      	mov	r0, r8
 8002024:	4649      	mov	r1, r9
 8002026:	f7fe f959 	bl	80002dc <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe f953 	bl	80002dc <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fddb 	bl	8000bf8 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4aa7      	ldr	r2, [pc, #668]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002046:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002048:	4ba6      	ldr	r3, [pc, #664]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa3 	bl	8000598 <__aeabi_f2d>
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
 8002056:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa9c 	bl	8000598 <__aeabi_f2d>
 8002060:	a397      	add	r3, pc, #604	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe faef 	bl	8000648 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f933 	bl	80002dc <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fdbb 	bl	8000bf8 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a97      	ldr	r2, [pc, #604]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002086:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002088:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <interupt_DriveMotor+0x390>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa83 	bl	8000598 <__aeabi_f2d>
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa7c 	bl	8000598 <__aeabi_f2d>
 80020a0:	a387      	add	r3, pc, #540	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe facf 	bl	8000648 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4690      	mov	r8, r2
 80020b0:	4699      	mov	r9, r3
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <interupt_DriveMotor+0x390>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	a380      	add	r3, pc, #512	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fac1 	bl	8000648 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	a37c      	add	r3, pc, #496	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fab8 	bl	8000648 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e8:	f7fe fbd8 	bl	800089c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4640      	mov	r0, r8
 80020f2:	4649      	mov	r1, r9
 80020f4:	f7fe f8f2 	bl	80002dc <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f8ec 	bl	80002dc <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd74 	bl	8000bf8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002114:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa3c 	bl	8000598 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa35 	bl	8000598 <__aeabi_f2d>
 800212e:	a364      	add	r3, pc, #400	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa88 	bl	8000648 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8cc 	bl	80002dc <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd54 	bl	8000bf8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002154:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <interupt_DriveMotor+0x394>)
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800215a:	9201      	str	r2, [sp, #4]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	9200      	str	r2, [sp, #0]
 8002160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002162:	f006 f857 	bl	8008214 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <interupt_DriveMotor+0x390>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	eef0 0a47 	vmov.f32	s1, s14
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fa21 	bl	80045cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <interupt_DriveMotor+0x398>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <interupt_DriveMotor+0x39c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800219e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <interupt_DriveMotor+0x38c>)
 80021a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <interupt_DriveMotor+0x3a0>)
 80021aa:	edd3 6a00 	vldr	s13, [r3]
 80021ae:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <interupt_DriveMotor+0x390>)
 80021b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	eef0 1a46 	vmov.f32	s3, s12
 80021be:	eeb0 1a66 	vmov.f32	s2, s13
 80021c2:	4611      	mov	r1, r2
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 ff57 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80021d2:	f002 fbf1 	bl	80049b8 <calWallConrol>
 80021d6:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80021da:	ed97 7a04 	vldr	s14, [r7, #16]
 80021de:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002202:	ed97 7a04 	vldr	s14, [r7, #16]
 8002206:	edd7 7a03 	vldr	s15, [r7, #12]
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	edd7 7a02 	vldr	s15, [r7, #8]
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800222a:	ed97 7a04 	vldr	s14, [r7, #16]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f9ad 	bl	8000598 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f9a6 	bl	8000598 <__aeabi_f2d>
 800224c:	a31e      	add	r3, pc, #120	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f9f9 	bl	8000648 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fc83 	bl	8000b68 <__aeabi_dcmpgt>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 808d 	beq.w	8002384 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800226a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226c:	f7fe f994 	bl	8000598 <__aeabi_f2d>
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f98d 	bl	8000598 <__aeabi_f2d>
 800227e:	a312      	add	r3, pc, #72	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe f9e0 	bl	8000648 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4690      	mov	r8, r2
 800228e:	4699      	mov	r9, r3
 8002290:	ed97 7a04 	vldr	s14, [r7, #16]
 8002294:	edd7 7a02 	vldr	s15, [r7, #8]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f97a 	bl	8000598 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4640      	mov	r0, r8
 80022aa:	4649      	mov	r1, r9
 80022ac:	f7fe f814 	bl	80002d8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	e022      	b.n	8002300 <interupt_DriveMotor+0x3a8>
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d
 80022c8:	d916872b 	.word	0xd916872b
 80022cc:	3feff7ce 	.word	0x3feff7ce
 80022d0:	20000528 	.word	0x20000528
 80022d4:	20000804 	.word	0x20000804
 80022d8:	20000590 	.word	0x20000590
 80022dc:	20000592 	.word	0x20000592
 80022e0:	20000524 	.word	0x20000524
 80022e4:	200004d8 	.word	0x200004d8
 80022e8:	200004e4 	.word	0x200004e4
 80022ec:	200004f0 	.word	0x200004f0
 80022f0:	20000238 	.word	0x20000238
 80022f4:	2000023c 	.word	0x2000023c
 80022f8:	20000268 	.word	0x20000268
 80022fc:	200004d4 	.word	0x200004d4
 8002300:	f7fd ffec 	bl	80002dc <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc74 	bl	8000bf8 <__aeabi_d2f>
 8002310:	4603      	mov	r3, r0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002314:	6a38      	ldr	r0, [r7, #32]
 8002316:	f7fe f93f 	bl	8000598 <__aeabi_f2d>
 800231a:	4604      	mov	r4, r0
 800231c:	460d      	mov	r5, r1
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <interupt_DriveMotor+0x428>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	a313      	add	r3, pc, #76	; (adr r3, 8002378 <interupt_DriveMotor+0x420>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f98b 	bl	8000648 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	ed97 7a04 	vldr	s14, [r7, #16]
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f925 	bl	8000598 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ffbf 	bl	80002d8 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fd ffbb 	bl	80002dc <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc43 	bl	8000bf8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	e095      	b.n	80024a4 <interupt_DriveMotor+0x54c>
 8002378:	d916872b 	.word	0xd916872b
 800237c:	3feff7ce 	.word	0x3feff7ce
 8002380:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002384:	ed97 7a04 	vldr	s14, [r7, #16]
 8002388:	edd7 7a02 	vldr	s15, [r7, #8]
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	ee17 0a90 	vmov	r0, s15
 8002394:	f7fe f900 	bl	8000598 <__aeabi_f2d>
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
 800239c:	4bce      	ldr	r3, [pc, #824]	; (80026d8 <interupt_DriveMotor+0x780>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eef1 7a67 	vneg.f32	s15, s15
 80023a6:	ee17 3a90 	vmov	r3, s15
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_f2d>
 80023b0:	a3c5      	add	r3, pc, #788	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f947 	bl	8000648 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d06b      	beq.n	80024a4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ce:	f7fe f8e3 	bl	8000598 <__aeabi_f2d>
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	4bc0      	ldr	r3, [pc, #768]	; (80026d8 <interupt_DriveMotor+0x780>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eef1 7a67 	vneg.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_f2d>
 80023ea:	a3b7      	add	r3, pc, #732	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f92a 	bl	8000648 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4690      	mov	r8, r2
 80023fa:	4699      	mov	r9, r3
 80023fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002400:	edd7 7a02 	vldr	s15, [r7, #8]
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	ee17 0a90 	vmov	r0, s15
 800240c:	f7fe f8c4 	bl	8000598 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4640      	mov	r0, r8
 8002416:	4649      	mov	r1, r9
 8002418:	f7fd ff5e 	bl	80002d8 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd ff5a 	bl	80002dc <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbe2 	bl	8000bf8 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002438:	6a38      	ldr	r0, [r7, #32]
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	4ba5      	ldr	r3, [pc, #660]	; (80026d8 <interupt_DriveMotor+0x780>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eef1 7a67 	vneg.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f8a1 	bl	8000598 <__aeabi_f2d>
 8002456:	a39c      	add	r3, pc, #624	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8f4 	bl	8000648 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4690      	mov	r8, r2
 8002466:	4699      	mov	r9, r3
 8002468:	ed97 7a04 	vldr	s14, [r7, #16]
 800246c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f88e 	bl	8000598 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fd ff28 	bl	80002d8 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff24 	bl	80002dc <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fbac 	bl	8000bf8 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80024a4:	f107 0214 	add.w	r2, r7, #20
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	edd7 0a08 	vldr	s1, [r7, #32]
 80024b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80024b8:	f7ff fcbc 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 fa30 	bl	8007928 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <interupt_DriveMotor+0x784>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d004      	beq.n	80024da <interupt_DriveMotor+0x582>
 80024d0:	4b82      	ldr	r3, [pc, #520]	; (80026dc <interupt_DriveMotor+0x784>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	f040 8287 	bne.w	80029e8 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80024da:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <interupt_DriveMotor+0x788>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <interupt_DriveMotor+0x78c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80024e6:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024ee:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <interupt_DriveMotor+0x794>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f84f 	bl	8000598 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <interupt_DriveMotor+0x794>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f848 	bl	8000598 <__aeabi_f2d>
 8002508:	a371      	add	r3, pc, #452	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f89b 	bl	8000648 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4690      	mov	r8, r2
 8002518:	4699      	mov	r9, r3
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <interupt_DriveMotor+0x794>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f83a 	bl	8000598 <__aeabi_f2d>
 8002524:	a36a      	add	r3, pc, #424	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f88d 	bl	8000648 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	a366      	add	r3, pc, #408	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f884 	bl	8000648 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002550:	f7fe f9a4 	bl	800089c <__aeabi_ddiv>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fd febe 	bl	80002dc <__adddf3>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb8 	bl	80002dc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb40 	bl	8000bf8 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4a5c      	ldr	r2, [pc, #368]	; (80026ec <interupt_DriveMotor+0x794>)
 800257c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <interupt_DriveMotor+0x794>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe f808 	bl	8000598 <__aeabi_f2d>
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <interupt_DriveMotor+0x794>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f801 	bl	8000598 <__aeabi_f2d>
 8002596:	a34e      	add	r3, pc, #312	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f854 	bl	8000648 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe98 	bl	80002dc <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fb20 	bl	8000bf8 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <interupt_DriveMotor+0x794>)
 80025bc:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffe8 	bl	8000598 <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffe1 	bl	8000598 <__aeabi_f2d>
 80025d6:	a33e      	add	r3, pc, #248	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe f834 	bl	8000648 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4690      	mov	r8, r2
 80025e6:	4699      	mov	r9, r3
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffd3 	bl	8000598 <__aeabi_f2d>
 80025f2:	a337      	add	r3, pc, #220	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fe f826 	bl	8000648 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	a332      	add	r3, pc, #200	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f81d 	bl	8000648 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261e:	f7fe f93d 	bl	800089c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4640      	mov	r0, r8
 8002628:	4649      	mov	r1, r9
 800262a:	f7fd fe57 	bl	80002dc <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fe51 	bl	80002dc <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fad9 	bl	8000bf8 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ffa1 	bl	8000598 <__aeabi_f2d>
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <interupt_DriveMotor+0x798>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff9a 	bl	8000598 <__aeabi_f2d>
 8002664:	a31a      	add	r3, pc, #104	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffed 	bl	8000648 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fe31 	bl	80002dc <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fab9 	bl	8000bf8 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <interupt_DriveMotor+0x798>)
 800268a:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <interupt_DriveMotor+0x79c>)
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <interupt_DriveMotor+0x798>)
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002698:	f005 fdbc 	bl	8008214 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <interupt_DriveMotor+0x794>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <interupt_DriveMotor+0x798>)
 80026a4:	ed93 7a00 	vldr	s14, [r3]
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	eef0 0a47 	vmov.f32	s1, s14
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 ff86 	bl	80045cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <interupt_DriveMotor+0x7a0>)
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	e019      	b.n	80026fc <interupt_DriveMotor+0x7a4>
 80026c8:	d916872b 	.word	0xd916872b
 80026cc:	3feff7ce 	.word	0x3feff7ce
 80026d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026d4:	3f50624d 	.word	0x3f50624d
 80026d8:	200004d4 	.word	0x200004d4
 80026dc:	20000528 	.word	0x20000528
 80026e0:	20000590 	.word	0x20000590
 80026e4:	20000592 	.word	0x20000592
 80026e8:	20000524 	.word	0x20000524
 80026ec:	200004d8 	.word	0x200004d8
 80026f0:	200004e4 	.word	0x200004e4
 80026f4:	20000504 	.word	0x20000504
 80026f8:	20000238 	.word	0x20000238
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <interupt_DriveMotor+0x938>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <interupt_DriveMotor+0x93c>)
 8002710:	edd3 7a01 	vldr	s15, [r3, #4]
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <interupt_DriveMotor+0x940>)
 8002716:	edd3 6a00 	vldr	s13, [r3]
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <interupt_DriveMotor+0x944>)
 800271c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002720:	1d3a      	adds	r2, r7, #4
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	eef0 1a46 	vmov.f32	s3, s12
 800272a:	eeb0 1a66 	vmov.f32	s2, s13
 800272e:	4611      	mov	r1, r2
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	eeb0 0a47 	vmov.f32	s0, s14
 8002738:	4618      	mov	r0, r3
 800273a:	f001 fca1 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800273e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002742:	edd7 7a03 	vldr	s15, [r7, #12]
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 7a02 	vldr	s15, [r7, #8]
 800274e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800275e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002762:	edd7 7a03 	vldr	s15, [r7, #12]
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	edd7 7a02 	vldr	s15, [r7, #8]
 800276e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002772:	edd7 7a01 	vldr	s15, [r7, #4]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800277e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_f2d>
 8002792:	4604      	mov	r4, r0
 8002794:	460d      	mov	r5, r1
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <interupt_DriveMotor+0x948>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fefc 	bl	8000598 <__aeabi_f2d>
 80027a0:	a339      	add	r3, pc, #228	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff4f 	bl	8000648 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fe f9d9 	bl	8000b68 <__aeabi_dcmpgt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d073      	beq.n	80028a4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027be:	f7fd feeb 	bl	8000598 <__aeabi_f2d>
 80027c2:	4604      	mov	r4, r0
 80027c4:	460d      	mov	r5, r1
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <interupt_DriveMotor+0x948>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_f2d>
 80027d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff37 	bl	8000648 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fed1 	bl	8000598 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd fd6b 	bl	80002d8 <__aeabi_dsub>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd67 	bl	80002dc <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9ef 	bl	8000bf8 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f7fd feba 	bl	8000598 <__aeabi_f2d>
 8002824:	4604      	mov	r4, r0
 8002826:	460d      	mov	r5, r1
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <interupt_DriveMotor+0x948>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd feb3 	bl	8000598 <__aeabi_f2d>
 8002832:	a315      	add	r3, pc, #84	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd ff06 	bl	8000648 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4690      	mov	r8, r2
 8002842:	4699      	mov	r9, r3
 8002844:	ed97 7a04 	vldr	s14, [r7, #16]
 8002848:	edd7 7a02 	vldr	s15, [r7, #8]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	ee17 0a90 	vmov	r0, s15
 8002854:	f7fd fea0 	bl	8000598 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4640      	mov	r0, r8
 800285e:	4649      	mov	r1, r9
 8002860:	f7fd fd3a 	bl	80002d8 <__aeabi_dsub>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fd36 	bl	80002dc <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f9be 	bl	8000bf8 <__aeabi_d2f>
 800287c:	4603      	mov	r3, r0
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	e0a0      	b.n	80029c4 <interupt_DriveMotor+0xa6c>
 8002882:	bf00      	nop
 8002884:	f3af 8000 	nop.w
 8002888:	d916872b 	.word	0xd916872b
 800288c:	3feff7ce 	.word	0x3feff7ce
 8002890:	2000023c 	.word	0x2000023c
 8002894:	200004d8 	.word	0x200004d8
 8002898:	20000268 	.word	0x20000268
 800289c:	200004e4 	.word	0x200004e4
 80028a0:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80028a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	ee17 0a90 	vmov	r0, s15
 80028b4:	f7fd fe70 	bl	8000598 <__aeabi_f2d>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
 80028bc:	4bd6      	ldr	r3, [pc, #856]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	ee17 3a90 	vmov	r3, s15
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe64 	bl	8000598 <__aeabi_f2d>
 80028d0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feb7 	bl	8000648 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fe f923 	bl	8000b2c <__aeabi_dcmplt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d06b      	beq.n	80029c4 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ee:	f7fd fe53 	bl	8000598 <__aeabi_f2d>
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	4bc8      	ldr	r3, [pc, #800]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	eef1 7a67 	vneg.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_f2d>
 800290a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe9a 	bl	8000648 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fe34 	bl	8000598 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4640      	mov	r0, r8
 8002936:	4649      	mov	r1, r9
 8002938:	f7fd fcce 	bl	80002d8 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fcca 	bl	80002dc <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f952 	bl	8000bf8 <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002958:	6a38      	ldr	r0, [r7, #32]
 800295a:	f7fd fe1d 	bl	8000598 <__aeabi_f2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4bad      	ldr	r3, [pc, #692]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eef1 7a67 	vneg.f32	s15, s15
 800296c:	ee17 3a90 	vmov	r3, s15
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fe11 	bl	8000598 <__aeabi_f2d>
 8002976:	a3a4      	add	r3, pc, #656	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fe64 	bl	8000648 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4690      	mov	r8, r2
 8002986:	4699      	mov	r9, r3
 8002988:	ed97 7a04 	vldr	s14, [r7, #16]
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee17 0a90 	vmov	r0, s15
 8002998:	f7fd fdfe 	bl	8000598 <__aeabi_f2d>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fc98 	bl	80002d8 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fc94 	bl	80002dc <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f91c 	bl	8000bf8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80029c4:	f107 0214 	add.w	r2, r7, #20
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	edd7 0a08 	vldr	s1, [r7, #32]
 80029d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80029d8:	f7ff fa2c 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 ffa0 	bl	8007928 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <interupt_DriveMotor+0xcc4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	f040 8137 	bne.w	8002c60 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <interupt_DriveMotor+0xcc8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80029f8:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <interupt_DriveMotor+0xccc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029fe:	4b8a      	ldr	r3, [pc, #552]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a06:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a08:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdbc 	bl	8000598 <__aeabi_f2d>
 8002a20:	a37b      	add	r3, pc, #492	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	a374      	add	r3, pc, #464	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fe01 	bl	8000648 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	a370      	add	r3, pc, #448	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fdf8 	bl	8000648 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a68:	f7fd ff18 	bl	800089c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fc32 	bl	80002dc <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a94:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a358      	add	r3, pc, #352	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fc0c 	bl	80002dc <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f894 	bl	8000bf8 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ad4:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd5c 	bl	8000598 <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd55 	bl	8000598 <__aeabi_f2d>
 8002aee:	a348      	add	r3, pc, #288	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fda8 	bl	8000648 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4690      	mov	r8, r2
 8002afe:	4699      	mov	r9, r3
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd47 	bl	8000598 <__aeabi_f2d>
 8002b0a:	a341      	add	r3, pc, #260	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd9a 	bl	8000648 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd91 	bl	8000648 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b36:	f7fd feb1 	bl	800089c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4640      	mov	r0, r8
 8002b40:	4649      	mov	r1, r9
 8002b42:	f7fd fbcb 	bl	80002dc <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b62:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_f2d>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fd0e 	bl	8000598 <__aeabi_f2d>
 8002b7c:	a324      	add	r3, pc, #144	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fd61 	bl	8000648 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fba5 	bl	80002dc <__adddf3>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f82d 	bl	8000bf8 <__aeabi_d2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ba2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002bac:	ed93 7a00 	vldr	s14, [r3]
 8002bb0:	f107 020c 	add.w	r2, r7, #12
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	eef0 0a47 	vmov.f32	s1, s14
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fd02 	bl	80045cc <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002bc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c00:	e018      	b.n	8002c34 <interupt_DriveMotor+0xcdc>
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	d916872b 	.word	0xd916872b
 8002c0c:	3feff7ce 	.word	0x3feff7ce
 8002c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c14:	3f50624d 	.word	0x3f50624d
 8002c18:	200004d4 	.word	0x200004d4
 8002c1c:	20000528 	.word	0x20000528
 8002c20:	20000590 	.word	0x20000590
 8002c24:	20000592 	.word	0x20000592
 8002c28:	20000524 	.word	0x20000524
 8002c2c:	200004d8 	.word	0x200004d8
 8002c30:	200004e4 	.word	0x200004e4
 8002c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c38:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c3c:	f107 0214 	add.w	r2, r7, #20
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c50:	f7ff f8f0 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fe64 	bl	8007928 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002c60:	4bd3      	ldr	r3, [pc, #844]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d137      	bne.n	8002cd8 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002c68:	4bd2      	ldr	r3, [pc, #840]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c6e:	4bd2      	ldr	r3, [pc, #840]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002cb4:	f107 0214 	add.w	r2, r7, #20
 8002cb8:	f107 0318 	add.w	r3, r7, #24
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002cc4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002cc8:	f7ff f8b4 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fe28 	bl	8007928 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002cd8:	4bb5      	ldr	r3, [pc, #724]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	f040 8105 	bne.w	8002eec <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002ce2:	4bb4      	ldr	r3, [pc, #720]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ce8:	4bb3      	ldr	r3, [pc, #716]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002cee:	4bb3      	ldr	r3, [pc, #716]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4baf      	ldr	r3, [pc, #700]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	a3a8      	add	r3, pc, #672	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc9c 	bl	8000648 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4690      	mov	r8, r2
 8002d16:	4699      	mov	r9, r3
 8002d18:	4ba8      	ldr	r3, [pc, #672]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc3b 	bl	8000598 <__aeabi_f2d>
 8002d22:	a3a1      	add	r3, pc, #644	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fc8e 	bl	8000648 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	a39c      	add	r3, pc, #624	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc85 	bl	8000648 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d4e:	f7fd fda5 	bl	800089c <__aeabi_ddiv>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fabf 	bl	80002dc <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fab9 	bl	80002dc <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff41 	bl	8000bf8 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fc09 	bl	8000598 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_f2d>
 8002d94:	a384      	add	r3, pc, #528	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fc55 	bl	8000648 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7fd fa99 	bl	80002dc <__adddf3>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff21 	bl	8000bf8 <__aeabi_d2f>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002dba:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbe9 	bl	8000598 <__aeabi_f2d>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbe2 	bl	8000598 <__aeabi_f2d>
 8002dd4:	a374      	add	r3, pc, #464	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc35 	bl	8000648 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa79 	bl	80002dc <__adddf3>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd ff01 	bl	8000bf8 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dfa:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002dfc:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <interupt_DriveMotor+0x106c>)
 8002dfe:	edd3 6a00 	vldr	s13, [r3]
 8002e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0a:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e0c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 1a67 	vmov.f32	s2, s15
 8002e18:	f005 fd56 	bl	80088c8 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	eef0 0a47 	vmov.f32	s1, s14
 8002e34:	eeb0 0a67 	vmov.f32	s0, s15
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fbc6 	bl	80045cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <interupt_DriveMotor+0x1070>)
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <interupt_DriveMotor+0x1074>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <interupt_DriveMotor+0x1078>)
 8002e60:	edd3 6a00 	vldr	s13, [r3]
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e66:	ed93 6a01 	vldr	s12, [r3, #4]
 8002e6a:	1d3a      	adds	r2, r7, #4
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	eef0 1a46 	vmov.f32	s3, s12
 8002e74:	eeb0 1a66 	vmov.f32	s2, s13
 8002e78:	4611      	mov	r1, r2
 8002e7a:	eef0 0a67 	vmov.f32	s1, s15
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f8fc 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ec8:	f107 0214 	add.w	r2, r7, #20
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ed8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002edc:	f7fe ffaa 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fd1e 	bl	8007928 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d14b      	bne.n	8002f8c <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fb52 	bl	80045cc <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f28:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f64:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f68:	f107 0214 	add.w	r2, r7, #20
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	edd7 0a08 	vldr	s1, [r7, #32]
 8002f78:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f7c:	f7fe ff5a 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fcce 	bl	8007928 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <interupt_DriveMotor+0x107c>)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <interupt_DriveMotor+0x1080>)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	6013      	str	r3, [r2, #0]



}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fac:	3f50624d 	.word	0x3f50624d
 8002fb0:	20000528 	.word	0x20000528
 8002fb4:	20000590 	.word	0x20000590
 8002fb8:	20000592 	.word	0x20000592
 8002fbc:	200004d8 	.word	0x200004d8
 8002fc0:	200004e4 	.word	0x200004e4
 8002fc4:	20000518 	.word	0x20000518
 8002fc8:	20000238 	.word	0x20000238
 8002fcc:	2000023c 	.word	0x2000023c
 8002fd0:	20000268 	.word	0x20000268
 8002fd4:	2000052c 	.word	0x2000052c
 8002fd8:	20000530 	.word	0x20000530

08002fdc <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002fe6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002fea:	ed87 1a03 	vstr	s2, [r7, #12]
 8002fee:	edc7 1a02 	vstr	s3, [r7, #8]
 8002ff2:	ed87 2a01 	vstr	s4, [r7, #4]
 8002ff6:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ffc:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003000:	edd7 7a04 	vldr	s15, [r7, #16]
 8003004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800300c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003010:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003014:	ed97 7a01 	vldr	s14, [r7, #4]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003020:	edd7 7a01 	vldr	s15, [r7, #4]
 8003024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d505      	bpl.n	800303a <straight_table2+0x5e>
 800302e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003032:	eef1 7a67 	vneg.f32	s15, s15
 8003036:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 800303a:	4bb4      	ldr	r3, [pc, #720]	; (800330c <straight_table2+0x330>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8003042:	2300      	movs	r3, #0
 8003044:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003046:	4ab2      	ldr	r2, [pc, #712]	; (8003310 <straight_table2+0x334>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800304c:	4ab0      	ldr	r2, [pc, #704]	; (8003310 <straight_table2+0x334>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003052:	4aaf      	ldr	r2, [pc, #700]	; (8003310 <straight_table2+0x334>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003058:	4aad      	ldr	r2, [pc, #692]	; (8003310 <straight_table2+0x334>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800305e:	4aac      	ldr	r2, [pc, #688]	; (8003310 <straight_table2+0x334>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003064:	edd7 7a02 	vldr	s15, [r7, #8]
 8003068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db03      	blt.n	800307a <straight_table2+0x9e>
 8003072:	4aa8      	ldr	r2, [pc, #672]	; (8003314 <straight_table2+0x338>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e006      	b.n	8003088 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800307a:	edd7 7a01 	vldr	s15, [r7, #4]
 800307e:	eef1 7a67 	vneg.f32	s15, s15
 8003082:	4ba4      	ldr	r3, [pc, #656]	; (8003314 <straight_table2+0x338>)
 8003084:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003088:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <straight_table2+0x338>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800308e:	4ba1      	ldr	r3, [pc, #644]	; (8003314 <straight_table2+0x338>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003096:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <straight_table2+0x33c>)
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <straight_table2+0x33c>)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80030a6:	4b9c      	ldr	r3, [pc, #624]	; (8003318 <straight_table2+0x33c>)
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80030ae:	4b9b      	ldr	r3, [pc, #620]	; (800331c <straight_table2+0x340>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <straight_table2+0x344>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80030ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80030be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	dd0e      	ble.n	80030e6 <straight_table2+0x10a>
 80030c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80030cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd05      	ble.n	80030e6 <straight_table2+0x10a>
 80030da:	4b91      	ldr	r3, [pc, #580]	; (8003320 <straight_table2+0x344>)
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	4a8c      	ldr	r2, [pc, #560]	; (8003314 <straight_table2+0x338>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80030e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	dd14      	ble.n	800311e <straight_table2+0x142>
 80030f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f8:	eef1 7a67 	vneg.f32	s15, s15
 80030fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d509      	bpl.n	800311e <straight_table2+0x142>
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <straight_table2+0x344>)
 800310c:	2206      	movs	r2, #6
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	edd7 7a01 	vldr	s15, [r7, #4]
 8003114:	eef1 7a67 	vneg.f32	s15, s15
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <straight_table2+0x338>)
 800311a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800311e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d514      	bpl.n	8003156 <straight_table2+0x17a>
 800312c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003130:	eef1 7a67 	vneg.f32	s15, s15
 8003134:	ed97 7a07 	vldr	s14, [r7, #28]
 8003138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	dd09      	ble.n	8003156 <straight_table2+0x17a>
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <straight_table2+0x344>)
 8003144:	2205      	movs	r2, #5
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	edd7 7a01 	vldr	s15, [r7, #4]
 800314c:	eef1 7a67 	vneg.f32	s15, s15
 8003150:	4b70      	ldr	r3, [pc, #448]	; (8003314 <straight_table2+0x338>)
 8003152:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	d50e      	bpl.n	8003182 <straight_table2+0x1a6>
 8003164:	ed97 7a07 	vldr	s14, [r7, #28]
 8003168:	edd7 7a05 	vldr	s15, [r7, #20]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d505      	bpl.n	8003182 <straight_table2+0x1a6>
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <straight_table2+0x344>)
 8003178:	2206      	movs	r2, #6
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	; (8003314 <straight_table2+0x338>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <straight_table2+0x348>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003188:	783a      	ldrb	r2, [r7, #0]
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <straight_table2+0x34c>)
 800318c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 800318e:	f004 fbaf 	bl	80078f0 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80d3 	bne.w	8003340 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <straight_table2+0x350>)
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <straight_table2+0x344>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <straight_table2+0x338>)
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031b0:	bf00      	nop
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <straight_table2+0x354>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80031bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c4:	d409      	bmi.n	80031da <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031c6:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <straight_table2+0x354>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003334 <straight_table2+0x358>
 80031d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	dd18      	ble.n	800320c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031da:	4b57      	ldr	r3, [pc, #348]	; (8003338 <straight_table2+0x35c>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d409      	bmi.n	8003202 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80031ee:	4b52      	ldr	r3, [pc, #328]	; (8003338 <straight_table2+0x35c>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003334 <straight_table2+0x358>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dd04      	ble.n	800320c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003202:	4b4e      	ldr	r3, [pc, #312]	; (800333c <straight_table2+0x360>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0d2      	beq.n	80031b2 <straight_table2+0x1d6>
		straight.displacement=0;
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <straight_table2+0x338>)
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	db03      	blt.n	800322a <straight_table2+0x24e>
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <straight_table2+0x338>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6053      	str	r3, [r2, #4]
 8003228:	e006      	b.n	8003238 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 800322a:	edd7 7a01 	vldr	s15, [r7, #4]
 800322e:	eef1 7a67 	vneg.f32	s15, s15
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <straight_table2+0x338>)
 8003234:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <straight_table2+0x344>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800323e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	dd0e      	ble.n	800326a <straight_table2+0x28e>
 800324c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003250:	edd7 7a05 	vldr	s15, [r7, #20]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	dd05      	ble.n	800326a <straight_table2+0x28e>
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <straight_table2+0x344>)
 8003260:	2205      	movs	r2, #5
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <straight_table2+0x338>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800326a:	edd7 7a05 	vldr	s15, [r7, #20]
 800326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	dd14      	ble.n	80032a2 <straight_table2+0x2c6>
 8003278:	edd7 7a05 	vldr	s15, [r7, #20]
 800327c:	eef1 7a67 	vneg.f32	s15, s15
 8003280:	ed97 7a07 	vldr	s14, [r7, #28]
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d509      	bpl.n	80032a2 <straight_table2+0x2c6>
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <straight_table2+0x344>)
 8003290:	2206      	movs	r2, #6
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	edd7 7a01 	vldr	s15, [r7, #4]
 8003298:	eef1 7a67 	vneg.f32	s15, s15
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <straight_table2+0x338>)
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80032a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d514      	bpl.n	80032da <straight_table2+0x2fe>
 80032b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	dd09      	ble.n	80032da <straight_table2+0x2fe>
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <straight_table2+0x344>)
 80032c8:	2205      	movs	r2, #5
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d0:	eef1 7a67 	vneg.f32	s15, s15
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <straight_table2+0x338>)
 80032d6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80032da:	edd7 7a05 	vldr	s15, [r7, #20]
 80032de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	f140 825b 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	f140 8251 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <straight_table2+0x344>)
 8003300:	2206      	movs	r2, #6
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <straight_table2+0x338>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6053      	str	r3, [r2, #4]
 800330a:	e249      	b.n	80037a0 <straight_table2+0x7c4>
 800330c:	20000529 	.word	0x20000529
 8003310:	200004f0 	.word	0x200004f0
 8003314:	200004d8 	.word	0x200004d8
 8003318:	200004e4 	.word	0x200004e4
 800331c:	20000805 	.word	0x20000805
 8003320:	20000804 	.word	0x20000804
 8003324:	20000528 	.word	0x20000528
 8003328:	20000590 	.word	0x20000590
 800332c:	20000534 	.word	0x20000534
 8003330:	200005cc 	.word	0x200005cc
 8003334:	425c0000 	.word	0x425c0000
 8003338:	200005d0 	.word	0x200005d0
 800333c:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80c9 	bne.w	80034da <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003348:	4bb8      	ldr	r3, [pc, #736]	; (800362c <straight_table2+0x650>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003350:	4bb7      	ldr	r3, [pc, #732]	; (8003630 <straight_table2+0x654>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003356:	4bb7      	ldr	r3, [pc, #732]	; (8003634 <straight_table2+0x658>)
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800335e:	bf00      	nop
 8003360:	4bb5      	ldr	r3, [pc, #724]	; (8003638 <straight_table2+0x65c>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d913      	bls.n	8003398 <straight_table2+0x3bc>
 8003370:	4bb1      	ldr	r3, [pc, #708]	; (8003638 <straight_table2+0x65c>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eeba 7a0a 	vmov.f32	s14, #170	; 0xc1500000 -13.0
 800337a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	d909      	bls.n	8003398 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003384:	4bac      	ldr	r3, [pc, #688]	; (8003638 <straight_table2+0x65c>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800338a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800363c <straight_table2+0x660>
 800338e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	db20      	blt.n	80033da <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003398:	4ba9      	ldr	r3, [pc, #676]	; (8003640 <straight_table2+0x664>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800339e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d913      	bls.n	80033d0 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033a8:	4ba5      	ldr	r3, [pc, #660]	; (8003640 <straight_table2+0x664>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eeba 7a0a 	vmov.f32	s14, #170	; 0xc1500000 -13.0
 80033b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	d909      	bls.n	80033d0 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033bc:	4ba0      	ldr	r3, [pc, #640]	; (8003640 <straight_table2+0x664>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033c2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800363c <straight_table2+0x660>
 80033c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	db04      	blt.n	80033da <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 80033d0:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <straight_table2+0x668>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0c2      	beq.n	8003360 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 80033da:	4b96      	ldr	r3, [pc, #600]	; (8003634 <straight_table2+0x658>)
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	db03      	blt.n	80033f8 <straight_table2+0x41c>
 80033f0:	4a90      	ldr	r2, [pc, #576]	; (8003634 <straight_table2+0x658>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	e006      	b.n	8003406 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80033f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fc:	eef1 7a67 	vneg.f32	s15, s15
 8003400:	4b8c      	ldr	r3, [pc, #560]	; (8003634 <straight_table2+0x658>)
 8003402:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003406:	4b8a      	ldr	r3, [pc, #552]	; (8003630 <straight_table2+0x654>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800340c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	dd0e      	ble.n	8003438 <straight_table2+0x45c>
 800341a:	ed97 7a07 	vldr	s14, [r7, #28]
 800341e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	dd05      	ble.n	8003438 <straight_table2+0x45c>
 800342c:	4b80      	ldr	r3, [pc, #512]	; (8003630 <straight_table2+0x654>)
 800342e:	2205      	movs	r2, #5
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	4a80      	ldr	r2, [pc, #512]	; (8003634 <straight_table2+0x658>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003438:	edd7 7a05 	vldr	s15, [r7, #20]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd14      	ble.n	8003470 <straight_table2+0x494>
 8003446:	edd7 7a05 	vldr	s15, [r7, #20]
 800344a:	eef1 7a67 	vneg.f32	s15, s15
 800344e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d509      	bpl.n	8003470 <straight_table2+0x494>
 800345c:	4b74      	ldr	r3, [pc, #464]	; (8003630 <straight_table2+0x654>)
 800345e:	2206      	movs	r2, #6
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	edd7 7a01 	vldr	s15, [r7, #4]
 8003466:	eef1 7a67 	vneg.f32	s15, s15
 800346a:	4b72      	ldr	r3, [pc, #456]	; (8003634 <straight_table2+0x658>)
 800346c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003470:	edd7 7a05 	vldr	s15, [r7, #20]
 8003474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d514      	bpl.n	80034a8 <straight_table2+0x4cc>
 800347e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003482:	eef1 7a67 	vneg.f32	s15, s15
 8003486:	ed97 7a07 	vldr	s14, [r7, #28]
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	dd09      	ble.n	80034a8 <straight_table2+0x4cc>
 8003494:	4b66      	ldr	r3, [pc, #408]	; (8003630 <straight_table2+0x654>)
 8003496:	2205      	movs	r2, #5
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	edd7 7a01 	vldr	s15, [r7, #4]
 800349e:	eef1 7a67 	vneg.f32	s15, s15
 80034a2:	4b64      	ldr	r3, [pc, #400]	; (8003634 <straight_table2+0x658>)
 80034a4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80034a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	f140 8174 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	f140 816a 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034cc:	4b58      	ldr	r3, [pc, #352]	; (8003630 <straight_table2+0x654>)
 80034ce:	2206      	movs	r2, #6
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	4a58      	ldr	r2, [pc, #352]	; (8003634 <straight_table2+0x658>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	e162      	b.n	80037a0 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f040 80b9 	bne.w	8003654 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <straight_table2+0x650>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80034ea:	4b51      	ldr	r3, [pc, #324]	; (8003630 <straight_table2+0x654>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <straight_table2+0x658>)
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80034f8:	bf00      	nop
 80034fa:	4b53      	ldr	r3, [pc, #332]	; (8003648 <straight_table2+0x66c>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	d409      	bmi.n	8003522 <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800350e:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <straight_table2+0x66c>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003514:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800364c <straight_table2+0x670>
 8003518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	dd04      	ble.n	800352c <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <straight_table2+0x674>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0e6      	beq.n	80034fa <straight_table2+0x51e>
		straight.displacement=0;
 800352c:	4b41      	ldr	r3, [pc, #260]	; (8003634 <straight_table2+0x658>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003534:	edd7 7a02 	vldr	s15, [r7, #8]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	db03      	blt.n	800354a <straight_table2+0x56e>
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <straight_table2+0x658>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6053      	str	r3, [r2, #4]
 8003548:	e006      	b.n	8003558 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 800354a:	edd7 7a01 	vldr	s15, [r7, #4]
 800354e:	eef1 7a67 	vneg.f32	s15, s15
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <straight_table2+0x658>)
 8003554:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <straight_table2+0x654>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800355e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	dd0e      	ble.n	800358a <straight_table2+0x5ae>
 800356c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	dd05      	ble.n	800358a <straight_table2+0x5ae>
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <straight_table2+0x654>)
 8003580:	2205      	movs	r2, #5
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <straight_table2+0x658>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800358a:	edd7 7a05 	vldr	s15, [r7, #20]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	dd14      	ble.n	80035c2 <straight_table2+0x5e6>
 8003598:	edd7 7a05 	vldr	s15, [r7, #20]
 800359c:	eef1 7a67 	vneg.f32	s15, s15
 80035a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80035a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	d509      	bpl.n	80035c2 <straight_table2+0x5e6>
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <straight_table2+0x654>)
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035b8:	eef1 7a67 	vneg.f32	s15, s15
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <straight_table2+0x658>)
 80035be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80035c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	d514      	bpl.n	80035fa <straight_table2+0x61e>
 80035d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d4:	eef1 7a67 	vneg.f32	s15, s15
 80035d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	dd09      	ble.n	80035fa <straight_table2+0x61e>
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <straight_table2+0x654>)
 80035e8:	2205      	movs	r2, #5
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f0:	eef1 7a67 	vneg.f32	s15, s15
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <straight_table2+0x658>)
 80035f6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80035fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	f140 80cb 	bpl.w	80037a0 <straight_table2+0x7c4>
 800360a:	ed97 7a07 	vldr	s14, [r7, #28]
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	f140 80c1 	bpl.w	80037a0 <straight_table2+0x7c4>
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <straight_table2+0x654>)
 8003620:	2206      	movs	r2, #6
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	4a03      	ldr	r2, [pc, #12]	; (8003634 <straight_table2+0x658>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6053      	str	r3, [r2, #4]
 800362a:	e0b9      	b.n	80037a0 <straight_table2+0x7c4>
 800362c:	20000534 	.word	0x20000534
 8003630:	20000804 	.word	0x20000804
 8003634:	200004d8 	.word	0x200004d8
 8003638:	200005d4 	.word	0x200005d4
 800363c:	42000000 	.word	0x42000000
 8003640:	200005d8 	.word	0x200005d8
 8003644:	200005f3 	.word	0x200005f3
 8003648:	200005e4 	.word	0x200005e4
 800364c:	420c0000 	.word	0x420c0000
 8003650:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b04      	cmp	r3, #4
 8003658:	f040 80a2 	bne.w	80037a0 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800365c:	4ba6      	ldr	r3, [pc, #664]	; (80038f8 <straight_table2+0x91c>)
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003664:	4ba5      	ldr	r3, [pc, #660]	; (80038fc <straight_table2+0x920>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800366a:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <straight_table2+0x924>)
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003672:	bf00      	nop
 8003674:	4ba3      	ldr	r3, [pc, #652]	; (8003904 <straight_table2+0x928>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800367e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d409      	bmi.n	800369c <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003688:	4b9e      	ldr	r3, [pc, #632]	; (8003904 <straight_table2+0x928>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800368e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003908 <straight_table2+0x92c>
 8003692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	dd04      	ble.n	80036a6 <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 800369c:	4b9b      	ldr	r3, [pc, #620]	; (800390c <straight_table2+0x930>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0e6      	beq.n	8003674 <straight_table2+0x698>
		straight.displacement=0;
 80036a6:	4b96      	ldr	r3, [pc, #600]	; (8003900 <straight_table2+0x924>)
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80036ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	db03      	blt.n	80036c4 <straight_table2+0x6e8>
 80036bc:	4a90      	ldr	r2, [pc, #576]	; (8003900 <straight_table2+0x924>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6053      	str	r3, [r2, #4]
 80036c2:	e006      	b.n	80036d2 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <straight_table2+0x924>)
 80036ce:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80036d2:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <straight_table2+0x920>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80036d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	dd0e      	ble.n	8003704 <straight_table2+0x728>
 80036e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	dd05      	ble.n	8003704 <straight_table2+0x728>
 80036f8:	4b80      	ldr	r3, [pc, #512]	; (80038fc <straight_table2+0x920>)
 80036fa:	2205      	movs	r2, #5
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	4a80      	ldr	r2, [pc, #512]	; (8003900 <straight_table2+0x924>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003704:	edd7 7a05 	vldr	s15, [r7, #20]
 8003708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	dd14      	ble.n	800373c <straight_table2+0x760>
 8003712:	edd7 7a05 	vldr	s15, [r7, #20]
 8003716:	eef1 7a67 	vneg.f32	s15, s15
 800371a:	ed97 7a07 	vldr	s14, [r7, #28]
 800371e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d509      	bpl.n	800373c <straight_table2+0x760>
 8003728:	4b74      	ldr	r3, [pc, #464]	; (80038fc <straight_table2+0x920>)
 800372a:	2206      	movs	r2, #6
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003732:	eef1 7a67 	vneg.f32	s15, s15
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <straight_table2+0x924>)
 8003738:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800373c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	d514      	bpl.n	8003774 <straight_table2+0x798>
 800374a:	edd7 7a05 	vldr	s15, [r7, #20]
 800374e:	eef1 7a67 	vneg.f32	s15, s15
 8003752:	ed97 7a07 	vldr	s14, [r7, #28]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd09      	ble.n	8003774 <straight_table2+0x798>
 8003760:	4b66      	ldr	r3, [pc, #408]	; (80038fc <straight_table2+0x920>)
 8003762:	2205      	movs	r2, #5
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	edd7 7a01 	vldr	s15, [r7, #4]
 800376a:	eef1 7a67 	vneg.f32	s15, s15
 800376e:	4b64      	ldr	r3, [pc, #400]	; (8003900 <straight_table2+0x924>)
 8003770:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003774:	edd7 7a05 	vldr	s15, [r7, #20]
 8003778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	d50e      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003782:	ed97 7a07 	vldr	s14, [r7, #28]
 8003786:	edd7 7a05 	vldr	s15, [r7, #20]
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	d505      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <straight_table2+0x920>)
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	4a59      	ldr	r2, [pc, #356]	; (8003900 <straight_table2+0x924>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 80037a0:	78bb      	ldrb	r3, [r7, #2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 809e 	bne.w	80038e4 <straight_table2+0x908>
	while (g_acc_flag!=4){
 80037a8:	e074      	b.n	8003894 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d120      	bne.n	80037f2 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80037b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037bc:	4b54      	ldr	r3, [pc, #336]	; (8003910 <straight_table2+0x934>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d90e      	bls.n	80037ea <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80037d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <straight_table2+0x938>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d900      	bls.n	80037ea <straight_table2+0x80e>
 80037e8:	e054      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037ea:	4b44      	ldr	r3, [pc, #272]	; (80038fc <straight_table2+0x920>)
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
				break;
 80037f0:	e055      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d121      	bne.n	800383c <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80037f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037fc:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003804:	4b44      	ldr	r3, [pc, #272]	; (8003918 <straight_table2+0x93c>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d900      	bls.n	8003816 <straight_table2+0x83a>
 8003814:	e03e      	b.n	8003894 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003816:	edd7 7a05 	vldr	s15, [r7, #20]
 800381a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800381e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003822:	4b3e      	ldr	r3, [pc, #248]	; (800391c <straight_table2+0x940>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	d900      	bls.n	8003834 <straight_table2+0x858>
 8003832:	e02f      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <straight_table2+0x920>)
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]
				break;
 800383a:	e030      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d112      	bne.n	8003868 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003842:	edd7 7a05 	vldr	s15, [r7, #20]
 8003846:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800384a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <straight_table2+0x944>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	d900      	bls.n	8003860 <straight_table2+0x884>
 800385e:	e019      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <straight_table2+0x920>)
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
				break;
 8003866:	e01a      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d112      	bne.n	8003894 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <straight_table2+0x928>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d900      	bls.n	800388c <straight_table2+0x8b0>
 800388a:	e003      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <straight_table2+0x920>)
 800388e:	2204      	movs	r2, #4
 8003890:	701a      	strb	r2, [r3, #0]
				break;
 8003892:	e004      	b.n	800389e <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <straight_table2+0x920>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b04      	cmp	r3, #4
 800389c:	d185      	bne.n	80037aa <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 800389e:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	d105      	bne.n	80038b8 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 80038ac:	2064      	movs	r0, #100	; 0x64
 80038ae:	f004 faf7 	bl	8007ea0 <wait_ms_NoReset>
		modeacc = 0;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <straight_table2+0x948>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <straight_table2+0x94c>)
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <straight_table2+0x94c>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <straight_table2+0x950>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <straight_table2+0x950>)
 80038dc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80038e0:	f004 f814 	bl	800790c <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <straight_table2+0x924>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	ee07 3a90 	vmov	s15, r3



}
 80038ec:	eeb0 0a67 	vmov.f32	s0, s15
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000534 	.word	0x20000534
 80038fc:	20000804 	.word	0x20000804
 8003900:	200004d8 	.word	0x200004d8
 8003904:	200005e8 	.word	0x200005e8
 8003908:	420c0000 	.word	0x420c0000
 800390c:	200005f4 	.word	0x200005f4
 8003910:	200005d0 	.word	0x200005d0
 8003914:	200005cc 	.word	0x200005cc
 8003918:	200005d8 	.word	0x200005d8
 800391c:	200005d4 	.word	0x200005d4
 8003920:	200005e4 	.word	0x200005e4
 8003924:	20000528 	.word	0x20000528
 8003928:	20000220 	.word	0x20000220
 800392c:	20000224 	.word	0x20000224

08003930 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	ed87 0a03 	vstr	s0, [r7, #12]
 800393a:	60b8      	str	r0, [r7, #8]
 800393c:	460b      	mov	r3, r1
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	4613      	mov	r3, r2
 8003942:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 8003944:	e02f      	b.n	80039a6 <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <End_straight+0x2e>
 8003952:	79bb      	ldrb	r3, [r7, #6]
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d120      	bne.n	80039a6 <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003964:	edd7 7a03 	vldr	s15, [r7, #12]
 8003968:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <End_straight+0xb4>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d90e      	bls.n	800399e <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003980:	edd7 7a03 	vldr	s15, [r7, #12]
 8003984:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <End_straight+0xb8>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	d900      	bls.n	800399e <End_straight+0x6e>
 800399c:	e003      	b.n	80039a6 <End_straight+0x76>
						g_acc_flag=4;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <End_straight+0xbc>)
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
						break;
 80039a4:	e004      	b.n	80039b0 <End_straight+0x80>
	while (g_acc_flag!=4){
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <End_straight+0xbc>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d1ca      	bne.n	8003946 <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <End_straight+0xc0>)
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <End_straight+0xc0>)
 80039c0:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <End_straight+0xc4>)
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <End_straight+0xc4>)
 80039d4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039d8:	f003 ff98 	bl	800790c <pl_DriveMotor_stop>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200005d0 	.word	0x200005d0
 80039e8:	200005cc 	.word	0x200005cc
 80039ec:	20000804 	.word	0x20000804
 80039f0:	20000220 	.word	0x20000220
 80039f4:	20000224 	.word	0x20000224

080039f8 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a02:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a06:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a0e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a16:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a22:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d505      	bpl.n	8003a54 <turning_table2+0x5c>
 8003a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4c:	eef1 7a67 	vneg.f32	s15, s15
 8003a50:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003a54:	4a69      	ldr	r2, [pc, #420]	; (8003bfc <turning_table2+0x204>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003a5a:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <turning_table2+0x204>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <turning_table2+0x204>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <turning_table2+0x204>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003a6c:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <turning_table2+0x204>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	db03      	blt.n	8003a88 <turning_table2+0x90>
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <turning_table2+0x208>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	e006      	b.n	8003a96 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8c:	eef1 7a67 	vneg.f32	s15, s15
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <turning_table2+0x208>)
 8003a92:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <turning_table2+0x208>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <turning_table2+0x208>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <turning_table2+0x20c>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <turning_table2+0x20c>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <turning_table2+0x20c>)
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003abc:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <turning_table2+0x210>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <turning_table2+0x214>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd0e      	ble.n	8003af4 <turning_table2+0xfc>
 8003ad6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	dd05      	ble.n	8003af4 <turning_table2+0xfc>
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <turning_table2+0x214>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <turning_table2+0x208>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd14      	ble.n	8003b2c <turning_table2+0x134>
 8003b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b06:	eef1 7a67 	vneg.f32	s15, s15
 8003b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d509      	bpl.n	8003b2c <turning_table2+0x134>
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <turning_table2+0x214>)
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b22:	eef1 7a67 	vneg.f32	s15, s15
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <turning_table2+0x208>)
 8003b28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d514      	bpl.n	8003b64 <turning_table2+0x16c>
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	eef1 7a67 	vneg.f32	s15, s15
 8003b42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd09      	ble.n	8003b64 <turning_table2+0x16c>
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <turning_table2+0x214>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5a:	eef1 7a67 	vneg.f32	s15, s15
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <turning_table2+0x208>)
 8003b60:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50e      	bpl.n	8003b90 <turning_table2+0x198>
 8003b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d505      	bpl.n	8003b90 <turning_table2+0x198>
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <turning_table2+0x214>)
 8003b86:	2206      	movs	r2, #6
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <turning_table2+0x208>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <turning_table2+0x218>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b96:	f003 feab 	bl	80078f0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b9a:	bf00      	nop
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <turning_table2+0x214>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d1fa      	bne.n	8003b9c <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d106      	bne.n	8003bc2 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bb8:	f004 f972 	bl	8007ea0 <wait_ms_NoReset>
		modeacc = 0;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <turning_table2+0x218>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <turning_table2+0x21c>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <turning_table2+0x21c>)
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003bd6:	f003 fe99 	bl	800790c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <turning_table2+0x220>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <turning_table2+0x224>)
 8003be0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <turning_table2+0x228>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <turning_table2+0x22c>)
 8003be8:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <turning_table2+0x208>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	ee07 3a90 	vmov	s15, r3
}
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000504 	.word	0x20000504
 8003c00:	200004e4 	.word	0x200004e4
 8003c04:	200004d8 	.word	0x200004d8
 8003c08:	20000805 	.word	0x20000805
 8003c0c:	20000804 	.word	0x20000804
 8003c10:	20000528 	.word	0x20000528
 8003c14:	20000264 	.word	0x20000264
 8003c18:	20000228 	.word	0x20000228
 8003c1c:	20000258 	.word	0x20000258
 8003c20:	2000022c 	.word	0x2000022c
 8003c24:	2000025c 	.word	0x2000025c

08003c28 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c32:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c36:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c3e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c42:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c56:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c62:	ed97 7a00 	vldr	s14, [r7]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c6e:	edd7 7a00 	vldr	s15, [r7]
 8003c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d505      	bpl.n	8003c88 <slalom_table2+0x60>
 8003c7c:	edd7 7a00 	vldr	s15, [r7]
 8003c80:	eef1 7a67 	vneg.f32	s15, s15
 8003c84:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c88:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <slalom_table2+0x1dc>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	; (8003e04 <slalom_table2+0x1dc>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c94:	4a5b      	ldr	r2, [pc, #364]	; (8003e04 <slalom_table2+0x1dc>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c9a:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <slalom_table2+0x1dc>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <slalom_table2+0x1dc>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	db03      	blt.n	8003cbc <slalom_table2+0x94>
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <slalom_table2+0x1e0>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e006      	b.n	8003cca <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003cbc:	edd7 7a00 	vldr	s15, [r7]
 8003cc0:	eef1 7a67 	vneg.f32	s15, s15
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <slalom_table2+0x1e0>)
 8003cc6:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003cca:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <slalom_table2+0x1e0>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <slalom_table2+0x1e0>)
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003cd8:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <slalom_table2+0x1e4>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <slalom_table2+0x1e8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cf4:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <slalom_table2+0x1ec>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	dd0e      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d08:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d18:	dd05      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <slalom_table2+0x1ec>)
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <slalom_table2+0x1e0>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	dd14      	ble.n	8003d5e <slalom_table2+0x136>
 8003d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d38:	eef1 7a67 	vneg.f32	s15, s15
 8003d3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d509      	bpl.n	8003d5e <slalom_table2+0x136>
 8003d4a:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <slalom_table2+0x1ec>)
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	edd7 7a00 	vldr	s15, [r7]
 8003d54:	eef1 7a67 	vneg.f32	s15, s15
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <slalom_table2+0x1e0>)
 8003d5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d514      	bpl.n	8003d96 <slalom_table2+0x16e>
 8003d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d70:	eef1 7a67 	vneg.f32	s15, s15
 8003d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	dd09      	ble.n	8003d96 <slalom_table2+0x16e>
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <slalom_table2+0x1ec>)
 8003d84:	2205      	movs	r2, #5
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	edd7 7a00 	vldr	s15, [r7]
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <slalom_table2+0x1e0>)
 8003d92:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d50e      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003da4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003da8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	d505      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <slalom_table2+0x1ec>)
 8003db8:	2206      	movs	r2, #6
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <slalom_table2+0x1e0>)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <slalom_table2+0x1f0>)
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003dc8:	f003 fd92 	bl	80078f0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003dcc:	bf00      	nop
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <slalom_table2+0x1ec>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d1fa      	bne.n	8003dce <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <slalom_table2+0x1f4>)
 8003dda:	ed93 7a00 	vldr	s14, [r3]
 8003dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <slalom_table2+0x1f4>)
 8003de8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003dec:	f003 fd8e 	bl	800790c <pl_DriveMotor_stop>

	return turning.velocity;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <slalom_table2+0x1e0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000504 	.word	0x20000504
 8003e08:	200004e4 	.word	0x200004e4
 8003e0c:	200004d8 	.word	0x200004d8
 8003e10:	20000805 	.word	0x20000805
 8003e14:	20000804 	.word	0x20000804
 8003e18:	20000528 	.word	0x20000528
 8003e1c:	20000264 	.word	0x20000264

08003e20 <no_angle>:

void no_angle(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <no_angle+0x88>)
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <no_angle+0x88>)
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <no_angle+0x88>)
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <no_angle+0x8c>)
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <no_angle+0x8c>)
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <no_angle+0x8c>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <no_angle+0x90>)
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e5a:	f003 fd49 	bl	80078f0 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e5e:	e002      	b.n	8003e66 <no_angle+0x46>
		HAL_Delay(1);
 8003e60:	2001      	movs	r0, #1
 8003e62:	f014 fce1 	bl	8018828 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <no_angle+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e6e:	ddf7      	ble.n	8003e60 <no_angle+0x40>
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <no_angle+0x94>)
 8003e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e7a:	ddf1      	ble.n	8003e60 <no_angle+0x40>
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <no_angle+0x94>)
 8003e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e86:	ddeb      	ble.n	8003e60 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <no_angle+0x90>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e8e:	f003 fd3d 	bl	800790c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <no_angle+0x98>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <no_angle+0x9c>)
 8003e98:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <no_angle+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <no_angle+0xa4>)
 8003ea0:	6013      	str	r3, [r2, #0]

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200004e4 	.word	0x200004e4
 8003eac:	200004d8 	.word	0x200004d8
 8003eb0:	20000528 	.word	0x20000528
 8003eb4:	200002b8 	.word	0x200002b8
 8003eb8:	20000228 	.word	0x20000228
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	2000022c 	.word	0x2000022c
 8003ec4:	2000025c 	.word	0x2000025c

08003ec8 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ed2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ed6:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003ee0:	4a3b      	ldr	r2, [pc, #236]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003ef4:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <mollifier_slalom_table+0x114>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f22:	eef0 7ae7 	vabs.f32	s15, s15
 8003f26:	ee17 0a90 	vmov	r0, s15
 8003f2a:	f7fc fb35 	bl	8000598 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f38:	a321      	add	r3, pc, #132	; (adr r3, 8003fc0 <mollifier_slalom_table+0xf8>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc fcab 	bl	800089c <__aeabi_ddiv>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	a31e      	add	r3, pc, #120	; (adr r3, 8003fc8 <mollifier_slalom_table+0x100>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fb78 	bl	8000648 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fb19 	bl	8000598 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fc95 	bl	800089c <__aeabi_ddiv>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc fe3d 	bl	8000bf8 <__aeabi_d2f>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <mollifier_slalom_table+0x11c>)
 8003f82:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <mollifier_slalom_table+0x120>)
 8003f86:	2206      	movs	r2, #6
 8003f88:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f8a:	f003 fcb1 	bl	80078f0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f8e:	bf00      	nop
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d1fa      	bne.n	8003f90 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <mollifier_slalom_table+0x124>)
 8003f9c:	ed93 7a00 	vldr	s14, [r3]
 8003fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <mollifier_slalom_table+0x124>)
 8003faa:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003fae:	f003 fcad 	bl	800790c <pl_DriveMotor_stop>

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	f9db22d1 	.word	0xf9db22d1
 8003fc4:	3fdc6a7e 	.word	0x3fdc6a7e
 8003fc8:	362cef38 	.word	0x362cef38
 8003fcc:	3fd78b56 	.word	0x3fd78b56
 8003fd0:	20000518 	.word	0x20000518
 8003fd4:	200004e4 	.word	0x200004e4
 8003fd8:	200004d8 	.word	0x200004d8
 8003fdc:	20000805 	.word	0x20000805
 8003fe0:	20000804 	.word	0x20000804
 8003fe4:	20000800 	.word	0x20000800
 8003fe8:	20000528 	.word	0x20000528
 8003fec:	20000264 	.word	0x20000264

08003ff0 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <no_frontwall_straight+0x70>)
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <no_frontwall_straight+0x70>)
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <no_frontwall_straight+0x70>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <no_frontwall_straight+0x74>)
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <no_frontwall_straight+0x74>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <no_frontwall_straight+0x74>)
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <no_frontwall_straight+0x78>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <no_frontwall_straight+0x7c>)
 800402c:	2205      	movs	r2, #5
 800402e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004030:	f003 fc5e 	bl	80078f0 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004034:	2096      	movs	r0, #150	; 0x96
 8004036:	f003 ff33 	bl	8007ea0 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <no_frontwall_straight+0x78>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <no_frontwall_straight+0x7c>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004046:	f003 fc61 	bl	800790c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <no_frontwall_straight+0x80>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <no_frontwall_straight+0x84>)
 8004050:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <no_frontwall_straight+0x88>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <no_frontwall_straight+0x8c>)
 8004058:	6013      	str	r3, [r2, #0]

}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200004e4 	.word	0x200004e4
 8004064:	200004d8 	.word	0x200004d8
 8004068:	20000591 	.word	0x20000591
 800406c:	20000528 	.word	0x20000528
 8004070:	20000228 	.word	0x20000228
 8004074:	20000258 	.word	0x20000258
 8004078:	2000022c 	.word	0x2000022c
 800407c:	2000025c 	.word	0x2000025c

08004080 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6178      	str	r0, [r7, #20]
 8004088:	ed87 0a04 	vstr	s0, [r7, #16]
 800408c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	ed87 1a01 	vstr	s2, [r7, #4]
 8004096:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 800409a:	edd7 7a04 	vldr	s15, [r7, #16]
 800409e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a6:	db7c      	blt.n	80041a2 <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7fc fa75 	bl	8000598 <__aeabi_f2d>
 80040ae:	a3c8      	add	r3, pc, #800	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f7fc fac8 	bl	8000648 <__aeabi_dmul>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	4bc6      	ldr	r3, [pc, #792]	; (80043e0 <feedforward_const_accel+0x360>)
 80040c6:	f7fc fbe9 	bl	800089c <__aeabi_ddiv>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80040d2:	a3b5      	add	r3, pc, #724	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc fbe0 	bl	800089c <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040ec:	f7fc fbd6 	bl	800089c <__aeabi_ddiv>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	a3ad      	add	r3, pc, #692	; (adr r3, 80043b0 <feedforward_const_accel+0x330>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc f8ed 	bl	80002dc <__adddf3>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	a3ab      	add	r3, pc, #684	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc fa9a 	bl	8000648 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	a3a8      	add	r3, pc, #672	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fbbb 	bl	800089c <__aeabi_ddiv>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800412e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004132:	eddf 6aac 	vldr	s13, [pc, #688]	; 80043e4 <feedforward_const_accel+0x364>
 8004136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80043e8 <feedforward_const_accel+0x368>
 800413e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004142:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004146:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800414a:	ee16 0a90 	vmov	r0, s13
 800414e:	f7fc fa23 	bl	8000598 <__aeabi_f2d>
 8004152:	a39d      	add	r3, pc, #628	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f7fc fa76 	bl	8000648 <__aeabi_dmul>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	a390      	add	r3, pc, #576	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fb97 	bl	800089c <__aeabi_ddiv>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800417e:	f7fc fb8d 	bl	800089c <__aeabi_ddiv>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4620      	mov	r0, r4
 8004188:	4629      	mov	r1, r5
 800418a:	f7fc f8a7 	bl	80002dc <__adddf3>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f7fc fd2f 	bl	8000bf8 <__aeabi_d2f>
 800419a:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e07b      	b.n	800429a <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7fc f9f8 	bl	8000598 <__aeabi_f2d>
 80041a8:	a389      	add	r3, pc, #548	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc fa4b 	bl	8000648 <__aeabi_dmul>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <feedforward_const_accel+0x360>)
 80041c0:	f7fc fb6c 	bl	800089c <__aeabi_ddiv>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80041cc:	a376      	add	r3, pc, #472	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc fb63 	bl	800089c <__aeabi_ddiv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041e6:	f7fc fb59 	bl	800089c <__aeabi_ddiv>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	a36f      	add	r3, pc, #444	; (adr r3, 80043b0 <feedforward_const_accel+0x330>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc f86e 	bl	80002d8 <__aeabi_dsub>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	a36c      	add	r3, pc, #432	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc fa1d 	bl	8000648 <__aeabi_dmul>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	a36a      	add	r3, pc, #424	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fc fb3e 	bl	800089c <__aeabi_ddiv>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4614      	mov	r4, r2
 8004226:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004228:	ed97 7a04 	vldr	s14, [r7, #16]
 800422c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80043e4 <feedforward_const_accel+0x364>
 8004230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004234:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80043e8 <feedforward_const_accel+0x368>
 8004238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800423c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004240:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004244:	ee16 0a90 	vmov	r0, s13
 8004248:	f7fc f9a6 	bl	8000598 <__aeabi_f2d>
 800424c:	a35e      	add	r3, pc, #376	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f9f9 	bl	8000648 <__aeabi_dmul>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	a352      	add	r3, pc, #328	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc fb1a 	bl	800089c <__aeabi_ddiv>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004278:	f7fc fb10 	bl	800089c <__aeabi_ddiv>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fc f82a 	bl	80002dc <__adddf3>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f7fc fcb2 	bl	8000bf8 <__aeabi_d2f>
 8004294:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 800429a:	edd7 7a01 	vldr	s15, [r7, #4]
 800429e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	f2c0 80a1 	blt.w	80043ec <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f7fc f974 	bl	8000598 <__aeabi_f2d>
 80042b0:	a349      	add	r3, pc, #292	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc f9c7 	bl	8000648 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4610      	mov	r0, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <feedforward_const_accel+0x360>)
 80042c8:	f7fc fae8 	bl	800089c <__aeabi_ddiv>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042d4:	a334      	add	r3, pc, #208	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fc fadf 	bl	800089c <__aeabi_ddiv>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042ee:	f7fc fad5 	bl	800089c <__aeabi_ddiv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	a32d      	add	r3, pc, #180	; (adr r3, 80043b0 <feedforward_const_accel+0x330>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f7fb ffec 	bl	80002dc <__adddf3>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	a32a      	add	r3, pc, #168	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f7fc f999 	bl	8000648 <__aeabi_dmul>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	a328      	add	r3, pc, #160	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fc faba 	bl	800089c <__aeabi_ddiv>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004330:	ed97 7a01 	vldr	s14, [r7, #4]
 8004334:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80043e4 <feedforward_const_accel+0x364>
 8004338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800433c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80043e8 <feedforward_const_accel+0x368>
 8004340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004344:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004348:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800434c:	ee16 0a90 	vmov	r0, s13
 8004350:	f7fc f922 	bl	8000598 <__aeabi_f2d>
 8004354:	a31c      	add	r3, pc, #112	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f7fc f975 	bl	8000648 <__aeabi_dmul>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	a310      	add	r3, pc, #64	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f7fc fa96 	bl	800089c <__aeabi_ddiv>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004380:	f7fc fa8c 	bl	800089c <__aeabi_ddiv>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fb ffa6 	bl	80002dc <__adddf3>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	f7fc fc2e 	bl	8000bf8 <__aeabi_d2f>
 800439c:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80043a2:	e09f      	b.n	80044e4 <feedforward_const_accel+0x464>
 80043a4:	f3af 8000 	nop.w
 80043a8:	ca619631 	.word	0xca619631
 80043ac:	3f9b3322 	.word	0x3f9b3322
 80043b0:	eb1c432d 	.word	0xeb1c432d
 80043b4:	3f1a36e2 	.word	0x3f1a36e2
 80043b8:	51eb851f 	.word	0x51eb851f
 80043bc:	3ff11eb8 	.word	0x3ff11eb8
 80043c0:	b7952d23 	.word	0xb7952d23
 80043c4:	3f569c23 	.word	0x3f569c23
 80043c8:	761b0f50 	.word	0x761b0f50
 80043cc:	3f66bf29 	.word	0x3f66bf29
 80043d0:	7df8b79b 	.word	0x7df8b79b
 80043d4:	3ed5fdfc 	.word	0x3ed5fdfc
 80043d8:	1db94e6b 	.word	0x1db94e6b
 80043dc:	3eb5cf75 	.word	0x3eb5cf75
 80043e0:	408f4000 	.word	0x408f4000
 80043e4:	447a0000 	.word	0x447a0000
 80043e8:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80043ec:	6838      	ldr	r0, [r7, #0]
 80043ee:	f7fc f8d3 	bl	8000598 <__aeabi_f2d>
 80043f2:	a34c      	add	r3, pc, #304	; (adr r3, 8004524 <feedforward_const_accel+0x4a4>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f7fc f926 	bl	8000648 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	4b43      	ldr	r3, [pc, #268]	; (8004518 <feedforward_const_accel+0x498>)
 800440a:	f7fc fa47 	bl	800089c <__aeabi_ddiv>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004416:	a336      	add	r3, pc, #216	; (adr r3, 80044f0 <feedforward_const_accel+0x470>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc fa3e 	bl	800089c <__aeabi_ddiv>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004430:	f7fc fa34 	bl	800089c <__aeabi_ddiv>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	a32e      	add	r3, pc, #184	; (adr r3, 80044f8 <feedforward_const_accel+0x478>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fb ff49 	bl	80002d8 <__aeabi_dsub>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	a32c      	add	r3, pc, #176	; (adr r3, 8004500 <feedforward_const_accel+0x480>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f7fc f8f8 	bl	8000648 <__aeabi_dmul>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	a329      	add	r3, pc, #164	; (adr r3, 8004508 <feedforward_const_accel+0x488>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f7fc fa19 	bl	800089c <__aeabi_ddiv>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4614      	mov	r4, r2
 8004470:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004472:	ed97 7a01 	vldr	s14, [r7, #4]
 8004476:	eddf 6a29 	vldr	s13, [pc, #164]	; 800451c <feedforward_const_accel+0x49c>
 800447a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800447e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004520 <feedforward_const_accel+0x4a0>
 8004482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004486:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800448a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800448e:	ee16 0a90 	vmov	r0, s13
 8004492:	f7fc f881 	bl	8000598 <__aeabi_f2d>
 8004496:	a31e      	add	r3, pc, #120	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fc f8d4 	bl	8000648 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	a311      	add	r3, pc, #68	; (adr r3, 80044f0 <feedforward_const_accel+0x470>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f7fc f9f5 	bl	800089c <__aeabi_ddiv>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c2:	f7fc f9eb 	bl	800089c <__aeabi_ddiv>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fb ff05 	bl	80002dc <__adddf3>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fb8d 	bl	8000bf8 <__aeabi_d2f>
 80044de:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bdb0      	pop	{r4, r5, r7, pc}
 80044ec:	f3af 8000 	nop.w
 80044f0:	ca619631 	.word	0xca619631
 80044f4:	3f9b3322 	.word	0x3f9b3322
 80044f8:	eb1c432d 	.word	0xeb1c432d
 80044fc:	3f1a36e2 	.word	0x3f1a36e2
 8004500:	51eb851f 	.word	0x51eb851f
 8004504:	3ff11eb8 	.word	0x3ff11eb8
 8004508:	b7952d23 	.word	0xb7952d23
 800450c:	3f569c23 	.word	0x3f569c23
 8004510:	761b0f50 	.word	0x761b0f50
 8004514:	3f66bf29 	.word	0x3f66bf29
 8004518:	408f4000 	.word	0x408f4000
 800451c:	447a0000 	.word	0x447a0000
 8004520:	421c0000 	.word	0x421c0000
 8004524:	1db94e6b 	.word	0x1db94e6b
 8004528:	3eb5cf75 	.word	0x3eb5cf75

0800452c <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <PID_Init+0x44>)
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <PID_Init+0x48>)
 8004534:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <PID_Init+0x4c>)
 8004538:	4a10      	ldr	r2, [pc, #64]	; (800457c <PID_Init+0x50>)
 800453a:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <PID_Init+0x54>)
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <PID_Init+0x58>)
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <PID_Init+0x5c>)
 8004548:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <PID_Init+0x60>)
 800454c:	4a10      	ldr	r2, [pc, #64]	; (8004590 <PID_Init+0x64>)
 800454e:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <PID_Init+0x68>)
 8004552:	4a11      	ldr	r2, [pc, #68]	; (8004598 <PID_Init+0x6c>)
 8004554:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <PID_Init+0x70>)
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <PID_Init+0x74>)
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	609a      	str	r2, [r3, #8]

}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000554 	.word	0x20000554
 8004574:	40466666 	.word	0x40466666
 8004578:	20000558 	.word	0x20000558
 800457c:	3da3d70a 	.word	0x3da3d70a
 8004580:	2000055c 	.word	0x2000055c
 8004584:	20000560 	.word	0x20000560
 8004588:	3fcccccd 	.word	0x3fcccccd
 800458c:	20000564 	.word	0x20000564
 8004590:	3d4ccccd 	.word	0x3d4ccccd
 8004594:	20000568 	.word	0x20000568
 8004598:	3b03126f 	.word	0x3b03126f
 800459c:	20000534 	.word	0x20000534
 80045a0:	20000544 	.word	0x20000544

080045a4 <clear_Ierror>:

void clear_Ierror(void) {
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <clear_Ierror+0x20>)
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <clear_Ierror+0x24>)
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000534 	.word	0x20000534
 80045c8:	20000544 	.word	0x20000544

080045cc <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80045da:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 80045ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f6:	d101      	bne.n	80045fc <EncoderGyro_PID+0x30>
		reset_speed();
 80045f8:	f7fc fd0e 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 80045fc:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <EncoderGyro_PID+0x1f4>)
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	eef0 7ae7 	vabs.f32	s15, s15
 8004606:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80047c4 <EncoderGyro_PID+0x1f8>
 800460a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d520      	bpl.n	8004656 <EncoderGyro_PID+0x8a>
 8004614:	edd7 7a01 	vldr	s15, [r7, #4]
 8004618:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80047c8 <EncoderGyro_PID+0x1fc>
 800461c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004624:	db17      	blt.n	8004656 <EncoderGyro_PID+0x8a>
 8004626:	4b69      	ldr	r3, [pc, #420]	; (80047cc <EncoderGyro_PID+0x200>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b04      	cmp	r3, #4
 800462c:	d013      	beq.n	8004656 <EncoderGyro_PID+0x8a>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 800462e:	4b68      	ldr	r3, [pc, #416]	; (80047d0 <EncoderGyro_PID+0x204>)
 8004630:	ed93 7a00 	vldr	s14, [r3]
 8004634:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <EncoderGyro_PID+0x208>)
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800463e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004646:	ed97 7a01 	vldr	s14, [r7, #4]
 800464a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800464e:	4b62      	ldr	r3, [pc, #392]	; (80047d8 <EncoderGyro_PID+0x20c>)
 8004650:	edc3 7a00 	vstr	s15, [r3]
 8004654:	e01a      	b.n	800468c <EncoderGyro_PID+0xc0>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004656:	4b61      	ldr	r3, [pc, #388]	; (80047dc <EncoderGyro_PID+0x210>)
 8004658:	ed93 7a00 	vldr	s14, [r3]
 800465c:	4b60      	ldr	r3, [pc, #384]	; (80047e0 <EncoderGyro_PID+0x214>)
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004666:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800466a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800466e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004676:	4b58      	ldr	r3, [pc, #352]	; (80047d8 <EncoderGyro_PID+0x20c>)
 8004678:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <EncoderGyro_PID+0x218>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a54      	ldr	r2, [pc, #336]	; (80047d4 <EncoderGyro_PID+0x208>)
 8004682:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 8004684:	4b58      	ldr	r3, [pc, #352]	; (80047e8 <EncoderGyro_PID+0x21c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a51      	ldr	r2, [pc, #324]	; (80047d0 <EncoderGyro_PID+0x204>)
 800468a:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 800468c:	4b52      	ldr	r3, [pc, #328]	; (80047d8 <EncoderGyro_PID+0x20c>)
 800468e:	ed93 7a00 	vldr	s14, [r3]
 8004692:	4b51      	ldr	r3, [pc, #324]	; (80047d8 <EncoderGyro_PID+0x20c>)
 8004694:	edd3 7a01 	vldr	s15, [r3, #4]
 8004698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800469c:	4b4e      	ldr	r3, [pc, #312]	; (80047d8 <EncoderGyro_PID+0x20c>)
 800469e:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80046a2:	4b4d      	ldr	r3, [pc, #308]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a4c      	ldr	r2, [pc, #304]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046a8:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80046aa:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80046b0:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ba:	4b47      	ldr	r3, [pc, #284]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046bc:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80046c0:	4b45      	ldr	r3, [pc, #276]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046c2:	ed93 7a00 	vldr	s14, [r3]
 80046c6:	4b49      	ldr	r3, [pc, #292]	; (80047ec <EncoderGyro_PID+0x220>)
 80046c8:	edd3 7a00 	vldr	s15, [r3]
 80046cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046d0:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <EncoderGyro_PID+0x224>)
 80046d8:	edd3 7a00 	vldr	s15, [r3]
 80046dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046e4:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <EncoderGyro_PID+0x20c>)
 80046e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80046ea:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <EncoderGyro_PID+0x228>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f8:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 80046fc:	4b30      	ldr	r3, [pc, #192]	; (80047c0 <EncoderGyro_PID+0x1f4>)
 80046fe:	edd3 7a00 	vldr	s15, [r3]
 8004702:	ed97 7a00 	vldr	s14, [r7]
 8004706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800470a:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <EncoderGyro_PID+0x22c>)
 800470c:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004710:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004712:	ed93 7a00 	vldr	s14, [r3]
 8004716:	4b38      	ldr	r3, [pc, #224]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004718:	edd3 7a01 	vldr	s15, [r3, #4]
 800471c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004720:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004722:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004726:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a33      	ldr	r2, [pc, #204]	; (80047f8 <EncoderGyro_PID+0x22c>)
 800472c:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 800472e:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004730:	ed93 7a02 	vldr	s14, [r3, #8]
 8004734:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004736:	edd3 7a00 	vldr	s15, [r3]
 800473a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800473e:	4b2e      	ldr	r3, [pc, #184]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004740:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004746:	ed93 7a00 	vldr	s14, [r3]
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <EncoderGyro_PID+0x230>)
 800474c:	edd3 7a00 	vldr	s15, [r3]
 8004750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004754:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004756:	edd3 6a02 	vldr	s13, [r3, #8]
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <EncoderGyro_PID+0x234>)
 800475c:	edd3 7a00 	vldr	s15, [r3]
 8004760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004764:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <EncoderGyro_PID+0x22c>)
 800476a:	edd3 6a03 	vldr	s13, [r3, #12]
 800476e:	4b25      	ldr	r3, [pc, #148]	; (8004804 <EncoderGyro_PID+0x238>)
 8004770:	edd3 7a00 	vldr	s15, [r3]
 8004774:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477c:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004780:	edd7 7a05 	vldr	s15, [r7, #20]
 8004784:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004808 <EncoderGyro_PID+0x23c>
 8004788:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800478c:	4b1f      	ldr	r3, [pc, #124]	; (800480c <EncoderGyro_PID+0x240>)
 800478e:	edd3 7a00 	vldr	s15, [r3]
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 800479c:	edd7 7a04 	vldr	s15, [r7, #16]
 80047a0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004808 <EncoderGyro_PID+0x23c>
 80047a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <EncoderGyro_PID+0x240>)
 80047aa:	edd3 7a00 	vldr	s15, [r3]
 80047ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	edc3 7a00 	vstr	s15, [r3]

}
 80047b8:	bf00      	nop
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000268 	.word	0x20000268
 80047c4:	42f00000 	.word	0x42f00000
 80047c8:	42c80000 	.word	0x42c80000
 80047cc:	20000528 	.word	0x20000528
 80047d0:	2000025c 	.word	0x2000025c
 80047d4:	20000258 	.word	0x20000258
 80047d8:	20000534 	.word	0x20000534
 80047dc:	2000022c 	.word	0x2000022c
 80047e0:	20000228 	.word	0x20000228
 80047e4:	20000238 	.word	0x20000238
 80047e8:	2000023c 	.word	0x2000023c
 80047ec:	20000554 	.word	0x20000554
 80047f0:	20000558 	.word	0x20000558
 80047f4:	2000055c 	.word	0x2000055c
 80047f8:	20000544 	.word	0x20000544
 80047fc:	20000560 	.word	0x20000560
 8004800:	20000564 	.word	0x20000564
 8004804:	20000568 	.word	0x20000568
 8004808:	44d1e000 	.word	0x44d1e000
 800480c:	200004d4 	.word	0x200004d4

08004810 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004814:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <init_WallControl+0x104>)
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 800481a:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <init_WallControl+0x108>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <init_WallControl+0x10c>)
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004826:	4b3e      	ldr	r3, [pc, #248]	; (8004920 <init_WallControl+0x110>)
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 800482c:	4b3d      	ldr	r3, [pc, #244]	; (8004924 <init_WallControl+0x114>)
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004832:	4b3d      	ldr	r3, [pc, #244]	; (8004928 <init_WallControl+0x118>)
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004838:	4b3c      	ldr	r3, [pc, #240]	; (800492c <init_WallControl+0x11c>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <init_WallControl+0x120>)
 8004840:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <init_WallControl+0x124>)
 8004842:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004844:	4b3c      	ldr	r3, [pc, #240]	; (8004938 <init_WallControl+0x128>)
 8004846:	4a3d      	ldr	r2, [pc, #244]	; (800493c <init_WallControl+0x12c>)
 8004848:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 800484a:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <init_WallControl+0x130>)
 800484c:	4a3d      	ldr	r2, [pc, #244]	; (8004944 <init_WallControl+0x134>)
 800484e:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004850:	4b3d      	ldr	r3, [pc, #244]	; (8004948 <init_WallControl+0x138>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004856:	4b3d      	ldr	r3, [pc, #244]	; (800494c <init_WallControl+0x13c>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 800485c:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <init_WallControl+0x140>)
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004862:	4b3c      	ldr	r3, [pc, #240]	; (8004954 <init_WallControl+0x144>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <init_WallControl+0x148>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 800486e:	4b3b      	ldr	r3, [pc, #236]	; (800495c <init_WallControl+0x14c>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004874:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <init_WallControl+0x150>)
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 800487c:	4b39      	ldr	r3, [pc, #228]	; (8004964 <init_WallControl+0x154>)
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004884:	4b38      	ldr	r3, [pc, #224]	; (8004968 <init_WallControl+0x158>)
 8004886:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800488a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 800488c:	4b37      	ldr	r3, [pc, #220]	; (800496c <init_WallControl+0x15c>)
 800488e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004892:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <init_WallControl+0x160>)
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <init_WallControl+0x164>)
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 80048a4:	4b34      	ldr	r3, [pc, #208]	; (8004978 <init_WallControl+0x168>)
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 80048ac:	4b33      	ldr	r3, [pc, #204]	; (800497c <init_WallControl+0x16c>)
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 80048b4:	4b32      	ldr	r3, [pc, #200]	; (8004980 <init_WallControl+0x170>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 80048ba:	4b32      	ldr	r3, [pc, #200]	; (8004984 <init_WallControl+0x174>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 80048c0:	4b31      	ldr	r3, [pc, #196]	; (8004988 <init_WallControl+0x178>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <init_WallControl+0x17c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 80048cc:	4b30      	ldr	r3, [pc, #192]	; (8004990 <init_WallControl+0x180>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <init_WallControl+0x184>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 80048d8:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <init_WallControl+0x188>)
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <init_WallControl+0x18c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 80048e4:	4b2e      	ldr	r3, [pc, #184]	; (80049a0 <init_WallControl+0x190>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 80048ea:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <init_WallControl+0x194>)
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 80048f2:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <init_WallControl+0x198>)
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <init_WallControl+0x19c>)
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004902:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <init_WallControl+0x1a0>)
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
}
 800490a:	bf00      	nop
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	20000590 	.word	0x20000590
 8004918:	20000591 	.word	0x20000591
 800491c:	20000593 	.word	0x20000593
 8004920:	20000592 	.word	0x20000592
 8004924:	20000595 	.word	0x20000595
 8004928:	20000596 	.word	0x20000596
 800492c:	20000597 	.word	0x20000597
 8004930:	20000598 	.word	0x20000598
 8004934:	44d2a000 	.word	0x44d2a000
 8004938:	2000059c 	.word	0x2000059c
 800493c:	44b56000 	.word	0x44b56000
 8004940:	200005a0 	.word	0x200005a0
 8004944:	41a00000 	.word	0x41a00000
 8004948:	200005b8 	.word	0x200005b8
 800494c:	200005b4 	.word	0x200005b4
 8004950:	200005c0 	.word	0x200005c0
 8004954:	200005bc 	.word	0x200005bc
 8004958:	200005c8 	.word	0x200005c8
 800495c:	200005c4 	.word	0x200005c4
 8004960:	200005d0 	.word	0x200005d0
 8004964:	200005cc 	.word	0x200005cc
 8004968:	200005d8 	.word	0x200005d8
 800496c:	200005d4 	.word	0x200005d4
 8004970:	200005e0 	.word	0x200005e0
 8004974:	200005dc 	.word	0x200005dc
 8004978:	200005e8 	.word	0x200005e8
 800497c:	200005e4 	.word	0x200005e4
 8004980:	200005ec 	.word	0x200005ec
 8004984:	200005ed 	.word	0x200005ed
 8004988:	200005ee 	.word	0x200005ee
 800498c:	200005ef 	.word	0x200005ef
 8004990:	200005f0 	.word	0x200005f0
 8004994:	200005f1 	.word	0x200005f1
 8004998:	200005f2 	.word	0x200005f2
 800499c:	200005f3 	.word	0x200005f3
 80049a0:	200005f4 	.word	0x200005f4
 80049a4:	200005f8 	.word	0x200005f8
 80049a8:	200005fc 	.word	0x200005fc
 80049ac:	20000600 	.word	0x20000600
 80049b0:	20000604 	.word	0x20000604
 80049b4:	00000000 	.word	0x00000000

080049b8 <calWallConrol>:


float calWallConrol(void) {
 80049b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049bc:	b0aa      	sub	sp, #168	; 0xa8
 80049be:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 80049c0:	4b9b      	ldr	r3, [pc, #620]	; (8004c30 <calWallConrol+0x278>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d13d      	bne.n	8004a44 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 80049c8:	4b9a      	ldr	r3, [pc, #616]	; (8004c34 <calWallConrol+0x27c>)
 80049ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 80049ce:	4b9a      	ldr	r3, [pc, #616]	; (8004c38 <calWallConrol+0x280>)
 80049d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 80049d4:	4b99      	ldr	r3, [pc, #612]	; (8004c3c <calWallConrol+0x284>)
 80049d6:	edd3 7a00 	vldr	s15, [r3]
 80049da:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004c40 <calWallConrol+0x288>
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	dd06      	ble.n	80049f6 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 80049e8:	4b96      	ldr	r3, [pc, #600]	; (8004c44 <calWallConrol+0x28c>)
 80049ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 80049ee:	4b96      	ldr	r3, [pc, #600]	; (8004c48 <calWallConrol+0x290>)
 80049f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049f4:	e048      	b.n	8004a88 <calWallConrol+0xd0>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 80049f6:	4b91      	ldr	r3, [pc, #580]	; (8004c3c <calWallConrol+0x284>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fdcc 	bl	8000598 <__aeabi_f2d>
 8004a00:	a385      	add	r3, pc, #532	; (adr r3, 8004c18 <calWallConrol+0x260>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fe1f 	bl	8000648 <__aeabi_dmul>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	f7fc f8f1 	bl	8000bf8 <__aeabi_d2f>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004a1c:	4b87      	ldr	r3, [pc, #540]	; (8004c3c <calWallConrol+0x284>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fb fdb9 	bl	8000598 <__aeabi_f2d>
 8004a26:	a37e      	add	r3, pc, #504	; (adr r3, 8004c20 <calWallConrol+0x268>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fe0c 	bl	8000648 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f7fc f8de 	bl	8000bf8 <__aeabi_d2f>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a42:	e021      	b.n	8004a88 <calWallConrol+0xd0>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004a44:	4b81      	ldr	r3, [pc, #516]	; (8004c4c <calWallConrol+0x294>)
 8004a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004a4a:	4b81      	ldr	r3, [pc, #516]	; (8004c50 <calWallConrol+0x298>)
 8004a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004a50:	4b7a      	ldr	r3, [pc, #488]	; (8004c3c <calWallConrol+0x284>)
 8004a52:	edd3 7a00 	vldr	s15, [r3]
 8004a56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a5e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004a62:	4b76      	ldr	r3, [pc, #472]	; (8004c3c <calWallConrol+0x284>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fd96 	bl	8000598 <__aeabi_f2d>
 8004a6c:	a36e      	add	r3, pc, #440	; (adr r3, 8004c28 <calWallConrol+0x270>)
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f7fb fde9 	bl	8000648 <__aeabi_dmul>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f7fc f8bb 	bl	8000bf8 <__aeabi_d2f>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004a88:	4b72      	ldr	r3, [pc, #456]	; (8004c54 <calWallConrol+0x29c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004a90:	da03      	bge.n	8004a9a <calWallConrol+0xe2>
		sensorWall_L = SENSOR_L_MIN;
 8004a92:	4b71      	ldr	r3, [pc, #452]	; (8004c58 <calWallConrol+0x2a0>)
 8004a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a98:	e011      	b.n	8004abe <calWallConrol+0x106>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004a9a:	4b6e      	ldr	r3, [pc, #440]	; (8004c54 <calWallConrol+0x29c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	dd03      	ble.n	8004aae <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MAX;
 8004aa6:	4b6d      	ldr	r3, [pc, #436]	; (8004c5c <calWallConrol+0x2a4>)
 8004aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004aac:	e007      	b.n	8004abe <calWallConrol+0x106>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004aae:	4b69      	ldr	r3, [pc, #420]	; (8004c54 <calWallConrol+0x29c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aba:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004abe:	4b65      	ldr	r3, [pc, #404]	; (8004c54 <calWallConrol+0x29c>)
 8004ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ac4:	f240 2289 	movw	r2, #649	; 0x289
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	dc03      	bgt.n	8004ad4 <calWallConrol+0x11c>
		sensorWall_R = SENSOR_R_MIN;
 8004acc:	4b64      	ldr	r3, [pc, #400]	; (8004c60 <calWallConrol+0x2a8>)
 8004ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ad2:	e012      	b.n	8004afa <calWallConrol+0x142>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004ad4:	4b5f      	ldr	r3, [pc, #380]	; (8004c54 <calWallConrol+0x29c>)
 8004ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ada:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004ade:	dd03      	ble.n	8004ae8 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MAX;
 8004ae0:	4b60      	ldr	r3, [pc, #384]	; (8004c64 <calWallConrol+0x2ac>)
 8004ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ae6:	e008      	b.n	8004afa <calWallConrol+0x142>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004ae8:	4b5a      	ldr	r3, [pc, #360]	; (8004c54 <calWallConrol+0x29c>)
 8004aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004b08:	4b57      	ldr	r3, [pc, #348]	; (8004c68 <calWallConrol+0x2b0>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d11c      	bne.n	8004b4a <calWallConrol+0x192>
		g_WallControlStatus = 0;
 8004b10:	4b56      	ldr	r3, [pc, #344]	; (8004c6c <calWallConrol+0x2b4>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <calWallConrol+0x2b8>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004b1c:	4b55      	ldr	r3, [pc, #340]	; (8004c74 <calWallConrol+0x2bc>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004b22:	4b55      	ldr	r3, [pc, #340]	; (8004c78 <calWallConrol+0x2c0>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004b28:	4b54      	ldr	r3, [pc, #336]	; (8004c7c <calWallConrol+0x2c4>)
 8004b2a:	4a55      	ldr	r2, [pc, #340]	; (8004c80 <calWallConrol+0x2c8>)
 8004b2c:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004b2e:	4b55      	ldr	r3, [pc, #340]	; (8004c84 <calWallConrol+0x2cc>)
 8004b30:	4a55      	ldr	r2, [pc, #340]	; (8004c88 <calWallConrol+0x2d0>)
 8004b32:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004b34:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <calWallConrol+0x2d4>)
 8004b36:	4a56      	ldr	r2, [pc, #344]	; (8004c90 <calWallConrol+0x2d8>)
 8004b38:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004b42:	f002 f8ef 	bl	8006d24 <pl_yellow_LED_off>
 8004b46:	f001 ba36 	b.w	8005fb6 <calWallConrol+0x15fe>

	} else if (g_WallControl_mode == 1) {
 8004b4a:	4b47      	ldr	r3, [pc, #284]	; (8004c68 <calWallConrol+0x2b0>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	f040 82e9 	bne.w	8005126 <calWallConrol+0x76e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004b54:	4b45      	ldr	r3, [pc, #276]	; (8004c6c <calWallConrol+0x2b4>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 809b 	beq.w	8004c98 <calWallConrol+0x2e0>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004b62:	4b3c      	ldr	r3, [pc, #240]	; (8004c54 <calWallConrol+0x29c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004b6a:	db16      	blt.n	8004b9a <calWallConrol+0x1e2>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004b6c:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <calWallConrol+0x2dc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb fcff 	bl	8000574 <__aeabi_i2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4690      	mov	r8, r2
 8004b7c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004b80:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004b84:	f7fb fd08 	bl	8000598 <__aeabi_f2d>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	4649      	mov	r1, r9
 8004b90:	f7fb ffea 	bl	8000b68 <__aeabi_dcmpgt>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d037      	beq.n	8004c0a <calWallConrol+0x252>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004b9a:	4b34      	ldr	r3, [pc, #208]	; (8004c6c <calWallConrol+0x2b4>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4b32      	ldr	r3, [pc, #200]	; (8004c6c <calWallConrol+0x2b4>)
 8004ba4:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004ba6:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <calWallConrol+0x2c4>)
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bb4:	e021      	b.n	8004bfa <calWallConrol+0x242>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004bb6:	4a27      	ldr	r2, [pc, #156]	; (8004c54 <calWallConrol+0x29c>)
 8004bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bc8:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <calWallConrol+0x2c4>)
 8004bca:	edd3 7a00 	vldr	s15, [r3]
 8004bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd6:	dd0b      	ble.n	8004bf0 <calWallConrol+0x238>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004bd8:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <calWallConrol+0x29c>)
 8004bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <calWallConrol+0x2c4>)
 8004bec:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bfe:	2b13      	cmp	r3, #19
 8004c00:	ddd9      	ble.n	8004bb6 <calWallConrol+0x1fe>
					}
				}
				g_skewer_displacement = 0;
 8004c02:	4b22      	ldr	r3, [pc, #136]	; (8004c8c <calWallConrol+0x2d4>)
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <calWallConrol+0x2bc>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	e064      	b.n	8004cdc <calWallConrol+0x324>
 8004c12:	bf00      	nop
 8004c14:	f3af 8000 	nop.w
 8004c18:	33333333 	.word	0x33333333
 8004c1c:	3fd33333 	.word	0x3fd33333
 8004c20:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c24:	bf70624d 	.word	0xbf70624d
 8004c28:	bc6a7efa 	.word	0xbc6a7efa
 8004c2c:	3f789374 	.word	0x3f789374
 8004c30:	20000808 	.word	0x20000808
 8004c34:	43340000 	.word	0x43340000
 8004c38:	43020000 	.word	0x43020000
 8004c3c:	200004d8 	.word	0x200004d8
 8004c40:	447a0000 	.word	0x447a0000
 8004c44:	43960000 	.word	0x43960000
 8004c48:	c0800000 	.word	0xc0800000
 8004c4c:	431d0000 	.word	0x431d0000
 8004c50:	42dc0000 	.word	0x42dc0000
 8004c54:	200002b8 	.word	0x200002b8
 8004c58:	44390000 	.word	0x44390000
 8004c5c:	450fc000 	.word	0x450fc000
 8004c60:	44228000 	.word	0x44228000
 8004c64:	44e10000 	.word	0x44e10000
 8004c68:	20000590 	.word	0x20000590
 8004c6c:	20000593 	.word	0x20000593
 8004c70:	20000595 	.word	0x20000595
 8004c74:	20000596 	.word	0x20000596
 8004c78:	20000597 	.word	0x20000597
 8004c7c:	20000598 	.word	0x20000598
 8004c80:	44d2a000 	.word	0x44d2a000
 8004c84:	2000059c 	.word	0x2000059c
 8004c88:	44b56000 	.word	0x44b56000
 8004c8c:	200005a0 	.word	0x200005a0
 8004c90:	41a00000 	.word	0x41a00000
 8004c94:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004c98:	4bbd      	ldr	r3, [pc, #756]	; (8004f90 <calWallConrol+0x5d8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004ca0:	dd1c      	ble.n	8004cdc <calWallConrol+0x324>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004ca2:	4bbc      	ldr	r3, [pc, #752]	; (8004f94 <calWallConrol+0x5dc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb fc64 	bl	8000574 <__aeabi_i2d>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004cb6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004cba:	f7fb fc6d 	bl	8000598 <__aeabi_f2d>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7fb ff31 	bl	8000b2c <__aeabi_dcmplt>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <calWallConrol+0x324>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004cd0:	4bb1      	ldr	r3, [pc, #708]	; (8004f98 <calWallConrol+0x5e0>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	4baf      	ldr	r3, [pc, #700]	; (8004f98 <calWallConrol+0x5e0>)
 8004cda:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004cdc:	4bae      	ldr	r3, [pc, #696]	; (8004f98 <calWallConrol+0x5e0>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05b      	beq.n	8004da4 <calWallConrol+0x3ec>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004cec:	4ba8      	ldr	r3, [pc, #672]	; (8004f90 <calWallConrol+0x5d8>)
 8004cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cf2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004cf6:	db17      	blt.n	8004d28 <calWallConrol+0x370>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004cf8:	4ba6      	ldr	r3, [pc, #664]	; (8004f94 <calWallConrol+0x5dc>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fb fc39 	bl	8000574 <__aeabi_i2d>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	613a      	str	r2, [r7, #16]
 8004d08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004d0e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004d12:	f7fb fc41 	bl	8000598 <__aeabi_f2d>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d1e:	f7fb ff23 	bl	8000b68 <__aeabi_dcmpgt>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d039      	beq.n	8004d9c <calWallConrol+0x3e4>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004d28:	4b9b      	ldr	r3, [pc, #620]	; (8004f98 <calWallConrol+0x5e0>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	3b02      	subs	r3, #2
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	4b99      	ldr	r3, [pc, #612]	; (8004f98 <calWallConrol+0x5e0>)
 8004d32:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004d34:	4b99      	ldr	r3, [pc, #612]	; (8004f9c <calWallConrol+0x5e4>)
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d42:	e023      	b.n	8004d8c <calWallConrol+0x3d4>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004d44:	4a92      	ldr	r2, [pc, #584]	; (8004f90 <calWallConrol+0x5d8>)
 8004d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d4a:	3350      	adds	r3, #80	; 0x50
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d58:	4b90      	ldr	r3, [pc, #576]	; (8004f9c <calWallConrol+0x5e4>)
 8004d5a:	edd3 7a00 	vldr	s15, [r3]
 8004d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	dd0c      	ble.n	8004d82 <calWallConrol+0x3ca>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004d68:	4a89      	ldr	r2, [pc, #548]	; (8004f90 <calWallConrol+0x5d8>)
 8004d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6e:	3350      	adds	r3, #80	; 0x50
 8004d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7c:	4b87      	ldr	r3, [pc, #540]	; (8004f9c <calWallConrol+0x5e4>)
 8004d7e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d86:	3301      	adds	r3, #1
 8004d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d90:	2b13      	cmp	r3, #19
 8004d92:	ddd7      	ble.n	8004d44 <calWallConrol+0x38c>
					}
				}
				g_skewer_displacement = 0;
 8004d94:	4b82      	ldr	r3, [pc, #520]	; (8004fa0 <calWallConrol+0x5e8>)
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004d9c:	4b81      	ldr	r3, [pc, #516]	; (8004fa4 <calWallConrol+0x5ec>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e023      	b.n	8004dec <calWallConrol+0x434>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004da4:	4b7a      	ldr	r3, [pc, #488]	; (8004f90 <calWallConrol+0x5d8>)
 8004da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004daa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004dae:	dd1d      	ble.n	8004dec <calWallConrol+0x434>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004db0:	4b78      	ldr	r3, [pc, #480]	; (8004f94 <calWallConrol+0x5dc>)
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fb fbdd 	bl	8000574 <__aeabi_i2d>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	60ba      	str	r2, [r7, #8]
 8004dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dc4:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004dc6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004dca:	f7fb fbe5 	bl	8000598 <__aeabi_f2d>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004dd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dd6:	f7fb fea9 	bl	8000b2c <__aeabi_dcmplt>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <calWallConrol+0x434>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004de0:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <calWallConrol+0x5e0>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	3302      	adds	r3, #2
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	4b6b      	ldr	r3, [pc, #428]	; (8004f98 <calWallConrol+0x5e0>)
 8004dea:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004dec:	4b6a      	ldr	r3, [pc, #424]	; (8004f98 <calWallConrol+0x5e0>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	f201 80e0 	bhi.w	8005fb6 <calWallConrol+0x15fe>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <calWallConrol+0x444>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e0d 	.word	0x08004e0d
 8004e00:	08004f13 	.word	0x08004f13
 8004e04:	08004fbd 	.word	0x08004fbd
 8004e08:	08005027 	.word	0x08005027
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8004e0c:	4b64      	ldr	r3, [pc, #400]	; (8004fa0 <calWallConrol+0x5e8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fb fbc1 	bl	8000598 <__aeabi_f2d>
 8004e16:	4604      	mov	r4, r0
 8004e18:	460d      	mov	r5, r1
 8004e1a:	4b63      	ldr	r3, [pc, #396]	; (8004fa8 <calWallConrol+0x5f0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fb fbba 	bl	8000598 <__aeabi_f2d>
 8004e24:	a356      	add	r3, pc, #344	; (adr r3, 8004f80 <calWallConrol+0x5c8>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb fc0d 	bl	8000648 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fa51 	bl	80002dc <__adddf3>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fb fed9 	bl	8000bf8 <__aeabi_d2f>
 8004e46:	4603      	mov	r3, r0
 8004e48:	4a55      	ldr	r2, [pc, #340]	; (8004fa0 <calWallConrol+0x5e8>)
 8004e4a:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8004e4c:	4b54      	ldr	r3, [pc, #336]	; (8004fa0 <calWallConrol+0x5e8>)
 8004e4e:	edd3 7a00 	vldr	s15, [r3]
 8004e52:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	d52e      	bpl.n	8004ebe <calWallConrol+0x506>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004e60:	4b52      	ldr	r3, [pc, #328]	; (8004fac <calWallConrol+0x5f4>)
 8004e62:	edd3 7a00 	vldr	s15, [r3]
 8004e66:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004fb0 <calWallConrol+0x5f8>
 8004e6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e6e:	eef1 6a67 	vneg.f32	s13, s15
 8004e72:	4b4e      	ldr	r3, [pc, #312]	; (8004fac <calWallConrol+0x5f4>)
 8004e74:	edd3 7a00 	vldr	s15, [r3]
 8004e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8004e7c:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <calWallConrol+0x5e4>)
 8004e7e:	edd3 7a00 	vldr	s15, [r3]
 8004e82:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8004fb8 <calWallConrol+0x600>
 8004e86:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8004e8a:	4b44      	ldr	r3, [pc, #272]	; (8004f9c <calWallConrol+0x5e4>)
 8004e8c:	edd3 6a00 	vldr	s13, [r3]
 8004e90:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e98:	ee17 0a90 	vmov	r0, s15
 8004e9c:	f7fb fb7c 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004ea0:	a339      	add	r3, pc, #228	; (adr r3, 8004f88 <calWallConrol+0x5d0>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb fbcf 	bl	8000648 <__aeabi_dmul>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f7fb fea1 	bl	8000bf8 <__aeabi_d2f>
 8004eb6:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8004eb8:	4a3e      	ldr	r2, [pc, #248]	; (8004fb4 <calWallConrol+0x5fc>)
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e003      	b.n	8004ec6 <calWallConrol+0x50e>
			} else {
				wall_normal.error = 0;
 8004ebe:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004ec6:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ec8:	ed93 7a00 	vldr	s14, [r3]
 8004ecc:	4b39      	ldr	r3, [pc, #228]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ece:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ed8:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a34      	ldr	r2, [pc, #208]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ee2:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004ee4:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ee6:	ed93 7a00 	vldr	s14, [r3]
 8004eea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004eee:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004ef2:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <calWallConrol+0x5fc>)
 8004ef4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ef8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f04:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f001 ff45 	bl	8006d98 <pl_yellow_LED_count>
			break;
 8004f0e:	f001 b852 	b.w	8005fb6 <calWallConrol+0x15fe>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f12:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004f16:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004fb0 <calWallConrol+0x5f8>
 8004f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f1e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004f22:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8004f26:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f2e:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f30:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004f34:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f36:	ed93 7a00 	vldr	s14, [r3]
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f44:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f46:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f50:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004f52:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f54:	ed93 7a00 	vldr	s14, [r3]
 8004f58:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <calWallConrol+0x5fc>)
 8004f62:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f66:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f72:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8004f76:	2080      	movs	r0, #128	; 0x80
 8004f78:	f001 ff0e 	bl	8006d98 <pl_yellow_LED_count>
			break;
 8004f7c:	f001 b81b 	b.w	8005fb6 <calWallConrol+0x15fe>
 8004f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004f84:	3f50624d 	.word	0x3f50624d
 8004f88:	66666666 	.word	0x66666666
 8004f8c:	3fe66666 	.word	0x3fe66666
 8004f90:	200002b8 	.word	0x200002b8
 8004f94:	20000448 	.word	0x20000448
 8004f98:	20000593 	.word	0x20000593
 8004f9c:	2000059c 	.word	0x2000059c
 8004fa0:	200005a0 	.word	0x200005a0
 8004fa4:	20000597 	.word	0x20000597
 8004fa8:	200004d8 	.word	0x200004d8
 8004fac:	20000598 	.word	0x20000598
 8004fb0:	44d2a000 	.word	0x44d2a000
 8004fb4:	2000056c 	.word	0x2000056c
 8004fb8:	44b56000 	.word	0x44b56000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8004fbc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004fc0:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004fb8 <calWallConrol+0x600>
 8004fc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fc8:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8004fcc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8004fd4:	4baa      	ldr	r3, [pc, #680]	; (8005280 <calWallConrol+0x8c8>)
 8004fd6:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004fda:	4ba9      	ldr	r3, [pc, #676]	; (8005280 <calWallConrol+0x8c8>)
 8004fdc:	ed93 7a00 	vldr	s14, [r3]
 8004fe0:	4ba7      	ldr	r3, [pc, #668]	; (8005280 <calWallConrol+0x8c8>)
 8004fe2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fea:	4ba5      	ldr	r3, [pc, #660]	; (8005280 <calWallConrol+0x8c8>)
 8004fec:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004ff0:	4ba3      	ldr	r3, [pc, #652]	; (8005280 <calWallConrol+0x8c8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4aa2      	ldr	r2, [pc, #648]	; (8005280 <calWallConrol+0x8c8>)
 8004ff6:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004ff8:	4ba1      	ldr	r3, [pc, #644]	; (8005280 <calWallConrol+0x8c8>)
 8004ffa:	ed93 7a00 	vldr	s14, [r3]
 8004ffe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005002:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005006:	4b9e      	ldr	r3, [pc, #632]	; (8005280 <calWallConrol+0x8c8>)
 8005008:	edd3 6a02 	vldr	s13, [r3, #8]
 800500c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005010:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005018:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 800501c:	2001      	movs	r0, #1
 800501e:	f001 febb 	bl	8006d98 <pl_yellow_LED_count>
			break;
 8005022:	f000 bfc8 	b.w	8005fb6 <calWallConrol+0x15fe>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005026:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800502a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005284 <calWallConrol+0x8cc>
 800502e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005032:	eef1 6a67 	vneg.f32	s13, s15
 8005036:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800503a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 800503e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005042:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005288 <calWallConrol+0x8d0>
 8005046:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 800504a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800504e:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005052:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005056:	4b8a      	ldr	r3, [pc, #552]	; (8005280 <calWallConrol+0x8c8>)
 8005058:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800505c:	4b88      	ldr	r3, [pc, #544]	; (8005280 <calWallConrol+0x8c8>)
 800505e:	ed93 7a00 	vldr	s14, [r3]
 8005062:	4b87      	ldr	r3, [pc, #540]	; (8005280 <calWallConrol+0x8c8>)
 8005064:	edd3 7a01 	vldr	s15, [r3, #4]
 8005068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506c:	4b84      	ldr	r3, [pc, #528]	; (8005280 <calWallConrol+0x8c8>)
 800506e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005072:	4b83      	ldr	r3, [pc, #524]	; (8005280 <calWallConrol+0x8c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a82      	ldr	r2, [pc, #520]	; (8005280 <calWallConrol+0x8c8>)
 8005078:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800507a:	4b81      	ldr	r3, [pc, #516]	; (8005280 <calWallConrol+0x8c8>)
 800507c:	ed93 7a00 	vldr	s14, [r3]
 8005080:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005084:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005088:	4b7d      	ldr	r3, [pc, #500]	; (8005280 <calWallConrol+0x8c8>)
 800508a:	edd3 6a02 	vldr	s13, [r3, #8]
 800508e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005092:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 800509e:	2081      	movs	r0, #129	; 0x81
 80050a0:	f001 fe7a 	bl	8006d98 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 80050a4:	4b79      	ldr	r3, [pc, #484]	; (800528c <calWallConrol+0x8d4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fb fa63 	bl	8000574 <__aeabi_i2d>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	603a      	str	r2, [r7, #0]
 80050b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	4b74      	ldr	r3, [pc, #464]	; (8005290 <calWallConrol+0x8d8>)
 80050c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050c4:	f7fb fd32 	bl	8000b2c <__aeabi_dcmplt>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01a      	beq.n	8005104 <calWallConrol+0x74c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 80050ce:	4b6f      	ldr	r3, [pc, #444]	; (800528c <calWallConrol+0x8d4>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fb fa4e 	bl	8000574 <__aeabi_i2d>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4692      	mov	sl, r2
 80050de:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <calWallConrol+0x8d8>)
 80050e8:	4650      	mov	r0, sl
 80050ea:	4659      	mov	r1, fp
 80050ec:	f7fb fd1e 	bl	8000b2c <__aeabi_dcmplt>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <calWallConrol+0x74c>
				StabilityCount_reset++;
 80050f6:	4b67      	ldr	r3, [pc, #412]	; (8005294 <calWallConrol+0x8dc>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4b65      	ldr	r3, [pc, #404]	; (8005294 <calWallConrol+0x8dc>)
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e002      	b.n	800510a <calWallConrol+0x752>
			} else {
				StabilityCount_reset = 0;
 8005104:	4b63      	ldr	r3, [pc, #396]	; (8005294 <calWallConrol+0x8dc>)
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 800510a:	4b62      	ldr	r3, [pc, #392]	; (8005294 <calWallConrol+0x8dc>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b18      	cmp	r3, #24
 8005110:	f240 8750 	bls.w	8005fb4 <calWallConrol+0x15fc>
				Gyro.sigma_error = 0;
 8005114:	4b60      	ldr	r3, [pc, #384]	; (8005298 <calWallConrol+0x8e0>)
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 800511c:	4b5d      	ldr	r3, [pc, #372]	; (8005294 <calWallConrol+0x8dc>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005122:	f000 bf47 	b.w	8005fb4 <calWallConrol+0x15fc>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005126:	4b5d      	ldr	r3, [pc, #372]	; (800529c <calWallConrol+0x8e4>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b02      	cmp	r3, #2
 800512c:	f000 8743 	beq.w	8005fb6 <calWallConrol+0x15fe>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005130:	4b5a      	ldr	r3, [pc, #360]	; (800529c <calWallConrol+0x8e4>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	f040 873e 	bne.w	8005fb6 <calWallConrol+0x15fe>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 800513a:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <calWallConrol+0x8e8>)
 800513c:	edd3 7a00 	vldr	s15, [r3]
 8005140:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80052a4 <calWallConrol+0x8ec>
 8005144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	dd05      	ble.n	800515a <calWallConrol+0x7a2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 800514e:	4b56      	ldr	r3, [pc, #344]	; (80052a8 <calWallConrol+0x8f0>)
 8005150:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 8005154:	4b55      	ldr	r3, [pc, #340]	; (80052ac <calWallConrol+0x8f4>)
 8005156:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005158:	e024      	b.n	80051a4 <calWallConrol+0x7ec>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 800515a:	4b51      	ldr	r3, [pc, #324]	; (80052a0 <calWallConrol+0x8e8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb fa1a 	bl	8000598 <__aeabi_f2d>
 8005164:	a342      	add	r3, pc, #264	; (adr r3, 8005270 <calWallConrol+0x8b8>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fb fa6d 	bl	8000648 <__aeabi_dmul>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	f7fb fd3f 	bl	8000bf8 <__aeabi_d2f>
 800517a:	4603      	mov	r3, r0
 800517c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005180:	4b47      	ldr	r3, [pc, #284]	; (80052a0 <calWallConrol+0x8e8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb fa07 	bl	8000598 <__aeabi_f2d>
 800518a:	a33b      	add	r3, pc, #236	; (adr r3, 8005278 <calWallConrol+0x8c0>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb fa5a 	bl	8000648 <__aeabi_dmul>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	f7fb fd2c 	bl	8000bf8 <__aeabi_d2f>
 80051a0:	4603      	mov	r3, r0
 80051a2:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 80051a4:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <calWallConrol+0x8f8>)
 80051a6:	edd3 7a00 	vldr	s15, [r3]
 80051aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	dd12      	ble.n	80051de <calWallConrol+0x826>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 80051b8:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <calWallConrol+0x8f8>)
 80051ba:	edd3 7a00 	vldr	s15, [r3]
 80051be:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80051c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ca:	d808      	bhi.n	80051de <calWallConrol+0x826>
			coefficientR[0] = COEFFICIENT_R0_0;
 80051cc:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <calWallConrol+0x8fc>)
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 80051d0:	4b39      	ldr	r3, [pc, #228]	; (80052b8 <calWallConrol+0x900>)
 80051d2:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 80051d4:	4b39      	ldr	r3, [pc, #228]	; (80052bc <calWallConrol+0x904>)
 80051d6:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 80051d8:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <calWallConrol+0x908>)
 80051da:	657b      	str	r3, [r7, #84]	; 0x54
 80051dc:	e0a7      	b.n	800532e <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 80051de:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <calWallConrol+0x8f8>)
 80051e0:	edd3 7a00 	vldr	s15, [r3]
 80051e4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80052c4 <calWallConrol+0x90c>
 80051e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	dd12      	ble.n	8005218 <calWallConrol+0x860>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <calWallConrol+0x8f8>)
 80051f4:	edd3 7a00 	vldr	s15, [r3]
 80051f8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80052c8 <calWallConrol+0x910>
 80051fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	d808      	bhi.n	8005218 <calWallConrol+0x860>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005206:	4b31      	ldr	r3, [pc, #196]	; (80052cc <calWallConrol+0x914>)
 8005208:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <calWallConrol+0x918>)
 800520c:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <calWallConrol+0x91c>)
 8005210:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005212:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <calWallConrol+0x920>)
 8005214:	657b      	str	r3, [r7, #84]	; 0x54
 8005216:	e08a      	b.n	800532e <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005218:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <calWallConrol+0x8f8>)
 800521a:	edd3 7a00 	vldr	s15, [r3]
 800521e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80052dc <calWallConrol+0x924>
 8005222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	dd12      	ble.n	8005252 <calWallConrol+0x89a>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 800522c:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <calWallConrol+0x8f8>)
 800522e:	edd3 7a00 	vldr	s15, [r3]
 8005232:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80052e0 <calWallConrol+0x928>
 8005236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800523a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523e:	d808      	bhi.n	8005252 <calWallConrol+0x89a>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005240:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <calWallConrol+0x92c>)
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005244:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <calWallConrol+0x930>)
 8005246:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <calWallConrol+0x934>)
 800524a:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 800524c:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <calWallConrol+0x938>)
 800524e:	657b      	str	r3, [r7, #84]	; 0x54
 8005250:	e06d      	b.n	800532e <calWallConrol+0x976>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 8005252:	4b28      	ldr	r3, [pc, #160]	; (80052f4 <calWallConrol+0x93c>)
 8005254:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005258:	2baa      	cmp	r3, #170	; 0xaa
 800525a:	dd4f      	ble.n	80052fc <calWallConrol+0x944>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 800525c:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <calWallConrol+0x940>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <calWallConrol+0x940>)
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e04e      	b.n	800530a <calWallConrol+0x952>
 800526c:	f3af 8000 	nop.w
 8005270:	33333333 	.word	0x33333333
 8005274:	3fe33333 	.word	0x3fe33333
 8005278:	9999999a 	.word	0x9999999a
 800527c:	bfa99999 	.word	0xbfa99999
 8005280:	2000056c 	.word	0x2000056c
 8005284:	44d2a000 	.word	0x44d2a000
 8005288:	44b56000 	.word	0x44b56000
 800528c:	20000448 	.word	0x20000448
 8005290:	403e0000 	.word	0x403e0000
 8005294:	20000595 	.word	0x20000595
 8005298:	20000544 	.word	0x20000544
 800529c:	20000590 	.word	0x20000590
 80052a0:	200004d8 	.word	0x200004d8
 80052a4:	447a0000 	.word	0x447a0000
 80052a8:	44160000 	.word	0x44160000
 80052ac:	c2480000 	.word	0xc2480000
 80052b0:	200005dc 	.word	0x200005dc
 80052b4:	4414c13c 	.word	0x4414c13c
 80052b8:	421e1fdd 	.word	0x421e1fdd
 80052bc:	beb05045 	.word	0xbeb05045
 80052c0:	3e051eb8 	.word	0x3e051eb8
 80052c4:	420c0000 	.word	0x420c0000
 80052c8:	42700000 	.word	0x42700000
 80052cc:	45b20ce1 	.word	0x45b20ce1
 80052d0:	c393746d 	.word	0xc393746d
 80052d4:	40afa404 	.word	0x40afa404
 80052d8:	bd0f0328 	.word	0xbd0f0328
 80052dc:	42c80000 	.word	0x42c80000
 80052e0:	42f00000 	.word	0x42f00000
 80052e4:	46e1460a 	.word	0x46e1460a
 80052e8:	c43ee954 	.word	0xc43ee954
 80052ec:	40d673d9 	.word	0x40d673d9
 80052f0:	bc9d4952 	.word	0xbc9d4952
 80052f4:	200002b8 	.word	0x200002b8
 80052f8:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80052fc:	4b79      	ldr	r3, [pc, #484]	; (80054e4 <calWallConrol+0xb2c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f023 0302 	bic.w	r3, r3, #2
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4b77      	ldr	r3, [pc, #476]	; (80054e4 <calWallConrol+0xb2c>)
 8005308:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 800530a:	4b77      	ldr	r3, [pc, #476]	; (80054e8 <calWallConrol+0xb30>)
 800530c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005318:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 800532e:	4b6f      	ldr	r3, [pc, #444]	; (80054ec <calWallConrol+0xb34>)
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005340:	dd12      	ble.n	8005368 <calWallConrol+0x9b0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 8005342:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <calWallConrol+0xb34>)
 8005344:	edd3 7a00 	vldr	s15, [r3]
 8005348:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800534c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005354:	d808      	bhi.n	8005368 <calWallConrol+0x9b0>
			coefficientL[0] = COEFFICIENT_L0_0;
 8005356:	4b66      	ldr	r3, [pc, #408]	; (80054f0 <calWallConrol+0xb38>)
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 800535a:	4b66      	ldr	r3, [pc, #408]	; (80054f4 <calWallConrol+0xb3c>)
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 800535e:	4b66      	ldr	r3, [pc, #408]	; (80054f8 <calWallConrol+0xb40>)
 8005360:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 8005362:	4b66      	ldr	r3, [pc, #408]	; (80054fc <calWallConrol+0xb44>)
 8005364:	647b      	str	r3, [r7, #68]	; 0x44
 8005366:	e05d      	b.n	8005424 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8005368:	4b60      	ldr	r3, [pc, #384]	; (80054ec <calWallConrol+0xb34>)
 800536a:	edd3 7a00 	vldr	s15, [r3]
 800536e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005500 <calWallConrol+0xb48>
 8005372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	dd12      	ble.n	80053a2 <calWallConrol+0x9ea>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 800537c:	4b5b      	ldr	r3, [pc, #364]	; (80054ec <calWallConrol+0xb34>)
 800537e:	edd3 7a00 	vldr	s15, [r3]
 8005382:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005504 <calWallConrol+0xb4c>
 8005386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538e:	d808      	bhi.n	80053a2 <calWallConrol+0x9ea>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005390:	4b5d      	ldr	r3, [pc, #372]	; (8005508 <calWallConrol+0xb50>)
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 8005394:	4b5d      	ldr	r3, [pc, #372]	; (800550c <calWallConrol+0xb54>)
 8005396:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005398:	4b5d      	ldr	r3, [pc, #372]	; (8005510 <calWallConrol+0xb58>)
 800539a:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 800539c:	4b5d      	ldr	r3, [pc, #372]	; (8005514 <calWallConrol+0xb5c>)
 800539e:	647b      	str	r3, [r7, #68]	; 0x44
 80053a0:	e040      	b.n	8005424 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 80053a2:	4b52      	ldr	r3, [pc, #328]	; (80054ec <calWallConrol+0xb34>)
 80053a4:	edd3 7a00 	vldr	s15, [r3]
 80053a8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005518 <calWallConrol+0xb60>
 80053ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b4:	dd12      	ble.n	80053dc <calWallConrol+0xa24>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 80053b6:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <calWallConrol+0xb34>)
 80053b8:	edd3 7a00 	vldr	s15, [r3]
 80053bc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800551c <calWallConrol+0xb64>
 80053c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c8:	d808      	bhi.n	80053dc <calWallConrol+0xa24>
			coefficientL[0] = COEFFICIENT_L2_0;
 80053ca:	4b55      	ldr	r3, [pc, #340]	; (8005520 <calWallConrol+0xb68>)
 80053cc:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 80053ce:	4b55      	ldr	r3, [pc, #340]	; (8005524 <calWallConrol+0xb6c>)
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 80053d2:	4b55      	ldr	r3, [pc, #340]	; (8005528 <calWallConrol+0xb70>)
 80053d4:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 80053d6:	4b55      	ldr	r3, [pc, #340]	; (800552c <calWallConrol+0xb74>)
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
 80053da:	e023      	b.n	8005424 <calWallConrol+0xa6c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 80053dc:	4b42      	ldr	r3, [pc, #264]	; (80054e8 <calWallConrol+0xb30>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2baa      	cmp	r3, #170	; 0xaa
 80053e2:	dd07      	ble.n	80053f4 <calWallConrol+0xa3c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80053e4:	4b3f      	ldr	r3, [pc, #252]	; (80054e4 <calWallConrol+0xb2c>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4b3d      	ldr	r3, [pc, #244]	; (80054e4 <calWallConrol+0xb2c>)
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e006      	b.n	8005402 <calWallConrol+0xa4a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80053f4:	4b3b      	ldr	r3, [pc, #236]	; (80054e4 <calWallConrol+0xb2c>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <calWallConrol+0xb2c>)
 8005400:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <calWallConrol+0xb30>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 8005424:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005428:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800542c:	4b40      	ldr	r3, [pc, #256]	; (8005530 <calWallConrol+0xb78>)
 800542e:	edd3 7a00 	vldr	s15, [r3]
 8005432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005436:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800543a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800543e:	4b3c      	ldr	r3, [pc, #240]	; (8005530 <calWallConrol+0xb78>)
 8005440:	edd3 7a00 	vldr	s15, [r3]
 8005444:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005448:	4b39      	ldr	r3, [pc, #228]	; (8005530 <calWallConrol+0xb78>)
 800544a:	edd3 7a00 	vldr	s15, [r3]
 800544e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8005452:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 8005456:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800545a:	4b35      	ldr	r3, [pc, #212]	; (8005530 <calWallConrol+0xb78>)
 800545c:	edd3 7a00 	vldr	s15, [r3]
 8005460:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005464:	4b32      	ldr	r3, [pc, #200]	; (8005530 <calWallConrol+0xb78>)
 8005466:	edd3 7a00 	vldr	s15, [r3]
 800546a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800546e:	4b30      	ldr	r3, [pc, #192]	; (8005530 <calWallConrol+0xb78>)
 8005470:	edd3 7a00 	vldr	s15, [r3]
 8005474:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8005478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8005480:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 8005484:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005488:	4b18      	ldr	r3, [pc, #96]	; (80054ec <calWallConrol+0xb34>)
 800548a:	edd3 7a00 	vldr	s15, [r3]
 800548e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005492:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005496:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <calWallConrol+0xb34>)
 800549c:	edd3 7a00 	vldr	s15, [r3]
 80054a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <calWallConrol+0xb34>)
 80054a6:	edd3 7a00 	vldr	s15, [r3]
 80054aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80054ae:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 80054b2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <calWallConrol+0xb34>)
 80054b8:	edd3 7a00 	vldr	s15, [r3]
 80054bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <calWallConrol+0xb34>)
 80054c2:	edd3 7a00 	vldr	s15, [r3]
 80054c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <calWallConrol+0xb34>)
 80054cc:	edd3 7a00 	vldr	s15, [r3]
 80054d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 80054d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 80054dc:	230b      	movs	r3, #11
 80054de:	67bb      	str	r3, [r7, #120]	; 0x78
 80054e0:	e041      	b.n	8005566 <calWallConrol+0xbae>
 80054e2:	bf00      	nop
 80054e4:	20000593 	.word	0x20000593
 80054e8:	200002b8 	.word	0x200002b8
 80054ec:	200005e0 	.word	0x200005e0
 80054f0:	4423732b 	.word	0x4423732b
 80054f4:	421079e6 	.word	0x421079e6
 80054f8:	bdf88e7f 	.word	0xbdf88e7f
 80054fc:	3e11c34f 	.word	0x3e11c34f
 8005500:	420c0000 	.word	0x420c0000
 8005504:	42700000 	.word	0x42700000
 8005508:	45e16e07 	.word	0x45e16e07
 800550c:	c39f206f 	.word	0xc39f206f
 8005510:	40a20d2f 	.word	0x40a20d2f
 8005514:	bce5a3f5 	.word	0xbce5a3f5
 8005518:	42c80000 	.word	0x42c80000
 800551c:	42f00000 	.word	0x42f00000
 8005520:	459f8cbb 	.word	0x459f8cbb
 8005524:	c2f1ade0 	.word	0xc2f1ade0
 8005528:	3f6ae698 	.word	0x3f6ae698
 800552c:	bafba882 	.word	0xbafba882
 8005530:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005536:	3b01      	subs	r3, #1
 8005538:	4a9c      	ldr	r2, [pc, #624]	; (80057ac <calWallConrol+0xdf4>)
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	499a      	ldr	r1, [pc, #616]	; (80057ac <calWallConrol+0xdf4>)
 8005542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 800554a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554c:	3b01      	subs	r3, #1
 800554e:	4a98      	ldr	r2, [pc, #608]	; (80057b0 <calWallConrol+0xdf8>)
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4996      	ldr	r1, [pc, #600]	; (80057b0 <calWallConrol+0xdf8>)
 8005558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005562:	3b01      	subs	r3, #1
 8005564:	67bb      	str	r3, [r7, #120]	; 0x78
 8005566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005568:	2b00      	cmp	r3, #0
 800556a:	dce3      	bgt.n	8005534 <calWallConrol+0xb7c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 800556c:	4a8f      	ldr	r2, [pc, #572]	; (80057ac <calWallConrol+0xdf4>)
 800556e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005570:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005572:	4a8f      	ldr	r2, [pc, #572]	; (80057b0 <calWallConrol+0xdf8>)
 8005574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005576:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005578:	4b8c      	ldr	r3, [pc, #560]	; (80057ac <calWallConrol+0xdf4>)
 800557a:	ed93 7a00 	vldr	s14, [r3]
 800557e:	4b8b      	ldr	r3, [pc, #556]	; (80057ac <calWallConrol+0xdf4>)
 8005580:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005588:	4b8a      	ldr	r3, [pc, #552]	; (80057b4 <calWallConrol+0xdfc>)
 800558a:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 800558e:	4b88      	ldr	r3, [pc, #544]	; (80057b0 <calWallConrol+0xdf8>)
 8005590:	ed93 7a00 	vldr	s14, [r3]
 8005594:	4b86      	ldr	r3, [pc, #536]	; (80057b0 <calWallConrol+0xdf8>)
 8005596:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800559a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800559e:	4b86      	ldr	r3, [pc, #536]	; (80057b8 <calWallConrol+0xe00>)
 80055a0:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 80055a4:	4b85      	ldr	r3, [pc, #532]	; (80057bc <calWallConrol+0xe04>)
 80055a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80055aa:	2baa      	cmp	r3, #170	; 0xaa
 80055ac:	dd1a      	ble.n	80055e4 <calWallConrol+0xc2c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 80055ae:	4b84      	ldr	r3, [pc, #528]	; (80057c0 <calWallConrol+0xe08>)
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ba:	4b7e      	ldr	r3, [pc, #504]	; (80057b4 <calWallConrol+0xdfc>)
 80055bc:	edd3 7a00 	vldr	s15, [r3]
 80055c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055c4:	eef0 7ae7 	vabs.f32	s15, s15
 80055c8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80057c4 <calWallConrol+0xe0c>
 80055cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d4:	d506      	bpl.n	80055e4 <calWallConrol+0xc2c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80055d6:	4b7c      	ldr	r3, [pc, #496]	; (80057c8 <calWallConrol+0xe10>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	f043 0302 	orr.w	r3, r3, #2
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	4b79      	ldr	r3, [pc, #484]	; (80057c8 <calWallConrol+0xe10>)
 80055e2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 80055e4:	4b75      	ldr	r3, [pc, #468]	; (80057bc <calWallConrol+0xe04>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2baa      	cmp	r3, #170	; 0xaa
 80055ea:	dd1a      	ble.n	8005622 <calWallConrol+0xc6a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80055ec:	4b74      	ldr	r3, [pc, #464]	; (80057c0 <calWallConrol+0xe08>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055f8:	4b6f      	ldr	r3, [pc, #444]	; (80057b8 <calWallConrol+0xe00>)
 80055fa:	edd3 7a00 	vldr	s15, [r3]
 80055fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005602:	eef0 7ae7 	vabs.f32	s15, s15
 8005606:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80057c4 <calWallConrol+0xe0c>
 800560a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005612:	d506      	bpl.n	8005622 <calWallConrol+0xc6a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005614:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <calWallConrol+0xe10>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	b2da      	uxtb	r2, r3
 800561e:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <calWallConrol+0xe10>)
 8005620:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005622:	4b66      	ldr	r3, [pc, #408]	; (80057bc <calWallConrol+0xe04>)
 8005624:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005628:	2ba9      	cmp	r3, #169	; 0xa9
 800562a:	dd13      	ble.n	8005654 <calWallConrol+0xc9c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800562c:	4b64      	ldr	r3, [pc, #400]	; (80057c0 <calWallConrol+0xe08>)
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005638:	4b5e      	ldr	r3, [pc, #376]	; (80057b4 <calWallConrol+0xdfc>)
 800563a:	edd3 7a00 	vldr	s15, [r3]
 800563e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005642:	eef0 7ae7 	vabs.f32	s15, s15
 8005646:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80057c4 <calWallConrol+0xe0c>
 800564a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005652:	dd06      	ble.n	8005662 <calWallConrol+0xcaa>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005654:	4b5c      	ldr	r3, [pc, #368]	; (80057c8 <calWallConrol+0xe10>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f023 0302 	bic.w	r3, r3, #2
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b5a      	ldr	r3, [pc, #360]	; (80057c8 <calWallConrol+0xe10>)
 8005660:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005662:	4b56      	ldr	r3, [pc, #344]	; (80057bc <calWallConrol+0xe04>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2ba9      	cmp	r3, #169	; 0xa9
 8005668:	dd13      	ble.n	8005692 <calWallConrol+0xcda>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800566a:	4b55      	ldr	r3, [pc, #340]	; (80057c0 <calWallConrol+0xe08>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005676:	4b50      	ldr	r3, [pc, #320]	; (80057b8 <calWallConrol+0xe00>)
 8005678:	edd3 7a00 	vldr	s15, [r3]
 800567c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005680:	eef0 7ae7 	vabs.f32	s15, s15
 8005684:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80057c4 <calWallConrol+0xe0c>
 8005688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005690:	dd06      	ble.n	80056a0 <calWallConrol+0xce8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005692:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <calWallConrol+0xe10>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b4a      	ldr	r3, [pc, #296]	; (80057c8 <calWallConrol+0xe10>)
 800569e:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 80056a0:	4b49      	ldr	r3, [pc, #292]	; (80057c8 <calWallConrol+0xe10>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	f200 813d 	bhi.w	8005924 <calWallConrol+0xf6c>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <calWallConrol+0xcf8>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	08005715 	.word	0x08005715
 80056b8:	080057d9 	.word	0x080057d9
 80056bc:	0800586f 	.word	0x0800586f
		case 0:			//両壁なし
			PID_wall = 0;
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 80056c8:	2000      	movs	r0, #0
 80056ca:	f001 fae3 	bl	8006c94 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 80056ce:	2000      	movs	r0, #0
 80056d0:	f001 fb16 	bl	8006d00 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 80056d4:	4b39      	ldr	r3, [pc, #228]	; (80057bc <calWallConrol+0xe04>)
 80056d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e2:	4b3a      	ldr	r3, [pc, #232]	; (80057cc <calWallConrol+0xe14>)
 80056e4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80056e8:	4b34      	ldr	r3, [pc, #208]	; (80057bc <calWallConrol+0xe04>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f4:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <calWallConrol+0xe18>)
 80056f6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 80056fa:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <calWallConrol+0xe1c>)
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005702:	4b34      	ldr	r3, [pc, #208]	; (80057d4 <calWallConrol+0xe1c>)
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 800570a:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <calWallConrol+0xe1c>)
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	605a      	str	r2, [r3, #4]
			break;
 8005712:	e107      	b.n	8005924 <calWallConrol+0xf6c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005714:	2000      	movs	r0, #0
 8005716:	f001 fabd 	bl	8006c94 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 800571a:	2001      	movs	r0, #1
 800571c:	f001 faf0 	bl	8006d00 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <calWallConrol+0xe04>)
 8005722:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800572e:	4b27      	ldr	r3, [pc, #156]	; (80057cc <calWallConrol+0xe14>)
 8005730:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005734:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <calWallConrol+0xe18>)
 8005736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005738:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800573a:	4b20      	ldr	r3, [pc, #128]	; (80057bc <calWallConrol+0xe04>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005746:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800574a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800574e:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005752:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <calWallConrol+0xe04>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800575e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <calWallConrol+0xe1c>)
 8005764:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <calWallConrol+0xe1c>)
 800576a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 800576e:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <calWallConrol+0xe1c>)
 8005770:	edd3 7a01 	vldr	s15, [r3, #4]
 8005774:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005778:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <calWallConrol+0xe1c>)
 800577a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 800577e:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <calWallConrol+0xe1c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <calWallConrol+0xe1c>)
 8005784:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <calWallConrol+0xe1c>)
 8005788:	ed93 7a00 	vldr	s14, [r3]
 800578c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005790:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005794:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <calWallConrol+0xe1c>)
 8005796:	edd3 6a02 	vldr	s13, [r3, #8]
 800579a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800579e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80057a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80057aa:	e0bb      	b.n	8005924 <calWallConrol+0xf6c>
 80057ac:	20000608 	.word	0x20000608
 80057b0:	20000638 	.word	0x20000638
 80057b4:	200006c8 	.word	0x200006c8
 80057b8:	200006cc 	.word	0x200006cc
 80057bc:	200002b8 	.word	0x200002b8
 80057c0:	20000448 	.word	0x20000448
 80057c4:	42a00000 	.word	0x42a00000
 80057c8:	20000593 	.word	0x20000593
 80057cc:	200005ac 	.word	0x200005ac
 80057d0:	200005b0 	.word	0x200005b0
 80057d4:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 80057d8:	2001      	movs	r0, #1
 80057da:	f001 fa5b 	bl	8006c94 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 80057de:	2000      	movs	r0, #0
 80057e0:	f001 fa8e 	bl	8006d00 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80057e4:	4a9c      	ldr	r2, [pc, #624]	; (8005a58 <calWallConrol+0x10a0>)
 80057e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e8:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80057ea:	4b9c      	ldr	r3, [pc, #624]	; (8005a5c <calWallConrol+0x10a4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f6:	4b9a      	ldr	r3, [pc, #616]	; (8005a60 <calWallConrol+0x10a8>)
 80057f8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 80057fc:	4b97      	ldr	r3, [pc, #604]	; (8005a5c <calWallConrol+0x10a4>)
 80057fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800580a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800580e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005812:	4b92      	ldr	r3, [pc, #584]	; (8005a5c <calWallConrol+0x10a4>)
 8005814:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005818:	ee07 3a90 	vmov	s15, r3
 800581c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005820:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005824:	4b8f      	ldr	r3, [pc, #572]	; (8005a64 <calWallConrol+0x10ac>)
 8005826:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 800582a:	4b8e      	ldr	r3, [pc, #568]	; (8005a64 <calWallConrol+0x10ac>)
 800582c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005830:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <calWallConrol+0x10ac>)
 8005832:	edd3 7a01 	vldr	s15, [r3, #4]
 8005836:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 800583a:	4b8a      	ldr	r3, [pc, #552]	; (8005a64 <calWallConrol+0x10ac>)
 800583c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005840:	4b88      	ldr	r3, [pc, #544]	; (8005a64 <calWallConrol+0x10ac>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a87      	ldr	r2, [pc, #540]	; (8005a64 <calWallConrol+0x10ac>)
 8005846:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005848:	4b86      	ldr	r3, [pc, #536]	; (8005a64 <calWallConrol+0x10ac>)
 800584a:	ed93 7a00 	vldr	s14, [r3]
 800584e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005852:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005856:	4b83      	ldr	r3, [pc, #524]	; (8005a64 <calWallConrol+0x10ac>)
 8005858:	edd3 6a02 	vldr	s13, [r3, #8]
 800585c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005860:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005868:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800586c:	e05a      	b.n	8005924 <calWallConrol+0xf6c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 800586e:	2001      	movs	r0, #1
 8005870:	f001 fa10 	bl	8006c94 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005874:	2001      	movs	r0, #1
 8005876:	f001 fa43 	bl	8006d00 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 800587a:	4a77      	ldr	r2, [pc, #476]	; (8005a58 <calWallConrol+0x10a0>)
 800587c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005880:	4a77      	ldr	r2, [pc, #476]	; (8005a60 <calWallConrol+0x10a8>)
 8005882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005884:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005886:	4b75      	ldr	r3, [pc, #468]	; (8005a5c <calWallConrol+0x10a4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005892:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800589a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 800589e:	4b6f      	ldr	r3, [pc, #444]	; (8005a5c <calWallConrol+0x10a4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 80058ae:	4b6b      	ldr	r3, [pc, #428]	; (8005a5c <calWallConrol+0x10a4>)
 80058b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80058c0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 80058c4:	4b65      	ldr	r3, [pc, #404]	; (8005a5c <calWallConrol+0x10a4>)
 80058c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 80058d6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80058da:	4b62      	ldr	r3, [pc, #392]	; (8005a64 <calWallConrol+0x10ac>)
 80058dc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80058e0:	4b60      	ldr	r3, [pc, #384]	; (8005a64 <calWallConrol+0x10ac>)
 80058e2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80058e6:	4b5f      	ldr	r3, [pc, #380]	; (8005a64 <calWallConrol+0x10ac>)
 80058e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80058ec:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80058f0:	4b5c      	ldr	r3, [pc, #368]	; (8005a64 <calWallConrol+0x10ac>)
 80058f2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80058f6:	4b5b      	ldr	r3, [pc, #364]	; (8005a64 <calWallConrol+0x10ac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a5a      	ldr	r2, [pc, #360]	; (8005a64 <calWallConrol+0x10ac>)
 80058fc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058fe:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <calWallConrol+0x10ac>)
 8005900:	ed93 7a00 	vldr	s14, [r3]
 8005904:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005908:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 800590c:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <calWallConrol+0x10ac>)
 800590e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005912:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005916:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800591a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800591e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005922:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <calWallConrol+0x10b0>)
 8005926:	edd3 7a00 	vldr	s15, [r3]
 800592a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005a6c <calWallConrol+0x10b4>
 800592e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005936:	dd04      	ble.n	8005942 <calWallConrol+0xf8a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005938:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <calWallConrol+0x10b8>)
 800593a:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 800593c:	4b4d      	ldr	r3, [pc, #308]	; (8005a74 <calWallConrol+0x10bc>)
 800593e:	673b      	str	r3, [r7, #112]	; 0x70
 8005940:	e01a      	b.n	8005978 <calWallConrol+0xfc0>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005942:	4b49      	ldr	r3, [pc, #292]	; (8005a68 <calWallConrol+0x10b0>)
 8005944:	edd3 7a00 	vldr	s15, [r3]
 8005948:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800594c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005950:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005954:	4b44      	ldr	r3, [pc, #272]	; (8005a68 <calWallConrol+0x10b0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7fa fe1d 	bl	8000598 <__aeabi_f2d>
 800595e:	a33c      	add	r3, pc, #240	; (adr r3, 8005a50 <calWallConrol+0x1098>)
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f7fa fe70 	bl	8000648 <__aeabi_dmul>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	f7fb f942 	bl	8000bf8 <__aeabi_d2f>
 8005974:	4603      	mov	r3, r0
 8005976:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005978:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <calWallConrol+0x10c0>)
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598a:	dd12      	ble.n	80059b2 <calWallConrol+0xffa>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 800598c:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <calWallConrol+0x10c0>)
 800598e:	edd3 7a00 	vldr	s15, [r3]
 8005992:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005a7c <calWallConrol+0x10c4>
 8005996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800599a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599e:	d808      	bhi.n	80059b2 <calWallConrol+0xffa>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 80059a0:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <calWallConrol+0x10c8>)
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 80059a4:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <calWallConrol+0x10cc>)
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 80059a8:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <calWallConrol+0x10d0>)
 80059aa:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 80059ac:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <calWallConrol+0x10d4>)
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
 80059b0:	e025      	b.n	80059fe <calWallConrol+0x1046>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 80059b2:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <calWallConrol+0x10a4>)
 80059b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059b8:	2bd2      	cmp	r3, #210	; 0xd2
 80059ba:	dd07      	ble.n	80059cc <calWallConrol+0x1014>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 80059bc:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <calWallConrol+0x10d8>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <calWallConrol+0x10d8>)
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e006      	b.n	80059da <calWallConrol+0x1022>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 80059cc:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <calWallConrol+0x10d8>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f023 0302 	bic.w	r3, r3, #2
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <calWallConrol+0x10d8>)
 80059d8:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 80059da:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <calWallConrol+0x10a4>)
 80059dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059e0:	ee07 3a90 	vmov	s15, r3
 80059e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 80059fe:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <calWallConrol+0x10dc>)
 8005a00:	edd3 7a00 	vldr	s15, [r3]
 8005a04:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	dd12      	ble.n	8005a38 <calWallConrol+0x1080>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <calWallConrol+0x10dc>)
 8005a14:	edd3 7a00 	vldr	s15, [r3]
 8005a18:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005a7c <calWallConrol+0x10c4>
 8005a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a24:	d808      	bhi.n	8005a38 <calWallConrol+0x1080>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <calWallConrol+0x10e0>)
 8005a28:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005a2a:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <calWallConrol+0x10e4>)
 8005a2c:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <calWallConrol+0x10e8>)
 8005a30:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005a32:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <calWallConrol+0x10ec>)
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
 8005a36:	e04f      	b.n	8005ad8 <calWallConrol+0x1120>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <calWallConrol+0x10a4>)
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	2bd2      	cmp	r3, #210	; 0xd2
 8005a3e:	dd33      	ble.n	8005aa8 <calWallConrol+0x10f0>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005a40:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <calWallConrol+0x10d8>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <calWallConrol+0x10d8>)
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e032      	b.n	8005ab6 <calWallConrol+0x10fe>
 8005a50:	9999999a 	.word	0x9999999a
 8005a54:	bfa99999 	.word	0xbfa99999
 8005a58:	200005ac 	.word	0x200005ac
 8005a5c:	200002b8 	.word	0x200002b8
 8005a60:	200005b0 	.word	0x200005b0
 8005a64:	20000578 	.word	0x20000578
 8005a68:	200004d8 	.word	0x200004d8
 8005a6c:	44fa0000 	.word	0x44fa0000
 8005a70:	447a0000 	.word	0x447a0000
 8005a74:	c2c80000 	.word	0xc2c80000
 8005a78:	200005dc 	.word	0x200005dc
 8005a7c:	42a00000 	.word	0x42a00000
 8005a80:	43c833fb 	.word	0x43c833fb
 8005a84:	c100d596 	.word	0xc100d596
 8005a88:	3e3328b7 	.word	0x3e3328b7
 8005a8c:	b9ee8d11 	.word	0xb9ee8d11
 8005a90:	20000594 	.word	0x20000594
 8005a94:	200005e0 	.word	0x200005e0
 8005a98:	44062309 	.word	0x44062309
 8005a9c:	c1681e49 	.word	0xc1681e49
 8005aa0:	3e7f18ec 	.word	0x3e7f18ec
 8005aa4:	ba35209a 	.word	0xba35209a
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005aa8:	4bb5      	ldr	r3, [pc, #724]	; (8005d80 <calWallConrol+0x13c8>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	4bb3      	ldr	r3, [pc, #716]	; (8005d80 <calWallConrol+0x13c8>)
 8005ab4:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005ab6:	4bb3      	ldr	r3, [pc, #716]	; (8005d84 <calWallConrol+0x13cc>)
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ac2:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005ad8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005adc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005ae0:	4ba9      	ldr	r3, [pc, #676]	; (8005d88 <calWallConrol+0x13d0>)
 8005ae2:	edd3 7a00 	vldr	s15, [r3]
 8005ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aea:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005aee:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005af2:	4ba5      	ldr	r3, [pc, #660]	; (8005d88 <calWallConrol+0x13d0>)
 8005af4:	edd3 7a00 	vldr	s15, [r3]
 8005af8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005afc:	4ba2      	ldr	r3, [pc, #648]	; (8005d88 <calWallConrol+0x13d0>)
 8005afe:	edd3 7a00 	vldr	s15, [r3]
 8005b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b06:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005b0a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b0e:	4b9e      	ldr	r3, [pc, #632]	; (8005d88 <calWallConrol+0x13d0>)
 8005b10:	edd3 7a00 	vldr	s15, [r3]
 8005b14:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005b18:	4b9b      	ldr	r3, [pc, #620]	; (8005d88 <calWallConrol+0x13d0>)
 8005b1a:	edd3 7a00 	vldr	s15, [r3]
 8005b1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005b22:	4b99      	ldr	r3, [pc, #612]	; (8005d88 <calWallConrol+0x13d0>)
 8005b24:	edd3 7a00 	vldr	s15, [r3]
 8005b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b30:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005b34:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3c:	4b93      	ldr	r3, [pc, #588]	; (8005d8c <calWallConrol+0x13d4>)
 8005b3e:	edd3 7a00 	vldr	s15, [r3]
 8005b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b46:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005b4a:	edd7 6a08 	vldr	s13, [r7, #32]
 8005b4e:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <calWallConrol+0x13d4>)
 8005b50:	edd3 7a00 	vldr	s15, [r3]
 8005b54:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005b58:	4b8c      	ldr	r3, [pc, #560]	; (8005d8c <calWallConrol+0x13d4>)
 8005b5a:	edd3 7a00 	vldr	s15, [r3]
 8005b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005b62:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005b66:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005b6a:	4b88      	ldr	r3, [pc, #544]	; (8005d8c <calWallConrol+0x13d4>)
 8005b6c:	edd3 7a00 	vldr	s15, [r3]
 8005b70:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005b74:	4b85      	ldr	r3, [pc, #532]	; (8005d8c <calWallConrol+0x13d4>)
 8005b76:	edd3 7a00 	vldr	s15, [r3]
 8005b7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005b7e:	4b83      	ldr	r3, [pc, #524]	; (8005d8c <calWallConrol+0x13d4>)
 8005b80:	edd3 7a00 	vldr	s15, [r3]
 8005b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005b90:	230b      	movs	r3, #11
 8005b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b94:	e018      	b.n	8005bc8 <calWallConrol+0x1210>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	4a7d      	ldr	r2, [pc, #500]	; (8005d90 <calWallConrol+0x13d8>)
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	497b      	ldr	r1, [pc, #492]	; (8005d90 <calWallConrol+0x13d8>)
 8005ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	4a78      	ldr	r2, [pc, #480]	; (8005d94 <calWallConrol+0x13dc>)
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4976      	ldr	r1, [pc, #472]	; (8005d94 <calWallConrol+0x13dc>)
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dce3      	bgt.n	8005b96 <calWallConrol+0x11de>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005bce:	4a70      	ldr	r2, [pc, #448]	; (8005d90 <calWallConrol+0x13d8>)
 8005bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd2:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005bd4:	4a6f      	ldr	r2, [pc, #444]	; (8005d94 <calWallConrol+0x13dc>)
 8005bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd8:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005bda:	4b6d      	ldr	r3, [pc, #436]	; (8005d90 <calWallConrol+0x13d8>)
 8005bdc:	ed93 7a00 	vldr	s14, [r3]
 8005be0:	4b6b      	ldr	r3, [pc, #428]	; (8005d90 <calWallConrol+0x13d8>)
 8005be2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bea:	4b6b      	ldr	r3, [pc, #428]	; (8005d98 <calWallConrol+0x13e0>)
 8005bec:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005bf0:	4b68      	ldr	r3, [pc, #416]	; (8005d94 <calWallConrol+0x13dc>)
 8005bf2:	ed93 7a00 	vldr	s14, [r3]
 8005bf6:	4b67      	ldr	r3, [pc, #412]	; (8005d94 <calWallConrol+0x13dc>)
 8005bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c00:	4b66      	ldr	r3, [pc, #408]	; (8005d9c <calWallConrol+0x13e4>)
 8005c02:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005c06:	4b5f      	ldr	r3, [pc, #380]	; (8005d84 <calWallConrol+0x13cc>)
 8005c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c0c:	2bd2      	cmp	r3, #210	; 0xd2
 8005c0e:	dd1a      	ble.n	8005c46 <calWallConrol+0x128e>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005c10:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <calWallConrol+0x13e8>)
 8005c12:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005c14:	ee07 3a90 	vmov	s15, r3
 8005c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c1c:	4b5e      	ldr	r3, [pc, #376]	; (8005d98 <calWallConrol+0x13e0>)
 8005c1e:	edd3 7a00 	vldr	s15, [r3]
 8005c22:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005c26:	eef0 7ae7 	vabs.f32	s15, s15
 8005c2a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005da4 <calWallConrol+0x13ec>
 8005c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c36:	d506      	bpl.n	8005c46 <calWallConrol+0x128e>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005c38:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <calWallConrol+0x13c8>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b4f      	ldr	r3, [pc, #316]	; (8005d80 <calWallConrol+0x13c8>)
 8005c44:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005c46:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <calWallConrol+0x13cc>)
 8005c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4a:	2bd2      	cmp	r3, #210	; 0xd2
 8005c4c:	dd1a      	ble.n	8005c84 <calWallConrol+0x12cc>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005c4e:	4b54      	ldr	r3, [pc, #336]	; (8005da0 <calWallConrol+0x13e8>)
 8005c50:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c5a:	4b50      	ldr	r3, [pc, #320]	; (8005d9c <calWallConrol+0x13e4>)
 8005c5c:	edd3 7a00 	vldr	s15, [r3]
 8005c60:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005c64:	eef0 7ae7 	vabs.f32	s15, s15
 8005c68:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005da4 <calWallConrol+0x13ec>
 8005c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	d506      	bpl.n	8005c84 <calWallConrol+0x12cc>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005c76:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <calWallConrol+0x13c8>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <calWallConrol+0x13c8>)
 8005c82:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005c84:	4b3f      	ldr	r3, [pc, #252]	; (8005d84 <calWallConrol+0x13cc>)
 8005c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c8a:	2bd1      	cmp	r3, #209	; 0xd1
 8005c8c:	dd13      	ble.n	8005cb6 <calWallConrol+0x12fe>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005c8e:	4b44      	ldr	r3, [pc, #272]	; (8005da0 <calWallConrol+0x13e8>)
 8005c90:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c9a:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <calWallConrol+0x13e0>)
 8005c9c:	edd3 7a00 	vldr	s15, [r3]
 8005ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005ca4:	eef0 7ae7 	vabs.f32	s15, s15
 8005ca8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005da4 <calWallConrol+0x13ec>
 8005cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb4:	dd06      	ble.n	8005cc4 <calWallConrol+0x130c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005cb6:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <calWallConrol+0x13c8>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f023 0302 	bic.w	r3, r3, #2
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <calWallConrol+0x13c8>)
 8005cc2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005cc4:	4b2f      	ldr	r3, [pc, #188]	; (8005d84 <calWallConrol+0x13cc>)
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc8:	2bd1      	cmp	r3, #209	; 0xd1
 8005cca:	dd13      	ble.n	8005cf4 <calWallConrol+0x133c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005ccc:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <calWallConrol+0x13e8>)
 8005cce:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd8:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <calWallConrol+0x13e4>)
 8005cda:	edd3 7a00 	vldr	s15, [r3]
 8005cde:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005ce2:	eef0 7ae7 	vabs.f32	s15, s15
 8005ce6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005da4 <calWallConrol+0x13ec>
 8005cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf2:	dd06      	ble.n	8005d02 <calWallConrol+0x134a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005cf4:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <calWallConrol+0x13c8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <calWallConrol+0x13c8>)
 8005d00:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005d02:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <calWallConrol+0x13c8>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	f200 8155 	bhi.w	8005fb6 <calWallConrol+0x15fe>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <calWallConrol+0x135c>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005db9 	.word	0x08005db9
 8005d1c:	08005e59 	.word	0x08005e59
 8005d20:	08005ef7 	.word	0x08005ef7
		case 0:			//両壁なし
			PID_wall += 0;
 8005d24:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d28:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005da8 <calWallConrol+0x13f0>
 8005d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d30:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005d34:	2000      	movs	r0, #0
 8005d36:	f000 ffbf 	bl	8006cb8 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f000 ffce 	bl	8006cdc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005d40:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <calWallConrol+0x13cc>)
 8005d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <calWallConrol+0x13f4>)
 8005d50:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <calWallConrol+0x13cc>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <calWallConrol+0x13f8>)
 8005d62:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005d66:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <calWallConrol+0x13fc>)
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005d6e:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <calWallConrol+0x13fc>)
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <calWallConrol+0x13fc>)
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	605a      	str	r2, [r3, #4]
			break;
 8005d7e:	e11a      	b.n	8005fb6 <calWallConrol+0x15fe>
 8005d80:	20000594 	.word	0x20000594
 8005d84:	200002b8 	.word	0x200002b8
 8005d88:	200005dc 	.word	0x200005dc
 8005d8c:	200005e0 	.word	0x200005e0
 8005d90:	20000668 	.word	0x20000668
 8005d94:	20000698 	.word	0x20000698
 8005d98:	200006d0 	.word	0x200006d0
 8005d9c:	200006d4 	.word	0x200006d4
 8005da0:	20000448 	.word	0x20000448
 8005da4:	42a00000 	.word	0x42a00000
 8005da8:	00000000 	.word	0x00000000
 8005dac:	200005a4 	.word	0x200005a4
 8005db0:	200005a8 	.word	0x200005a8
 8005db4:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005db8:	2000      	movs	r0, #0
 8005dba:	f000 ff7d 	bl	8006cb8 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	f000 ff8c 	bl	8006cdc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005dc4:	4b87      	ldr	r3, [pc, #540]	; (8005fe4 <calWallConrol+0x162c>)
 8005dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd2:	4b85      	ldr	r3, [pc, #532]	; (8005fe8 <calWallConrol+0x1630>)
 8005dd4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005dd8:	4a84      	ldr	r2, [pc, #528]	; (8005fec <calWallConrol+0x1634>)
 8005dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ddc:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005dde:	4b81      	ldr	r3, [pc, #516]	; (8005fe4 <calWallConrol+0x162c>)
 8005de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df2:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8005df6:	4b7b      	ldr	r3, [pc, #492]	; (8005fe4 <calWallConrol+0x162c>)
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8005e06:	4b7a      	ldr	r3, [pc, #488]	; (8005ff0 <calWallConrol+0x1638>)
 8005e08:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005e0c:	4b78      	ldr	r3, [pc, #480]	; (8005ff0 <calWallConrol+0x1638>)
 8005e0e:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005e12:	4b77      	ldr	r3, [pc, #476]	; (8005ff0 <calWallConrol+0x1638>)
 8005e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e18:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005e1c:	4b74      	ldr	r3, [pc, #464]	; (8005ff0 <calWallConrol+0x1638>)
 8005e1e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005e22:	4b73      	ldr	r3, [pc, #460]	; (8005ff0 <calWallConrol+0x1638>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a72      	ldr	r2, [pc, #456]	; (8005ff0 <calWallConrol+0x1638>)
 8005e28:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005e2a:	4b71      	ldr	r3, [pc, #452]	; (8005ff0 <calWallConrol+0x1638>)
 8005e2c:	ed93 7a00 	vldr	s14, [r3]
 8005e30:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005e34:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005e38:	4b6d      	ldr	r3, [pc, #436]	; (8005ff0 <calWallConrol+0x1638>)
 8005e3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e3e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e46:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005e4a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e52:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005e56:	e0ae      	b.n	8005fb6 <calWallConrol+0x15fe>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f000 ff2d 	bl	8006cb8 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f000 ff3c 	bl	8006cdc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005e64:	4a60      	ldr	r2, [pc, #384]	; (8005fe8 <calWallConrol+0x1630>)
 8005e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e68:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005e6a:	4b5e      	ldr	r3, [pc, #376]	; (8005fe4 <calWallConrol+0x162c>)
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e76:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <calWallConrol+0x1634>)
 8005e78:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005e7c:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <calWallConrol+0x162c>)
 8005e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e8e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005e92:	4b54      	ldr	r3, [pc, #336]	; (8005fe4 <calWallConrol+0x162c>)
 8005e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005ea4:	4b52      	ldr	r3, [pc, #328]	; (8005ff0 <calWallConrol+0x1638>)
 8005ea6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005eaa:	4b51      	ldr	r3, [pc, #324]	; (8005ff0 <calWallConrol+0x1638>)
 8005eac:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005eb0:	4b4f      	ldr	r3, [pc, #316]	; (8005ff0 <calWallConrol+0x1638>)
 8005eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005eba:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <calWallConrol+0x1638>)
 8005ebc:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005ec0:	4b4b      	ldr	r3, [pc, #300]	; (8005ff0 <calWallConrol+0x1638>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a4a      	ldr	r2, [pc, #296]	; (8005ff0 <calWallConrol+0x1638>)
 8005ec6:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005ec8:	4b49      	ldr	r3, [pc, #292]	; (8005ff0 <calWallConrol+0x1638>)
 8005eca:	ed93 7a00 	vldr	s14, [r3]
 8005ece:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005ed6:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <calWallConrol+0x1638>)
 8005ed8:	edd3 6a02 	vldr	s13, [r3, #8]
 8005edc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005ee8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005ef4:	e05f      	b.n	8005fb6 <calWallConrol+0x15fe>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	f000 fede 	bl	8006cb8 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005efc:	2001      	movs	r0, #1
 8005efe:	f000 feed 	bl	8006cdc <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005f02:	4a39      	ldr	r2, [pc, #228]	; (8005fe8 <calWallConrol+0x1630>)
 8005f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f06:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005f08:	4a38      	ldr	r2, [pc, #224]	; (8005fec <calWallConrol+0x1634>)
 8005f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f0c:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005f0e:	4b35      	ldr	r3, [pc, #212]	; (8005fe4 <calWallConrol+0x162c>)
 8005f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f1a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f22:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8005f26:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <calWallConrol+0x162c>)
 8005f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005f36:	4b2b      	ldr	r3, [pc, #172]	; (8005fe4 <calWallConrol+0x162c>)
 8005f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f44:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f48:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005f4c:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <calWallConrol+0x162c>)
 8005f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f5a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005f62:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <calWallConrol+0x1638>)
 8005f64:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005f68:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <calWallConrol+0x1638>)
 8005f6a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <calWallConrol+0x1638>)
 8005f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f74:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005f78:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <calWallConrol+0x1638>)
 8005f7a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <calWallConrol+0x1638>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <calWallConrol+0x1638>)
 8005f84:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f86:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <calWallConrol+0x1638>)
 8005f88:	ed93 7a00 	vldr	s14, [r3]
 8005f8c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f90:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005f94:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <calWallConrol+0x1638>)
 8005f96:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f9a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005fa6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fae:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005fb2:	e000      	b.n	8005fb6 <calWallConrol+0x15fe>
			break;
 8005fb4:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8005fb6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005fba:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005ff4 <calWallConrol+0x163c>
 8005fbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <calWallConrol+0x1640>)
 8005fc4:	edd3 7a00 	vldr	s15, [r3]
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8005fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fd2:	ee07 3a90 	vmov	s15, r3
}
 8005fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fda:	37a8      	adds	r7, #168	; 0xa8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200002b8 	.word	0x200002b8
 8005fe8:	200005a4 	.word	0x200005a4
 8005fec:	200005a8 	.word	0x200005a8
 8005ff0:	20000584 	.word	0x20000584
 8005ff4:	44d1e000 	.word	0x44d1e000
 8005ff8:	200004d4 	.word	0x200004d4
 8005ffc:	00000000 	.word	0x00000000

08006000 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006000:	b5b0      	push	{r4, r5, r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006006:	4ba0      	ldr	r3, [pc, #640]	; (8006288 <interrupt_WallCut+0x288>)
 8006008:	edd3 7a00 	vldr	s15, [r3]
 800600c:	eef0 7ae7 	vabs.f32	s15, s15
 8006010:	ee17 0a90 	vmov	r0, s15
 8006014:	f7fa fac0 	bl	8000598 <__aeabi_f2d>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	a196      	add	r1, pc, #600	; (adr r1, 8006278 <interrupt_WallCut+0x278>)
 800601e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006022:	f7fa fc3b 	bl	800089c <__aeabi_ddiv>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	ec43 2b17 	vmov	d7, r2, r3
 800602e:	eeb0 0a47 	vmov.f32	s0, s14
 8006032:	eef0 0a67 	vmov.f32	s1, s15
 8006036:	f01c fcd3 	bl	80229e0 <ceil>
 800603a:	ec53 2b10 	vmov	r2, r3, d0
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	f7fa fdb1 	bl	8000ba8 <__aeabi_d2iz>
 8006046:	4603      	mov	r3, r0
 8006048:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b0a      	cmp	r3, #10
 800604e:	dd01      	ble.n	8006054 <interrupt_WallCut+0x54>
 8006050:	230b      	movs	r3, #11
 8006052:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	e019      	b.n	800608e <interrupt_WallCut+0x8e>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 800605a:	498c      	ldr	r1, [pc, #560]	; (800628c <interrupt_WallCut+0x28c>)
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	440b      	add	r3, r1
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	4888      	ldr	r0, [pc, #544]	; (800628c <interrupt_WallCut+0x28c>)
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800607e:	1aca      	subs	r2, r1, r3
 8006080:	4983      	ldr	r1, [pc, #524]	; (8006290 <interrupt_WallCut+0x290>)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	3301      	adds	r3, #1
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b04      	cmp	r3, #4
 8006092:	dde2      	ble.n	800605a <interrupt_WallCut+0x5a>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006094:	4b7f      	ldr	r3, [pc, #508]	; (8006294 <interrupt_WallCut+0x294>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	f040 8556 	bne.w	8006b4a <interrupt_WallCut+0xb4a>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 800609e:	4b7b      	ldr	r3, [pc, #492]	; (800628c <interrupt_WallCut+0x28c>)
 80060a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a8:	dd03      	ble.n	80060b2 <interrupt_WallCut+0xb2>
			front_wall_break_90 = 1;
 80060aa:	4b7b      	ldr	r3, [pc, #492]	; (8006298 <interrupt_WallCut+0x298>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e002      	b.n	80060b8 <interrupt_WallCut+0xb8>
		} else {
			front_wall_break_90 = 0;
 80060b2:	4b79      	ldr	r3, [pc, #484]	; (8006298 <interrupt_WallCut+0x298>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 80060b8:	4b74      	ldr	r3, [pc, #464]	; (800628c <interrupt_WallCut+0x28c>)
 80060ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80060c2:	dd03      	ble.n	80060cc <interrupt_WallCut+0xcc>
			front_wall_break_45 = 1;
 80060c4:	4b75      	ldr	r3, [pc, #468]	; (800629c <interrupt_WallCut+0x29c>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e002      	b.n	80060d2 <interrupt_WallCut+0xd2>
		} else {
			front_wall_break_45 = 0;
 80060cc:	4b73      	ldr	r3, [pc, #460]	; (800629c <interrupt_WallCut+0x29c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 80060d2:	4b6e      	ldr	r3, [pc, #440]	; (800628c <interrupt_WallCut+0x28c>)
 80060d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80060dc:	dd03      	ble.n	80060e6 <interrupt_WallCut+0xe6>
			front_wall_break_45slant = 1;
 80060de:	4b70      	ldr	r3, [pc, #448]	; (80062a0 <interrupt_WallCut+0x2a0>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e002      	b.n	80060ec <interrupt_WallCut+0xec>
		} else {
			front_wall_break_45slant = 0;
 80060e6:	4b6e      	ldr	r3, [pc, #440]	; (80062a0 <interrupt_WallCut+0x2a0>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 80060ec:	4b67      	ldr	r3, [pc, #412]	; (800628c <interrupt_WallCut+0x28c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80060f4:	da30      	bge.n	8006158 <interrupt_WallCut+0x158>
			NoWallCountL90++;
 80060f6:	4b6b      	ldr	r3, [pc, #428]	; (80062a4 <interrupt_WallCut+0x2a4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	4a69      	ldr	r2, [pc, #420]	; (80062a4 <interrupt_WallCut+0x2a4>)
 80060fe:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006100:	4b69      	ldr	r3, [pc, #420]	; (80062a8 <interrupt_WallCut+0x2a8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f7fa fa47 	bl	8000598 <__aeabi_f2d>
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	4b67      	ldr	r3, [pc, #412]	; (80062ac <interrupt_WallCut+0x2ac>)
 8006110:	ed93 7a00 	vldr	s14, [r3]
 8006114:	4b66      	ldr	r3, [pc, #408]	; (80062b0 <interrupt_WallCut+0x2b0>)
 8006116:	edd3 7a00 	vldr	s15, [r3]
 800611a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800611e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006122:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006126:	ee16 0a90 	vmov	r0, s13
 800612a:	f7fa fa35 	bl	8000598 <__aeabi_f2d>
 800612e:	a354      	add	r3, pc, #336	; (adr r3, 8006280 <interrupt_WallCut+0x280>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa fa88 	bl	8000648 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa f8cc 	bl	80002dc <__adddf3>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	f7fa fd54 	bl	8000bf8 <__aeabi_d2f>
 8006150:	4603      	mov	r3, r0
 8006152:	4a55      	ldr	r2, [pc, #340]	; (80062a8 <interrupt_WallCut+0x2a8>)
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e006      	b.n	8006166 <interrupt_WallCut+0x166>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006158:	4b52      	ldr	r3, [pc, #328]	; (80062a4 <interrupt_WallCut+0x2a4>)
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 800615e:	4b52      	ldr	r3, [pc, #328]	; (80062a8 <interrupt_WallCut+0x2a8>)
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006166:	4b49      	ldr	r3, [pc, #292]	; (800628c <interrupt_WallCut+0x28c>)
 8006168:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800616c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006170:	da30      	bge.n	80061d4 <interrupt_WallCut+0x1d4>
			NoWallCountR90++;
 8006172:	4b50      	ldr	r3, [pc, #320]	; (80062b4 <interrupt_WallCut+0x2b4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3301      	adds	r3, #1
 8006178:	4a4e      	ldr	r2, [pc, #312]	; (80062b4 <interrupt_WallCut+0x2b4>)
 800617a:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800617c:	4b4e      	ldr	r3, [pc, #312]	; (80062b8 <interrupt_WallCut+0x2b8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f7fa fa09 	bl	8000598 <__aeabi_f2d>
 8006186:	4604      	mov	r4, r0
 8006188:	460d      	mov	r5, r1
 800618a:	4b48      	ldr	r3, [pc, #288]	; (80062ac <interrupt_WallCut+0x2ac>)
 800618c:	ed93 7a00 	vldr	s14, [r3]
 8006190:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <interrupt_WallCut+0x2b0>)
 8006192:	edd3 7a00 	vldr	s15, [r3]
 8006196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800619a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800619e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061a2:	ee16 0a90 	vmov	r0, s13
 80061a6:	f7fa f9f7 	bl	8000598 <__aeabi_f2d>
 80061aa:	a335      	add	r3, pc, #212	; (adr r3, 8006280 <interrupt_WallCut+0x280>)
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f7fa fa4a 	bl	8000648 <__aeabi_dmul>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4620      	mov	r0, r4
 80061ba:	4629      	mov	r1, r5
 80061bc:	f7fa f88e 	bl	80002dc <__adddf3>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4610      	mov	r0, r2
 80061c6:	4619      	mov	r1, r3
 80061c8:	f7fa fd16 	bl	8000bf8 <__aeabi_d2f>
 80061cc:	4603      	mov	r3, r0
 80061ce:	4a3a      	ldr	r2, [pc, #232]	; (80062b8 <interrupt_WallCut+0x2b8>)
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	e006      	b.n	80061e2 <interrupt_WallCut+0x1e2>
		} else {
			NoWallCountR90 = 0;
 80061d4:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <interrupt_WallCut+0x2b4>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 80061da:	4b37      	ldr	r3, [pc, #220]	; (80062b8 <interrupt_WallCut+0x2b8>)
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80061e2:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <interrupt_WallCut+0x290>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80061ea:	da03      	bge.n	80061f4 <interrupt_WallCut+0x1f4>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 80061ec:	4b27      	ldr	r3, [pc, #156]	; (800628c <interrupt_WallCut+0x28c>)
 80061ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f0:	2bc8      	cmp	r3, #200	; 0xc8
 80061f2:	dd37      	ble.n	8006264 <interrupt_WallCut+0x264>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 80061f4:	4b31      	ldr	r3, [pc, #196]	; (80062bc <interrupt_WallCut+0x2bc>)
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 80061fc:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <interrupt_WallCut+0x2c0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a2f      	ldr	r2, [pc, #188]	; (80062c0 <interrupt_WallCut+0x2c0>)
 8006204:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006206:	4b2f      	ldr	r3, [pc, #188]	; (80062c4 <interrupt_WallCut+0x2c4>)
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800620c:	4b2e      	ldr	r3, [pc, #184]	; (80062c8 <interrupt_WallCut+0x2c8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f7fa f9c1 	bl	8000598 <__aeabi_f2d>
 8006216:	4604      	mov	r4, r0
 8006218:	460d      	mov	r5, r1
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <interrupt_WallCut+0x2ac>)
 800621c:	ed93 7a00 	vldr	s14, [r3]
 8006220:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <interrupt_WallCut+0x2b0>)
 8006222:	edd3 7a00 	vldr	s15, [r3]
 8006226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800622e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006232:	ee16 0a90 	vmov	r0, s13
 8006236:	f7fa f9af 	bl	8000598 <__aeabi_f2d>
 800623a:	a311      	add	r3, pc, #68	; (adr r3, 8006280 <interrupt_WallCut+0x280>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa fa02 	bl	8000648 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f7fa f846 	bl	80002dc <__adddf3>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	f7fa fcce 	bl	8000bf8 <__aeabi_d2f>
 800625c:	4603      	mov	r3, r0
 800625e:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <interrupt_WallCut+0x2c8>)
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e0a0      	b.n	80063a6 <interrupt_WallCut+0x3a6>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 8006264:	4b17      	ldr	r3, [pc, #92]	; (80062c4 <interrupt_WallCut+0x2c4>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d16c      	bne.n	8006346 <interrupt_WallCut+0x346>
				for (int i = 0; i <= 19; i++) {
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e04c      	b.n	800630c <interrupt_WallCut+0x30c>
 8006272:	bf00      	nop
 8006274:	f3af 8000 	nop.w
 8006278:	00000000 	.word	0x00000000
 800627c:	40ab5800 	.word	0x40ab5800
 8006280:	d2f1a9fc 	.word	0xd2f1a9fc
 8006284:	3f50624d 	.word	0x3f50624d
 8006288:	200004d8 	.word	0x200004d8
 800628c:	200002b8 	.word	0x200002b8
 8006290:	2000045c 	.word	0x2000045c
 8006294:	20000592 	.word	0x20000592
 8006298:	200005f2 	.word	0x200005f2
 800629c:	200005f3 	.word	0x200005f3
 80062a0:	200005f4 	.word	0x200005f4
 80062a4:	200005b8 	.word	0x200005b8
 80062a8:	200005d0 	.word	0x200005d0
 80062ac:	20000258 	.word	0x20000258
 80062b0:	2000025c 	.word	0x2000025c
 80062b4:	200005b4 	.word	0x200005b4
 80062b8:	200005cc 	.word	0x200005cc
 80062bc:	200005f8 	.word	0x200005f8
 80062c0:	200005c0 	.word	0x200005c0
 80062c4:	200005ec 	.word	0x200005ec
 80062c8:	200005d8 	.word	0x200005d8
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80062cc:	4a7c      	ldr	r2, [pc, #496]	; (80064c0 <interrupt_WallCut+0x4c0>)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3314      	adds	r3, #20
 80062d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062de:	4b79      	ldr	r3, [pc, #484]	; (80064c4 <interrupt_WallCut+0x4c4>)
 80062e0:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 80062e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ec:	dd0b      	ble.n	8006306 <interrupt_WallCut+0x306>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80062ee:	4a74      	ldr	r2, [pc, #464]	; (80064c0 <interrupt_WallCut+0x4c0>)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3314      	adds	r3, #20
 80062f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f8:	ee07 3a90 	vmov	s15, r3
 80062fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006300:	4b70      	ldr	r3, [pc, #448]	; (80064c4 <interrupt_WallCut+0x4c4>)
 8006302:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b13      	cmp	r3, #19
 8006310:	dddc      	ble.n	80062cc <interrupt_WallCut+0x2cc>
					}
				}
				NoWallCountL45 = 0;
 8006312:	4b6d      	ldr	r3, [pc, #436]	; (80064c8 <interrupt_WallCut+0x4c8>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006318:	4b6c      	ldr	r3, [pc, #432]	; (80064cc <interrupt_WallCut+0x4cc>)
 800631a:	2201      	movs	r2, #1
 800631c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800631e:	4b69      	ldr	r3, [pc, #420]	; (80064c4 <interrupt_WallCut+0x4c4>)
 8006320:	edd3 7a00 	vldr	s15, [r3]
 8006324:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80064d0 <interrupt_WallCut+0x4d0>
 8006328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800632c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80064d4 <interrupt_WallCut+0x4d4>
 8006330:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006334:	4b63      	ldr	r3, [pc, #396]	; (80064c4 <interrupt_WallCut+0x4c4>)
 8006336:	ed93 7a00 	vldr	s14, [r3]
 800633a:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 800633e:	4b66      	ldr	r3, [pc, #408]	; (80064d8 <interrupt_WallCut+0x4d8>)
 8006340:	edc3 7a00 	vstr	s15, [r3]
 8006344:	e02f      	b.n	80063a6 <interrupt_WallCut+0x3a6>
			} else {
				NoWallCountL45++;
 8006346:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <interrupt_WallCut+0x4c8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3301      	adds	r3, #1
 800634c:	4a5e      	ldr	r2, [pc, #376]	; (80064c8 <interrupt_WallCut+0x4c8>)
 800634e:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006350:	4b61      	ldr	r3, [pc, #388]	; (80064d8 <interrupt_WallCut+0x4d8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f7fa f91f 	bl	8000598 <__aeabi_f2d>
 800635a:	4604      	mov	r4, r0
 800635c:	460d      	mov	r5, r1
 800635e:	4b5f      	ldr	r3, [pc, #380]	; (80064dc <interrupt_WallCut+0x4dc>)
 8006360:	ed93 7a00 	vldr	s14, [r3]
 8006364:	4b5e      	ldr	r3, [pc, #376]	; (80064e0 <interrupt_WallCut+0x4e0>)
 8006366:	edd3 7a00 	vldr	s15, [r3]
 800636a:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 800636e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006372:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006376:	ee16 0a90 	vmov	r0, s13
 800637a:	f7fa f90d 	bl	8000598 <__aeabi_f2d>
 800637e:	a34e      	add	r3, pc, #312	; (adr r3, 80064b8 <interrupt_WallCut+0x4b8>)
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f7fa f960 	bl	8000648 <__aeabi_dmul>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7f9 ffa4 	bl	80002dc <__adddf3>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	f7fa fc2c 	bl	8000bf8 <__aeabi_d2f>
 80063a0:	4603      	mov	r3, r0
 80063a2:	4a4d      	ldr	r2, [pc, #308]	; (80064d8 <interrupt_WallCut+0x4d8>)
 80063a4:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80063a6:	4b4f      	ldr	r3, [pc, #316]	; (80064e4 <interrupt_WallCut+0x4e4>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80063ae:	da04      	bge.n	80063ba <interrupt_WallCut+0x3ba>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 80063b0:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <interrupt_WallCut+0x4c0>)
 80063b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b6:	2bfa      	cmp	r3, #250	; 0xfa
 80063b8:	dd37      	ble.n	800642a <interrupt_WallCut+0x42a>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 80063ba:	4b4b      	ldr	r3, [pc, #300]	; (80064e8 <interrupt_WallCut+0x4e8>)
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 80063c2:	4b4a      	ldr	r3, [pc, #296]	; (80064ec <interrupt_WallCut+0x4ec>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	4a48      	ldr	r2, [pc, #288]	; (80064ec <interrupt_WallCut+0x4ec>)
 80063ca:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 80063cc:	4b48      	ldr	r3, [pc, #288]	; (80064f0 <interrupt_WallCut+0x4f0>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80063d2:	4b48      	ldr	r3, [pc, #288]	; (80064f4 <interrupt_WallCut+0x4f4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa f8de 	bl	8000598 <__aeabi_f2d>
 80063dc:	4604      	mov	r4, r0
 80063de:	460d      	mov	r5, r1
 80063e0:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <interrupt_WallCut+0x4dc>)
 80063e2:	ed93 7a00 	vldr	s14, [r3]
 80063e6:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <interrupt_WallCut+0x4e0>)
 80063e8:	edd3 7a00 	vldr	s15, [r3]
 80063ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063f8:	ee16 0a90 	vmov	r0, s13
 80063fc:	f7fa f8cc 	bl	8000598 <__aeabi_f2d>
 8006400:	a32d      	add	r3, pc, #180	; (adr r3, 80064b8 <interrupt_WallCut+0x4b8>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f7fa f91f 	bl	8000648 <__aeabi_dmul>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f7f9 ff63 	bl	80002dc <__adddf3>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	f7fa fbeb 	bl	8000bf8 <__aeabi_d2f>
 8006422:	4603      	mov	r3, r0
 8006424:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <interrupt_WallCut+0x4f4>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e098      	b.n	800655c <interrupt_WallCut+0x55c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800642a:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <interrupt_WallCut+0x4f0>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d164      	bne.n	80064fc <interrupt_WallCut+0x4fc>
				for (int i = 0; i <= 19; i++) {
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	e01f      	b.n	8006478 <interrupt_WallCut+0x478>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006438:	4a21      	ldr	r2, [pc, #132]	; (80064c0 <interrupt_WallCut+0x4c0>)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	333c      	adds	r3, #60	; 0x3c
 800643e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800644a:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <interrupt_WallCut+0x4e8>)
 800644c:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 8006450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006458:	dd0b      	ble.n	8006472 <interrupt_WallCut+0x472>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 800645a:	4a19      	ldr	r2, [pc, #100]	; (80064c0 <interrupt_WallCut+0x4c0>)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	333c      	adds	r3, #60	; 0x3c
 8006460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006464:	ee07 3a90 	vmov	s15, r3
 8006468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 800646c:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <interrupt_WallCut+0x4e8>)
 800646e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	3301      	adds	r3, #1
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b13      	cmp	r3, #19
 800647c:	dddc      	ble.n	8006438 <interrupt_WallCut+0x438>
					}
				}
				NoWallCountR45 = 0;
 800647e:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <interrupt_WallCut+0x4ec>)
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 8006484:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <interrupt_WallCut+0x4f0>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 800648a:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <interrupt_WallCut+0x4e8>)
 800648c:	edd3 7a00 	vldr	s15, [r3]
 8006490:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80064f8 <interrupt_WallCut+0x4f8>
 8006494:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006498:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80064d4 <interrupt_WallCut+0x4d4>
 800649c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <interrupt_WallCut+0x4e8>)
 80064a2:	ed93 7a00 	vldr	s14, [r3]
 80064a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <interrupt_WallCut+0x4f4>)
 80064ac:	edc3 7a00 	vstr	s15, [r3]
 80064b0:	e054      	b.n	800655c <interrupt_WallCut+0x55c>
 80064b2:	bf00      	nop
 80064b4:	f3af 8000 	nop.w
 80064b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80064bc:	3f50624d 	.word	0x3f50624d
 80064c0:	200002b8 	.word	0x200002b8
 80064c4:	200005f8 	.word	0x200005f8
 80064c8:	200005c0 	.word	0x200005c0
 80064cc:	200005ec 	.word	0x200005ec
 80064d0:	43f68000 	.word	0x43f68000
 80064d4:	00000000 	.word	0x00000000
 80064d8:	200005d8 	.word	0x200005d8
 80064dc:	20000258 	.word	0x20000258
 80064e0:	2000025c 	.word	0x2000025c
 80064e4:	2000045c 	.word	0x2000045c
 80064e8:	200005fc 	.word	0x200005fc
 80064ec:	200005bc 	.word	0x200005bc
 80064f0:	200005ed 	.word	0x200005ed
 80064f4:	200005d4 	.word	0x200005d4
 80064f8:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 80064fc:	4b94      	ldr	r3, [pc, #592]	; (8006750 <interrupt_WallCut+0x750>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3301      	adds	r3, #1
 8006502:	4a93      	ldr	r2, [pc, #588]	; (8006750 <interrupt_WallCut+0x750>)
 8006504:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006506:	4b93      	ldr	r3, [pc, #588]	; (8006754 <interrupt_WallCut+0x754>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fa f844 	bl	8000598 <__aeabi_f2d>
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	4b90      	ldr	r3, [pc, #576]	; (8006758 <interrupt_WallCut+0x758>)
 8006516:	ed93 7a00 	vldr	s14, [r3]
 800651a:	4b90      	ldr	r3, [pc, #576]	; (800675c <interrupt_WallCut+0x75c>)
 800651c:	edd3 7a00 	vldr	s15, [r3]
 8006520:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006524:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006528:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800652c:	ee16 0a90 	vmov	r0, s13
 8006530:	f7fa f832 	bl	8000598 <__aeabi_f2d>
 8006534:	a384      	add	r3, pc, #528	; (adr r3, 8006748 <interrupt_WallCut+0x748>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7fa f885 	bl	8000648 <__aeabi_dmul>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006542:	4620      	mov	r0, r4
 8006544:	4629      	mov	r1, r5
 8006546:	f7f9 fec9 	bl	80002dc <__adddf3>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4610      	mov	r0, r2
 8006550:	4619      	mov	r1, r3
 8006552:	f7fa fb51 	bl	8000bf8 <__aeabi_d2f>
 8006556:	4603      	mov	r3, r0
 8006558:	4a7e      	ldr	r2, [pc, #504]	; (8006754 <interrupt_WallCut+0x754>)
 800655a:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 800655c:	4b80      	ldr	r3, [pc, #512]	; (8006760 <interrupt_WallCut+0x760>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006564:	db5f      	blt.n	8006626 <interrupt_WallCut+0x626>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 8006566:	4b7f      	ldr	r3, [pc, #508]	; (8006764 <interrupt_WallCut+0x764>)
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 800656e:	4b7e      	ldr	r3, [pc, #504]	; (8006768 <interrupt_WallCut+0x768>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a7c      	ldr	r2, [pc, #496]	; (8006768 <interrupt_WallCut+0x768>)
 8006576:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006578:	2000      	movs	r0, #0
 800657a:	f000 fccf 	bl	8006f1c <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 800657e:	4b7b      	ldr	r3, [pc, #492]	; (800676c <interrupt_WallCut+0x76c>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006584:	4b7a      	ldr	r3, [pc, #488]	; (8006770 <interrupt_WallCut+0x770>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7fa f805 	bl	8000598 <__aeabi_f2d>
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
 8006592:	4b71      	ldr	r3, [pc, #452]	; (8006758 <interrupt_WallCut+0x758>)
 8006594:	ed93 7a00 	vldr	s14, [r3]
 8006598:	4b70      	ldr	r3, [pc, #448]	; (800675c <interrupt_WallCut+0x75c>)
 800659a:	edd3 7a00 	vldr	s15, [r3]
 800659e:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 80065a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80065a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065aa:	ee16 0a90 	vmov	r0, s13
 80065ae:	f7f9 fff3 	bl	8000598 <__aeabi_f2d>
 80065b2:	a365      	add	r3, pc, #404	; (adr r3, 8006748 <interrupt_WallCut+0x748>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7fa f846 	bl	8000648 <__aeabi_dmul>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80065c0:	4620      	mov	r0, r4
 80065c2:	4629      	mov	r1, r5
 80065c4:	f7f9 fe8a 	bl	80002dc <__adddf3>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4610      	mov	r0, r2
 80065ce:	4619      	mov	r1, r3
 80065d0:	f7fa fb12 	bl	8000bf8 <__aeabi_d2f>
 80065d4:	4603      	mov	r3, r0
 80065d6:	4a66      	ldr	r2, [pc, #408]	; (8006770 <interrupt_WallCut+0x770>)
 80065d8:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 80065da:	4b66      	ldr	r3, [pc, #408]	; (8006774 <interrupt_WallCut+0x774>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	f040 812b 	bne.w	800683a <interrupt_WallCut+0x83a>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 80065e4:	4b64      	ldr	r3, [pc, #400]	; (8006778 <interrupt_WallCut+0x778>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7f9 ffd5 	bl	8000598 <__aeabi_f2d>
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	4b62      	ldr	r3, [pc, #392]	; (800677c <interrupt_WallCut+0x77c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7f9 ffce 	bl	8000598 <__aeabi_f2d>
 80065fc:	a352      	add	r3, pc, #328	; (adr r3, 8006748 <interrupt_WallCut+0x748>)
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f7fa f821 	bl	8000648 <__aeabi_dmul>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f7f9 fe65 	bl	80002dc <__adddf3>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	f7fa faed 	bl	8000bf8 <__aeabi_d2f>
 800661e:	4603      	mov	r3, r0
 8006620:	4a55      	ldr	r2, [pc, #340]	; (8006778 <interrupt_WallCut+0x778>)
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e109      	b.n	800683a <interrupt_WallCut+0x83a>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8006626:	4b51      	ldr	r3, [pc, #324]	; (800676c <interrupt_WallCut+0x76c>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 80ae 	bne.w	800678c <interrupt_WallCut+0x78c>
				for (int i = 0; i <= 19; i++) {
 8006630:	2300      	movs	r3, #0
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	e01f      	b.n	8006676 <interrupt_WallCut+0x676>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006636:	4a52      	ldr	r2, [pc, #328]	; (8006780 <interrupt_WallCut+0x780>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3314      	adds	r3, #20
 800663c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006648:	4b46      	ldr	r3, [pc, #280]	; (8006764 <interrupt_WallCut+0x764>)
 800664a:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 800664e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006656:	dd0b      	ble.n	8006670 <interrupt_WallCut+0x670>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006658:	4a49      	ldr	r2, [pc, #292]	; (8006780 <interrupt_WallCut+0x780>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3314      	adds	r3, #20
 800665e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 800666a:	4b3e      	ldr	r3, [pc, #248]	; (8006764 <interrupt_WallCut+0x764>)
 800666c:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3301      	adds	r3, #1
 8006674:	607b      	str	r3, [r7, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b13      	cmp	r3, #19
 800667a:	dddc      	ble.n	8006636 <interrupt_WallCut+0x636>
					}
				}
				NoWallCountL45slant = 0;
 800667c:	4b3a      	ldr	r3, [pc, #232]	; (8006768 <interrupt_WallCut+0x768>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006682:	4b3a      	ldr	r3, [pc, #232]	; (800676c <interrupt_WallCut+0x76c>)
 8006684:	2201      	movs	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006688:	2001      	movs	r0, #1
 800668a:	f000 fc47 	bl	8006f1c <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 800668e:	4b35      	ldr	r3, [pc, #212]	; (8006764 <interrupt_WallCut+0x764>)
 8006690:	edd3 7a00 	vldr	s15, [r3]
 8006694:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006784 <interrupt_WallCut+0x784>
 8006698:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800669c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a4:	db26      	blt.n	80066f4 <interrupt_WallCut+0x6f4>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80066a6:	4b2f      	ldr	r3, [pc, #188]	; (8006764 <interrupt_WallCut+0x764>)
 80066a8:	edd3 7a00 	vldr	s15, [r3]
 80066ac:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006784 <interrupt_WallCut+0x784>
 80066b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066b4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006788 <interrupt_WallCut+0x788>
 80066b8:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80066bc:	4b29      	ldr	r3, [pc, #164]	; (8006764 <interrupt_WallCut+0x764>)
 80066be:	ed93 7a00 	vldr	s14, [r3]
 80066c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 80066c6:	4b2c      	ldr	r3, [pc, #176]	; (8006778 <interrupt_WallCut+0x778>)
 80066c8:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <interrupt_WallCut+0x764>)
 80066ce:	edd3 7a00 	vldr	s15, [r3]
 80066d2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006784 <interrupt_WallCut+0x784>
 80066d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006788 <interrupt_WallCut+0x788>
 80066de:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80066e2:	4b20      	ldr	r3, [pc, #128]	; (8006764 <interrupt_WallCut+0x764>)
 80066e4:	ed93 7a00 	vldr	s14, [r3]
 80066e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <interrupt_WallCut+0x770>)
 80066ee:	edc3 7a00 	vstr	s15, [r3]
 80066f2:	e09f      	b.n	8006834 <interrupt_WallCut+0x834>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <interrupt_WallCut+0x764>)
 80066f6:	edd3 7a00 	vldr	s15, [r3]
 80066fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006784 <interrupt_WallCut+0x784>
 80066fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006702:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006788 <interrupt_WallCut+0x788>
 8006706:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800670a:	4b16      	ldr	r3, [pc, #88]	; (8006764 <interrupt_WallCut+0x764>)
 800670c:	ed93 7a00 	vldr	s14, [r3]
 8006710:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006714:	4b18      	ldr	r3, [pc, #96]	; (8006778 <interrupt_WallCut+0x778>)
 8006716:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <interrupt_WallCut+0x764>)
 800671c:	edd3 7a00 	vldr	s15, [r3]
 8006720:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006784 <interrupt_WallCut+0x784>
 8006724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006728:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006788 <interrupt_WallCut+0x788>
 800672c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <interrupt_WallCut+0x764>)
 8006732:	ed93 7a00 	vldr	s14, [r3]
 8006736:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <interrupt_WallCut+0x770>)
 800673c:	edc3 7a00 	vstr	s15, [r3]
 8006740:	e078      	b.n	8006834 <interrupt_WallCut+0x834>
 8006742:	bf00      	nop
 8006744:	f3af 8000 	nop.w
 8006748:	d2f1a9fc 	.word	0xd2f1a9fc
 800674c:	3f50624d 	.word	0x3f50624d
 8006750:	200005bc 	.word	0x200005bc
 8006754:	200005d4 	.word	0x200005d4
 8006758:	20000258 	.word	0x20000258
 800675c:	2000025c 	.word	0x2000025c
 8006760:	2000045c 	.word	0x2000045c
 8006764:	20000600 	.word	0x20000600
 8006768:	200005c8 	.word	0x200005c8
 800676c:	200005ee 	.word	0x200005ee
 8006770:	200005e8 	.word	0x200005e8
 8006774:	200005f0 	.word	0x200005f0
 8006778:	200005e0 	.word	0x200005e0
 800677c:	200004d8 	.word	0x200004d8
 8006780:	200002b8 	.word	0x200002b8
 8006784:	455ac000 	.word	0x455ac000
 8006788:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 800678c:	4bac      	ldr	r3, [pc, #688]	; (8006a40 <interrupt_WallCut+0xa40>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	4aab      	ldr	r2, [pc, #684]	; (8006a40 <interrupt_WallCut+0xa40>)
 8006794:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006796:	4bab      	ldr	r3, [pc, #684]	; (8006a44 <interrupt_WallCut+0xa44>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f7f9 fefc 	bl	8000598 <__aeabi_f2d>
 80067a0:	4604      	mov	r4, r0
 80067a2:	460d      	mov	r5, r1
 80067a4:	4ba8      	ldr	r3, [pc, #672]	; (8006a48 <interrupt_WallCut+0xa48>)
 80067a6:	ed93 7a00 	vldr	s14, [r3]
 80067aa:	4ba8      	ldr	r3, [pc, #672]	; (8006a4c <interrupt_WallCut+0xa4c>)
 80067ac:	edd3 7a00 	vldr	s15, [r3]
 80067b0:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 80067b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80067b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067bc:	ee16 0a90 	vmov	r0, s13
 80067c0:	f7f9 feea 	bl	8000598 <__aeabi_f2d>
 80067c4:	a39c      	add	r3, pc, #624	; (adr r3, 8006a38 <interrupt_WallCut+0xa38>)
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	f7f9 ff3d 	bl	8000648 <__aeabi_dmul>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7f9 fd81 	bl	80002dc <__adddf3>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	f7fa fa09 	bl	8000bf8 <__aeabi_d2f>
 80067e6:	4603      	mov	r3, r0
 80067e8:	4a96      	ldr	r2, [pc, #600]	; (8006a44 <interrupt_WallCut+0xa44>)
 80067ea:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 80067ec:	4b98      	ldr	r3, [pc, #608]	; (8006a50 <interrupt_WallCut+0xa50>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d11f      	bne.n	8006834 <interrupt_WallCut+0x834>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 80067f4:	4b97      	ldr	r3, [pc, #604]	; (8006a54 <interrupt_WallCut+0xa54>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7f9 fecd 	bl	8000598 <__aeabi_f2d>
 80067fe:	4604      	mov	r4, r0
 8006800:	460d      	mov	r5, r1
 8006802:	4b95      	ldr	r3, [pc, #596]	; (8006a58 <interrupt_WallCut+0xa58>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fec6 	bl	8000598 <__aeabi_f2d>
 800680c:	a38a      	add	r3, pc, #552	; (adr r3, 8006a38 <interrupt_WallCut+0xa38>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f7f9 ff19 	bl	8000648 <__aeabi_dmul>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7f9 fd5d 	bl	80002dc <__adddf3>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	f7fa f9e5 	bl	8000bf8 <__aeabi_d2f>
 800682e:	4603      	mov	r3, r0
 8006830:	4a88      	ldr	r2, [pc, #544]	; (8006a54 <interrupt_WallCut+0xa54>)
 8006832:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006834:	4b86      	ldr	r3, [pc, #536]	; (8006a50 <interrupt_WallCut+0xa50>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 800683a:	4b88      	ldr	r3, [pc, #544]	; (8006a5c <interrupt_WallCut+0xa5c>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006842:	db6a      	blt.n	800691a <interrupt_WallCut+0x91a>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006844:	4b86      	ldr	r3, [pc, #536]	; (8006a60 <interrupt_WallCut+0xa60>)
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 800684c:	4b85      	ldr	r3, [pc, #532]	; (8006a64 <interrupt_WallCut+0xa64>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	4a84      	ldr	r2, [pc, #528]	; (8006a64 <interrupt_WallCut+0xa64>)
 8006854:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006856:	2000      	movs	r0, #0
 8006858:	f000 fb4e 	bl	8006ef8 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 800685c:	4b82      	ldr	r3, [pc, #520]	; (8006a68 <interrupt_WallCut+0xa68>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006862:	4b82      	ldr	r3, [pc, #520]	; (8006a6c <interrupt_WallCut+0xa6c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7f9 fe96 	bl	8000598 <__aeabi_f2d>
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	4b75      	ldr	r3, [pc, #468]	; (8006a48 <interrupt_WallCut+0xa48>)
 8006872:	ed93 7a00 	vldr	s14, [r3]
 8006876:	4b75      	ldr	r3, [pc, #468]	; (8006a4c <interrupt_WallCut+0xa4c>)
 8006878:	edd3 7a00 	vldr	s15, [r3]
 800687c:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006880:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006884:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006888:	ee16 0a90 	vmov	r0, s13
 800688c:	f7f9 fe84 	bl	8000598 <__aeabi_f2d>
 8006890:	a369      	add	r3, pc, #420	; (adr r3, 8006a38 <interrupt_WallCut+0xa38>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 fed7 	bl	8000648 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7f9 fd1b 	bl	80002dc <__adddf3>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	f7fa f9a3 	bl	8000bf8 <__aeabi_d2f>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4a6d      	ldr	r2, [pc, #436]	; (8006a6c <interrupt_WallCut+0xa6c>)
 80068b6:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 80068b8:	4b6d      	ldr	r3, [pc, #436]	; (8006a70 <interrupt_WallCut+0xa70>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f040 81a4 	bne.w	8006c0a <interrupt_WallCut+0xc0a>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 80068c2:	4b6c      	ldr	r3, [pc, #432]	; (8006a74 <interrupt_WallCut+0xa74>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7f9 fe66 	bl	8000598 <__aeabi_f2d>
 80068cc:	4604      	mov	r4, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	4b5d      	ldr	r3, [pc, #372]	; (8006a48 <interrupt_WallCut+0xa48>)
 80068d2:	ed93 7a00 	vldr	s14, [r3]
 80068d6:	4b5d      	ldr	r3, [pc, #372]	; (8006a4c <interrupt_WallCut+0xa4c>)
 80068d8:	edd3 7a00 	vldr	s15, [r3]
 80068dc:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 80068e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80068e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068e8:	ee16 0a90 	vmov	r0, s13
 80068ec:	f7f9 fe54 	bl	8000598 <__aeabi_f2d>
 80068f0:	a351      	add	r3, pc, #324	; (adr r3, 8006a38 <interrupt_WallCut+0xa38>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 fea7 	bl	8000648 <__aeabi_dmul>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f7f9 fceb 	bl	80002dc <__adddf3>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	f7fa f973 	bl	8000bf8 <__aeabi_d2f>
 8006912:	4603      	mov	r3, r0
 8006914:	4a57      	ldr	r2, [pc, #348]	; (8006a74 <interrupt_WallCut+0xa74>)
 8006916:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006918:	e177      	b.n	8006c0a <interrupt_WallCut+0xc0a>
			if (NoWallCountR45slant_flag == 0) {
 800691a:	4b53      	ldr	r3, [pc, #332]	; (8006a68 <interrupt_WallCut+0xa68>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 80b0 	bne.w	8006a84 <interrupt_WallCut+0xa84>
				for (int i = 0; i <= 19; i++) {
 8006924:	2300      	movs	r3, #0
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	e01f      	b.n	800696a <interrupt_WallCut+0x96a>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 800692a:	4a53      	ldr	r2, [pc, #332]	; (8006a78 <interrupt_WallCut+0xa78>)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	333c      	adds	r3, #60	; 0x3c
 8006930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006934:	ee07 3a90 	vmov	s15, r3
 8006938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800693c:	4b48      	ldr	r3, [pc, #288]	; (8006a60 <interrupt_WallCut+0xa60>)
 800693e:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800694a:	dd0b      	ble.n	8006964 <interrupt_WallCut+0x964>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 800694c:	4a4a      	ldr	r2, [pc, #296]	; (8006a78 <interrupt_WallCut+0xa78>)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	333c      	adds	r3, #60	; 0x3c
 8006952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 800695e:	4b40      	ldr	r3, [pc, #256]	; (8006a60 <interrupt_WallCut+0xa60>)
 8006960:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b13      	cmp	r3, #19
 800696e:	dddc      	ble.n	800692a <interrupt_WallCut+0x92a>
				NoWallCountR45slant = 0;
 8006970:	4b3c      	ldr	r3, [pc, #240]	; (8006a64 <interrupt_WallCut+0xa64>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006976:	4b3c      	ldr	r3, [pc, #240]	; (8006a68 <interrupt_WallCut+0xa68>)
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 800697c:	2001      	movs	r0, #1
 800697e:	f000 fabb 	bl	8006ef8 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006982:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <interrupt_WallCut+0xa60>)
 8006984:	edd3 7a00 	vldr	s15, [r3]
 8006988:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006a7c <interrupt_WallCut+0xa7c>
 800698c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006998:	db26      	blt.n	80069e8 <interrupt_WallCut+0x9e8>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 800699a:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <interrupt_WallCut+0xa60>)
 800699c:	edd3 7a00 	vldr	s15, [r3]
 80069a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006a7c <interrupt_WallCut+0xa7c>
 80069a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069a8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006a80 <interrupt_WallCut+0xa80>
 80069ac:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 80069b0:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <interrupt_WallCut+0xa60>)
 80069b2:	ed93 7a00 	vldr	s14, [r3]
 80069b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 80069ba:	4b2e      	ldr	r3, [pc, #184]	; (8006a74 <interrupt_WallCut+0xa74>)
 80069bc:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 80069c0:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <interrupt_WallCut+0xa60>)
 80069c2:	edd3 7a00 	vldr	s15, [r3]
 80069c6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006a7c <interrupt_WallCut+0xa7c>
 80069ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069ce:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006a80 <interrupt_WallCut+0xa80>
 80069d2:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 80069d6:	4b22      	ldr	r3, [pc, #136]	; (8006a60 <interrupt_WallCut+0xa60>)
 80069d8:	ed93 7a00 	vldr	s14, [r3]
 80069dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 80069e0:	4b22      	ldr	r3, [pc, #136]	; (8006a6c <interrupt_WallCut+0xa6c>)
 80069e2:	edc3 7a00 	vstr	s15, [r3]
 80069e6:	e0ac      	b.n	8006b42 <interrupt_WallCut+0xb42>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 80069e8:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <interrupt_WallCut+0xa60>)
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006a7c <interrupt_WallCut+0xa7c>
 80069f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069f6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006a80 <interrupt_WallCut+0xa80>
 80069fa:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 80069fe:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <interrupt_WallCut+0xa60>)
 8006a00:	ed93 7a00 	vldr	s14, [r3]
 8006a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <interrupt_WallCut+0xa74>)
 8006a0a:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a0e:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <interrupt_WallCut+0xa60>)
 8006a10:	edd3 7a00 	vldr	s15, [r3]
 8006a14:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006a7c <interrupt_WallCut+0xa7c>
 8006a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a1c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006a80 <interrupt_WallCut+0xa80>
 8006a20:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a24:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <interrupt_WallCut+0xa60>)
 8006a26:	ed93 7a00 	vldr	s14, [r3]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <interrupt_WallCut+0xa6c>)
 8006a30:	edc3 7a00 	vstr	s15, [r3]
 8006a34:	e085      	b.n	8006b42 <interrupt_WallCut+0xb42>
 8006a36:	bf00      	nop
 8006a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a3c:	3f50624d 	.word	0x3f50624d
 8006a40:	200005c8 	.word	0x200005c8
 8006a44:	200005e8 	.word	0x200005e8
 8006a48:	20000258 	.word	0x20000258
 8006a4c:	2000025c 	.word	0x2000025c
 8006a50:	200005f0 	.word	0x200005f0
 8006a54:	200005e0 	.word	0x200005e0
 8006a58:	200004d8 	.word	0x200004d8
 8006a5c:	2000045c 	.word	0x2000045c
 8006a60:	20000604 	.word	0x20000604
 8006a64:	200005c4 	.word	0x200005c4
 8006a68:	200005ef 	.word	0x200005ef
 8006a6c:	200005e4 	.word	0x200005e4
 8006a70:	200005f1 	.word	0x200005f1
 8006a74:	200005dc 	.word	0x200005dc
 8006a78:	200002b8 	.word	0x200002b8
 8006a7c:	455ac000 	.word	0x455ac000
 8006a80:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006a84:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <interrupt_WallCut+0xc20>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a65      	ldr	r2, [pc, #404]	; (8006c20 <interrupt_WallCut+0xc20>)
 8006a8c:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006a8e:	4b65      	ldr	r3, [pc, #404]	; (8006c24 <interrupt_WallCut+0xc24>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7f9 fd80 	bl	8000598 <__aeabi_f2d>
 8006a98:	4604      	mov	r4, r0
 8006a9a:	460d      	mov	r5, r1
 8006a9c:	4b62      	ldr	r3, [pc, #392]	; (8006c28 <interrupt_WallCut+0xc28>)
 8006a9e:	ed93 7a00 	vldr	s14, [r3]
 8006aa2:	4b62      	ldr	r3, [pc, #392]	; (8006c2c <interrupt_WallCut+0xc2c>)
 8006aa4:	edd3 7a00 	vldr	s15, [r3]
 8006aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006aac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ab0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ab4:	ee16 0a90 	vmov	r0, s13
 8006ab8:	f7f9 fd6e 	bl	8000598 <__aeabi_f2d>
 8006abc:	a356      	add	r3, pc, #344	; (adr r3, 8006c18 <interrupt_WallCut+0xc18>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fdc1 	bl	8000648 <__aeabi_dmul>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 fc05 	bl	80002dc <__adddf3>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f7fa f88d 	bl	8000bf8 <__aeabi_d2f>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4a50      	ldr	r2, [pc, #320]	; (8006c24 <interrupt_WallCut+0xc24>)
 8006ae2:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006ae4:	4b52      	ldr	r3, [pc, #328]	; (8006c30 <interrupt_WallCut+0xc30>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d12a      	bne.n	8006b42 <interrupt_WallCut+0xb42>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006aec:	4b51      	ldr	r3, [pc, #324]	; (8006c34 <interrupt_WallCut+0xc34>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7f9 fd51 	bl	8000598 <__aeabi_f2d>
 8006af6:	4604      	mov	r4, r0
 8006af8:	460d      	mov	r5, r1
 8006afa:	4b4b      	ldr	r3, [pc, #300]	; (8006c28 <interrupt_WallCut+0xc28>)
 8006afc:	ed93 7a00 	vldr	s14, [r3]
 8006b00:	4b4a      	ldr	r3, [pc, #296]	; (8006c2c <interrupt_WallCut+0xc2c>)
 8006b02:	edd3 7a00 	vldr	s15, [r3]
 8006b06:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006b0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b12:	ee16 0a90 	vmov	r0, s13
 8006b16:	f7f9 fd3f 	bl	8000598 <__aeabi_f2d>
 8006b1a:	a33f      	add	r3, pc, #252	; (adr r3, 8006c18 <interrupt_WallCut+0xc18>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fd92 	bl	8000648 <__aeabi_dmul>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fbd6 	bl	80002dc <__adddf3>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4610      	mov	r0, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	f7fa f85e 	bl	8000bf8 <__aeabi_d2f>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4a3d      	ldr	r2, [pc, #244]	; (8006c34 <interrupt_WallCut+0xc34>)
 8006b40:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006b42:	4b3b      	ldr	r3, [pc, #236]	; (8006c30 <interrupt_WallCut+0xc30>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]
}
 8006b48:	e05f      	b.n	8006c0a <interrupt_WallCut+0xc0a>
		NoWallCountL90 = 0;
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	; (8006c38 <interrupt_WallCut+0xc38>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006b50:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <interrupt_WallCut+0xc3c>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006b56:	4b3a      	ldr	r3, [pc, #232]	; (8006c40 <interrupt_WallCut+0xc40>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006b5c:	4b39      	ldr	r3, [pc, #228]	; (8006c44 <interrupt_WallCut+0xc44>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006b62:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <interrupt_WallCut+0xc48>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006b68:	4b2d      	ldr	r3, [pc, #180]	; (8006c20 <interrupt_WallCut+0xc20>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006b6e:	4b37      	ldr	r3, [pc, #220]	; (8006c4c <interrupt_WallCut+0xc4c>)
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006b76:	4b36      	ldr	r3, [pc, #216]	; (8006c50 <interrupt_WallCut+0xc50>)
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006b7e:	4b35      	ldr	r3, [pc, #212]	; (8006c54 <interrupt_WallCut+0xc54>)
 8006b80:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006b84:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006b86:	4b34      	ldr	r3, [pc, #208]	; (8006c58 <interrupt_WallCut+0xc58>)
 8006b88:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006b8c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006b8e:	4b33      	ldr	r3, [pc, #204]	; (8006c5c <interrupt_WallCut+0xc5c>)
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006b96:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <interrupt_WallCut+0xc34>)
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006b9e:	4b30      	ldr	r3, [pc, #192]	; (8006c60 <interrupt_WallCut+0xc60>)
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	; (8006c24 <interrupt_WallCut+0xc24>)
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006bae:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <interrupt_WallCut+0xc64>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006bb4:	4b2c      	ldr	r3, [pc, #176]	; (8006c68 <interrupt_WallCut+0xc68>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006bba:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <interrupt_WallCut+0xc6c>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <interrupt_WallCut+0xc70>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006bc6:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <interrupt_WallCut+0xc74>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006bcc:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <interrupt_WallCut+0xc30>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006bd2:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <interrupt_WallCut+0xc78>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006bd8:	4b28      	ldr	r3, [pc, #160]	; (8006c7c <interrupt_WallCut+0xc7c>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006bde:	4b28      	ldr	r3, [pc, #160]	; (8006c80 <interrupt_WallCut+0xc80>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006be4:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <interrupt_WallCut+0xc80>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <interrupt_WallCut+0xc84>)
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006bf2:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <interrupt_WallCut+0xc88>)
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <interrupt_WallCut+0xc8c>)
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <interrupt_WallCut+0xc90>)
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
}
 8006c0a:	bf00      	nop
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bdb0      	pop	{r4, r5, r7, pc}
 8006c12:	bf00      	nop
 8006c14:	f3af 8000 	nop.w
 8006c18:	d2f1a9fc 	.word	0xd2f1a9fc
 8006c1c:	3f50624d 	.word	0x3f50624d
 8006c20:	200005c4 	.word	0x200005c4
 8006c24:	200005e4 	.word	0x200005e4
 8006c28:	20000258 	.word	0x20000258
 8006c2c:	2000025c 	.word	0x2000025c
 8006c30:	200005f1 	.word	0x200005f1
 8006c34:	200005dc 	.word	0x200005dc
 8006c38:	200005b8 	.word	0x200005b8
 8006c3c:	200005b4 	.word	0x200005b4
 8006c40:	200005c0 	.word	0x200005c0
 8006c44:	200005bc 	.word	0x200005bc
 8006c48:	200005c8 	.word	0x200005c8
 8006c4c:	200005d0 	.word	0x200005d0
 8006c50:	200005cc 	.word	0x200005cc
 8006c54:	200005d8 	.word	0x200005d8
 8006c58:	200005d4 	.word	0x200005d4
 8006c5c:	200005e0 	.word	0x200005e0
 8006c60:	200005e8 	.word	0x200005e8
 8006c64:	200005ec 	.word	0x200005ec
 8006c68:	200005ed 	.word	0x200005ed
 8006c6c:	200005ee 	.word	0x200005ee
 8006c70:	200005ef 	.word	0x200005ef
 8006c74:	200005f0 	.word	0x200005f0
 8006c78:	200005f2 	.word	0x200005f2
 8006c7c:	200005f3 	.word	0x200005f3
 8006c80:	200005f4 	.word	0x200005f4
 8006c84:	200005f8 	.word	0x200005f8
 8006c88:	200005fc 	.word	0x200005fc
 8006c8c:	20000600 	.word	0x20000600
 8006c90:	20000604 	.word	0x20000604

08006c94 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006caa:	f014 ff79 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	2140      	movs	r1, #64	; 0x40
 8006cc8:	4803      	ldr	r0, [pc, #12]	; (8006cd8 <pl_yellow_LED_3+0x20>)
 8006cca:	f014 ff69 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	48000800 	.word	0x48000800

08006cdc <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006cee:	4803      	ldr	r0, [pc, #12]	; (8006cfc <pl_yellow_LED_6+0x20>)
 8006cf0:	f014 ff56 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	48000400 	.word	0x48000400

08006d00 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d12:	4803      	ldr	r0, [pc, #12]	; (8006d20 <pl_yellow_LED_8+0x20>)
 8006d14:	f014 ff44 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	48000400 	.word	0x48000400

08006d24 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d32:	f014 ff35 	bl	801bba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006d36:	2200      	movs	r2, #0
 8006d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d40:	f014 ff2e 	bl	801bba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006d44:	2200      	movs	r2, #0
 8006d46:	2140      	movs	r1, #64	; 0x40
 8006d48:	4811      	ldr	r0, [pc, #68]	; (8006d90 <pl_yellow_LED_off+0x6c>)
 8006d4a:	f014 ff29 	bl	801bba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d54:	480f      	ldr	r0, [pc, #60]	; (8006d94 <pl_yellow_LED_off+0x70>)
 8006d56:	f014 ff23 	bl	801bba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d60:	480c      	ldr	r0, [pc, #48]	; (8006d94 <pl_yellow_LED_off+0x70>)
 8006d62:	f014 ff1d 	bl	801bba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006d66:	2200      	movs	r2, #0
 8006d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d6c:	4809      	ldr	r0, [pc, #36]	; (8006d94 <pl_yellow_LED_off+0x70>)
 8006d6e:	f014 ff17 	bl	801bba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006d72:	2200      	movs	r2, #0
 8006d74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d78:	4806      	ldr	r0, [pc, #24]	; (8006d94 <pl_yellow_LED_off+0x70>)
 8006d7a:	f014 ff11 	bl	801bba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d84:	4803      	ldr	r0, [pc, #12]	; (8006d94 <pl_yellow_LED_off+0x70>)
 8006d86:	f014 ff0b 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006d8a:	bf00      	nop
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	48000800 	.word	0x48000800
 8006d94:	48000400 	.word	0x48000400

08006d98 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006de0:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006de8:	2201      	movs	r2, #1
 8006dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006df2:	f014 fed5 	bl	801bba0 <HAL_GPIO_WritePin>
 8006df6:	e006      	b.n	8006e06 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e02:	f014 fecd 	bl	801bba0 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e16:	f014 fec3 	bl	801bba0 <HAL_GPIO_WritePin>
 8006e1a:	e006      	b.n	8006e2a <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e26:	f014 febb 	bl	801bba0 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8006e2a:	7b7b      	ldrb	r3, [r7, #13]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8006e30:	2201      	movs	r2, #1
 8006e32:	2140      	movs	r1, #64	; 0x40
 8006e34:	482e      	ldr	r0, [pc, #184]	; (8006ef0 <pl_yellow_LED_count+0x158>)
 8006e36:	f014 feb3 	bl	801bba0 <HAL_GPIO_WritePin>
 8006e3a:	e004      	b.n	8006e46 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2140      	movs	r1, #64	; 0x40
 8006e40:	482b      	ldr	r0, [pc, #172]	; (8006ef0 <pl_yellow_LED_count+0x158>)
 8006e42:	f014 fead 	bl	801bba0 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8006e46:	7b3b      	ldrb	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d006      	beq.n	8006e5a <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e52:	4828      	ldr	r0, [pc, #160]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006e54:	f014 fea4 	bl	801bba0 <HAL_GPIO_WritePin>
 8006e58:	e005      	b.n	8006e66 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e60:	4824      	ldr	r0, [pc, #144]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006e62:	f014 fe9d 	bl	801bba0 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8006e66:	7afb      	ldrb	r3, [r7, #11]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e72:	4820      	ldr	r0, [pc, #128]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006e74:	f014 fe94 	bl	801bba0 <HAL_GPIO_WritePin>
 8006e78:	e005      	b.n	8006e86 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e80:	481c      	ldr	r0, [pc, #112]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006e82:	f014 fe8d 	bl	801bba0 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8006e86:	7abb      	ldrb	r3, [r7, #10]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e92:	4818      	ldr	r0, [pc, #96]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006e94:	f014 fe84 	bl	801bba0 <HAL_GPIO_WritePin>
 8006e98:	e005      	b.n	8006ea6 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ea0:	4814      	ldr	r0, [pc, #80]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006ea2:	f014 fe7d 	bl	801bba0 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8006ea6:	7a7b      	ldrb	r3, [r7, #9]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d006      	beq.n	8006eba <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8006eac:	2201      	movs	r2, #1
 8006eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006eb2:	4810      	ldr	r0, [pc, #64]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006eb4:	f014 fe74 	bl	801bba0 <HAL_GPIO_WritePin>
 8006eb8:	e005      	b.n	8006ec6 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ec0:	480c      	ldr	r0, [pc, #48]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006ec2:	f014 fe6d 	bl	801bba0 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8006ec6:	7a3b      	ldrb	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d006      	beq.n	8006eda <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ed2:	4808      	ldr	r0, [pc, #32]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006ed4:	f014 fe64 	bl	801bba0 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8006ed8:	e005      	b.n	8006ee6 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006eda:	2200      	movs	r2, #0
 8006edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ee0:	4804      	ldr	r0, [pc, #16]	; (8006ef4 <pl_yellow_LED_count+0x15c>)
 8006ee2:	f014 fe5d 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	48000800 	.word	0x48000800
 8006ef4:	48000400 	.word	0x48000400

08006ef8 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f0a:	4803      	ldr	r0, [pc, #12]	; (8006f18 <pl_r_blue_LED+0x20>)
 8006f0c:	f014 fe48 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	48000800 	.word	0x48000800

08006f1c <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2104      	movs	r1, #4
 8006f2c:	4803      	ldr	r0, [pc, #12]	; (8006f3c <pl_l_blue_LED+0x20>)
 8006f2e:	f014 fe37 	bl	801bba0 <HAL_GPIO_WritePin>
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	48000400 	.word	0x48000400

08006f40 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	460a      	mov	r2, r1
 8006f4a:	80fb      	strh	r3, [r7, #6]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006f50:	2200      	movs	r2, #0
 8006f52:	2110      	movs	r1, #16
 8006f54:	4833      	ldr	r0, [pc, #204]	; (8007024 <encoder_read_byte_R+0xe4>)
 8006f56:	f014 fe23 	bl	801bba0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f60:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e00d      	b.n	8006f88 <encoder_read_byte_R+0x48>
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	fa42 f303 	asr.w	r3, r2, r3
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	8bfb      	ldrh	r3, [r7, #30]
 8006f7e:	4413      	add	r3, r2
 8006f80:	83fb      	strh	r3, [r7, #30]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	3301      	adds	r3, #1
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b0e      	cmp	r3, #14
 8006f8c:	ddee      	ble.n	8006f6c <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8006f8e:	8bfb      	ldrh	r3, [r7, #30]
 8006f90:	03db      	lsls	r3, r3, #15
 8006f92:	b21a      	sxth	r2, r3
 8006f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	b21b      	sxth	r3, r3
 8006f9c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8006fae:	f107 0110 	add.w	r1, r7, #16
 8006fb2:	2364      	movs	r3, #100	; 0x64
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	481c      	ldr	r0, [pc, #112]	; (8007028 <encoder_read_byte_R+0xe8>)
 8006fb8:	f015 fed5 	bl	801cd66 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2110      	movs	r1, #16
 8006fc0:	4818      	ldr	r0, [pc, #96]	; (8007024 <encoder_read_byte_R+0xe4>)
 8006fc2:	f014 fded 	bl	801bba0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e002      	b.n	8006fd2 <encoder_read_byte_R+0x92>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b95      	cmp	r3, #149	; 0x95
 8006fd6:	ddf9      	ble.n	8006fcc <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2110      	movs	r1, #16
 8006fdc:	4811      	ldr	r0, [pc, #68]	; (8007024 <encoder_read_byte_R+0xe4>)
 8006fde:	f014 fddf 	bl	801bba0 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8006fe2:	88bb      	ldrh	r3, [r7, #4]
 8006fe4:	0a1b      	lsrs	r3, r3, #8
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8006fec:	88bb      	ldrh	r3, [r7, #4]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8006ff2:	f107 010c 	add.w	r1, r7, #12
 8006ff6:	2364      	movs	r3, #100	; 0x64
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	480b      	ldr	r0, [pc, #44]	; (8007028 <encoder_read_byte_R+0xe8>)
 8006ffc:	f016 f821 	bl	801d042 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007000:	7b3b      	ldrb	r3, [r7, #12]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	b21a      	sxth	r2, r3
 8007006:	7b7b      	ldrb	r3, [r7, #13]
 8007008:	b21b      	sxth	r3, r3
 800700a:	4313      	orrs	r3, r2
 800700c:	b21b      	sxth	r3, r3
 800700e:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007010:	2201      	movs	r2, #1
 8007012:	2110      	movs	r1, #16
 8007014:	4803      	ldr	r0, [pc, #12]	; (8007024 <encoder_read_byte_R+0xe4>)
 8007016:	f014 fdc3 	bl	801bba0 <HAL_GPIO_WritePin>

	return data;
 800701a:	88bb      	ldrh	r3, [r7, #4]

}
 800701c:	4618      	mov	r0, r3
 800701e:	3720      	adds	r7, #32
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	48000400 	.word	0x48000400
 8007028:	2000ee34 	.word	0x2000ee34

0800702c <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	460a      	mov	r2, r1
 8007036:	80fb      	strh	r3, [r7, #6]
 8007038:	4613      	mov	r3, r2
 800703a:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800703c:	2200      	movs	r2, #0
 800703e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007046:	f014 fdab 	bl	801bba0 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007050:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007052:	2300      	movs	r3, #0
 8007054:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	e00d      	b.n	8007078 <encoder_read_byte_L+0x4c>
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	fa42 f303 	asr.w	r3, r2, r3
 8007064:	b29b      	uxth	r3, r3
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	8bfb      	ldrh	r3, [r7, #30]
 800706e:	4413      	add	r3, r2
 8007070:	83fb      	strh	r3, [r7, #30]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	3301      	adds	r3, #1
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b0e      	cmp	r3, #14
 800707c:	ddee      	ble.n	800705c <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 800707e:	8bfb      	ldrh	r3, [r7, #30]
 8007080:	03db      	lsls	r3, r3, #15
 8007082:	b21a      	sxth	r2, r3
 8007084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007088:	4313      	orrs	r3, r2
 800708a:	b21b      	sxth	r3, r3
 800708c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	b29b      	uxth	r3, r3
 8007094:	b2db      	uxtb	r3, r3
 8007096:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 800709e:	f107 0110 	add.w	r1, r7, #16
 80070a2:	2364      	movs	r3, #100	; 0x64
 80070a4:	2202      	movs	r2, #2
 80070a6:	481e      	ldr	r0, [pc, #120]	; (8007120 <encoder_read_byte_L+0xf4>)
 80070a8:	f015 fe5d 	bl	801cd66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80070ac:	2201      	movs	r2, #1
 80070ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070b6:	f014 fd73 	bl	801bba0 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e002      	b.n	80070c6 <encoder_read_byte_L+0x9a>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	3301      	adds	r3, #1
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b95      	cmp	r3, #149	; 0x95
 80070ca:	ddf9      	ble.n	80070c0 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80070cc:	2200      	movs	r2, #0
 80070ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070d6:	f014 fd63 	bl	801bba0 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 80070da:	88bb      	ldrh	r3, [r7, #4]
 80070dc:	0a1b      	lsrs	r3, r3, #8
 80070de:	b29b      	uxth	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 80070e4:	88bb      	ldrh	r3, [r7, #4]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 80070ea:	f107 010c 	add.w	r1, r7, #12
 80070ee:	2364      	movs	r3, #100	; 0x64
 80070f0:	2202      	movs	r2, #2
 80070f2:	480b      	ldr	r0, [pc, #44]	; (8007120 <encoder_read_byte_L+0xf4>)
 80070f4:	f015 ffa5 	bl	801d042 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 80070f8:	7b3b      	ldrb	r3, [r7, #12]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	b21a      	sxth	r2, r3
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	b21b      	sxth	r3, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	b21b      	sxth	r3, r3
 8007106:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007108:	2201      	movs	r2, #1
 800710a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800710e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007112:	f014 fd45 	bl	801bba0 <HAL_GPIO_WritePin>

	return data;
 8007116:	88bb      	ldrh	r3, [r7, #4]

}
 8007118:	4618      	mov	r0, r3
 800711a:	3720      	adds	r7, #32
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	2000ee34 	.word	0x2000ee34

08007124 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007128:	2100      	movs	r1, #0
 800712a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800712e:	f7ff ff07 	bl	8006f40 <encoder_read_byte_R>
 8007132:	4603      	mov	r3, r0
 8007134:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007140:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007188 <AS5047_DataUpdate+0x64>
 8007144:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007148:	eddf 6a10 	vldr	s13, [pc, #64]	; 800718c <AS5047_DataUpdate+0x68>
 800714c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007150:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <AS5047_DataUpdate+0x6c>)
 8007152:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007156:	2100      	movs	r1, #0
 8007158:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800715c:	f7ff ff66 	bl	800702c <encoder_read_byte_L>
 8007160:	4603      	mov	r3, r0
 8007162:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800716e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007188 <AS5047_DataUpdate+0x64>
 8007172:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007176:	eddf 6a05 	vldr	s13, [pc, #20]	; 800718c <AS5047_DataUpdate+0x68>
 800717a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <AS5047_DataUpdate+0x70>)
 8007180:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}
 8007188:	43b40000 	.word	0x43b40000
 800718c:	46800000 	.word	0x46800000
 8007190:	200006d8 	.word	0x200006d8
 8007194:	200006dc 	.word	0x200006dc

08007198 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
		  record_out();
 800719c:	f000 f91a 	bl	80073d4 <record_out>
		  maze_display();
 80071a0:	f00d fd9c 	bl	8014cdc <maze_display>
		  flash_record_init();
 80071a4:	f000 f9c2 	bl	800752c <flash_record_init>
		  record_in();
 80071a8:	f000 f858 	bl	800725c <record_in>
}
 80071ac:	bf00      	nop
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <eraseFlash>:


void eraseFlash( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 80071ba:	2301      	movs	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 80071be:	23fe      	movs	r3, #254	; 0xfe
 80071c0:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 80071ca:	1d3a      	adds	r2, r7, #4
 80071cc:	f107 0308 	add.w	r3, r7, #8
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f014 fa3c 	bl	801b650 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 80071e0:	b5b0      	push	{r4, r5, r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 80071ee:	f014 f943 	bl	801b478 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <writeFlash+0x1c>
 80071f8:	f7ff ffda 	bl	80071b0 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e00f      	b.n	8007222 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	17da      	asrs	r2, r3, #31
 8007206:	461c      	mov	r4, r3
 8007208:	4615      	mov	r5, r2
 800720a:	4622      	mov	r2, r4
 800720c:	462b      	mov	r3, r5
 800720e:	6979      	ldr	r1, [r7, #20]
 8007210:	2000      	movs	r0, #0
 8007212:	f014 f8db 	bl	801b3cc <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3320      	adds	r3, #32
 800721a:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3308      	adds	r3, #8
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	429a      	cmp	r2, r3
 800722c:	d3e9      	bcc.n	8007202 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 800722e:	f014 f945 	bl	801b4bc <HAL_FLASH_Lock>

}
 8007232:	bf00      	nop
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bdb0      	pop	{r4, r5, r7, pc}

0800723a <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4619      	mov	r1, r3
 800724c:	68b8      	ldr	r0, [r7, #8]
 800724e:	f018 fdbd 	bl	801fdcc <memcpy>

}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <record_in>:


void record_in(void) {
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
	int t = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007266:	4b58      	ldr	r3, [pc, #352]	; (80073c8 <record_in+0x16c>)
 8007268:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 800726a:	e017      	b.n	800729c <record_in+0x40>
		record.row[t] = wall.row[t];
 800726c:	4a57      	ldr	r2, [pc, #348]	; (80073cc <record_in+0x170>)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007274:	4a56      	ldr	r2, [pc, #344]	; (80073d0 <record_in+0x174>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 800727c:	4a53      	ldr	r2, [pc, #332]	; (80073cc <record_in+0x170>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	330c      	adds	r3, #12
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	4413      	add	r3, r2
 8007286:	88d9      	ldrh	r1, [r3, #6]
 8007288:	4a51      	ldr	r2, [pc, #324]	; (80073d0 <record_in+0x174>)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	330c      	adds	r3, #12
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	460a      	mov	r2, r1
 8007294:	80da      	strh	r2, [r3, #6]
		t++;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3301      	adds	r3, #1
 800729a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b0e      	cmp	r3, #14
 80072a0:	dde4      	ble.n	800726c <record_in+0x10>
	}
	t = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80072a6:	e01c      	b.n	80072e2 <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 80072a8:	4a48      	ldr	r2, [pc, #288]	; (80073cc <record_in+0x170>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	331c      	adds	r3, #28
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	4413      	add	r3, r2
 80072b2:	8899      	ldrh	r1, [r3, #4]
 80072b4:	4a46      	ldr	r2, [pc, #280]	; (80073d0 <record_in+0x174>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	331c      	adds	r3, #28
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	4413      	add	r3, r2
 80072be:	460a      	mov	r2, r1
 80072c0:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 80072c2:	4a42      	ldr	r2, [pc, #264]	; (80073cc <record_in+0x170>)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	332c      	adds	r3, #44	; 0x2c
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4413      	add	r3, r2
 80072cc:	8859      	ldrh	r1, [r3, #2]
 80072ce:	4a40      	ldr	r2, [pc, #256]	; (80073d0 <record_in+0x174>)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	332c      	adds	r3, #44	; 0x2c
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	460a      	mov	r2, r1
 80072da:	805a      	strh	r2, [r3, #2]
		t++;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3301      	adds	r3, #1
 80072e0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b0e      	cmp	r3, #14
 80072e6:	dddf      	ble.n	80072a8 <record_in+0x4c>
	}
	t = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 80072ec:	4b38      	ldr	r3, [pc, #224]	; (80073d0 <record_in+0x174>)
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	2301      	movs	r3, #1
 80072f4:	2201      	movs	r2, #1
 80072f6:	6838      	ldr	r0, [r7, #0]
 80072f8:	f7ff ff72 	bl	80071e0 <writeFlash>
	address+=16;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	3310      	adds	r3, #16
 8007300:	603b      	str	r3, [r7, #0]
	t=1;
 8007302:	2301      	movs	r3, #1
 8007304:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 8007306:	e00f      	b.n	8007328 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007308:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <record_in+0x174>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007310:	4619      	mov	r1, r3
 8007312:	2300      	movs	r3, #0
 8007314:	2201      	movs	r2, #1
 8007316:	6838      	ldr	r0, [r7, #0]
 8007318:	f7ff ff62 	bl	80071e0 <writeFlash>
	address+=16;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	3310      	adds	r3, #16
 8007320:	603b      	str	r3, [r7, #0]
	t++;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3301      	adds	r3, #1
 8007326:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b0e      	cmp	r3, #14
 800732c:	ddec      	ble.n	8007308 <record_in+0xac>
	}

	t=0;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007332:	e011      	b.n	8007358 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 8007334:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <record_in+0x174>)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	330c      	adds	r3, #12
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	4413      	add	r3, r2
 800733e:	88db      	ldrh	r3, [r3, #6]
 8007340:	4619      	mov	r1, r3
 8007342:	2300      	movs	r3, #0
 8007344:	2201      	movs	r2, #1
 8007346:	6838      	ldr	r0, [r7, #0]
 8007348:	f7ff ff4a 	bl	80071e0 <writeFlash>
	address+=16;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	3310      	adds	r3, #16
 8007350:	603b      	str	r3, [r7, #0]
	t++;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3301      	adds	r3, #1
 8007356:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b0e      	cmp	r3, #14
 800735c:	ddea      	ble.n	8007334 <record_in+0xd8>
	}

	t=0;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007362:	e011      	b.n	8007388 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 8007364:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <record_in+0x174>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	331c      	adds	r3, #28
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	889b      	ldrh	r3, [r3, #4]
 8007370:	4619      	mov	r1, r3
 8007372:	2300      	movs	r3, #0
 8007374:	2201      	movs	r2, #1
 8007376:	6838      	ldr	r0, [r7, #0]
 8007378:	f7ff ff32 	bl	80071e0 <writeFlash>
	address+=16;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	3310      	adds	r3, #16
 8007380:	603b      	str	r3, [r7, #0]
	t++;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3301      	adds	r3, #1
 8007386:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b0e      	cmp	r3, #14
 800738c:	ddea      	ble.n	8007364 <record_in+0x108>
	}

	t=0;
 800738e:	2300      	movs	r3, #0
 8007390:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007392:	e011      	b.n	80073b8 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8007394:	4a0e      	ldr	r2, [pc, #56]	; (80073d0 <record_in+0x174>)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	332c      	adds	r3, #44	; 0x2c
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	4413      	add	r3, r2
 800739e:	885b      	ldrh	r3, [r3, #2]
 80073a0:	4619      	mov	r1, r3
 80073a2:	2300      	movs	r3, #0
 80073a4:	2201      	movs	r2, #1
 80073a6:	6838      	ldr	r0, [r7, #0]
 80073a8:	f7ff ff1a 	bl	80071e0 <writeFlash>
	address+=16;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	3310      	adds	r3, #16
 80073b0:	603b      	str	r3, [r7, #0]
	t++;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3301      	adds	r3, #1
 80073b6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b0e      	cmp	r3, #14
 80073bc:	ddea      	ble.n	8007394 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80073be:	bf00      	nop
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	0807f000 	.word	0x0807f000
 80073cc:	20000c3c 	.word	0x20000c3c
 80073d0:	20000cb4 	.word	0x20000cb4

080073d4 <record_out>:


void record_out(void) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 80073da:	2300      	movs	r3, #0
 80073dc:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80073de:	4b50      	ldr	r3, [pc, #320]	; (8007520 <record_out+0x14c>)
 80073e0:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 80073e2:	e00e      	b.n	8007402 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4a4e      	ldr	r2, [pc, #312]	; (8007524 <record_out+0x150>)
 80073ea:	4413      	add	r3, r2
 80073ec:	2202      	movs	r2, #2
 80073ee:	4619      	mov	r1, r3
 80073f0:	6838      	ldr	r0, [r7, #0]
 80073f2:	f7ff ff22 	bl	800723a <loadFlash>
	address+=16;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	3310      	adds	r3, #16
 80073fa:	603b      	str	r3, [r7, #0]
	t++;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3301      	adds	r3, #1
 8007400:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b0e      	cmp	r3, #14
 8007406:	dded      	ble.n	80073e4 <record_out+0x10>
	}

	t=0;
 8007408:	2300      	movs	r3, #0
 800740a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800740c:	e010      	b.n	8007430 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	330c      	adds	r3, #12
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4a43      	ldr	r2, [pc, #268]	; (8007524 <record_out+0x150>)
 8007416:	4413      	add	r3, r2
 8007418:	3306      	adds	r3, #6
 800741a:	2202      	movs	r2, #2
 800741c:	4619      	mov	r1, r3
 800741e:	6838      	ldr	r0, [r7, #0]
 8007420:	f7ff ff0b 	bl	800723a <loadFlash>
	address+=16;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	3310      	adds	r3, #16
 8007428:	603b      	str	r3, [r7, #0]
	t++;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3301      	adds	r3, #1
 800742e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b0e      	cmp	r3, #14
 8007434:	ddeb      	ble.n	800740e <record_out+0x3a>
	}

	t=0;
 8007436:	2300      	movs	r3, #0
 8007438:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800743a:	e010      	b.n	800745e <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	331c      	adds	r3, #28
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4a38      	ldr	r2, [pc, #224]	; (8007524 <record_out+0x150>)
 8007444:	4413      	add	r3, r2
 8007446:	3304      	adds	r3, #4
 8007448:	2202      	movs	r2, #2
 800744a:	4619      	mov	r1, r3
 800744c:	6838      	ldr	r0, [r7, #0]
 800744e:	f7ff fef4 	bl	800723a <loadFlash>
		address+=16;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	3310      	adds	r3, #16
 8007456:	603b      	str	r3, [r7, #0]
		t++;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3301      	adds	r3, #1
 800745c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b0e      	cmp	r3, #14
 8007462:	ddeb      	ble.n	800743c <record_out+0x68>
	}

	t=0;
 8007464:	2300      	movs	r3, #0
 8007466:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007468:	e010      	b.n	800748c <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	332c      	adds	r3, #44	; 0x2c
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	4a2c      	ldr	r2, [pc, #176]	; (8007524 <record_out+0x150>)
 8007472:	4413      	add	r3, r2
 8007474:	3302      	adds	r3, #2
 8007476:	2202      	movs	r2, #2
 8007478:	4619      	mov	r1, r3
 800747a:	6838      	ldr	r0, [r7, #0]
 800747c:	f7ff fedd 	bl	800723a <loadFlash>
		address+=16;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	3310      	adds	r3, #16
 8007484:	603b      	str	r3, [r7, #0]
		t++;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3301      	adds	r3, #1
 800748a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b0e      	cmp	r3, #14
 8007490:	ddeb      	ble.n	800746a <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007496:	e017      	b.n	80074c8 <record_out+0xf4>
		wall.row[t] = record.row[t];
 8007498:	4a22      	ldr	r2, [pc, #136]	; (8007524 <record_out+0x150>)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80074a0:	4a21      	ldr	r2, [pc, #132]	; (8007528 <record_out+0x154>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80074a8:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <record_out+0x150>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	330c      	adds	r3, #12
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	88d9      	ldrh	r1, [r3, #6]
 80074b4:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <record_out+0x154>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	330c      	adds	r3, #12
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	4413      	add	r3, r2
 80074be:	460a      	mov	r2, r1
 80074c0:	80da      	strh	r2, [r3, #6]
		t++;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3301      	adds	r3, #1
 80074c6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b0e      	cmp	r3, #14
 80074cc:	dde4      	ble.n	8007498 <record_out+0xc4>
	}
	t = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074d2:	e01c      	b.n	800750e <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 80074d4:	4a13      	ldr	r2, [pc, #76]	; (8007524 <record_out+0x150>)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	331c      	adds	r3, #28
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	8899      	ldrh	r1, [r3, #4]
 80074e0:	4a11      	ldr	r2, [pc, #68]	; (8007528 <record_out+0x154>)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	331c      	adds	r3, #28
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	460a      	mov	r2, r1
 80074ec:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 80074ee:	4a0d      	ldr	r2, [pc, #52]	; (8007524 <record_out+0x150>)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	332c      	adds	r3, #44	; 0x2c
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4413      	add	r3, r2
 80074f8:	8859      	ldrh	r1, [r3, #2]
 80074fa:	4a0b      	ldr	r2, [pc, #44]	; (8007528 <record_out+0x154>)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	332c      	adds	r3, #44	; 0x2c
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	4413      	add	r3, r2
 8007504:	460a      	mov	r2, r1
 8007506:	805a      	strh	r2, [r3, #2]
		t++;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3301      	adds	r3, #1
 800750c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b0e      	cmp	r3, #14
 8007512:	dddf      	ble.n	80074d4 <record_out+0x100>
	}

	t = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	607b      	str	r3, [r7, #4]

}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	0807f000 	.word	0x0807f000
 8007524:	20000cb4 	.word	0x20000cb4
 8007528:	20000c3c 	.word	0x20000c3c

0800752c <flash_record_init>:

void flash_record_init(void){
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
	int t = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007536:	e013      	b.n	8007560 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 8007538:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <flash_record_init+0x88>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007540:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	b29b      	uxth	r3, r3
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	b299      	uxth	r1, r3
 800754c:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <flash_record_init+0x88>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	330c      	adds	r3, #12
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	4413      	add	r3, r2
 8007556:	460a      	mov	r2, r1
 8007558:	80da      	strh	r2, [r3, #6]
		t++;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3301      	adds	r3, #1
 800755e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b0e      	cmp	r3, #14
 8007564:	dde8      	ble.n	8007538 <flash_record_init+0xc>
	}
	t = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800756a:	e018      	b.n	800759e <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	b29b      	uxth	r3, r3
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	b299      	uxth	r1, r3
 8007574:	4a0f      	ldr	r2, [pc, #60]	; (80075b4 <flash_record_init+0x88>)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	331c      	adds	r3, #28
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4413      	add	r3, r2
 800757e:	460a      	mov	r2, r1
 8007580:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	b29b      	uxth	r3, r3
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	b299      	uxth	r1, r3
 800758a:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <flash_record_init+0x88>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	332c      	adds	r3, #44	; 0x2c
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	460a      	mov	r2, r1
 8007596:	805a      	strh	r2, [r3, #2]
		t++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3301      	adds	r3, #1
 800759c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b0e      	cmp	r3, #14
 80075a2:	dde3      	ble.n	800756c <flash_record_init+0x40>
	}

}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000c3c 	.word	0x20000c3c

080075b8 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80075c2:	2200      	movs	r2, #0
 80075c4:	2110      	movs	r1, #16
 80075c6:	4810      	ldr	r0, [pc, #64]	; (8007608 <gyro_read_byte+0x50>)
 80075c8:	f014 faea 	bl	801bba0 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80075d6:	f107 010f 	add.w	r1, r7, #15
 80075da:	2364      	movs	r3, #100	; 0x64
 80075dc:	2201      	movs	r2, #1
 80075de:	480b      	ldr	r0, [pc, #44]	; (800760c <gyro_read_byte+0x54>)
 80075e0:	f015 fbc1 	bl	801cd66 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 80075e4:	f107 010e 	add.w	r1, r7, #14
 80075e8:	2364      	movs	r3, #100	; 0x64
 80075ea:	2201      	movs	r2, #1
 80075ec:	4807      	ldr	r0, [pc, #28]	; (800760c <gyro_read_byte+0x54>)
 80075ee:	f015 fd28 	bl	801d042 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80075f2:	2201      	movs	r2, #1
 80075f4:	2110      	movs	r1, #16
 80075f6:	4804      	ldr	r0, [pc, #16]	; (8007608 <gyro_read_byte+0x50>)
 80075f8:	f014 fad2 	bl	801bba0 <HAL_GPIO_WritePin>

	return val;
 80075fc:	7bbb      	ldrb	r3, [r7, #14]

}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	48000800 	.word	0x48000800
 800760c:	2000edd0 	.word	0x2000edd0

08007610 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	460a      	mov	r2, r1
 800761a:	71fb      	strb	r3, [r7, #7]
 800761c:	4613      	mov	r3, r2
 800761e:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007626:	b2db      	uxtb	r3, r3
 8007628:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800762a:	2200      	movs	r2, #0
 800762c:	2110      	movs	r1, #16
 800762e:	480c      	ldr	r0, [pc, #48]	; (8007660 <gyro_write_byte+0x50>)
 8007630:	f014 fab6 	bl	801bba0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007634:	f107 010f 	add.w	r1, r7, #15
 8007638:	2364      	movs	r3, #100	; 0x64
 800763a:	2201      	movs	r2, #1
 800763c:	4809      	ldr	r0, [pc, #36]	; (8007664 <gyro_write_byte+0x54>)
 800763e:	f015 fb92 	bl	801cd66 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 8007642:	1db9      	adds	r1, r7, #6
 8007644:	2364      	movs	r3, #100	; 0x64
 8007646:	2201      	movs	r2, #1
 8007648:	4806      	ldr	r0, [pc, #24]	; (8007664 <gyro_write_byte+0x54>)
 800764a:	f015 fb8c 	bl	801cd66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 800764e:	2201      	movs	r2, #1
 8007650:	2110      	movs	r1, #16
 8007652:	4803      	ldr	r0, [pc, #12]	; (8007660 <gyro_write_byte+0x50>)
 8007654:	f014 faa4 	bl	801bba0 <HAL_GPIO_WritePin>

}
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	48000800 	.word	0x48000800
 8007664:	2000edd0 	.word	0x2000edd0

08007668 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8007672:	2075      	movs	r0, #117	; 0x75
 8007674:	f7ff ffa0 	bl	80075b8 <gyro_read_byte>
 8007678:	4603      	mov	r3, r0
 800767a:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	4619      	mov	r1, r3
 8007680:	481b      	ldr	r0, [pc, #108]	; (80076f0 <pl_gyro_init+0x88>)
 8007682:	f019 f823 	bl	80206cc <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	2b98      	cmp	r3, #152	; 0x98
 800768a:	d00e      	beq.n	80076aa <pl_gyro_init+0x42>

		HAL_Delay(100);
 800768c:	2064      	movs	r0, #100	; 0x64
 800768e:	f011 f8cb 	bl	8018828 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8007692:	2075      	movs	r0, #117	; 0x75
 8007694:	f7ff ff90 	bl	80075b8 <gyro_read_byte>
 8007698:	4603      	mov	r3, r0
 800769a:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	2b98      	cmp	r3, #152	; 0x98
 80076a0:	d003      	beq.n	80076aa <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 80076a2:	4814      	ldr	r0, [pc, #80]	; (80076f4 <pl_gyro_init+0x8c>)
 80076a4:	f019 f812 	bl	80206cc <iprintf>
 80076a8:	e7fb      	b.n	80076a2 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 80076aa:	2100      	movs	r1, #0
 80076ac:	206b      	movs	r0, #107	; 0x6b
 80076ae:	f7ff ffaf 	bl	8007610 <gyro_write_byte>

	HAL_Delay(50);
 80076b2:	2032      	movs	r0, #50	; 0x32
 80076b4:	f011 f8b8 	bl	8018828 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 80076b8:	2100      	movs	r1, #0
 80076ba:	206c      	movs	r0, #108	; 0x6c
 80076bc:	f7ff ffa8 	bl	8007610 <gyro_write_byte>

	HAL_Delay(50);
 80076c0:	2032      	movs	r0, #50	; 0x32
 80076c2:	f011 f8b1 	bl	8018828 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 80076c6:	2118      	movs	r1, #24
 80076c8:	201b      	movs	r0, #27
 80076ca:	f7ff ffa1 	bl	8007610 <gyro_write_byte>

	HAL_Delay(50);
 80076ce:	2032      	movs	r0, #50	; 0x32
 80076d0:	f011 f8aa 	bl	8018828 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 80076d4:	2118      	movs	r1, #24
 80076d6:	201c      	movs	r0, #28
 80076d8:	f7ff ff9a 	bl	8007610 <gyro_write_byte>

	HAL_Delay(50);
 80076dc:	2032      	movs	r0, #50	; 0x32
 80076de:	f011 f8a3 	bl	8018828 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 80076e2:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <pl_gyro_init+0x90>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	701a      	strb	r2, [r3, #0]

}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	08022f70 	.word	0x08022f70
 80076f4:	08022f84 	.word	0x08022f84
 80076f8:	200006e0 	.word	0x200006e0

080076fc <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff ff55 	bl	80075b8 <gyro_read_byte>
 800770e:	4603      	mov	r3, r0
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	3301      	adds	r3, #1
 8007718:	b2db      	uxtb	r3, r3
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff ff4c 	bl	80075b8 <gyro_read_byte>
 8007720:	4603      	mov	r3, r0
 8007722:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007724:	4323      	orrs	r3, r4
 8007726:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007728:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007734:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007750 <ICM20602_GYRO_READ+0x54>
 8007738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800773c:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	ee07 3a90 	vmov	s15, r3

}
 8007746:	eeb0 0a67 	vmov.f32	s0, s15
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	bd90      	pop	{r4, r7, pc}
 8007750:	41833333 	.word	0x41833333

08007754 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff ff29 	bl	80075b8 <gyro_read_byte>
 8007766:	4603      	mov	r3, r0
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	3301      	adds	r3, #1
 8007770:	b2db      	uxtb	r3, r3
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff ff20 	bl	80075b8 <gyro_read_byte>
 8007778:	4603      	mov	r3, r0
 800777a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800777c:	4323      	orrs	r3, r4
 800777e:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800778c:	eddf 6a06 	vldr	s13, [pc, #24]	; 80077a8 <ICM20602_ACCEL_READ+0x54>
 8007790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007794:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	ee07 3a90 	vmov	s15, r3

}
 800779e:	eeb0 0a67 	vmov.f32	s0, s15
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd90      	pop	{r4, r7, pc}
 80077a8:	45000000 	.word	0x45000000

080077ac <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 80077b0:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <ICM20602_DataUpdate+0x40>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d117      	bne.n	80077e8 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 80077b8:	2045      	movs	r0, #69	; 0x45
 80077ba:	f7ff ff9f 	bl	80076fc <ICM20602_GYRO_READ>
 80077be:	eef0 7a40 	vmov.f32	s15, s0
 80077c2:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <ICM20602_DataUpdate+0x44>)
 80077c4:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 80077c8:	2047      	movs	r0, #71	; 0x47
 80077ca:	f7ff ff97 	bl	80076fc <ICM20602_GYRO_READ>
 80077ce:	eef0 7a40 	vmov.f32	s15, s0
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <ICM20602_DataUpdate+0x44>)
 80077d4:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 80077d8:	203b      	movs	r0, #59	; 0x3b
 80077da:	f7ff ffbb 	bl	8007754 <ICM20602_ACCEL_READ>
 80077de:	eef0 7a40 	vmov.f32	s15, s0
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <ICM20602_DataUpdate+0x44>)
 80077e4:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 80077e8:	bf00      	nop
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200006e0 	.word	0x200006e0
 80077f0:	200006e4 	.word	0x200006e4

080077f4 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 80077f8:	480f      	ldr	r0, [pc, #60]	; (8007838 <pl_motor_init+0x44>)
 80077fa:	f016 f979 	bl	801daf0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 80077fe:	480e      	ldr	r0, [pc, #56]	; (8007838 <pl_motor_init+0x44>)
 8007800:	f00f ffc2 	bl	8017788 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007804:	480d      	ldr	r0, [pc, #52]	; (800783c <pl_motor_init+0x48>)
 8007806:	f016 f973 	bl	801daf0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 800780a:	480c      	ldr	r0, [pc, #48]	; (800783c <pl_motor_init+0x48>)
 800780c:	f00f ffbc 	bl	8017788 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007810:	2001      	movs	r0, #1
 8007812:	f000 f81f 	bl	8007854 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <pl_motor_init+0x44>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	225a      	movs	r2, #90	; 0x5a
 800781c:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 800781e:	2001      	movs	r0, #1
 8007820:	f000 f840 	bl	80078a4 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <pl_motor_init+0x44>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	225a      	movs	r2, #90	; 0x5a
 800782a:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 800782c:	4b03      	ldr	r3, [pc, #12]	; (800783c <pl_motor_init+0x48>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	221e      	movs	r2, #30
 8007832:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007834:	bf00      	nop
 8007836:	bd80      	pop	{r7, pc}
 8007838:	2000eee8 	.word	0x2000eee8
 800783c:	2000ef34 	.word	0x2000ef34

08007840 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d819      	bhi.n	8007896 <pl_L_DriveMotor_mode+0x42>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <pl_L_DriveMotor_mode+0x14>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007895 	.word	0x08007895
 800786c:	08007879 	.word	0x08007879
 8007870:	08007887 	.word	0x08007887
 8007874:	08007895 	.word	0x08007895
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007878:	2200      	movs	r2, #0
 800787a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800787e:	4808      	ldr	r0, [pc, #32]	; (80078a0 <pl_L_DriveMotor_mode+0x4c>)
 8007880:	f014 f98e 	bl	801bba0 <HAL_GPIO_WritePin>
break;
 8007884:	e007      	b.n	8007896 <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8007886:	2201      	movs	r2, #1
 8007888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800788c:	4804      	ldr	r0, [pc, #16]	; (80078a0 <pl_L_DriveMotor_mode+0x4c>)
 800788e:	f014 f987 	bl	801bba0 <HAL_GPIO_WritePin>
break;
 8007892:	e000      	b.n	8007896 <pl_L_DriveMotor_mode+0x42>
break;
 8007894:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	48000800 	.word	0x48000800

080078a4 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d817      	bhi.n	80078e2 <pl_R_DriveMotor_mode+0x3e>
 80078b2:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <pl_R_DriveMotor_mode+0x14>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078c9 	.word	0x080078c9
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	080078e1 	.word	0x080078e1
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 80078c8:	2201      	movs	r2, #1
 80078ca:	2180      	movs	r1, #128	; 0x80
 80078cc:	4807      	ldr	r0, [pc, #28]	; (80078ec <pl_R_DriveMotor_mode+0x48>)
 80078ce:	f014 f967 	bl	801bba0 <HAL_GPIO_WritePin>
break;
 80078d2:	e006      	b.n	80078e2 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 80078d4:	2200      	movs	r2, #0
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	4804      	ldr	r0, [pc, #16]	; (80078ec <pl_R_DriveMotor_mode+0x48>)
 80078da:	f014 f961 	bl	801bba0 <HAL_GPIO_WritePin>
break;
 80078de:	e000      	b.n	80078e2 <pl_R_DriveMotor_mode+0x3e>
break;
 80078e0:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	48000400 	.word	0x48000400

080078f0 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80078f4:	2108      	movs	r1, #8
 80078f6:	4804      	ldr	r0, [pc, #16]	; (8007908 <pl_DriveMotor_start+0x18>)
 80078f8:	f016 f9c2 	bl	801dc80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80078fc:	2100      	movs	r1, #0
 80078fe:	4802      	ldr	r0, [pc, #8]	; (8007908 <pl_DriveMotor_start+0x18>)
 8007900:	f016 f9be 	bl	801dc80 <HAL_TIM_PWM_Start>
}
 8007904:	bf00      	nop
 8007906:	bd80      	pop	{r7, pc}
 8007908:	2000eee8 	.word	0x2000eee8

0800790c <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007910:	2108      	movs	r1, #8
 8007912:	4804      	ldr	r0, [pc, #16]	; (8007924 <pl_DriveMotor_stop+0x18>)
 8007914:	f016 fac0 	bl	801de98 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007918:	2100      	movs	r1, #0
 800791a:	4802      	ldr	r0, [pc, #8]	; (8007924 <pl_DriveMotor_stop+0x18>)
 800791c:	f016 fabc 	bl	801de98 <HAL_TIM_PWM_Stop>
}
 8007920:	bf00      	nop
 8007922:	bd80      	pop	{r7, pc}
 8007924:	2000eee8 	.word	0x2000eee8

08007928 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <pl_DriveMotor_duty+0x28>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <pl_DriveMotor_duty+0x28>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	2000eee8 	.word	0x2000eee8

08007954 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007958:	2100      	movs	r1, #0
 800795a:	4802      	ldr	r0, [pc, #8]	; (8007964 <pl_FunMotor_start+0x10>)
 800795c:	f016 f990 	bl	801dc80 <HAL_TIM_PWM_Start>
}
 8007960:	bf00      	nop
 8007962:	bd80      	pop	{r7, pc}
 8007964:	2000ef34 	.word	0x2000ef34

08007968 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 800796c:	2100      	movs	r1, #0
 800796e:	4802      	ldr	r0, [pc, #8]	; (8007978 <pl_FunMotor_stop+0x10>)
 8007970:	f016 fa92 	bl	801de98 <HAL_TIM_PWM_Stop>
}
 8007974:	bf00      	nop
 8007976:	bd80      	pop	{r7, pc}
 8007978:	2000ef34 	.word	0x2000ef34

0800797c <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007986:	edd7 7a01 	vldr	s15, [r7, #4]
 800798a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80079c0 <pl_FunMotor_duty+0x44>
 800798e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007996:	ee17 3a90 	vmov	r3, s15
 800799a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 800799c:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <pl_FunMotor_duty+0x48>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2264      	movs	r2, #100	; 0x64
 80079a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80079a4:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <pl_FunMotor_duty+0x48>)
 80079a6:	2264      	movs	r2, #100	; 0x64
 80079a8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 80079aa:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <pl_FunMotor_duty+0x48>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	635a      	str	r2, [r3, #52]	; 0x34

}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	42c80000 	.word	0x42c80000
 80079c4:	2000ef34 	.word	0x2000ef34

080079c8 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
	AD_step=0;
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <pl_sensor_init+0x18>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80079d2:	217f      	movs	r1, #127	; 0x7f
 80079d4:	4803      	ldr	r0, [pc, #12]	; (80079e4 <pl_sensor_init+0x1c>)
 80079d6:	f012 ffa1 	bl	801a91c <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 80079da:	bf00      	nop
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000708 	.word	0x20000708
 80079e4:	20000734 	.word	0x20000734

080079e8 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 80079ee:	483c      	ldr	r0, [pc, #240]	; (8007ae0 <pl_getbatt+0xf8>)
 80079f0:	f011 fb82 	bl	80190f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 80079f4:	2132      	movs	r1, #50	; 0x32
 80079f6:	483a      	ldr	r0, [pc, #232]	; (8007ae0 <pl_getbatt+0xf8>)
 80079f8:	f011 fc7c 	bl	80192f4 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 80079fc:	4838      	ldr	r0, [pc, #224]	; (8007ae0 <pl_getbatt+0xf8>)
 80079fe:	f011 fe98 	bl	8019732 <HAL_ADC_GetValue>
 8007a02:	4603      	mov	r3, r0
 8007a04:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007a06:	4836      	ldr	r0, [pc, #216]	; (8007ae0 <pl_getbatt+0xf8>)
 8007a08:	f011 fc40 	bl	801928c <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	ee17 0a90 	vmov	r0, s15
 8007a1a:	f7f8 fdbd 	bl	8000598 <__aeabi_f2d>
 8007a1e:	a326      	add	r3, pc, #152	; (adr r3, 8007ab8 <pl_getbatt+0xd0>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fe10 	bl	8000648 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	a323      	add	r3, pc, #140	; (adr r3, 8007ac0 <pl_getbatt+0xd8>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 ff31 	bl	800089c <__aeabi_ddiv>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <pl_getbatt+0xfc>)
 8007a48:	f7f8 fdfe 	bl	8000648 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	4b23      	ldr	r3, [pc, #140]	; (8007ae8 <pl_getbatt+0x100>)
 8007a5a:	f7f8 ff1f 	bl	800089c <__aeabi_ddiv>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	a318      	add	r3, pc, #96	; (adr r3, 8007ac8 <pl_getbatt+0xe0>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 fdec 	bl	8000648 <__aeabi_dmul>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	a315      	add	r3, pc, #84	; (adr r3, 8007ad0 <pl_getbatt+0xe8>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	f7f8 fde3 	bl	8000648 <__aeabi_dmul>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4610      	mov	r0, r2
 8007a88:	4619      	mov	r1, r3
 8007a8a:	a313      	add	r3, pc, #76	; (adr r3, 8007ad8 <pl_getbatt+0xf0>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 ff04 	bl	800089c <__aeabi_ddiv>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f7f9 f8ac 	bl	8000bf8 <__aeabi_d2f>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	603b      	str	r3, [r7, #0]
return batt;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	ee07 3a90 	vmov	s15, r3
}
 8007aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	f3af 8000 	nop.w
 8007ab8:	66666666 	.word	0x66666666
 8007abc:	400a6666 	.word	0x400a6666
 8007ac0:	00000000 	.word	0x00000000
 8007ac4:	40affe00 	.word	0x40affe00
 8007ac8:	66666666 	.word	0x66666666
 8007acc:	3ff26666 	.word	0x3ff26666
 8007ad0:	9999999a 	.word	0x9999999a
 8007ad4:	400d9999 	.word	0x400d9999
 8007ad8:	ae147ae1 	.word	0xae147ae1
 8007adc:	400ee147 	.word	0x400ee147
 8007ae0:	20000734 	.word	0x20000734
 8007ae4:	40340000 	.word	0x40340000
 8007ae8:	40240000 	.word	0x40240000
 8007aec:	00000000 	.word	0x00000000

08007af0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007af6:	4882      	ldr	r0, [pc, #520]	; (8007d00 <pl_callback_getSensor+0x210>)
 8007af8:	f011 fdba 	bl	8019670 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007afc:	4b81      	ldr	r3, [pc, #516]	; (8007d04 <pl_callback_getSensor+0x214>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	f200 80d9 	bhi.w	8007cb8 <pl_callback_getSensor+0x1c8>
 8007b06:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <pl_callback_getSensor+0x1c>)
 8007b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0c:	08007b21 	.word	0x08007b21
 8007b10:	08007b59 	.word	0x08007b59
 8007b14:	08007bb9 	.word	0x08007bb9
 8007b18:	08007bf9 	.word	0x08007bf9
 8007b1c:	08007cb9 	.word	0x08007cb9
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007b20:	2201      	movs	r2, #1
 8007b22:	2102      	movs	r1, #2
 8007b24:	4878      	ldr	r0, [pc, #480]	; (8007d08 <pl_callback_getSensor+0x218>)
 8007b26:	f014 f83b 	bl	801bba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2110      	movs	r1, #16
 8007b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b32:	f014 f835 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007b36:	2200      	movs	r2, #0
 8007b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b3c:	4873      	ldr	r0, [pc, #460]	; (8007d0c <pl_callback_getSensor+0x21c>)
 8007b3e:	f014 f82f 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007b46:	e002      	b.n	8007b4e <pl_callback_getSensor+0x5e>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b54:	ddf8      	ble.n	8007b48 <pl_callback_getSensor+0x58>
		break;
 8007b56:	e0af      	b.n	8007cb8 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007b58:	4b6d      	ldr	r3, [pc, #436]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007b5a:	885a      	ldrh	r2, [r3, #2]
 8007b5c:	4b6d      	ldr	r3, [pc, #436]	; (8007d14 <pl_callback_getSensor+0x224>)
 8007b5e:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007b60:	4b6b      	ldr	r3, [pc, #428]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007b62:	889a      	ldrh	r2, [r3, #4]
 8007b64:	4b6b      	ldr	r3, [pc, #428]	; (8007d14 <pl_callback_getSensor+0x224>)
 8007b66:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007b68:	4b69      	ldr	r3, [pc, #420]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007b6a:	88da      	ldrh	r2, [r3, #6]
 8007b6c:	4b6a      	ldr	r3, [pc, #424]	; (8007d18 <pl_callback_getSensor+0x228>)
 8007b6e:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007b70:	4b67      	ldr	r3, [pc, #412]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007b72:	891a      	ldrh	r2, [r3, #8]
 8007b74:	4b68      	ldr	r3, [pc, #416]	; (8007d18 <pl_callback_getSensor+0x228>)
 8007b76:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007b78:	4b65      	ldr	r3, [pc, #404]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007b7a:	895a      	ldrh	r2, [r3, #10]
 8007b7c:	4b66      	ldr	r3, [pc, #408]	; (8007d18 <pl_callback_getSensor+0x228>)
 8007b7e:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007b80:	2200      	movs	r2, #0
 8007b82:	2102      	movs	r1, #2
 8007b84:	4860      	ldr	r0, [pc, #384]	; (8007d08 <pl_callback_getSensor+0x218>)
 8007b86:	f014 f80b 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	2110      	movs	r1, #16
 8007b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b92:	f014 f805 	bl	801bba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007b96:	2200      	movs	r2, #0
 8007b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b9c:	485b      	ldr	r0, [pc, #364]	; (8007d0c <pl_callback_getSensor+0x21c>)
 8007b9e:	f013 ffff 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007ba6:	e002      	b.n	8007bae <pl_callback_getSensor+0xbe>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3301      	adds	r3, #1
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb4:	ddf8      	ble.n	8007ba8 <pl_callback_getSensor+0xb8>
		break;
 8007bb6:	e07f      	b.n	8007cb8 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007bb8:	4b55      	ldr	r3, [pc, #340]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007bba:	88da      	ldrh	r2, [r3, #6]
 8007bbc:	4b55      	ldr	r3, [pc, #340]	; (8007d14 <pl_callback_getSensor+0x224>)
 8007bbe:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	4850      	ldr	r0, [pc, #320]	; (8007d08 <pl_callback_getSensor+0x218>)
 8007bc6:	f013 ffeb 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2110      	movs	r1, #16
 8007bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bd2:	f013 ffe5 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bdc:	484b      	ldr	r0, [pc, #300]	; (8007d0c <pl_callback_getSensor+0x21c>)
 8007bde:	f013 ffdf 	bl	801bba0 <HAL_GPIO_WritePin>
		j=0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007be6:	e002      	b.n	8007bee <pl_callback_getSensor+0xfe>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3301      	adds	r3, #1
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bf4:	ddf8      	ble.n	8007be8 <pl_callback_getSensor+0xf8>
		break;
 8007bf6:	e05f      	b.n	8007cb8 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007bf8:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007bfa:	885a      	ldrh	r2, [r3, #2]
 8007bfc:	4b46      	ldr	r3, [pc, #280]	; (8007d18 <pl_callback_getSensor+0x228>)
 8007bfe:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007c00:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007c02:	889a      	ldrh	r2, [r3, #4]
 8007c04:	4b44      	ldr	r3, [pc, #272]	; (8007d18 <pl_callback_getSensor+0x228>)
 8007c06:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007c08:	4b41      	ldr	r3, [pc, #260]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007c0a:	891a      	ldrh	r2, [r3, #8]
 8007c0c:	4b41      	ldr	r3, [pc, #260]	; (8007d14 <pl_callback_getSensor+0x224>)
 8007c0e:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007c10:	4b3f      	ldr	r3, [pc, #252]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007c12:	895a      	ldrh	r2, [r3, #10]
 8007c14:	4b3f      	ldr	r3, [pc, #252]	; (8007d14 <pl_callback_getSensor+0x224>)
 8007c16:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	483a      	ldr	r0, [pc, #232]	; (8007d08 <pl_callback_getSensor+0x218>)
 8007c1e:	f013 ffbf 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c22:	2200      	movs	r2, #0
 8007c24:	2110      	movs	r1, #16
 8007c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c2a:	f013 ffb9 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c34:	4835      	ldr	r0, [pc, #212]	; (8007d0c <pl_callback_getSensor+0x21c>)
 8007c36:	f013 ffb3 	bl	801bba0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007c3e:	e002      	b.n	8007c46 <pl_callback_getSensor+0x156>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3301      	adds	r3, #1
 8007c44:	607b      	str	r3, [r7, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b32      	cmp	r3, #50	; 0x32
 8007c4a:	ddf9      	ble.n	8007c40 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007c4c:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007c52:	887b      	ldrh	r3, [r7, #2]
 8007c54:	ee07 3a90 	vmov	s15, r3
 8007c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5c:	ee17 0a90 	vmov	r0, s15
 8007c60:	f7f8 fc9a 	bl	8000598 <__aeabi_f2d>
 8007c64:	a320      	add	r3, pc, #128	; (adr r3, 8007ce8 <pl_callback_getSensor+0x1f8>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fced 	bl	8000648 <__aeabi_dmul>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4610      	mov	r0, r2
 8007c74:	4619      	mov	r1, r3
 8007c76:	a31e      	add	r3, pc, #120	; (adr r3, 8007cf0 <pl_callback_getSensor+0x200>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fe0e 	bl	800089c <__aeabi_ddiv>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4610      	mov	r0, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	a31b      	add	r3, pc, #108	; (adr r3, 8007cf8 <pl_callback_getSensor+0x208>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 fcdb 	bl	8000648 <__aeabi_dmul>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4610      	mov	r0, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	4b1f      	ldr	r3, [pc, #124]	; (8007d1c <pl_callback_getSensor+0x22c>)
 8007ca0:	f7f8 fdfc 	bl	800089c <__aeabi_ddiv>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4619      	mov	r1, r3
 8007cac:	f7f8 ffa4 	bl	8000bf8 <__aeabi_d2f>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <pl_callback_getSensor+0x230>)
 8007cb4:	6013      	str	r3, [r2, #0]
		break;
 8007cb6:	bf00      	nop

		break;
	}


	AD_step++;
 8007cb8:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <pl_callback_getSensor+0x214>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	4b10      	ldr	r3, [pc, #64]	; (8007d04 <pl_callback_getSensor+0x214>)
 8007cc2:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007cc4:	4b0f      	ldr	r3, [pc, #60]	; (8007d04 <pl_callback_getSensor+0x214>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d005      	beq.n	8007cd8 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007ccc:	2206      	movs	r2, #6
 8007cce:	4910      	ldr	r1, [pc, #64]	; (8007d10 <pl_callback_getSensor+0x220>)
 8007cd0:	480b      	ldr	r0, [pc, #44]	; (8007d00 <pl_callback_getSensor+0x210>)
 8007cd2:	f011 fc03 	bl	80194dc <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007cd6:	e002      	b.n	8007cde <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007cd8:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <pl_callback_getSensor+0x214>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	66666666 	.word	0x66666666
 8007cec:	400a6666 	.word	0x400a6666
 8007cf0:	00000000 	.word	0x00000000
 8007cf4:	40affe00 	.word	0x40affe00
 8007cf8:	00000000 	.word	0x00000000
 8007cfc:	4062c000 	.word	0x4062c000
 8007d00:	20000734 	.word	0x20000734
 8007d04:	20000708 	.word	0x20000708
 8007d08:	48000400 	.word	0x48000400
 8007d0c:	48000800 	.word	0x48000800
 8007d10:	200006fc 	.word	0x200006fc
 8007d14:	2000070c 	.word	0x2000070c
 8007d18:	20000718 	.word	0x20000718
 8007d1c:	40490000 	.word	0x40490000
 8007d20:	20000724 	.word	0x20000724

08007d24 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d28:	2206      	movs	r2, #6
 8007d2a:	4903      	ldr	r1, [pc, #12]	; (8007d38 <pl_interupt_getSensor+0x14>)
 8007d2c:	4803      	ldr	r0, [pc, #12]	; (8007d3c <pl_interupt_getSensor+0x18>)
 8007d2e:	f011 fbd5 	bl	80194dc <HAL_ADC_Start_DMA>

}
 8007d32:	bf00      	nop
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	200006fc 	.word	0x200006fc
 8007d3c:	20000734 	.word	0x20000734

08007d40 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
	count_mode=0;
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <pl_timer_init+0x1c>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <pl_timer_init+0x20>)
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007d52:	4804      	ldr	r0, [pc, #16]	; (8007d64 <pl_timer_init+0x24>)
 8007d54:	f015 fecc 	bl	801daf0 <HAL_TIM_Base_Start_IT>
}
 8007d58:	bf00      	nop
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000730 	.word	0x20000730
 8007d60:	2000072c 	.word	0x2000072c
 8007d64:	2000ee9c 	.word	0x2000ee9c

08007d68 <interrupt_timer>:

void interrupt_timer(void){
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
	g_timCount++;
 8007d6c:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <interrupt_timer+0x48>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	4a0f      	ldr	r2, [pc, #60]	; (8007db0 <interrupt_timer+0x48>)
 8007d74:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007d76:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <interrupt_timer+0x4c>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d112      	bne.n	8007da4 <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <interrupt_timer+0x50>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7f8 fc08 	bl	8000598 <__aeabi_f2d>
 8007d88:	a307      	add	r3, pc, #28	; (adr r3, 8007da8 <interrupt_timer+0x40>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 faa5 	bl	80002dc <__adddf3>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4610      	mov	r0, r2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f7f8 ff2d 	bl	8000bf8 <__aeabi_d2f>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4a05      	ldr	r2, [pc, #20]	; (8007db8 <interrupt_timer+0x50>)
 8007da2:	6013      	str	r3, [r2, #0]
	}

}
 8007da4:	bf00      	nop
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	d2f1a9fc 	.word	0xd2f1a9fc
 8007dac:	3f50624d 	.word	0x3f50624d
 8007db0:	20000728 	.word	0x20000728
 8007db4:	20000730 	.word	0x20000730
 8007db8:	2000072c 	.word	0x2000072c

08007dbc <tic_timer>:

void tic_timer(void){
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
	count_mode=1;
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <tic_timer+0x1c>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <tic_timer+0x20>)
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20000730 	.word	0x20000730
 8007ddc:	2000072c 	.word	0x2000072c

08007de0 <toc_timer>:

float toc_timer(void){
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007de6:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <toc_timer+0x30>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <toc_timer+0x34>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <toc_timer+0x30>)
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
	return timer;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	ee07 3a90 	vmov	s15, r3
}
 8007e00:	eeb0 0a67 	vmov.f32	s0, s15
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	2000072c 	.word	0x2000072c
 8007e14:	20000730 	.word	0x20000730

08007e18 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8007e18:	b5b0      	push	{r4, r5, r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007e20:	4b1d      	ldr	r3, [pc, #116]	; (8007e98 <wait_ms+0x80>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007e26:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <wait_ms+0x84>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007e2e:	bf00      	nop
 8007e30:	4b19      	ldr	r3, [pc, #100]	; (8007e98 <wait_ms+0x80>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	ee07 3a90 	vmov	s15, r3
 8007e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3c:	ee17 0a90 	vmov	r0, s15
 8007e40:	f7f8 fbaa 	bl	8000598 <__aeabi_f2d>
 8007e44:	a312      	add	r3, pc, #72	; (adr r3, 8007e90 <wait_ms+0x78>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 fbfd 	bl	8000648 <__aeabi_dmul>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4610      	mov	r0, r2
 8007e54:	4619      	mov	r1, r3
 8007e56:	a30e      	add	r3, pc, #56	; (adr r3, 8007e90 <wait_ms+0x78>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f7f8 fd1e 	bl	800089c <__aeabi_ddiv>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4614      	mov	r4, r2
 8007e66:	461d      	mov	r5, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7f8 fb73 	bl	8000554 <__aeabi_ui2d>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7f8 fe59 	bl	8000b2c <__aeabi_dcmplt>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1d7      	bne.n	8007e30 <wait_ms+0x18>
        }

}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bdb0      	pop	{r4, r5, r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	f3af 8000 	nop.w
 8007e90:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e94:	3f50624d 	.word	0x3f50624d
 8007e98:	20000728 	.word	0x20000728
 8007e9c:	2000ee9c 	.word	0x2000ee9c

08007ea0 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007ea0:	b5b0      	push	{r4, r5, r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <wait_ms_NoReset+0x78>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007eae:	bf00      	nop
 8007eb0:	4b19      	ldr	r3, [pc, #100]	; (8007f18 <wait_ms_NoReset+0x78>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebc:	ee17 0a90 	vmov	r0, s15
 8007ec0:	f7f8 fb6a 	bl	8000598 <__aeabi_f2d>
 8007ec4:	a312      	add	r3, pc, #72	; (adr r3, 8007f10 <wait_ms_NoReset+0x70>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f7f8 fbbd 	bl	8000648 <__aeabi_dmul>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	a30e      	add	r3, pc, #56	; (adr r3, 8007f10 <wait_ms_NoReset+0x70>)
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	f7f8 fcde 	bl	800089c <__aeabi_ddiv>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7f8 fb33 	bl	8000554 <__aeabi_ui2d>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7f8 fe19 	bl	8000b2c <__aeabi_dcmplt>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1d7      	bne.n	8007eb0 <wait_ms_NoReset+0x10>
        }

}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bdb0      	pop	{r4, r5, r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w
 8007f10:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f14:	3f50624d 	.word	0x3f50624d
 8007f18:	20000728 	.word	0x20000728

08007f1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08c      	sub	sp, #48	; 0x30
 8007f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007f2e:	1d3b      	adds	r3, r7, #4
 8007f30:	2220      	movs	r2, #32
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f017 ff57 	bl	801fde8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007f3a:	4b56      	ldr	r3, [pc, #344]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007f42:	4b54      	ldr	r3, [pc, #336]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007f48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007f4a:	4b52      	ldr	r3, [pc, #328]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f50:	4b50      	ldr	r3, [pc, #320]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007f56:	4b4f      	ldr	r3, [pc, #316]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007f5c:	4b4d      	ldr	r3, [pc, #308]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007f62:	4b4c      	ldr	r3, [pc, #304]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f64:	2208      	movs	r2, #8
 8007f66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007f68:	4b4a      	ldr	r3, [pc, #296]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007f6e:	4b49      	ldr	r3, [pc, #292]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8007f74:	4b47      	ldr	r3, [pc, #284]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f76:	2206      	movs	r2, #6
 8007f78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007f7a:	4b46      	ldr	r3, [pc, #280]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007f82:	4b44      	ldr	r3, [pc, #272]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007f88:	4b42      	ldr	r3, [pc, #264]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007f8e:	4b41      	ldr	r3, [pc, #260]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007f96:	4b3f      	ldr	r3, [pc, #252]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007f9c:	4b3d      	ldr	r3, [pc, #244]	; (8008094 <MX_ADC1_Init+0x178>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007fa4:	483b      	ldr	r0, [pc, #236]	; (8008094 <MX_ADC1_Init+0x178>)
 8007fa6:	f010 fef3 	bl	8018d90 <HAL_ADC_Init>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007fb0:	f001 fecb 	bl	8009d4a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4835      	ldr	r0, [pc, #212]	; (8008094 <MX_ADC1_Init+0x178>)
 8007fc0:	f012 fd40 	bl	801aa44 <HAL_ADCEx_MultiModeConfigChannel>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8007fca:	f001 febe 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8007fce:	4b32      	ldr	r3, [pc, #200]	; (8008098 <MX_ADC1_Init+0x17c>)
 8007fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007fd2:	2306      	movs	r3, #6
 8007fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007fda:	237f      	movs	r3, #127	; 0x7f
 8007fdc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007fde:	2304      	movs	r3, #4
 8007fe0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007fe6:	1d3b      	adds	r3, r7, #4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	482a      	ldr	r0, [pc, #168]	; (8008094 <MX_ADC1_Init+0x178>)
 8007fec:	f011 fe06 	bl	8019bfc <HAL_ADC_ConfigChannel>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8007ff6:	f001 fea8 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007ffa:	4b28      	ldr	r3, [pc, #160]	; (800809c <MX_ADC1_Init+0x180>)
 8007ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007ffe:	230c      	movs	r3, #12
 8008000:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008002:	1d3b      	adds	r3, r7, #4
 8008004:	4619      	mov	r1, r3
 8008006:	4823      	ldr	r0, [pc, #140]	; (8008094 <MX_ADC1_Init+0x178>)
 8008008:	f011 fdf8 	bl	8019bfc <HAL_ADC_ConfigChannel>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008012:	f001 fe9a 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008016:	4b22      	ldr	r3, [pc, #136]	; (80080a0 <MX_ADC1_Init+0x184>)
 8008018:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800801a:	2312      	movs	r3, #18
 800801c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800801e:	1d3b      	adds	r3, r7, #4
 8008020:	4619      	mov	r1, r3
 8008022:	481c      	ldr	r0, [pc, #112]	; (8008094 <MX_ADC1_Init+0x178>)
 8008024:	f011 fdea 	bl	8019bfc <HAL_ADC_ConfigChannel>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800802e:	f001 fe8c 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008032:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <MX_ADC1_Init+0x188>)
 8008034:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008036:	2318      	movs	r3, #24
 8008038:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800803a:	1d3b      	adds	r3, r7, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4815      	ldr	r0, [pc, #84]	; (8008094 <MX_ADC1_Init+0x178>)
 8008040:	f011 fddc 	bl	8019bfc <HAL_ADC_ConfigChannel>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800804a:	f001 fe7e 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800804e:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <MX_ADC1_Init+0x18c>)
 8008050:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008056:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008058:	1d3b      	adds	r3, r7, #4
 800805a:	4619      	mov	r1, r3
 800805c:	480d      	ldr	r0, [pc, #52]	; (8008094 <MX_ADC1_Init+0x178>)
 800805e:	f011 fdcd 	bl	8019bfc <HAL_ADC_ConfigChannel>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008068:	f001 fe6f 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <MX_ADC1_Init+0x190>)
 800806e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008070:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008074:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008076:	1d3b      	adds	r3, r7, #4
 8008078:	4619      	mov	r1, r3
 800807a:	4806      	ldr	r0, [pc, #24]	; (8008094 <MX_ADC1_Init+0x178>)
 800807c:	f011 fdbe 	bl	8019bfc <HAL_ADC_ConfigChannel>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008086:	f001 fe60 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800808a:	bf00      	nop
 800808c:	3730      	adds	r7, #48	; 0x30
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000734 	.word	0x20000734
 8008098:	2e300800 	.word	0x2e300800
 800809c:	3ef08000 	.word	0x3ef08000
 80080a0:	10c00010 	.word	0x10c00010
 80080a4:	0c900008 	.word	0x0c900008
 80080a8:	08600004 	.word	0x08600004
 80080ac:	04300002 	.word	0x04300002

080080b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b09e      	sub	sp, #120	; 0x78
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	609a      	str	r2, [r3, #8]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080c8:	f107 0314 	add.w	r3, r7, #20
 80080cc:	2250      	movs	r2, #80	; 0x50
 80080ce:	2100      	movs	r1, #0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f017 fe89 	bl	801fde8 <memset>
  if(adcHandle->Instance==ADC1)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080de:	f040 8082 	bne.w	80081e6 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80080e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80080e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80080ec:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80080ee:	f107 0314 	add.w	r3, r7, #20
 80080f2:	4618      	mov	r0, r3
 80080f4:	f014 fb50 	bl	801c798 <HAL_RCCEx_PeriphCLKConfig>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80080fe:	f001 fe24 	bl	8009d4a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008102:	4b3b      	ldr	r3, [pc, #236]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008106:	4a3a      	ldr	r2, [pc, #232]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008108:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800810c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800810e:	4b38      	ldr	r3, [pc, #224]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800811a:	4b35      	ldr	r3, [pc, #212]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 800811c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811e:	4a34      	ldr	r2, [pc, #208]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008120:	f043 0301 	orr.w	r3, r3, #1
 8008124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008126:	4b32      	ldr	r3, [pc, #200]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008132:	4b2f      	ldr	r3, [pc, #188]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008136:	4a2e      	ldr	r2, [pc, #184]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008138:	f043 0302 	orr.w	r3, r3, #2
 800813c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800813e:	4b2c      	ldr	r3, [pc, #176]	; (80081f0 <HAL_ADC_MspInit+0x140>)
 8008140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	60bb      	str	r3, [r7, #8]
 8008148:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 800814a:	230f      	movs	r3, #15
 800814c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800814e:	2303      	movs	r3, #3
 8008150:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008152:	2300      	movs	r3, #0
 8008154:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008156:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800815a:	4619      	mov	r1, r3
 800815c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008160:	f013 fb9c 	bl	801b89c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 8008164:	f241 0301 	movw	r3, #4097	; 0x1001
 8008168:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800816a:	2303      	movs	r3, #3
 800816c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816e:	2300      	movs	r3, #0
 8008170:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008172:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008176:	4619      	mov	r1, r3
 8008178:	481e      	ldr	r0, [pc, #120]	; (80081f4 <HAL_ADC_MspInit+0x144>)
 800817a:	f013 fb8f 	bl	801b89c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800817e:	4b1e      	ldr	r3, [pc, #120]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 8008180:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <HAL_ADC_MspInit+0x14c>)
 8008182:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008184:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 8008186:	2205      	movs	r2, #5
 8008188:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800818a:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 800818c:	2200      	movs	r2, #0
 800818e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008190:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 8008192:	2200      	movs	r2, #0
 8008194:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008196:	4b18      	ldr	r3, [pc, #96]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 8008198:	2280      	movs	r2, #128	; 0x80
 800819a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 800819e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80081a4:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 80081a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80081ac:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 80081ae:	2220      	movs	r2, #32
 80081b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80081b2:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 80081b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80081ba:	480f      	ldr	r0, [pc, #60]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 80081bc:	f012 fe3a 	bl	801ae34 <HAL_DMA_Init>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80081c6:	f001 fdc0 	bl	8009d4a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a0a      	ldr	r2, [pc, #40]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 80081ce:	655a      	str	r2, [r3, #84]	; 0x54
 80081d0:	4a09      	ldr	r2, [pc, #36]	; (80081f8 <HAL_ADC_MspInit+0x148>)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	2012      	movs	r0, #18
 80081dc:	f012 fdf5 	bl	801adca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80081e0:	2012      	movs	r0, #18
 80081e2:	f012 fe0c 	bl	801adfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80081e6:	bf00      	nop
 80081e8:	3778      	adds	r7, #120	; 0x78
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40021000 	.word	0x40021000
 80081f4:	48000400 	.word	0x48000400
 80081f8:	200007a0 	.word	0x200007a0
 80081fc:	40020008 	.word	0x40020008

08008200 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008208:	f7ff fc72 	bl	8007af0 <pl_callback_getSensor>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008214:	b084      	sub	sp, #16
 8008216:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	f107 0420 	add.w	r4, r7, #32
 8008222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008226:	edd7 7a08 	vldr	s15, [r7, #32]
 800822a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800822e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008232:	f2c0 819d 	blt.w	8008570 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008236:	4bcd      	ldr	r3, [pc, #820]	; (800856c <cal_table+0x358>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b06      	cmp	r3, #6
 800823e:	f200 833a 	bhi.w	80088b6 <cal_table+0x6a2>
 8008242:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <cal_table+0x34>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	080088a9 	.word	0x080088a9
 800824c:	08008265 	.word	0x08008265
 8008250:	080083d7 	.word	0x080083d7
 8008254:	080084f5 	.word	0x080084f5
 8008258:	080088a9 	.word	0x080088a9
 800825c:	08008521 	.word	0x08008521
 8008260:	08008547 	.word	0x08008547
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 8008264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008266:	ed93 7a00 	vldr	s14, [r3]
 800826a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800826e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008276:	db0a      	blt.n	800828e <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	f04f 0200 	mov.w	r2, #0
 8008284:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008286:	4bb9      	ldr	r3, [pc, #740]	; (800856c <cal_table+0x358>)
 8008288:	2202      	movs	r2, #2
 800828a:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 800828c:	e313      	b.n	80088b6 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 800828e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	edd3 7a00 	vldr	s15, [r3]
 8008298:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829e:	edd3 7a00 	vldr	s15, [r3]
 80082a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80082a6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80082aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80082ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80082b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80082ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80082be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80082c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80082ca:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80082ce:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80082d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80082d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082de:	d900      	bls.n	80082e2 <cal_table+0xce>
		break;
 80082e0:	e2e9      	b.n	80088b6 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	edd3 7a00 	vldr	s15, [r3]
 80082e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	edd3 7a00 	vldr	s15, [r3]
 80082f2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80082f6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80082fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80082fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008302:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008306:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800830a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800830e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008312:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008316:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800831a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800831e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008326:	edd7 7a08 	vldr	s15, [r7, #32]
 800832a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008330:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8008334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008338:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800833c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	4618      	mov	r0, r3
 8008342:	f7f8 f929 	bl	8000598 <__aeabi_f2d>
 8008346:	4604      	mov	r4, r0
 8008348:	460d      	mov	r5, r1
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	4618      	mov	r0, r3
 800834e:	f7f8 f923 	bl	8000598 <__aeabi_f2d>
 8008352:	f04f 0200 	mov.w	r2, #0
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	f7f8 f975 	bl	8000648 <__aeabi_dmul>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4690      	mov	r8, r2
 8008364:	4699      	mov	r9, r3
 8008366:	edd7 7a01 	vldr	s15, [r7, #4]
 800836a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800836e:	ee17 0a90 	vmov	r0, s15
 8008372:	f7f8 f911 	bl	8000598 <__aeabi_f2d>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4640      	mov	r0, r8
 800837c:	4649      	mov	r1, r9
 800837e:	f7f8 f963 	bl	8000648 <__aeabi_dmul>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	f7f7 ffa5 	bl	80002d8 <__aeabi_dsub>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4610      	mov	r0, r2
 8008394:	4619      	mov	r1, r3
 8008396:	f7f8 fc2f 	bl	8000bf8 <__aeabi_d2f>
 800839a:	4602      	mov	r2, r0
 800839c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	ed93 7a00 	vldr	s14, [r3]
 80083a6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80083aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80083ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80083c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083c4:	eef1 7a67 	vneg.f32	s15, s15
 80083c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ca:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 80083ce:	4b67      	ldr	r3, [pc, #412]	; (800856c <cal_table+0x358>)
 80083d0:	2203      	movs	r2, #3
 80083d2:	701a      	strb	r2, [r3, #0]
		break;
 80083d4:	e26f      	b.n	80088b6 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80083d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80083e0:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80083e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80083e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80083f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80083f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80083f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80083fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008400:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008404:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008408:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800840c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008418:	d900      	bls.n	800841c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800841a:	e24c      	b.n	80088b6 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008422:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008426:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800842a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800842e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008432:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008436:	ee66 7a27 	vmul.f32	s15, s12, s15
 800843a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800843e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008442:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008446:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800844a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800844e:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008452:	edd7 7a08 	vldr	s15, [r7, #32]
 8008456:	ee77 6a67 	vsub.f32	s13, s14, s15
 800845a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008464:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	4618      	mov	r0, r3
 800846e:	f7f8 f893 	bl	8000598 <__aeabi_f2d>
 8008472:	4604      	mov	r4, r0
 8008474:	460d      	mov	r5, r1
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	4618      	mov	r0, r3
 800847a:	f7f8 f88d 	bl	8000598 <__aeabi_f2d>
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	f7f8 f8df 	bl	8000648 <__aeabi_dmul>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4690      	mov	r8, r2
 8008490:	4699      	mov	r9, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7f8 f880 	bl	8000598 <__aeabi_f2d>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4640      	mov	r0, r8
 800849e:	4649      	mov	r1, r9
 80084a0:	f7f8 f8d2 	bl	8000648 <__aeabi_dmul>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7f7 ff14 	bl	80002d8 <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	f7f8 fb9e 	bl	8000bf8 <__aeabi_d2f>
 80084bc:	4602      	mov	r2, r0
 80084be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c0:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	ed93 7a00 	vldr	s14, [r3]
 80084c8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80084d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80084de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80084e2:	eef1 7a67 	vneg.f32	s15, s15
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80084ec:	4b1f      	ldr	r3, [pc, #124]	; (800856c <cal_table+0x358>)
 80084ee:	2203      	movs	r2, #3
 80084f0:	701a      	strb	r2, [r3, #0]
		break;
 80084f2:	e1e0      	b.n	80088b6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80084f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f6:	ed93 7a00 	vldr	s14, [r3]
 80084fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008506:	d900      	bls.n	800850a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008508:	e1d5      	b.n	80088b6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800850a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008518:	4b14      	ldr	r3, [pc, #80]	; (800856c <cal_table+0x358>)
 800851a:	2204      	movs	r2, #4
 800851c:	701a      	strb	r2, [r3, #0]
		break;
 800851e:	e1ca      	b.n	80088b6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008522:	ed93 7a02 	vldr	s14, [r3, #8]
 8008526:	edd7 7a08 	vldr	s15, [r7, #32]
 800852a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800852e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008532:	da00      	bge.n	8008536 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008534:	e1bf      	b.n	80088b6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800853e:	4b0b      	ldr	r3, [pc, #44]	; (800856c <cal_table+0x358>)
 8008540:	2204      	movs	r2, #4
 8008542:	701a      	strb	r2, [r3, #0]
		break;
 8008544:	e1b7      	b.n	80088b6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8008546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008548:	ed93 7a02 	vldr	s14, [r3, #8]
 800854c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008558:	da00      	bge.n	800855c <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800855a:	e1ac      	b.n	80088b6 <cal_table+0x6a2>
			target->acceleration = 0;
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	f04f 0200 	mov.w	r2, #0
 8008562:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008564:	4b01      	ldr	r3, [pc, #4]	; (800856c <cal_table+0x358>)
 8008566:	2204      	movs	r2, #4
 8008568:	701a      	strb	r2, [r3, #0]
		break;
 800856a:	e1a4      	b.n	80088b6 <cal_table+0x6a2>
 800856c:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 8008570:	4bce      	ldr	r3, [pc, #824]	; (80088ac <cal_table+0x698>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b06      	cmp	r3, #6
 8008578:	f200 819d 	bhi.w	80088b6 <cal_table+0x6a2>
 800857c:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <cal_table+0x370>)
 800857e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008582:	bf00      	nop
 8008584:	080088b5 	.word	0x080088b5
 8008588:	080085a1 	.word	0x080085a1
 800858c:	08008713 	.word	0x08008713
 8008590:	08008829 	.word	0x08008829
 8008594:	08008855 	.word	0x08008855
 8008598:	0800885d 	.word	0x0800885d
 800859c:	08008883 	.word	0x08008883
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 80085a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a2:	ed93 7a00 	vldr	s14, [r3]
 80085a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80085aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b2:	d80a      	bhi.n	80085ca <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 80085b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80085c2:	4bba      	ldr	r3, [pc, #744]	; (80088ac <cal_table+0x698>)
 80085c4:	2202      	movs	r2, #2
 80085c6:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 80085c8:	e175      	b.n	80088b6 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80085ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80085ce:	eeb1 7a67 	vneg.f32	s14, s15
 80085d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d4:	edd3 7a00 	vldr	s15, [r3]
 80085d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80085dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085de:	edd3 7a00 	vldr	s15, [r3]
 80085e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80085e6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80085ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80085ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80085f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80085f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80085fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80085fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008602:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008606:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800860a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800860e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008612:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800861a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861e:	d900      	bls.n	8008622 <cal_table+0x40e>
		break;
 8008620:	e149      	b.n	80088b6 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	edd3 7a00 	vldr	s15, [r3]
 8008628:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	edd3 7a00 	vldr	s15, [r3]
 8008632:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008636:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800863a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800863e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008642:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008646:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800864a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800864e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008652:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8008656:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800865a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800865e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008662:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866a:	edd7 7a08 	vldr	s15, [r7, #32]
 800866e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800867c:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f7f7 ff87 	bl	8000598 <__aeabi_f2d>
 800868a:	4604      	mov	r4, r0
 800868c:	460d      	mov	r5, r1
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	4618      	mov	r0, r3
 8008692:	f7f7 ff81 	bl	8000598 <__aeabi_f2d>
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	f04f 0300 	mov.w	r3, #0
 800869e:	f7f7 ffd3 	bl	8000648 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4690      	mov	r8, r2
 80086a8:	4699      	mov	r9, r3
 80086aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80086ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80086b2:	ee17 0a90 	vmov	r0, s15
 80086b6:	f7f7 ff6f 	bl	8000598 <__aeabi_f2d>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4640      	mov	r0, r8
 80086c0:	4649      	mov	r1, r9
 80086c2:	f7f7 ffc1 	bl	8000648 <__aeabi_dmul>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f7 fe05 	bl	80002dc <__adddf3>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4610      	mov	r0, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	f7f8 fa8d 	bl	8000bf8 <__aeabi_d2f>
 80086de:	4602      	mov	r2, r0
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	ed93 7a00 	vldr	s14, [r3]
 80086ea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80086ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80086f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80086f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800870a:	4b68      	ldr	r3, [pc, #416]	; (80088ac <cal_table+0x698>)
 800870c:	2203      	movs	r2, #3
 800870e:	701a      	strb	r2, [r3, #0]
		break;
 8008710:	e0d1      	b.n	80088b6 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008714:	ed93 7a02 	vldr	s14, [r3, #8]
 8008718:	edd7 7a08 	vldr	s15, [r7, #32]
 800871c:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008720:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008724:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008728:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 800872c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008730:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008734:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008738:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800873c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008740:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008744:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008748:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 800874c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008754:	d900      	bls.n	8008758 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008756:	e0ae      	b.n	80088b6 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875a:	ed93 7a02 	vldr	s14, [r3, #8]
 800875e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008762:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008766:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800876a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800876e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008772:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008776:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800877a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800877e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008782:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008786:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800878a:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800878e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008792:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800879c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a0:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80087a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7f7 fef5 	bl	8000598 <__aeabi_f2d>
 80087ae:	4604      	mov	r4, r0
 80087b0:	460d      	mov	r5, r1
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f7 feef 	bl	8000598 <__aeabi_f2d>
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	f04f 0300 	mov.w	r3, #0
 80087c2:	f7f7 ff41 	bl	8000648 <__aeabi_dmul>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4690      	mov	r8, r2
 80087cc:	4699      	mov	r9, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7f7 fee2 	bl	8000598 <__aeabi_f2d>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4640      	mov	r0, r8
 80087da:	4649      	mov	r1, r9
 80087dc:	f7f7 ff34 	bl	8000648 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4620      	mov	r0, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f7 fd78 	bl	80002dc <__adddf3>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4610      	mov	r0, r2
 80087f2:	4619      	mov	r1, r3
 80087f4:	f7f8 fa00 	bl	8000bf8 <__aeabi_d2f>
 80087f8:	4602      	mov	r2, r0
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 80087fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008800:	ed93 7a00 	vldr	s14, [r3]
 8008804:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008808:	edd7 7a01 	vldr	s15, [r7, #4]
 800880c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 800881a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800881c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881e:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008820:	4b22      	ldr	r3, [pc, #136]	; (80088ac <cal_table+0x698>)
 8008822:	2203      	movs	r2, #3
 8008824:	701a      	strb	r2, [r3, #0]
		break;
 8008826:	e046      	b.n	80088b6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882a:	ed93 7a00 	vldr	s14, [r3]
 800882e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883a:	da00      	bge.n	800883e <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800883c:	e03b      	b.n	80088b6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800883e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008842:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008846:	f04f 0200 	mov.w	r2, #0
 800884a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800884c:	4b17      	ldr	r3, [pc, #92]	; (80088ac <cal_table+0x698>)
 800884e:	2204      	movs	r2, #4
 8008850:	701a      	strb	r2, [r3, #0]
		break;
 8008852:	e030      	b.n	80088b6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008854:	4b16      	ldr	r3, [pc, #88]	; (80088b0 <cal_table+0x69c>)
 8008856:	2201      	movs	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]
		break;
 800885a:	e02c      	b.n	80088b6 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 800885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008862:	edd7 7a08 	vldr	s15, [r7, #32]
 8008866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d900      	bls.n	8008872 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008870:	e021      	b.n	80088b6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800887a:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <cal_table+0x698>)
 800887c:	2204      	movs	r2, #4
 800887e:	701a      	strb	r2, [r3, #0]
		break;
 8008880:	e019      	b.n	80088b6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008884:	ed93 7a02 	vldr	s14, [r3, #8]
 8008888:	edd7 7a08 	vldr	s15, [r7, #32]
 800888c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008894:	d900      	bls.n	8008898 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008896:	e00e      	b.n	80088b6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088a0:	4b02      	ldr	r3, [pc, #8]	; (80088ac <cal_table+0x698>)
 80088a2:	2204      	movs	r2, #4
 80088a4:	701a      	strb	r2, [r3, #0]
		break;
 80088a6:	e006      	b.n	80088b6 <cal_table+0x6a2>
		break;
 80088a8:	bf00      	nop
 80088aa:	e004      	b.n	80088b6 <cal_table+0x6a2>
 80088ac:	20000804 	.word	0x20000804
 80088b0:	20000805 	.word	0x20000805
		break;
 80088b4:	bf00      	nop
	}

}

}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 80088c0:	b004      	add	sp, #16
 80088c2:	4770      	bx	lr
 80088c4:	0000      	movs	r0, r0
	...

080088c8 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 80088c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088cc:	b08c      	sub	sp, #48	; 0x30
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	eef0 6a40 	vmov.f32	s13, s0
 80088d4:	eeb0 7a60 	vmov.f32	s14, s1
 80088d8:	eef0 7a41 	vmov.f32	s15, s2
 80088dc:	6138      	str	r0, [r7, #16]
 80088de:	edc7 6a05 	vstr	s13, [r7, #20]
 80088e2:	ed87 7a06 	vstr	s14, [r7, #24]
 80088e6:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 80088ea:	4be7      	ldr	r3, [pc, #924]	; (8008c88 <cal_mollifier_table+0x3c0>)
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 80088ee:	4be7      	ldr	r3, [pc, #924]	; (8008c8c <cal_mollifier_table+0x3c4>)
 80088f0:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 80088f2:	4be7      	ldr	r3, [pc, #924]	; (8008c90 <cal_mollifier_table+0x3c8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7f7 fe4e 	bl	8000598 <__aeabi_f2d>
 80088fc:	a3da      	add	r3, pc, #872	; (adr r3, 8008c68 <cal_mollifier_table+0x3a0>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fceb 	bl	80002dc <__adddf3>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4610      	mov	r0, r2
 800890c:	4619      	mov	r1, r3
 800890e:	f7f8 f973 	bl	8000bf8 <__aeabi_d2f>
 8008912:	4603      	mov	r3, r0
 8008914:	4ade      	ldr	r2, [pc, #888]	; (8008c90 <cal_mollifier_table+0x3c8>)
 8008916:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008918:	edd7 7a05 	vldr	s15, [r7, #20]
 800891c:	eef0 7ae7 	vabs.f32	s15, s15
 8008920:	ee17 0a90 	vmov	r0, s15
 8008924:	f7f7 fe38 	bl	8000598 <__aeabi_f2d>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	f7f7 fcd6 	bl	80002dc <__adddf3>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	a3cd      	add	r3, pc, #820	; (adr r3, 8008c70 <cal_mollifier_table+0x3a8>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 ffad 	bl	800089c <__aeabi_ddiv>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	a3cb      	add	r3, pc, #812	; (adr r3, 8008c78 <cal_mollifier_table+0x3b0>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fe7a 	bl	8000648 <__aeabi_dmul>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4614      	mov	r4, r2
 800895a:	461d      	mov	r5, r3
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	4618      	mov	r0, r3
 8008960:	f7f7 fe1a 	bl	8000598 <__aeabi_f2d>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4620      	mov	r0, r4
 800896a:	4629      	mov	r1, r5
 800896c:	f7f7 ff96 	bl	800089c <__aeabi_ddiv>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	f7f8 f93e 	bl	8000bf8 <__aeabi_d2f>
 800897c:	4603      	mov	r3, r0
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008980:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008984:	eef1 7a67 	vneg.f32	s15, s15
 8008988:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800898c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008990:	4bbf      	ldr	r3, [pc, #764]	; (8008c90 <cal_mollifier_table+0x3c8>)
 8008992:	edd3 7a00 	vldr	s15, [r3]
 8008996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800899a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899e:	f140 8698 	bpl.w	80096d2 <cal_mollifier_table+0xe0a>
 80089a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80089ae:	4bb8      	ldr	r3, [pc, #736]	; (8008c90 <cal_mollifier_table+0x3c8>)
 80089b0:	edd3 7a00 	vldr	s15, [r3]
 80089b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	f340 8689 	ble.w	80096d2 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 80089c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80089d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089da:	ee17 0a90 	vmov	r0, s15
 80089de:	f7f7 fddb 	bl	8000598 <__aeabi_f2d>
 80089e2:	a3a3      	add	r3, pc, #652	; (adr r3, 8008c70 <cal_mollifier_table+0x3a8>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 ff58 	bl	800089c <__aeabi_ddiv>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4614      	mov	r4, r2
 80089f2:	461d      	mov	r5, r3
 80089f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089f8:	eeb1 7a67 	vneg.f32	s14, s15
 80089fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a04:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008a08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a14:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008a18:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008a1c:	4b9c      	ldr	r3, [pc, #624]	; (8008c90 <cal_mollifier_table+0x3c8>)
 8008a1e:	ed93 6a00 	vldr	s12, [r3]
 8008a22:	4b9b      	ldr	r3, [pc, #620]	; (8008c90 <cal_mollifier_table+0x3c8>)
 8008a24:	edd3 7a00 	vldr	s15, [r3]
 8008a28:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008a2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008a30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008a34:	ee16 0a90 	vmov	r0, s13
 8008a38:	f7f7 fdae 	bl	8000598 <__aeabi_f2d>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	ec43 2b10 	vmov	d0, r2, r3
 8008a44:	f01a f850 	bl	8022ae8 <exp>
 8008a48:	ec53 2b10 	vmov	r2, r3, d0
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f7 fdfa 	bl	8000648 <__aeabi_dmul>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f7f8 f8cc 	bl	8000bf8 <__aeabi_d2f>
 8008a60:	4602      	mov	r2, r0
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008a66:	4b8a      	ldr	r3, [pc, #552]	; (8008c90 <cal_mollifier_table+0x3c8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7f7 fd94 	bl	8000598 <__aeabi_f2d>
 8008a70:	4604      	mov	r4, r0
 8008a72:	460d      	mov	r5, r1
 8008a74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a78:	eef1 7a67 	vneg.f32	s15, s15
 8008a7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008a80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a84:	ee16 0a90 	vmov	r0, s13
 8008a88:	f7f7 fd86 	bl	8000598 <__aeabi_f2d>
 8008a8c:	a37c      	add	r3, pc, #496	; (adr r3, 8008c80 <cal_mollifier_table+0x3b8>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 ff03 	bl	800089c <__aeabi_ddiv>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4690      	mov	r8, r2
 8008a9c:	4699      	mov	r9, r3
 8008a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aa0:	f7f7 fd7a 	bl	8000598 <__aeabi_f2d>
 8008aa4:	a370      	add	r3, pc, #448	; (adr r3, 8008c68 <cal_mollifier_table+0x3a0>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f7f7 fdcd 	bl	8000648 <__aeabi_dmul>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	f7f7 fc11 	bl	80002dc <__adddf3>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f8 f833 	bl	8000b2c <__aeabi_dcmplt>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8163 	beq.w	8008d94 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008ace:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ad2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae2:	ee17 0a90 	vmov	r0, s15
 8008ae6:	f7f7 fd57 	bl	8000598 <__aeabi_f2d>
 8008aea:	a361      	add	r3, pc, #388	; (adr r3, 8008c70 <cal_mollifier_table+0x3a8>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fed4 	bl	800089c <__aeabi_ddiv>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008afc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b00:	eeb1 7a67 	vneg.f32	s14, s15
 8008b04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b14:	ee16 0a90 	vmov	r0, s13
 8008b18:	f7f7 fd3e 	bl	8000598 <__aeabi_f2d>
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	460d      	mov	r5, r1
 8008b20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b24:	eef1 7a67 	vneg.f32	s15, s15
 8008b28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b30:	ee16 0a90 	vmov	r0, s13
 8008b34:	f7f7 fd30 	bl	8000598 <__aeabi_f2d>
 8008b38:	a351      	add	r3, pc, #324	; (adr r3, 8008c80 <cal_mollifier_table+0x3b8>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fead 	bl	800089c <__aeabi_ddiv>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 fd7d 	bl	8000648 <__aeabi_dmul>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4690      	mov	r8, r2
 8008b54:	4699      	mov	r9, r3
 8008b56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b5e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008b62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b66:	ee16 0a90 	vmov	r0, s13
 8008b6a:	f7f7 fd15 	bl	8000598 <__aeabi_f2d>
 8008b6e:	4604      	mov	r4, r0
 8008b70:	460d      	mov	r5, r1
 8008b72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b76:	eef1 7a67 	vneg.f32	s15, s15
 8008b7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b82:	ee16 0a90 	vmov	r0, s13
 8008b86:	f7f7 fd07 	bl	8000598 <__aeabi_f2d>
 8008b8a:	a33d      	add	r3, pc, #244	; (adr r3, 8008c80 <cal_mollifier_table+0x3b8>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f7f7 fe84 	bl	800089c <__aeabi_ddiv>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4692      	mov	sl, r2
 8008b9a:	469b      	mov	fp, r3
 8008b9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ba0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ba4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ba8:	ee16 0a90 	vmov	r0, s13
 8008bac:	f7f7 fcf4 	bl	8000598 <__aeabi_f2d>
 8008bb0:	a333      	add	r3, pc, #204	; (adr r3, 8008c80 <cal_mollifier_table+0x3b8>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fe71 	bl	800089c <__aeabi_ddiv>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4650      	mov	r0, sl
 8008bc0:	4659      	mov	r1, fp
 8008bc2:	f7f7 fd41 	bl	8000648 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 fb85 	bl	80002dc <__adddf3>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 fe5f 	bl	800089c <__aeabi_ddiv>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4690      	mov	r8, r2
 8008be4:	4699      	mov	r9, r3
 8008be6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bf6:	ee16 0a90 	vmov	r0, s13
 8008bfa:	f7f7 fccd 	bl	8000598 <__aeabi_f2d>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c06:	eef1 7a67 	vneg.f32	s15, s15
 8008c0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c12:	ee16 0a90 	vmov	r0, s13
 8008c16:	f7f7 fcbf 	bl	8000598 <__aeabi_f2d>
 8008c1a:	a319      	add	r3, pc, #100	; (adr r3, 8008c80 <cal_mollifier_table+0x3b8>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 fe3c 	bl	800089c <__aeabi_ddiv>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4692      	mov	sl, r2
 8008c2a:	469b      	mov	fp, r3
 8008c2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c38:	ee16 0a90 	vmov	r0, s13
 8008c3c:	f7f7 fcac 	bl	8000598 <__aeabi_f2d>
 8008c40:	a30f      	add	r3, pc, #60	; (adr r3, 8008c80 <cal_mollifier_table+0x3b8>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fe29 	bl	800089c <__aeabi_ddiv>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4650      	mov	r0, sl
 8008c50:	4659      	mov	r1, fp
 8008c52:	f7f7 fcf9 	bl	8000648 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 fb3d 	bl	80002dc <__adddf3>
 8008c62:	4602      	mov	r2, r0
 8008c64:	e016      	b.n	8008c94 <cal_mollifier_table+0x3cc>
 8008c66:	bf00      	nop
 8008c68:	d2f1a9fc 	.word	0xd2f1a9fc
 8008c6c:	3f50624d 	.word	0x3f50624d
 8008c70:	f9db22d1 	.word	0xf9db22d1
 8008c74:	3fdc6a7e 	.word	0x3fdc6a7e
 8008c78:	362cef38 	.word	0x362cef38
 8008c7c:	3fd78b56 	.word	0x3fd78b56
 8008c80:	04189375 	.word	0x04189375
 8008c84:	3ff50e56 	.word	0x3ff50e56
 8008c88:	41700000 	.word	0x41700000
 8008c8c:	c1700000 	.word	0xc1700000
 8008c90:	20000800 	.word	0x20000800
 8008c94:	460b      	mov	r3, r1
 8008c96:	4640      	mov	r0, r8
 8008c98:	4649      	mov	r1, r9
 8008c9a:	f7f7 fdff 	bl	800089c <__aeabi_ddiv>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ca6:	f7f7 fccf 	bl	8000648 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4692      	mov	sl, r2
 8008cb0:	469b      	mov	fp, r3
 8008cb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cb6:	eeb1 7a67 	vneg.f32	s14, s15
 8008cba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008cc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cca:	ee16 0a90 	vmov	r0, s13
 8008cce:	f7f7 fc63 	bl	8000598 <__aeabi_f2d>
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008cde:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008ce2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ce6:	ee16 0a90 	vmov	r0, s13
 8008cea:	f7f7 fc55 	bl	8000598 <__aeabi_f2d>
 8008cee:	4680      	mov	r8, r0
 8008cf0:	4689      	mov	r9, r1
 8008cf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cf6:	eef1 7a67 	vneg.f32	s15, s15
 8008cfa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d02:	ee16 0a90 	vmov	r0, s13
 8008d06:	f7f7 fc47 	bl	8000598 <__aeabi_f2d>
 8008d0a:	a3e1      	add	r3, pc, #900	; (adr r3, 8009090 <cal_mollifier_table+0x7c8>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 fdc4 	bl	800089c <__aeabi_ddiv>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008d1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d28:	ee16 0a90 	vmov	r0, s13
 8008d2c:	f7f7 fc34 	bl	8000598 <__aeabi_f2d>
 8008d30:	a3d7      	add	r3, pc, #860	; (adr r3, 8009090 <cal_mollifier_table+0x7c8>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fdb1 	bl	800089c <__aeabi_ddiv>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d42:	f7f7 fc81 	bl	8000648 <__aeabi_dmul>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fac5 	bl	80002dc <__adddf3>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4620      	mov	r0, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7f7 fd9f 	bl	800089c <__aeabi_ddiv>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	ec43 2b17 	vmov	d7, r2, r3
 8008d66:	eeb0 0a47 	vmov.f32	s0, s14
 8008d6a:	eef0 0a67 	vmov.f32	s1, s15
 8008d6e:	f019 febb 	bl	8022ae8 <exp>
 8008d72:	ec53 2b10 	vmov	r2, r3, d0
 8008d76:	4650      	mov	r0, sl
 8008d78:	4659      	mov	r1, fp
 8008d7a:	f7f7 fc65 	bl	8000648 <__aeabi_dmul>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	f7f7 ff37 	bl	8000bf8 <__aeabi_d2f>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008d90:	f000 bcb4 	b.w	80096fc <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008d94:	4bc0      	ldr	r3, [pc, #768]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008d96:	edd3 7a00 	vldr	s15, [r3]
 8008d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da2:	f140 817b 	bpl.w	800909c <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008da6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008daa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dba:	ee17 0a90 	vmov	r0, s15
 8008dbe:	f7f7 fbeb 	bl	8000598 <__aeabi_f2d>
 8008dc2:	a3af      	add	r3, pc, #700	; (adr r3, 8009080 <cal_mollifier_table+0x7b8>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fd68 	bl	800089c <__aeabi_ddiv>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008dd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dd8:	eeb1 7a67 	vneg.f32	s14, s15
 8008ddc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008de8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008dec:	ee16 0a90 	vmov	r0, s13
 8008df0:	f7f7 fbd2 	bl	8000598 <__aeabi_f2d>
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	4ba7      	ldr	r3, [pc, #668]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7f7 fbcb 	bl	8000598 <__aeabi_f2d>
 8008e02:	4680      	mov	r8, r0
 8008e04:	4689      	mov	r9, r1
 8008e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e08:	f7f7 fbc6 	bl	8000598 <__aeabi_f2d>
 8008e0c:	a39e      	add	r3, pc, #632	; (adr r3, 8009088 <cal_mollifier_table+0x7c0>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fc19 	bl	8000648 <__aeabi_dmul>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	f7f7 fa5b 	bl	80002d8 <__aeabi_dsub>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fc0d 	bl	8000648 <__aeabi_dmul>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	e9c7 2300 	strd	r2, r3, [r7]
 8008e36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e3e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e46:	ee16 0a90 	vmov	r0, s13
 8008e4a:	f7f7 fba5 	bl	8000598 <__aeabi_f2d>
 8008e4e:	4680      	mov	r8, r0
 8008e50:	4689      	mov	r9, r1
 8008e52:	4b91      	ldr	r3, [pc, #580]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7f7 fb9e 	bl	8000598 <__aeabi_f2d>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e62:	f7f7 fb99 	bl	8000598 <__aeabi_f2d>
 8008e66:	a388      	add	r3, pc, #544	; (adr r3, 8009088 <cal_mollifier_table+0x7c0>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 fbec 	bl	8000648 <__aeabi_dmul>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4620      	mov	r0, r4
 8008e76:	4629      	mov	r1, r5
 8008e78:	f7f7 fa2e 	bl	80002d8 <__aeabi_dsub>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4692      	mov	sl, r2
 8008e82:	469b      	mov	fp, r3
 8008e84:	4b84      	ldr	r3, [pc, #528]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7f7 fb85 	bl	8000598 <__aeabi_f2d>
 8008e8e:	4604      	mov	r4, r0
 8008e90:	460d      	mov	r5, r1
 8008e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e94:	f7f7 fb80 	bl	8000598 <__aeabi_f2d>
 8008e98:	a37b      	add	r3, pc, #492	; (adr r3, 8009088 <cal_mollifier_table+0x7c0>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fbd3 	bl	8000648 <__aeabi_dmul>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fa15 	bl	80002d8 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4650      	mov	r0, sl
 8008eb4:	4659      	mov	r1, fp
 8008eb6:	f7f7 fbc7 	bl	8000648 <__aeabi_dmul>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	f7f7 fa09 	bl	80002d8 <__aeabi_dsub>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ece:	f7f7 fce5 	bl	800089c <__aeabi_ddiv>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	e9c7 2300 	strd	r2, r3, [r7]
 8008eda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ede:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ee2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008ee6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008eea:	ee16 0a90 	vmov	r0, s13
 8008eee:	f7f7 fb53 	bl	8000598 <__aeabi_f2d>
 8008ef2:	4680      	mov	r8, r0
 8008ef4:	4689      	mov	r9, r1
 8008ef6:	4b68      	ldr	r3, [pc, #416]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7f7 fb4c 	bl	8000598 <__aeabi_f2d>
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f06:	f7f7 fb47 	bl	8000598 <__aeabi_f2d>
 8008f0a:	a35f      	add	r3, pc, #380	; (adr r3, 8009088 <cal_mollifier_table+0x7c0>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	f7f7 fb9a 	bl	8000648 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7f7 f9dc 	bl	80002d8 <__aeabi_dsub>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4692      	mov	sl, r2
 8008f26:	469b      	mov	fp, r3
 8008f28:	4b5b      	ldr	r3, [pc, #364]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7f7 fb33 	bl	8000598 <__aeabi_f2d>
 8008f32:	4604      	mov	r4, r0
 8008f34:	460d      	mov	r5, r1
 8008f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f38:	f7f7 fb2e 	bl	8000598 <__aeabi_f2d>
 8008f3c:	a352      	add	r3, pc, #328	; (adr r3, 8009088 <cal_mollifier_table+0x7c0>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 fb81 	bl	8000648 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 f9c3 	bl	80002d8 <__aeabi_dsub>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4650      	mov	r0, sl
 8008f58:	4659      	mov	r1, fp
 8008f5a:	f7f7 fb75 	bl	8000648 <__aeabi_dmul>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 f9b7 	bl	80002d8 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f72:	f7f7 fc93 	bl	800089c <__aeabi_ddiv>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f7e:	f7f7 fb63 	bl	8000648 <__aeabi_dmul>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008f8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f8e:	eeb1 7a67 	vneg.f32	s14, s15
 8008f92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fa2:	ee16 0a90 	vmov	r0, s13
 8008fa6:	f7f7 faf7 	bl	8000598 <__aeabi_f2d>
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fb2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fb6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008fba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fbe:	ee16 0a90 	vmov	r0, s13
 8008fc2:	f7f7 fae9 	bl	8000598 <__aeabi_f2d>
 8008fc6:	4682      	mov	sl, r0
 8008fc8:	468b      	mov	fp, r1
 8008fca:	4b33      	ldr	r3, [pc, #204]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 fae2 	bl	8000598 <__aeabi_f2d>
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	460d      	mov	r5, r1
 8008fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fda:	f7f7 fadd 	bl	8000598 <__aeabi_f2d>
 8008fde:	a32a      	add	r3, pc, #168	; (adr r3, 8009088 <cal_mollifier_table+0x7c0>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 fb30 	bl	8000648 <__aeabi_dmul>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4620      	mov	r0, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f7f7 f972 	bl	80002d8 <__aeabi_dsub>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	e9c7 2300 	strd	r2, r3, [r7]
 8008ffc:	4b26      	ldr	r3, [pc, #152]	; (8009098 <cal_mollifier_table+0x7d0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f7f7 fac9 	bl	8000598 <__aeabi_f2d>
 8009006:	4604      	mov	r4, r0
 8009008:	460d      	mov	r5, r1
 800900a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800900c:	f7f7 fac4 	bl	8000598 <__aeabi_f2d>
 8009010:	a31d      	add	r3, pc, #116	; (adr r3, 8009088 <cal_mollifier_table+0x7c0>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 fb17 	bl	8000648 <__aeabi_dmul>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 f959 	bl	80002d8 <__aeabi_dsub>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800902e:	f7f7 fb0b 	bl	8000648 <__aeabi_dmul>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4650      	mov	r0, sl
 8009038:	4659      	mov	r1, fp
 800903a:	f7f7 f94d 	bl	80002d8 <__aeabi_dsub>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4640      	mov	r0, r8
 8009044:	4649      	mov	r1, r9
 8009046:	f7f7 fc29 	bl	800089c <__aeabi_ddiv>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	ec43 2b17 	vmov	d7, r2, r3
 8009052:	eeb0 0a47 	vmov.f32	s0, s14
 8009056:	eef0 0a67 	vmov.f32	s1, s15
 800905a:	f019 fd45 	bl	8022ae8 <exp>
 800905e:	ec53 2b10 	vmov	r2, r3, d0
 8009062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009066:	f7f7 faef 	bl	8000648 <__aeabi_dmul>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	f7f7 fdc1 	bl	8000bf8 <__aeabi_d2f>
 8009076:	4602      	mov	r2, r0
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800907c:	e33e      	b.n	80096fc <cal_mollifier_table+0xe34>
 800907e:	bf00      	nop
 8009080:	f9db22d1 	.word	0xf9db22d1
 8009084:	3fdc6a7e 	.word	0x3fdc6a7e
 8009088:	d2f1a9fc 	.word	0xd2f1a9fc
 800908c:	3f50624d 	.word	0x3f50624d
 8009090:	04189375 	.word	0x04189375
 8009094:	3ff50e56 	.word	0x3ff50e56
 8009098:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 800909c:	4bd4      	ldr	r3, [pc, #848]	; (80093f0 <cal_mollifier_table+0xb28>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f7 fa79 	bl	8000598 <__aeabi_f2d>
 80090a6:	4604      	mov	r4, r0
 80090a8:	460d      	mov	r5, r1
 80090aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80090b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090b6:	ee16 0a90 	vmov	r0, s13
 80090ba:	f7f7 fa6d 	bl	8000598 <__aeabi_f2d>
 80090be:	a3c6      	add	r3, pc, #792	; (adr r3, 80093d8 <cal_mollifier_table+0xb10>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f7f7 fbea 	bl	800089c <__aeabi_ddiv>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4690      	mov	r8, r2
 80090ce:	4699      	mov	r9, r3
 80090d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d2:	f7f7 fa61 	bl	8000598 <__aeabi_f2d>
 80090d6:	a3c2      	add	r3, pc, #776	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f7f7 fab4 	bl	8000648 <__aeabi_dmul>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 f8f8 	bl	80002dc <__adddf3>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 fd1a 	bl	8000b2c <__aeabi_dcmplt>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 817a 	beq.w	80093f4 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009100:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009104:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009114:	ee17 0a90 	vmov	r0, s15
 8009118:	f7f7 fa3e 	bl	8000598 <__aeabi_f2d>
 800911c:	a3b2      	add	r3, pc, #712	; (adr r3, 80093e8 <cal_mollifier_table+0xb20>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f7f7 fbbb 	bl	800089c <__aeabi_ddiv>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800912e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009132:	eeb1 7a67 	vneg.f32	s14, s15
 8009136:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800913a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009142:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009146:	ee16 0a90 	vmov	r0, s13
 800914a:	f7f7 fa25 	bl	8000598 <__aeabi_f2d>
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	4ba7      	ldr	r3, [pc, #668]	; (80093f0 <cal_mollifier_table+0xb28>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f7f7 fa1e 	bl	8000598 <__aeabi_f2d>
 800915c:	4680      	mov	r8, r0
 800915e:	4689      	mov	r9, r1
 8009160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009162:	f7f7 fa19 	bl	8000598 <__aeabi_f2d>
 8009166:	a39e      	add	r3, pc, #632	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 fa6c 	bl	8000648 <__aeabi_dmul>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	f7f7 f8ae 	bl	80002d8 <__aeabi_dsub>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4620      	mov	r0, r4
 8009182:	4629      	mov	r1, r5
 8009184:	f7f7 fa60 	bl	8000648 <__aeabi_dmul>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	e9c7 2300 	strd	r2, r3, [r7]
 8009190:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009194:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009198:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800919c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091a0:	ee16 0a90 	vmov	r0, s13
 80091a4:	f7f7 f9f8 	bl	8000598 <__aeabi_f2d>
 80091a8:	4680      	mov	r8, r0
 80091aa:	4689      	mov	r9, r1
 80091ac:	4b90      	ldr	r3, [pc, #576]	; (80093f0 <cal_mollifier_table+0xb28>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7f7 f9f1 	bl	8000598 <__aeabi_f2d>
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091bc:	f7f7 f9ec 	bl	8000598 <__aeabi_f2d>
 80091c0:	a387      	add	r3, pc, #540	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 fa3f 	bl	8000648 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4620      	mov	r0, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	f7f7 f881 	bl	80002d8 <__aeabi_dsub>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4692      	mov	sl, r2
 80091dc:	469b      	mov	fp, r3
 80091de:	4b84      	ldr	r3, [pc, #528]	; (80093f0 <cal_mollifier_table+0xb28>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f7 f9d8 	bl	8000598 <__aeabi_f2d>
 80091e8:	4604      	mov	r4, r0
 80091ea:	460d      	mov	r5, r1
 80091ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ee:	f7f7 f9d3 	bl	8000598 <__aeabi_f2d>
 80091f2:	a37b      	add	r3, pc, #492	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 fa26 	bl	8000648 <__aeabi_dmul>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4620      	mov	r0, r4
 8009202:	4629      	mov	r1, r5
 8009204:	f7f7 f868 	bl	80002d8 <__aeabi_dsub>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4650      	mov	r0, sl
 800920e:	4659      	mov	r1, fp
 8009210:	f7f7 fa1a 	bl	8000648 <__aeabi_dmul>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 f85c 	bl	80002d8 <__aeabi_dsub>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009228:	f7f7 fb38 	bl	800089c <__aeabi_ddiv>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	e9c7 2300 	strd	r2, r3, [r7]
 8009234:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009238:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800923c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009240:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009244:	ee16 0a90 	vmov	r0, s13
 8009248:	f7f7 f9a6 	bl	8000598 <__aeabi_f2d>
 800924c:	4680      	mov	r8, r0
 800924e:	4689      	mov	r9, r1
 8009250:	4b67      	ldr	r3, [pc, #412]	; (80093f0 <cal_mollifier_table+0xb28>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f7f7 f99f 	bl	8000598 <__aeabi_f2d>
 800925a:	4604      	mov	r4, r0
 800925c:	460d      	mov	r5, r1
 800925e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009260:	f7f7 f99a 	bl	8000598 <__aeabi_f2d>
 8009264:	a35e      	add	r3, pc, #376	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f7 f9ed 	bl	8000648 <__aeabi_dmul>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4620      	mov	r0, r4
 8009274:	4629      	mov	r1, r5
 8009276:	f7f7 f82f 	bl	80002d8 <__aeabi_dsub>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4692      	mov	sl, r2
 8009280:	469b      	mov	fp, r3
 8009282:	4b5b      	ldr	r3, [pc, #364]	; (80093f0 <cal_mollifier_table+0xb28>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7f7 f986 	bl	8000598 <__aeabi_f2d>
 800928c:	4604      	mov	r4, r0
 800928e:	460d      	mov	r5, r1
 8009290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009292:	f7f7 f981 	bl	8000598 <__aeabi_f2d>
 8009296:	a352      	add	r3, pc, #328	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f7 f9d4 	bl	8000648 <__aeabi_dmul>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4620      	mov	r0, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	f7f7 f816 	bl	80002d8 <__aeabi_dsub>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4650      	mov	r0, sl
 80092b2:	4659      	mov	r1, fp
 80092b4:	f7f7 f9c8 	bl	8000648 <__aeabi_dmul>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4640      	mov	r0, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	f7f7 f80a 	bl	80002d8 <__aeabi_dsub>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092cc:	f7f7 fae6 	bl	800089c <__aeabi_ddiv>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092d8:	f7f7 f9b6 	bl	8000648 <__aeabi_dmul>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80092e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092e8:	eeb1 7a67 	vneg.f32	s14, s15
 80092ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092fc:	ee16 0a90 	vmov	r0, s13
 8009300:	f7f7 f94a 	bl	8000598 <__aeabi_f2d>
 8009304:	4680      	mov	r8, r0
 8009306:	4689      	mov	r9, r1
 8009308:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800930c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009310:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009314:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009318:	ee16 0a90 	vmov	r0, s13
 800931c:	f7f7 f93c 	bl	8000598 <__aeabi_f2d>
 8009320:	4682      	mov	sl, r0
 8009322:	468b      	mov	fp, r1
 8009324:	4b32      	ldr	r3, [pc, #200]	; (80093f0 <cal_mollifier_table+0xb28>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4618      	mov	r0, r3
 800932a:	f7f7 f935 	bl	8000598 <__aeabi_f2d>
 800932e:	4604      	mov	r4, r0
 8009330:	460d      	mov	r5, r1
 8009332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009334:	f7f7 f930 	bl	8000598 <__aeabi_f2d>
 8009338:	a329      	add	r3, pc, #164	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f7 f983 	bl	8000648 <__aeabi_dmul>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4620      	mov	r0, r4
 8009348:	4629      	mov	r1, r5
 800934a:	f7f6 ffc5 	bl	80002d8 <__aeabi_dsub>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	e9c7 2300 	strd	r2, r3, [r7]
 8009356:	4b26      	ldr	r3, [pc, #152]	; (80093f0 <cal_mollifier_table+0xb28>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4618      	mov	r0, r3
 800935c:	f7f7 f91c 	bl	8000598 <__aeabi_f2d>
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009366:	f7f7 f917 	bl	8000598 <__aeabi_f2d>
 800936a:	a31d      	add	r3, pc, #116	; (adr r3, 80093e0 <cal_mollifier_table+0xb18>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	f7f7 f96a 	bl	8000648 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4620      	mov	r0, r4
 800937a:	4629      	mov	r1, r5
 800937c:	f7f6 ffac 	bl	80002d8 <__aeabi_dsub>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009388:	f7f7 f95e 	bl	8000648 <__aeabi_dmul>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4650      	mov	r0, sl
 8009392:	4659      	mov	r1, fp
 8009394:	f7f6 ffa0 	bl	80002d8 <__aeabi_dsub>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f7 fa7c 	bl	800089c <__aeabi_ddiv>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	ec43 2b17 	vmov	d7, r2, r3
 80093ac:	eeb0 0a47 	vmov.f32	s0, s14
 80093b0:	eef0 0a67 	vmov.f32	s1, s15
 80093b4:	f019 fb98 	bl	8022ae8 <exp>
 80093b8:	ec53 2b10 	vmov	r2, r3, d0
 80093bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093c0:	f7f7 f942 	bl	8000648 <__aeabi_dmul>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4610      	mov	r0, r2
 80093ca:	4619      	mov	r1, r3
 80093cc:	f7f7 fc14 	bl	8000bf8 <__aeabi_d2f>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80093d6:	e191      	b.n	80096fc <cal_mollifier_table+0xe34>
 80093d8:	04189375 	.word	0x04189375
 80093dc:	3ff50e56 	.word	0x3ff50e56
 80093e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80093e4:	3f50624d 	.word	0x3f50624d
 80093e8:	f9db22d1 	.word	0xf9db22d1
 80093ec:	3fdc6a7e 	.word	0x3fdc6a7e
 80093f0:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80093fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80093fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009406:	edd7 7a05 	vldr	s15, [r7, #20]
 800940a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940e:	ee17 0a90 	vmov	r0, s15
 8009412:	f7f7 f8c1 	bl	8000598 <__aeabi_f2d>
 8009416:	a3c0      	add	r3, pc, #768	; (adr r3, 8009718 <cal_mollifier_table+0xe50>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f7 fa3e 	bl	800089c <__aeabi_ddiv>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009428:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800942c:	eeb1 7a67 	vneg.f32	s14, s15
 8009430:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009438:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800943c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009440:	ee16 0a90 	vmov	r0, s13
 8009444:	f7f7 f8a8 	bl	8000598 <__aeabi_f2d>
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	4bb0      	ldr	r3, [pc, #704]	; (8009710 <cal_mollifier_table+0xe48>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4618      	mov	r0, r3
 8009452:	f7f7 f8a1 	bl	8000598 <__aeabi_f2d>
 8009456:	4680      	mov	r8, r0
 8009458:	4689      	mov	r9, r1
 800945a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800945c:	f7f7 f89c 	bl	8000598 <__aeabi_f2d>
 8009460:	a3a9      	add	r3, pc, #676	; (adr r3, 8009708 <cal_mollifier_table+0xe40>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f7f7 f8ef 	bl	8000648 <__aeabi_dmul>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4640      	mov	r0, r8
 8009470:	4649      	mov	r1, r9
 8009472:	f7f6 ff31 	bl	80002d8 <__aeabi_dsub>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4620      	mov	r0, r4
 800947c:	4629      	mov	r1, r5
 800947e:	f7f7 f8e3 	bl	8000648 <__aeabi_dmul>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	e9c7 2300 	strd	r2, r3, [r7]
 800948a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800948e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009492:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009496:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800949a:	ee16 0a90 	vmov	r0, s13
 800949e:	f7f7 f87b 	bl	8000598 <__aeabi_f2d>
 80094a2:	4680      	mov	r8, r0
 80094a4:	4689      	mov	r9, r1
 80094a6:	4b9a      	ldr	r3, [pc, #616]	; (8009710 <cal_mollifier_table+0xe48>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f7 f874 	bl	8000598 <__aeabi_f2d>
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094b6:	f7f7 f86f 	bl	8000598 <__aeabi_f2d>
 80094ba:	a393      	add	r3, pc, #588	; (adr r3, 8009708 <cal_mollifier_table+0xe40>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 f8c2 	bl	8000648 <__aeabi_dmul>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4620      	mov	r0, r4
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f6 ff04 	bl	80002d8 <__aeabi_dsub>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4692      	mov	sl, r2
 80094d6:	469b      	mov	fp, r3
 80094d8:	4b8d      	ldr	r3, [pc, #564]	; (8009710 <cal_mollifier_table+0xe48>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f7 f85b 	bl	8000598 <__aeabi_f2d>
 80094e2:	4604      	mov	r4, r0
 80094e4:	460d      	mov	r5, r1
 80094e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094e8:	f7f7 f856 	bl	8000598 <__aeabi_f2d>
 80094ec:	a386      	add	r3, pc, #536	; (adr r3, 8009708 <cal_mollifier_table+0xe40>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f7f7 f8a9 	bl	8000648 <__aeabi_dmul>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4620      	mov	r0, r4
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7f6 feeb 	bl	80002d8 <__aeabi_dsub>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4650      	mov	r0, sl
 8009508:	4659      	mov	r1, fp
 800950a:	f7f7 f89d 	bl	8000648 <__aeabi_dmul>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	f7f6 fedf 	bl	80002d8 <__aeabi_dsub>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009522:	f7f7 f9bb 	bl	800089c <__aeabi_ddiv>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	e9c7 2300 	strd	r2, r3, [r7]
 800952e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009532:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009536:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800953a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800953e:	ee16 0a90 	vmov	r0, s13
 8009542:	f7f7 f829 	bl	8000598 <__aeabi_f2d>
 8009546:	4680      	mov	r8, r0
 8009548:	4689      	mov	r9, r1
 800954a:	4b71      	ldr	r3, [pc, #452]	; (8009710 <cal_mollifier_table+0xe48>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f7f7 f822 	bl	8000598 <__aeabi_f2d>
 8009554:	4604      	mov	r4, r0
 8009556:	460d      	mov	r5, r1
 8009558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800955a:	f7f7 f81d 	bl	8000598 <__aeabi_f2d>
 800955e:	a36a      	add	r3, pc, #424	; (adr r3, 8009708 <cal_mollifier_table+0xe40>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f7 f870 	bl	8000648 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f6 feb2 	bl	80002d8 <__aeabi_dsub>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4692      	mov	sl, r2
 800957a:	469b      	mov	fp, r3
 800957c:	4b64      	ldr	r3, [pc, #400]	; (8009710 <cal_mollifier_table+0xe48>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	f7f7 f809 	bl	8000598 <__aeabi_f2d>
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800958c:	f7f7 f804 	bl	8000598 <__aeabi_f2d>
 8009590:	a35d      	add	r3, pc, #372	; (adr r3, 8009708 <cal_mollifier_table+0xe40>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f7 f857 	bl	8000648 <__aeabi_dmul>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f6 fe99 	bl	80002d8 <__aeabi_dsub>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	4650      	mov	r0, sl
 80095ac:	4659      	mov	r1, fp
 80095ae:	f7f7 f84b 	bl	8000648 <__aeabi_dmul>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f6 fe8d 	bl	80002d8 <__aeabi_dsub>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095c6:	f7f7 f969 	bl	800089c <__aeabi_ddiv>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095d2:	f7f7 f839 	bl	8000648 <__aeabi_dmul>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80095de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095e2:	eeb1 7a67 	vneg.f32	s14, s15
 80095e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095f6:	ee16 0a90 	vmov	r0, s13
 80095fa:	f7f6 ffcd 	bl	8000598 <__aeabi_f2d>
 80095fe:	4680      	mov	r8, r0
 8009600:	4689      	mov	r9, r1
 8009602:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009606:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800960a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800960e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009612:	ee16 0a90 	vmov	r0, s13
 8009616:	f7f6 ffbf 	bl	8000598 <__aeabi_f2d>
 800961a:	4682      	mov	sl, r0
 800961c:	468b      	mov	fp, r1
 800961e:	4b3c      	ldr	r3, [pc, #240]	; (8009710 <cal_mollifier_table+0xe48>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4618      	mov	r0, r3
 8009624:	f7f6 ffb8 	bl	8000598 <__aeabi_f2d>
 8009628:	4604      	mov	r4, r0
 800962a:	460d      	mov	r5, r1
 800962c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800962e:	f7f6 ffb3 	bl	8000598 <__aeabi_f2d>
 8009632:	a335      	add	r3, pc, #212	; (adr r3, 8009708 <cal_mollifier_table+0xe40>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f7 f806 	bl	8000648 <__aeabi_dmul>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4620      	mov	r0, r4
 8009642:	4629      	mov	r1, r5
 8009644:	f7f6 fe48 	bl	80002d8 <__aeabi_dsub>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9c7 2300 	strd	r2, r3, [r7]
 8009650:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <cal_mollifier_table+0xe48>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	f7f6 ff9f 	bl	8000598 <__aeabi_f2d>
 800965a:	4604      	mov	r4, r0
 800965c:	460d      	mov	r5, r1
 800965e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009660:	f7f6 ff9a 	bl	8000598 <__aeabi_f2d>
 8009664:	a328      	add	r3, pc, #160	; (adr r3, 8009708 <cal_mollifier_table+0xe40>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f7f6 ffed 	bl	8000648 <__aeabi_dmul>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4620      	mov	r0, r4
 8009674:	4629      	mov	r1, r5
 8009676:	f7f6 fe2f 	bl	80002d8 <__aeabi_dsub>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009682:	f7f6 ffe1 	bl	8000648 <__aeabi_dmul>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4650      	mov	r0, sl
 800968c:	4659      	mov	r1, fp
 800968e:	f7f6 fe23 	bl	80002d8 <__aeabi_dsub>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4640      	mov	r0, r8
 8009698:	4649      	mov	r1, r9
 800969a:	f7f7 f8ff 	bl	800089c <__aeabi_ddiv>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	ec43 2b17 	vmov	d7, r2, r3
 80096a6:	eeb0 0a47 	vmov.f32	s0, s14
 80096aa:	eef0 0a67 	vmov.f32	s1, s15
 80096ae:	f019 fa1b 	bl	8022ae8 <exp>
 80096b2:	ec53 2b10 	vmov	r2, r3, d0
 80096b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096ba:	f7f6 ffc5 	bl	8000648 <__aeabi_dmul>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4610      	mov	r0, r2
 80096c4:	4619      	mov	r1, r3
 80096c6:	f7f7 fa97 	bl	8000bf8 <__aeabi_d2f>
 80096ca:	4602      	mov	r2, r0
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80096d0:	e014      	b.n	80096fc <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f04f 0200 	mov.w	r2, #0
 80096de:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	ed93 7a00 	vldr	s14, [r3]
 80096e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80096ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 80096f4:	4b07      	ldr	r3, [pc, #28]	; (8009714 <cal_mollifier_table+0xe4c>)
 80096f6:	2204      	movs	r2, #4
 80096f8:	701a      	strb	r2, [r3, #0]
		}

}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	3730      	adds	r7, #48	; 0x30
 8009700:	46bd      	mov	sp, r7
 8009702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009706:	bf00      	nop
 8009708:	d2f1a9fc 	.word	0xd2f1a9fc
 800970c:	3f50624d 	.word	0x3f50624d
 8009710:	20000800 	.word	0x20000800
 8009714:	20000804 	.word	0x20000804
 8009718:	f9db22d1 	.word	0xf9db22d1
 800971c:	3fdc6a7e 	.word	0x3fdc6a7e

08009720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009726:	4b12      	ldr	r3, [pc, #72]	; (8009770 <MX_DMA_Init+0x50>)
 8009728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800972a:	4a11      	ldr	r2, [pc, #68]	; (8009770 <MX_DMA_Init+0x50>)
 800972c:	f043 0304 	orr.w	r3, r3, #4
 8009730:	6493      	str	r3, [r2, #72]	; 0x48
 8009732:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <MX_DMA_Init+0x50>)
 8009734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <MX_DMA_Init+0x50>)
 8009740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009742:	4a0b      	ldr	r2, [pc, #44]	; (8009770 <MX_DMA_Init+0x50>)
 8009744:	f043 0301 	orr.w	r3, r3, #1
 8009748:	6493      	str	r3, [r2, #72]	; 0x48
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <MX_DMA_Init+0x50>)
 800974c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	200b      	movs	r0, #11
 800975c:	f011 fb35 	bl	801adca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009760:	200b      	movs	r0, #11
 8009762:	f011 fb4c 	bl	801adfe <HAL_NVIC_EnableIRQ>

}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40021000 	.word	0x40021000

08009774 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 8009774:	b480      	push	{r7}
 8009776:	af00      	add	r7, sp, #0
	error_mode=0;
 8009778:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <init_FailSafe+0x4c>)
 800977a:	2200      	movs	r2, #0
 800977c:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800977e:	4b11      	ldr	r3, [pc, #68]	; (80097c4 <init_FailSafe+0x50>)
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8009784:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <init_FailSafe+0x54>)
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800978a:	4b10      	ldr	r3, [pc, #64]	; (80097cc <init_FailSafe+0x58>)
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009790:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <init_FailSafe+0x5c>)
 8009792:	4a10      	ldr	r2, [pc, #64]	; (80097d4 <init_FailSafe+0x60>)
 8009794:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 8009796:	4b10      	ldr	r3, [pc, #64]	; (80097d8 <init_FailSafe+0x64>)
 8009798:	4a10      	ldr	r2, [pc, #64]	; (80097dc <init_FailSafe+0x68>)
 800979a:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800979c:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <init_FailSafe+0x6c>)
 800979e:	4a0d      	ldr	r2, [pc, #52]	; (80097d4 <init_FailSafe+0x60>)
 80097a0:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 80097a2:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <init_FailSafe+0x70>)
 80097a4:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <init_FailSafe+0x74>)
 80097a6:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 80097a8:	4b10      	ldr	r3, [pc, #64]	; (80097ec <init_FailSafe+0x78>)
 80097aa:	4a11      	ldr	r2, [pc, #68]	; (80097f0 <init_FailSafe+0x7c>)
 80097ac:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <init_FailSafe+0x80>)
 80097b0:	4a0f      	ldr	r2, [pc, #60]	; (80097f0 <init_FailSafe+0x7c>)
 80097b2:	601a      	str	r2, [r3, #0]
}
 80097b4:	bf00      	nop
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	20000807 	.word	0x20000807
 80097c4:	20000806 	.word	0x20000806
 80097c8:	20000808 	.word	0x20000808
 80097cc:	20000824 	.word	0x20000824
 80097d0:	2000080c 	.word	0x2000080c
 80097d4:	44bb8000 	.word	0x44bb8000
 80097d8:	20000810 	.word	0x20000810
 80097dc:	44480000 	.word	0x44480000
 80097e0:	20000814 	.word	0x20000814
 80097e4:	20000818 	.word	0x20000818
 80097e8:	455ac000 	.word	0x455ac000
 80097ec:	2000081c 	.word	0x2000081c
 80097f0:	44ed8000 	.word	0x44ed8000
 80097f4:	20000820 	.word	0x20000820

080097f8 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 80097fe:	4b6e      	ldr	r3, [pc, #440]	; (80099b8 <interrupt_FailSafe+0x1c0>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009806:	4b6d      	ldr	r3, [pc, #436]	; (80099bc <interrupt_FailSafe+0x1c4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800980c:	4b6c      	ldr	r3, [pc, #432]	; (80099c0 <interrupt_FailSafe+0x1c8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 8009812:	4b6c      	ldr	r3, [pc, #432]	; (80099c4 <interrupt_FailSafe+0x1cc>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	607b      	str	r3, [r7, #4]
 8009818:	e008      	b.n	800982c <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800981a:	4b6b      	ldr	r3, [pc, #428]	; (80099c8 <interrupt_FailSafe+0x1d0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009820:	4b6a      	ldr	r3, [pc, #424]	; (80099cc <interrupt_FailSafe+0x1d4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009826:	4b6a      	ldr	r3, [pc, #424]	; (80099d0 <interrupt_FailSafe+0x1d8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800982c:	4b69      	ldr	r3, [pc, #420]	; (80099d4 <interrupt_FailSafe+0x1dc>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d062      	beq.n	80098fa <interrupt_FailSafe+0x102>
 8009834:	4b67      	ldr	r3, [pc, #412]	; (80099d4 <interrupt_FailSafe+0x1dc>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b03      	cmp	r3, #3
 800983a:	d05e      	beq.n	80098fa <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 800983c:	4b66      	ldr	r3, [pc, #408]	; (80099d8 <interrupt_FailSafe+0x1e0>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d15a      	bne.n	80098fa <interrupt_FailSafe+0x102>
 8009844:	4b65      	ldr	r3, [pc, #404]	; (80099dc <interrupt_FailSafe+0x1e4>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d156      	bne.n	80098fa <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 800984c:	4b64      	ldr	r3, [pc, #400]	; (80099e0 <interrupt_FailSafe+0x1e8>)
 800984e:	ed93 7a00 	vldr	s14, [r3]
 8009852:	4b64      	ldr	r3, [pc, #400]	; (80099e4 <interrupt_FailSafe+0x1ec>)
 8009854:	edd3 7a00 	vldr	s15, [r3]
 8009858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800985c:	eef0 7ae7 	vabs.f32	s15, s15
 8009860:	ed97 7a02 	vldr	s14, [r7, #8]
 8009864:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986c:	d809      	bhi.n	8009882 <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800986e:	f7fe f87b 	bl	8007968 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 8009872:	2001      	movs	r0, #1
 8009874:	f7fd fa90 	bl	8006d98 <pl_yellow_LED_count>
						error_mode = 1;
 8009878:	4b58      	ldr	r3, [pc, #352]	; (80099dc <interrupt_FailSafe+0x1e4>)
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800987e:	f7fa fe91 	bl	80045a4 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 8009882:	4b59      	ldr	r3, [pc, #356]	; (80099e8 <interrupt_FailSafe+0x1f0>)
 8009884:	edd3 7a00 	vldr	s15, [r3]
 8009888:	ed97 7a01 	vldr	s14, [r7, #4]
 800988c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009894:	d809      	bhi.n	80098aa <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009896:	f7fe f867 	bl	8007968 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800989a:	2002      	movs	r0, #2
 800989c:	f7fd fa7c 	bl	8006d98 <pl_yellow_LED_count>
						error_mode = 1;
 80098a0:	4b4e      	ldr	r3, [pc, #312]	; (80099dc <interrupt_FailSafe+0x1e4>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80098a6:	f7fa fe7d 	bl	80045a4 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 80098aa:	4b50      	ldr	r3, [pc, #320]	; (80099ec <interrupt_FailSafe+0x1f4>)
 80098ac:	ed93 7a00 	vldr	s14, [r3]
 80098b0:	4b4f      	ldr	r3, [pc, #316]	; (80099f0 <interrupt_FailSafe+0x1f8>)
 80098b2:	edd3 6a00 	vldr	s13, [r3]
 80098b6:	4b4f      	ldr	r3, [pc, #316]	; (80099f4 <interrupt_FailSafe+0x1fc>)
 80098b8:	edd3 7a00 	vldr	s15, [r3]
 80098bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80098c0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80098c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80098c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098cc:	eef0 7ae7 	vabs.f32	s15, s15
 80098d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80098d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098dc:	d80d      	bhi.n	80098fa <interrupt_FailSafe+0x102>
 80098de:	4b3d      	ldr	r3, [pc, #244]	; (80099d4 <interrupt_FailSafe+0x1dc>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d109      	bne.n	80098fa <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80098e6:	f7fe f83f 	bl	8007968 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 80098ea:	2004      	movs	r0, #4
 80098ec:	f7fd fa54 	bl	8006d98 <pl_yellow_LED_count>
						error_mode = 1;
 80098f0:	4b3a      	ldr	r3, [pc, #232]	; (80099dc <interrupt_FailSafe+0x1e4>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80098f6:	f7fa fe55 	bl	80045a4 <clear_Ierror>

				}

	}

	if(error_mode==1){
 80098fa:	4b38      	ldr	r3, [pc, #224]	; (80099dc <interrupt_FailSafe+0x1e4>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d153      	bne.n	80099aa <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009902:	4b3d      	ldr	r3, [pc, #244]	; (80099f8 <interrupt_FailSafe+0x200>)
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009908:	4b3c      	ldr	r3, [pc, #240]	; (80099fc <interrupt_FailSafe+0x204>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3301      	adds	r3, #1
 800990e:	4a3b      	ldr	r2, [pc, #236]	; (80099fc <interrupt_FailSafe+0x204>)
 8009910:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009912:	4b3a      	ldr	r3, [pc, #232]	; (80099fc <interrupt_FailSafe+0x204>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800991a:	dc05      	bgt.n	8009928 <interrupt_FailSafe+0x130>
			init_WallControl();
 800991c:	f7fa ff78 	bl	8004810 <init_WallControl>
			modeacc=100;//エラー用
 8009920:	4b2c      	ldr	r3, [pc, #176]	; (80099d4 <interrupt_FailSafe+0x1dc>)
 8009922:	2264      	movs	r2, #100	; 0x64
 8009924:	701a      	strb	r2, [r3, #0]
 8009926:	e009      	b.n	800993c <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009928:	2000      	movs	r0, #0
 800992a:	f7fd ff89 	bl	8007840 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800992e:	f7fd ffed 	bl	800790c <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8009932:	f7fe f819 	bl	8007968 <pl_FunMotor_stop>
			modeacc=0;
 8009936:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <interrupt_FailSafe+0x1dc>)
 8009938:	2200      	movs	r2, #0
 800993a:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 800993c:	4b30      	ldr	r3, [pc, #192]	; (8009a00 <interrupt_FailSafe+0x208>)
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009944:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <interrupt_FailSafe+0x20c>)
 8009946:	f04f 32ff 	mov.w	r2, #4294967295
 800994a:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 800994c:	4b2e      	ldr	r3, [pc, #184]	; (8009a08 <interrupt_FailSafe+0x210>)
 800994e:	f04f 32ff 	mov.w	r2, #4294967295
 8009952:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009954:	4b2d      	ldr	r3, [pc, #180]	; (8009a0c <interrupt_FailSafe+0x214>)
 8009956:	f04f 32ff 	mov.w	r2, #4294967295
 800995a:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 800995c:	4b2c      	ldr	r3, [pc, #176]	; (8009a10 <interrupt_FailSafe+0x218>)
 800995e:	f04f 32ff 	mov.w	r2, #4294967295
 8009962:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009964:	4b2b      	ldr	r3, [pc, #172]	; (8009a14 <interrupt_FailSafe+0x21c>)
 8009966:	f04f 32ff 	mov.w	r2, #4294967295
 800996a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 800996c:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <interrupt_FailSafe+0x220>)
 800996e:	4a2b      	ldr	r2, [pc, #172]	; (8009a1c <interrupt_FailSafe+0x224>)
 8009970:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009972:	4b2b      	ldr	r3, [pc, #172]	; (8009a20 <interrupt_FailSafe+0x228>)
 8009974:	4a29      	ldr	r2, [pc, #164]	; (8009a1c <interrupt_FailSafe+0x224>)
 8009976:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009978:	4b2a      	ldr	r3, [pc, #168]	; (8009a24 <interrupt_FailSafe+0x22c>)
 800997a:	4a2b      	ldr	r2, [pc, #172]	; (8009a28 <interrupt_FailSafe+0x230>)
 800997c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 800997e:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <interrupt_FailSafe+0x234>)
 8009980:	4a29      	ldr	r2, [pc, #164]	; (8009a28 <interrupt_FailSafe+0x230>)
 8009982:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009984:	4b2a      	ldr	r3, [pc, #168]	; (8009a30 <interrupt_FailSafe+0x238>)
 8009986:	4a2b      	ldr	r2, [pc, #172]	; (8009a34 <interrupt_FailSafe+0x23c>)
 8009988:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 800998a:	4b2b      	ldr	r3, [pc, #172]	; (8009a38 <interrupt_FailSafe+0x240>)
 800998c:	4a29      	ldr	r2, [pc, #164]	; (8009a34 <interrupt_FailSafe+0x23c>)
 800998e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009990:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <interrupt_FailSafe+0x244>)
 8009992:	4a28      	ldr	r2, [pc, #160]	; (8009a34 <interrupt_FailSafe+0x23c>)
 8009994:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009996:	4b2a      	ldr	r3, [pc, #168]	; (8009a40 <interrupt_FailSafe+0x248>)
 8009998:	4a26      	ldr	r2, [pc, #152]	; (8009a34 <interrupt_FailSafe+0x23c>)
 800999a:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 800999c:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <interrupt_FailSafe+0x24c>)
 800999e:	2204      	movs	r2, #4
 80099a0:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <interrupt_FailSafe+0x250>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 80099a8:	e002      	b.n	80099b0 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 80099aa:	4b14      	ldr	r3, [pc, #80]	; (80099fc <interrupt_FailSafe+0x204>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	20000808 	.word	0x20000808
 80099bc:	2000080c 	.word	0x2000080c
 80099c0:	20000810 	.word	0x20000810
 80099c4:	20000814 	.word	0x20000814
 80099c8:	20000818 	.word	0x20000818
 80099cc:	2000081c 	.word	0x2000081c
 80099d0:	20000820 	.word	0x20000820
 80099d4:	20000528 	.word	0x20000528
 80099d8:	20000806 	.word	0x20000806
 80099dc:	20000807 	.word	0x20000807
 80099e0:	200004e4 	.word	0x200004e4
 80099e4:	20000268 	.word	0x20000268
 80099e8:	20000274 	.word	0x20000274
 80099ec:	200004d8 	.word	0x200004d8
 80099f0:	2000025c 	.word	0x2000025c
 80099f4:	20000258 	.word	0x20000258
 80099f8:	2000edc0 	.word	0x2000edc0
 80099fc:	20000824 	.word	0x20000824
 8009a00:	200005b8 	.word	0x200005b8
 8009a04:	200005b4 	.word	0x200005b4
 8009a08:	200005c0 	.word	0x200005c0
 8009a0c:	200005bc 	.word	0x200005bc
 8009a10:	200005c8 	.word	0x200005c8
 8009a14:	200005c4 	.word	0x200005c4
 8009a18:	200005d0 	.word	0x200005d0
 8009a1c:	42480000 	.word	0x42480000
 8009a20:	200005cc 	.word	0x200005cc
 8009a24:	200005d8 	.word	0x200005d8
 8009a28:	41a00000 	.word	0x41a00000
 8009a2c:	200005d4 	.word	0x200005d4
 8009a30:	200005e0 	.word	0x200005e0
 8009a34:	420c0000 	.word	0x420c0000
 8009a38:	200005dc 	.word	0x200005dc
 8009a3c:	200005e8 	.word	0x200005e8
 8009a40:	200005e4 	.word	0x200005e4
 8009a44:	20000804 	.word	0x20000804
 8009a48:	20000592 	.word	0x20000592

08009a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	; 0x28
 8009a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a52:	f107 0314 	add.w	r3, r7, #20
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	605a      	str	r2, [r3, #4]
 8009a5c:	609a      	str	r2, [r3, #8]
 8009a5e:	60da      	str	r2, [r3, #12]
 8009a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a62:	4b3a      	ldr	r3, [pc, #232]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a66:	4a39      	ldr	r2, [pc, #228]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a68:	f043 0304 	orr.w	r3, r3, #4
 8009a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a6e:	4b37      	ldr	r3, [pc, #220]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a72:	f003 0304 	and.w	r3, r3, #4
 8009a76:	613b      	str	r3, [r7, #16]
 8009a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a7a:	4b34      	ldr	r3, [pc, #208]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7e:	4a33      	ldr	r2, [pc, #204]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a80:	f043 0320 	orr.w	r3, r3, #32
 8009a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a86:	4b31      	ldr	r3, [pc, #196]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a92:	4b2e      	ldr	r3, [pc, #184]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a96:	4a2d      	ldr	r2, [pc, #180]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009a98:	f043 0301 	orr.w	r3, r3, #1
 8009a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a9e:	4b2b      	ldr	r3, [pc, #172]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	60bb      	str	r3, [r7, #8]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aaa:	4b28      	ldr	r3, [pc, #160]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aae:	4a27      	ldr	r2, [pc, #156]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009ab0:	f043 0302 	orr.w	r3, r3, #2
 8009ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ab6:	4b25      	ldr	r3, [pc, #148]	; (8009b4c <MX_GPIO_Init+0x100>)
 8009ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	607b      	str	r3, [r7, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009ac8:	4821      	ldr	r0, [pc, #132]	; (8009b50 <MX_GPIO_Init+0x104>)
 8009aca:	f012 f869 	bl	801bba0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f648 1110 	movw	r1, #35088	; 0x8910
 8009ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ad8:	f012 f862 	bl	801bba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009adc:	2200      	movs	r2, #0
 8009ade:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009ae2:	481c      	ldr	r0, [pc, #112]	; (8009b54 <MX_GPIO_Init+0x108>)
 8009ae4:	f012 f85c 	bl	801bba0 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009ae8:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009aec:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009aee:	2301      	movs	r3, #1
 8009af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009af6:	2300      	movs	r3, #0
 8009af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009afa:	f107 0314 	add.w	r3, r7, #20
 8009afe:	4619      	mov	r1, r3
 8009b00:	4813      	ldr	r0, [pc, #76]	; (8009b50 <MX_GPIO_Init+0x104>)
 8009b02:	f011 fecb 	bl	801b89c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009b06:	f648 1310 	movw	r3, #35088	; 0x8910
 8009b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b14:	2300      	movs	r3, #0
 8009b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b18:	f107 0314 	add.w	r3, r7, #20
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b22:	f011 febb 	bl	801b89c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b26:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009b2a:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b30:	2300      	movs	r3, #0
 8009b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b34:	2300      	movs	r3, #0
 8009b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b38:	f107 0314 	add.w	r3, r7, #20
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4805      	ldr	r0, [pc, #20]	; (8009b54 <MX_GPIO_Init+0x108>)
 8009b40:	f011 feac 	bl	801b89c <HAL_GPIO_Init>

}
 8009b44:	bf00      	nop
 8009b46:	3728      	adds	r7, #40	; 0x28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	40021000 	.word	0x40021000
 8009b50:	48000800 	.word	0x48000800
 8009b54:	48000400 	.word	0x48000400

08009b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009b5e:	f00e fdeb 	bl	8018738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009b62:	f000 f8a7 	bl	8009cb4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009b66:	f7ff fddb 	bl	8009720 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009b6a:	f7ff ff6f 	bl	8009a4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8009b6e:	f7fe f9d5 	bl	8007f1c <MX_ADC1_Init>
  MX_SPI1_Init();
 8009b72:	f00d fa13 	bl	8016f9c <MX_SPI1_Init>
  MX_TIM6_Init();
 8009b76:	f00d fc7f 	bl	8017478 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009b7a:	f00d fcb3 	bl	80174e4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009b7e:	f00e fd0d 	bl	801859c <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009b82:	f00d fa49 	bl	8017018 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009b86:	f00d fd4d 	bl	8017624 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009b8a:	f7fe f8d9 	bl	8007d40 <pl_timer_init>
  pl_gyro_init();
 8009b8e:	f7fd fd6b 	bl	8007668 <pl_gyro_init>
  pl_sensor_init();
 8009b92:	f7fd ff19 	bl	80079c8 <pl_sensor_init>
  reset_distance();
 8009b96:	f7f7 fa01 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009b9a:	f7f7 fde5 	bl	8001768 <reset_gyro>
  reset_speed();
 8009b9e:	f7f7 fa3b 	bl	8001018 <reset_speed>
  record_reset();
 8009ba2:	f00c ff89 	bl	8016ab8 <record_reset>
  pl_motor_init();
 8009ba6:	f7fd fe25 	bl	80077f4 <pl_motor_init>
  PID_Init();
 8009baa:	f7fa fcbf 	bl	800452c <PID_Init>
  init_WallControl();
 8009bae:	f7fa fe2f 	bl	8004810 <init_WallControl>
  Control_mode_Init();
 8009bb2:	f7f8 f923 	bl	8001dfc <Control_mode_Init>
  init_FailSafe();
 8009bb6:	f7ff fddd 	bl	8009774 <init_FailSafe>
  input_parameter();
 8009bba:	f00d ff13 	bl	80179e4 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bc2:	4b37      	ldr	r3, [pc, #220]	; (8009ca0 <main+0x148>)
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bc8:	4b35      	ldr	r3, [pc, #212]	; (8009ca0 <main+0x148>)
 8009bca:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bcc:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bce:	4b34      	ldr	r3, [pc, #208]	; (8009ca0 <main+0x148>)
 8009bd0:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bd2:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bd4:	4b32      	ldr	r3, [pc, #200]	; (8009ca0 <main+0x148>)
 8009bd6:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bd8:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bda:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <main+0x148>)
 8009bdc:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	9200      	str	r2, [sp, #0]
 8009be2:	4623      	mov	r3, r4
 8009be4:	4602      	mov	r2, r0
 8009be6:	482f      	ldr	r0, [pc, #188]	; (8009ca4 <main+0x14c>)
 8009be8:	f016 fd70 	bl	80206cc <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009bec:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <main+0x150>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009bf2:	4b2d      	ldr	r3, [pc, #180]	; (8009ca8 <main+0x150>)
 8009bf4:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009bf6:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009bf8:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <main+0x150>)
 8009bfa:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009bfc:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009bfe:	4b2a      	ldr	r3, [pc, #168]	; (8009ca8 <main+0x150>)
 8009c00:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c02:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c04:	4b28      	ldr	r3, [pc, #160]	; (8009ca8 <main+0x150>)
 8009c06:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	9200      	str	r2, [sp, #0]
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	4602      	mov	r2, r0
 8009c10:	4826      	ldr	r0, [pc, #152]	; (8009cac <main+0x154>)
 8009c12:	f016 fd5b 	bl	80206cc <iprintf>
	battcheak();
 8009c16:	f7f7 ffb3 	bl	8001b80 <battcheak>

//起動cheak
	int yellow_count=1;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e00d      	b.n	8009c40 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fd f8b5 	bl	8006d98 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009c2e:	2032      	movs	r0, #50	; 0x32
 8009c30:	f00e fdfa 	bl	8018828 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	607b      	str	r3, [r7, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b07      	cmp	r3, #7
 8009c44:	ddee      	ble.n	8009c24 <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009c46:	2300      	movs	r3, #0
 8009c48:	603b      	str	r3, [r7, #0]
 8009c4a:	e00f      	b.n	8009c6c <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fd f8a1 	bl	8006d98 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009c56:	2032      	movs	r0, #50	; 0x32
 8009c58:	f00e fde6 	bl	8018828 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	0fda      	lsrs	r2, r3, #31
 8009c60:	4413      	add	r3, r2
 8009c62:	105b      	asrs	r3, r3, #1
 8009c64:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b08      	cmp	r3, #8
 8009c70:	ddec      	ble.n	8009c4c <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	4618      	mov	r0, r3
 8009c78:	f00b fa36 	bl	80150e8 <mode_decision>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009c80:	f7f7 f98c 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009c84:	f7f7 fd70 	bl	8001768 <reset_gyro>
	  		reset_speed();
 8009c88:	f7f7 f9c6 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f00b fb23 	bl	80152dc <mode_execution>

	  		error_mode = 0;
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <main+0x158>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009c9c:	e7e9      	b.n	8009c72 <main+0x11a>
 8009c9e:	bf00      	nop
 8009ca0:	2000070c 	.word	0x2000070c
 8009ca4:	08022f90 	.word	0x08022f90
 8009ca8:	20000718 	.word	0x20000718
 8009cac:	08022fbc 	.word	0x08022fbc
 8009cb0:	20000807 	.word	0x20000807

08009cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b094      	sub	sp, #80	; 0x50
 8009cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009cba:	f107 0318 	add.w	r3, r7, #24
 8009cbe:	2238      	movs	r2, #56	; 0x38
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f016 f890 	bl	801fde8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009cc8:	1d3b      	adds	r3, r7, #4
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	605a      	str	r2, [r3, #4]
 8009cd0:	609a      	str	r2, [r3, #8]
 8009cd2:	60da      	str	r2, [r3, #12]
 8009cd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	f011 ff7a 	bl	801bbd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ce4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009cea:	2303      	movs	r3, #3
 8009cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009cee:	2304      	movs	r3, #4
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009cf2:	2355      	movs	r3, #85	; 0x55
 8009cf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f012 f816 	bl	801bd38 <HAL_RCC_OscConfig>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009d12:	f000 f81a 	bl	8009d4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d16:	230f      	movs	r3, #15
 8009d18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009d22:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009d2e:	1d3b      	adds	r3, r7, #4
 8009d30:	2104      	movs	r1, #4
 8009d32:	4618      	mov	r0, r3
 8009d34:	f012 fb18 	bl	801c368 <HAL_RCC_ClockConfig>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009d3e:	f000 f804 	bl	8009d4a <Error_Handler>
  }
}
 8009d42:	bf00      	nop
 8009d44:	3750      	adds	r7, #80	; 0x50
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009d4e:	b672      	cpsid	i
}
 8009d50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009d52:	e7fe      	b.n	8009d52 <Error_Handler+0x8>

08009d54 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8009d5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009d62:	4603      	mov	r3, r0
 8009d64:	71fb      	strb	r3, [r7, #7]
 8009d66:	460b      	mov	r3, r1
 8009d68:	71bb      	strb	r3, [r7, #6]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009d74:	f7fa f93c 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009d78:	2003      	movs	r0, #3
 8009d7a:	f7fd fd93 	bl	80078a4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009d7e:	2003      	movs	r0, #3
 8009d80:	f7fd fd68 	bl	8007854 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009d84:	2032      	movs	r0, #50	; 0x32
 8009d86:	f7fe f88b 	bl	8007ea0 <wait_ms_NoReset>
	}
	if(left_wall){
 8009d8a:	79bb      	ldrb	r3, [r7, #6]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d02c      	beq.n	8009dea <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009d90:	ed97 2a02 	vldr	s4, [r7, #8]
 8009d94:	edd7 1a03 	vldr	s3, [r7, #12]
 8009d98:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8009edc <backTurn_controlWall+0x188>
 8009d9c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8009edc <backTurn_controlWall+0x188>
 8009da0:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009ee0 <backTurn_controlWall+0x18c>
 8009da4:	f7f9 fe28 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009da8:	2003      	movs	r0, #3
 8009daa:	f7fd fd7b 	bl	80078a4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009dae:	2003      	movs	r0, #3
 8009db0:	f7fd fd50 	bl	8007854 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009db4:	2032      	movs	r0, #50	; 0x32
 8009db6:	f7fe f873 	bl	8007ea0 <wait_ms_NoReset>
		no_frontwall_straight();
 8009dba:	f7fa f919 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009dbe:	2003      	movs	r0, #3
 8009dc0:	f7fd fd70 	bl	80078a4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009dc4:	2003      	movs	r0, #3
 8009dc6:	f7fd fd45 	bl	8007854 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009dca:	2032      	movs	r0, #50	; 0x32
 8009dcc:	f7fe f868 	bl	8007ea0 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009dd0:	ed97 2a02 	vldr	s4, [r7, #8]
 8009dd4:	edd7 1a03 	vldr	s3, [r7, #12]
 8009dd8:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8009edc <backTurn_controlWall+0x188>
 8009ddc:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8009edc <backTurn_controlWall+0x188>
 8009de0:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009ee0 <backTurn_controlWall+0x18c>
 8009de4:	f7f9 fe08 	bl	80039f8 <turning_table2>
 8009de8:	e06a      	b.n	8009ec0 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009dea:	79bb      	ldrb	r3, [r7, #6]
 8009dec:	f083 0301 	eor.w	r3, r3, #1
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d037      	beq.n	8009e66 <backTurn_controlWall+0x112>
 8009df6:	797b      	ldrb	r3, [r7, #5]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d034      	beq.n	8009e66 <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e00:	eef1 7a67 	vneg.f32	s15, s15
 8009e04:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e08:	eef0 1a67 	vmov.f32	s3, s15
 8009e0c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8009edc <backTurn_controlWall+0x188>
 8009e10:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009edc <backTurn_controlWall+0x188>
 8009e14:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8009ee4 <backTurn_controlWall+0x190>
 8009e18:	f7f9 fdee 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e1c:	2003      	movs	r0, #3
 8009e1e:	f7fd fd41 	bl	80078a4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e22:	2003      	movs	r0, #3
 8009e24:	f7fd fd16 	bl	8007854 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009e28:	2032      	movs	r0, #50	; 0x32
 8009e2a:	f7fe f839 	bl	8007ea0 <wait_ms_NoReset>
		no_frontwall_straight();
 8009e2e:	f7fa f8df 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e32:	2003      	movs	r0, #3
 8009e34:	f7fd fd36 	bl	80078a4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e38:	2003      	movs	r0, #3
 8009e3a:	f7fd fd0b 	bl	8007854 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e3e:	2032      	movs	r0, #50	; 0x32
 8009e40:	f7fe f82e 	bl	8007ea0 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e48:	eef1 7a67 	vneg.f32	s15, s15
 8009e4c:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e50:	eef0 1a67 	vmov.f32	s3, s15
 8009e54:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009edc <backTurn_controlWall+0x188>
 8009e58:	eddf 0a20 	vldr	s1, [pc, #128]	; 8009edc <backTurn_controlWall+0x188>
 8009e5c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009ee4 <backTurn_controlWall+0x190>
 8009e60:	f7f9 fdca 	bl	80039f8 <turning_table2>
 8009e64:	e02c      	b.n	8009ec0 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009e66:	79bb      	ldrb	r3, [r7, #6]
 8009e68:	f083 0301 	eor.w	r3, r3, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d026      	beq.n	8009ec0 <backTurn_controlWall+0x16c>
 8009e72:	797b      	ldrb	r3, [r7, #5]
 8009e74:	f083 0301 	eor.w	r3, r3, #1
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d020      	beq.n	8009ec0 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e7e:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e82:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e86:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8009edc <backTurn_controlWall+0x188>
 8009e8a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8009edc <backTurn_controlWall+0x188>
 8009e8e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009ee0 <backTurn_controlWall+0x18c>
 8009e92:	f7f9 fdb1 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e96:	2003      	movs	r0, #3
 8009e98:	f7fd fd04 	bl	80078a4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e9c:	2003      	movs	r0, #3
 8009e9e:	f7fd fcd9 	bl	8007854 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009ea2:	2032      	movs	r0, #50	; 0x32
 8009ea4:	f7fd fffc 	bl	8007ea0 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009ea8:	ed97 2a02 	vldr	s4, [r7, #8]
 8009eac:	edd7 1a03 	vldr	s3, [r7, #12]
 8009eb0:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8009edc <backTurn_controlWall+0x188>
 8009eb4:	eddf 0a09 	vldr	s1, [pc, #36]	; 8009edc <backTurn_controlWall+0x188>
 8009eb8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009ee0 <backTurn_controlWall+0x18c>
 8009ebc:	f7f9 fd9c 	bl	80039f8 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ec0:	2003      	movs	r0, #3
 8009ec2:	f7fd fcef 	bl	80078a4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ec6:	2003      	movs	r0, #3
 8009ec8:	f7fd fcc4 	bl	8007854 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 8009ecc:	2032      	movs	r0, #50	; 0x32
 8009ece:	f7fd ffe7 	bl	8007ea0 <wait_ms_NoReset>

}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	00000000 	.word	0x00000000
 8009ee0:	42b40000 	.word	0x42b40000
 8009ee4:	c2b40000 	.word	0xc2b40000

08009ee8 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009ee8:	b084      	sub	sp, #16
 8009eea:	b5b0      	push	{r4, r5, r7, lr}
 8009eec:	ed2d 8b02 	vpush	{d8}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009efc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009f00:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	f040 80f5 	bne.w	800a0f4 <slalomR+0x20c>
		highspeed_mode = 0;
 8009f0a:	4bcd      	ldr	r3, [pc, #820]	; (800a240 <slalomR+0x358>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009f10:	2301      	movs	r3, #1
 8009f12:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009f20:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11f      	bne.n	8009f68 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009f28:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009f2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009f30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f3c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009f40:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009f44:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a244 <slalomR+0x35c>
 8009f48:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	eeb0 2a47 	vmov.f32	s4, s14
 8009f52:	eef0 1a46 	vmov.f32	s3, s12
 8009f56:	eeb0 1a66 	vmov.f32	s2, s13
 8009f5a:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a248 <slalomR+0x360>
 8009f5e:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a24c <slalomR+0x364>
 8009f62:	f7f9 f83b 	bl	8002fdc <straight_table2>
 8009f66:	e01e      	b.n	8009fa6 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009f68:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009f6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009f70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f7c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009f80:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009f84:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a244 <slalomR+0x35c>
 8009f88:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	eeb0 2a47 	vmov.f32	s4, s14
 8009f92:	eef0 1a46 	vmov.f32	s3, s12
 8009f96:	eeb0 1a66 	vmov.f32	s2, s13
 8009f9a:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a248 <slalomR+0x360>
 8009f9e:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a250 <slalomR+0x368>
 8009fa2:	f7f9 f81b 	bl	8002fdc <straight_table2>
		}
		wallmode.WallCutMode=1;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 8009fae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d127      	bne.n	800a006 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009fba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009fbe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009fc2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009fc6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009fca:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fd2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fda:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009fde:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009fe2:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a244 <slalomR+0x35c>
 8009fe6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	eeb0 2a47 	vmov.f32	s4, s14
 8009ff0:	eef0 1a45 	vmov.f32	s3, s10
 8009ff4:	eeb0 1a65 	vmov.f32	s2, s11
 8009ff8:	eef0 0a46 	vmov.f32	s1, s12
 8009ffc:	eeb0 0a66 	vmov.f32	s0, s13
 800a000:	f7f8 ffec 	bl	8002fdc <straight_table2>
 800a004:	e022      	b.n	800a04c <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a006:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a00a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a00e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a012:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a016:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a01a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a01e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a022:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a026:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a02a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a244 <slalomR+0x35c>
 800a02e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	eeb0 2a47 	vmov.f32	s4, s14
 800a038:	eef0 1a45 	vmov.f32	s3, s10
 800a03c:	eeb0 1a65 	vmov.f32	s2, s11
 800a040:	eef0 0a46 	vmov.f32	s1, s12
 800a044:	eeb0 0a66 	vmov.f32	s0, s13
 800a048:	f7f8 ffc8 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a04c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a050:	2b01      	cmp	r3, #1
 800a052:	d10c      	bne.n	800a06e <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a054:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a058:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a05c:	eeb0 1a47 	vmov.f32	s2, s14
 800a060:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a254 <slalomR+0x36c>
 800a064:	eeb0 0a67 	vmov.f32	s0, s15
 800a068:	f7f9 ff2e 	bl	8003ec8 <mollifier_slalom_table>
 800a06c:	e015      	b.n	800a09a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a06e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a072:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a076:	eef1 7a67 	vneg.f32	s15, s15
 800a07a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a07e:	eef0 2a66 	vmov.f32	s5, s13
 800a082:	eeb0 2a67 	vmov.f32	s4, s15
 800a086:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a248 <slalomR+0x360>
 800a08a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a248 <slalomR+0x360>
 800a08e:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a254 <slalomR+0x36c>
 800a092:	eeb0 0a47 	vmov.f32	s0, s14
 800a096:	f7f9 fdc7 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a0a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a0a6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a244 <slalomR+0x35c>
 800a0aa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a0ae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a0b2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a0b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0c2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a0c6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a0ca:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a244 <slalomR+0x35c>
 800a0ce:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	eeb0 2a47 	vmov.f32	s4, s14
 800a0d8:	eef0 1a65 	vmov.f32	s3, s11
 800a0dc:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a248 <slalomR+0x360>
 800a0e0:	eef0 0a46 	vmov.f32	s1, s12
 800a0e4:	eeb0 0a66 	vmov.f32	s0, s13
 800a0e8:	f7f8 ff78 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a0ec:	4b54      	ldr	r3, [pc, #336]	; (800a240 <slalomR+0x358>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a0f2:	e09c      	b.n	800a22e <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a100:	2300      	movs	r3, #0
 800a102:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a104:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a108:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a10c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a110:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a114:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a118:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a11c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a120:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a124:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a128:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a244 <slalomR+0x35c>
 800a12c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	eeb0 2a47 	vmov.f32	s4, s14
 800a136:	eef0 1a45 	vmov.f32	s3, s10
 800a13a:	eeb0 1a65 	vmov.f32	s2, s11
 800a13e:	eef0 0a46 	vmov.f32	s1, s12
 800a142:	eeb0 0a66 	vmov.f32	s0, s13
 800a146:	f7f8 ff49 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a14a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d10c      	bne.n	800a16c <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a152:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a156:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a15a:	eeb0 1a47 	vmov.f32	s2, s14
 800a15e:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a254 <slalomR+0x36c>
 800a162:	eeb0 0a67 	vmov.f32	s0, s15
 800a166:	f7f9 feaf 	bl	8003ec8 <mollifier_slalom_table>
 800a16a:	e015      	b.n	800a198 <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a16c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a170:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a174:	eef1 7a67 	vneg.f32	s15, s15
 800a178:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a17c:	eef0 2a66 	vmov.f32	s5, s13
 800a180:	eeb0 2a67 	vmov.f32	s4, s15
 800a184:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a248 <slalomR+0x360>
 800a188:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a248 <slalomR+0x360>
 800a18c:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a254 <slalomR+0x36c>
 800a190:	eeb0 0a47 	vmov.f32	s0, s14
 800a194:	f7f9 fd48 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a198:	2300      	movs	r3, #0
 800a19a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a1a0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a1a4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a1a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1c0:	eef0 7ae7 	vabs.f32	s15, s15
 800a1c4:	ee17 0a90 	vmov	r0, s15
 800a1c8:	f7f6 f9e6 	bl	8000598 <__aeabi_f2d>
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1d4:	f7f6 fb62 	bl	800089c <__aeabi_ddiv>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4614      	mov	r4, r2
 800a1de:	461d      	mov	r5, r3
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7f6 f9d8 	bl	8000598 <__aeabi_f2d>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7f6 fb54 	bl	800089c <__aeabi_ddiv>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	4b15      	ldr	r3, [pc, #84]	; (800a258 <slalomR+0x370>)
 800a202:	f7f6 f86b 	bl	80002dc <__adddf3>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a20a:	4610      	mov	r0, r2
 800a20c:	4619      	mov	r1, r3
 800a20e:	f7f6 fcf3 	bl	8000bf8 <__aeabi_d2f>
 800a212:	4603      	mov	r3, r0
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	ee02 3a10 	vmov	s4, r3
 800a21a:	edd7 1a01 	vldr	s3, [r7, #4]
 800a21e:	ed97 1a01 	vldr	s2, [r7, #4]
 800a222:	eef0 0a68 	vmov.f32	s1, s17
 800a226:	eeb0 0a48 	vmov.f32	s0, s16
 800a22a:	f7f8 fed7 	bl	8002fdc <straight_table2>
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	ecbd 8b02 	vpop	{d8}
 800a238:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a23c:	b004      	add	sp, #16
 800a23e:	4770      	bx	lr
 800a240:	20000808 	.word	0x20000808
 800a244:	42340000 	.word	0x42340000
 800a248:	00000000 	.word	0x00000000
 800a24c:	431b8000 	.word	0x431b8000
 800a250:	43138000 	.word	0x43138000
 800a254:	c2b40000 	.word	0xc2b40000
 800a258:	408f4000 	.word	0x408f4000

0800a25c <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a25c:	b084      	sub	sp, #16
 800a25e:	b5b0      	push	{r4, r5, r7, lr}
 800a260:	ed2d 8b02 	vpush	{d8}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a26c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a270:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a274:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a278:	2b01      	cmp	r3, #1
 800a27a:	f040 80f3 	bne.w	800a464 <slalomL+0x208>
		highspeed_mode = 0;
 800a27e:	4bcb      	ldr	r3, [pc, #812]	; (800a5ac <slalomL+0x350>)
 800a280:	2200      	movs	r2, #0
 800a282:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a284:	2301      	movs	r3, #1
 800a286:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a288:	2300      	movs	r3, #0
 800a28a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a290:	2300      	movs	r3, #0
 800a292:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a294:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d11f      	bne.n	800a2dc <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a29c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a2a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a2a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2b0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a2b4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a2b8:	eddf 5abd 	vldr	s11, [pc, #756]	; 800a5b0 <slalomL+0x354>
 800a2bc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	eeb0 2a47 	vmov.f32	s4, s14
 800a2c6:	eef0 1a46 	vmov.f32	s3, s12
 800a2ca:	eeb0 1a66 	vmov.f32	s2, s13
 800a2ce:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800a5b4 <slalomL+0x358>
 800a2d2:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a5b8 <slalomL+0x35c>
 800a2d6:	f7f8 fe81 	bl	8002fdc <straight_table2>
 800a2da:	e01e      	b.n	800a31a <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a2dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a2e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a2e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2f0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a2f4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a2f8:	eddf 5aad 	vldr	s11, [pc, #692]	; 800a5b0 <slalomL+0x354>
 800a2fc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	eeb0 2a47 	vmov.f32	s4, s14
 800a306:	eef0 1a46 	vmov.f32	s3, s12
 800a30a:	eeb0 1a66 	vmov.f32	s2, s13
 800a30e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800a5b4 <slalomL+0x358>
 800a312:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a5bc <slalomL+0x360>
 800a316:	f7f8 fe61 	bl	8002fdc <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a31a:	2300      	movs	r3, #0
 800a31c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a31e:	2301      	movs	r3, #1
 800a320:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a322:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a326:	2b00      	cmp	r3, #0
 800a328:	d127      	bne.n	800a37a <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a32a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a32e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a332:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a336:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a33a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a33e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a342:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a346:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a34a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a34e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a352:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a356:	eddf 4a96 	vldr	s9, [pc, #600]	; 800a5b0 <slalomL+0x354>
 800a35a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	eeb0 2a47 	vmov.f32	s4, s14
 800a364:	eef0 1a45 	vmov.f32	s3, s10
 800a368:	eeb0 1a65 	vmov.f32	s2, s11
 800a36c:	eef0 0a46 	vmov.f32	s1, s12
 800a370:	eeb0 0a66 	vmov.f32	s0, s13
 800a374:	f7f8 fe32 	bl	8002fdc <straight_table2>
 800a378:	e022      	b.n	800a3c0 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a37a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a37e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a382:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a386:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a38a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a38e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a392:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a396:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a39a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a39e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a5b0 <slalomL+0x354>
 800a3a2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	eeb0 2a47 	vmov.f32	s4, s14
 800a3ac:	eef0 1a45 	vmov.f32	s3, s10
 800a3b0:	eeb0 1a65 	vmov.f32	s2, s11
 800a3b4:	eef0 0a46 	vmov.f32	s1, s12
 800a3b8:	eeb0 0a66 	vmov.f32	s0, s13
 800a3bc:	f7f8 fe0e 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a3c0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10c      	bne.n	800a3e2 <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a3c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a3d0:	eeb0 1a47 	vmov.f32	s2, s14
 800a3d4:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a5c0 <slalomL+0x364>
 800a3d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3dc:	f7f9 fd74 	bl	8003ec8 <mollifier_slalom_table>
 800a3e0:	e013      	b.n	800a40a <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a3e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a3ea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a3ee:	eef0 2a66 	vmov.f32	s5, s13
 800a3f2:	eeb0 2a47 	vmov.f32	s4, s14
 800a3f6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a5b4 <slalomL+0x358>
 800a3fa:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a5b4 <slalomL+0x358>
 800a3fe:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a5c0 <slalomL+0x364>
 800a402:	eeb0 0a67 	vmov.f32	s0, s15
 800a406:	f7f9 fc0f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a40a:	2300      	movs	r3, #0
 800a40c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a40e:	2300      	movs	r3, #0
 800a410:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a412:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a416:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a5b0 <slalomL+0x354>
 800a41a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a41e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a422:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a426:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a42a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a42e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a432:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a436:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a43a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a5b0 <slalomL+0x354>
 800a43e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	eeb0 2a47 	vmov.f32	s4, s14
 800a448:	eef0 1a65 	vmov.f32	s3, s11
 800a44c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a5b4 <slalomL+0x358>
 800a450:	eef0 0a46 	vmov.f32	s1, s12
 800a454:	eeb0 0a66 	vmov.f32	s0, s13
 800a458:	f7f8 fdc0 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a45c:	4b53      	ldr	r3, [pc, #332]	; (800a5ac <slalomL+0x350>)
 800a45e:	2200      	movs	r2, #0
 800a460:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a462:	e09a      	b.n	800a59a <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a464:	2300      	movs	r3, #0
 800a466:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a468:	2300      	movs	r3, #0
 800a46a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a46c:	2301      	movs	r3, #1
 800a46e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a470:	2300      	movs	r3, #0
 800a472:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a474:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a478:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a47c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a480:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a484:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a488:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a490:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a494:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a498:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a5b0 <slalomL+0x354>
 800a49c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	eeb0 2a47 	vmov.f32	s4, s14
 800a4a6:	eef0 1a45 	vmov.f32	s3, s10
 800a4aa:	eeb0 1a65 	vmov.f32	s2, s11
 800a4ae:	eef0 0a46 	vmov.f32	s1, s12
 800a4b2:	eeb0 0a66 	vmov.f32	s0, s13
 800a4b6:	f7f8 fd91 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a4ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d10c      	bne.n	800a4dc <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a4c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4ca:	eeb0 1a47 	vmov.f32	s2, s14
 800a4ce:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a5c0 <slalomL+0x364>
 800a4d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a4d6:	f7f9 fcf7 	bl	8003ec8 <mollifier_slalom_table>
 800a4da:	e013      	b.n	800a504 <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a4dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a4e8:	eef0 2a66 	vmov.f32	s5, s13
 800a4ec:	eeb0 2a47 	vmov.f32	s4, s14
 800a4f0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a5b4 <slalomL+0x358>
 800a4f4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a5b4 <slalomL+0x358>
 800a4f8:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a5c0 <slalomL+0x364>
 800a4fc:	eeb0 0a67 	vmov.f32	s0, s15
 800a500:	f7f9 fb92 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800a504:	2300      	movs	r3, #0
 800a506:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a50c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a510:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a514:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a518:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a51c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a520:	edd7 7a01 	vldr	s15, [r7, #4]
 800a524:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a52c:	eef0 7ae7 	vabs.f32	s15, s15
 800a530:	ee17 0a90 	vmov	r0, s15
 800a534:	f7f6 f830 	bl	8000598 <__aeabi_f2d>
 800a538:	f04f 0200 	mov.w	r2, #0
 800a53c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a540:	f7f6 f9ac 	bl	800089c <__aeabi_ddiv>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4614      	mov	r4, r2
 800a54a:	461d      	mov	r5, r3
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f6 f822 	bl	8000598 <__aeabi_f2d>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f6 f99e 	bl	800089c <__aeabi_ddiv>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4610      	mov	r0, r2
 800a566:	4619      	mov	r1, r3
 800a568:	f04f 0200 	mov.w	r2, #0
 800a56c:	4b15      	ldr	r3, [pc, #84]	; (800a5c4 <slalomL+0x368>)
 800a56e:	f7f5 feb5 	bl	80002dc <__adddf3>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a576:	4610      	mov	r0, r2
 800a578:	4619      	mov	r1, r3
 800a57a:	f7f6 fb3d 	bl	8000bf8 <__aeabi_d2f>
 800a57e:	4603      	mov	r3, r0
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	ee02 3a10 	vmov	s4, r3
 800a586:	edd7 1a01 	vldr	s3, [r7, #4]
 800a58a:	ed97 1a01 	vldr	s2, [r7, #4]
 800a58e:	eef0 0a68 	vmov.f32	s1, s17
 800a592:	eeb0 0a48 	vmov.f32	s0, s16
 800a596:	f7f8 fd21 	bl	8002fdc <straight_table2>
}
 800a59a:	bf00      	nop
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	ecbd 8b02 	vpop	{d8}
 800a5a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a5a8:	b004      	add	sp, #16
 800a5aa:	4770      	bx	lr
 800a5ac:	20000808 	.word	0x20000808
 800a5b0:	42340000 	.word	0x42340000
 800a5b4:	00000000 	.word	0x00000000
 800a5b8:	431b8000 	.word	0x431b8000
 800a5bc:	43138000 	.word	0x43138000
 800a5c0:	42b40000 	.word	0x42b40000
 800a5c4:	408f4000 	.word	0x408f4000

0800a5c8 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	b5b0      	push	{r4, r5, r7, lr}
 800a5cc:	ed2d 8b02 	vpush	{d8}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a5d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a5dc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a5e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	f040 80a5 	bne.w	800a734 <turn90R+0x16c>
		highspeed_mode = 1;
 800a5ea:	4ba5      	ldr	r3, [pc, #660]	; (800a880 <turn90R+0x2b8>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a600:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a604:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a608:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a60c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a610:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a614:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a618:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a61c:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a884 <turn90R+0x2bc>
 800a620:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	eeb0 2a47 	vmov.f32	s4, s14
 800a62a:	eef0 1a46 	vmov.f32	s3, s12
 800a62e:	eeb0 1a66 	vmov.f32	s2, s13
 800a632:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a888 <turn90R+0x2c0>
 800a636:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a88c <turn90R+0x2c4>
 800a63a:	f7f8 fccf 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800a63e:	2300      	movs	r3, #0
 800a640:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a642:	2302      	movs	r3, #2
 800a644:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a646:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a64a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a64e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a652:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a656:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a65a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a65e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a662:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a666:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a66a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a884 <turn90R+0x2bc>
 800a66e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	eeb0 2a47 	vmov.f32	s4, s14
 800a678:	eef0 1a45 	vmov.f32	s3, s10
 800a67c:	eeb0 1a65 	vmov.f32	s2, s11
 800a680:	eef0 0a46 	vmov.f32	s1, s12
 800a684:	eeb0 0a66 	vmov.f32	s0, s13
 800a688:	f7f8 fca8 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a68c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a690:	2b01      	cmp	r3, #1
 800a692:	d10c      	bne.n	800a6ae <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a694:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a698:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a69c:	eeb0 1a47 	vmov.f32	s2, s14
 800a6a0:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a890 <turn90R+0x2c8>
 800a6a4:	eeb0 0a67 	vmov.f32	s0, s15
 800a6a8:	f7f9 fc0e 	bl	8003ec8 <mollifier_slalom_table>
 800a6ac:	e015      	b.n	800a6da <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a6ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a6b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a6b6:	eef1 7a67 	vneg.f32	s15, s15
 800a6ba:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a6be:	eef0 2a66 	vmov.f32	s5, s13
 800a6c2:	eeb0 2a67 	vmov.f32	s4, s15
 800a6c6:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a888 <turn90R+0x2c0>
 800a6ca:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a888 <turn90R+0x2c0>
 800a6ce:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a890 <turn90R+0x2c8>
 800a6d2:	eeb0 0a47 	vmov.f32	s0, s14
 800a6d6:	f7f9 faa7 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a6e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a6e6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a894 <turn90R+0x2cc>
 800a6ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a6ee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a6f2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a6f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a6fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a702:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a706:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a70a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a884 <turn90R+0x2bc>
 800a70e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	eeb0 2a47 	vmov.f32	s4, s14
 800a718:	eef0 1a65 	vmov.f32	s3, s11
 800a71c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a888 <turn90R+0x2c0>
 800a720:	eef0 0a46 	vmov.f32	s1, s12
 800a724:	eeb0 0a66 	vmov.f32	s0, s13
 800a728:	f7f8 fc58 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a72c:	4b54      	ldr	r3, [pc, #336]	; (800a880 <turn90R+0x2b8>)
 800a72e:	2200      	movs	r2, #0
 800a730:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a732:	e09c      	b.n	800a86e <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a734:	2300      	movs	r3, #0
 800a736:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a738:	2300      	movs	r3, #0
 800a73a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a73c:	2302      	movs	r3, #2
 800a73e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a740:	2300      	movs	r3, #0
 800a742:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a744:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a748:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a74c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a750:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a754:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a75c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a760:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a764:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a768:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a884 <turn90R+0x2bc>
 800a76c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	eeb0 2a47 	vmov.f32	s4, s14
 800a776:	eef0 1a45 	vmov.f32	s3, s10
 800a77a:	eeb0 1a65 	vmov.f32	s2, s11
 800a77e:	eef0 0a46 	vmov.f32	s1, s12
 800a782:	eeb0 0a66 	vmov.f32	s0, s13
 800a786:	f7f8 fc29 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a78a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d10c      	bne.n	800a7ac <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a792:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a796:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a79a:	eeb0 1a47 	vmov.f32	s2, s14
 800a79e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a890 <turn90R+0x2c8>
 800a7a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a7a6:	f7f9 fb8f 	bl	8003ec8 <mollifier_slalom_table>
 800a7aa:	e015      	b.n	800a7d8 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a7ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a7b4:	eef1 7a67 	vneg.f32	s15, s15
 800a7b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a7bc:	eef0 2a66 	vmov.f32	s5, s13
 800a7c0:	eeb0 2a67 	vmov.f32	s4, s15
 800a7c4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a888 <turn90R+0x2c0>
 800a7c8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a888 <turn90R+0x2c0>
 800a7cc:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a890 <turn90R+0x2c8>
 800a7d0:	eeb0 0a47 	vmov.f32	s0, s14
 800a7d4:	f7f9 fa28 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a7e0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a7e4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a7e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a7f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a7fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a800:	eef0 7ae7 	vabs.f32	s15, s15
 800a804:	ee17 0a90 	vmov	r0, s15
 800a808:	f7f5 fec6 	bl	8000598 <__aeabi_f2d>
 800a80c:	f04f 0200 	mov.w	r2, #0
 800a810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a814:	f7f6 f842 	bl	800089c <__aeabi_ddiv>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4614      	mov	r4, r2
 800a81e:	461d      	mov	r5, r3
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a822:	4618      	mov	r0, r3
 800a824:	f7f5 feb8 	bl	8000598 <__aeabi_f2d>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4620      	mov	r0, r4
 800a82e:	4629      	mov	r1, r5
 800a830:	f7f6 f834 	bl	800089c <__aeabi_ddiv>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4610      	mov	r0, r2
 800a83a:	4619      	mov	r1, r3
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	4b15      	ldr	r3, [pc, #84]	; (800a898 <turn90R+0x2d0>)
 800a842:	f7f5 fd4b 	bl	80002dc <__adddf3>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a84a:	4610      	mov	r0, r2
 800a84c:	4619      	mov	r1, r3
 800a84e:	f7f6 f9d3 	bl	8000bf8 <__aeabi_d2f>
 800a852:	4603      	mov	r3, r0
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	ee02 3a10 	vmov	s4, r3
 800a85a:	edd7 1a01 	vldr	s3, [r7, #4]
 800a85e:	ed97 1a01 	vldr	s2, [r7, #4]
 800a862:	eef0 0a68 	vmov.f32	s1, s17
 800a866:	eeb0 0a48 	vmov.f32	s0, s16
 800a86a:	f7f8 fbb7 	bl	8002fdc <straight_table2>
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	ecbd 8b02 	vpop	{d8}
 800a878:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a87c:	b004      	add	sp, #16
 800a87e:	4770      	bx	lr
 800a880:	20000808 	.word	0x20000808
 800a884:	42340000 	.word	0x42340000
 800a888:	00000000 	.word	0x00000000
 800a88c:	42cd0000 	.word	0x42cd0000
 800a890:	c2b40000 	.word	0xc2b40000
 800a894:	42b40000 	.word	0x42b40000
 800a898:	408f4000 	.word	0x408f4000

0800a89c <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a89c:	b084      	sub	sp, #16
 800a89e:	b5b0      	push	{r4, r5, r7, lr}
 800a8a0:	ed2d 8b02 	vpush	{d8}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a8ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a8b0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a8b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	f040 80a3 	bne.w	800aa04 <turn90L+0x168>
		highspeed_mode = 1;
 800a8be:	4ba3      	ldr	r3, [pc, #652]	; (800ab4c <turn90L+0x2b0>)
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a8d4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a8d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a8dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8e8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a8ec:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a8f0:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ab50 <turn90L+0x2b4>
 800a8f4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	eeb0 2a47 	vmov.f32	s4, s14
 800a8fe:	eef0 1a46 	vmov.f32	s3, s12
 800a902:	eeb0 1a66 	vmov.f32	s2, s13
 800a906:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ab54 <turn90L+0x2b8>
 800a90a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800ab58 <turn90L+0x2bc>
 800a90e:	f7f8 fb65 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800a912:	2300      	movs	r3, #0
 800a914:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a916:	2302      	movs	r3, #2
 800a918:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a91a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a91e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a922:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a926:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a92a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a92e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a932:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a936:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a93a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a93e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ab50 <turn90L+0x2b4>
 800a942:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	eeb0 2a47 	vmov.f32	s4, s14
 800a94c:	eef0 1a45 	vmov.f32	s3, s10
 800a950:	eeb0 1a65 	vmov.f32	s2, s11
 800a954:	eef0 0a46 	vmov.f32	s1, s12
 800a958:	eeb0 0a66 	vmov.f32	s0, s13
 800a95c:	f7f8 fb3e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a960:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a964:	2b01      	cmp	r3, #1
 800a966:	d10c      	bne.n	800a982 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a968:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a96c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a970:	eeb0 1a47 	vmov.f32	s2, s14
 800a974:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ab5c <turn90L+0x2c0>
 800a978:	eeb0 0a67 	vmov.f32	s0, s15
 800a97c:	f7f9 faa4 	bl	8003ec8 <mollifier_slalom_table>
 800a980:	e013      	b.n	800a9aa <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a982:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a986:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a98a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a98e:	eef0 2a66 	vmov.f32	s5, s13
 800a992:	eeb0 2a47 	vmov.f32	s4, s14
 800a996:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ab54 <turn90L+0x2b8>
 800a99a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ab54 <turn90L+0x2b8>
 800a99e:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ab5c <turn90L+0x2c0>
 800a9a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9a6:	f7f9 f93f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a9b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a9b6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ab5c <turn90L+0x2c0>
 800a9ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a9be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a9c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a9c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9d2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a9d6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a9da:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ab50 <turn90L+0x2b4>
 800a9de:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	eeb0 2a47 	vmov.f32	s4, s14
 800a9e8:	eef0 1a65 	vmov.f32	s3, s11
 800a9ec:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ab54 <turn90L+0x2b8>
 800a9f0:	eef0 0a46 	vmov.f32	s1, s12
 800a9f4:	eeb0 0a66 	vmov.f32	s0, s13
 800a9f8:	f7f8 faf0 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a9fc:	4b53      	ldr	r3, [pc, #332]	; (800ab4c <turn90L+0x2b0>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800aa02:	e09a      	b.n	800ab3a <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800aa04:	2300      	movs	r3, #0
 800aa06:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa14:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa18:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa1c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa20:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa30:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa34:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa38:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ab50 <turn90L+0x2b4>
 800aa3c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	eeb0 2a47 	vmov.f32	s4, s14
 800aa46:	eef0 1a45 	vmov.f32	s3, s10
 800aa4a:	eeb0 1a65 	vmov.f32	s2, s11
 800aa4e:	eef0 0a46 	vmov.f32	s1, s12
 800aa52:	eeb0 0a66 	vmov.f32	s0, s13
 800aa56:	f7f8 fac1 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aa5a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d10c      	bne.n	800aa7c <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aa62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa66:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aa6a:	eeb0 1a47 	vmov.f32	s2, s14
 800aa6e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ab5c <turn90L+0x2c0>
 800aa72:	eeb0 0a67 	vmov.f32	s0, s15
 800aa76:	f7f9 fa27 	bl	8003ec8 <mollifier_slalom_table>
 800aa7a:	e013      	b.n	800aaa4 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aa7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aa84:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aa88:	eef0 2a66 	vmov.f32	s5, s13
 800aa8c:	eeb0 2a47 	vmov.f32	s4, s14
 800aa90:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ab54 <turn90L+0x2b8>
 800aa94:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ab54 <turn90L+0x2b8>
 800aa98:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ab5c <turn90L+0x2c0>
 800aa9c:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa0:	f7f9 f8c2 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aaac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aab0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aab4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aab8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aabc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aac0:	edd7 7a01 	vldr	s15, [r7, #4]
 800aac4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aacc:	eef0 7ae7 	vabs.f32	s15, s15
 800aad0:	ee17 0a90 	vmov	r0, s15
 800aad4:	f7f5 fd60 	bl	8000598 <__aeabi_f2d>
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aae0:	f7f5 fedc 	bl	800089c <__aeabi_ddiv>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4614      	mov	r4, r2
 800aaea:	461d      	mov	r5, r3
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7f5 fd52 	bl	8000598 <__aeabi_f2d>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4629      	mov	r1, r5
 800aafc:	f7f5 fece 	bl	800089c <__aeabi_ddiv>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4610      	mov	r0, r2
 800ab06:	4619      	mov	r1, r3
 800ab08:	f04f 0200 	mov.w	r2, #0
 800ab0c:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <turn90L+0x2c4>)
 800ab0e:	f7f5 fbe5 	bl	80002dc <__adddf3>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ab16:	4610      	mov	r0, r2
 800ab18:	4619      	mov	r1, r3
 800ab1a:	f7f6 f86d 	bl	8000bf8 <__aeabi_d2f>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	ee02 3a10 	vmov	s4, r3
 800ab26:	edd7 1a01 	vldr	s3, [r7, #4]
 800ab2a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ab2e:	eef0 0a68 	vmov.f32	s1, s17
 800ab32:	eeb0 0a48 	vmov.f32	s0, s16
 800ab36:	f7f8 fa51 	bl	8002fdc <straight_table2>
}
 800ab3a:	bf00      	nop
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	ecbd 8b02 	vpop	{d8}
 800ab44:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ab48:	b004      	add	sp, #16
 800ab4a:	4770      	bx	lr
 800ab4c:	20000808 	.word	0x20000808
 800ab50:	42340000 	.word	0x42340000
 800ab54:	00000000 	.word	0x00000000
 800ab58:	42cd0000 	.word	0x42cd0000
 800ab5c:	42b40000 	.word	0x42b40000
 800ab60:	408f4000 	.word	0x408f4000

0800ab64 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ab64:	b084      	sub	sp, #16
 800ab66:	b5b0      	push	{r4, r5, r7, lr}
 800ab68:	ed2d 8b02 	vpush	{d8}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ab74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ab78:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ab7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	f040 80a5 	bne.w	800acd0 <turn180R+0x16c>
		highspeed_mode = 1;
 800ab86:	4ba5      	ldr	r3, [pc, #660]	; (800ae1c <turn180R+0x2b8>)
 800ab88:	2201      	movs	r2, #1
 800ab8a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ab9c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aba0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aba4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aba8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abb0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800abb4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800abb8:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ae20 <turn180R+0x2bc>
 800abbc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	eeb0 2a47 	vmov.f32	s4, s14
 800abc6:	eef0 1a46 	vmov.f32	s3, s12
 800abca:	eeb0 1a66 	vmov.f32	s2, s13
 800abce:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ae24 <turn180R+0x2c0>
 800abd2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ae28 <turn180R+0x2c4>
 800abd6:	f7f8 fa01 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800abda:	2300      	movs	r3, #0
 800abdc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800abde:	2302      	movs	r3, #2
 800abe0:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800abe2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800abe6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800abea:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800abee:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800abf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abfe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ac02:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac06:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ae20 <turn180R+0x2bc>
 800ac0a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	eeb0 2a47 	vmov.f32	s4, s14
 800ac14:	eef0 1a45 	vmov.f32	s3, s10
 800ac18:	eeb0 1a65 	vmov.f32	s2, s11
 800ac1c:	eef0 0a46 	vmov.f32	s1, s12
 800ac20:	eeb0 0a66 	vmov.f32	s0, s13
 800ac24:	f7f8 f9da 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ac28:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d10c      	bne.n	800ac4a <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ac30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ac38:	eeb0 1a47 	vmov.f32	s2, s14
 800ac3c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ae2c <turn180R+0x2c8>
 800ac40:	eeb0 0a67 	vmov.f32	s0, s15
 800ac44:	f7f9 f940 	bl	8003ec8 <mollifier_slalom_table>
 800ac48:	e015      	b.n	800ac76 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ac4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ac52:	eef1 7a67 	vneg.f32	s15, s15
 800ac56:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ac5a:	eef0 2a66 	vmov.f32	s5, s13
 800ac5e:	eeb0 2a67 	vmov.f32	s4, s15
 800ac62:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ae24 <turn180R+0x2c0>
 800ac66:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ae24 <turn180R+0x2c0>
 800ac6a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ae2c <turn180R+0x2c8>
 800ac6e:	eeb0 0a47 	vmov.f32	s0, s14
 800ac72:	f7f8 ffd9 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ac7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ac82:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ae30 <turn180R+0x2cc>
 800ac86:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ac8a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac8e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac9e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800aca2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aca6:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ae20 <turn180R+0x2bc>
 800acaa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	eeb0 2a47 	vmov.f32	s4, s14
 800acb4:	eef0 1a65 	vmov.f32	s3, s11
 800acb8:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ae24 <turn180R+0x2c0>
 800acbc:	eef0 0a46 	vmov.f32	s1, s12
 800acc0:	eeb0 0a66 	vmov.f32	s0, s13
 800acc4:	f7f8 f98a 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800acc8:	4b54      	ldr	r3, [pc, #336]	; (800ae1c <turn180R+0x2b8>)
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800acce:	e09c      	b.n	800ae0a <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800acd0:	2300      	movs	r3, #0
 800acd2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800acd8:	2302      	movs	r3, #2
 800acda:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800acdc:	2300      	movs	r3, #0
 800acde:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ace0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ace4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ace8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800acec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acfc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad00:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad04:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ae20 <turn180R+0x2bc>
 800ad08:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	eeb0 2a47 	vmov.f32	s4, s14
 800ad12:	eef0 1a45 	vmov.f32	s3, s10
 800ad16:	eeb0 1a65 	vmov.f32	s2, s11
 800ad1a:	eef0 0a46 	vmov.f32	s1, s12
 800ad1e:	eeb0 0a66 	vmov.f32	s0, s13
 800ad22:	f7f8 f95b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ad26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d10c      	bne.n	800ad48 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ad2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad36:	eeb0 1a47 	vmov.f32	s2, s14
 800ad3a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ae2c <turn180R+0x2c8>
 800ad3e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad42:	f7f9 f8c1 	bl	8003ec8 <mollifier_slalom_table>
 800ad46:	e015      	b.n	800ad74 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad48:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad50:	eef1 7a67 	vneg.f32	s15, s15
 800ad54:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad58:	eef0 2a66 	vmov.f32	s5, s13
 800ad5c:	eeb0 2a67 	vmov.f32	s4, s15
 800ad60:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ae24 <turn180R+0x2c0>
 800ad64:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ae24 <turn180R+0x2c0>
 800ad68:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ae2c <turn180R+0x2c8>
 800ad6c:	eeb0 0a47 	vmov.f32	s0, s14
 800ad70:	f7f8 ff5a 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ad74:	2301      	movs	r3, #1
 800ad76:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ad7c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ad80:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ad84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad90:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ad98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad9c:	eef0 7ae7 	vabs.f32	s15, s15
 800ada0:	ee17 0a90 	vmov	r0, s15
 800ada4:	f7f5 fbf8 	bl	8000598 <__aeabi_f2d>
 800ada8:	f04f 0200 	mov.w	r2, #0
 800adac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adb0:	f7f5 fd74 	bl	800089c <__aeabi_ddiv>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4614      	mov	r4, r2
 800adba:	461d      	mov	r5, r3
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f5 fbea 	bl	8000598 <__aeabi_f2d>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4620      	mov	r0, r4
 800adca:	4629      	mov	r1, r5
 800adcc:	f7f5 fd66 	bl	800089c <__aeabi_ddiv>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4610      	mov	r0, r2
 800add6:	4619      	mov	r1, r3
 800add8:	f04f 0200 	mov.w	r2, #0
 800addc:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <turn180R+0x2d0>)
 800adde:	f7f5 fa7d 	bl	80002dc <__adddf3>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ade6:	4610      	mov	r0, r2
 800ade8:	4619      	mov	r1, r3
 800adea:	f7f5 ff05 	bl	8000bf8 <__aeabi_d2f>
 800adee:	4603      	mov	r3, r0
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	ee02 3a10 	vmov	s4, r3
 800adf6:	edd7 1a01 	vldr	s3, [r7, #4]
 800adfa:	ed97 1a01 	vldr	s2, [r7, #4]
 800adfe:	eef0 0a68 	vmov.f32	s1, s17
 800ae02:	eeb0 0a48 	vmov.f32	s0, s16
 800ae06:	f7f8 f8e9 	bl	8002fdc <straight_table2>
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	ecbd 8b02 	vpop	{d8}
 800ae14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ae18:	b004      	add	sp, #16
 800ae1a:	4770      	bx	lr
 800ae1c:	20000808 	.word	0x20000808
 800ae20:	42340000 	.word	0x42340000
 800ae24:	00000000 	.word	0x00000000
 800ae28:	42cd0000 	.word	0x42cd0000
 800ae2c:	c3340000 	.word	0xc3340000
 800ae30:	42b40000 	.word	0x42b40000
 800ae34:	408f4000 	.word	0x408f4000

0800ae38 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ae38:	b084      	sub	sp, #16
 800ae3a:	b5b0      	push	{r4, r5, r7, lr}
 800ae3c:	ed2d 8b02 	vpush	{d8}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ae48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae4c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ae50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	f040 80a3 	bne.w	800afa0 <turn180L+0x168>
		highspeed_mode = 1;
 800ae5a:	4ba3      	ldr	r3, [pc, #652]	; (800b0e8 <turn180L+0x2b0>)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ae60:	2301      	movs	r3, #1
 800ae62:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ae70:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ae74:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae84:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ae88:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ae8c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b0ec <turn180L+0x2b4>
 800ae90:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	eeb0 2a47 	vmov.f32	s4, s14
 800ae9a:	eef0 1a46 	vmov.f32	s3, s12
 800ae9e:	eeb0 1a66 	vmov.f32	s2, s13
 800aea2:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b0f0 <turn180L+0x2b8>
 800aea6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b0f4 <turn180L+0x2bc>
 800aeaa:	f7f8 f897 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aeb6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aeba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aebe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aec2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aec6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aeca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aece:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aed2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aed6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aeda:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b0ec <turn180L+0x2b4>
 800aede:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	eeb0 2a47 	vmov.f32	s4, s14
 800aee8:	eef0 1a45 	vmov.f32	s3, s10
 800aeec:	eeb0 1a65 	vmov.f32	s2, s11
 800aef0:	eef0 0a46 	vmov.f32	s1, s12
 800aef4:	eeb0 0a66 	vmov.f32	s0, s13
 800aef8:	f7f8 f870 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aefc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800af00:	2b01      	cmp	r3, #1
 800af02:	d10c      	bne.n	800af1e <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800af04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af0c:	eeb0 1a47 	vmov.f32	s2, s14
 800af10:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b0f8 <turn180L+0x2c0>
 800af14:	eeb0 0a67 	vmov.f32	s0, s15
 800af18:	f7f8 ffd6 	bl	8003ec8 <mollifier_slalom_table>
 800af1c:	e013      	b.n	800af46 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800af1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af26:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800af2a:	eef0 2a66 	vmov.f32	s5, s13
 800af2e:	eeb0 2a47 	vmov.f32	s4, s14
 800af32:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b0f0 <turn180L+0x2b8>
 800af36:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b0f0 <turn180L+0x2b8>
 800af3a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b0f8 <turn180L+0x2c0>
 800af3e:	eeb0 0a67 	vmov.f32	s0, s15
 800af42:	f7f8 fe71 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800af46:	2300      	movs	r3, #0
 800af48:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800af4e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800af52:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b0fc <turn180L+0x2c4>
 800af56:	ee77 6a87 	vadd.f32	s13, s15, s14
 800af5a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af5e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af6e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800af72:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800af76:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b0ec <turn180L+0x2b4>
 800af7a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	eeb0 2a47 	vmov.f32	s4, s14
 800af84:	eef0 1a65 	vmov.f32	s3, s11
 800af88:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b0f0 <turn180L+0x2b8>
 800af8c:	eef0 0a46 	vmov.f32	s1, s12
 800af90:	eeb0 0a66 	vmov.f32	s0, s13
 800af94:	f7f8 f822 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800af98:	4b53      	ldr	r3, [pc, #332]	; (800b0e8 <turn180L+0x2b0>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800af9e:	e09a      	b.n	800b0d6 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800afa0:	2300      	movs	r3, #0
 800afa2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800afa8:	2302      	movs	r3, #2
 800afaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afac:	2300      	movs	r3, #0
 800afae:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afb0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800afb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800afb8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800afbc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afcc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800afd0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afd4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b0ec <turn180L+0x2b4>
 800afd8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	eeb0 2a47 	vmov.f32	s4, s14
 800afe2:	eef0 1a45 	vmov.f32	s3, s10
 800afe6:	eeb0 1a65 	vmov.f32	s2, s11
 800afea:	eef0 0a46 	vmov.f32	s1, s12
 800afee:	eeb0 0a66 	vmov.f32	s0, s13
 800aff2:	f7f7 fff3 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aff6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800affa:	2b01      	cmp	r3, #1
 800affc:	d10c      	bne.n	800b018 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800affe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b002:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b006:	eeb0 1a47 	vmov.f32	s2, s14
 800b00a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b0f8 <turn180L+0x2c0>
 800b00e:	eeb0 0a67 	vmov.f32	s0, s15
 800b012:	f7f8 ff59 	bl	8003ec8 <mollifier_slalom_table>
 800b016:	e013      	b.n	800b040 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b01c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b020:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b024:	eef0 2a66 	vmov.f32	s5, s13
 800b028:	eeb0 2a47 	vmov.f32	s4, s14
 800b02c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b0f0 <turn180L+0x2b8>
 800b030:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b0f0 <turn180L+0x2b8>
 800b034:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b0f8 <turn180L+0x2c0>
 800b038:	eeb0 0a67 	vmov.f32	s0, s15
 800b03c:	f7f8 fdf4 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b040:	2301      	movs	r3, #1
 800b042:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b048:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b04c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b050:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b054:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b05c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b064:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b068:	eef0 7ae7 	vabs.f32	s15, s15
 800b06c:	ee17 0a90 	vmov	r0, s15
 800b070:	f7f5 fa92 	bl	8000598 <__aeabi_f2d>
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b07c:	f7f5 fc0e 	bl	800089c <__aeabi_ddiv>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	4614      	mov	r4, r2
 800b086:	461d      	mov	r5, r3
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f5 fa84 	bl	8000598 <__aeabi_f2d>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	4620      	mov	r0, r4
 800b096:	4629      	mov	r1, r5
 800b098:	f7f5 fc00 	bl	800089c <__aeabi_ddiv>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f04f 0200 	mov.w	r2, #0
 800b0a8:	4b15      	ldr	r3, [pc, #84]	; (800b100 <turn180L+0x2c8>)
 800b0aa:	f7f5 f917 	bl	80002dc <__adddf3>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	f7f5 fd9f 	bl	8000bf8 <__aeabi_d2f>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	ee02 3a10 	vmov	s4, r3
 800b0c2:	edd7 1a01 	vldr	s3, [r7, #4]
 800b0c6:	ed97 1a01 	vldr	s2, [r7, #4]
 800b0ca:	eef0 0a68 	vmov.f32	s1, s17
 800b0ce:	eeb0 0a48 	vmov.f32	s0, s16
 800b0d2:	f7f7 ff83 	bl	8002fdc <straight_table2>
}
 800b0d6:	bf00      	nop
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	ecbd 8b02 	vpop	{d8}
 800b0e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b0e4:	b004      	add	sp, #16
 800b0e6:	4770      	bx	lr
 800b0e8:	20000808 	.word	0x20000808
 800b0ec:	42340000 	.word	0x42340000
 800b0f0:	00000000 	.word	0x00000000
 800b0f4:	42cd0000 	.word	0x42cd0000
 800b0f8:	43340000 	.word	0x43340000
 800b0fc:	42b40000 	.word	0x42b40000
 800b100:	408f4000 	.word	0x408f4000
 800b104:	00000000 	.word	0x00000000

0800b108 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b108:	b084      	sub	sp, #16
 800b10a:	b5b0      	push	{r4, r5, r7, lr}
 800b10c:	ed2d 8b02 	vpush	{d8}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b11c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b120:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b124:	2b01      	cmp	r3, #1
 800b126:	f040 80ae 	bne.w	800b286 <turn45inR+0x17e>
		highspeed_mode = 1;
 800b12a:	4bdd      	ldr	r3, [pc, #884]	; (800b4a0 <turn45inR+0x398>)
 800b12c:	2201      	movs	r2, #1
 800b12e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b130:	2301      	movs	r3, #1
 800b132:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b134:	2300      	movs	r3, #0
 800b136:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b140:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b144:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b148:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b14c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b150:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b154:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b158:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b15c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b4a4 <turn45inR+0x39c>
 800b160:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	eeb0 2a47 	vmov.f32	s4, s14
 800b16a:	eef0 1a46 	vmov.f32	s3, s12
 800b16e:	eeb0 1a66 	vmov.f32	s2, s13
 800b172:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b4b0 <turn45inR+0x3a8>
 800b176:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b4a8 <turn45inR+0x3a0>
 800b17a:	f7f7 ff2f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b17e:	2300      	movs	r3, #0
 800b180:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b182:	2302      	movs	r3, #2
 800b184:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b186:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b18a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b18e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b192:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b196:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b19a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b19e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b1a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1aa:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b4a4 <turn45inR+0x39c>
 800b1ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	eeb0 2a47 	vmov.f32	s4, s14
 800b1b8:	eef0 1a45 	vmov.f32	s3, s10
 800b1bc:	eeb0 1a65 	vmov.f32	s2, s11
 800b1c0:	eef0 0a46 	vmov.f32	s1, s12
 800b1c4:	eeb0 0a66 	vmov.f32	s0, s13
 800b1c8:	f7f7 ff08 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b1cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d10c      	bne.n	800b1ee <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b1d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b1dc:	eeb0 1a47 	vmov.f32	s2, s14
 800b1e0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b4b4 <turn45inR+0x3ac>
 800b1e4:	eeb0 0a67 	vmov.f32	s0, s15
 800b1e8:	f7f8 fe6e 	bl	8003ec8 <mollifier_slalom_table>
 800b1ec:	e015      	b.n	800b21a <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b1ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b1f6:	eef1 7a67 	vneg.f32	s15, s15
 800b1fa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b1fe:	eef0 2a66 	vmov.f32	s5, s13
 800b202:	eeb0 2a67 	vmov.f32	s4, s15
 800b206:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b4b0 <turn45inR+0x3a8>
 800b20a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b4b0 <turn45inR+0x3a8>
 800b20e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b4b4 <turn45inR+0x3ac>
 800b212:	eeb0 0a47 	vmov.f32	s0, s14
 800b216:	f7f8 fd07 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	4618      	mov	r0, r3
 800b226:	f7f5 f9b7 	bl	8000598 <__aeabi_f2d>
 800b22a:	a39b      	add	r3, pc, #620	; (adr r3, 800b498 <turn45inR+0x390>)
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	f7f5 f854 	bl	80002dc <__adddf3>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	4610      	mov	r0, r2
 800b23a:	4619      	mov	r1, r3
 800b23c:	f7f5 fcdc 	bl	8000bf8 <__aeabi_d2f>
 800b240:	4603      	mov	r3, r0
 800b242:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b246:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b24a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b24e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b252:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b256:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b25a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b25e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b4a4 <turn45inR+0x39c>
 800b262:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	eeb0 2a47 	vmov.f32	s4, s14
 800b26c:	eef0 1a46 	vmov.f32	s3, s12
 800b270:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b4b0 <turn45inR+0x3a8>
 800b274:	eef0 0a66 	vmov.f32	s1, s13
 800b278:	ee00 3a10 	vmov	s0, r3
 800b27c:	f7f7 feae 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b280:	4b87      	ldr	r3, [pc, #540]	; (800b4a0 <turn45inR+0x398>)
 800b282:	2200      	movs	r2, #0
 800b284:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b286:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f040 809d 	bne.w	800b3ca <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b290:	2300      	movs	r3, #0
 800b292:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b294:	2300      	movs	r3, #0
 800b296:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b298:	2302      	movs	r3, #2
 800b29a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2a8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2ac:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2bc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2c0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2c4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b4a4 <turn45inR+0x39c>
 800b2c8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	eeb0 2a47 	vmov.f32	s4, s14
 800b2d2:	eef0 1a45 	vmov.f32	s3, s10
 800b2d6:	eeb0 1a65 	vmov.f32	s2, s11
 800b2da:	eef0 0a46 	vmov.f32	s1, s12
 800b2de:	eeb0 0a66 	vmov.f32	s0, s13
 800b2e2:	f7f7 fe7b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b2e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d10c      	bne.n	800b308 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b2ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b2f6:	eeb0 1a47 	vmov.f32	s2, s14
 800b2fa:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b4b4 <turn45inR+0x3ac>
 800b2fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b302:	f7f8 fde1 	bl	8003ec8 <mollifier_slalom_table>
 800b306:	e015      	b.n	800b334 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b308:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b30c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b310:	eef1 7a67 	vneg.f32	s15, s15
 800b314:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b318:	eef0 2a66 	vmov.f32	s5, s13
 800b31c:	eeb0 2a67 	vmov.f32	s4, s15
 800b320:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b4b0 <turn45inR+0x3a8>
 800b324:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b4b0 <turn45inR+0x3a8>
 800b328:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b4b4 <turn45inR+0x3ac>
 800b32c:	eeb0 0a47 	vmov.f32	s0, s14
 800b330:	f7f8 fc7a 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b334:	2303      	movs	r3, #3
 800b336:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b338:	2300      	movs	r3, #0
 800b33a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b33c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b340:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b344:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b348:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b34c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b350:	edd7 7a01 	vldr	s15, [r7, #4]
 800b354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b35c:	eef0 7ae7 	vabs.f32	s15, s15
 800b360:	ee17 0a90 	vmov	r0, s15
 800b364:	f7f5 f918 	bl	8000598 <__aeabi_f2d>
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b370:	f7f5 fa94 	bl	800089c <__aeabi_ddiv>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4614      	mov	r4, r2
 800b37a:	461d      	mov	r5, r3
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f5 f90a 	bl	8000598 <__aeabi_f2d>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f5 fa86 	bl	800089c <__aeabi_ddiv>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4610      	mov	r0, r2
 800b396:	4619      	mov	r1, r3
 800b398:	f04f 0200 	mov.w	r2, #0
 800b39c:	4b43      	ldr	r3, [pc, #268]	; (800b4ac <turn45inR+0x3a4>)
 800b39e:	f7f4 ff9d 	bl	80002dc <__adddf3>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	f7f5 fc25 	bl	8000bf8 <__aeabi_d2f>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	ee02 3a10 	vmov	s4, r3
 800b3b6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b3ba:	ed97 1a01 	vldr	s2, [r7, #4]
 800b3be:	eef0 0a68 	vmov.f32	s1, s17
 800b3c2:	eeb0 0a48 	vmov.f32	s0, s16
 800b3c6:	f7f7 fe09 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b3ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	f240 80d0 	bls.w	800b574 <turn45inR+0x46c>

		highspeed_mode = 1;
 800b3d4:	4b32      	ldr	r3, [pc, #200]	; (800b4a0 <turn45inR+0x398>)
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b3ea:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b3ee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3fe:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b402:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b406:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b4a4 <turn45inR+0x39c>
 800b40a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	eeb0 2a47 	vmov.f32	s4, s14
 800b414:	eef0 1a46 	vmov.f32	s3, s12
 800b418:	eeb0 1a66 	vmov.f32	s2, s13
 800b41c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b4b0 <turn45inR+0x3a8>
 800b420:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b4a8 <turn45inR+0x3a0>
 800b424:	f7f7 fdda 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b428:	2300      	movs	r3, #0
 800b42a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b42c:	2302      	movs	r3, #2
 800b42e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b430:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b434:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b438:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b43c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b440:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b444:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b44c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b450:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b454:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b4a4 <turn45inR+0x39c>
 800b458:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	eeb0 2a47 	vmov.f32	s4, s14
 800b462:	eef0 1a45 	vmov.f32	s3, s10
 800b466:	eeb0 1a65 	vmov.f32	s2, s11
 800b46a:	eef0 0a46 	vmov.f32	s1, s12
 800b46e:	eeb0 0a66 	vmov.f32	s0, s13
 800b472:	f7f7 fdb3 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b476:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d11c      	bne.n	800b4b8 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b47e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b482:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b486:	eeb0 1a47 	vmov.f32	s2, s14
 800b48a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b4b4 <turn45inR+0x3ac>
 800b48e:	eeb0 0a67 	vmov.f32	s0, s15
 800b492:	f7f8 fd19 	bl	8003ec8 <mollifier_slalom_table>
 800b496:	e025      	b.n	800b4e4 <turn45inR+0x3dc>
 800b498:	c022ec18 	.word	0xc022ec18
 800b49c:	405fd1de 	.word	0x405fd1de
 800b4a0:	20000808 	.word	0x20000808
 800b4a4:	42340000 	.word	0x42340000
 800b4a8:	42cd0000 	.word	0x42cd0000
 800b4ac:	408f4000 	.word	0x408f4000
 800b4b0:	00000000 	.word	0x00000000
 800b4b4:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b4b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b4c0:	eef1 7a67 	vneg.f32	s15, s15
 800b4c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b4c8:	eef0 2a66 	vmov.f32	s5, s13
 800b4cc:	eeb0 2a67 	vmov.f32	s4, s15
 800b4d0:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b4b0 <turn45inR+0x3a8>
 800b4d4:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b4b0 <turn45inR+0x3a8>
 800b4d8:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b4b4 <turn45inR+0x3ac>
 800b4dc:	eeb0 0a47 	vmov.f32	s0, s14
 800b4e0:	f7f8 fba2 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4f0:	3b02      	subs	r3, #2
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7f5 f83e 	bl	8000574 <__aeabi_i2d>
 800b4f8:	a325      	add	r3, pc, #148	; (adr r3, 800b590 <turn45inR+0x488>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f5 f8a3 	bl	8000648 <__aeabi_dmul>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4614      	mov	r4, r2
 800b508:	461d      	mov	r5, r3
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7f5 f843 	bl	8000598 <__aeabi_f2d>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4620      	mov	r0, r4
 800b518:	4629      	mov	r1, r5
 800b51a:	f7f4 fedf 	bl	80002dc <__adddf3>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4610      	mov	r0, r2
 800b524:	4619      	mov	r1, r3
 800b526:	f7f5 fb67 	bl	8000bf8 <__aeabi_d2f>
 800b52a:	4603      	mov	r3, r0
 800b52c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b530:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b534:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b538:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b53c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b540:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b544:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b548:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b54c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b588 <turn45inR+0x480>
 800b550:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	eeb0 2a47 	vmov.f32	s4, s14
 800b55a:	eef0 1a65 	vmov.f32	s3, s11
 800b55e:	eeb0 1a46 	vmov.f32	s2, s12
 800b562:	eef0 0a66 	vmov.f32	s1, s13
 800b566:	ee00 3a10 	vmov	s0, r3
 800b56a:	f7f7 fd37 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b56e:	4b07      	ldr	r3, [pc, #28]	; (800b58c <turn45inR+0x484>)
 800b570:	2200      	movs	r2, #0
 800b572:	701a      	strb	r2, [r3, #0]
	}

}
 800b574:	bf00      	nop
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	ecbd 8b02 	vpop	{d8}
 800b57e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b582:	b004      	add	sp, #16
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	42340000 	.word	0x42340000
 800b58c:	20000808 	.word	0x20000808
 800b590:	c022ec18 	.word	0xc022ec18
 800b594:	404fd1de 	.word	0x404fd1de

0800b598 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b598:	b084      	sub	sp, #16
 800b59a:	b5b0      	push	{r4, r5, r7, lr}
 800b59c:	ed2d 8b02 	vpush	{d8}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b5a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5ac:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b5b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	f040 80ac 	bne.w	800b712 <turn45inL+0x17a>
		highspeed_mode = 1;
 800b5ba:	4bdb      	ldr	r3, [pc, #876]	; (800b928 <turn45inL+0x390>)
 800b5bc:	2201      	movs	r2, #1
 800b5be:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b5d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b5d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5e4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b5e8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b5ec:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800b938 <turn45inL+0x3a0>
 800b5f0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	eeb0 2a47 	vmov.f32	s4, s14
 800b5fa:	eef0 1a46 	vmov.f32	s3, s12
 800b5fe:	eeb0 1a66 	vmov.f32	s2, s13
 800b602:	eddf 0acc 	vldr	s1, [pc, #816]	; 800b934 <turn45inL+0x39c>
 800b606:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800b92c <turn45inL+0x394>
 800b60a:	f7f7 fce7 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b60e:	2300      	movs	r3, #0
 800b610:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b612:	2302      	movs	r3, #2
 800b614:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b616:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b61a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b61e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b622:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b626:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b62a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b62e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b632:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b636:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b63a:	eddf 4abf 	vldr	s9, [pc, #764]	; 800b938 <turn45inL+0x3a0>
 800b63e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	eeb0 2a47 	vmov.f32	s4, s14
 800b648:	eef0 1a45 	vmov.f32	s3, s10
 800b64c:	eeb0 1a65 	vmov.f32	s2, s11
 800b650:	eef0 0a46 	vmov.f32	s1, s12
 800b654:	eeb0 0a66 	vmov.f32	s0, s13
 800b658:	f7f7 fcc0 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b65c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b660:	2b01      	cmp	r3, #1
 800b662:	d10c      	bne.n	800b67e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b664:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b668:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b66c:	eeb0 1a47 	vmov.f32	s2, s14
 800b670:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800b938 <turn45inL+0x3a0>
 800b674:	eeb0 0a67 	vmov.f32	s0, s15
 800b678:	f7f8 fc26 	bl	8003ec8 <mollifier_slalom_table>
 800b67c:	e013      	b.n	800b6a6 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b67e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b682:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b686:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b68a:	eef0 2a66 	vmov.f32	s5, s13
 800b68e:	eeb0 2a47 	vmov.f32	s4, s14
 800b692:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800b934 <turn45inL+0x39c>
 800b696:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800b934 <turn45inL+0x39c>
 800b69a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800b938 <turn45inL+0x3a0>
 800b69e:	eeb0 0a67 	vmov.f32	s0, s15
 800b6a2:	f7f8 fac1 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f4 ff71 	bl	8000598 <__aeabi_f2d>
 800b6b6:	a39a      	add	r3, pc, #616	; (adr r3, 800b920 <turn45inL+0x388>)
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f7f4 fe0e 	bl	80002dc <__adddf3>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f7f5 fa96 	bl	8000bf8 <__aeabi_d2f>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b6d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b6d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6e2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b6e6:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b6ea:	eddf 5a93 	vldr	s11, [pc, #588]	; 800b938 <turn45inL+0x3a0>
 800b6ee:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	eeb0 2a47 	vmov.f32	s4, s14
 800b6f8:	eef0 1a46 	vmov.f32	s3, s12
 800b6fc:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800b934 <turn45inL+0x39c>
 800b700:	eef0 0a66 	vmov.f32	s1, s13
 800b704:	ee00 3a10 	vmov	s0, r3
 800b708:	f7f7 fc68 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b70c:	4b86      	ldr	r3, [pc, #536]	; (800b928 <turn45inL+0x390>)
 800b70e:	2200      	movs	r2, #0
 800b710:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b712:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b716:	2b00      	cmp	r3, #0
 800b718:	f040 809b 	bne.w	800b852 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b71c:	2300      	movs	r3, #0
 800b71e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b720:	2300      	movs	r3, #0
 800b722:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b724:	2302      	movs	r3, #2
 800b726:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b728:	2300      	movs	r3, #0
 800b72a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b72c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b730:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b734:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b738:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b73c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b740:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b744:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b748:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b74c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b750:	eddf 4a79 	vldr	s9, [pc, #484]	; 800b938 <turn45inL+0x3a0>
 800b754:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	eeb0 2a47 	vmov.f32	s4, s14
 800b75e:	eef0 1a45 	vmov.f32	s3, s10
 800b762:	eeb0 1a65 	vmov.f32	s2, s11
 800b766:	eef0 0a46 	vmov.f32	s1, s12
 800b76a:	eeb0 0a66 	vmov.f32	s0, s13
 800b76e:	f7f7 fc35 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b772:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b776:	2b01      	cmp	r3, #1
 800b778:	d10c      	bne.n	800b794 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b77a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b77e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b782:	eeb0 1a47 	vmov.f32	s2, s14
 800b786:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800b938 <turn45inL+0x3a0>
 800b78a:	eeb0 0a67 	vmov.f32	s0, s15
 800b78e:	f7f8 fb9b 	bl	8003ec8 <mollifier_slalom_table>
 800b792:	e013      	b.n	800b7bc <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b794:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b798:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b79c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7a0:	eef0 2a66 	vmov.f32	s5, s13
 800b7a4:	eeb0 2a47 	vmov.f32	s4, s14
 800b7a8:	eddf 1a62 	vldr	s3, [pc, #392]	; 800b934 <turn45inL+0x39c>
 800b7ac:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800b934 <turn45inL+0x39c>
 800b7b0:	eddf 0a61 	vldr	s1, [pc, #388]	; 800b938 <turn45inL+0x3a0>
 800b7b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7b8:	f7f8 fa36 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b7c4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b7c8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b7cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7d8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b7dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b7e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7e4:	eef0 7ae7 	vabs.f32	s15, s15
 800b7e8:	ee17 0a90 	vmov	r0, s15
 800b7ec:	f7f4 fed4 	bl	8000598 <__aeabi_f2d>
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7f8:	f7f5 f850 	bl	800089c <__aeabi_ddiv>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4614      	mov	r4, r2
 800b802:	461d      	mov	r5, r3
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	4618      	mov	r0, r3
 800b808:	f7f4 fec6 	bl	8000598 <__aeabi_f2d>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f5 f842 	bl	800089c <__aeabi_ddiv>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4610      	mov	r0, r2
 800b81e:	4619      	mov	r1, r3
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	4b42      	ldr	r3, [pc, #264]	; (800b930 <turn45inL+0x398>)
 800b826:	f7f4 fd59 	bl	80002dc <__adddf3>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b82e:	4610      	mov	r0, r2
 800b830:	4619      	mov	r1, r3
 800b832:	f7f5 f9e1 	bl	8000bf8 <__aeabi_d2f>
 800b836:	4603      	mov	r3, r0
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	ee02 3a10 	vmov	s4, r3
 800b83e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b842:	ed97 1a01 	vldr	s2, [r7, #4]
 800b846:	eef0 0a68 	vmov.f32	s1, s17
 800b84a:	eeb0 0a48 	vmov.f32	s0, s16
 800b84e:	f7f7 fbc5 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b852:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b856:	2b01      	cmp	r3, #1
 800b858:	f240 80cc 	bls.w	800b9f4 <turn45inL+0x45c>

		highspeed_mode = 1;
 800b85c:	4b32      	ldr	r3, [pc, #200]	; (800b928 <turn45inL+0x390>)
 800b85e:	2201      	movs	r2, #1
 800b860:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b862:	2301      	movs	r3, #1
 800b864:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b866:	2300      	movs	r3, #0
 800b868:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b86e:	2300      	movs	r3, #0
 800b870:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b872:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b876:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b87a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b87e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b882:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b886:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b88a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b88e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800b938 <turn45inL+0x3a0>
 800b892:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	eeb0 2a47 	vmov.f32	s4, s14
 800b89c:	eef0 1a46 	vmov.f32	s3, s12
 800b8a0:	eeb0 1a66 	vmov.f32	s2, s13
 800b8a4:	eddf 0a23 	vldr	s1, [pc, #140]	; 800b934 <turn45inL+0x39c>
 800b8a8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800b92c <turn45inL+0x394>
 800b8ac:	f7f7 fb96 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b8b8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b8bc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b8c0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b8c4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8d4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b8d8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b8dc:	eddf 4a16 	vldr	s9, [pc, #88]	; 800b938 <turn45inL+0x3a0>
 800b8e0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	eeb0 2a47 	vmov.f32	s4, s14
 800b8ea:	eef0 1a45 	vmov.f32	s3, s10
 800b8ee:	eeb0 1a65 	vmov.f32	s2, s11
 800b8f2:	eef0 0a46 	vmov.f32	s1, s12
 800b8f6:	eeb0 0a66 	vmov.f32	s0, s13
 800b8fa:	f7f7 fb6f 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b8fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b902:	2b01      	cmp	r3, #1
 800b904:	d11a      	bne.n	800b93c <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b906:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b90a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b90e:	eeb0 1a47 	vmov.f32	s2, s14
 800b912:	eddf 0a09 	vldr	s1, [pc, #36]	; 800b938 <turn45inL+0x3a0>
 800b916:	eeb0 0a67 	vmov.f32	s0, s15
 800b91a:	f7f8 fad5 	bl	8003ec8 <mollifier_slalom_table>
 800b91e:	e021      	b.n	800b964 <turn45inL+0x3cc>
 800b920:	c022ec18 	.word	0xc022ec18
 800b924:	405fd1de 	.word	0x405fd1de
 800b928:	20000808 	.word	0x20000808
 800b92c:	42cd0000 	.word	0x42cd0000
 800b930:	408f4000 	.word	0x408f4000
 800b934:	00000000 	.word	0x00000000
 800b938:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b93c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b940:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b944:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b948:	eef0 2a66 	vmov.f32	s5, s13
 800b94c:	eeb0 2a47 	vmov.f32	s4, s14
 800b950:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800b934 <turn45inL+0x39c>
 800b954:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800b934 <turn45inL+0x39c>
 800b958:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800b938 <turn45inL+0x3a0>
 800b95c:	eeb0 0a67 	vmov.f32	s0, s15
 800b960:	f7f8 f962 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b964:	2300      	movs	r3, #0
 800b966:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b968:	2300      	movs	r3, #0
 800b96a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b96c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b970:	3b02      	subs	r3, #2
 800b972:	4618      	mov	r0, r3
 800b974:	f7f4 fdfe 	bl	8000574 <__aeabi_i2d>
 800b978:	a325      	add	r3, pc, #148	; (adr r3, 800ba10 <turn45inL+0x478>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 fe63 	bl	8000648 <__aeabi_dmul>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4614      	mov	r4, r2
 800b988:	461d      	mov	r5, r3
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f4 fe03 	bl	8000598 <__aeabi_f2d>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4620      	mov	r0, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	f7f4 fc9f 	bl	80002dc <__adddf3>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	f7f5 f927 	bl	8000bf8 <__aeabi_d2f>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b9b4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9c4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b9c8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9cc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800ba08 <turn45inL+0x470>
 800b9d0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	eeb0 2a47 	vmov.f32	s4, s14
 800b9da:	eef0 1a65 	vmov.f32	s3, s11
 800b9de:	eeb0 1a46 	vmov.f32	s2, s12
 800b9e2:	eef0 0a66 	vmov.f32	s1, s13
 800b9e6:	ee00 3a10 	vmov	s0, r3
 800b9ea:	f7f7 faf7 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <turn45inL+0x474>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
	}

}
 800b9f4:	bf00      	nop
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	ecbd 8b02 	vpop	{d8}
 800b9fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ba02:	b004      	add	sp, #16
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	42340000 	.word	0x42340000
 800ba0c:	20000808 	.word	0x20000808
 800ba10:	c022ec18 	.word	0xc022ec18
 800ba14:	404fd1de 	.word	0x404fd1de

0800ba18 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ba18:	b084      	sub	sp, #16
 800ba1a:	b5b0      	push	{r4, r5, r7, lr}
 800ba1c:	ed2d 8b02 	vpush	{d8}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ba28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ba2c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ba30:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	f040 80ae 	bne.w	800bb96 <turn135inR+0x17e>
		highspeed_mode = 1;
 800ba3a:	4bdd      	ldr	r3, [pc, #884]	; (800bdb0 <turn135inR+0x398>)
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ba40:	2301      	movs	r3, #1
 800ba42:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba50:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba54:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba64:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ba68:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba6c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bdb4 <turn135inR+0x39c>
 800ba70:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	eeb0 2a47 	vmov.f32	s4, s14
 800ba7a:	eef0 1a46 	vmov.f32	s3, s12
 800ba7e:	eeb0 1a66 	vmov.f32	s2, s13
 800ba82:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bdc0 <turn135inR+0x3a8>
 800ba86:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bdb8 <turn135inR+0x3a0>
 800ba8a:	f7f7 faa7 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ba92:	2302      	movs	r3, #2
 800ba94:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba96:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba9a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba9e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800baa2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800baa6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bab2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bab6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baba:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bdb4 <turn135inR+0x39c>
 800babe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	eeb0 2a47 	vmov.f32	s4, s14
 800bac8:	eef0 1a45 	vmov.f32	s3, s10
 800bacc:	eeb0 1a65 	vmov.f32	s2, s11
 800bad0:	eef0 0a46 	vmov.f32	s1, s12
 800bad4:	eeb0 0a66 	vmov.f32	s0, s13
 800bad8:	f7f7 fa80 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800badc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d10c      	bne.n	800bafe <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bae4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bae8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800baec:	eeb0 1a47 	vmov.f32	s2, s14
 800baf0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bdc4 <turn135inR+0x3ac>
 800baf4:	eeb0 0a67 	vmov.f32	s0, s15
 800baf8:	f7f8 f9e6 	bl	8003ec8 <mollifier_slalom_table>
 800bafc:	e015      	b.n	800bb2a <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bafe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb02:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bb06:	eef1 7a67 	vneg.f32	s15, s15
 800bb0a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bb0e:	eef0 2a66 	vmov.f32	s5, s13
 800bb12:	eeb0 2a67 	vmov.f32	s4, s15
 800bb16:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bdc0 <turn135inR+0x3a8>
 800bb1a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bdc0 <turn135inR+0x3a8>
 800bb1e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bdc4 <turn135inR+0x3ac>
 800bb22:	eeb0 0a47 	vmov.f32	s0, s14
 800bb26:	f7f8 f87f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7f4 fd2f 	bl	8000598 <__aeabi_f2d>
 800bb3a:	a39b      	add	r3, pc, #620	; (adr r3, 800bda8 <turn135inR+0x390>)
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f7f4 fbcc 	bl	80002dc <__adddf3>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	f7f5 f854 	bl	8000bf8 <__aeabi_d2f>
 800bb50:	4603      	mov	r3, r0
 800bb52:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb56:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb66:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bb6a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bb6e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bdb4 <turn135inR+0x39c>
 800bb72:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	eeb0 2a47 	vmov.f32	s4, s14
 800bb7c:	eef0 1a46 	vmov.f32	s3, s12
 800bb80:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bdc0 <turn135inR+0x3a8>
 800bb84:	eef0 0a66 	vmov.f32	s1, s13
 800bb88:	ee00 3a10 	vmov	s0, r3
 800bb8c:	f7f7 fa26 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bb90:	4b87      	ldr	r3, [pc, #540]	; (800bdb0 <turn135inR+0x398>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bb96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f040 809d 	bne.w	800bcda <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bba0:	2300      	movs	r3, #0
 800bba2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bba8:	2302      	movs	r3, #2
 800bbaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbb0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbb8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbbc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbcc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbd0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbd4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bdb4 <turn135inR+0x39c>
 800bbd8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	eeb0 2a47 	vmov.f32	s4, s14
 800bbe2:	eef0 1a45 	vmov.f32	s3, s10
 800bbe6:	eeb0 1a65 	vmov.f32	s2, s11
 800bbea:	eef0 0a46 	vmov.f32	s1, s12
 800bbee:	eeb0 0a66 	vmov.f32	s0, s13
 800bbf2:	f7f7 f9f3 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bbf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d10c      	bne.n	800bc18 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bbfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc06:	eeb0 1a47 	vmov.f32	s2, s14
 800bc0a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bdc4 <turn135inR+0x3ac>
 800bc0e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc12:	f7f8 f959 	bl	8003ec8 <mollifier_slalom_table>
 800bc16:	e015      	b.n	800bc44 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc20:	eef1 7a67 	vneg.f32	s15, s15
 800bc24:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc28:	eef0 2a66 	vmov.f32	s5, s13
 800bc2c:	eeb0 2a67 	vmov.f32	s4, s15
 800bc30:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bdc0 <turn135inR+0x3a8>
 800bc34:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bdc0 <turn135inR+0x3a8>
 800bc38:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bdc4 <turn135inR+0x3ac>
 800bc3c:	eeb0 0a47 	vmov.f32	s0, s14
 800bc40:	f7f7 fff2 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bc4c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bc50:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bc54:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc60:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bc68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc6c:	eef0 7ae7 	vabs.f32	s15, s15
 800bc70:	ee17 0a90 	vmov	r0, s15
 800bc74:	f7f4 fc90 	bl	8000598 <__aeabi_f2d>
 800bc78:	f04f 0200 	mov.w	r2, #0
 800bc7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc80:	f7f4 fe0c 	bl	800089c <__aeabi_ddiv>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4614      	mov	r4, r2
 800bc8a:	461d      	mov	r5, r3
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7f4 fc82 	bl	8000598 <__aeabi_f2d>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	f7f4 fdfe 	bl	800089c <__aeabi_ddiv>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4610      	mov	r0, r2
 800bca6:	4619      	mov	r1, r3
 800bca8:	f04f 0200 	mov.w	r2, #0
 800bcac:	4b43      	ldr	r3, [pc, #268]	; (800bdbc <turn135inR+0x3a4>)
 800bcae:	f7f4 fb15 	bl	80002dc <__adddf3>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	4619      	mov	r1, r3
 800bcba:	f7f4 ff9d 	bl	8000bf8 <__aeabi_d2f>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	ee02 3a10 	vmov	s4, r3
 800bcc6:	edd7 1a01 	vldr	s3, [r7, #4]
 800bcca:	ed97 1a01 	vldr	s2, [r7, #4]
 800bcce:	eef0 0a68 	vmov.f32	s1, s17
 800bcd2:	eeb0 0a48 	vmov.f32	s0, s16
 800bcd6:	f7f7 f981 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800bcda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	f240 80d0 	bls.w	800be84 <turn135inR+0x46c>

		highspeed_mode = 1;
 800bce4:	4b32      	ldr	r3, [pc, #200]	; (800bdb0 <turn135inR+0x398>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bcea:	2301      	movs	r3, #1
 800bcec:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bcfa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bcfe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd0e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bd12:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd16:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bdb4 <turn135inR+0x39c>
 800bd1a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	eeb0 2a47 	vmov.f32	s4, s14
 800bd24:	eef0 1a46 	vmov.f32	s3, s12
 800bd28:	eeb0 1a66 	vmov.f32	s2, s13
 800bd2c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bdc0 <turn135inR+0x3a8>
 800bd30:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bdb8 <turn135inR+0x3a0>
 800bd34:	f7f7 f952 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd40:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd44:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd48:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd4c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd5c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd60:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd64:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bdb4 <turn135inR+0x39c>
 800bd68:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	eeb0 2a47 	vmov.f32	s4, s14
 800bd72:	eef0 1a45 	vmov.f32	s3, s10
 800bd76:	eeb0 1a65 	vmov.f32	s2, s11
 800bd7a:	eef0 0a46 	vmov.f32	s1, s12
 800bd7e:	eeb0 0a66 	vmov.f32	s0, s13
 800bd82:	f7f7 f92b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bd86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d11c      	bne.n	800bdc8 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bd8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd92:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd96:	eeb0 1a47 	vmov.f32	s2, s14
 800bd9a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bdc4 <turn135inR+0x3ac>
 800bd9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bda2:	f7f8 f891 	bl	8003ec8 <mollifier_slalom_table>
 800bda6:	e025      	b.n	800bdf4 <turn135inR+0x3dc>
 800bda8:	c022ec18 	.word	0xc022ec18
 800bdac:	405fd1de 	.word	0x405fd1de
 800bdb0:	20000808 	.word	0x20000808
 800bdb4:	42340000 	.word	0x42340000
 800bdb8:	42cd0000 	.word	0x42cd0000
 800bdbc:	408f4000 	.word	0x408f4000
 800bdc0:	00000000 	.word	0x00000000
 800bdc4:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bdc8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bdd0:	eef1 7a67 	vneg.f32	s15, s15
 800bdd4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bdd8:	eef0 2a66 	vmov.f32	s5, s13
 800bddc:	eeb0 2a67 	vmov.f32	s4, s15
 800bde0:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bdc0 <turn135inR+0x3a8>
 800bde4:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bdc0 <turn135inR+0x3a8>
 800bde8:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bdc4 <turn135inR+0x3ac>
 800bdec:	eeb0 0a47 	vmov.f32	s0, s14
 800bdf0:	f7f7 ff1a 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdfc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be00:	3b02      	subs	r3, #2
 800be02:	4618      	mov	r0, r3
 800be04:	f7f4 fbb6 	bl	8000574 <__aeabi_i2d>
 800be08:	a325      	add	r3, pc, #148	; (adr r3, 800bea0 <turn135inR+0x488>)
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	f7f4 fc1b 	bl	8000648 <__aeabi_dmul>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4614      	mov	r4, r2
 800be18:	461d      	mov	r5, r3
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7f4 fbbb 	bl	8000598 <__aeabi_f2d>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	4620      	mov	r0, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	f7f4 fa57 	bl	80002dc <__adddf3>
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	4610      	mov	r0, r2
 800be34:	4619      	mov	r1, r3
 800be36:	f7f4 fedf 	bl	8000bf8 <__aeabi_d2f>
 800be3a:	4603      	mov	r3, r0
 800be3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be40:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be44:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be48:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be54:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800be58:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be5c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800be98 <turn135inR+0x480>
 800be60:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	eeb0 2a47 	vmov.f32	s4, s14
 800be6a:	eef0 1a65 	vmov.f32	s3, s11
 800be6e:	eeb0 1a46 	vmov.f32	s2, s12
 800be72:	eef0 0a66 	vmov.f32	s1, s13
 800be76:	ee00 3a10 	vmov	s0, r3
 800be7a:	f7f7 f8af 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800be7e:	4b07      	ldr	r3, [pc, #28]	; (800be9c <turn135inR+0x484>)
 800be80:	2200      	movs	r2, #0
 800be82:	701a      	strb	r2, [r3, #0]
	}

}
 800be84:	bf00      	nop
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	ecbd 8b02 	vpop	{d8}
 800be8e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800be92:	b004      	add	sp, #16
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	42340000 	.word	0x42340000
 800be9c:	20000808 	.word	0x20000808
 800bea0:	c022ec18 	.word	0xc022ec18
 800bea4:	404fd1de 	.word	0x404fd1de

0800bea8 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bea8:	b084      	sub	sp, #16
 800beaa:	b5b0      	push	{r4, r5, r7, lr}
 800beac:	ed2d 8b02 	vpush	{d8}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800beb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bebc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bec0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	f040 80ac 	bne.w	800c022 <turn135inL+0x17a>
		highspeed_mode = 1;
 800beca:	4bdb      	ldr	r3, [pc, #876]	; (800c238 <turn135inL+0x390>)
 800becc:	2201      	movs	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bed0:	2301      	movs	r3, #1
 800bed2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bed4:	2300      	movs	r3, #0
 800bed6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bedc:	2300      	movs	r3, #0
 800bede:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bee0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bee4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bee8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bef4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bef8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800befc:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c23c <turn135inL+0x394>
 800bf00:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	eeb0 2a47 	vmov.f32	s4, s14
 800bf0a:	eef0 1a46 	vmov.f32	s3, s12
 800bf0e:	eeb0 1a66 	vmov.f32	s2, s13
 800bf12:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c248 <turn135inL+0x3a0>
 800bf16:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c240 <turn135inL+0x398>
 800bf1a:	f7f7 f85f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bf22:	2302      	movs	r3, #2
 800bf24:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bf2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bf32:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf42:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bf46:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf4a:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c23c <turn135inL+0x394>
 800bf4e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	eeb0 2a47 	vmov.f32	s4, s14
 800bf58:	eef0 1a45 	vmov.f32	s3, s10
 800bf5c:	eeb0 1a65 	vmov.f32	s2, s11
 800bf60:	eef0 0a46 	vmov.f32	s1, s12
 800bf64:	eeb0 0a66 	vmov.f32	s0, s13
 800bf68:	f7f7 f838 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bf6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d10c      	bne.n	800bf8e <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bf74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf7c:	eeb0 1a47 	vmov.f32	s2, s14
 800bf80:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c24c <turn135inL+0x3a4>
 800bf84:	eeb0 0a67 	vmov.f32	s0, s15
 800bf88:	f7f7 ff9e 	bl	8003ec8 <mollifier_slalom_table>
 800bf8c:	e013      	b.n	800bfb6 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bf8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf92:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf96:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf9a:	eef0 2a66 	vmov.f32	s5, s13
 800bf9e:	eeb0 2a47 	vmov.f32	s4, s14
 800bfa2:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c248 <turn135inL+0x3a0>
 800bfa6:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c248 <turn135inL+0x3a0>
 800bfaa:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c24c <turn135inL+0x3a4>
 800bfae:	eeb0 0a67 	vmov.f32	s0, s15
 800bfb2:	f7f7 fe39 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7f4 fae9 	bl	8000598 <__aeabi_f2d>
 800bfc6:	a39a      	add	r3, pc, #616	; (adr r3, 800c230 <turn135inL+0x388>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f7f4 f986 	bl	80002dc <__adddf3>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f7f4 fe0e 	bl	8000bf8 <__aeabi_d2f>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bfe2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bfe6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bfea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bff2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bff6:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bffa:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c23c <turn135inL+0x394>
 800bffe:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	eeb0 2a47 	vmov.f32	s4, s14
 800c008:	eef0 1a46 	vmov.f32	s3, s12
 800c00c:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c248 <turn135inL+0x3a0>
 800c010:	eef0 0a66 	vmov.f32	s1, s13
 800c014:	ee00 3a10 	vmov	s0, r3
 800c018:	f7f6 ffe0 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c01c:	4b86      	ldr	r3, [pc, #536]	; (800c238 <turn135inL+0x390>)
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c022:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c026:	2b00      	cmp	r3, #0
 800c028:	f040 809b 	bne.w	800c162 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c02c:	2300      	movs	r3, #0
 800c02e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c030:	2300      	movs	r3, #0
 800c032:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c034:	2302      	movs	r3, #2
 800c036:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c038:	2300      	movs	r3, #0
 800c03a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c03c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c040:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c044:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c048:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c04c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c050:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c054:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c058:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c05c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c060:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c23c <turn135inL+0x394>
 800c064:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	eeb0 2a47 	vmov.f32	s4, s14
 800c06e:	eef0 1a45 	vmov.f32	s3, s10
 800c072:	eeb0 1a65 	vmov.f32	s2, s11
 800c076:	eef0 0a46 	vmov.f32	s1, s12
 800c07a:	eeb0 0a66 	vmov.f32	s0, s13
 800c07e:	f7f6 ffad 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c082:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c086:	2b01      	cmp	r3, #1
 800c088:	d10c      	bne.n	800c0a4 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c08a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c08e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c092:	eeb0 1a47 	vmov.f32	s2, s14
 800c096:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c24c <turn135inL+0x3a4>
 800c09a:	eeb0 0a67 	vmov.f32	s0, s15
 800c09e:	f7f7 ff13 	bl	8003ec8 <mollifier_slalom_table>
 800c0a2:	e013      	b.n	800c0cc <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0ac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0b0:	eef0 2a66 	vmov.f32	s5, s13
 800c0b4:	eeb0 2a47 	vmov.f32	s4, s14
 800c0b8:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c248 <turn135inL+0x3a0>
 800c0bc:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c248 <turn135inL+0x3a0>
 800c0c0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c24c <turn135inL+0x3a4>
 800c0c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c0c8:	f7f7 fdae 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c0d4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c0d8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c0dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c0f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0f4:	eef0 7ae7 	vabs.f32	s15, s15
 800c0f8:	ee17 0a90 	vmov	r0, s15
 800c0fc:	f7f4 fa4c 	bl	8000598 <__aeabi_f2d>
 800c100:	f04f 0200 	mov.w	r2, #0
 800c104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c108:	f7f4 fbc8 	bl	800089c <__aeabi_ddiv>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4614      	mov	r4, r2
 800c112:	461d      	mov	r5, r3
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	4618      	mov	r0, r3
 800c118:	f7f4 fa3e 	bl	8000598 <__aeabi_f2d>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4620      	mov	r0, r4
 800c122:	4629      	mov	r1, r5
 800c124:	f7f4 fbba 	bl	800089c <__aeabi_ddiv>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	4610      	mov	r0, r2
 800c12e:	4619      	mov	r1, r3
 800c130:	f04f 0200 	mov.w	r2, #0
 800c134:	4b43      	ldr	r3, [pc, #268]	; (800c244 <turn135inL+0x39c>)
 800c136:	f7f4 f8d1 	bl	80002dc <__adddf3>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c13e:	4610      	mov	r0, r2
 800c140:	4619      	mov	r1, r3
 800c142:	f7f4 fd59 	bl	8000bf8 <__aeabi_d2f>
 800c146:	4603      	mov	r3, r0
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	ee02 3a10 	vmov	s4, r3
 800c14e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c152:	ed97 1a01 	vldr	s2, [r7, #4]
 800c156:	eef0 0a68 	vmov.f32	s1, s17
 800c15a:	eeb0 0a48 	vmov.f32	s0, s16
 800c15e:	f7f6 ff3d 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800c162:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c166:	2b01      	cmp	r3, #1
 800c168:	f240 80ce 	bls.w	800c308 <turn135inL+0x460>

		highspeed_mode = 1;
 800c16c:	4b32      	ldr	r3, [pc, #200]	; (800c238 <turn135inL+0x390>)
 800c16e:	2201      	movs	r2, #1
 800c170:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c172:	2301      	movs	r3, #1
 800c174:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c176:	2300      	movs	r3, #0
 800c178:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c17e:	2300      	movs	r3, #0
 800c180:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c182:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c186:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c18a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c18e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c192:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c196:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c19a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c19e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c23c <turn135inL+0x394>
 800c1a2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	eeb0 2a47 	vmov.f32	s4, s14
 800c1ac:	eef0 1a46 	vmov.f32	s3, s12
 800c1b0:	eeb0 1a66 	vmov.f32	s2, s13
 800c1b4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c248 <turn135inL+0x3a0>
 800c1b8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c240 <turn135inL+0x398>
 800c1bc:	f7f6 ff0e 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1c8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c1cc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c1d0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c1d4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1e4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c1e8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1ec:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c23c <turn135inL+0x394>
 800c1f0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	eeb0 2a47 	vmov.f32	s4, s14
 800c1fa:	eef0 1a45 	vmov.f32	s3, s10
 800c1fe:	eeb0 1a65 	vmov.f32	s2, s11
 800c202:	eef0 0a46 	vmov.f32	s1, s12
 800c206:	eeb0 0a66 	vmov.f32	s0, s13
 800c20a:	f7f6 fee7 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c20e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c212:	2b01      	cmp	r3, #1
 800c214:	d11c      	bne.n	800c250 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c216:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c21a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c21e:	eeb0 1a47 	vmov.f32	s2, s14
 800c222:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c24c <turn135inL+0x3a4>
 800c226:	eeb0 0a67 	vmov.f32	s0, s15
 800c22a:	f7f7 fe4d 	bl	8003ec8 <mollifier_slalom_table>
 800c22e:	e023      	b.n	800c278 <turn135inL+0x3d0>
 800c230:	c022ec18 	.word	0xc022ec18
 800c234:	405fd1de 	.word	0x405fd1de
 800c238:	20000808 	.word	0x20000808
 800c23c:	42340000 	.word	0x42340000
 800c240:	42cd0000 	.word	0x42cd0000
 800c244:	408f4000 	.word	0x408f4000
 800c248:	00000000 	.word	0x00000000
 800c24c:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c250:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c254:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c258:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c25c:	eef0 2a66 	vmov.f32	s5, s13
 800c260:	eeb0 2a47 	vmov.f32	s4, s14
 800c264:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c248 <turn135inL+0x3a0>
 800c268:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c248 <turn135inL+0x3a0>
 800c26c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c24c <turn135inL+0x3a4>
 800c270:	eeb0 0a67 	vmov.f32	s0, s15
 800c274:	f7f7 fcd8 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c278:	2300      	movs	r3, #0
 800c27a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c280:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c284:	3b02      	subs	r3, #2
 800c286:	4618      	mov	r0, r3
 800c288:	f7f4 f974 	bl	8000574 <__aeabi_i2d>
 800c28c:	a326      	add	r3, pc, #152	; (adr r3, 800c328 <turn135inL+0x480>)
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	f7f4 f9d9 	bl	8000648 <__aeabi_dmul>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	4614      	mov	r4, r2
 800c29c:	461d      	mov	r5, r3
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f4 f979 	bl	8000598 <__aeabi_f2d>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	f7f4 f815 	bl	80002dc <__adddf3>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f7f4 fc9d 	bl	8000bf8 <__aeabi_d2f>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c2c8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c2dc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2e0:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c320 <turn135inL+0x478>
 800c2e4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	eeb0 2a47 	vmov.f32	s4, s14
 800c2ee:	eef0 1a65 	vmov.f32	s3, s11
 800c2f2:	eeb0 1a46 	vmov.f32	s2, s12
 800c2f6:	eef0 0a66 	vmov.f32	s1, s13
 800c2fa:	ee00 3a10 	vmov	s0, r3
 800c2fe:	f7f6 fe6d 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c302:	4b08      	ldr	r3, [pc, #32]	; (800c324 <turn135inL+0x47c>)
 800c304:	2200      	movs	r2, #0
 800c306:	701a      	strb	r2, [r3, #0]
	}

}
 800c308:	bf00      	nop
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	ecbd 8b02 	vpop	{d8}
 800c312:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c316:	b004      	add	sp, #16
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	f3af 8000 	nop.w
 800c320:	42340000 	.word	0x42340000
 800c324:	20000808 	.word	0x20000808
 800c328:	c022ec18 	.word	0xc022ec18
 800c32c:	404fd1de 	.word	0x404fd1de

0800c330 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c330:	b084      	sub	sp, #16
 800c332:	b5b0      	push	{r4, r5, r7, lr}
 800c334:	ed2d 8b02 	vpush	{d8}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c344:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c348:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	f040 80a5 	bne.w	800c49c <turn45outR+0x16c>
		highspeed_mode = 1;
 800c352:	4be9      	ldr	r3, [pc, #932]	; (800c6f8 <turn45outR+0x3c8>)
 800c354:	2201      	movs	r2, #1
 800c356:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c358:	2300      	movs	r3, #0
 800c35a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c364:	2300      	movs	r3, #0
 800c366:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c368:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c36c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c370:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c374:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c37c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c380:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c384:	eddf 5add 	vldr	s11, [pc, #884]	; 800c6fc <turn45outR+0x3cc>
 800c388:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	eeb0 2a47 	vmov.f32	s4, s14
 800c392:	eef0 1a46 	vmov.f32	s3, s12
 800c396:	eeb0 1a66 	vmov.f32	s2, s13
 800c39a:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c700 <turn45outR+0x3d0>
 800c39e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c704 <turn45outR+0x3d4>
 800c3a2:	f7f6 fe1b 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3ae:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c3b2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c3b6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c3ba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3ca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c3ce:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3d2:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c6fc <turn45outR+0x3cc>
 800c3d6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	eeb0 2a47 	vmov.f32	s4, s14
 800c3e0:	eef0 1a45 	vmov.f32	s3, s10
 800c3e4:	eeb0 1a65 	vmov.f32	s2, s11
 800c3e8:	eef0 0a46 	vmov.f32	s1, s12
 800c3ec:	eeb0 0a66 	vmov.f32	s0, s13
 800c3f0:	f7f6 fdf4 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c3f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d10c      	bne.n	800c416 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c3fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c400:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c404:	eeb0 1a47 	vmov.f32	s2, s14
 800c408:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c708 <turn45outR+0x3d8>
 800c40c:	eeb0 0a67 	vmov.f32	s0, s15
 800c410:	f7f7 fd5a 	bl	8003ec8 <mollifier_slalom_table>
 800c414:	e015      	b.n	800c442 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c416:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c41a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c41e:	eef1 7a67 	vneg.f32	s15, s15
 800c422:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c426:	eef0 2a66 	vmov.f32	s5, s13
 800c42a:	eeb0 2a67 	vmov.f32	s4, s15
 800c42e:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c700 <turn45outR+0x3d0>
 800c432:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c700 <turn45outR+0x3d0>
 800c436:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c708 <turn45outR+0x3d8>
 800c43a:	eeb0 0a47 	vmov.f32	s0, s14
 800c43e:	f7f7 fbf3 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c442:	2300      	movs	r3, #0
 800c444:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c446:	2300      	movs	r3, #0
 800c448:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c44a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c44e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c70c <turn45outR+0x3dc>
 800c452:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c456:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c45a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c45e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c462:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c46a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c46e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c472:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c6fc <turn45outR+0x3cc>
 800c476:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	eeb0 2a47 	vmov.f32	s4, s14
 800c480:	eef0 1a65 	vmov.f32	s3, s11
 800c484:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c700 <turn45outR+0x3d0>
 800c488:	eef0 0a46 	vmov.f32	s1, s12
 800c48c:	eeb0 0a66 	vmov.f32	s0, s13
 800c490:	f7f6 fda4 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c494:	4b98      	ldr	r3, [pc, #608]	; (800c6f8 <turn45outR+0x3c8>)
 800c496:	2200      	movs	r2, #0
 800c498:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c49a:	e123      	b.n	800c6e4 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c49c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	f240 8082 	bls.w	800c5aa <turn45outR+0x27a>
		highspeed_mode = 1;
 800c4a6:	4b94      	ldr	r3, [pc, #592]	; (800c6f8 <turn45outR+0x3c8>)
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4bc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4c4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c4c8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4d8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c4dc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4e0:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c6fc <turn45outR+0x3cc>
 800c4e4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	eeb0 2a47 	vmov.f32	s4, s14
 800c4ee:	eef0 1a45 	vmov.f32	s3, s10
 800c4f2:	eeb0 1a65 	vmov.f32	s2, s11
 800c4f6:	eef0 0a46 	vmov.f32	s1, s12
 800c4fa:	eeb0 0a66 	vmov.f32	s0, s13
 800c4fe:	f7f6 fd6d 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c502:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c506:	2b01      	cmp	r3, #1
 800c508:	d10c      	bne.n	800c524 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c50a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c50e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c512:	eeb0 1a47 	vmov.f32	s2, s14
 800c516:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c708 <turn45outR+0x3d8>
 800c51a:	eeb0 0a67 	vmov.f32	s0, s15
 800c51e:	f7f7 fcd3 	bl	8003ec8 <mollifier_slalom_table>
 800c522:	e015      	b.n	800c550 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c524:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c528:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c52c:	eef1 7a67 	vneg.f32	s15, s15
 800c530:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c534:	eef0 2a66 	vmov.f32	s5, s13
 800c538:	eeb0 2a67 	vmov.f32	s4, s15
 800c53c:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c700 <turn45outR+0x3d0>
 800c540:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c700 <turn45outR+0x3d0>
 800c544:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c708 <turn45outR+0x3d8>
 800c548:	eeb0 0a47 	vmov.f32	s0, s14
 800c54c:	f7f7 fb6c 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800c550:	2300      	movs	r3, #0
 800c552:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c554:	2300      	movs	r3, #0
 800c556:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c558:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c55c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c70c <turn45outR+0x3dc>
 800c560:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c564:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c568:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c56c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c570:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c578:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c57c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c580:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c6fc <turn45outR+0x3cc>
 800c584:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	eeb0 2a47 	vmov.f32	s4, s14
 800c58e:	eef0 1a65 	vmov.f32	s3, s11
 800c592:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c700 <turn45outR+0x3d0>
 800c596:	eef0 0a46 	vmov.f32	s1, s12
 800c59a:	eeb0 0a66 	vmov.f32	s0, s13
 800c59e:	f7f6 fd1d 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c5a2:	4b55      	ldr	r3, [pc, #340]	; (800c6f8 <turn45outR+0x3c8>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	701a      	strb	r2, [r3, #0]
}
 800c5a8:	e09c      	b.n	800c6e4 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c5be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c5c6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c5da:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5de:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c6fc <turn45outR+0x3cc>
 800c5e2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	eeb0 2a47 	vmov.f32	s4, s14
 800c5ec:	eef0 1a45 	vmov.f32	s3, s10
 800c5f0:	eeb0 1a65 	vmov.f32	s2, s11
 800c5f4:	eef0 0a46 	vmov.f32	s1, s12
 800c5f8:	eeb0 0a66 	vmov.f32	s0, s13
 800c5fc:	f7f6 fcee 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c600:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c604:	2b01      	cmp	r3, #1
 800c606:	d10c      	bne.n	800c622 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c608:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c60c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c610:	eeb0 1a47 	vmov.f32	s2, s14
 800c614:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c708 <turn45outR+0x3d8>
 800c618:	eeb0 0a67 	vmov.f32	s0, s15
 800c61c:	f7f7 fc54 	bl	8003ec8 <mollifier_slalom_table>
 800c620:	e015      	b.n	800c64e <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c622:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c626:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c62a:	eef1 7a67 	vneg.f32	s15, s15
 800c62e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c632:	eef0 2a66 	vmov.f32	s5, s13
 800c636:	eeb0 2a67 	vmov.f32	s4, s15
 800c63a:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c700 <turn45outR+0x3d0>
 800c63e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c700 <turn45outR+0x3d0>
 800c642:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c708 <turn45outR+0x3d8>
 800c646:	eeb0 0a47 	vmov.f32	s0, s14
 800c64a:	f7f7 faed 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c64e:	2301      	movs	r3, #1
 800c650:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c652:	2300      	movs	r3, #0
 800c654:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c656:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c65a:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c65e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c662:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c66a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c66e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c672:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c676:	eef0 7ae7 	vabs.f32	s15, s15
 800c67a:	ee17 0a90 	vmov	r0, s15
 800c67e:	f7f3 ff8b 	bl	8000598 <__aeabi_f2d>
 800c682:	f04f 0200 	mov.w	r2, #0
 800c686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c68a:	f7f4 f907 	bl	800089c <__aeabi_ddiv>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4614      	mov	r4, r2
 800c694:	461d      	mov	r5, r3
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	4618      	mov	r0, r3
 800c69a:	f7f3 ff7d 	bl	8000598 <__aeabi_f2d>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f4 f8f9 	bl	800089c <__aeabi_ddiv>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	f04f 0200 	mov.w	r2, #0
 800c6b6:	4b16      	ldr	r3, [pc, #88]	; (800c710 <turn45outR+0x3e0>)
 800c6b8:	f7f3 fe10 	bl	80002dc <__adddf3>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	f7f4 fa98 	bl	8000bf8 <__aeabi_d2f>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	ee02 3a10 	vmov	s4, r3
 800c6d0:	edd7 1a01 	vldr	s3, [r7, #4]
 800c6d4:	ed97 1a01 	vldr	s2, [r7, #4]
 800c6d8:	eef0 0a68 	vmov.f32	s1, s17
 800c6dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c6e0:	f7f6 fc7c 	bl	8002fdc <straight_table2>
}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	ecbd 8b02 	vpop	{d8}
 800c6ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c6f2:	b004      	add	sp, #16
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	20000808 	.word	0x20000808
 800c6fc:	42340000 	.word	0x42340000
 800c700:	00000000 	.word	0x00000000
 800c704:	42c4477b 	.word	0x42c4477b
 800c708:	c2340000 	.word	0xc2340000
 800c70c:	42b40000 	.word	0x42b40000
 800c710:	408f4000 	.word	0x408f4000

0800c714 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c714:	b084      	sub	sp, #16
 800c716:	b5b0      	push	{r4, r5, r7, lr}
 800c718:	ed2d 8b02 	vpush	{d8}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c728:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c72c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c730:	2b01      	cmp	r3, #1
 800c732:	f040 80a3 	bne.w	800c87c <turn45outL+0x168>
			highspeed_mode = 1;
 800c736:	4be5      	ldr	r3, [pc, #916]	; (800cacc <turn45outL+0x3b8>)
 800c738:	2201      	movs	r2, #1
 800c73a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c740:	2300      	movs	r3, #0
 800c742:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c744:	2300      	movs	r3, #0
 800c746:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c748:	2300      	movs	r3, #0
 800c74a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c74c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c750:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c754:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c75c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c760:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c764:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c768:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cad0 <turn45outL+0x3bc>
 800c76c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	eeb0 2a47 	vmov.f32	s4, s14
 800c776:	eef0 1a46 	vmov.f32	s3, s12
 800c77a:	eeb0 1a66 	vmov.f32	s2, s13
 800c77e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cad4 <turn45outL+0x3c0>
 800c782:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cad8 <turn45outL+0x3c4>
 800c786:	f7f6 fc29 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c78e:	2304      	movs	r3, #4
 800c790:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c792:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c796:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c79a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c79e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ae:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c7b2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7b6:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cad0 <turn45outL+0x3bc>
 800c7ba:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	eeb0 2a47 	vmov.f32	s4, s14
 800c7c4:	eef0 1a45 	vmov.f32	s3, s10
 800c7c8:	eeb0 1a65 	vmov.f32	s2, s11
 800c7cc:	eef0 0a46 	vmov.f32	s1, s12
 800c7d0:	eeb0 0a66 	vmov.f32	s0, s13
 800c7d4:	f7f6 fc02 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800c7d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d10c      	bne.n	800c7fa <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c7e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7e8:	eeb0 1a47 	vmov.f32	s2, s14
 800c7ec:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cad0 <turn45outL+0x3bc>
 800c7f0:	eeb0 0a67 	vmov.f32	s0, s15
 800c7f4:	f7f7 fb68 	bl	8003ec8 <mollifier_slalom_table>
 800c7f8:	e013      	b.n	800c822 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c7fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c802:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c806:	eef0 2a66 	vmov.f32	s5, s13
 800c80a:	eeb0 2a47 	vmov.f32	s4, s14
 800c80e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cad4 <turn45outL+0x3c0>
 800c812:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cad4 <turn45outL+0x3c0>
 800c816:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cad0 <turn45outL+0x3bc>
 800c81a:	eeb0 0a67 	vmov.f32	s0, s15
 800c81e:	f7f7 fa03 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c822:	2300      	movs	r3, #0
 800c824:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c826:	2300      	movs	r3, #0
 800c828:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c82a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c82e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cadc <turn45outL+0x3c8>
 800c832:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c836:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c83a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c83e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c842:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c84a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c84e:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c852:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cad0 <turn45outL+0x3bc>
 800c856:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	eeb0 2a47 	vmov.f32	s4, s14
 800c860:	eef0 1a65 	vmov.f32	s3, s11
 800c864:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cad4 <turn45outL+0x3c0>
 800c868:	eef0 0a46 	vmov.f32	s1, s12
 800c86c:	eeb0 0a66 	vmov.f32	s0, s13
 800c870:	f7f6 fbb4 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800c874:	4b95      	ldr	r3, [pc, #596]	; (800cacc <turn45outL+0x3b8>)
 800c876:	2200      	movs	r2, #0
 800c878:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c87a:	e11e      	b.n	800caba <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c87c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c880:	2b01      	cmp	r3, #1
 800c882:	d97f      	bls.n	800c984 <turn45outL+0x270>
		highspeed_mode = 1;
 800c884:	4b91      	ldr	r3, [pc, #580]	; (800cacc <turn45outL+0x3b8>)
 800c886:	2201      	movs	r2, #1
 800c888:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c88e:	2300      	movs	r3, #0
 800c890:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c892:	2304      	movs	r3, #4
 800c894:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c896:	2300      	movs	r3, #0
 800c898:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c89a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c89e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8a2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8a6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8b6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8ba:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8be:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cad0 <turn45outL+0x3bc>
 800c8c2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	eeb0 2a47 	vmov.f32	s4, s14
 800c8cc:	eef0 1a45 	vmov.f32	s3, s10
 800c8d0:	eeb0 1a65 	vmov.f32	s2, s11
 800c8d4:	eef0 0a46 	vmov.f32	s1, s12
 800c8d8:	eeb0 0a66 	vmov.f32	s0, s13
 800c8dc:	f7f6 fb7e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c8e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d10c      	bne.n	800c902 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c8e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c8f0:	eeb0 1a47 	vmov.f32	s2, s14
 800c8f4:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cad0 <turn45outL+0x3bc>
 800c8f8:	eeb0 0a67 	vmov.f32	s0, s15
 800c8fc:	f7f7 fae4 	bl	8003ec8 <mollifier_slalom_table>
 800c900:	e013      	b.n	800c92a <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c902:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c906:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c90a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c90e:	eef0 2a66 	vmov.f32	s5, s13
 800c912:	eeb0 2a47 	vmov.f32	s4, s14
 800c916:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cad4 <turn45outL+0x3c0>
 800c91a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cad4 <turn45outL+0x3c0>
 800c91e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cad0 <turn45outL+0x3bc>
 800c922:	eeb0 0a67 	vmov.f32	s0, s15
 800c926:	f7f7 f97f 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c92e:	2300      	movs	r3, #0
 800c930:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c932:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c936:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cadc <turn45outL+0x3c8>
 800c93a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c93e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c942:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c946:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c94a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c94e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c952:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c956:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c95a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cad0 <turn45outL+0x3bc>
 800c95e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	eeb0 2a47 	vmov.f32	s4, s14
 800c968:	eef0 1a65 	vmov.f32	s3, s11
 800c96c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cad4 <turn45outL+0x3c0>
 800c970:	eef0 0a46 	vmov.f32	s1, s12
 800c974:	eeb0 0a66 	vmov.f32	s0, s13
 800c978:	f7f6 fb30 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c97c:	4b53      	ldr	r3, [pc, #332]	; (800cacc <turn45outL+0x3b8>)
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
}
 800c982:	e09a      	b.n	800caba <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c984:	2300      	movs	r3, #0
 800c986:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c988:	2300      	movs	r3, #0
 800c98a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c98c:	2304      	movs	r3, #4
 800c98e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c990:	2300      	movs	r3, #0
 800c992:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c994:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c998:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c99c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9a0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9b0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9b4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9b8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cad0 <turn45outL+0x3bc>
 800c9bc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	eeb0 2a47 	vmov.f32	s4, s14
 800c9c6:	eef0 1a45 	vmov.f32	s3, s10
 800c9ca:	eeb0 1a65 	vmov.f32	s2, s11
 800c9ce:	eef0 0a46 	vmov.f32	s1, s12
 800c9d2:	eeb0 0a66 	vmov.f32	s0, s13
 800c9d6:	f7f6 fb01 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c9da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d10c      	bne.n	800c9fc <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c9e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9ea:	eeb0 1a47 	vmov.f32	s2, s14
 800c9ee:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cad0 <turn45outL+0x3bc>
 800c9f2:	eeb0 0a67 	vmov.f32	s0, s15
 800c9f6:	f7f7 fa67 	bl	8003ec8 <mollifier_slalom_table>
 800c9fa:	e013      	b.n	800ca24 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c9fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca04:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca08:	eef0 2a66 	vmov.f32	s5, s13
 800ca0c:	eeb0 2a47 	vmov.f32	s4, s14
 800ca10:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cad4 <turn45outL+0x3c0>
 800ca14:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cad4 <turn45outL+0x3c0>
 800ca18:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cad0 <turn45outL+0x3bc>
 800ca1c:	eeb0 0a67 	vmov.f32	s0, s15
 800ca20:	f7f7 f902 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ca24:	2301      	movs	r3, #1
 800ca26:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ca2c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ca30:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ca34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca40:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca4c:	eef0 7ae7 	vabs.f32	s15, s15
 800ca50:	ee17 0a90 	vmov	r0, s15
 800ca54:	f7f3 fda0 	bl	8000598 <__aeabi_f2d>
 800ca58:	f04f 0200 	mov.w	r2, #0
 800ca5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca60:	f7f3 ff1c 	bl	800089c <__aeabi_ddiv>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4614      	mov	r4, r2
 800ca6a:	461d      	mov	r5, r3
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7f3 fd92 	bl	8000598 <__aeabi_f2d>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4620      	mov	r0, r4
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f7f3 ff0e 	bl	800089c <__aeabi_ddiv>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4610      	mov	r0, r2
 800ca86:	4619      	mov	r1, r3
 800ca88:	f04f 0200 	mov.w	r2, #0
 800ca8c:	4b14      	ldr	r3, [pc, #80]	; (800cae0 <turn45outL+0x3cc>)
 800ca8e:	f7f3 fc25 	bl	80002dc <__adddf3>
 800ca92:	4602      	mov	r2, r0
 800ca94:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ca96:	4610      	mov	r0, r2
 800ca98:	4619      	mov	r1, r3
 800ca9a:	f7f4 f8ad 	bl	8000bf8 <__aeabi_d2f>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	ee02 3a10 	vmov	s4, r3
 800caa6:	edd7 1a01 	vldr	s3, [r7, #4]
 800caaa:	ed97 1a01 	vldr	s2, [r7, #4]
 800caae:	eef0 0a68 	vmov.f32	s1, s17
 800cab2:	eeb0 0a48 	vmov.f32	s0, s16
 800cab6:	f7f6 fa91 	bl	8002fdc <straight_table2>
}
 800caba:	bf00      	nop
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	ecbd 8b02 	vpop	{d8}
 800cac4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cac8:	b004      	add	sp, #16
 800caca:	4770      	bx	lr
 800cacc:	20000808 	.word	0x20000808
 800cad0:	42340000 	.word	0x42340000
 800cad4:	00000000 	.word	0x00000000
 800cad8:	42c4477b 	.word	0x42c4477b
 800cadc:	42b40000 	.word	0x42b40000
 800cae0:	408f4000 	.word	0x408f4000

0800cae4 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cae4:	b084      	sub	sp, #16
 800cae6:	b5b0      	push	{r4, r5, r7, lr}
 800cae8:	ed2d 8b02 	vpush	{d8}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800caf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800caf8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cafc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	f040 80a5 	bne.w	800cc50 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cb06:	4be9      	ldr	r3, [pc, #932]	; (800ceac <turn135outR+0x3c8>)
 800cb08:	2201      	movs	r2, #1
 800cb0a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cb1c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cb20:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb30:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cb34:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cb38:	eddf 5add 	vldr	s11, [pc, #884]	; 800ceb0 <turn135outR+0x3cc>
 800cb3c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	eeb0 2a47 	vmov.f32	s4, s14
 800cb46:	eef0 1a46 	vmov.f32	s3, s12
 800cb4a:	eeb0 1a66 	vmov.f32	s2, s13
 800cb4e:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800ceb4 <turn135outR+0x3d0>
 800cb52:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800ceb8 <turn135outR+0x3d4>
 800cb56:	f7f6 fa41 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb62:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb66:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb6a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb6e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb7e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb82:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb86:	eddf 4aca 	vldr	s9, [pc, #808]	; 800ceb0 <turn135outR+0x3cc>
 800cb8a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	eeb0 2a47 	vmov.f32	s4, s14
 800cb94:	eef0 1a45 	vmov.f32	s3, s10
 800cb98:	eeb0 1a65 	vmov.f32	s2, s11
 800cb9c:	eef0 0a46 	vmov.f32	s1, s12
 800cba0:	eeb0 0a66 	vmov.f32	s0, s13
 800cba4:	f7f6 fa1a 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800cba8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d10c      	bne.n	800cbca <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cbb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbb4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cbb8:	eeb0 1a47 	vmov.f32	s2, s14
 800cbbc:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cebc <turn135outR+0x3d8>
 800cbc0:	eeb0 0a67 	vmov.f32	s0, s15
 800cbc4:	f7f7 f980 	bl	8003ec8 <mollifier_slalom_table>
 800cbc8:	e015      	b.n	800cbf6 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cbca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cbd2:	eef1 7a67 	vneg.f32	s15, s15
 800cbd6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cbda:	eef0 2a66 	vmov.f32	s5, s13
 800cbde:	eeb0 2a67 	vmov.f32	s4, s15
 800cbe2:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800ceb4 <turn135outR+0x3d0>
 800cbe6:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800ceb4 <turn135outR+0x3d0>
 800cbea:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cebc <turn135outR+0x3d8>
 800cbee:	eeb0 0a47 	vmov.f32	s0, s14
 800cbf2:	f7f7 f819 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cbfe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cc02:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cec0 <turn135outR+0x3dc>
 800cc06:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cc0a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc0e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc1e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cc22:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cc26:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800ceb0 <turn135outR+0x3cc>
 800cc2a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	eeb0 2a47 	vmov.f32	s4, s14
 800cc34:	eef0 1a65 	vmov.f32	s3, s11
 800cc38:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800ceb4 <turn135outR+0x3d0>
 800cc3c:	eef0 0a46 	vmov.f32	s1, s12
 800cc40:	eeb0 0a66 	vmov.f32	s0, s13
 800cc44:	f7f6 f9ca 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800cc48:	4b98      	ldr	r3, [pc, #608]	; (800ceac <turn135outR+0x3c8>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cc4e:	e123      	b.n	800ce98 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cc50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	f240 8082 	bls.w	800cd5e <turn135outR+0x27a>
		highspeed_mode = 1;
 800cc5a:	4b94      	ldr	r3, [pc, #592]	; (800ceac <turn135outR+0x3c8>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc70:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc74:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc78:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc7c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc8c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cc90:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc94:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ceb0 <turn135outR+0x3cc>
 800cc98:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	eeb0 2a47 	vmov.f32	s4, s14
 800cca2:	eef0 1a45 	vmov.f32	s3, s10
 800cca6:	eeb0 1a65 	vmov.f32	s2, s11
 800ccaa:	eef0 0a46 	vmov.f32	s1, s12
 800ccae:	eeb0 0a66 	vmov.f32	s0, s13
 800ccb2:	f7f6 f993 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ccb6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d10c      	bne.n	800ccd8 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ccbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccc6:	eeb0 1a47 	vmov.f32	s2, s14
 800ccca:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cebc <turn135outR+0x3d8>
 800ccce:	eeb0 0a67 	vmov.f32	s0, s15
 800ccd2:	f7f7 f8f9 	bl	8003ec8 <mollifier_slalom_table>
 800ccd6:	e015      	b.n	800cd04 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ccd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccdc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cce0:	eef1 7a67 	vneg.f32	s15, s15
 800cce4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cce8:	eef0 2a66 	vmov.f32	s5, s13
 800ccec:	eeb0 2a67 	vmov.f32	s4, s15
 800ccf0:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ceb4 <turn135outR+0x3d0>
 800ccf4:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ceb4 <turn135outR+0x3d0>
 800ccf8:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cebc <turn135outR+0x3d8>
 800ccfc:	eeb0 0a47 	vmov.f32	s0, s14
 800cd00:	f7f6 ff92 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd10:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cec0 <turn135outR+0x3dc>
 800cd14:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd18:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd1c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd2c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd30:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd34:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ceb0 <turn135outR+0x3cc>
 800cd38:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	eeb0 2a47 	vmov.f32	s4, s14
 800cd42:	eef0 1a65 	vmov.f32	s3, s11
 800cd46:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800ceb4 <turn135outR+0x3d0>
 800cd4a:	eef0 0a46 	vmov.f32	s1, s12
 800cd4e:	eeb0 0a66 	vmov.f32	s0, s13
 800cd52:	f7f6 f943 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800cd56:	4b55      	ldr	r3, [pc, #340]	; (800ceac <turn135outR+0x3c8>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	701a      	strb	r2, [r3, #0]
}
 800cd5c:	e09c      	b.n	800ce98 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cd66:	2303      	movs	r3, #3
 800cd68:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd6e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd72:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd76:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd7a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd8a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd8e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd92:	eddf 4a47 	vldr	s9, [pc, #284]	; 800ceb0 <turn135outR+0x3cc>
 800cd96:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	eeb0 2a47 	vmov.f32	s4, s14
 800cda0:	eef0 1a45 	vmov.f32	s3, s10
 800cda4:	eeb0 1a65 	vmov.f32	s2, s11
 800cda8:	eef0 0a46 	vmov.f32	s1, s12
 800cdac:	eeb0 0a66 	vmov.f32	s0, s13
 800cdb0:	f7f6 f914 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cdb4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d10c      	bne.n	800cdd6 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cdbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cdc4:	eeb0 1a47 	vmov.f32	s2, s14
 800cdc8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cebc <turn135outR+0x3d8>
 800cdcc:	eeb0 0a67 	vmov.f32	s0, s15
 800cdd0:	f7f7 f87a 	bl	8003ec8 <mollifier_slalom_table>
 800cdd4:	e015      	b.n	800ce02 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cdd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cdde:	eef1 7a67 	vneg.f32	s15, s15
 800cde2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cde6:	eef0 2a66 	vmov.f32	s5, s13
 800cdea:	eeb0 2a67 	vmov.f32	s4, s15
 800cdee:	eddf 1a31 	vldr	s3, [pc, #196]	; 800ceb4 <turn135outR+0x3d0>
 800cdf2:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800ceb4 <turn135outR+0x3d0>
 800cdf6:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cebc <turn135outR+0x3d8>
 800cdfa:	eeb0 0a47 	vmov.f32	s0, s14
 800cdfe:	f7f6 ff13 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ce02:	2301      	movs	r3, #1
 800ce04:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ce0a:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ce0e:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ce12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce1e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ce26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce2a:	eef0 7ae7 	vabs.f32	s15, s15
 800ce2e:	ee17 0a90 	vmov	r0, s15
 800ce32:	f7f3 fbb1 	bl	8000598 <__aeabi_f2d>
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce3e:	f7f3 fd2d 	bl	800089c <__aeabi_ddiv>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4614      	mov	r4, r2
 800ce48:	461d      	mov	r5, r3
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7f3 fba3 	bl	8000598 <__aeabi_f2d>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4620      	mov	r0, r4
 800ce58:	4629      	mov	r1, r5
 800ce5a:	f7f3 fd1f 	bl	800089c <__aeabi_ddiv>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4610      	mov	r0, r2
 800ce64:	4619      	mov	r1, r3
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	4b16      	ldr	r3, [pc, #88]	; (800cec4 <turn135outR+0x3e0>)
 800ce6c:	f7f3 fa36 	bl	80002dc <__adddf3>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ce74:	4610      	mov	r0, r2
 800ce76:	4619      	mov	r1, r3
 800ce78:	f7f3 febe 	bl	8000bf8 <__aeabi_d2f>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	ee02 3a10 	vmov	s4, r3
 800ce84:	edd7 1a01 	vldr	s3, [r7, #4]
 800ce88:	ed97 1a01 	vldr	s2, [r7, #4]
 800ce8c:	eef0 0a68 	vmov.f32	s1, s17
 800ce90:	eeb0 0a48 	vmov.f32	s0, s16
 800ce94:	f7f6 f8a2 	bl	8002fdc <straight_table2>
}
 800ce98:	bf00      	nop
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	ecbd 8b02 	vpop	{d8}
 800cea2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cea6:	b004      	add	sp, #16
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	20000808 	.word	0x20000808
 800ceb0:	42340000 	.word	0x42340000
 800ceb4:	00000000 	.word	0x00000000
 800ceb8:	42c4477b 	.word	0x42c4477b
 800cebc:	c3070000 	.word	0xc3070000
 800cec0:	42b40000 	.word	0x42b40000
 800cec4:	408f4000 	.word	0x408f4000

0800cec8 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cec8:	b084      	sub	sp, #16
 800ceca:	b5b0      	push	{r4, r5, r7, lr}
 800cecc:	ed2d 8b02 	vpush	{d8}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ced8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cedc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cee0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	f040 80a3 	bne.w	800d030 <turn135outL+0x168>
		highspeed_mode = 1;
 800ceea:	4be5      	ldr	r3, [pc, #916]	; (800d280 <turn135outL+0x3b8>)
 800ceec:	2201      	movs	r2, #1
 800ceee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cf00:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cf04:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf14:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cf18:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cf1c:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d284 <turn135outL+0x3bc>
 800cf20:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	eeb0 2a47 	vmov.f32	s4, s14
 800cf2a:	eef0 1a46 	vmov.f32	s3, s12
 800cf2e:	eeb0 1a66 	vmov.f32	s2, s13
 800cf32:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d288 <turn135outL+0x3c0>
 800cf36:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d28c <turn135outL+0x3c4>
 800cf3a:	f7f6 f84f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800cf42:	2304      	movs	r3, #4
 800cf44:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf46:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cf4a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf4e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cf52:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf62:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf66:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf6a:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d284 <turn135outL+0x3bc>
 800cf6e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	eeb0 2a47 	vmov.f32	s4, s14
 800cf78:	eef0 1a45 	vmov.f32	s3, s10
 800cf7c:	eeb0 1a65 	vmov.f32	s2, s11
 800cf80:	eef0 0a46 	vmov.f32	s1, s12
 800cf84:	eeb0 0a66 	vmov.f32	s0, s13
 800cf88:	f7f6 f828 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cf8c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d10c      	bne.n	800cfae <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cf94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf98:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf9c:	eeb0 1a47 	vmov.f32	s2, s14
 800cfa0:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d290 <turn135outL+0x3c8>
 800cfa4:	eeb0 0a67 	vmov.f32	s0, s15
 800cfa8:	f7f6 ff8e 	bl	8003ec8 <mollifier_slalom_table>
 800cfac:	e013      	b.n	800cfd6 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cfae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfb2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cfb6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cfba:	eef0 2a66 	vmov.f32	s5, s13
 800cfbe:	eeb0 2a47 	vmov.f32	s4, s14
 800cfc2:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d288 <turn135outL+0x3c0>
 800cfc6:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d288 <turn135outL+0x3c0>
 800cfca:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d290 <turn135outL+0x3c8>
 800cfce:	eeb0 0a67 	vmov.f32	s0, s15
 800cfd2:	f7f6 fe29 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cfde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cfe2:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d294 <turn135outL+0x3cc>
 800cfe6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cfea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cfee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cff2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cff6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cffe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d002:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d006:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d284 <turn135outL+0x3bc>
 800d00a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	eeb0 2a47 	vmov.f32	s4, s14
 800d014:	eef0 1a65 	vmov.f32	s3, s11
 800d018:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d288 <turn135outL+0x3c0>
 800d01c:	eef0 0a46 	vmov.f32	s1, s12
 800d020:	eeb0 0a66 	vmov.f32	s0, s13
 800d024:	f7f5 ffda 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d028:	4b95      	ldr	r3, [pc, #596]	; (800d280 <turn135outL+0x3b8>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d02e:	e11e      	b.n	800d26e <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d030:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d034:	2b01      	cmp	r3, #1
 800d036:	d97f      	bls.n	800d138 <turn135outL+0x270>
		highspeed_mode = 1;
 800d038:	4b91      	ldr	r3, [pc, #580]	; (800d280 <turn135outL+0x3b8>)
 800d03a:	2201      	movs	r2, #1
 800d03c:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d03e:	2300      	movs	r3, #0
 800d040:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d042:	2300      	movs	r3, #0
 800d044:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d046:	2304      	movs	r3, #4
 800d048:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d04a:	2300      	movs	r3, #0
 800d04c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d04e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d052:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d056:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d05a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d05e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d062:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d06a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d06e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d072:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d284 <turn135outL+0x3bc>
 800d076:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	eeb0 2a47 	vmov.f32	s4, s14
 800d080:	eef0 1a45 	vmov.f32	s3, s10
 800d084:	eeb0 1a65 	vmov.f32	s2, s11
 800d088:	eef0 0a46 	vmov.f32	s1, s12
 800d08c:	eeb0 0a66 	vmov.f32	s0, s13
 800d090:	f7f5 ffa4 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d094:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d10c      	bne.n	800d0b6 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d09c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0a4:	eeb0 1a47 	vmov.f32	s2, s14
 800d0a8:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d290 <turn135outL+0x3c8>
 800d0ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d0b0:	f7f6 ff0a 	bl	8003ec8 <mollifier_slalom_table>
 800d0b4:	e013      	b.n	800d0de <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d0b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0be:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d0c2:	eef0 2a66 	vmov.f32	s5, s13
 800d0c6:	eeb0 2a47 	vmov.f32	s4, s14
 800d0ca:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d288 <turn135outL+0x3c0>
 800d0ce:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d288 <turn135outL+0x3c0>
 800d0d2:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d290 <turn135outL+0x3c8>
 800d0d6:	eeb0 0a67 	vmov.f32	s0, s15
 800d0da:	f7f6 fda5 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d0e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d0ea:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d294 <turn135outL+0x3cc>
 800d0ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d0f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d0f6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d102:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d106:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d10a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d10e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d284 <turn135outL+0x3bc>
 800d112:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	eeb0 2a47 	vmov.f32	s4, s14
 800d11c:	eef0 1a65 	vmov.f32	s3, s11
 800d120:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d288 <turn135outL+0x3c0>
 800d124:	eef0 0a46 	vmov.f32	s1, s12
 800d128:	eeb0 0a66 	vmov.f32	s0, s13
 800d12c:	f7f5 ff56 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d130:	4b53      	ldr	r3, [pc, #332]	; (800d280 <turn135outL+0x3b8>)
 800d132:	2200      	movs	r2, #0
 800d134:	701a      	strb	r2, [r3, #0]
}
 800d136:	e09a      	b.n	800d26e <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d138:	2300      	movs	r3, #0
 800d13a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d140:	2304      	movs	r3, #4
 800d142:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d144:	2300      	movs	r3, #0
 800d146:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d148:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d14c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d150:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d154:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d158:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d15c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d160:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d164:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d168:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d16c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d284 <turn135outL+0x3bc>
 800d170:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	eeb0 2a47 	vmov.f32	s4, s14
 800d17a:	eef0 1a45 	vmov.f32	s3, s10
 800d17e:	eeb0 1a65 	vmov.f32	s2, s11
 800d182:	eef0 0a46 	vmov.f32	s1, s12
 800d186:	eeb0 0a66 	vmov.f32	s0, s13
 800d18a:	f7f5 ff27 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d18e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d192:	2b01      	cmp	r3, #1
 800d194:	d10c      	bne.n	800d1b0 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d196:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d19a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d19e:	eeb0 1a47 	vmov.f32	s2, s14
 800d1a2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d290 <turn135outL+0x3c8>
 800d1a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d1aa:	f7f6 fe8d 	bl	8003ec8 <mollifier_slalom_table>
 800d1ae:	e013      	b.n	800d1d8 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d1b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d1bc:	eef0 2a66 	vmov.f32	s5, s13
 800d1c0:	eeb0 2a47 	vmov.f32	s4, s14
 800d1c4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d288 <turn135outL+0x3c0>
 800d1c8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d288 <turn135outL+0x3c0>
 800d1cc:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d290 <turn135outL+0x3c8>
 800d1d0:	eeb0 0a67 	vmov.f32	s0, s15
 800d1d4:	f7f6 fd28 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d1e0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d1e4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d1e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d1fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d200:	eef0 7ae7 	vabs.f32	s15, s15
 800d204:	ee17 0a90 	vmov	r0, s15
 800d208:	f7f3 f9c6 	bl	8000598 <__aeabi_f2d>
 800d20c:	f04f 0200 	mov.w	r2, #0
 800d210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d214:	f7f3 fb42 	bl	800089c <__aeabi_ddiv>
 800d218:	4602      	mov	r2, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	4614      	mov	r4, r2
 800d21e:	461d      	mov	r5, r3
 800d220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d222:	4618      	mov	r0, r3
 800d224:	f7f3 f9b8 	bl	8000598 <__aeabi_f2d>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4620      	mov	r0, r4
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 fb34 	bl	800089c <__aeabi_ddiv>
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	4610      	mov	r0, r2
 800d23a:	4619      	mov	r1, r3
 800d23c:	f04f 0200 	mov.w	r2, #0
 800d240:	4b15      	ldr	r3, [pc, #84]	; (800d298 <turn135outL+0x3d0>)
 800d242:	f7f3 f84b 	bl	80002dc <__adddf3>
 800d246:	4602      	mov	r2, r0
 800d248:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d24a:	4610      	mov	r0, r2
 800d24c:	4619      	mov	r1, r3
 800d24e:	f7f3 fcd3 	bl	8000bf8 <__aeabi_d2f>
 800d252:	4603      	mov	r3, r0
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	ee02 3a10 	vmov	s4, r3
 800d25a:	edd7 1a01 	vldr	s3, [r7, #4]
 800d25e:	ed97 1a01 	vldr	s2, [r7, #4]
 800d262:	eef0 0a68 	vmov.f32	s1, s17
 800d266:	eeb0 0a48 	vmov.f32	s0, s16
 800d26a:	f7f5 feb7 	bl	8002fdc <straight_table2>
}
 800d26e:	bf00      	nop
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	ecbd 8b02 	vpop	{d8}
 800d278:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d27c:	b004      	add	sp, #16
 800d27e:	4770      	bx	lr
 800d280:	20000808 	.word	0x20000808
 800d284:	42340000 	.word	0x42340000
 800d288:	00000000 	.word	0x00000000
 800d28c:	42c4477b 	.word	0x42c4477b
 800d290:	43070000 	.word	0x43070000
 800d294:	42b40000 	.word	0x42b40000
 800d298:	408f4000 	.word	0x408f4000
 800d29c:	00000000 	.word	0x00000000

0800d2a0 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	b5b0      	push	{r4, r5, r7, lr}
 800d2a4:	ed2d 8b02 	vpush	{d8}
 800d2a8:	b084      	sub	sp, #16
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d2b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d2b4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d2b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	f040 80af 	bne.w	800d420 <V90R+0x180>
			highspeed_mode = 1;
 800d2c2:	4bc1      	ldr	r3, [pc, #772]	; (800d5c8 <V90R+0x328>)
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d2d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d2dc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2ec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2f0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d2f4:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d5cc <V90R+0x32c>
 800d2f8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	eeb0 2a47 	vmov.f32	s4, s14
 800d302:	eef0 1a46 	vmov.f32	s3, s12
 800d306:	eeb0 1a66 	vmov.f32	s2, s13
 800d30a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d5d4 <V90R+0x334>
 800d30e:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d5d0 <V90R+0x330>
 800d312:	f7f5 fe63 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800d316:	2300      	movs	r3, #0
 800d318:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d31a:	2303      	movs	r3, #3
 800d31c:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d31e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d322:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d326:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d32a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d32e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d332:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d33a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d33e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d342:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d5cc <V90R+0x32c>
 800d346:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	eeb0 2a47 	vmov.f32	s4, s14
 800d350:	eef0 1a45 	vmov.f32	s3, s10
 800d354:	eeb0 1a65 	vmov.f32	s2, s11
 800d358:	eef0 0a46 	vmov.f32	s1, s12
 800d35c:	eeb0 0a66 	vmov.f32	s0, s13
 800d360:	f7f5 fe3c 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800d364:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d10c      	bne.n	800d386 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d36c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d370:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d374:	eeb0 1a47 	vmov.f32	s2, s14
 800d378:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d5d8 <V90R+0x338>
 800d37c:	eeb0 0a67 	vmov.f32	s0, s15
 800d380:	f7f6 fda2 	bl	8003ec8 <mollifier_slalom_table>
 800d384:	e015      	b.n	800d3b2 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d386:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d38a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d38e:	eef1 7a67 	vneg.f32	s15, s15
 800d392:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d396:	eef0 2a66 	vmov.f32	s5, s13
 800d39a:	eeb0 2a67 	vmov.f32	s4, s15
 800d39e:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d5d4 <V90R+0x334>
 800d3a2:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d5d4 <V90R+0x334>
 800d3a6:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d5d8 <V90R+0x338>
 800d3aa:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ae:	f7f6 fc3b 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7f3 f8eb 	bl	8000598 <__aeabi_f2d>
 800d3c2:	a37f      	add	r3, pc, #508	; (adr r3, 800d5c0 <V90R+0x320>)
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f7f2 ff88 	bl	80002dc <__adddf3>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	f7f3 fc10 	bl	8000bf8 <__aeabi_d2f>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d3de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3ee:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d3f2:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d3f6:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d5cc <V90R+0x32c>
 800d3fa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	eeb0 2a47 	vmov.f32	s4, s14
 800d404:	eef0 1a46 	vmov.f32	s3, s12
 800d408:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d5d4 <V90R+0x334>
 800d40c:	eef0 0a66 	vmov.f32	s1, s13
 800d410:	ee00 3a10 	vmov	s0, r3
 800d414:	f7f5 fde2 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800d418:	4b6b      	ldr	r3, [pc, #428]	; (800d5c8 <V90R+0x328>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d41e:	e13e      	b.n	800d69e <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d420:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d424:	2b01      	cmp	r3, #1
 800d426:	f240 808c 	bls.w	800d542 <V90R+0x2a2>
		highspeed_mode = 1;
 800d42a:	4b67      	ldr	r3, [pc, #412]	; (800d5c8 <V90R+0x328>)
 800d42c:	2201      	movs	r2, #1
 800d42e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d430:	2300      	movs	r3, #0
 800d432:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d434:	2300      	movs	r3, #0
 800d436:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d438:	2303      	movs	r3, #3
 800d43a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d440:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d444:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d448:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d44c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d450:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d454:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d45c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d460:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d464:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d5cc <V90R+0x32c>
 800d468:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	eeb0 2a47 	vmov.f32	s4, s14
 800d472:	eef0 1a45 	vmov.f32	s3, s10
 800d476:	eeb0 1a65 	vmov.f32	s2, s11
 800d47a:	eef0 0a46 	vmov.f32	s1, s12
 800d47e:	eeb0 0a66 	vmov.f32	s0, s13
 800d482:	f7f5 fdab 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d486:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d10c      	bne.n	800d4a8 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d48e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d492:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d496:	eeb0 1a47 	vmov.f32	s2, s14
 800d49a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d5d8 <V90R+0x338>
 800d49e:	eeb0 0a67 	vmov.f32	s0, s15
 800d4a2:	f7f6 fd11 	bl	8003ec8 <mollifier_slalom_table>
 800d4a6:	e015      	b.n	800d4d4 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d4a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d4b0:	eef1 7a67 	vneg.f32	s15, s15
 800d4b4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4b8:	eef0 2a66 	vmov.f32	s5, s13
 800d4bc:	eeb0 2a67 	vmov.f32	s4, s15
 800d4c0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d5d4 <V90R+0x334>
 800d4c4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d5d4 <V90R+0x334>
 800d4c8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d5d8 <V90R+0x338>
 800d4cc:	eeb0 0a47 	vmov.f32	s0, s14
 800d4d0:	f7f6 fbaa 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f3 f85a 	bl	8000598 <__aeabi_f2d>
 800d4e4:	a336      	add	r3, pc, #216	; (adr r3, 800d5c0 <V90R+0x320>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f2 fef7 	bl	80002dc <__adddf3>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	f7f3 fb7f 	bl	8000bf8 <__aeabi_d2f>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d500:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d504:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d508:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d50c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d510:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d514:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d518:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d5cc <V90R+0x32c>
 800d51c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	eeb0 2a47 	vmov.f32	s4, s14
 800d526:	eef0 1a46 	vmov.f32	s3, s12
 800d52a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d5d4 <V90R+0x334>
 800d52e:	eef0 0a66 	vmov.f32	s1, s13
 800d532:	ee00 3a10 	vmov	s0, r3
 800d536:	f7f5 fd51 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d53a:	4b23      	ldr	r3, [pc, #140]	; (800d5c8 <V90R+0x328>)
 800d53c:	2200      	movs	r2, #0
 800d53e:	701a      	strb	r2, [r3, #0]
}
 800d540:	e0ad      	b.n	800d69e <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d542:	2300      	movs	r3, #0
 800d544:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d546:	2300      	movs	r3, #0
 800d548:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d54a:	2303      	movs	r3, #3
 800d54c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d54e:	2300      	movs	r3, #0
 800d550:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d552:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d556:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d55a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d55e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d562:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d566:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d56a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d56e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d572:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d576:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d5cc <V90R+0x32c>
 800d57a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	eeb0 2a47 	vmov.f32	s4, s14
 800d584:	eef0 1a45 	vmov.f32	s3, s10
 800d588:	eeb0 1a65 	vmov.f32	s2, s11
 800d58c:	eef0 0a46 	vmov.f32	s1, s12
 800d590:	eeb0 0a66 	vmov.f32	s0, s13
 800d594:	f7f5 fd22 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d598:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d11d      	bne.n	800d5dc <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d5a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5a4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5a8:	eeb0 1a47 	vmov.f32	s2, s14
 800d5ac:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d5d8 <V90R+0x338>
 800d5b0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5b4:	f7f6 fc88 	bl	8003ec8 <mollifier_slalom_table>
 800d5b8:	e026      	b.n	800d608 <V90R+0x368>
 800d5ba:	bf00      	nop
 800d5bc:	f3af 8000 	nop.w
 800d5c0:	c022ec18 	.word	0xc022ec18
 800d5c4:	405fd1de 	.word	0x405fd1de
 800d5c8:	20000808 	.word	0x20000808
 800d5cc:	42340000 	.word	0x42340000
 800d5d0:	42c4477b 	.word	0x42c4477b
 800d5d4:	00000000 	.word	0x00000000
 800d5d8:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d5dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d5e4:	eef1 7a67 	vneg.f32	s15, s15
 800d5e8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d5ec:	eef0 2a66 	vmov.f32	s5, s13
 800d5f0:	eeb0 2a67 	vmov.f32	s4, s15
 800d5f4:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d5d4 <V90R+0x334>
 800d5f8:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d5d4 <V90R+0x334>
 800d5fc:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d5d8 <V90R+0x338>
 800d600:	eeb0 0a47 	vmov.f32	s0, s14
 800d604:	f7f6 fb10 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d608:	2303      	movs	r3, #3
 800d60a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d610:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d614:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d618:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d61c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d620:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d624:	edd7 7a01 	vldr	s15, [r7, #4]
 800d628:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d62c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d630:	eef0 7ae7 	vabs.f32	s15, s15
 800d634:	ee17 0a90 	vmov	r0, s15
 800d638:	f7f2 ffae 	bl	8000598 <__aeabi_f2d>
 800d63c:	f04f 0200 	mov.w	r2, #0
 800d640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d644:	f7f3 f92a 	bl	800089c <__aeabi_ddiv>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	4614      	mov	r4, r2
 800d64e:	461d      	mov	r5, r3
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	4618      	mov	r0, r3
 800d654:	f7f2 ffa0 	bl	8000598 <__aeabi_f2d>
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	4620      	mov	r0, r4
 800d65e:	4629      	mov	r1, r5
 800d660:	f7f3 f91c 	bl	800089c <__aeabi_ddiv>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	4610      	mov	r0, r2
 800d66a:	4619      	mov	r1, r3
 800d66c:	f04f 0200 	mov.w	r2, #0
 800d670:	4b0f      	ldr	r3, [pc, #60]	; (800d6b0 <V90R+0x410>)
 800d672:	f7f2 fe33 	bl	80002dc <__adddf3>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d67a:	4610      	mov	r0, r2
 800d67c:	4619      	mov	r1, r3
 800d67e:	f7f3 fabb 	bl	8000bf8 <__aeabi_d2f>
 800d682:	4603      	mov	r3, r0
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	ee02 3a10 	vmov	s4, r3
 800d68a:	edd7 1a01 	vldr	s3, [r7, #4]
 800d68e:	ed97 1a01 	vldr	s2, [r7, #4]
 800d692:	eef0 0a68 	vmov.f32	s1, s17
 800d696:	eeb0 0a48 	vmov.f32	s0, s16
 800d69a:	f7f5 fc9f 	bl	8002fdc <straight_table2>
}
 800d69e:	bf00      	nop
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	ecbd 8b02 	vpop	{d8}
 800d6a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d6ac:	b004      	add	sp, #16
 800d6ae:	4770      	bx	lr
 800d6b0:	408f4000 	.word	0x408f4000
 800d6b4:	00000000 	.word	0x00000000

0800d6b8 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d6b8:	b084      	sub	sp, #16
 800d6ba:	b5b0      	push	{r4, r5, r7, lr}
 800d6bc:	ed2d 8b02 	vpush	{d8}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d6c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d6cc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d6d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	f040 80ad 	bne.w	800d834 <V90L+0x17c>
				highspeed_mode = 1;
 800d6da:	4bbf      	ldr	r3, [pc, #764]	; (800d9d8 <V90L+0x320>)
 800d6dc:	2201      	movs	r2, #1
 800d6de:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d6f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d6f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d700:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d704:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d708:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d70c:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800d9dc <V90L+0x324>
 800d710:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	eeb0 2a47 	vmov.f32	s4, s14
 800d71a:	eef0 1a46 	vmov.f32	s3, s12
 800d71e:	eeb0 1a66 	vmov.f32	s2, s13
 800d722:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800d9e4 <V90L+0x32c>
 800d726:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800d9e0 <V90L+0x328>
 800d72a:	f7f5 fc57 	bl	8002fdc <straight_table2>
				wallmode.WallControlMode=0;
 800d72e:	2300      	movs	r3, #0
 800d730:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d732:	2304      	movs	r3, #4
 800d734:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d736:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d73a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d73e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d742:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d746:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d74a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d74e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d752:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d756:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d75a:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800d9dc <V90L+0x324>
 800d75e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	eeb0 2a47 	vmov.f32	s4, s14
 800d768:	eef0 1a45 	vmov.f32	s3, s10
 800d76c:	eeb0 1a65 	vmov.f32	s2, s11
 800d770:	eef0 0a46 	vmov.f32	s1, s12
 800d774:	eeb0 0a66 	vmov.f32	s0, s13
 800d778:	f7f5 fc30 	bl	8002fdc <straight_table2>
				if(mollifier_mode == ON){
 800d77c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d780:	2b01      	cmp	r3, #1
 800d782:	d10c      	bne.n	800d79e <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d784:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d788:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d78c:	eeb0 1a47 	vmov.f32	s2, s14
 800d790:	eddf 0a95 	vldr	s1, [pc, #596]	; 800d9e8 <V90L+0x330>
 800d794:	eeb0 0a67 	vmov.f32	s0, s15
 800d798:	f7f6 fb96 	bl	8003ec8 <mollifier_slalom_table>
 800d79c:	e013      	b.n	800d7c6 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d79e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d7a6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d7aa:	eef0 2a66 	vmov.f32	s5, s13
 800d7ae:	eeb0 2a47 	vmov.f32	s4, s14
 800d7b2:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800d9e4 <V90L+0x32c>
 800d7b6:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800d9e4 <V90L+0x32c>
 800d7ba:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800d9e8 <V90L+0x330>
 800d7be:	eeb0 0a67 	vmov.f32	s0, s15
 800d7c2:	f7f6 fa31 	bl	8003c28 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7f2 fee1 	bl	8000598 <__aeabi_f2d>
 800d7d6:	a37e      	add	r3, pc, #504	; (adr r3, 800d9d0 <V90L+0x318>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	f7f2 fd7e 	bl	80002dc <__adddf3>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	f7f3 fa06 	bl	8000bf8 <__aeabi_d2f>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d7f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d802:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d806:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d80a:	eddf 5a74 	vldr	s11, [pc, #464]	; 800d9dc <V90L+0x324>
 800d80e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	eeb0 2a47 	vmov.f32	s4, s14
 800d818:	eef0 1a46 	vmov.f32	s3, s12
 800d81c:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800d9e4 <V90L+0x32c>
 800d820:	eef0 0a66 	vmov.f32	s1, s13
 800d824:	ee00 3a10 	vmov	s0, r3
 800d828:	f7f5 fbd8 	bl	8002fdc <straight_table2>
				highspeed_mode = 0;
 800d82c:	4b6a      	ldr	r3, [pc, #424]	; (800d9d8 <V90L+0x320>)
 800d82e:	2200      	movs	r2, #0
 800d830:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d832:	e13a      	b.n	800daaa <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d834:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d838:	2b01      	cmp	r3, #1
 800d83a:	f240 808a 	bls.w	800d952 <V90L+0x29a>
		highspeed_mode = 1;
 800d83e:	4b66      	ldr	r3, [pc, #408]	; (800d9d8 <V90L+0x320>)
 800d840:	2201      	movs	r2, #1
 800d842:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d844:	2300      	movs	r3, #0
 800d846:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d848:	2300      	movs	r3, #0
 800d84a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d84c:	2304      	movs	r3, #4
 800d84e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d850:	2300      	movs	r3, #0
 800d852:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d854:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d858:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d85c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d860:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d864:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d868:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d86c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d870:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d874:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d878:	eddf 4a58 	vldr	s9, [pc, #352]	; 800d9dc <V90L+0x324>
 800d87c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	eeb0 2a47 	vmov.f32	s4, s14
 800d886:	eef0 1a45 	vmov.f32	s3, s10
 800d88a:	eeb0 1a65 	vmov.f32	s2, s11
 800d88e:	eef0 0a46 	vmov.f32	s1, s12
 800d892:	eeb0 0a66 	vmov.f32	s0, s13
 800d896:	f7f5 fba1 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d89a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d10c      	bne.n	800d8bc <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d8a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8aa:	eeb0 1a47 	vmov.f32	s2, s14
 800d8ae:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800d9e8 <V90L+0x330>
 800d8b2:	eeb0 0a67 	vmov.f32	s0, s15
 800d8b6:	f7f6 fb07 	bl	8003ec8 <mollifier_slalom_table>
 800d8ba:	e013      	b.n	800d8e4 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8c8:	eef0 2a66 	vmov.f32	s5, s13
 800d8cc:	eeb0 2a47 	vmov.f32	s4, s14
 800d8d0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d9e4 <V90L+0x32c>
 800d8d4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d9e4 <V90L+0x32c>
 800d8d8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d9e8 <V90L+0x330>
 800d8dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d8e0:	f7f6 f9a2 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f2 fe52 	bl	8000598 <__aeabi_f2d>
 800d8f4:	a336      	add	r3, pc, #216	; (adr r3, 800d9d0 <V90L+0x318>)
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	f7f2 fcef 	bl	80002dc <__adddf3>
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	4610      	mov	r0, r2
 800d904:	4619      	mov	r1, r3
 800d906:	f7f3 f977 	bl	8000bf8 <__aeabi_d2f>
 800d90a:	4603      	mov	r3, r0
 800d90c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d910:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d914:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d920:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d924:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d928:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d9dc <V90L+0x324>
 800d92c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	eeb0 2a47 	vmov.f32	s4, s14
 800d936:	eef0 1a46 	vmov.f32	s3, s12
 800d93a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d9e4 <V90L+0x32c>
 800d93e:	eef0 0a66 	vmov.f32	s1, s13
 800d942:	ee00 3a10 	vmov	s0, r3
 800d946:	f7f5 fb49 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d94a:	4b23      	ldr	r3, [pc, #140]	; (800d9d8 <V90L+0x320>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	701a      	strb	r2, [r3, #0]
}
 800d950:	e0ab      	b.n	800daaa <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d952:	2300      	movs	r3, #0
 800d954:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d956:	2300      	movs	r3, #0
 800d958:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d95a:	2304      	movs	r3, #4
 800d95c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d95e:	2300      	movs	r3, #0
 800d960:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d962:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d966:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d96a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d96e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d972:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d976:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d97a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d97e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d982:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d986:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d9dc <V90L+0x324>
 800d98a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	eeb0 2a47 	vmov.f32	s4, s14
 800d994:	eef0 1a45 	vmov.f32	s3, s10
 800d998:	eeb0 1a65 	vmov.f32	s2, s11
 800d99c:	eef0 0a46 	vmov.f32	s1, s12
 800d9a0:	eeb0 0a66 	vmov.f32	s0, s13
 800d9a4:	f7f5 fb1a 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d9a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d11d      	bne.n	800d9ec <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d9b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9b8:	eeb0 1a47 	vmov.f32	s2, s14
 800d9bc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d9e8 <V90L+0x330>
 800d9c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d9c4:	f7f6 fa80 	bl	8003ec8 <mollifier_slalom_table>
 800d9c8:	e024      	b.n	800da14 <V90L+0x35c>
 800d9ca:	bf00      	nop
 800d9cc:	f3af 8000 	nop.w
 800d9d0:	c022ec18 	.word	0xc022ec18
 800d9d4:	405fd1de 	.word	0x405fd1de
 800d9d8:	20000808 	.word	0x20000808
 800d9dc:	42340000 	.word	0x42340000
 800d9e0:	42d4477b 	.word	0x42d4477b
 800d9e4:	00000000 	.word	0x00000000
 800d9e8:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d9ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d9f8:	eef0 2a66 	vmov.f32	s5, s13
 800d9fc:	eeb0 2a47 	vmov.f32	s4, s14
 800da00:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800d9e4 <V90L+0x32c>
 800da04:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800d9e4 <V90L+0x32c>
 800da08:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800d9e8 <V90L+0x330>
 800da0c:	eeb0 0a67 	vmov.f32	s0, s15
 800da10:	f7f6 f90a 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800da14:	2303      	movs	r3, #3
 800da16:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da18:	2300      	movs	r3, #0
 800da1a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da1c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800da20:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800da24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da30:	edd7 7a01 	vldr	s15, [r7, #4]
 800da34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800da38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da3c:	eef0 7ae7 	vabs.f32	s15, s15
 800da40:	ee17 0a90 	vmov	r0, s15
 800da44:	f7f2 fda8 	bl	8000598 <__aeabi_f2d>
 800da48:	f04f 0200 	mov.w	r2, #0
 800da4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da50:	f7f2 ff24 	bl	800089c <__aeabi_ddiv>
 800da54:	4602      	mov	r2, r0
 800da56:	460b      	mov	r3, r1
 800da58:	4614      	mov	r4, r2
 800da5a:	461d      	mov	r5, r3
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f2 fd9a 	bl	8000598 <__aeabi_f2d>
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4620      	mov	r0, r4
 800da6a:	4629      	mov	r1, r5
 800da6c:	f7f2 ff16 	bl	800089c <__aeabi_ddiv>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4610      	mov	r0, r2
 800da76:	4619      	mov	r1, r3
 800da78:	f04f 0200 	mov.w	r2, #0
 800da7c:	4b0f      	ldr	r3, [pc, #60]	; (800dabc <V90L+0x404>)
 800da7e:	f7f2 fc2d 	bl	80002dc <__adddf3>
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da86:	4610      	mov	r0, r2
 800da88:	4619      	mov	r1, r3
 800da8a:	f7f3 f8b5 	bl	8000bf8 <__aeabi_d2f>
 800da8e:	4603      	mov	r3, r0
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	ee02 3a10 	vmov	s4, r3
 800da96:	edd7 1a01 	vldr	s3, [r7, #4]
 800da9a:	ed97 1a01 	vldr	s2, [r7, #4]
 800da9e:	eef0 0a68 	vmov.f32	s1, s17
 800daa2:	eeb0 0a48 	vmov.f32	s0, s16
 800daa6:	f7f5 fa99 	bl	8002fdc <straight_table2>
}
 800daaa:	bf00      	nop
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	ecbd 8b02 	vpop	{d8}
 800dab4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dab8:	b004      	add	sp, #16
 800daba:	4770      	bx	lr
 800dabc:	408f4000 	.word	0x408f4000

0800dac0 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dac0:	b084      	sub	sp, #16
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b086      	sub	sp, #24
 800dac6:	af04      	add	r7, sp, #16
 800dac8:	f107 0c10 	add.w	ip, r7, #16
 800dacc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dad0:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dad4:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d116      	bne.n	800db0a <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dadc:	2001      	movs	r0, #1
 800dade:	f7f9 feaf 	bl	8007840 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dae2:	2003      	movs	r0, #3
 800dae4:	f7f9 feb6 	bl	8007854 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dae8:	ed97 0a01 	vldr	s0, [r7, #4]
 800daec:	f7f9 ff46 	bl	800797c <pl_FunMotor_duty>
		pl_FunMotor_start();
 800daf0:	f7f9 ff30 	bl	8007954 <pl_FunMotor_start>
		HAL_Delay(600);
 800daf4:	f44f 7016 	mov.w	r0, #600	; 0x258
 800daf8:	f00a fe96 	bl	8018828 <HAL_Delay>
		reset_gyro();
 800dafc:	f7f3 fe34 	bl	8001768 <reset_gyro>
		reset_speed();
 800db00:	f7f3 fa8a 	bl	8001018 <reset_speed>
		clear_Ierror();
 800db04:	f7f6 fd4e 	bl	80045a4 <clear_Ierror>
 800db08:	e00b      	b.n	800db22 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800db0a:	2001      	movs	r0, #1
 800db0c:	f7f9 fe98 	bl	8007840 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800db10:	2003      	movs	r0, #3
 800db12:	f7f9 fe9f 	bl	8007854 <pl_L_DriveMotor_mode>
		reset_gyro();
 800db16:	f7f3 fe27 	bl	8001768 <reset_gyro>
		reset_speed();
 800db1a:	f7f3 fa7d 	bl	8001018 <reset_speed>
		clear_Ierror();
 800db1e:	f7f6 fd41 	bl	80045a4 <clear_Ierror>

	}
	record_mode=2;
 800db22:	4ba8      	ldr	r3, [pc, #672]	; (800ddc4 <testturning+0x304>)
 800db24:	2202      	movs	r2, #2
 800db26:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800db28:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d110      	bne.n	800db52 <testturning+0x92>
 800db30:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db34:	9303      	str	r3, [sp, #12]
 800db36:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800db3a:	9302      	str	r3, [sp, #8]
 800db3c:	2301      	movs	r3, #1
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	f107 0318 	add.w	r3, r7, #24
 800db48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db4a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800ddc8 <testturning+0x308>
 800db4e:	f7fc f9cb 	bl	8009ee8 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800db52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db56:	2b01      	cmp	r3, #1
 800db58:	d110      	bne.n	800db7c <testturning+0xbc>
 800db5a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db5e:	9303      	str	r3, [sp, #12]
 800db60:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800db64:	9302      	str	r3, [sp, #8]
 800db66:	2301      	movs	r3, #1
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db74:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800ddc8 <testturning+0x308>
 800db78:	f7fc fb70 	bl	800a25c <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800db7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db80:	2b02      	cmp	r3, #2
 800db82:	d10d      	bne.n	800dba0 <testturning+0xe0>
 800db84:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db88:	9302      	str	r3, [sp, #8]
 800db8a:	2301      	movs	r3, #1
 800db8c:	9301      	str	r3, [sp, #4]
 800db8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db98:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800ddc8 <testturning+0x308>
 800db9c:	f7fc fd14 	bl	800a5c8 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dba0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dba4:	2b03      	cmp	r3, #3
 800dba6:	d10d      	bne.n	800dbc4 <testturning+0x104>
 800dba8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dbac:	9302      	str	r3, [sp, #8]
 800dbae:	2301      	movs	r3, #1
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dbba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbbc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800ddc8 <testturning+0x308>
 800dbc0:	f7fc fe6c 	bl	800a89c <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800dbc4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dbc8:	2b04      	cmp	r3, #4
 800dbca:	d10d      	bne.n	800dbe8 <testturning+0x128>
 800dbcc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dbd0:	9302      	str	r3, [sp, #8]
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dbde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbe0:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800ddc8 <testturning+0x308>
 800dbe4:	f7fc ffbe 	bl	800ab64 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800dbe8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dbec:	2b05      	cmp	r3, #5
 800dbee:	d10e      	bne.n	800dc0e <testturning+0x14e>
 800dbf0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dbf4:	9302      	str	r3, [sp, #8]
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dc04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc06:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800ddc8 <testturning+0x308>
 800dc0a:	f7fd f915 	bl	800ae38 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dc0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc12:	2b06      	cmp	r3, #6
 800dc14:	d10e      	bne.n	800dc34 <testturning+0x174>
 800dc16:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc1a:	9302      	str	r3, [sp, #8]
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	9301      	str	r3, [sp, #4]
 800dc20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dc2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc2c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800ddc8 <testturning+0x308>
 800dc30:	f7fd fa6a 	bl	800b108 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dc34:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc38:	2b07      	cmp	r3, #7
 800dc3a:	d10e      	bne.n	800dc5a <testturning+0x19a>
 800dc3c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc40:	9302      	str	r3, [sp, #8]
 800dc42:	2301      	movs	r3, #1
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dc50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc52:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800ddc8 <testturning+0x308>
 800dc56:	f7fd fc9f 	bl	800b598 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dc5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc5e:	2b08      	cmp	r3, #8
 800dc60:	d10e      	bne.n	800dc80 <testturning+0x1c0>
 800dc62:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc66:	9302      	str	r3, [sp, #8]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800dc76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc78:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800ddc8 <testturning+0x308>
 800dc7c:	f7fd fecc 	bl	800ba18 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800dc80:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc84:	2b09      	cmp	r3, #9
 800dc86:	d10e      	bne.n	800dca6 <testturning+0x1e6>
 800dc88:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc8c:	9302      	str	r3, [sp, #8]
 800dc8e:	2301      	movs	r3, #1
 800dc90:	9301      	str	r3, [sp, #4]
 800dc92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dc9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc9e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800ddc8 <testturning+0x308>
 800dca2:	f7fe f901 	bl	800bea8 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800dca6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcaa:	2b0a      	cmp	r3, #10
 800dcac:	d10e      	bne.n	800dccc <testturning+0x20c>
 800dcae:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcb2:	9302      	str	r3, [sp, #8]
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800dcc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcc4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ddc8 <testturning+0x308>
 800dcc8:	f7fe fb32 	bl	800c330 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800dccc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcd0:	2b0b      	cmp	r3, #11
 800dcd2:	d10e      	bne.n	800dcf2 <testturning+0x232>
 800dcd4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcd8:	9302      	str	r3, [sp, #8]
 800dcda:	2301      	movs	r3, #1
 800dcdc:	9301      	str	r3, [sp, #4]
 800dcde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800dce8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcea:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800ddc8 <testturning+0x308>
 800dcee:	f7fe fd11 	bl	800c714 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800dcf2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcf6:	2b0c      	cmp	r3, #12
 800dcf8:	d10e      	bne.n	800dd18 <testturning+0x258>
 800dcfa:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	2301      	movs	r3, #1
 800dd02:	9301      	str	r3, [sp, #4]
 800dd04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd10:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ddc8 <testturning+0x308>
 800dd14:	f7fe fee6 	bl	800cae4 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800dd18:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd1c:	2b0d      	cmp	r3, #13
 800dd1e:	d10e      	bne.n	800dd3e <testturning+0x27e>
 800dd20:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd24:	9302      	str	r3, [sp, #8]
 800dd26:	2301      	movs	r3, #1
 800dd28:	9301      	str	r3, [sp, #4]
 800dd2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800dd34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd36:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800ddc8 <testturning+0x308>
 800dd3a:	f7ff f8c5 	bl	800cec8 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800dd3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd42:	2b0e      	cmp	r3, #14
 800dd44:	d10e      	bne.n	800dd64 <testturning+0x2a4>
 800dd46:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd4a:	9302      	str	r3, [sp, #8]
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd5c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800ddc8 <testturning+0x308>
 800dd60:	f7ff fa9e 	bl	800d2a0 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800dd64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd68:	2b0f      	cmp	r3, #15
 800dd6a:	d10e      	bne.n	800dd8a <testturning+0x2ca>
 800dd6c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd70:	9302      	str	r3, [sp, #8]
 800dd72:	2301      	movs	r3, #1
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dd80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd82:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800ddc8 <testturning+0x308>
 800dd86:	f7ff fc97 	bl	800d6b8 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800dd8a:	4b0e      	ldr	r3, [pc, #56]	; (800ddc4 <testturning+0x304>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800dd90:	2003      	movs	r0, #3
 800dd92:	f7f9 fd87 	bl	80078a4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dd96:	2003      	movs	r0, #3
 800dd98:	f7f9 fd5c 	bl	8007854 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800dd9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dda0:	f7fa f87e 	bl	8007ea0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800dda4:	f7f9 fde0 	bl	8007968 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800dda8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ddac:	f7fa f878 	bl	8007ea0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	f7f9 fd45 	bl	8007840 <pl_DriveMotor_standby>

}
 800ddb6:	bf00      	nop
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddc0:	b004      	add	sp, #16
 800ddc2:	4770      	bx	lr
 800ddc4:	2000edc0 	.word	0x2000edc0
 800ddc8:	c2c80000 	.word	0xc2c80000

0800ddcc <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800ddcc:	b480      	push	{r7}
 800ddce:	b085      	sub	sp, #20
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	2b03      	cmp	r3, #3
 800ddde:	d823      	bhi.n	800de28 <update_coordinate+0x5c>
 800dde0:	a201      	add	r2, pc, #4	; (adr r2, 800dde8 <update_coordinate+0x1c>)
 800dde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde6:	bf00      	nop
 800dde8:	0800ddf9 	.word	0x0800ddf9
 800ddec:	0800de05 	.word	0x0800de05
 800ddf0:	0800de11 	.word	0x0800de11
 800ddf4:	0800de1d 	.word	0x0800de1d
	case 1://北
		*y += 1;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	601a      	str	r2, [r3, #0]
		break;
 800de02:	e011      	b.n	800de28 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	601a      	str	r2, [r3, #0]
		break;
 800de0e:	e00b      	b.n	800de28 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	1e5a      	subs	r2, r3, #1
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	601a      	str	r2, [r3, #0]
		break;
 800de1a:	e005      	b.n	800de28 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	1e5a      	subs	r2, r3, #1
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	601a      	str	r2, [r3, #0]
		break;
 800de26:	bf00      	nop
	}



}
 800de28:	bf00      	nop
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800de34:	b084      	sub	sp, #16
 800de36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de38:	b091      	sub	sp, #68	; 0x44
 800de3a:	af04      	add	r7, sp, #16
 800de3c:	ed87 0a03 	vstr	s0, [r7, #12]
 800de40:	edc7 0a02 	vstr	s1, [r7, #8]
 800de44:	ed87 1a01 	vstr	s2, [r7, #4]
 800de48:	edc7 1a00 	vstr	s3, [r7]
 800de4c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800de50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800de54:	4b7d      	ldr	r3, [pc, #500]	; (800e04c <AdatiWayReturn+0x218>)
 800de56:	2201      	movs	r2, #1
 800de58:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800de5a:	2001      	movs	r0, #1
 800de5c:	f7f9 fcf0 	bl	8007840 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800de60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800de64:	f00a fce0 	bl	8018828 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800de68:	2300      	movs	r3, #0
 800de6a:	623b      	str	r3, [r7, #32]
	int y=0;
 800de6c:	2300      	movs	r3, #0
 800de6e:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800de70:	2301      	movs	r3, #1
 800de72:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800de74:	2301      	movs	r3, #1
 800de76:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800de78:	2300      	movs	r3, #0
 800de7a:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800de80:	2300      	movs	r3, #0
 800de82:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800de84:	4b72      	ldr	r3, [pc, #456]	; (800e050 <AdatiWayReturn+0x21c>)
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	2b95      	cmp	r3, #149	; 0x95
 800de8a:	bfcc      	ite	gt
 800de8c:	2301      	movgt	r3, #1
 800de8e:	2300      	movle	r3, #0
 800de90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800de94:	4b6e      	ldr	r3, [pc, #440]	; (800e050 <AdatiWayReturn+0x21c>)
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	f240 12f3 	movw	r2, #499	; 0x1f3
 800de9c:	4293      	cmp	r3, r2
 800de9e:	bfcc      	ite	gt
 800dea0:	2301      	movgt	r3, #1
 800dea2:	2300      	movle	r3, #0
 800dea4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dea8:	4b69      	ldr	r3, [pc, #420]	; (800e050 <AdatiWayReturn+0x21c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f240 12f3 	movw	r2, #499	; 0x1f3
 800deb0:	4293      	cmp	r3, r2
 800deb2:	bfcc      	ite	gt
 800deb4:	2301      	movgt	r3, #1
 800deb6:	2300      	movle	r3, #0
 800deb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800debc:	6a38      	ldr	r0, [r7, #32]
 800debe:	69f9      	ldr	r1, [r7, #28]
 800dec0:	69ba      	ldr	r2, [r7, #24]
 800dec2:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800dec6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800deca:	9301      	str	r3, [sp, #4]
 800decc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	4623      	mov	r3, r4
 800ded4:	f002 fcba 	bl	801084c <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800ded8:	f006 f8dc 	bl	8014094 <create_StepCountMap_queue>
	HAL_Delay(100);
 800dedc:	2064      	movs	r0, #100	; 0x64
 800dede:	f00a fca3 	bl	8018828 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800dee2:	6978      	ldr	r0, [r7, #20]
 800dee4:	ed97 2a01 	vldr	s4, [r7, #4]
 800dee8:	edd7 1a03 	vldr	s3, [r7, #12]
 800deec:	ed97 1a03 	vldr	s2, [r7, #12]
 800def0:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e054 <AdatiWayReturn+0x220>
 800def4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e058 <AdatiWayReturn+0x224>
 800def8:	f7f5 f870 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800defc:	69ba      	ldr	r2, [r7, #24]
 800defe:	f107 011c 	add.w	r1, r7, #28
 800df02:	f107 0320 	add.w	r3, r7, #32
 800df06:	4618      	mov	r0, r3
 800df08:	f7ff ff60 	bl	800ddcc <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800df0c:	4b50      	ldr	r3, [pc, #320]	; (800e050 <AdatiWayReturn+0x21c>)
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	2b95      	cmp	r3, #149	; 0x95
 800df12:	bfcc      	ite	gt
 800df14:	2301      	movgt	r3, #1
 800df16:	2300      	movle	r3, #0
 800df18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800df1c:	4b4c      	ldr	r3, [pc, #304]	; (800e050 <AdatiWayReturn+0x21c>)
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	f240 12f3 	movw	r2, #499	; 0x1f3
 800df24:	4293      	cmp	r3, r2
 800df26:	bfcc      	ite	gt
 800df28:	2301      	movgt	r3, #1
 800df2a:	2300      	movle	r3, #0
 800df2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800df30:	4b47      	ldr	r3, [pc, #284]	; (800e050 <AdatiWayReturn+0x21c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f240 12f3 	movw	r2, #499	; 0x1f3
 800df38:	4293      	cmp	r3, r2
 800df3a:	bfcc      	ite	gt
 800df3c:	2301      	movgt	r3, #1
 800df3e:	2300      	movle	r3, #0
 800df40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800df44:	2301      	movs	r3, #1
 800df46:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800df48:	2301      	movs	r3, #1
 800df4a:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800df4c:	2300      	movs	r3, #0
 800df4e:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800df50:	6978      	ldr	r0, [r7, #20]
 800df52:	ed97 2a01 	vldr	s4, [r7, #4]
 800df56:	edd7 1a03 	vldr	s3, [r7, #12]
 800df5a:	ed97 1a03 	vldr	s2, [r7, #12]
 800df5e:	edd7 0a03 	vldr	s1, [r7, #12]
 800df62:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800df66:	f7f5 f839 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800df6a:	6a38      	ldr	r0, [r7, #32]
 800df6c:	69f9      	ldr	r1, [r7, #28]
 800df6e:	69ba      	ldr	r2, [r7, #24]
 800df70:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800df74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	4623      	mov	r3, r4
 800df82:	f002 fc63 	bl	801084c <update_wall>
		if(Dijkstra_mode==2){
 800df86:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d104      	bne.n	800df98 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800df8e:	f005 f847 	bl	8013020 <route_Dijkstra>
					create_StepCountMap_unknown();
 800df92:	f005 fd49 	bl	8013a28 <create_StepCountMap_unknown>
 800df96:	e001      	b.n	800df9c <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800df98:	f006 f87c 	bl	8014094 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	69fa      	ldr	r2, [r7, #28]
 800dfa0:	69b9      	ldr	r1, [r7, #24]
 800dfa2:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800dfa6:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800dfaa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800dfae:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800dfb2:	9102      	str	r1, [sp, #8]
 800dfb4:	9201      	str	r2, [sp, #4]
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	4633      	mov	r3, r6
 800dfba:	462a      	mov	r2, r5
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f003 f9bf 	bl	8011340 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800dfc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <AdatiWayReturn+0x19a>
 800dfca:	23ff      	movs	r3, #255	; 0xff
 800dfcc:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800dfce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <AdatiWayReturn+0x1a6>
 800dfd6:	23ff      	movs	r3, #255	; 0xff
 800dfd8:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800dfda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <AdatiWayReturn+0x1b2>
 800dfe2:	23ff      	movs	r3, #255	; 0xff
 800dfe4:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800dfe6:	6a38      	ldr	r0, [r7, #32]
 800dfe8:	69fc      	ldr	r4, [r7, #28]
 800dfea:	69bd      	ldr	r5, [r7, #24]
 800dfec:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800dfee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dff0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dff2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800dff4:	9102      	str	r1, [sp, #8]
 800dff6:	9201      	str	r2, [sp, #4]
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	4633      	mov	r3, r6
 800dffc:	462a      	mov	r2, r5
 800dffe:	4621      	mov	r1, r4
 800e000:	f002 f9d0 	bl	80103a4 <decision_kitiku>
		mode.WallCutMode=1;
 800e004:	2301      	movs	r3, #1
 800e006:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e008:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e00c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e010:	4619      	mov	r1, r3
 800e012:	6978      	ldr	r0, [r7, #20]
 800e014:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e018:	f7f5 fc8a 	bl	8003930 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d103      	bne.n	800e02a <AdatiWayReturn+0x1f6>
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 827c 	beq.w	800e522 <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d003      	beq.n	800e038 <AdatiWayReturn+0x204>
 800e030:	6a3b      	ldr	r3, [r7, #32]
 800e032:	2b02      	cmp	r3, #2
 800e034:	f040 810d 	bne.w	800e252 <AdatiWayReturn+0x41e>
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 809b 	beq.w	800e176 <AdatiWayReturn+0x342>
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	2b01      	cmp	r3, #1
 800e044:	f040 8105 	bne.w	800e252 <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e048:	e095      	b.n	800e176 <AdatiWayReturn+0x342>
 800e04a:	bf00      	nop
 800e04c:	20000834 	.word	0x20000834
 800e050:	20000470 	.word	0x20000470
 800e054:	00000000 	.word	0x00000000
 800e058:	42830000 	.word	0x42830000
 800e05c:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e060:	2301      	movs	r3, #1
 800e062:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e064:	2300      	movs	r3, #0
 800e066:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e068:	2300      	movs	r3, #0
 800e06a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e06c:	6978      	ldr	r0, [r7, #20]
 800e06e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e072:	edd7 1a03 	vldr	s3, [r7, #12]
 800e076:	ed97 1a03 	vldr	s2, [r7, #12]
 800e07a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e07e:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e05c <AdatiWayReturn+0x228>
 800e082:	f7f4 ffab 	bl	8002fdc <straight_table2>

				update_coordinate(&x,&y,direction);
 800e086:	69ba      	ldr	r2, [r7, #24]
 800e088:	f107 011c 	add.w	r1, r7, #28
 800e08c:	f107 0320 	add.w	r3, r7, #32
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff fe9b 	bl	800ddcc <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e096:	4b7f      	ldr	r3, [pc, #508]	; (800e294 <AdatiWayReturn+0x460>)
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	2b95      	cmp	r3, #149	; 0x95
 800e09c:	bfcc      	ite	gt
 800e09e:	2301      	movgt	r3, #1
 800e0a0:	2300      	movle	r3, #0
 800e0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e0a6:	4b7b      	ldr	r3, [pc, #492]	; (800e294 <AdatiWayReturn+0x460>)
 800e0a8:	691b      	ldr	r3, [r3, #16]
 800e0aa:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	bfcc      	ite	gt
 800e0b2:	2301      	movgt	r3, #1
 800e0b4:	2300      	movle	r3, #0
 800e0b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e0ba:	4b76      	ldr	r3, [pc, #472]	; (800e294 <AdatiWayReturn+0x460>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	bfcc      	ite	gt
 800e0c6:	2301      	movgt	r3, #1
 800e0c8:	2300      	movle	r3, #0
 800e0ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e0da:	6978      	ldr	r0, [r7, #20]
 800e0dc:	ed97 2a01 	vldr	s4, [r7, #4]
 800e0e0:	edd7 1a03 	vldr	s3, [r7, #12]
 800e0e4:	ed97 1a03 	vldr	s2, [r7, #12]
 800e0e8:	edd7 0a03 	vldr	s1, [r7, #12]
 800e0ec:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e0f0:	f7f4 ff74 	bl	8002fdc <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e0f4:	6a38      	ldr	r0, [r7, #32]
 800e0f6:	69f9      	ldr	r1, [r7, #28]
 800e0f8:	69ba      	ldr	r2, [r7, #24]
 800e0fa:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e0fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e102:	9301      	str	r3, [sp, #4]
 800e104:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	4623      	mov	r3, r4
 800e10c:	f002 fb9e 	bl	801084c <update_wall>
				create_StepCountMap_queue();
 800e110:	f005 ffc0 	bl	8014094 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e114:	6a3b      	ldr	r3, [r7, #32]
 800e116:	69fa      	ldr	r2, [r7, #28]
 800e118:	69b9      	ldr	r1, [r7, #24]
 800e11a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e11e:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e122:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e126:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e12a:	9102      	str	r1, [sp, #8]
 800e12c:	9201      	str	r2, [sp, #4]
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	4633      	mov	r3, r6
 800e132:	462a      	mov	r2, r5
 800e134:	4621      	mov	r1, r4
 800e136:	f003 f903 	bl	8011340 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <AdatiWayReturn+0x312>
 800e142:	23ff      	movs	r3, #255	; 0xff
 800e144:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e146:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <AdatiWayReturn+0x31e>
 800e14e:	23ff      	movs	r3, #255	; 0xff
 800e150:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e152:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e156:	2b00      	cmp	r3, #0
 800e158:	d001      	beq.n	800e15e <AdatiWayReturn+0x32a>
 800e15a:	23ff      	movs	r3, #255	; 0xff
 800e15c:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e15e:	2301      	movs	r3, #1
 800e160:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e162:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e166:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e16a:	4619      	mov	r1, r3
 800e16c:	6978      	ldr	r0, [r7, #20]
 800e16e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e172:	f7f5 fbdd 	bl	8003930 <End_straight>
			while (front_wall==0) {
 800e176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e17a:	f083 0301 	eor.w	r3, r3, #1
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	f47f af6d 	bne.w	800e060 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e186:	2300      	movs	r3, #0
 800e188:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e18e:	2300      	movs	r3, #0
 800e190:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e192:	6978      	ldr	r0, [r7, #20]
 800e194:	ed97 2a01 	vldr	s4, [r7, #4]
 800e198:	edd7 1a03 	vldr	s3, [r7, #12]
 800e19c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e2c0 <AdatiWayReturn+0x48c>
 800e1a0:	edd7 0a03 	vldr	s1, [r7, #12]
 800e1a4:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e298 <AdatiWayReturn+0x464>
 800e1a8:	f7f4 ff18 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e1ac:	2003      	movs	r0, #3
 800e1ae:	f7f9 fb79 	bl	80078a4 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e1b2:	2003      	movs	r0, #3
 800e1b4:	f7f9 fb4e 	bl	8007854 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e1b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e1bc:	f7f9 fe70 	bl	8007ea0 <wait_ms_NoReset>
			no_safty = 1;
 800e1c0:	4b36      	ldr	r3, [pc, #216]	; (800e29c <AdatiWayReturn+0x468>)
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e1c6:	ed97 2a00 	vldr	s4, [r7]
 800e1ca:	edd7 1a02 	vldr	s3, [r7, #8]
 800e1ce:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e2c0 <AdatiWayReturn+0x48c>
 800e1d2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e2c0 <AdatiWayReturn+0x48c>
 800e1d6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e2a0 <AdatiWayReturn+0x46c>
 800e1da:	f7f5 fc0d 	bl	80039f8 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e1de:	2003      	movs	r0, #3
 800e1e0:	f7f9 fb60 	bl	80078a4 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e1e4:	2003      	movs	r0, #3
 800e1e6:	f7f9 fb35 	bl	8007854 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e1ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e1ee:	f7f9 fe57 	bl	8007ea0 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e1f2:	6978      	ldr	r0, [r7, #20]
 800e1f4:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e2a4 <AdatiWayReturn+0x470>
 800e1f8:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e2a8 <AdatiWayReturn+0x474>
 800e1fc:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e2c0 <AdatiWayReturn+0x48c>
 800e200:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e2c0 <AdatiWayReturn+0x48c>
 800e204:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e2ac <AdatiWayReturn+0x478>
 800e208:	f7f4 fee8 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e20c:	2003      	movs	r0, #3
 800e20e:	f7f9 fb49 	bl	80078a4 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e212:	2003      	movs	r0, #3
 800e214:	f7f9 fb1e 	bl	8007854 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e21c:	f7f9 fe40 	bl	8007ea0 <wait_ms_NoReset>
			no_safty = 0;
 800e220:	4b1e      	ldr	r3, [pc, #120]	; (800e29c <AdatiWayReturn+0x468>)
 800e222:	2200      	movs	r2, #0
 800e224:	701a      	strb	r2, [r3, #0]
			clear_Ierror();
 800e226:	f7f6 f9bd 	bl	80045a4 <clear_Ierror>
			maze_mode = 0;
 800e22a:	4b21      	ldr	r3, [pc, #132]	; (800e2b0 <AdatiWayReturn+0x47c>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	3302      	adds	r3, #2
 800e234:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	2b04      	cmp	r3, #4
 800e23a:	dd02      	ble.n	800e242 <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	3b04      	subs	r3, #4
 800e240:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f300 816e 	bgt.w	800e526 <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	3304      	adds	r3, #4
 800e24e:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e250:	e169      	b.n	800e526 <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e252:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e256:	2b00      	cmp	r3, #0
 800e258:	d102      	bne.n	800e260 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e25a:	4b16      	ldr	r3, [pc, #88]	; (800e2b4 <AdatiWayReturn+0x480>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e260:	4b14      	ldr	r3, [pc, #80]	; (800e2b4 <AdatiWayReturn+0x480>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	f040 80f8 	bne.w	800e45a <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e26a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e26c:	2bff      	cmp	r3, #255	; 0xff
 800e26e:	d12b      	bne.n	800e2c8 <AdatiWayReturn+0x494>
 800e270:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e272:	2bff      	cmp	r3, #255	; 0xff
 800e274:	d128      	bne.n	800e2c8 <AdatiWayReturn+0x494>
 800e276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e278:	2bff      	cmp	r3, #255	; 0xff
 800e27a:	d125      	bne.n	800e2c8 <AdatiWayReturn+0x494>
 800e27c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e27e:	2bff      	cmp	r3, #255	; 0xff
 800e280:	d122      	bne.n	800e2c8 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e282:	4b0d      	ldr	r3, [pc, #52]	; (800e2b8 <AdatiWayReturn+0x484>)
 800e284:	2201      	movs	r2, #1
 800e286:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e288:	f7f9 fb40 	bl	800790c <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e28c:	2000      	movs	r0, #0
 800e28e:	f7f9 fad7 	bl	8007840 <pl_DriveMotor_standby>

				break;
 800e292:	e14b      	b.n	800e52c <AdatiWayReturn+0x6f8>
 800e294:	20000470 	.word	0x20000470
 800e298:	42140000 	.word	0x42140000
 800e29c:	20000806 	.word	0x20000806
 800e2a0:	43340000 	.word	0x43340000
 800e2a4:	447a0000 	.word	0x447a0000
 800e2a8:	c3160000 	.word	0xc3160000
 800e2ac:	c1f40000 	.word	0xc1f40000
 800e2b0:	20000834 	.word	0x20000834
 800e2b4:	20000838 	.word	0x20000838
 800e2b8:	20000807 	.word	0x20000807
 800e2bc:	42a40000 	.word	0x42a40000
 800e2c0:	00000000 	.word	0x00000000
 800e2c4:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e2c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e2ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d81a      	bhi.n	800e306 <AdatiWayReturn+0x4d2>
 800e2d0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e2d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d816      	bhi.n	800e306 <AdatiWayReturn+0x4d2>
 800e2d8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e2da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d812      	bhi.n	800e306 <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2ec:	6978      	ldr	r0, [r7, #20]
 800e2ee:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2f2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2f6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e2fa:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2fe:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e2bc <AdatiWayReturn+0x488>
 800e302:	f7f4 fe6b 	bl	8002fdc <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e306:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e308:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d219      	bcs.n	800e342 <AdatiWayReturn+0x50e>
 800e30e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e312:	429a      	cmp	r2, r3
 800e314:	d815      	bhi.n	800e342 <AdatiWayReturn+0x50e>
 800e316:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d811      	bhi.n	800e342 <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e31e:	2300      	movs	r3, #0
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	2300      	movs	r3, #0
 800e324:	9302      	str	r3, [sp, #8]
 800e326:	2300      	movs	r3, #0
 800e328:	9301      	str	r3, [sp, #4]
 800e32a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e334:	ed97 0a03 	vldr	s0, [r7, #12]
 800e338:	f7fb fdd6 	bl	8009ee8 <slalomR>
				direction++;
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	3301      	adds	r3, #1
 800e340:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e344:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e346:	429a      	cmp	r2, r3
 800e348:	d219      	bcs.n	800e37e <AdatiWayReturn+0x54a>
 800e34a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e34c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e34e:	429a      	cmp	r2, r3
 800e350:	d215      	bcs.n	800e37e <AdatiWayReturn+0x54a>
 800e352:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e354:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e356:	429a      	cmp	r2, r3
 800e358:	d811      	bhi.n	800e37e <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e35a:	2300      	movs	r3, #0
 800e35c:	9303      	str	r3, [sp, #12]
 800e35e:	2300      	movs	r3, #0
 800e360:	9302      	str	r3, [sp, #8]
 800e362:	2300      	movs	r3, #0
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e36e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e370:	ed97 0a03 	vldr	s0, [r7, #12]
 800e374:	f7fb ff72 	bl	800a25c <slalomL>
				direction--;
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e37e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e380:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e382:	429a      	cmp	r2, r3
 800e384:	f080 80ac 	bcs.w	800e4e0 <AdatiWayReturn+0x6ac>
 800e388:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e38a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e38c:	429a      	cmp	r2, r3
 800e38e:	f080 80a7 	bcs.w	800e4e0 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e392:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e396:	429a      	cmp	r2, r3
 800e398:	f080 80a2 	bcs.w	800e4e0 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e39c:	2301      	movs	r3, #1
 800e39e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e3a8:	6978      	ldr	r0, [r7, #20]
 800e3aa:	ed97 2a01 	vldr	s4, [r7, #4]
 800e3ae:	edd7 1a03 	vldr	s3, [r7, #12]
 800e3b2:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e2c0 <AdatiWayReturn+0x48c>
 800e3b6:	edd7 0a03 	vldr	s1, [r7, #12]
 800e3ba:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e2c4 <AdatiWayReturn+0x490>
 800e3be:	f7f4 fe0d 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e3c2:	2003      	movs	r0, #3
 800e3c4:	f7f9 fa6e 	bl	80078a4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e3c8:	2003      	movs	r0, #3
 800e3ca:	f7f9 fa43 	bl	8007854 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e3ce:	2064      	movs	r0, #100	; 0x64
 800e3d0:	f7f9 fd66 	bl	8007ea0 <wait_ms_NoReset>
				no_safty = 1;
 800e3d4:	4b8a      	ldr	r3, [pc, #552]	; (800e600 <AdatiWayReturn+0x7cc>)
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e3da:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e3de:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	edd7 0a00 	vldr	s1, [r7]
 800e3ec:	ed97 0a02 	vldr	s0, [r7, #8]
 800e3f0:	f7fb fcb0 	bl	8009d54 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				wait_ms_NoReset(100);
 800e3f4:	2064      	movs	r0, #100	; 0x64
 800e3f6:	f7f9 fd53 	bl	8007ea0 <wait_ms_NoReset>
				no_safty = 0;
 800e3fa:	4b81      	ldr	r3, [pc, #516]	; (800e600 <AdatiWayReturn+0x7cc>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	701a      	strb	r2, [r3, #0]
				//clear_Ierror();
				mode.WallControlMode=0;
 800e400:	2300      	movs	r3, #0
 800e402:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e404:	6978      	ldr	r0, [r7, #20]
 800e406:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 800e604 <AdatiWayReturn+0x7d0>
 800e40a:	eddf 1a7f 	vldr	s3, [pc, #508]	; 800e608 <AdatiWayReturn+0x7d4>
 800e40e:	ed9f 1a88 	vldr	s2, [pc, #544]	; 800e630 <AdatiWayReturn+0x7fc>
 800e412:	eddf 0a87 	vldr	s1, [pc, #540]	; 800e630 <AdatiWayReturn+0x7fc>
 800e416:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e60c <AdatiWayReturn+0x7d8>
 800e41a:	f7f4 fddf 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e41e:	2003      	movs	r0, #3
 800e420:	f7f9 fa40 	bl	80078a4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e424:	2003      	movs	r0, #3
 800e426:	f7f9 fa15 	bl	8007854 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e42a:	2064      	movs	r0, #100	; 0x64
 800e42c:	f7f9 fd38 	bl	8007ea0 <wait_ms_NoReset>
				clear_Ierror();
 800e430:	f7f6 f8b8 	bl	80045a4 <clear_Ierror>
				mode.WallControlMode=1;
 800e434:	2301      	movs	r3, #1
 800e436:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e438:	6978      	ldr	r0, [r7, #20]
 800e43a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e43e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e442:	ed97 1a03 	vldr	s2, [r7, #12]
 800e446:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800e630 <AdatiWayReturn+0x7fc>
 800e44a:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800e610 <AdatiWayReturn+0x7dc>
 800e44e:	f7f4 fdc5 	bl	8002fdc <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	3302      	adds	r3, #2
 800e456:	61bb      	str	r3, [r7, #24]
 800e458:	e042      	b.n	800e4e0 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e45a:	2301      	movs	r3, #1
 800e45c:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e45e:	2300      	movs	r3, #0
 800e460:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e462:	2300      	movs	r3, #0
 800e464:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e466:	6978      	ldr	r0, [r7, #20]
 800e468:	ed97 2a01 	vldr	s4, [r7, #4]
 800e46c:	edd7 1a03 	vldr	s3, [r7, #12]
 800e470:	ed97 1a03 	vldr	s2, [r7, #12]
 800e474:	edd7 0a03 	vldr	s1, [r7, #12]
 800e478:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800e634 <AdatiWayReturn+0x800>
 800e47c:	f7f4 fdae 	bl	8002fdc <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e480:	f107 0218 	add.w	r2, r7, #24
 800e484:	f107 011c 	add.w	r1, r7, #28
 800e488:	f107 0320 	add.w	r3, r7, #32
 800e48c:	4618      	mov	r0, r3
 800e48e:	f001 fffb 	bl	8010488 <compress_kitiku>
			mode.WallCutMode=0;
 800e492:	2300      	movs	r3, #0
 800e494:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e496:	2201      	movs	r2, #1
 800e498:	2101      	movs	r1, #1
 800e49a:	6978      	ldr	r0, [r7, #20]
 800e49c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800e634 <AdatiWayReturn+0x800>
 800e4a0:	f7f5 fa46 	bl	8003930 <End_straight>
			mode.WallControlMode=1;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e4b0:	4b58      	ldr	r3, [pc, #352]	; (800e614 <AdatiWayReturn+0x7e0>)
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	005b      	lsls	r3, r3, #1
 800e4b8:	4413      	add	r3, r2
 800e4ba:	011a      	lsls	r2, r3, #4
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	ee07 3a90 	vmov	s15, r3
 800e4c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4c6:	6978      	ldr	r0, [r7, #20]
 800e4c8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4cc:	eddf 1a52 	vldr	s3, [pc, #328]	; 800e618 <AdatiWayReturn+0x7e4>
 800e4d0:	ed97 1a03 	vldr	s2, [r7, #12]
 800e4d4:	edd7 0a03 	vldr	s1, [r7, #12]
 800e4d8:	eeb0 0a67 	vmov.f32	s0, s15
 800e4dc:	f7f4 fd7e 	bl	8002fdc <straight_table2>

		}

		if (direction >= 5) {
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	2b04      	cmp	r3, #4
 800e4e4:	dd02      	ble.n	800e4ec <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	3b04      	subs	r3, #4
 800e4ea:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	dc02      	bgt.n	800e4f8 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e4f8:	4b48      	ldr	r3, [pc, #288]	; (800e61c <AdatiWayReturn+0x7e8>)
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d014      	beq.n	800e52a <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e500:	4b47      	ldr	r3, [pc, #284]	; (800e620 <AdatiWayReturn+0x7ec>)
 800e502:	edd3 7a00 	vldr	s15, [r3]
 800e506:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e624 <AdatiWayReturn+0x7f0>
 800e50a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e512:	dd05      	ble.n	800e520 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e514:	f7f9 f9fa 	bl	800790c <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e518:	2000      	movs	r0, #0
 800e51a:	f7f9 f991 	bl	8007840 <pl_DriveMotor_standby>
						break;
 800e51e:	e005      	b.n	800e52c <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e520:	e4ec      	b.n	800defc <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e522:	bf00      	nop
 800e524:	e002      	b.n	800e52c <AdatiWayReturn+0x6f8>
			break;
 800e526:	bf00      	nop
 800e528:	e000      	b.n	800e52c <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e52a:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e52c:	4b3b      	ldr	r3, [pc, #236]	; (800e61c <AdatiWayReturn+0x7e8>)
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <AdatiWayReturn+0x704>
	record_in();
 800e534:	f7f8 fe92 	bl	800725c <record_in>
	}
	create_DijkstraMap();
 800e538:	f003 f82a 	bl	8011590 <create_DijkstraMap>
	clear_Ierror();
 800e53c:	f7f6 f832 	bl	80045a4 <clear_Ierror>
	reset_gyro();
 800e540:	f7f3 f912 	bl	8001768 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e544:	4b38      	ldr	r3, [pc, #224]	; (800e628 <AdatiWayReturn+0x7f4>)
 800e546:	2201      	movs	r2, #1
 800e548:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e54a:	6978      	ldr	r0, [r7, #20]
 800e54c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e550:	edd7 1a03 	vldr	s3, [r7, #12]
 800e554:	ed97 1a03 	vldr	s2, [r7, #12]
 800e558:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e630 <AdatiWayReturn+0x7fc>
 800e55c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e610 <AdatiWayReturn+0x7dc>
 800e560:	f7f4 fd3c 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e564:	69ba      	ldr	r2, [r7, #24]
 800e566:	f107 011c 	add.w	r1, r7, #28
 800e56a:	f107 0320 	add.w	r3, r7, #32
 800e56e:	4618      	mov	r0, r3
 800e570:	f7ff fc2c 	bl	800ddcc <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e574:	4b2d      	ldr	r3, [pc, #180]	; (800e62c <AdatiWayReturn+0x7f8>)
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	2b95      	cmp	r3, #149	; 0x95
 800e57a:	bfcc      	ite	gt
 800e57c:	2301      	movgt	r3, #1
 800e57e:	2300      	movle	r3, #0
 800e580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e584:	4b29      	ldr	r3, [pc, #164]	; (800e62c <AdatiWayReturn+0x7f8>)
 800e586:	691b      	ldr	r3, [r3, #16]
 800e588:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e58c:	4293      	cmp	r3, r2
 800e58e:	bfcc      	ite	gt
 800e590:	2301      	movgt	r3, #1
 800e592:	2300      	movle	r3, #0
 800e594:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e598:	4b24      	ldr	r3, [pc, #144]	; (800e62c <AdatiWayReturn+0x7f8>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	bfcc      	ite	gt
 800e5a4:	2301      	movgt	r3, #1
 800e5a6:	2300      	movle	r3, #0
 800e5a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5b8:	6978      	ldr	r0, [r7, #20]
 800e5ba:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5be:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5c2:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5c6:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5ca:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e5ce:	f7f4 fd05 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e5d2:	6a38      	ldr	r0, [r7, #32]
 800e5d4:	69f9      	ldr	r1, [r7, #28]
 800e5d6:	69ba      	ldr	r2, [r7, #24]
 800e5d8:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e5dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e5e0:	9301      	str	r3, [sp, #4]
 800e5e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	4623      	mov	r3, r4
 800e5ea:	f002 f92f 	bl	801084c <update_wall>
		if(Dijkstra_mode==1){
 800e5ee:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d120      	bne.n	800e638 <AdatiWayReturn+0x804>
			route_Dijkstra();//ダイクストラ法のマップを作成
 800e5f6:	f004 fd13 	bl	8013020 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e5fa:	f005 fa15 	bl	8013a28 <create_StepCountMap_unknown>
 800e5fe:	e01d      	b.n	800e63c <AdatiWayReturn+0x808>
 800e600:	20000806 	.word	0x20000806
 800e604:	447a0000 	.word	0x447a0000
 800e608:	c3160000 	.word	0xc3160000
 800e60c:	c1a40000 	.word	0xc1a40000
 800e610:	42830000 	.word	0x42830000
 800e614:	2000082c 	.word	0x2000082c
 800e618:	44610000 	.word	0x44610000
 800e61c:	20000807 	.word	0x20000807
 800e620:	2000072c 	.word	0x2000072c
 800e624:	43700000 	.word	0x43700000
 800e628:	20000834 	.word	0x20000834
 800e62c:	20000470 	.word	0x20000470
 800e630:	00000000 	.word	0x00000000
 800e634:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e638:	f006 f814 	bl	8014664 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	69fa      	ldr	r2, [r7, #28]
 800e640:	69b9      	ldr	r1, [r7, #24]
 800e642:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e646:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e64a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e64e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e652:	9102      	str	r1, [sp, #8]
 800e654:	9201      	str	r2, [sp, #4]
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	4633      	mov	r3, r6
 800e65a:	462a      	mov	r2, r5
 800e65c:	4621      	mov	r1, r4
 800e65e:	f002 fe6f 	bl	8011340 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e666:	2b00      	cmp	r3, #0
 800e668:	d001      	beq.n	800e66e <AdatiWayReturn+0x83a>
 800e66a:	23ff      	movs	r3, #255	; 0xff
 800e66c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e66e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <AdatiWayReturn+0x846>
 800e676:	23ff      	movs	r3, #255	; 0xff
 800e678:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e67a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d001      	beq.n	800e686 <AdatiWayReturn+0x852>
 800e682:	23ff      	movs	r3, #255	; 0xff
 800e684:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e686:	6a38      	ldr	r0, [r7, #32]
 800e688:	69fc      	ldr	r4, [r7, #28]
 800e68a:	69bd      	ldr	r5, [r7, #24]
 800e68c:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e68e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e690:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e692:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e694:	9102      	str	r1, [sp, #8]
 800e696:	9201      	str	r2, [sp, #4]
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	4633      	mov	r3, r6
 800e69c:	462a      	mov	r2, r5
 800e69e:	4621      	mov	r1, r4
 800e6a0:	f001 fe80 	bl	80103a4 <decision_kitiku>
		mode.WallCutMode=1;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e6a8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e6ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	6978      	ldr	r0, [r7, #20]
 800e6b4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e6b8:	f7f5 f93a 	bl	8003930 <End_straight>


			if(x == 0 && y == 0) {
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d165      	bne.n	800e78e <AdatiWayReturn+0x95a>
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d162      	bne.n	800e78e <AdatiWayReturn+0x95a>

				mode.WallControlMode=0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e6d4:	6978      	ldr	r0, [r7, #20]
 800e6d6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e6da:	edd7 1a03 	vldr	s3, [r7, #12]
 800e6de:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e630 <AdatiWayReturn+0x7fc>
 800e6e2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e6e6:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e634 <AdatiWayReturn+0x800>
 800e6ea:	f7f4 fc77 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e6ee:	2003      	movs	r0, #3
 800e6f0:	f7f9 f8d8 	bl	80078a4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e6f4:	2003      	movs	r0, #3
 800e6f6:	f7f9 f8ad 	bl	8007854 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e6fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e6fe:	f7f9 fbcf 	bl	8007ea0 <wait_ms_NoReset>
				no_safty = 1;
 800e702:	4bb8      	ldr	r3, [pc, #736]	; (800e9e4 <AdatiWayReturn+0xbb0>)
 800e704:	2201      	movs	r2, #1
 800e706:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e708:	ed97 2a00 	vldr	s4, [r7]
 800e70c:	edd7 1a02 	vldr	s3, [r7, #8]
 800e710:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e714:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e718:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800e9ec <AdatiWayReturn+0xbb8>
 800e71c:	f7f5 f96c 	bl	80039f8 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e720:	2003      	movs	r0, #3
 800e722:	f7f9 f8bf 	bl	80078a4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e726:	2003      	movs	r0, #3
 800e728:	f7f9 f894 	bl	8007854 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e72c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e730:	f7f9 fbb6 	bl	8007ea0 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e734:	6978      	ldr	r0, [r7, #20]
 800e736:	ed9f 2aae 	vldr	s4, [pc, #696]	; 800e9f0 <AdatiWayReturn+0xbbc>
 800e73a:	eddf 1aae 	vldr	s3, [pc, #696]	; 800e9f4 <AdatiWayReturn+0xbc0>
 800e73e:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e742:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e746:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e74a:	f7f4 fc47 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e74e:	2003      	movs	r0, #3
 800e750:	f7f9 f8a8 	bl	80078a4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e754:	2003      	movs	r0, #3
 800e756:	f7f9 f87d 	bl	8007854 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e75a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e75e:	f7f9 fb9f 	bl	8007ea0 <wait_ms_NoReset>
				no_safty = 0;
 800e762:	4ba0      	ldr	r3, [pc, #640]	; (800e9e4 <AdatiWayReturn+0xbb0>)
 800e764:	2200      	movs	r2, #0
 800e766:	701a      	strb	r2, [r3, #0]
				clear_Ierror();
 800e768:	f7f5 ff1c 	bl	80045a4 <clear_Ierror>

				direction = direction + 2;
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	3302      	adds	r3, #2
 800e770:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	2b04      	cmp	r3, #4
 800e776:	dd02      	ble.n	800e77e <AdatiWayReturn+0x94a>
					direction = direction-4;
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	3b04      	subs	r3, #4
 800e77c:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	2b00      	cmp	r3, #0
 800e782:	f300 82eb 	bgt.w	800ed5c <AdatiWayReturn+0xf28>
					direction = direction+4;
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	3304      	adds	r3, #4
 800e78a:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e78c:	e2e6      	b.n	800ed5c <AdatiWayReturn+0xf28>
			}


			if(Dijkstra_maker_flag==1){
 800e78e:	4b9a      	ldr	r3, [pc, #616]	; (800e9f8 <AdatiWayReturn+0xbc4>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	2b01      	cmp	r3, #1
 800e794:	f040 8140 	bne.w	800ea18 <AdatiWayReturn+0xbe4>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e798:	2301      	movs	r3, #1
 800e79a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e7a4:	6978      	ldr	r0, [r7, #20]
 800e7a6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7aa:	edd7 1a03 	vldr	s3, [r7, #12]
 800e7ae:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e7b2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e7b6:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800e9fc <AdatiWayReturn+0xbc8>
 800e7ba:	f7f4 fc0f 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e7be:	2003      	movs	r0, #3
 800e7c0:	f7f9 f870 	bl	80078a4 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e7c4:	2003      	movs	r0, #3
 800e7c6:	f7f9 f845 	bl	8007854 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e7ca:	2064      	movs	r0, #100	; 0x64
 800e7cc:	f7f9 fb68 	bl	8007ea0 <wait_ms_NoReset>
				create_DijkstraMap();
 800e7d0:	f002 fede 	bl	8011590 <create_DijkstraMap>
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e7d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e7d6:	2bff      	cmp	r3, #255	; 0xff
 800e7d8:	d10c      	bne.n	800e7f4 <AdatiWayReturn+0x9c0>
 800e7da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7dc:	2bff      	cmp	r3, #255	; 0xff
 800e7de:	d109      	bne.n	800e7f4 <AdatiWayReturn+0x9c0>
 800e7e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7e2:	2bff      	cmp	r3, #255	; 0xff
 800e7e4:	d106      	bne.n	800e7f4 <AdatiWayReturn+0x9c0>
 800e7e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7e8:	2bff      	cmp	r3, #255	; 0xff
 800e7ea:	d103      	bne.n	800e7f4 <AdatiWayReturn+0x9c0>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e7ec:	4b84      	ldr	r3, [pc, #528]	; (800ea00 <AdatiWayReturn+0xbcc>)
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	701a      	strb	r2, [r3, #0]
									break;
 800e7f2:	e2b6      	b.n	800ed62 <AdatiWayReturn+0xf2e>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e7f4:	6a3b      	ldr	r3, [r7, #32]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	db08      	blt.n	800e80c <AdatiWayReturn+0x9d8>
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	db05      	blt.n	800e80c <AdatiWayReturn+0x9d8>
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	2b0f      	cmp	r3, #15
 800e804:	dc02      	bgt.n	800e80c <AdatiWayReturn+0x9d8>
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	2b0f      	cmp	r3, #15
 800e80a:	dd03      	ble.n	800e814 <AdatiWayReturn+0x9e0>
												// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
													error_mode=1;
 800e80c:	4b7c      	ldr	r3, [pc, #496]	; (800ea00 <AdatiWayReturn+0xbcc>)
 800e80e:	2201      	movs	r2, #1
 800e810:	701a      	strb	r2, [r3, #0]
													break;
 800e812:	e2a6      	b.n	800ed62 <AdatiWayReturn+0xf2e>
								}
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e814:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e816:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e818:	429a      	cmp	r2, r3
 800e81a:	d814      	bhi.n	800e846 <AdatiWayReturn+0xa12>
 800e81c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e820:	429a      	cmp	r2, r3
 800e822:	d810      	bhi.n	800e846 <AdatiWayReturn+0xa12>
 800e824:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e826:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e828:	429a      	cmp	r2, r3
 800e82a:	d80c      	bhi.n	800e846 <AdatiWayReturn+0xa12>
									// 直進
									straight_table2(90/2, 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e82c:	6978      	ldr	r0, [r7, #20]
 800e82e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e832:	edd7 1a03 	vldr	s3, [r7, #12]
 800e836:	ed97 1a03 	vldr	s2, [r7, #12]
 800e83a:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e83e:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800ea04 <AdatiWayReturn+0xbd0>
 800e842:	f7f4 fbcb 	bl	8002fdc <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e846:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e848:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d230      	bcs.n	800e8b0 <AdatiWayReturn+0xa7c>
 800e84e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e852:	429a      	cmp	r2, r3
 800e854:	d82c      	bhi.n	800e8b0 <AdatiWayReturn+0xa7c>
 800e856:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d828      	bhi.n	800e8b0 <AdatiWayReturn+0xa7c>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800e85e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e862:	eef1 7a67 	vneg.f32	s15, s15
 800e866:	ed97 2a00 	vldr	s4, [r7]
 800e86a:	eef0 1a67 	vmov.f32	s3, s15
 800e86e:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e872:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e876:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800ea08 <AdatiWayReturn+0xbd4>
 800e87a:	f7f5 f8bd 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e87e:	2003      	movs	r0, #3
 800e880:	f7f9 f810 	bl	80078a4 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e884:	2003      	movs	r0, #3
 800e886:	f7f8 ffe5 	bl	8007854 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(50);
 800e88a:	2032      	movs	r0, #50	; 0x32
 800e88c:	f7f9 fb08 	bl	8007ea0 <wait_ms_NoReset>
									straight_table2(90/2, 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e890:	6978      	ldr	r0, [r7, #20]
 800e892:	ed97 2a01 	vldr	s4, [r7, #4]
 800e896:	edd7 1a03 	vldr	s3, [r7, #12]
 800e89a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e89e:	eddf 0a52 	vldr	s1, [pc, #328]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e8a2:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800ea04 <AdatiWayReturn+0xbd0>
 800e8a6:	f7f4 fb99 	bl	8002fdc <straight_table2>
									direction++;
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	61bb      	str	r3, [r7, #24]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e8b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d22c      	bcs.n	800e912 <AdatiWayReturn+0xade>
 800e8b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d228      	bcs.n	800e912 <AdatiWayReturn+0xade>
 800e8c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d824      	bhi.n	800e912 <AdatiWayReturn+0xade>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e8c8:	ed97 2a00 	vldr	s4, [r7]
 800e8cc:	edd7 1a02 	vldr	s3, [r7, #8]
 800e8d0:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e8d4:	eddf 0a44 	vldr	s1, [pc, #272]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e8d8:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800ea0c <AdatiWayReturn+0xbd8>
 800e8dc:	f7f5 f88c 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8e0:	2003      	movs	r0, #3
 800e8e2:	f7f8 ffdf 	bl	80078a4 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e8e6:	2003      	movs	r0, #3
 800e8e8:	f7f8 ffb4 	bl	8007854 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(50);
 800e8ec:	2032      	movs	r0, #50	; 0x32
 800e8ee:	f7f9 fad7 	bl	8007ea0 <wait_ms_NoReset>
									straight_table2(90/2, 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8f2:	6978      	ldr	r0, [r7, #20]
 800e8f4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8f8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8fc:	ed97 1a03 	vldr	s2, [r7, #12]
 800e900:	eddf 0a39 	vldr	s1, [pc, #228]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e904:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800ea04 <AdatiWayReturn+0xbd0>
 800e908:	f7f4 fb68 	bl	8002fdc <straight_table2>
									direction--;
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	3b01      	subs	r3, #1
 800e910:	61bb      	str	r3, [r7, #24]
								}
								if(back_count < front_count && back_count < right_count
 800e912:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e914:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e916:	429a      	cmp	r2, r3
 800e918:	f080 820f 	bcs.w	800ed3a <AdatiWayReturn+0xf06>
 800e91c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e91e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e920:	429a      	cmp	r2, r3
 800e922:	f080 820a 	bcs.w	800ed3a <AdatiWayReturn+0xf06>
										&& back_count < left_count){
 800e926:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e92a:	429a      	cmp	r2, r3
 800e92c:	f080 8205 	bcs.w	800ed3a <AdatiWayReturn+0xf06>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800e930:	4b2c      	ldr	r3, [pc, #176]	; (800e9e4 <AdatiWayReturn+0xbb0>)
 800e932:	2201      	movs	r2, #1
 800e934:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e936:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e93a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e93e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e942:	4618      	mov	r0, r3
 800e944:	edd7 0a00 	vldr	s1, [r7]
 800e948:	ed97 0a02 	vldr	s0, [r7, #8]
 800e94c:	f7fb fa02 	bl	8009d54 <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									wait_ms_NoReset(100);
 800e950:	2064      	movs	r0, #100	; 0x64
 800e952:	f7f9 faa5 	bl	8007ea0 <wait_ms_NoReset>
									no_safty = 0;
 800e956:	4b23      	ldr	r3, [pc, #140]	; (800e9e4 <AdatiWayReturn+0xbb0>)
 800e958:	2200      	movs	r2, #0
 800e95a:	701a      	strb	r2, [r3, #0]
									//clear_Ierror();
									mode.WallControlMode=0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800e960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e964:	2b00      	cmp	r3, #0
 800e966:	d027      	beq.n	800e9b8 <AdatiWayReturn+0xb84>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e968:	6978      	ldr	r0, [r7, #20]
 800e96a:	ed9f 2a21 	vldr	s4, [pc, #132]	; 800e9f0 <AdatiWayReturn+0xbbc>
 800e96e:	eddf 1a21 	vldr	s3, [pc, #132]	; 800e9f4 <AdatiWayReturn+0xbc0>
 800e972:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e976:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e97a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800ea10 <AdatiWayReturn+0xbdc>
 800e97e:	f7f4 fb2d 	bl	8002fdc <straight_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e982:	2003      	movs	r0, #3
 800e984:	f7f8 ff8e 	bl	80078a4 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e988:	2003      	movs	r0, #3
 800e98a:	f7f8 ff63 	bl	8007854 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e98e:	2064      	movs	r0, #100	; 0x64
 800e990:	f7f9 fa86 	bl	8007ea0 <wait_ms_NoReset>

									clear_Ierror();
 800e994:	f7f5 fe06 	bl	80045a4 <clear_Ierror>
									mode.WallControlMode=1;
 800e998:	2301      	movs	r3, #1
 800e99a:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e99c:	6978      	ldr	r0, [r7, #20]
 800e99e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9a2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e9a6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e9aa:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e9ae:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ea14 <AdatiWayReturn+0xbe0>
 800e9b2:	f7f4 fb13 	bl	8002fdc <straight_table2>
 800e9b6:	e010      	b.n	800e9da <AdatiWayReturn+0xba6>
									}else{
										clear_Ierror();
 800e9b8:	f7f5 fdf4 	bl	80045a4 <clear_Ierror>
										mode.WallControlMode=1;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	753b      	strb	r3, [r7, #20]
										straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e9c0:	6978      	ldr	r0, [r7, #20]
 800e9c2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9c6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e9ca:	ed97 1a03 	vldr	s2, [r7, #12]
 800e9ce:	eddf 0a06 	vldr	s1, [pc, #24]	; 800e9e8 <AdatiWayReturn+0xbb4>
 800e9d2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ea0c <AdatiWayReturn+0xbd8>
 800e9d6:	f7f4 fb01 	bl	8002fdc <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	3302      	adds	r3, #2
 800e9de:	61bb      	str	r3, [r7, #24]
 800e9e0:	e1ab      	b.n	800ed3a <AdatiWayReturn+0xf06>
 800e9e2:	bf00      	nop
 800e9e4:	20000806 	.word	0x20000806
 800e9e8:	00000000 	.word	0x00000000
 800e9ec:	43340000 	.word	0x43340000
 800e9f0:	447a0000 	.word	0x447a0000
 800e9f4:	c3160000 	.word	0xc3160000
 800e9f8:	20000d2c 	.word	0x20000d2c
 800e9fc:	42140000 	.word	0x42140000
 800ea00:	20000807 	.word	0x20000807
 800ea04:	42340000 	.word	0x42340000
 800ea08:	c2b40000 	.word	0xc2b40000
 800ea0c:	42b40000 	.word	0x42b40000
 800ea10:	c1a40000 	.word	0xc1a40000
 800ea14:	42830000 	.word	0x42830000
								}


			}else{

				if(know_mode==0){
 800ea18:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <AdatiWayReturn+0xbf2>
					kitikukan = 0;
 800ea20:	4b97      	ldr	r3, [pc, #604]	; (800ec80 <AdatiWayReturn+0xe4c>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800ea26:	4b96      	ldr	r3, [pc, #600]	; (800ec80 <AdatiWayReturn+0xe4c>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f040 8142 	bne.w	800ecb4 <AdatiWayReturn+0xe80>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800ea30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea32:	2bff      	cmp	r3, #255	; 0xff
 800ea34:	d10c      	bne.n	800ea50 <AdatiWayReturn+0xc1c>
 800ea36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea38:	2bff      	cmp	r3, #255	; 0xff
 800ea3a:	d109      	bne.n	800ea50 <AdatiWayReturn+0xc1c>
 800ea3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea3e:	2bff      	cmp	r3, #255	; 0xff
 800ea40:	d106      	bne.n	800ea50 <AdatiWayReturn+0xc1c>
 800ea42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea44:	2bff      	cmp	r3, #255	; 0xff
 800ea46:	d103      	bne.n	800ea50 <AdatiWayReturn+0xc1c>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800ea48:	4b8e      	ldr	r3, [pc, #568]	; (800ec84 <AdatiWayReturn+0xe50>)
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	701a      	strb	r2, [r3, #0]
					break;
 800ea4e:	e188      	b.n	800ed62 <AdatiWayReturn+0xf2e>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800ea50:	6a3b      	ldr	r3, [r7, #32]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	db08      	blt.n	800ea68 <AdatiWayReturn+0xc34>
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	db05      	blt.n	800ea68 <AdatiWayReturn+0xc34>
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	2b0f      	cmp	r3, #15
 800ea60:	dc02      	bgt.n	800ea68 <AdatiWayReturn+0xc34>
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	2b0f      	cmp	r3, #15
 800ea66:	dd03      	ble.n	800ea70 <AdatiWayReturn+0xc3c>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800ea68:	4b86      	ldr	r3, [pc, #536]	; (800ec84 <AdatiWayReturn+0xe50>)
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	701a      	strb	r2, [r3, #0]
									break;
 800ea6e:	e178      	b.n	800ed62 <AdatiWayReturn+0xf2e>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ea70:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ea72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d81a      	bhi.n	800eaae <AdatiWayReturn+0xc7a>
 800ea78:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ea7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d816      	bhi.n	800eaae <AdatiWayReturn+0xc7a>
 800ea80:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ea82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d812      	bhi.n	800eaae <AdatiWayReturn+0xc7a>
					// 直進
					mode.WallControlMode=1;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea94:	6978      	ldr	r0, [r7, #20]
 800ea96:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea9a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea9e:	ed97 1a03 	vldr	s2, [r7, #12]
 800eaa2:	edd7 0a03 	vldr	s1, [r7, #12]
 800eaa6:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800ec88 <AdatiWayReturn+0xe54>
 800eaaa:	f7f4 fa97 	bl	8002fdc <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800eaae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eab0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d22c      	bcs.n	800eb10 <AdatiWayReturn+0xcdc>
 800eab6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d828      	bhi.n	800eb10 <AdatiWayReturn+0xcdc>
 800eabe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800eac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d824      	bhi.n	800eb10 <AdatiWayReturn+0xcdc>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800eac6:	6a3b      	ldr	r3, [r7, #32]
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d002      	beq.n	800ead2 <AdatiWayReturn+0xc9e>
 800eacc:	6a3b      	ldr	r3, [r7, #32]
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d109      	bne.n	800eae6 <AdatiWayReturn+0xcb2>
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <AdatiWayReturn+0xcaa>
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d103      	bne.n	800eae6 <AdatiWayReturn+0xcb2>
						noGoalPillarMode=1;
 800eade:	4b6b      	ldr	r3, [pc, #428]	; (800ec8c <AdatiWayReturn+0xe58>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	701a      	strb	r2, [r3, #0]
 800eae4:	e002      	b.n	800eaec <AdatiWayReturn+0xcb8>
					}else{
						noGoalPillarMode=0;
 800eae6:	4b69      	ldr	r3, [pc, #420]	; (800ec8c <AdatiWayReturn+0xe58>)
 800eae8:	2200      	movs	r2, #0
 800eaea:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800eaec:	4b68      	ldr	r3, [pc, #416]	; (800ec90 <AdatiWayReturn+0xe5c>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	9203      	str	r2, [sp, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	9202      	str	r2, [sp, #8]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	9201      	str	r2, [sp, #4]
 800eafa:	699a      	ldr	r2, [r3, #24]
 800eafc:	9200      	str	r2, [sp, #0]
 800eafe:	3308      	adds	r3, #8
 800eb00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb02:	ed97 0a03 	vldr	s0, [r7, #12]
 800eb06:	f7fb f9ef 	bl	8009ee8 <slalomR>
					direction++;
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800eb10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d22c      	bcs.n	800eb72 <AdatiWayReturn+0xd3e>
 800eb18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d228      	bcs.n	800eb72 <AdatiWayReturn+0xd3e>
 800eb20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d824      	bhi.n	800eb72 <AdatiWayReturn+0xd3e>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800eb28:	6a3b      	ldr	r3, [r7, #32]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d002      	beq.n	800eb34 <AdatiWayReturn+0xd00>
 800eb2e:	6a3b      	ldr	r3, [r7, #32]
 800eb30:	2b02      	cmp	r3, #2
 800eb32:	d109      	bne.n	800eb48 <AdatiWayReturn+0xd14>
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <AdatiWayReturn+0xd0c>
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d103      	bne.n	800eb48 <AdatiWayReturn+0xd14>
						noGoalPillarMode=1;
 800eb40:	4b52      	ldr	r3, [pc, #328]	; (800ec8c <AdatiWayReturn+0xe58>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	701a      	strb	r2, [r3, #0]
 800eb46:	e002      	b.n	800eb4e <AdatiWayReturn+0xd1a>
					}else{
						noGoalPillarMode=0;
 800eb48:	4b50      	ldr	r3, [pc, #320]	; (800ec8c <AdatiWayReturn+0xe58>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800eb4e:	4b50      	ldr	r3, [pc, #320]	; (800ec90 <AdatiWayReturn+0xe5c>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	9203      	str	r2, [sp, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	9202      	str	r2, [sp, #8]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	9201      	str	r2, [sp, #4]
 800eb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb5e:	9200      	str	r2, [sp, #0]
 800eb60:	331c      	adds	r3, #28
 800eb62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb64:	ed97 0a03 	vldr	s0, [r7, #12]
 800eb68:	f7fb fb78 	bl	800a25c <slalomL>
					direction--;
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800eb72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb76:	429a      	cmp	r2, r3
 800eb78:	f080 80df 	bcs.w	800ed3a <AdatiWayReturn+0xf06>
 800eb7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb80:	429a      	cmp	r2, r3
 800eb82:	f080 80da 	bcs.w	800ed3a <AdatiWayReturn+0xf06>
						&& back_count < left_count){
 800eb86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	f080 80d5 	bcs.w	800ed3a <AdatiWayReturn+0xf06>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800eb90:	2301      	movs	r3, #1
 800eb92:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb9c:	6978      	ldr	r0, [r7, #20]
 800eb9e:	ed97 2a01 	vldr	s4, [r7, #4]
 800eba2:	edd7 1a03 	vldr	s3, [r7, #12]
 800eba6:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 800ec94 <AdatiWayReturn+0xe60>
 800ebaa:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebae:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ecb0 <AdatiWayReturn+0xe7c>
 800ebb2:	f7f4 fa13 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ebb6:	2003      	movs	r0, #3
 800ebb8:	f7f8 fe74 	bl	80078a4 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ebbc:	2003      	movs	r0, #3
 800ebbe:	f7f8 fe49 	bl	8007854 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ebc2:	2064      	movs	r0, #100	; 0x64
 800ebc4:	f7f9 f96c 	bl	8007ea0 <wait_ms_NoReset>
					create_DijkstraMap();
 800ebc8:	f002 fce2 	bl	8011590 <create_DijkstraMap>
					no_safty = 1;
 800ebcc:	4b32      	ldr	r3, [pc, #200]	; (800ec98 <AdatiWayReturn+0xe64>)
 800ebce:	2201      	movs	r2, #1
 800ebd0:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ebd2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ebd6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ebda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebde:	4618      	mov	r0, r3
 800ebe0:	edd7 0a00 	vldr	s1, [r7]
 800ebe4:	ed97 0a02 	vldr	s0, [r7, #8]
 800ebe8:	f7fb f8b4 	bl	8009d54 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					wait_ms_NoReset(100);
 800ebec:	2064      	movs	r0, #100	; 0x64
 800ebee:	f7f9 f957 	bl	8007ea0 <wait_ms_NoReset>
					no_safty = 0;
 800ebf2:	4b29      	ldr	r3, [pc, #164]	; (800ec98 <AdatiWayReturn+0xe64>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	701a      	strb	r2, [r3, #0]
					//clear_Ierror();
					mode.WallControlMode=0;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ebfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d027      	beq.n	800ec54 <AdatiWayReturn+0xe20>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ec04:	6978      	ldr	r0, [r7, #20]
 800ec06:	ed9f 2a25 	vldr	s4, [pc, #148]	; 800ec9c <AdatiWayReturn+0xe68>
 800ec0a:	eddf 1a25 	vldr	s3, [pc, #148]	; 800eca0 <AdatiWayReturn+0xe6c>
 800ec0e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800ec94 <AdatiWayReturn+0xe60>
 800ec12:	eddf 0a20 	vldr	s1, [pc, #128]	; 800ec94 <AdatiWayReturn+0xe60>
 800ec16:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800eca4 <AdatiWayReturn+0xe70>
 800ec1a:	f7f4 f9df 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ec1e:	2003      	movs	r0, #3
 800ec20:	f7f8 fe40 	bl	80078a4 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ec24:	2003      	movs	r0, #3
 800ec26:	f7f8 fe15 	bl	8007854 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ec2a:	2064      	movs	r0, #100	; 0x64
 800ec2c:	f7f9 f938 	bl	8007ea0 <wait_ms_NoReset>

					clear_Ierror();
 800ec30:	f7f5 fcb8 	bl	80045a4 <clear_Ierror>
					mode.WallControlMode=1;
 800ec34:	2301      	movs	r3, #1
 800ec36:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ec38:	6978      	ldr	r0, [r7, #20]
 800ec3a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ec3e:	edd7 1a03 	vldr	s3, [r7, #12]
 800ec42:	ed97 1a03 	vldr	s2, [r7, #12]
 800ec46:	eddf 0a13 	vldr	s1, [pc, #76]	; 800ec94 <AdatiWayReturn+0xe60>
 800ec4a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800eca8 <AdatiWayReturn+0xe74>
 800ec4e:	f7f4 f9c5 	bl	8002fdc <straight_table2>
 800ec52:	e010      	b.n	800ec76 <AdatiWayReturn+0xe42>
					}else{
						clear_Ierror();
 800ec54:	f7f5 fca6 	bl	80045a4 <clear_Ierror>
						mode.WallControlMode=1;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	753b      	strb	r3, [r7, #20]
						straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ec5c:	6978      	ldr	r0, [r7, #20]
 800ec5e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ec62:	edd7 1a03 	vldr	s3, [r7, #12]
 800ec66:	ed97 1a03 	vldr	s2, [r7, #12]
 800ec6a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800ec94 <AdatiWayReturn+0xe60>
 800ec6e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800ecac <AdatiWayReturn+0xe78>
 800ec72:	f7f4 f9b3 	bl	8002fdc <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	3302      	adds	r3, #2
 800ec7a:	61bb      	str	r3, [r7, #24]
 800ec7c:	e05d      	b.n	800ed3a <AdatiWayReturn+0xf06>
 800ec7e:	bf00      	nop
 800ec80:	20000838 	.word	0x20000838
 800ec84:	20000807 	.word	0x20000807
 800ec88:	42a40000 	.word	0x42a40000
 800ec8c:	20000529 	.word	0x20000529
 800ec90:	2000ef80 	.word	0x2000ef80
 800ec94:	00000000 	.word	0x00000000
 800ec98:	20000806 	.word	0x20000806
 800ec9c:	447a0000 	.word	0x447a0000
 800eca0:	c3160000 	.word	0xc3160000
 800eca4:	c1a40000 	.word	0xc1a40000
 800eca8:	42830000 	.word	0x42830000
 800ecac:	42b40000 	.word	0x42b40000
 800ecb0:	42140000 	.word	0x42140000

				}

			} else {
				mode.WallControlMode=1;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ecc0:	6978      	ldr	r0, [r7, #20]
 800ecc2:	ed97 2a01 	vldr	s4, [r7, #4]
 800ecc6:	edd7 1a03 	vldr	s3, [r7, #12]
 800ecca:	ed97 1a03 	vldr	s2, [r7, #12]
 800ecce:	edd7 0a03 	vldr	s1, [r7, #12]
 800ecd2:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800ecb0 <AdatiWayReturn+0xe7c>
 800ecd6:	f7f4 f981 	bl	8002fdc <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800ecda:	f107 0218 	add.w	r2, r7, #24
 800ecde:	f107 011c 	add.w	r1, r7, #28
 800ece2:	f107 0320 	add.w	r3, r7, #32
 800ece6:	4618      	mov	r0, r3
 800ece8:	f001 fbce 	bl	8010488 <compress_kitiku>
				mode.WallCutMode=0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	6978      	ldr	r0, [r7, #20]
 800ecf6:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800ecb0 <AdatiWayReturn+0xe7c>
 800ecfa:	f7f4 fe19 	bl	8003930 <End_straight>
				mode.WallControlMode=1;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ed02:	2300      	movs	r3, #0
 800ed04:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ed0a:	4b28      	ldr	r3, [pc, #160]	; (800edac <AdatiWayReturn+0xf78>)
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	005b      	lsls	r3, r3, #1
 800ed12:	4413      	add	r3, r2
 800ed14:	011a      	lsls	r2, r3, #4
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	ee07 3a90 	vmov	s15, r3
 800ed1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed20:	6978      	ldr	r0, [r7, #20]
 800ed22:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed26:	eddf 1a22 	vldr	s3, [pc, #136]	; 800edb0 <AdatiWayReturn+0xf7c>
 800ed2a:	ed97 1a03 	vldr	s2, [r7, #12]
 800ed2e:	edd7 0a03 	vldr	s1, [r7, #12]
 800ed32:	eeb0 0a67 	vmov.f32	s0, s15
 800ed36:	f7f4 f951 	bl	8002fdc <straight_table2>

			}
			}

			if (direction >= 5) {
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	dd02      	ble.n	800ed46 <AdatiWayReturn+0xf12>
				direction = direction-4;
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	3b04      	subs	r3, #4
 800ed44:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	dc02      	bgt.n	800ed52 <AdatiWayReturn+0xf1e>
				direction = direction+4;
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	3304      	adds	r3, #4
 800ed50:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ed52:	4b18      	ldr	r3, [pc, #96]	; (800edb4 <AdatiWayReturn+0xf80>)
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d002      	beq.n	800ed60 <AdatiWayReturn+0xf2c>
		update_coordinate(&x,&y,direction);
 800ed5a:	e403      	b.n	800e564 <AdatiWayReturn+0x730>
				break;
 800ed5c:	bf00      	nop
 800ed5e:	e000      	b.n	800ed62 <AdatiWayReturn+0xf2e>
			if(error_mode==1){break;}
 800ed60:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800ed62:	2000      	movs	r0, #0
 800ed64:	f7f8 fd6c 	bl	8007840 <pl_DriveMotor_standby>
	maze_mode = 0;
 800ed68:	4b13      	ldr	r3, [pc, #76]	; (800edb8 <AdatiWayReturn+0xf84>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800ed6e:	2064      	movs	r0, #100	; 0x64
 800ed70:	f009 fd5a 	bl	8018828 <HAL_Delay>
	maze_display();
 800ed74:	f005 ffb2 	bl	8014cdc <maze_display>
	create_StepCountMap_queue();
 800ed78:	f005 f98c 	bl	8014094 <create_StepCountMap_queue>
	if(walk_count[0][0] == 255){
 800ed7c:	4b0f      	ldr	r3, [pc, #60]	; (800edbc <AdatiWayReturn+0xf88>)
 800ed7e:	881b      	ldrh	r3, [r3, #0]
 800ed80:	2bff      	cmp	r3, #255	; 0xff
 800ed82:	d102      	bne.n	800ed8a <AdatiWayReturn+0xf56>
		error_mode = 1;
 800ed84:	4b0b      	ldr	r3, [pc, #44]	; (800edb4 <AdatiWayReturn+0xf80>)
 800ed86:	2201      	movs	r2, #1
 800ed88:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800ed8a:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <AdatiWayReturn+0xf80>)
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d102      	bne.n	800ed98 <AdatiWayReturn+0xf64>
		record_in();
 800ed92:	f7f8 fa63 	bl	800725c <record_in>
	} else {
		record_out();
	}

}
 800ed96:	e001      	b.n	800ed9c <AdatiWayReturn+0xf68>
		record_out();
 800ed98:	f7f8 fb1c 	bl	80073d4 <record_out>
}
 800ed9c:	bf00      	nop
 800ed9e:	3734      	adds	r7, #52	; 0x34
 800eda0:	46bd      	mov	sp, r7
 800eda2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eda6:	b004      	add	sp, #16
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	2000082c 	.word	0x2000082c
 800edb0:	447a0000 	.word	0x447a0000
 800edb4:	20000807 	.word	0x20000807
 800edb8:	20000834 	.word	0x20000834
 800edbc:	20000d30 	.word	0x20000d30

0800edc0 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800edc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edc2:	b08b      	sub	sp, #44	; 0x2c
 800edc4:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800edc6:	2300      	movs	r3, #0
 800edc8:	607b      	str	r3, [r7, #4]
	int y = 0;
 800edca:	2300      	movs	r3, #0
 800edcc:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800edce:	2301      	movs	r3, #1
 800edd0:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800edd2:	4b8b      	ldr	r3, [pc, #556]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800edd8:	f002 fbda 	bl	8011590 <create_DijkstraMap>
	maze_display_Dijkstra();
 800eddc:	f006 f89c 	bl	8014f18 <maze_display_Dijkstra>
	pass[0] = 1;
 800ede0:	4b88      	ldr	r3, [pc, #544]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ede2:	2201      	movs	r2, #1
 800ede4:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800ede6:	4639      	mov	r1, r7
 800ede8:	1d3b      	adds	r3, r7, #4
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	4618      	mov	r0, r3
 800edee:	f7fe ffed 	bl	800ddcc <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d002      	beq.n	800edfe <pass_maker_Dijkstra+0x3e>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	d13a      	bne.n	800ee74 <pass_maker_Dijkstra+0xb4>
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <pass_maker_Dijkstra+0x4a>
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d134      	bne.n	800ee74 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ee0a:	4b7d      	ldr	r3, [pc, #500]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	4b7c      	ldr	r3, [pc, #496]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ee12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	da05      	bge.n	800ee26 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ee1a:	4b79      	ldr	r3, [pc, #484]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	4b77      	ldr	r3, [pc, #476]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ee24:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ee26:	4b76      	ldr	r3, [pc, #472]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	4b75      	ldr	r3, [pc, #468]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ee2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee32:	4a73      	ldr	r2, [pc, #460]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ee34:	7812      	ldrb	r2, [r2, #0]
 800ee36:	4611      	mov	r1, r2
 800ee38:	3301      	adds	r3, #1
 800ee3a:	4a72      	ldr	r2, [pc, #456]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ee3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	3302      	adds	r3, #2
 800ee44:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2b05      	cmp	r3, #5
 800ee4a:	d101      	bne.n	800ee50 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	2b06      	cmp	r3, #6
 800ee54:	d101      	bne.n	800ee5a <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ee56:	2302      	movs	r3, #2
 800ee58:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d101      	bne.n	800ee64 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800ee60:	2304      	movs	r3, #4
 800ee62:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6a:	f040 80c2 	bne.w	800eff2 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800ee6e:	2303      	movs	r3, #3
 800ee70:	617b      	str	r3, [r7, #20]
					}
					break;
 800ee72:	e0be      	b.n	800eff2 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	f107 020b 	add.w	r2, r7, #11
 800ee7c:	f107 0309 	add.w	r3, r7, #9
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	f107 030a 	add.w	r3, r7, #10
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	f001 ff64 	bl	8010d58 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	f107 060c 	add.w	r6, r7, #12
 800ee98:	f107 050e 	add.w	r5, r7, #14
 800ee9c:	f107 0410 	add.w	r4, r7, #16
 800eea0:	f107 0012 	add.w	r0, r7, #18
 800eea4:	6979      	ldr	r1, [r7, #20]
 800eea6:	9102      	str	r1, [sp, #8]
 800eea8:	9201      	str	r2, [sp, #4]
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	4633      	mov	r3, r6
 800eeae:	462a      	mov	r2, r5
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	f002 fad3 	bl	801145c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eeb6:	7afb      	ldrb	r3, [r7, #11]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <pass_maker_Dijkstra+0x102>
 800eebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eec0:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eec2:	7abb      	ldrb	r3, [r7, #10]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <pass_maker_Dijkstra+0x10e>
 800eec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eecc:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eece:	7a7b      	ldrb	r3, [r7, #9]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <pass_maker_Dijkstra+0x11a>
 800eed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eed8:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800eeda:	8a7b      	ldrh	r3, [r7, #18]
 800eedc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d10e      	bne.n	800ef02 <pass_maker_Dijkstra+0x142>
 800eee4:	8a3b      	ldrh	r3, [r7, #16]
 800eee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d109      	bne.n	800ef02 <pass_maker_Dijkstra+0x142>
 800eeee:	89bb      	ldrh	r3, [r7, #12]
 800eef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d104      	bne.n	800ef02 <pass_maker_Dijkstra+0x142>
 800eef8:	89fb      	ldrh	r3, [r7, #14]
 800eefa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d079      	beq.n	800eff6 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ef02:	8a7a      	ldrh	r2, [r7, #18]
 800ef04:	8a3b      	ldrh	r3, [r7, #16]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d822      	bhi.n	800ef50 <pass_maker_Dijkstra+0x190>
 800ef0a:	8a7a      	ldrh	r2, [r7, #18]
 800ef0c:	89bb      	ldrh	r3, [r7, #12]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d81e      	bhi.n	800ef50 <pass_maker_Dijkstra+0x190>
 800ef12:	8a7a      	ldrh	r2, [r7, #18]
 800ef14:	89fb      	ldrh	r3, [r7, #14]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d81a      	bhi.n	800ef50 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800ef1a:	4b39      	ldr	r3, [pc, #228]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	4b38      	ldr	r3, [pc, #224]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ef22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	da05      	bge.n	800ef36 <pass_maker_Dijkstra+0x176>
 800ef2a:	4b35      	ldr	r3, [pc, #212]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	4b33      	ldr	r3, [pc, #204]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef34:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800ef36:	4b32      	ldr	r3, [pc, #200]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	4b31      	ldr	r3, [pc, #196]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ef3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef42:	4a2f      	ldr	r2, [pc, #188]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef44:	7812      	ldrb	r2, [r2, #0]
 800ef46:	4611      	mov	r1, r2
 800ef48:	3302      	adds	r3, #2
 800ef4a:	4a2e      	ldr	r2, [pc, #184]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ef4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ef50:	8a3a      	ldrh	r2, [r7, #16]
 800ef52:	8a7b      	ldrh	r3, [r7, #18]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d218      	bcs.n	800ef8a <pass_maker_Dijkstra+0x1ca>
 800ef58:	8a3a      	ldrh	r2, [r7, #16]
 800ef5a:	89bb      	ldrh	r3, [r7, #12]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d814      	bhi.n	800ef8a <pass_maker_Dijkstra+0x1ca>
 800ef60:	8a3a      	ldrh	r2, [r7, #16]
 800ef62:	89fb      	ldrh	r3, [r7, #14]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d810      	bhi.n	800ef8a <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800ef68:	4b25      	ldr	r3, [pc, #148]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	4b23      	ldr	r3, [pc, #140]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef72:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800ef74:	4b22      	ldr	r3, [pc, #136]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4b22      	ldr	r3, [pc, #136]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800ef7c:	f06f 0201 	mvn.w	r2, #1
 800ef80:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	3301      	adds	r3, #1
 800ef88:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ef8a:	89ba      	ldrh	r2, [r7, #12]
 800ef8c:	8a7b      	ldrh	r3, [r7, #18]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d218      	bcs.n	800efc4 <pass_maker_Dijkstra+0x204>
 800ef92:	89ba      	ldrh	r2, [r7, #12]
 800ef94:	8a3b      	ldrh	r3, [r7, #16]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d214      	bcs.n	800efc4 <pass_maker_Dijkstra+0x204>
 800ef9a:	89ba      	ldrh	r2, [r7, #12]
 800ef9c:	89fb      	ldrh	r3, [r7, #14]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d810      	bhi.n	800efc4 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800efa2:	4b17      	ldr	r3, [pc, #92]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	3301      	adds	r3, #1
 800efa8:	b2da      	uxtb	r2, r3
 800efaa:	4b15      	ldr	r3, [pc, #84]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800efac:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800efae:	4b14      	ldr	r3, [pc, #80]	; (800f000 <pass_maker_Dijkstra+0x240>)
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	4619      	mov	r1, r3
 800efb4:	4b13      	ldr	r3, [pc, #76]	; (800f004 <pass_maker_Dijkstra+0x244>)
 800efb6:	f06f 0202 	mvn.w	r2, #2
 800efba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	2b05      	cmp	r3, #5
 800efc8:	d101      	bne.n	800efce <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800efca:	2301      	movs	r3, #1
 800efcc:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	2b06      	cmp	r3, #6
 800efd2:	d101      	bne.n	800efd8 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800efd4:	2302      	movs	r3, #2
 800efd6:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d101      	bne.n	800efe2 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800efde:	2304      	movs	r3, #4
 800efe0:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe8:	f47f aefd 	bne.w	800ede6 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800efec:	2303      	movs	r3, #3
 800efee:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800eff0:	e6f9      	b.n	800ede6 <pass_maker_Dijkstra+0x26>
					break;
 800eff2:	bf00      	nop
 800eff4:	e000      	b.n	800eff8 <pass_maker_Dijkstra+0x238>
			break;
 800eff6:	bf00      	nop
		}

	}
}
 800eff8:	bf00      	nop
 800effa:	371c      	adds	r7, #28
 800effc:	46bd      	mov	sp, r7
 800effe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f000:	20000828 	.word	0x20000828
 800f004:	2000083c 	.word	0x2000083c

0800f008 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f008:	b5b0      	push	{r4, r5, r7, lr}
 800f00a:	b0e0      	sub	sp, #384	; 0x180
 800f00c:	af50      	add	r7, sp, #320	; 0x140
 800f00e:	ed87 0a05 	vstr	s0, [r7, #20]
 800f012:	edc7 0a04 	vstr	s1, [r7, #16]
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	4608      	mov	r0, r1
 800f01a:	4611      	mov	r1, r2
 800f01c:	461a      	mov	r2, r3
 800f01e:	ed87 1a01 	vstr	s2, [r7, #4]
 800f022:	4603      	mov	r3, r0
 800f024:	72fb      	strb	r3, [r7, #11]
 800f026:	460b      	mov	r3, r1
 800f028:	72bb      	strb	r3, [r7, #10]
 800f02a:	4613      	mov	r3, r2
 800f02c:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f02e:	f06f 0301 	mvn.w	r3, #1
 800f032:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f034:	2301      	movs	r3, #1
 800f036:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f038:	2300      	movs	r3, #0
 800f03a:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f040:	2300      	movs	r3, #0
 800f042:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f044:	2300      	movs	r3, #0
 800f046:	633b      	str	r3, [r7, #48]	; 0x30
 800f048:	e007      	b.n	800f05a <run_shortest+0x52>
 800f04a:	4a07      	ldr	r2, [pc, #28]	; (800f068 <run_shortest+0x60>)
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	2100      	movs	r1, #0
 800f050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f056:	3301      	adds	r3, #1
 800f058:	633b      	str	r3, [r7, #48]	; 0x30
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	2bfe      	cmp	r3, #254	; 0xfe
 800f05e:	ddf4      	ble.n	800f04a <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f060:	2300      	movs	r3, #0
 800f062:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f064:	e077      	b.n	800f156 <run_shortest+0x14e>
 800f066:	bf00      	nop
 800f068:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f06c:	4aa9      	ldr	r2, [pc, #676]	; (800f314 <run_shortest+0x30c>)
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f074:	4aa8      	ldr	r2, [pc, #672]	; (800f318 <run_shortest+0x310>)
 800f076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f078:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f07c:	4aa5      	ldr	r2, [pc, #660]	; (800f314 <run_shortest+0x30c>)
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	330c      	adds	r3, #12
 800f082:	005b      	lsls	r3, r3, #1
 800f084:	4413      	add	r3, r2
 800f086:	88d9      	ldrh	r1, [r3, #6]
 800f088:	4aa3      	ldr	r2, [pc, #652]	; (800f318 <run_shortest+0x310>)
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	330c      	adds	r3, #12
 800f08e:	005b      	lsls	r3, r3, #1
 800f090:	4413      	add	r3, r2
 800f092:	460a      	mov	r2, r1
 800f094:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f096:	4a9f      	ldr	r2, [pc, #636]	; (800f314 <run_shortest+0x30c>)
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	331c      	adds	r3, #28
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	4413      	add	r3, r2
 800f0a0:	8899      	ldrh	r1, [r3, #4]
 800f0a2:	4a9d      	ldr	r2, [pc, #628]	; (800f318 <run_shortest+0x310>)
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	331c      	adds	r3, #28
 800f0a8:	005b      	lsls	r3, r3, #1
 800f0aa:	4413      	add	r3, r2
 800f0ac:	460a      	mov	r2, r1
 800f0ae:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f0b0:	4a98      	ldr	r2, [pc, #608]	; (800f314 <run_shortest+0x30c>)
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	332c      	adds	r3, #44	; 0x2c
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	4413      	add	r3, r2
 800f0ba:	8859      	ldrh	r1, [r3, #2]
 800f0bc:	4a96      	ldr	r2, [pc, #600]	; (800f318 <run_shortest+0x310>)
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	332c      	adds	r3, #44	; 0x2c
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	4413      	add	r3, r2
 800f0c6:	460a      	mov	r2, r1
 800f0c8:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f0ca:	4a92      	ldr	r2, [pc, #584]	; (800f314 <run_shortest+0x30c>)
 800f0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ce:	331c      	adds	r3, #28
 800f0d0:	005b      	lsls	r3, r3, #1
 800f0d2:	4413      	add	r3, r2
 800f0d4:	889b      	ldrh	r3, [r3, #4]
 800f0d6:	43db      	mvns	r3, r3
 800f0d8:	b299      	uxth	r1, r3
 800f0da:	4a8e      	ldr	r2, [pc, #568]	; (800f314 <run_shortest+0x30c>)
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	331c      	adds	r3, #28
 800f0e0:	005b      	lsls	r3, r3, #1
 800f0e2:	4413      	add	r3, r2
 800f0e4:	460a      	mov	r2, r1
 800f0e6:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f0e8:	4a8a      	ldr	r2, [pc, #552]	; (800f314 <run_shortest+0x30c>)
 800f0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ec:	332c      	adds	r3, #44	; 0x2c
 800f0ee:	005b      	lsls	r3, r3, #1
 800f0f0:	4413      	add	r3, r2
 800f0f2:	885b      	ldrh	r3, [r3, #2]
 800f0f4:	43db      	mvns	r3, r3
 800f0f6:	b299      	uxth	r1, r3
 800f0f8:	4a86      	ldr	r2, [pc, #536]	; (800f314 <run_shortest+0x30c>)
 800f0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fc:	332c      	adds	r3, #44	; 0x2c
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	4413      	add	r3, r2
 800f102:	460a      	mov	r2, r1
 800f104:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f106:	4a83      	ldr	r2, [pc, #524]	; (800f314 <run_shortest+0x30c>)
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f10e:	4981      	ldr	r1, [pc, #516]	; (800f314 <run_shortest+0x30c>)
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	331c      	adds	r3, #28
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	440b      	add	r3, r1
 800f118:	889b      	ldrh	r3, [r3, #4]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	b299      	uxth	r1, r3
 800f11e:	4a7d      	ldr	r2, [pc, #500]	; (800f314 <run_shortest+0x30c>)
 800f120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f126:	4a7b      	ldr	r2, [pc, #492]	; (800f314 <run_shortest+0x30c>)
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	330c      	adds	r3, #12
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	4413      	add	r3, r2
 800f130:	88da      	ldrh	r2, [r3, #6]
 800f132:	4978      	ldr	r1, [pc, #480]	; (800f314 <run_shortest+0x30c>)
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	332c      	adds	r3, #44	; 0x2c
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	440b      	add	r3, r1
 800f13c:	885b      	ldrh	r3, [r3, #2]
 800f13e:	4313      	orrs	r3, r2
 800f140:	b299      	uxth	r1, r3
 800f142:	4a74      	ldr	r2, [pc, #464]	; (800f314 <run_shortest+0x30c>)
 800f144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f146:	330c      	adds	r3, #12
 800f148:	005b      	lsls	r3, r3, #1
 800f14a:	4413      	add	r3, r2
 800f14c:	460a      	mov	r2, r1
 800f14e:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	3301      	adds	r3, #1
 800f154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	2b0e      	cmp	r3, #14
 800f15a:	dd87      	ble.n	800f06c <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f15c:	f7ff fe30 	bl	800edc0 <pass_maker_Dijkstra>

	pass_count = 1;
 800f160:	4b6e      	ldr	r3, [pc, #440]	; (800f31c <run_shortest+0x314>)
 800f162:	2201      	movs	r2, #1
 800f164:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f166:	7afb      	ldrb	r3, [r7, #11]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	f040 84b5 	bne.w	800fad8 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f16e:	4b6b      	ldr	r3, [pc, #428]	; (800f31c <run_shortest+0x314>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	4b6a      	ldr	r3, [pc, #424]	; (800f320 <run_shortest+0x318>)
 800f176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f000 813a 	beq.w	800f3f4 <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f180:	4b66      	ldr	r3, [pc, #408]	; (800f31c <run_shortest+0x314>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	461a      	mov	r2, r3
 800f186:	4b66      	ldr	r3, [pc, #408]	; (800f320 <run_shortest+0x318>)
 800f188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f18c:	f113 0f02 	cmn.w	r3, #2
 800f190:	d131      	bne.n	800f1f6 <run_shortest+0x1ee>
 800f192:	4b62      	ldr	r3, [pc, #392]	; (800f31c <run_shortest+0x314>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	3b01      	subs	r3, #1
 800f198:	4a61      	ldr	r2, [pc, #388]	; (800f320 <run_shortest+0x318>)
 800f19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	dd29      	ble.n	800f1f6 <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f1a2:	4b5e      	ldr	r3, [pc, #376]	; (800f31c <run_shortest+0x314>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	4a5d      	ldr	r2, [pc, #372]	; (800f320 <run_shortest+0x318>)
 800f1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	dd21      	ble.n	800f1f6 <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f1b2:	4b5a      	ldr	r3, [pc, #360]	; (800f31c <run_shortest+0x314>)
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	4a59      	ldr	r2, [pc, #356]	; (800f320 <run_shortest+0x318>)
 800f1ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1be:	4b57      	ldr	r3, [pc, #348]	; (800f31c <run_shortest+0x314>)
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	3a01      	subs	r2, #1
 800f1c6:	4956      	ldr	r1, [pc, #344]	; (800f320 <run_shortest+0x318>)
 800f1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f1cc:	4b53      	ldr	r3, [pc, #332]	; (800f31c <run_shortest+0x314>)
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	4a53      	ldr	r2, [pc, #332]	; (800f320 <run_shortest+0x318>)
 800f1d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1d8:	4b50      	ldr	r3, [pc, #320]	; (800f31c <run_shortest+0x314>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	3a01      	subs	r2, #1
 800f1e0:	494f      	ldr	r1, [pc, #316]	; (800f320 <run_shortest+0x318>)
 800f1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f1e6:	4b4d      	ldr	r3, [pc, #308]	; (800f31c <run_shortest+0x314>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	4b4c      	ldr	r3, [pc, #304]	; (800f320 <run_shortest+0x318>)
 800f1ee:	f06f 0203 	mvn.w	r2, #3
 800f1f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f1f6:	4b49      	ldr	r3, [pc, #292]	; (800f31c <run_shortest+0x314>)
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	4b48      	ldr	r3, [pc, #288]	; (800f320 <run_shortest+0x318>)
 800f1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f202:	f113 0f03 	cmn.w	r3, #3
 800f206:	d131      	bne.n	800f26c <run_shortest+0x264>
 800f208:	4b44      	ldr	r3, [pc, #272]	; (800f31c <run_shortest+0x314>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	3b01      	subs	r3, #1
 800f20e:	4a44      	ldr	r2, [pc, #272]	; (800f320 <run_shortest+0x318>)
 800f210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f214:	2b00      	cmp	r3, #0
 800f216:	dd29      	ble.n	800f26c <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f218:	4b40      	ldr	r3, [pc, #256]	; (800f31c <run_shortest+0x314>)
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	3301      	adds	r3, #1
 800f21e:	4a40      	ldr	r2, [pc, #256]	; (800f320 <run_shortest+0x318>)
 800f220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f224:	2b00      	cmp	r3, #0
 800f226:	dd21      	ble.n	800f26c <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f228:	4b3c      	ldr	r3, [pc, #240]	; (800f31c <run_shortest+0x314>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	3b01      	subs	r3, #1
 800f22e:	4a3c      	ldr	r2, [pc, #240]	; (800f320 <run_shortest+0x318>)
 800f230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f234:	4b39      	ldr	r3, [pc, #228]	; (800f31c <run_shortest+0x314>)
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	3b01      	subs	r3, #1
 800f23a:	3a01      	subs	r2, #1
 800f23c:	4938      	ldr	r1, [pc, #224]	; (800f320 <run_shortest+0x318>)
 800f23e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f242:	4b36      	ldr	r3, [pc, #216]	; (800f31c <run_shortest+0x314>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	3301      	adds	r3, #1
 800f248:	4a35      	ldr	r2, [pc, #212]	; (800f320 <run_shortest+0x318>)
 800f24a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f24e:	4b33      	ldr	r3, [pc, #204]	; (800f31c <run_shortest+0x314>)
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	3301      	adds	r3, #1
 800f254:	3a01      	subs	r2, #1
 800f256:	4932      	ldr	r1, [pc, #200]	; (800f320 <run_shortest+0x318>)
 800f258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f25c:	4b2f      	ldr	r3, [pc, #188]	; (800f31c <run_shortest+0x314>)
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	4619      	mov	r1, r3
 800f262:	4b2f      	ldr	r3, [pc, #188]	; (800f320 <run_shortest+0x318>)
 800f264:	f06f 0204 	mvn.w	r2, #4
 800f268:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f26c:	4b2b      	ldr	r3, [pc, #172]	; (800f31c <run_shortest+0x314>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	3b01      	subs	r3, #1
 800f272:	4a2b      	ldr	r2, [pc, #172]	; (800f320 <run_shortest+0x318>)
 800f274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	dd43      	ble.n	800f304 <run_shortest+0x2fc>
 800f27c:	4b27      	ldr	r3, [pc, #156]	; (800f31c <run_shortest+0x314>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	461a      	mov	r2, r3
 800f282:	4b27      	ldr	r3, [pc, #156]	; (800f320 <run_shortest+0x318>)
 800f284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f288:	f113 0f02 	cmn.w	r3, #2
 800f28c:	d13a      	bne.n	800f304 <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f28e:	4b23      	ldr	r3, [pc, #140]	; (800f31c <run_shortest+0x314>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	3301      	adds	r3, #1
 800f294:	4a22      	ldr	r2, [pc, #136]	; (800f320 <run_shortest+0x318>)
 800f296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f29a:	f113 0f02 	cmn.w	r3, #2
 800f29e:	d131      	bne.n	800f304 <run_shortest+0x2fc>
 800f2a0:	4b1e      	ldr	r3, [pc, #120]	; (800f31c <run_shortest+0x314>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	3302      	adds	r3, #2
 800f2a6:	4a1e      	ldr	r2, [pc, #120]	; (800f320 <run_shortest+0x318>)
 800f2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	dd29      	ble.n	800f304 <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f2b0:	4b1a      	ldr	r3, [pc, #104]	; (800f31c <run_shortest+0x314>)
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	4a1a      	ldr	r2, [pc, #104]	; (800f320 <run_shortest+0x318>)
 800f2b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2bc:	4b17      	ldr	r3, [pc, #92]	; (800f31c <run_shortest+0x314>)
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	3a01      	subs	r2, #1
 800f2c4:	4916      	ldr	r1, [pc, #88]	; (800f320 <run_shortest+0x318>)
 800f2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f2ca:	4b14      	ldr	r3, [pc, #80]	; (800f31c <run_shortest+0x314>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	4b13      	ldr	r3, [pc, #76]	; (800f320 <run_shortest+0x318>)
 800f2d2:	f06f 0205 	mvn.w	r2, #5
 800f2d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f2da:	4b10      	ldr	r3, [pc, #64]	; (800f31c <run_shortest+0x314>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	4a0f      	ldr	r2, [pc, #60]	; (800f320 <run_shortest+0x318>)
 800f2e2:	f04f 31ff 	mov.w	r1, #4294967295
 800f2e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f2ea:	4b0c      	ldr	r3, [pc, #48]	; (800f31c <run_shortest+0x314>)
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	3302      	adds	r3, #2
 800f2f0:	4a0b      	ldr	r2, [pc, #44]	; (800f320 <run_shortest+0x318>)
 800f2f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2f6:	4b09      	ldr	r3, [pc, #36]	; (800f31c <run_shortest+0x314>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	3302      	adds	r3, #2
 800f2fc:	3a01      	subs	r2, #1
 800f2fe:	4908      	ldr	r1, [pc, #32]	; (800f320 <run_shortest+0x318>)
 800f300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f304:	4b05      	ldr	r3, [pc, #20]	; (800f31c <run_shortest+0x314>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	3b01      	subs	r3, #1
 800f30a:	4a05      	ldr	r2, [pc, #20]	; (800f320 <run_shortest+0x318>)
 800f30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f310:	2b00      	cmp	r3, #0
 800f312:	e007      	b.n	800f324 <run_shortest+0x31c>
 800f314:	20000c3c 	.word	0x20000c3c
 800f318:	20000cb4 	.word	0x20000cb4
 800f31c:	20000828 	.word	0x20000828
 800f320:	2000083c 	.word	0x2000083c
 800f324:	dd43      	ble.n	800f3ae <run_shortest+0x3a6>
 800f326:	4b31      	ldr	r3, [pc, #196]	; (800f3ec <run_shortest+0x3e4>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	461a      	mov	r2, r3
 800f32c:	4b30      	ldr	r3, [pc, #192]	; (800f3f0 <run_shortest+0x3e8>)
 800f32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f332:	f113 0f03 	cmn.w	r3, #3
 800f336:	d13a      	bne.n	800f3ae <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f338:	4b2c      	ldr	r3, [pc, #176]	; (800f3ec <run_shortest+0x3e4>)
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	3301      	adds	r3, #1
 800f33e:	4a2c      	ldr	r2, [pc, #176]	; (800f3f0 <run_shortest+0x3e8>)
 800f340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f344:	f113 0f03 	cmn.w	r3, #3
 800f348:	d131      	bne.n	800f3ae <run_shortest+0x3a6>
 800f34a:	4b28      	ldr	r3, [pc, #160]	; (800f3ec <run_shortest+0x3e4>)
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	3302      	adds	r3, #2
 800f350:	4a27      	ldr	r2, [pc, #156]	; (800f3f0 <run_shortest+0x3e8>)
 800f352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f356:	2b00      	cmp	r3, #0
 800f358:	dd29      	ble.n	800f3ae <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f35a:	4b24      	ldr	r3, [pc, #144]	; (800f3ec <run_shortest+0x3e4>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	3b01      	subs	r3, #1
 800f360:	4a23      	ldr	r2, [pc, #140]	; (800f3f0 <run_shortest+0x3e8>)
 800f362:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f366:	4b21      	ldr	r3, [pc, #132]	; (800f3ec <run_shortest+0x3e4>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	3b01      	subs	r3, #1
 800f36c:	3a01      	subs	r2, #1
 800f36e:	4920      	ldr	r1, [pc, #128]	; (800f3f0 <run_shortest+0x3e8>)
 800f370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f374:	4b1d      	ldr	r3, [pc, #116]	; (800f3ec <run_shortest+0x3e4>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	4619      	mov	r1, r3
 800f37a:	4b1d      	ldr	r3, [pc, #116]	; (800f3f0 <run_shortest+0x3e8>)
 800f37c:	f06f 0206 	mvn.w	r2, #6
 800f380:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f384:	4b19      	ldr	r3, [pc, #100]	; (800f3ec <run_shortest+0x3e4>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	3301      	adds	r3, #1
 800f38a:	4a19      	ldr	r2, [pc, #100]	; (800f3f0 <run_shortest+0x3e8>)
 800f38c:	f04f 31ff 	mov.w	r1, #4294967295
 800f390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f394:	4b15      	ldr	r3, [pc, #84]	; (800f3ec <run_shortest+0x3e4>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	3302      	adds	r3, #2
 800f39a:	4a15      	ldr	r2, [pc, #84]	; (800f3f0 <run_shortest+0x3e8>)
 800f39c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3a0:	4b12      	ldr	r3, [pc, #72]	; (800f3ec <run_shortest+0x3e4>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	3302      	adds	r3, #2
 800f3a6:	3a01      	subs	r2, #1
 800f3a8:	4911      	ldr	r1, [pc, #68]	; (800f3f0 <run_shortest+0x3e8>)
 800f3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f3ae:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <run_shortest+0x3e4>)
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	4b0e      	ldr	r3, [pc, #56]	; (800f3f0 <run_shortest+0x3e8>)
 800f3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ba:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f3be:	4b0b      	ldr	r3, [pc, #44]	; (800f3ec <run_shortest+0x3e4>)
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	4a0a      	ldr	r2, [pc, #40]	; (800f3f0 <run_shortest+0x3e8>)
 800f3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d107      	bne.n	800f3de <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f3ce:	4b07      	ldr	r3, [pc, #28]	; (800f3ec <run_shortest+0x3e4>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	4a06      	ldr	r2, [pc, #24]	; (800f3f0 <run_shortest+0x3e8>)
 800f3d6:	f04f 31ff 	mov.w	r1, #4294967295
 800f3da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f3de:	4b03      	ldr	r3, [pc, #12]	; (800f3ec <run_shortest+0x3e4>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	4b01      	ldr	r3, [pc, #4]	; (800f3ec <run_shortest+0x3e4>)
 800f3e8:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f3ea:	e6c0      	b.n	800f16e <run_shortest+0x166>
 800f3ec:	20000828 	.word	0x20000828
 800f3f0:	2000083c 	.word	0x2000083c
			break;
 800f3f4:	bf00      	nop
	}

	pass_count = 1;
 800f3f6:	4b8c      	ldr	r3, [pc, #560]	; (800f628 <run_shortest+0x620>)
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f3fc:	7a7b      	ldrb	r3, [r7, #9]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	f040 836a 	bne.w	800fad8 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f404:	4b88      	ldr	r3, [pc, #544]	; (800f628 <run_shortest+0x620>)
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	461a      	mov	r2, r3
 800f40a:	4b88      	ldr	r3, [pc, #544]	; (800f62c <run_shortest+0x624>)
 800f40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f410:	2b00      	cmp	r3, #0
 800f412:	f000 81f1 	beq.w	800f7f8 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f416:	4b84      	ldr	r3, [pc, #528]	; (800f628 <run_shortest+0x620>)
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	4a83      	ldr	r2, [pc, #524]	; (800f62c <run_shortest+0x624>)
 800f41e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f422:	2b00      	cmp	r3, #0
 800f424:	f340 81dc 	ble.w	800f7e0 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f428:	4b7f      	ldr	r3, [pc, #508]	; (800f628 <run_shortest+0x620>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	461a      	mov	r2, r3
 800f42e:	4b7f      	ldr	r3, [pc, #508]	; (800f62c <run_shortest+0x624>)
 800f430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f434:	f113 0f02 	cmn.w	r3, #2
 800f438:	d009      	beq.n	800f44e <run_shortest+0x446>
 800f43a:	4b7b      	ldr	r3, [pc, #492]	; (800f628 <run_shortest+0x620>)
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	461a      	mov	r2, r3
 800f440:	4b7a      	ldr	r3, [pc, #488]	; (800f62c <run_shortest+0x624>)
 800f442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f446:	f113 0f03 	cmn.w	r3, #3
 800f44a:	f040 81c9 	bne.w	800f7e0 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f44e:	4b76      	ldr	r3, [pc, #472]	; (800f628 <run_shortest+0x620>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	4b75      	ldr	r3, [pc, #468]	; (800f62c <run_shortest+0x624>)
 800f456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f45a:	f113 0f02 	cmn.w	r3, #2
 800f45e:	d12d      	bne.n	800f4bc <run_shortest+0x4b4>
 800f460:	4b71      	ldr	r3, [pc, #452]	; (800f628 <run_shortest+0x620>)
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	3301      	adds	r3, #1
 800f466:	4a71      	ldr	r2, [pc, #452]	; (800f62c <run_shortest+0x624>)
 800f468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46c:	f113 0f03 	cmn.w	r3, #3
 800f470:	d124      	bne.n	800f4bc <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f472:	4b6d      	ldr	r3, [pc, #436]	; (800f628 <run_shortest+0x620>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	3b01      	subs	r3, #1
 800f478:	4a6c      	ldr	r2, [pc, #432]	; (800f62c <run_shortest+0x624>)
 800f47a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f47e:	4b6a      	ldr	r3, [pc, #424]	; (800f628 <run_shortest+0x620>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	3b01      	subs	r3, #1
 800f484:	3a01      	subs	r2, #1
 800f486:	4969      	ldr	r1, [pc, #420]	; (800f62c <run_shortest+0x624>)
 800f488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f48c:	4b66      	ldr	r3, [pc, #408]	; (800f628 <run_shortest+0x620>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	3b01      	subs	r3, #1
 800f492:	4a66      	ldr	r2, [pc, #408]	; (800f62c <run_shortest+0x624>)
 800f494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d107      	bne.n	800f4ac <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f49c:	4b62      	ldr	r3, [pc, #392]	; (800f628 <run_shortest+0x620>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	4a62      	ldr	r2, [pc, #392]	; (800f62c <run_shortest+0x624>)
 800f4a4:	f04f 31ff 	mov.w	r1, #4294967295
 800f4a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f4ac:	4b5e      	ldr	r3, [pc, #376]	; (800f628 <run_shortest+0x620>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4b5e      	ldr	r3, [pc, #376]	; (800f62c <run_shortest+0x624>)
 800f4b4:	f06f 0207 	mvn.w	r2, #7
 800f4b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f4bc:	4b5a      	ldr	r3, [pc, #360]	; (800f628 <run_shortest+0x620>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	4b5a      	ldr	r3, [pc, #360]	; (800f62c <run_shortest+0x624>)
 800f4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4c8:	f113 0f03 	cmn.w	r3, #3
 800f4cc:	d12d      	bne.n	800f52a <run_shortest+0x522>
 800f4ce:	4b56      	ldr	r3, [pc, #344]	; (800f628 <run_shortest+0x620>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	4a55      	ldr	r2, [pc, #340]	; (800f62c <run_shortest+0x624>)
 800f4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4da:	f113 0f02 	cmn.w	r3, #2
 800f4de:	d124      	bne.n	800f52a <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f4e0:	4b51      	ldr	r3, [pc, #324]	; (800f628 <run_shortest+0x620>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	3b01      	subs	r3, #1
 800f4e6:	4a51      	ldr	r2, [pc, #324]	; (800f62c <run_shortest+0x624>)
 800f4e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4ec:	4b4e      	ldr	r3, [pc, #312]	; (800f628 <run_shortest+0x620>)
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	3a01      	subs	r2, #1
 800f4f4:	494d      	ldr	r1, [pc, #308]	; (800f62c <run_shortest+0x624>)
 800f4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f4fa:	4b4b      	ldr	r3, [pc, #300]	; (800f628 <run_shortest+0x620>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	3b01      	subs	r3, #1
 800f500:	4a4a      	ldr	r2, [pc, #296]	; (800f62c <run_shortest+0x624>)
 800f502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d107      	bne.n	800f51a <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f50a:	4b47      	ldr	r3, [pc, #284]	; (800f628 <run_shortest+0x620>)
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	3b01      	subs	r3, #1
 800f510:	4a46      	ldr	r2, [pc, #280]	; (800f62c <run_shortest+0x624>)
 800f512:	f04f 31ff 	mov.w	r1, #4294967295
 800f516:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f51a:	4b43      	ldr	r3, [pc, #268]	; (800f628 <run_shortest+0x620>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	4619      	mov	r1, r3
 800f520:	4b42      	ldr	r3, [pc, #264]	; (800f62c <run_shortest+0x624>)
 800f522:	f06f 0208 	mvn.w	r2, #8
 800f526:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f52a:	4b3f      	ldr	r3, [pc, #252]	; (800f628 <run_shortest+0x620>)
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	461a      	mov	r2, r3
 800f530:	4b3e      	ldr	r3, [pc, #248]	; (800f62c <run_shortest+0x624>)
 800f532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f536:	f113 0f02 	cmn.w	r3, #2
 800f53a:	d135      	bne.n	800f5a8 <run_shortest+0x5a0>
 800f53c:	4b3a      	ldr	r3, [pc, #232]	; (800f628 <run_shortest+0x620>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	3301      	adds	r3, #1
 800f542:	4a3a      	ldr	r2, [pc, #232]	; (800f62c <run_shortest+0x624>)
 800f544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f548:	f113 0f02 	cmn.w	r3, #2
 800f54c:	d12c      	bne.n	800f5a8 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f54e:	4b36      	ldr	r3, [pc, #216]	; (800f628 <run_shortest+0x620>)
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	3b01      	subs	r3, #1
 800f554:	4a35      	ldr	r2, [pc, #212]	; (800f62c <run_shortest+0x624>)
 800f556:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f55a:	4b33      	ldr	r3, [pc, #204]	; (800f628 <run_shortest+0x620>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	3b01      	subs	r3, #1
 800f560:	3a01      	subs	r2, #1
 800f562:	4932      	ldr	r1, [pc, #200]	; (800f62c <run_shortest+0x624>)
 800f564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f568:	4b2f      	ldr	r3, [pc, #188]	; (800f628 <run_shortest+0x620>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	3b01      	subs	r3, #1
 800f56e:	4a2f      	ldr	r2, [pc, #188]	; (800f62c <run_shortest+0x624>)
 800f570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d107      	bne.n	800f588 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f578:	4b2b      	ldr	r3, [pc, #172]	; (800f628 <run_shortest+0x620>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	3b01      	subs	r3, #1
 800f57e:	4a2b      	ldr	r2, [pc, #172]	; (800f62c <run_shortest+0x624>)
 800f580:	f04f 31ff 	mov.w	r1, #4294967295
 800f584:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f588:	4b27      	ldr	r3, [pc, #156]	; (800f628 <run_shortest+0x620>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	4619      	mov	r1, r3
 800f58e:	4b27      	ldr	r3, [pc, #156]	; (800f62c <run_shortest+0x624>)
 800f590:	f06f 0209 	mvn.w	r2, #9
 800f594:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f598:	4b23      	ldr	r3, [pc, #140]	; (800f628 <run_shortest+0x620>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	3301      	adds	r3, #1
 800f59e:	4a23      	ldr	r2, [pc, #140]	; (800f62c <run_shortest+0x624>)
 800f5a0:	f04f 31ff 	mov.w	r1, #4294967295
 800f5a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f5a8:	4b1f      	ldr	r3, [pc, #124]	; (800f628 <run_shortest+0x620>)
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	4b1f      	ldr	r3, [pc, #124]	; (800f62c <run_shortest+0x624>)
 800f5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b4:	f113 0f03 	cmn.w	r3, #3
 800f5b8:	d140      	bne.n	800f63c <run_shortest+0x634>
 800f5ba:	4b1b      	ldr	r3, [pc, #108]	; (800f628 <run_shortest+0x620>)
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	4a1a      	ldr	r2, [pc, #104]	; (800f62c <run_shortest+0x624>)
 800f5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5c6:	f113 0f03 	cmn.w	r3, #3
 800f5ca:	d137      	bne.n	800f63c <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f5cc:	4b16      	ldr	r3, [pc, #88]	; (800f628 <run_shortest+0x620>)
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	4a16      	ldr	r2, [pc, #88]	; (800f62c <run_shortest+0x624>)
 800f5d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f5d8:	4b13      	ldr	r3, [pc, #76]	; (800f628 <run_shortest+0x620>)
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	3a01      	subs	r2, #1
 800f5e0:	4912      	ldr	r1, [pc, #72]	; (800f62c <run_shortest+0x624>)
 800f5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f5e6:	4b10      	ldr	r3, [pc, #64]	; (800f628 <run_shortest+0x620>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	4a0f      	ldr	r2, [pc, #60]	; (800f62c <run_shortest+0x624>)
 800f5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d107      	bne.n	800f606 <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f5f6:	4b0c      	ldr	r3, [pc, #48]	; (800f628 <run_shortest+0x620>)
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	4a0b      	ldr	r2, [pc, #44]	; (800f62c <run_shortest+0x624>)
 800f5fe:	f04f 31ff 	mov.w	r1, #4294967295
 800f602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f606:	4b08      	ldr	r3, [pc, #32]	; (800f628 <run_shortest+0x620>)
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	4619      	mov	r1, r3
 800f60c:	4b07      	ldr	r3, [pc, #28]	; (800f62c <run_shortest+0x624>)
 800f60e:	f06f 020a 	mvn.w	r2, #10
 800f612:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f616:	4b04      	ldr	r3, [pc, #16]	; (800f628 <run_shortest+0x620>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	3301      	adds	r3, #1
 800f61c:	4a03      	ldr	r2, [pc, #12]	; (800f62c <run_shortest+0x624>)
 800f61e:	f04f 31ff 	mov.w	r1, #4294967295
 800f622:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f626:	e009      	b.n	800f63c <run_shortest+0x634>
 800f628:	20000828 	.word	0x20000828
 800f62c:	2000083c 	.word	0x2000083c
						pass_count++;
 800f630:	4b6f      	ldr	r3, [pc, #444]	; (800f7f0 <run_shortest+0x7e8>)
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	3301      	adds	r3, #1
 800f636:	b2da      	uxtb	r2, r3
 800f638:	4b6d      	ldr	r3, [pc, #436]	; (800f7f0 <run_shortest+0x7e8>)
 800f63a:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f63c:	4b6c      	ldr	r3, [pc, #432]	; (800f7f0 <run_shortest+0x7e8>)
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	461a      	mov	r2, r3
 800f642:	4b6c      	ldr	r3, [pc, #432]	; (800f7f4 <run_shortest+0x7ec>)
 800f644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dbf1      	blt.n	800f630 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f64c:	4b68      	ldr	r3, [pc, #416]	; (800f7f0 <run_shortest+0x7e8>)
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	3b01      	subs	r3, #1
 800f652:	4a68      	ldr	r2, [pc, #416]	; (800f7f4 <run_shortest+0x7ec>)
 800f654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f658:	f113 0f02 	cmn.w	r3, #2
 800f65c:	d15b      	bne.n	800f716 <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f65e:	4b64      	ldr	r3, [pc, #400]	; (800f7f0 <run_shortest+0x7e8>)
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	3b02      	subs	r3, #2
 800f664:	4a63      	ldr	r2, [pc, #396]	; (800f7f4 <run_shortest+0x7ec>)
 800f666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f66a:	f113 0f02 	cmn.w	r3, #2
 800f66e:	d12d      	bne.n	800f6cc <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f670:	4b5f      	ldr	r3, [pc, #380]	; (800f7f0 <run_shortest+0x7e8>)
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	461a      	mov	r2, r3
 800f676:	4b5f      	ldr	r3, [pc, #380]	; (800f7f4 <run_shortest+0x7ec>)
 800f678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67c:	4a5c      	ldr	r2, [pc, #368]	; (800f7f0 <run_shortest+0x7e8>)
 800f67e:	7812      	ldrb	r2, [r2, #0]
 800f680:	4611      	mov	r1, r2
 800f682:	3b01      	subs	r3, #1
 800f684:	4a5b      	ldr	r2, [pc, #364]	; (800f7f4 <run_shortest+0x7ec>)
 800f686:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f68a:	4b59      	ldr	r3, [pc, #356]	; (800f7f0 <run_shortest+0x7e8>)
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	461a      	mov	r2, r3
 800f690:	4b58      	ldr	r3, [pc, #352]	; (800f7f4 <run_shortest+0x7ec>)
 800f692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d107      	bne.n	800f6aa <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f69a:	4b55      	ldr	r3, [pc, #340]	; (800f7f0 <run_shortest+0x7e8>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	4b54      	ldr	r3, [pc, #336]	; (800f7f4 <run_shortest+0x7ec>)
 800f6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f6aa:	4b51      	ldr	r3, [pc, #324]	; (800f7f0 <run_shortest+0x7e8>)
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	4a50      	ldr	r2, [pc, #320]	; (800f7f4 <run_shortest+0x7ec>)
 800f6b2:	f06f 010d 	mvn.w	r1, #13
 800f6b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f6ba:	4b4d      	ldr	r3, [pc, #308]	; (800f7f0 <run_shortest+0x7e8>)
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	3b02      	subs	r3, #2
 800f6c0:	4a4c      	ldr	r2, [pc, #304]	; (800f7f4 <run_shortest+0x7ec>)
 800f6c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f6c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f6ca:	e024      	b.n	800f716 <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f6cc:	4b48      	ldr	r3, [pc, #288]	; (800f7f0 <run_shortest+0x7e8>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	4b48      	ldr	r3, [pc, #288]	; (800f7f4 <run_shortest+0x7ec>)
 800f6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6d8:	4a45      	ldr	r2, [pc, #276]	; (800f7f0 <run_shortest+0x7e8>)
 800f6da:	7812      	ldrb	r2, [r2, #0]
 800f6dc:	4611      	mov	r1, r2
 800f6de:	3b01      	subs	r3, #1
 800f6e0:	4a44      	ldr	r2, [pc, #272]	; (800f7f4 <run_shortest+0x7ec>)
 800f6e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f6e6:	4b42      	ldr	r3, [pc, #264]	; (800f7f0 <run_shortest+0x7e8>)
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	4b41      	ldr	r3, [pc, #260]	; (800f7f4 <run_shortest+0x7ec>)
 800f6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d107      	bne.n	800f706 <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f6f6:	4b3e      	ldr	r3, [pc, #248]	; (800f7f0 <run_shortest+0x7e8>)
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	4b3d      	ldr	r3, [pc, #244]	; (800f7f4 <run_shortest+0x7ec>)
 800f6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f702:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f706:	4b3a      	ldr	r3, [pc, #232]	; (800f7f0 <run_shortest+0x7e8>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	3b01      	subs	r3, #1
 800f70c:	4a39      	ldr	r2, [pc, #228]	; (800f7f4 <run_shortest+0x7ec>)
 800f70e:	f06f 010b 	mvn.w	r1, #11
 800f712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f716:	4b36      	ldr	r3, [pc, #216]	; (800f7f0 <run_shortest+0x7e8>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	4a35      	ldr	r2, [pc, #212]	; (800f7f4 <run_shortest+0x7ec>)
 800f71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f722:	f113 0f03 	cmn.w	r3, #3
 800f726:	d15b      	bne.n	800f7e0 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f728:	4b31      	ldr	r3, [pc, #196]	; (800f7f0 <run_shortest+0x7e8>)
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	3b02      	subs	r3, #2
 800f72e:	4a31      	ldr	r2, [pc, #196]	; (800f7f4 <run_shortest+0x7ec>)
 800f730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f734:	f113 0f03 	cmn.w	r3, #3
 800f738:	d12d      	bne.n	800f796 <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f73a:	4b2d      	ldr	r3, [pc, #180]	; (800f7f0 <run_shortest+0x7e8>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	4b2c      	ldr	r3, [pc, #176]	; (800f7f4 <run_shortest+0x7ec>)
 800f742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f746:	4a2a      	ldr	r2, [pc, #168]	; (800f7f0 <run_shortest+0x7e8>)
 800f748:	7812      	ldrb	r2, [r2, #0]
 800f74a:	4611      	mov	r1, r2
 800f74c:	3b01      	subs	r3, #1
 800f74e:	4a29      	ldr	r2, [pc, #164]	; (800f7f4 <run_shortest+0x7ec>)
 800f750:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f754:	4b26      	ldr	r3, [pc, #152]	; (800f7f0 <run_shortest+0x7e8>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	461a      	mov	r2, r3
 800f75a:	4b26      	ldr	r3, [pc, #152]	; (800f7f4 <run_shortest+0x7ec>)
 800f75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d107      	bne.n	800f774 <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f764:	4b22      	ldr	r3, [pc, #136]	; (800f7f0 <run_shortest+0x7e8>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	4619      	mov	r1, r3
 800f76a:	4b22      	ldr	r3, [pc, #136]	; (800f7f4 <run_shortest+0x7ec>)
 800f76c:	f04f 32ff 	mov.w	r2, #4294967295
 800f770:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f774:	4b1e      	ldr	r3, [pc, #120]	; (800f7f0 <run_shortest+0x7e8>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	3b01      	subs	r3, #1
 800f77a:	4a1e      	ldr	r2, [pc, #120]	; (800f7f4 <run_shortest+0x7ec>)
 800f77c:	f06f 010e 	mvn.w	r1, #14
 800f780:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f784:	4b1a      	ldr	r3, [pc, #104]	; (800f7f0 <run_shortest+0x7e8>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	3b02      	subs	r3, #2
 800f78a:	4a1a      	ldr	r2, [pc, #104]	; (800f7f4 <run_shortest+0x7ec>)
 800f78c:	f04f 31ff 	mov.w	r1, #4294967295
 800f790:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f794:	e024      	b.n	800f7e0 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f796:	4b16      	ldr	r3, [pc, #88]	; (800f7f0 <run_shortest+0x7e8>)
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	4b15      	ldr	r3, [pc, #84]	; (800f7f4 <run_shortest+0x7ec>)
 800f79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7a2:	4a13      	ldr	r2, [pc, #76]	; (800f7f0 <run_shortest+0x7e8>)
 800f7a4:	7812      	ldrb	r2, [r2, #0]
 800f7a6:	4611      	mov	r1, r2
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	4a12      	ldr	r2, [pc, #72]	; (800f7f4 <run_shortest+0x7ec>)
 800f7ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f7b0:	4b0f      	ldr	r3, [pc, #60]	; (800f7f0 <run_shortest+0x7e8>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	4b0f      	ldr	r3, [pc, #60]	; (800f7f4 <run_shortest+0x7ec>)
 800f7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d107      	bne.n	800f7d0 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f7c0:	4b0b      	ldr	r3, [pc, #44]	; (800f7f0 <run_shortest+0x7e8>)
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4b0b      	ldr	r3, [pc, #44]	; (800f7f4 <run_shortest+0x7ec>)
 800f7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f7cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f7d0:	4b07      	ldr	r3, [pc, #28]	; (800f7f0 <run_shortest+0x7e8>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	4a07      	ldr	r2, [pc, #28]	; (800f7f4 <run_shortest+0x7ec>)
 800f7d8:	f06f 010c 	mvn.w	r1, #12
 800f7dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f7e0:	4b03      	ldr	r3, [pc, #12]	; (800f7f0 <run_shortest+0x7e8>)
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	4b01      	ldr	r3, [pc, #4]	; (800f7f0 <run_shortest+0x7e8>)
 800f7ea:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f7ec:	e60a      	b.n	800f404 <run_shortest+0x3fc>
 800f7ee:	bf00      	nop
 800f7f0:	20000828 	.word	0x20000828
 800f7f4:	2000083c 	.word	0x2000083c
				break;
 800f7f8:	bf00      	nop
		}

		pass_count = 1;
 800f7fa:	4ba3      	ldr	r3, [pc, #652]	; (800fa88 <run_shortest+0xa80>)
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f800:	4ba1      	ldr	r3, [pc, #644]	; (800fa88 <run_shortest+0xa80>)
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	461a      	mov	r2, r3
 800f806:	4ba1      	ldr	r3, [pc, #644]	; (800fa8c <run_shortest+0xa84>)
 800f808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f000 813f 	beq.w	800fa90 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f812:	4b9d      	ldr	r3, [pc, #628]	; (800fa88 <run_shortest+0xa80>)
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	4b9c      	ldr	r3, [pc, #624]	; (800fa8c <run_shortest+0xa84>)
 800f81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81e:	f113 0f08 	cmn.w	r3, #8
 800f822:	d01b      	beq.n	800f85c <run_shortest+0x854>
 800f824:	4b98      	ldr	r3, [pc, #608]	; (800fa88 <run_shortest+0xa80>)
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	4b98      	ldr	r3, [pc, #608]	; (800fa8c <run_shortest+0xa84>)
 800f82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f830:	f113 0f09 	cmn.w	r3, #9
 800f834:	d012      	beq.n	800f85c <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f836:	4b94      	ldr	r3, [pc, #592]	; (800fa88 <run_shortest+0xa80>)
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	461a      	mov	r2, r3
 800f83c:	4b93      	ldr	r3, [pc, #588]	; (800fa8c <run_shortest+0xa84>)
 800f83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f842:	f113 0f0a 	cmn.w	r3, #10
 800f846:	d009      	beq.n	800f85c <run_shortest+0x854>
 800f848:	4b8f      	ldr	r3, [pc, #572]	; (800fa88 <run_shortest+0xa80>)
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	4b8f      	ldr	r3, [pc, #572]	; (800fa8c <run_shortest+0xa84>)
 800f850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f854:	f113 0f0b 	cmn.w	r3, #11
 800f858:	f040 810f 	bne.w	800fa7a <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f85c:	4b8a      	ldr	r3, [pc, #552]	; (800fa88 <run_shortest+0xa80>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	461a      	mov	r2, r3
 800f862:	4b8a      	ldr	r3, [pc, #552]	; (800fa8c <run_shortest+0xa84>)
 800f864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f868:	f113 0f08 	cmn.w	r3, #8
 800f86c:	d008      	beq.n	800f880 <run_shortest+0x878>
 800f86e:	4b86      	ldr	r3, [pc, #536]	; (800fa88 <run_shortest+0xa80>)
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	461a      	mov	r2, r3
 800f874:	4b85      	ldr	r3, [pc, #532]	; (800fa8c <run_shortest+0xa84>)
 800f876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f87a:	f113 0f0a 	cmn.w	r3, #10
 800f87e:	d102      	bne.n	800f886 <run_shortest+0x87e>
					slant_direction = -3;
 800f880:	f06f 0302 	mvn.w	r3, #2
 800f884:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f886:	4b80      	ldr	r3, [pc, #512]	; (800fa88 <run_shortest+0xa80>)
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	461a      	mov	r2, r3
 800f88c:	4b7f      	ldr	r3, [pc, #508]	; (800fa8c <run_shortest+0xa84>)
 800f88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f892:	f113 0f09 	cmn.w	r3, #9
 800f896:	d008      	beq.n	800f8aa <run_shortest+0x8a2>
 800f898:	4b7b      	ldr	r3, [pc, #492]	; (800fa88 <run_shortest+0xa80>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	461a      	mov	r2, r3
 800f89e:	4b7b      	ldr	r3, [pc, #492]	; (800fa8c <run_shortest+0xa84>)
 800f8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a4:	f113 0f0b 	cmn.w	r3, #11
 800f8a8:	d102      	bne.n	800f8b0 <run_shortest+0x8a8>
					slant_direction = -2;
 800f8aa:	f06f 0301 	mvn.w	r3, #1
 800f8ae:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f8b0:	4b75      	ldr	r3, [pc, #468]	; (800fa88 <run_shortest+0xa80>)
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	4b73      	ldr	r3, [pc, #460]	; (800fa88 <run_shortest+0xa80>)
 800f8ba:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f8bc:	4b72      	ldr	r3, [pc, #456]	; (800fa88 <run_shortest+0xa80>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	4b72      	ldr	r3, [pc, #456]	; (800fa8c <run_shortest+0xa84>)
 800f8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8cc:	d105      	bne.n	800f8da <run_shortest+0x8d2>
					pass_count++;
 800f8ce:	4b6e      	ldr	r3, [pc, #440]	; (800fa88 <run_shortest+0xa80>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	4b6c      	ldr	r3, [pc, #432]	; (800fa88 <run_shortest+0xa80>)
 800f8d8:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f8da:	4b6b      	ldr	r3, [pc, #428]	; (800fa88 <run_shortest+0xa80>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	4b6a      	ldr	r3, [pc, #424]	; (800fa8c <run_shortest+0xa84>)
 800f8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ea:	d105      	bne.n	800f8f8 <run_shortest+0x8f0>
					pass_count++;
 800f8ec:	4b66      	ldr	r3, [pc, #408]	; (800fa88 <run_shortest+0xa80>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	4b64      	ldr	r3, [pc, #400]	; (800fa88 <run_shortest+0xa80>)
 800f8f6:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800f8f8:	4b63      	ldr	r3, [pc, #396]	; (800fa88 <run_shortest+0xa80>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	4b63      	ldr	r3, [pc, #396]	; (800fa8c <run_shortest+0xa84>)
 800f900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f904:	f113 0f03 	cmn.w	r3, #3
 800f908:	f2c0 80ad 	blt.w	800fa66 <run_shortest+0xa5e>
					slant_count = pass_count;
 800f90c:	4b5e      	ldr	r3, [pc, #376]	; (800fa88 <run_shortest+0xa80>)
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800f914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f918:	4a5c      	ldr	r2, [pc, #368]	; (800fa8c <run_shortest+0xa84>)
 800f91a:	2133      	movs	r1, #51	; 0x33
 800f91c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800f920:	4b59      	ldr	r3, [pc, #356]	; (800fa88 <run_shortest+0xa80>)
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	3301      	adds	r3, #1
 800f926:	b2da      	uxtb	r2, r3
 800f928:	4b57      	ldr	r3, [pc, #348]	; (800fa88 <run_shortest+0xa80>)
 800f92a:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800f92c:	e09b      	b.n	800fa66 <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f92e:	4b56      	ldr	r3, [pc, #344]	; (800fa88 <run_shortest+0xa80>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	4b55      	ldr	r3, [pc, #340]	; (800fa8c <run_shortest+0xa84>)
 800f936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93e:	d105      	bne.n	800f94c <run_shortest+0x944>
						pass_count++;
 800f940:	4b51      	ldr	r3, [pc, #324]	; (800fa88 <run_shortest+0xa80>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	3301      	adds	r3, #1
 800f946:	b2da      	uxtb	r2, r3
 800f948:	4b4f      	ldr	r3, [pc, #316]	; (800fa88 <run_shortest+0xa80>)
 800f94a:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800f94c:	4b4e      	ldr	r3, [pc, #312]	; (800fa88 <run_shortest+0xa80>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	461a      	mov	r2, r3
 800f952:	4b4e      	ldr	r3, [pc, #312]	; (800fa8c <run_shortest+0xa84>)
 800f954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f958:	f113 0f0c 	cmn.w	r3, #12
 800f95c:	f000 808d 	beq.w	800fa7a <run_shortest+0xa72>
 800f960:	4b49      	ldr	r3, [pc, #292]	; (800fa88 <run_shortest+0xa80>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	461a      	mov	r2, r3
 800f966:	4b49      	ldr	r3, [pc, #292]	; (800fa8c <run_shortest+0xa84>)
 800f968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f96c:	f113 0f0d 	cmn.w	r3, #13
 800f970:	f000 8083 	beq.w	800fa7a <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800f974:	4b44      	ldr	r3, [pc, #272]	; (800fa88 <run_shortest+0xa80>)
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	461a      	mov	r2, r3
 800f97a:	4b44      	ldr	r3, [pc, #272]	; (800fa8c <run_shortest+0xa84>)
 800f97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f980:	f113 0f0e 	cmn.w	r3, #14
 800f984:	d079      	beq.n	800fa7a <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800f986:	4b40      	ldr	r3, [pc, #256]	; (800fa88 <run_shortest+0xa80>)
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	461a      	mov	r2, r3
 800f98c:	4b3f      	ldr	r3, [pc, #252]	; (800fa8c <run_shortest+0xa84>)
 800f98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f992:	f113 0f0f 	cmn.w	r3, #15
 800f996:	d070      	beq.n	800fa7a <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800f998:	4b3b      	ldr	r3, [pc, #236]	; (800fa88 <run_shortest+0xa80>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	461a      	mov	r2, r3
 800f99e:	4b3b      	ldr	r3, [pc, #236]	; (800fa8c <run_shortest+0xa84>)
 800f9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d127      	bne.n	800f9fa <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800f9aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9ae:	4a37      	ldr	r2, [pc, #220]	; (800fa8c <run_shortest+0xa84>)
 800f9b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f9b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9b8:	3a01      	subs	r2, #1
 800f9ba:	4934      	ldr	r1, [pc, #208]	; (800fa8c <run_shortest+0xa84>)
 800f9bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800f9c0:	4b31      	ldr	r3, [pc, #196]	; (800fa88 <run_shortest+0xa80>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	f113 0f02 	cmn.w	r3, #2
 800f9ce:	d107      	bne.n	800f9e0 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800f9d0:	4b2d      	ldr	r3, [pc, #180]	; (800fa88 <run_shortest+0xa80>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	4b2d      	ldr	r3, [pc, #180]	; (800fa8c <run_shortest+0xa84>)
 800f9d8:	f06f 020f 	mvn.w	r2, #15
 800f9dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	f113 0f03 	cmn.w	r3, #3
 800f9e6:	d138      	bne.n	800fa5a <run_shortest+0xa52>
							pass[pass_count] = -17;
 800f9e8:	4b27      	ldr	r3, [pc, #156]	; (800fa88 <run_shortest+0xa80>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4b27      	ldr	r3, [pc, #156]	; (800fa8c <run_shortest+0xa84>)
 800f9f0:	f06f 0210 	mvn.w	r2, #16
 800f9f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f9f8:	e02f      	b.n	800fa5a <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800f9fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9fe:	4a23      	ldr	r2, [pc, #140]	; (800fa8c <run_shortest+0xa84>)
 800fa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa04:	2b31      	cmp	r3, #49	; 0x31
 800fa06:	dd08      	ble.n	800fa1a <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fa08:	4b1f      	ldr	r3, [pc, #124]	; (800fa88 <run_shortest+0xa80>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	4b1f      	ldr	r3, [pc, #124]	; (800fa8c <run_shortest+0xa84>)
 800fa10:	f04f 32ff 	mov.w	r2, #4294967295
 800fa14:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fa18:	e009      	b.n	800fa2e <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fa1a:	4b1b      	ldr	r3, [pc, #108]	; (800fa88 <run_shortest+0xa80>)
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fa22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa26:	4a19      	ldr	r2, [pc, #100]	; (800fa8c <run_shortest+0xa84>)
 800fa28:	2132      	movs	r1, #50	; 0x32
 800fa2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fa2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa32:	4a16      	ldr	r2, [pc, #88]	; (800fa8c <run_shortest+0xa84>)
 800fa34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa3c:	3201      	adds	r2, #1
 800fa3e:	4913      	ldr	r1, [pc, #76]	; (800fa8c <run_shortest+0xa84>)
 800fa40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa46:	f113 0f02 	cmn.w	r3, #2
 800fa4a:	d103      	bne.n	800fa54 <run_shortest+0xa4c>
							slant_direction = -3;
 800fa4c:	f06f 0302 	mvn.w	r3, #2
 800fa50:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa52:	e002      	b.n	800fa5a <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fa54:	f06f 0301 	mvn.w	r3, #1
 800fa58:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fa5a:	4b0b      	ldr	r3, [pc, #44]	; (800fa88 <run_shortest+0xa80>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	b2da      	uxtb	r2, r3
 800fa62:	4b09      	ldr	r3, [pc, #36]	; (800fa88 <run_shortest+0xa80>)
 800fa64:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fa66:	4b08      	ldr	r3, [pc, #32]	; (800fa88 <run_shortest+0xa80>)
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	4b07      	ldr	r3, [pc, #28]	; (800fa8c <run_shortest+0xa84>)
 800fa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa72:	f113 0f03 	cmn.w	r3, #3
 800fa76:	f6bf af5a 	bge.w	800f92e <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fa7a:	4b03      	ldr	r3, [pc, #12]	; (800fa88 <run_shortest+0xa80>)
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	4b01      	ldr	r3, [pc, #4]	; (800fa88 <run_shortest+0xa80>)
 800fa84:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fa86:	e6bb      	b.n	800f800 <run_shortest+0x7f8>
 800fa88:	20000828 	.word	0x20000828
 800fa8c:	2000083c 	.word	0x2000083c
				break;
 800fa90:	bf00      	nop
		}
		pass_count=0;
 800fa92:	4bb3      	ldr	r3, [pc, #716]	; (800fd60 <run_shortest+0xd58>)
 800fa94:	2200      	movs	r2, #0
 800fa96:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fa98:	4bb1      	ldr	r3, [pc, #708]	; (800fd60 <run_shortest+0xd58>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4bb1      	ldr	r3, [pc, #708]	; (800fd64 <run_shortest+0xd5c>)
 800faa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa4:	2b32      	cmp	r3, #50	; 0x32
 800faa6:	d107      	bne.n	800fab8 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800faa8:	4bad      	ldr	r3, [pc, #692]	; (800fd60 <run_shortest+0xd58>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	4619      	mov	r1, r3
 800faae:	4bad      	ldr	r3, [pc, #692]	; (800fd64 <run_shortest+0xd5c>)
 800fab0:	f04f 32ff 	mov.w	r2, #4294967295
 800fab4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fab8:	4ba9      	ldr	r3, [pc, #676]	; (800fd60 <run_shortest+0xd58>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	461a      	mov	r2, r3
 800fabe:	4ba9      	ldr	r3, [pc, #676]	; (800fd64 <run_shortest+0xd5c>)
 800fac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d006      	beq.n	800fad6 <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fac8:	4ba5      	ldr	r3, [pc, #660]	; (800fd60 <run_shortest+0xd58>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	3301      	adds	r3, #1
 800face:	b2da      	uxtb	r2, r3
 800fad0:	4ba3      	ldr	r3, [pc, #652]	; (800fd60 <run_shortest+0xd58>)
 800fad2:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fad4:	e7e0      	b.n	800fa98 <run_shortest+0xa90>
				break;
 800fad6:	bf00      	nop
		}

	}
}
	int j = 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fadc:	e00b      	b.n	800faf6 <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fade:	4aa1      	ldr	r2, [pc, #644]	; (800fd64 <run_shortest+0xd5c>)
 800fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fae6:	461a      	mov	r2, r3
 800fae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faea:	489f      	ldr	r0, [pc, #636]	; (800fd68 <run_shortest+0xd60>)
 800faec:	f010 fdee 	bl	80206cc <iprintf>
		j++;
 800faf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf2:	3301      	adds	r3, #1
 800faf4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800faf6:	4a9b      	ldr	r2, [pc, #620]	; (800fd64 <run_shortest+0xd5c>)
 800faf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1ed      	bne.n	800fade <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fb06:	e002      	b.n	800fb0e <run_shortest+0xb06>
		pass_count2++;
 800fb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fb0e:	4a95      	ldr	r2, [pc, #596]	; (800fd64 <run_shortest+0xd5c>)
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1a:	d0f5      	beq.n	800fb08 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fb1c:	4a91      	ldr	r2, [pc, #580]	; (800fd64 <run_shortest+0xd5c>)
 800fb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb24:	934e      	str	r3, [sp, #312]	; 0x138
 800fb26:	4668      	mov	r0, sp
 800fb28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fb2c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fb30:	4619      	mov	r1, r3
 800fb32:	f010 f94b 	bl	801fdcc <memcpy>
 800fb36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fb3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb3c:	f007 feb2 	bl	80178a4 <get_center_velocity>
 800fb40:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fb44:	6a38      	ldr	r0, [r7, #32]
 800fb46:	f7f0 fd27 	bl	8000598 <__aeabi_f2d>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb50:	4886      	ldr	r0, [pc, #536]	; (800fd6c <run_shortest+0xd64>)
 800fb52:	f010 fdbb 	bl	80206cc <iprintf>

	HAL_Delay(500);
 800fb56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fb5a:	f008 fe65 	bl	8018828 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fb5e:	2001      	movs	r0, #1
 800fb60:	f7f7 fe6e 	bl	8007840 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fb64:	2003      	movs	r0, #3
 800fb66:	f7f7 fe9d 	bl	80078a4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fb6a:	2003      	movs	r0, #3
 800fb6c:	f7f7 fe72 	bl	8007854 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fb70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fb74:	f7f8 f994 	bl	8007ea0 <wait_ms_NoReset>
	no_safty = 1;
 800fb78:	4b7d      	ldr	r3, [pc, #500]	; (800fd70 <run_shortest+0xd68>)
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fb7e:	4b7c      	ldr	r3, [pc, #496]	; (800fd70 <run_shortest+0xd68>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fb84:	f7f4 fd0e 	bl	80045a4 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fb88:	7abb      	ldrb	r3, [r7, #10]
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d12d      	bne.n	800fbea <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7f0 fd02 	bl	8000598 <__aeabi_f2d>
 800fb94:	a370      	add	r3, pc, #448	; (adr r3, 800fd58 <run_shortest+0xd50>)
 800fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9a:	f7f0 fd55 	bl	8000648 <__aeabi_dmul>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	460b      	mov	r3, r1
 800fba2:	4614      	mov	r4, r2
 800fba4:	461d      	mov	r5, r3
 800fba6:	4b73      	ldr	r3, [pc, #460]	; (800fd74 <run_shortest+0xd6c>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7f0 fcf4 	bl	8000598 <__aeabi_f2d>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	f7f0 fe70 	bl	800089c <__aeabi_ddiv>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	4610      	mov	r0, r2
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	f7f1 f818 	bl	8000bf8 <__aeabi_d2f>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	ee00 3a10 	vmov	s0, r3
 800fbce:	f7f7 fed5 	bl	800797c <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fbd2:	f7f7 febf 	bl	8007954 <pl_FunMotor_start>
		HAL_Delay(600);
 800fbd6:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fbda:	f008 fe25 	bl	8018828 <HAL_Delay>
		reset_gyro();
 800fbde:	f7f1 fdc3 	bl	8001768 <reset_gyro>
		reset_speed();
 800fbe2:	f7f1 fa19 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fbe6:	f7f4 fcdd 	bl	80045a4 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fbea:	4b63      	ldr	r3, [pc, #396]	; (800fd78 <run_shortest+0xd70>)
 800fbec:	2201      	movs	r2, #1
 800fbee:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fbf0:	4b62      	ldr	r3, [pc, #392]	; (800fd7c <run_shortest+0xd74>)
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fbf6:	4b62      	ldr	r3, [pc, #392]	; (800fd80 <run_shortest+0xd78>)
 800fbf8:	2212      	movs	r2, #18
 800fbfa:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fbfc:	4b61      	ldr	r3, [pc, #388]	; (800fd84 <run_shortest+0xd7c>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fc02:	4b57      	ldr	r3, [pc, #348]	; (800fd60 <run_shortest+0xd58>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fc10:	2300      	movs	r3, #0
 800fc12:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc1c:	e002      	b.n	800fc24 <run_shortest+0xc1c>
		pass_count2++;
 800fc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc20:	3301      	adds	r3, #1
 800fc22:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc24:	4a4f      	ldr	r2, [pc, #316]	; (800fd64 <run_shortest+0xd5c>)
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc30:	d0f5      	beq.n	800fc1e <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fc32:	4a4c      	ldr	r2, [pc, #304]	; (800fd64 <run_shortest+0xd5c>)
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc3a:	934e      	str	r3, [sp, #312]	; 0x138
 800fc3c:	4668      	mov	r0, sp
 800fc3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc42:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fc46:	4619      	mov	r1, r3
 800fc48:	f010 f8c0 	bl	801fdcc <memcpy>
 800fc4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc52:	f007 fe27 	bl	80178a4 <get_center_velocity>
 800fc56:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fc5a:	edd7 7a08 	vldr	s15, [r7, #32]
 800fc5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fc62:	ee17 0a90 	vmov	r0, s15
 800fc66:	f7f0 fc97 	bl	8000598 <__aeabi_f2d>
 800fc6a:	f04f 0200 	mov.w	r2, #0
 800fc6e:	4b46      	ldr	r3, [pc, #280]	; (800fd88 <run_shortest+0xd80>)
 800fc70:	f7f0 fe14 	bl	800089c <__aeabi_ddiv>
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	4610      	mov	r0, r2
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	f04f 0200 	mov.w	r2, #0
 800fc80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc84:	f7f0 fe0a 	bl	800089c <__aeabi_ddiv>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	4619      	mov	r1, r3
 800fc90:	f7f0 ffb2 	bl	8000bf8 <__aeabi_d2f>
 800fc94:	4603      	mov	r3, r0
 800fc96:	69b8      	ldr	r0, [r7, #24]
 800fc98:	ee02 3a10 	vmov	s4, r3
 800fc9c:	edd7 1a08 	vldr	s3, [r7, #32]
 800fca0:	ed97 1a08 	vldr	s2, [r7, #32]
 800fca4:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fd8c <run_shortest+0xd84>
 800fca8:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fcac:	f7f3 f996 	bl	8002fdc <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fcb0:	4b2b      	ldr	r3, [pc, #172]	; (800fd60 <run_shortest+0xd58>)
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fcb8:	e002      	b.n	800fcc0 <run_shortest+0xcb8>
			pass_count2++;
 800fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fcc0:	4a28      	ldr	r2, [pc, #160]	; (800fd64 <run_shortest+0xd5c>)
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fccc:	d0f5      	beq.n	800fcba <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fcce:	4a25      	ldr	r2, [pc, #148]	; (800fd64 <run_shortest+0xd5c>)
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd6:	934e      	str	r3, [sp, #312]	; 0x138
 800fcd8:	4668      	mov	r0, sp
 800fcda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fcde:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fce2:	4619      	mov	r1, r3
 800fce4:	f010 f872 	bl	801fdcc <memcpy>
 800fce8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fcec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcee:	f007 fdd9 	bl	80178a4 <get_center_velocity>
 800fcf2:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fcf6:	4b1a      	ldr	r3, [pc, #104]	; (800fd60 <run_shortest+0xd58>)
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	4b19      	ldr	r3, [pc, #100]	; (800fd64 <run_shortest+0xd5c>)
 800fcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd06:	d106      	bne.n	800fd16 <run_shortest+0xd0e>
			pass_count++;
 800fd08:	4b15      	ldr	r3, [pc, #84]	; (800fd60 <run_shortest+0xd58>)
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	b2da      	uxtb	r2, r3
 800fd10:	4b13      	ldr	r3, [pc, #76]	; (800fd60 <run_shortest+0xd58>)
 800fd12:	701a      	strb	r2, [r3, #0]
 800fd14:	e2a1      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fd16:	4b12      	ldr	r3, [pc, #72]	; (800fd60 <run_shortest+0xd58>)
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <run_shortest+0xd5c>)
 800fd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd22:	f113 0f02 	cmn.w	r3, #2
 800fd26:	d133      	bne.n	800fd90 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fd28:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd2c:	9303      	str	r3, [sp, #12]
 800fd2e:	2301      	movs	r3, #1
 800fd30:	9302      	str	r3, [sp, #8]
 800fd32:	2300      	movs	r3, #0
 800fd34:	9301      	str	r3, [sp, #4]
 800fd36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fd3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd40:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd44:	f7fa f8d0 	bl	8009ee8 <slalomR>

			pass_count++;
 800fd48:	4b05      	ldr	r3, [pc, #20]	; (800fd60 <run_shortest+0xd58>)
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	4b03      	ldr	r3, [pc, #12]	; (800fd60 <run_shortest+0xd58>)
 800fd52:	701a      	strb	r2, [r3, #0]
 800fd54:	e281      	b.n	801025a <run_shortest+0x1252>
 800fd56:	bf00      	nop
 800fd58:	cccccccd 	.word	0xcccccccd
 800fd5c:	4010cccc 	.word	0x4010cccc
 800fd60:	20000828 	.word	0x20000828
 800fd64:	2000083c 	.word	0x2000083c
 800fd68:	08022fec 	.word	0x08022fec
 800fd6c:	08023004 	.word	0x08023004
 800fd70:	20000806 	.word	0x20000806
 800fd74:	200004d4 	.word	0x200004d4
 800fd78:	20000834 	.word	0x20000834
 800fd7c:	20000808 	.word	0x20000808
 800fd80:	2000edc0 	.word	0x2000edc0
 800fd84:	20000830 	.word	0x20000830
 800fd88:	40290000 	.word	0x40290000
 800fd8c:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fd90:	4baa      	ldr	r3, [pc, #680]	; (801003c <run_shortest+0x1034>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	461a      	mov	r2, r3
 800fd96:	4baa      	ldr	r3, [pc, #680]	; (8010040 <run_shortest+0x1038>)
 800fd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd9c:	f113 0f03 	cmn.w	r3, #3
 800fda0:	d116      	bne.n	800fdd0 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fda2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fda6:	9303      	str	r3, [sp, #12]
 800fda8:	2301      	movs	r3, #1
 800fdaa:	9302      	str	r3, [sp, #8]
 800fdac:	2300      	movs	r3, #0
 800fdae:	9301      	str	r3, [sp, #4]
 800fdb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fdb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdba:	ed97 0a08 	vldr	s0, [r7, #32]
 800fdbe:	f7fa fa4d 	bl	800a25c <slalomL>

			pass_count++;
 800fdc2:	4b9e      	ldr	r3, [pc, #632]	; (801003c <run_shortest+0x1034>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	b2da      	uxtb	r2, r3
 800fdca:	4b9c      	ldr	r3, [pc, #624]	; (801003c <run_shortest+0x1034>)
 800fdcc:	701a      	strb	r2, [r3, #0]
 800fdce:	e244      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800fdd0:	4b9a      	ldr	r3, [pc, #616]	; (801003c <run_shortest+0x1034>)
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	4b9a      	ldr	r3, [pc, #616]	; (8010040 <run_shortest+0x1038>)
 800fdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fddc:	f113 0f04 	cmn.w	r3, #4
 800fde0:	d115      	bne.n	800fe0e <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800fde2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fde6:	9302      	str	r3, [sp, #8]
 800fde8:	2300      	movs	r3, #0
 800fdea:	9301      	str	r3, [sp, #4]
 800fdec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800fdf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdf8:	ed97 0a08 	vldr	s0, [r7, #32]
 800fdfc:	f7fa fbe4 	bl	800a5c8 <turn90R>
			pass_count++;
 800fe00:	4b8e      	ldr	r3, [pc, #568]	; (801003c <run_shortest+0x1034>)
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	3301      	adds	r3, #1
 800fe06:	b2da      	uxtb	r2, r3
 800fe08:	4b8c      	ldr	r3, [pc, #560]	; (801003c <run_shortest+0x1034>)
 800fe0a:	701a      	strb	r2, [r3, #0]
 800fe0c:	e225      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800fe0e:	4b8b      	ldr	r3, [pc, #556]	; (801003c <run_shortest+0x1034>)
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	461a      	mov	r2, r3
 800fe14:	4b8a      	ldr	r3, [pc, #552]	; (8010040 <run_shortest+0x1038>)
 800fe16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe1a:	f113 0f05 	cmn.w	r3, #5
 800fe1e:	d115      	bne.n	800fe4c <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800fe20:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe24:	9302      	str	r3, [sp, #8]
 800fe26:	2300      	movs	r3, #0
 800fe28:	9301      	str	r3, [sp, #4]
 800fe2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fe34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe36:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe3a:	f7fa fd2f 	bl	800a89c <turn90L>
			pass_count++;
 800fe3e:	4b7f      	ldr	r3, [pc, #508]	; (801003c <run_shortest+0x1034>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	3301      	adds	r3, #1
 800fe44:	b2da      	uxtb	r2, r3
 800fe46:	4b7d      	ldr	r3, [pc, #500]	; (801003c <run_shortest+0x1034>)
 800fe48:	701a      	strb	r2, [r3, #0]
 800fe4a:	e206      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800fe4c:	4b7b      	ldr	r3, [pc, #492]	; (801003c <run_shortest+0x1034>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	461a      	mov	r2, r3
 800fe52:	4b7b      	ldr	r3, [pc, #492]	; (8010040 <run_shortest+0x1038>)
 800fe54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe58:	f113 0f06 	cmn.w	r3, #6
 800fe5c:	d115      	bne.n	800fe8a <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800fe5e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe62:	9302      	str	r3, [sp, #8]
 800fe64:	2300      	movs	r3, #0
 800fe66:	9301      	str	r3, [sp, #4]
 800fe68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fe72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe74:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe78:	f7fa fe74 	bl	800ab64 <turn180R>
			pass_count++;
 800fe7c:	4b6f      	ldr	r3, [pc, #444]	; (801003c <run_shortest+0x1034>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	3301      	adds	r3, #1
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	4b6d      	ldr	r3, [pc, #436]	; (801003c <run_shortest+0x1034>)
 800fe86:	701a      	strb	r2, [r3, #0]
 800fe88:	e1e7      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800fe8a:	4b6c      	ldr	r3, [pc, #432]	; (801003c <run_shortest+0x1034>)
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4b6b      	ldr	r3, [pc, #428]	; (8010040 <run_shortest+0x1038>)
 800fe92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe96:	f113 0f07 	cmn.w	r3, #7
 800fe9a:	d115      	bne.n	800fec8 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800fe9c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fea0:	9302      	str	r3, [sp, #8]
 800fea2:	2300      	movs	r3, #0
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800feb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800feb2:	ed97 0a08 	vldr	s0, [r7, #32]
 800feb6:	f7fa ffbf 	bl	800ae38 <turn180L>
			pass_count++;
 800feba:	4b60      	ldr	r3, [pc, #384]	; (801003c <run_shortest+0x1034>)
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	3301      	adds	r3, #1
 800fec0:	b2da      	uxtb	r2, r3
 800fec2:	4b5e      	ldr	r3, [pc, #376]	; (801003c <run_shortest+0x1034>)
 800fec4:	701a      	strb	r2, [r3, #0]
 800fec6:	e1c8      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 800fec8:	4b5c      	ldr	r3, [pc, #368]	; (801003c <run_shortest+0x1034>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	461a      	mov	r2, r3
 800fece:	4b5c      	ldr	r3, [pc, #368]	; (8010040 <run_shortest+0x1038>)
 800fed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed4:	f113 0f08 	cmn.w	r3, #8
 800fed8:	d115      	bne.n	800ff06 <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 800feda:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fede:	9302      	str	r3, [sp, #8]
 800fee0:	2300      	movs	r3, #0
 800fee2:	9301      	str	r3, [sp, #4]
 800fee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fee8:	9300      	str	r3, [sp, #0]
 800feea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800feee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fef0:	ed97 0a08 	vldr	s0, [r7, #32]
 800fef4:	f7fb f908 	bl	800b108 <turn45inR>
			pass_count++;
 800fef8:	4b50      	ldr	r3, [pc, #320]	; (801003c <run_shortest+0x1034>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	3301      	adds	r3, #1
 800fefe:	b2da      	uxtb	r2, r3
 800ff00:	4b4e      	ldr	r3, [pc, #312]	; (801003c <run_shortest+0x1034>)
 800ff02:	701a      	strb	r2, [r3, #0]
 800ff04:	e1a9      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 800ff06:	4b4d      	ldr	r3, [pc, #308]	; (801003c <run_shortest+0x1034>)
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	4b4c      	ldr	r3, [pc, #304]	; (8010040 <run_shortest+0x1038>)
 800ff0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff12:	f113 0f09 	cmn.w	r3, #9
 800ff16:	d115      	bne.n	800ff44 <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 800ff18:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff1c:	9302      	str	r3, [sp, #8]
 800ff1e:	2300      	movs	r3, #0
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff26:	9300      	str	r3, [sp, #0]
 800ff28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ff2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff2e:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff32:	f7fb fb31 	bl	800b598 <turn45inL>
			pass_count++;
 800ff36:	4b41      	ldr	r3, [pc, #260]	; (801003c <run_shortest+0x1034>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	4b3f      	ldr	r3, [pc, #252]	; (801003c <run_shortest+0x1034>)
 800ff40:	701a      	strb	r2, [r3, #0]
 800ff42:	e18a      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 800ff44:	4b3d      	ldr	r3, [pc, #244]	; (801003c <run_shortest+0x1034>)
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	4b3d      	ldr	r3, [pc, #244]	; (8010040 <run_shortest+0x1038>)
 800ff4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff50:	f113 0f0a 	cmn.w	r3, #10
 800ff54:	d115      	bne.n	800ff82 <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 800ff56:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff5a:	9302      	str	r3, [sp, #8]
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	9301      	str	r3, [sp, #4]
 800ff60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800ff6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff6c:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff70:	f7fb fd52 	bl	800ba18 <turn135inR>
			pass_count++;
 800ff74:	4b31      	ldr	r3, [pc, #196]	; (801003c <run_shortest+0x1034>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	4b2f      	ldr	r3, [pc, #188]	; (801003c <run_shortest+0x1034>)
 800ff7e:	701a      	strb	r2, [r3, #0]
 800ff80:	e16b      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 800ff82:	4b2e      	ldr	r3, [pc, #184]	; (801003c <run_shortest+0x1034>)
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	461a      	mov	r2, r3
 800ff88:	4b2d      	ldr	r3, [pc, #180]	; (8010040 <run_shortest+0x1038>)
 800ff8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff8e:	f113 0f0b 	cmn.w	r3, #11
 800ff92:	d115      	bne.n	800ffc0 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 800ff94:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff98:	9302      	str	r3, [sp, #8]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	9301      	str	r3, [sp, #4]
 800ff9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800ffa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffaa:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffae:	f7fb ff7b 	bl	800bea8 <turn135inL>
			pass_count++;
 800ffb2:	4b22      	ldr	r3, [pc, #136]	; (801003c <run_shortest+0x1034>)
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	b2da      	uxtb	r2, r3
 800ffba:	4b20      	ldr	r3, [pc, #128]	; (801003c <run_shortest+0x1034>)
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	e14c      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 800ffc0:	4b1e      	ldr	r3, [pc, #120]	; (801003c <run_shortest+0x1034>)
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	4b1e      	ldr	r3, [pc, #120]	; (8010040 <run_shortest+0x1038>)
 800ffc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffcc:	f113 0f0c 	cmn.w	r3, #12
 800ffd0:	d115      	bne.n	800fffe <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 800ffd2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffd6:	9302      	str	r3, [sp, #8]
 800ffd8:	2300      	movs	r3, #0
 800ffda:	9301      	str	r3, [sp, #4]
 800ffdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ffe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffe8:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffec:	f7fc f9a0 	bl	800c330 <turn45outR>
			pass_count++;
 800fff0:	4b12      	ldr	r3, [pc, #72]	; (801003c <run_shortest+0x1034>)
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	3301      	adds	r3, #1
 800fff6:	b2da      	uxtb	r2, r3
 800fff8:	4b10      	ldr	r3, [pc, #64]	; (801003c <run_shortest+0x1034>)
 800fffa:	701a      	strb	r2, [r3, #0]
 800fffc:	e12d      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 800fffe:	4b0f      	ldr	r3, [pc, #60]	; (801003c <run_shortest+0x1034>)
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	461a      	mov	r2, r3
 8010004:	4b0e      	ldr	r3, [pc, #56]	; (8010040 <run_shortest+0x1038>)
 8010006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801000a:	f113 0f0d 	cmn.w	r3, #13
 801000e:	d119      	bne.n	8010044 <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010010:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010014:	9302      	str	r3, [sp, #8]
 8010016:	2300      	movs	r3, #0
 8010018:	9301      	str	r3, [sp, #4]
 801001a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8010024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010026:	ed97 0a08 	vldr	s0, [r7, #32]
 801002a:	f7fc fb73 	bl	800c714 <turn45outL>
			pass_count++;
 801002e:	4b03      	ldr	r3, [pc, #12]	; (801003c <run_shortest+0x1034>)
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	3301      	adds	r3, #1
 8010034:	b2da      	uxtb	r2, r3
 8010036:	4b01      	ldr	r3, [pc, #4]	; (801003c <run_shortest+0x1034>)
 8010038:	701a      	strb	r2, [r3, #0]
 801003a:	e10e      	b.n	801025a <run_shortest+0x1252>
 801003c:	20000828 	.word	0x20000828
 8010040:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 8010044:	4ba0      	ldr	r3, [pc, #640]	; (80102c8 <run_shortest+0x12c0>)
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	461a      	mov	r2, r3
 801004a:	4ba0      	ldr	r3, [pc, #640]	; (80102cc <run_shortest+0x12c4>)
 801004c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010050:	f113 0f0e 	cmn.w	r3, #14
 8010054:	d115      	bne.n	8010082 <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 8010056:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801005a:	9302      	str	r3, [sp, #8]
 801005c:	2300      	movs	r3, #0
 801005e:	9301      	str	r3, [sp, #4]
 8010060:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8010064:	9300      	str	r3, [sp, #0]
 8010066:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801006a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801006c:	ed97 0a08 	vldr	s0, [r7, #32]
 8010070:	f7fc fd38 	bl	800cae4 <turn135outR>
			pass_count++;
 8010074:	4b94      	ldr	r3, [pc, #592]	; (80102c8 <run_shortest+0x12c0>)
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	3301      	adds	r3, #1
 801007a:	b2da      	uxtb	r2, r3
 801007c:	4b92      	ldr	r3, [pc, #584]	; (80102c8 <run_shortest+0x12c0>)
 801007e:	701a      	strb	r2, [r3, #0]
 8010080:	e0eb      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 8010082:	4b91      	ldr	r3, [pc, #580]	; (80102c8 <run_shortest+0x12c0>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	4b90      	ldr	r3, [pc, #576]	; (80102cc <run_shortest+0x12c4>)
 801008a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801008e:	f113 0f0f 	cmn.w	r3, #15
 8010092:	d115      	bne.n	80100c0 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 8010094:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010098:	9302      	str	r3, [sp, #8]
 801009a:	2300      	movs	r3, #0
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80100a2:	9300      	str	r3, [sp, #0]
 80100a4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80100a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100aa:	ed97 0a08 	vldr	s0, [r7, #32]
 80100ae:	f7fc ff0b 	bl	800cec8 <turn135outL>
			pass_count++;
 80100b2:	4b85      	ldr	r3, [pc, #532]	; (80102c8 <run_shortest+0x12c0>)
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	3301      	adds	r3, #1
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	4b83      	ldr	r3, [pc, #524]	; (80102c8 <run_shortest+0x12c0>)
 80100bc:	701a      	strb	r2, [r3, #0]
 80100be:	e0cc      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 80100c0:	4b81      	ldr	r3, [pc, #516]	; (80102c8 <run_shortest+0x12c0>)
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	461a      	mov	r2, r3
 80100c6:	4b81      	ldr	r3, [pc, #516]	; (80102cc <run_shortest+0x12c4>)
 80100c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100cc:	f113 0f10 	cmn.w	r3, #16
 80100d0:	d115      	bne.n	80100fe <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 80100d2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100d6:	9302      	str	r3, [sp, #8]
 80100d8:	2300      	movs	r3, #0
 80100da:	9301      	str	r3, [sp, #4]
 80100dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80100e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100e8:	ed97 0a08 	vldr	s0, [r7, #32]
 80100ec:	f7fd f8d8 	bl	800d2a0 <V90R>
			pass_count++;
 80100f0:	4b75      	ldr	r3, [pc, #468]	; (80102c8 <run_shortest+0x12c0>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	3301      	adds	r3, #1
 80100f6:	b2da      	uxtb	r2, r3
 80100f8:	4b73      	ldr	r3, [pc, #460]	; (80102c8 <run_shortest+0x12c0>)
 80100fa:	701a      	strb	r2, [r3, #0]
 80100fc:	e0ad      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 80100fe:	4b72      	ldr	r3, [pc, #456]	; (80102c8 <run_shortest+0x12c0>)
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	461a      	mov	r2, r3
 8010104:	4b71      	ldr	r3, [pc, #452]	; (80102cc <run_shortest+0x12c4>)
 8010106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010a:	f113 0f11 	cmn.w	r3, #17
 801010e:	d115      	bne.n	801013c <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010110:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010114:	9302      	str	r3, [sp, #8]
 8010116:	2300      	movs	r3, #0
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010126:	ed97 0a08 	vldr	s0, [r7, #32]
 801012a:	f7fd fac5 	bl	800d6b8 <V90L>
			pass_count++;
 801012e:	4b66      	ldr	r3, [pc, #408]	; (80102c8 <run_shortest+0x12c0>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	3301      	adds	r3, #1
 8010134:	b2da      	uxtb	r2, r3
 8010136:	4b64      	ldr	r3, [pc, #400]	; (80102c8 <run_shortest+0x12c0>)
 8010138:	701a      	strb	r2, [r3, #0]
 801013a:	e08e      	b.n	801025a <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 801013c:	4b62      	ldr	r3, [pc, #392]	; (80102c8 <run_shortest+0x12c0>)
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	461a      	mov	r2, r3
 8010142:	4b62      	ldr	r3, [pc, #392]	; (80102cc <run_shortest+0x12c4>)
 8010144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010148:	2b00      	cmp	r3, #0
 801014a:	f340 8086 	ble.w	801025a <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 801014e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010150:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 8010152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010154:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 8010156:	4b5c      	ldr	r3, [pc, #368]	; (80102c8 <run_shortest+0x12c0>)
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d013      	beq.n	8010186 <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 801015e:	4b5a      	ldr	r3, [pc, #360]	; (80102c8 <run_shortest+0x12c0>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	3b01      	subs	r3, #1
 8010164:	4a59      	ldr	r2, [pc, #356]	; (80102cc <run_shortest+0x12c4>)
 8010166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801016a:	f113 0f02 	cmn.w	r3, #2
 801016e:	d008      	beq.n	8010182 <run_shortest+0x117a>
 8010170:	4b55      	ldr	r3, [pc, #340]	; (80102c8 <run_shortest+0x12c0>)
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	3b01      	subs	r3, #1
 8010176:	4a55      	ldr	r2, [pc, #340]	; (80102cc <run_shortest+0x12c4>)
 8010178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801017c:	f113 0f03 	cmn.w	r3, #3
 8010180:	d101      	bne.n	8010186 <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 8010182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010184:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8010186:	4b50      	ldr	r3, [pc, #320]	; (80102c8 <run_shortest+0x12c0>)
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	3301      	adds	r3, #1
 801018c:	4a4f      	ldr	r2, [pc, #316]	; (80102cc <run_shortest+0x12c4>)
 801018e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010192:	f113 0f02 	cmn.w	r3, #2
 8010196:	d008      	beq.n	80101aa <run_shortest+0x11a2>
 8010198:	4b4b      	ldr	r3, [pc, #300]	; (80102c8 <run_shortest+0x12c0>)
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	3301      	adds	r3, #1
 801019e:	4a4b      	ldr	r2, [pc, #300]	; (80102cc <run_shortest+0x12c4>)
 80101a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101a4:	f113 0f03 	cmn.w	r3, #3
 80101a8:	d101      	bne.n	80101ae <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 80101aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ac:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 80101ae:	4b46      	ldr	r3, [pc, #280]	; (80102c8 <run_shortest+0x12c0>)
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	461a      	mov	r2, r3
 80101b4:	4b45      	ldr	r3, [pc, #276]	; (80102cc <run_shortest+0x12c4>)
 80101b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ba:	2b31      	cmp	r3, #49	; 0x31
 80101bc:	dd27      	ble.n	801020e <run_shortest+0x1206>
				mode.WallControlMode=3;
 80101be:	2303      	movs	r3, #3
 80101c0:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 80101c6:	4b40      	ldr	r3, [pc, #256]	; (80102c8 <run_shortest+0x12c0>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	461a      	mov	r2, r3
 80101cc:	4b3f      	ldr	r3, [pc, #252]	; (80102cc <run_shortest+0x12c4>)
 80101ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d2:	3b32      	subs	r3, #50	; 0x32
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f0 f9cd 	bl	8000574 <__aeabi_i2d>
 80101da:	a339      	add	r3, pc, #228	; (adr r3, 80102c0 <run_shortest+0x12b8>)
 80101dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e0:	f7f0 fa32 	bl	8000648 <__aeabi_dmul>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	4610      	mov	r0, r2
 80101ea:	4619      	mov	r1, r3
 80101ec:	f7f0 fd04 	bl	8000bf8 <__aeabi_d2f>
 80101f0:	4603      	mov	r3, r0
 80101f2:	69b8      	ldr	r0, [r7, #24]
 80101f4:	ed97 2a04 	vldr	s4, [r7, #16]
 80101f8:	edd7 1a05 	vldr	s3, [r7, #20]
 80101fc:	ed97 1a08 	vldr	s2, [r7, #32]
 8010200:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8010204:	ee00 3a10 	vmov	s0, r3
 8010208:	f7f2 fee8 	bl	8002fdc <straight_table2>
 801020c:	e01f      	b.n	801024e <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 801020e:	2301      	movs	r3, #1
 8010210:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 8010212:	2300      	movs	r3, #0
 8010214:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 8010216:	4b2c      	ldr	r3, [pc, #176]	; (80102c8 <run_shortest+0x12c0>)
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	4b2b      	ldr	r3, [pc, #172]	; (80102cc <run_shortest+0x12c4>)
 801021e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010222:	4613      	mov	r3, r2
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	4413      	add	r3, r2
 8010228:	011a      	lsls	r2, r3, #4
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	ee07 3a90 	vmov	s15, r3
 8010230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010234:	69b8      	ldr	r0, [r7, #24]
 8010236:	ed97 2a04 	vldr	s4, [r7, #16]
 801023a:	edd7 1a05 	vldr	s3, [r7, #20]
 801023e:	ed97 1a08 	vldr	s2, [r7, #32]
 8010242:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8010246:	eeb0 0a67 	vmov.f32	s0, s15
 801024a:	f7f2 fec7 	bl	8002fdc <straight_table2>
			}

			pass_count++;
 801024e:	4b1e      	ldr	r3, [pc, #120]	; (80102c8 <run_shortest+0x12c0>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	3301      	adds	r3, #1
 8010254:	b2da      	uxtb	r2, r3
 8010256:	4b1c      	ldr	r3, [pc, #112]	; (80102c8 <run_shortest+0x12c0>)
 8010258:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 801025a:	4b1b      	ldr	r3, [pc, #108]	; (80102c8 <run_shortest+0x12c0>)
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	4b1a      	ldr	r3, [pc, #104]	; (80102cc <run_shortest+0x12c4>)
 8010262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d000      	beq.n	801026c <run_shortest+0x1264>
		pass_count2=pass_count+1;
 801026a:	e521      	b.n	800fcb0 <run_shortest+0xca8>
			break;
 801026c:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 801026e:	2301      	movs	r3, #1
 8010270:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 8010272:	2300      	movs	r3, #0
 8010274:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 8010276:	69b8      	ldr	r0, [r7, #24]
 8010278:	ed97 2a04 	vldr	s4, [r7, #16]
 801027c:	edd7 1a05 	vldr	s3, [r7, #20]
 8010280:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80102d0 <run_shortest+0x12c8>
 8010284:	edd7 0a08 	vldr	s1, [r7, #32]
 8010288:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80102d4 <run_shortest+0x12cc>
 801028c:	f7f2 fea6 	bl	8002fdc <straight_table2>
		HAL_Delay(700);
 8010290:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8010294:	f008 fac8 	bl	8018828 <HAL_Delay>
		pl_FunMotor_stop();
 8010298:	f7f7 fb66 	bl	8007968 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 801029c:	4b0e      	ldr	r3, [pc, #56]	; (80102d8 <run_shortest+0x12d0>)
 801029e:	2200      	movs	r2, #0
 80102a0:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80102a2:	4b0e      	ldr	r3, [pc, #56]	; (80102dc <run_shortest+0x12d4>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 80102a8:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <run_shortest+0x12d8>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 80102ae:	2000      	movs	r0, #0
 80102b0:	f7f7 fac6 	bl	8007840 <pl_DriveMotor_standby>
	t = 0;
 80102b4:	4b0b      	ldr	r3, [pc, #44]	; (80102e4 <run_shortest+0x12dc>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 80102ba:	e034      	b.n	8010326 <run_shortest+0x131e>
 80102bc:	f3af 8000 	nop.w
 80102c0:	c022ec18 	.word	0xc022ec18
 80102c4:	404fd1de 	.word	0x404fd1de
 80102c8:	20000828 	.word	0x20000828
 80102cc:	2000083c 	.word	0x2000083c
 80102d0:	00000000 	.word	0x00000000
 80102d4:	42b40000 	.word	0x42b40000
 80102d8:	20000834 	.word	0x20000834
 80102dc:	20000808 	.word	0x20000808
 80102e0:	2000edc0 	.word	0x2000edc0
 80102e4:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 80102e8:	4b2b      	ldr	r3, [pc, #172]	; (8010398 <run_shortest+0x1390>)
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	4b2a      	ldr	r3, [pc, #168]	; (8010398 <run_shortest+0x1390>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	492a      	ldr	r1, [pc, #168]	; (801039c <run_shortest+0x1394>)
 80102f2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80102f6:	4a2a      	ldr	r2, [pc, #168]	; (80103a0 <run_shortest+0x1398>)
 80102f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80102fc:	4b26      	ldr	r3, [pc, #152]	; (8010398 <run_shortest+0x1390>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4a25      	ldr	r2, [pc, #148]	; (8010398 <run_shortest+0x1390>)
 8010302:	6812      	ldr	r2, [r2, #0]
 8010304:	4925      	ldr	r1, [pc, #148]	; (801039c <run_shortest+0x1394>)
 8010306:	330c      	adds	r3, #12
 8010308:	005b      	lsls	r3, r3, #1
 801030a:	440b      	add	r3, r1
 801030c:	88d8      	ldrh	r0, [r3, #6]
 801030e:	4924      	ldr	r1, [pc, #144]	; (80103a0 <run_shortest+0x1398>)
 8010310:	f102 030c 	add.w	r3, r2, #12
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	440b      	add	r3, r1
 8010318:	4602      	mov	r2, r0
 801031a:	80da      	strh	r2, [r3, #6]
		t++;
 801031c:	4b1e      	ldr	r3, [pc, #120]	; (8010398 <run_shortest+0x1390>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3301      	adds	r3, #1
 8010322:	4a1d      	ldr	r2, [pc, #116]	; (8010398 <run_shortest+0x1390>)
 8010324:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 8010326:	4b1c      	ldr	r3, [pc, #112]	; (8010398 <run_shortest+0x1390>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b0e      	cmp	r3, #14
 801032c:	dddc      	ble.n	80102e8 <run_shortest+0x12e0>
	}
	t = 0;
 801032e:	4b1a      	ldr	r3, [pc, #104]	; (8010398 <run_shortest+0x1390>)
 8010330:	2200      	movs	r2, #0
 8010332:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 8010334:	e026      	b.n	8010384 <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 8010336:	4b18      	ldr	r3, [pc, #96]	; (8010398 <run_shortest+0x1390>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a19      	ldr	r2, [pc, #100]	; (80103a0 <run_shortest+0x1398>)
 801033c:	331c      	adds	r3, #28
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	4413      	add	r3, r2
 8010342:	889a      	ldrh	r2, [r3, #4]
 8010344:	4b14      	ldr	r3, [pc, #80]	; (8010398 <run_shortest+0x1390>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	43d2      	mvns	r2, r2
 801034a:	b291      	uxth	r1, r2
 801034c:	4a14      	ldr	r2, [pc, #80]	; (80103a0 <run_shortest+0x1398>)
 801034e:	331c      	adds	r3, #28
 8010350:	005b      	lsls	r3, r3, #1
 8010352:	4413      	add	r3, r2
 8010354:	460a      	mov	r2, r1
 8010356:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 8010358:	4b0f      	ldr	r3, [pc, #60]	; (8010398 <run_shortest+0x1390>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a10      	ldr	r2, [pc, #64]	; (80103a0 <run_shortest+0x1398>)
 801035e:	332c      	adds	r3, #44	; 0x2c
 8010360:	005b      	lsls	r3, r3, #1
 8010362:	4413      	add	r3, r2
 8010364:	885a      	ldrh	r2, [r3, #2]
 8010366:	4b0c      	ldr	r3, [pc, #48]	; (8010398 <run_shortest+0x1390>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	43d2      	mvns	r2, r2
 801036c:	b291      	uxth	r1, r2
 801036e:	4a0c      	ldr	r2, [pc, #48]	; (80103a0 <run_shortest+0x1398>)
 8010370:	332c      	adds	r3, #44	; 0x2c
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	4413      	add	r3, r2
 8010376:	460a      	mov	r2, r1
 8010378:	805a      	strh	r2, [r3, #2]
		t++;
 801037a:	4b07      	ldr	r3, [pc, #28]	; (8010398 <run_shortest+0x1390>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3301      	adds	r3, #1
 8010380:	4a05      	ldr	r2, [pc, #20]	; (8010398 <run_shortest+0x1390>)
 8010382:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 8010384:	4b04      	ldr	r3, [pc, #16]	; (8010398 <run_shortest+0x1390>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b0e      	cmp	r3, #14
 801038a:	ddd4      	ble.n	8010336 <run_shortest+0x132e>
	}

}
 801038c:	bf00      	nop
 801038e:	bf00      	nop
 8010390:	3740      	adds	r7, #64	; 0x40
 8010392:	46bd      	mov	sp, r7
 8010394:	bdb0      	pop	{r4, r5, r7, pc}
 8010396:	bf00      	nop
 8010398:	20000c38 	.word	0x20000c38
 801039c:	20000cb4 	.word	0x20000cb4
 80103a0:	20000c3c 	.word	0x20000c3c

080103a4 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b08a      	sub	sp, #40	; 0x28
 80103a8:	af02      	add	r7, sp, #8
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]
 80103b0:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 80103b2:	2301      	movs	r3, #1
 80103b4:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 80103b6:	2301      	movs	r3, #1
 80103b8:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 80103ba:	2301      	movs	r3, #1
 80103bc:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 80103c6:	f107 0114 	add.w	r1, r7, #20
 80103ca:	f107 0318 	add.w	r3, r7, #24
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fd fcfb 	bl	800ddcc <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 80103d6:	69b8      	ldr	r0, [r7, #24]
 80103d8:	6979      	ldr	r1, [r7, #20]
 80103da:	f107 021e 	add.w	r2, r7, #30
 80103de:	f107 031c 	add.w	r3, r7, #28
 80103e2:	9301      	str	r3, [sp, #4]
 80103e4:	f107 031d 	add.w	r3, r7, #29
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	4613      	mov	r3, r2
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	f000 fe27 	bl	8011040 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 80103f2:	7fbb      	ldrb	r3, [r7, #30]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d007      	beq.n	8010408 <decision_kitiku+0x64>
 80103f8:	7f7b      	ldrb	r3, [r7, #29]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d004      	beq.n	8010408 <decision_kitiku+0x64>
 80103fe:	7f3b      	ldrb	r3, [r7, #28]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d001      	beq.n	8010408 <decision_kitiku+0x64>
 8010404:	2301      	movs	r3, #1
 8010406:	e000      	b.n	801040a <decision_kitiku+0x66>
 8010408:	2300      	movs	r3, #0
 801040a:	77fb      	strb	r3, [r7, #31]
 801040c:	7ffb      	ldrb	r3, [r7, #31]
 801040e:	f003 0301 	and.w	r3, r3, #1
 8010412:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 8010414:	7ffb      	ldrb	r3, [r7, #31]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d02b      	beq.n	8010472 <decision_kitiku+0xce>
 801041a:	887a      	ldrh	r2, [r7, #2]
 801041c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801041e:	429a      	cmp	r2, r3
 8010420:	d827      	bhi.n	8010472 <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8010422:	887a      	ldrh	r2, [r7, #2]
 8010424:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010426:	429a      	cmp	r2, r3
 8010428:	d823      	bhi.n	8010472 <decision_kitiku+0xce>
 801042a:	887a      	ldrh	r2, [r7, #2]
 801042c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801042e:	429a      	cmp	r2, r3
 8010430:	d81f      	bhi.n	8010472 <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2b01      	cmp	r3, #1
 8010436:	d102      	bne.n	801043e <decision_kitiku+0x9a>
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	2b0d      	cmp	r3, #13
 801043c:	dc11      	bgt.n	8010462 <decision_kitiku+0xbe>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2b02      	cmp	r3, #2
 8010442:	d102      	bne.n	801044a <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b0d      	cmp	r3, #13
 8010448:	dc0b      	bgt.n	8010462 <decision_kitiku+0xbe>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b03      	cmp	r3, #3
 801044e:	d102      	bne.n	8010456 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	2b01      	cmp	r3, #1
 8010454:	dd05      	ble.n	8010462 <decision_kitiku+0xbe>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2b04      	cmp	r3, #4
 801045a:	d106      	bne.n	801046a <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b01      	cmp	r3, #1
 8010460:	dc03      	bgt.n	801046a <decision_kitiku+0xc6>
			kitikukan = 0;
 8010462:	4b08      	ldr	r3, [pc, #32]	; (8010484 <decision_kitiku+0xe0>)
 8010464:	2200      	movs	r2, #0
 8010466:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010468:	e007      	b.n	801047a <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 801046a:	4b06      	ldr	r3, [pc, #24]	; (8010484 <decision_kitiku+0xe0>)
 801046c:	2201      	movs	r2, #1
 801046e:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010470:	e003      	b.n	801047a <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 8010472:	4b04      	ldr	r3, [pc, #16]	; (8010484 <decision_kitiku+0xe0>)
 8010474:	2200      	movs	r2, #0
 8010476:	601a      	str	r2, [r3, #0]
	}


}
 8010478:	bf00      	nop
 801047a:	bf00      	nop
 801047c:	3720      	adds	r7, #32
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	20000838 	.word	0x20000838

08010488 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 8010488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801048a:	b099      	sub	sp, #100	; 0x64
 801048c:	af04      	add	r7, sp, #16
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 8010494:	4b9f      	ldr	r3, [pc, #636]	; (8010714 <compress_kitiku+0x28c>)
 8010496:	2201      	movs	r2, #1
 8010498:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 801049a:	4b9f      	ldr	r3, [pc, #636]	; (8010718 <compress_kitiku+0x290>)
 801049c:	2201      	movs	r2, #1
 801049e:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	637b      	str	r3, [r7, #52]	; 0x34
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	633b      	str	r3, [r7, #48]	; 0x30
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 80104b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80104b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80104ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104bc:	4618      	mov	r0, r3
 80104be:	f7fd fc85 	bl	800ddcc <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 80104c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80104ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104cc:	627b      	str	r3, [r7, #36]	; 0x24
 80104ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d0:	623b      	str	r3, [r7, #32]
 80104d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d4:	61fb      	str	r3, [r7, #28]
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 80104da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80104de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fd fc71 	bl	800ddcc <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 80104ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80104f2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80104f6:	9301      	str	r3, [sp, #4]
 80104f8:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	4613      	mov	r3, r2
 8010500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010502:	f000 fd9d 	bl	8011040 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 8010506:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801050a:	2b00      	cmp	r3, #0
 801050c:	d009      	beq.n	8010522 <compress_kitiku+0x9a>
 801050e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010512:	2b00      	cmp	r3, #0
 8010514:	d005      	beq.n	8010522 <compress_kitiku+0x9a>
 8010516:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <compress_kitiku+0x9a>
 801051e:	2301      	movs	r3, #1
 8010520:	e000      	b.n	8010524 <compress_kitiku+0x9c>
 8010522:	2300      	movs	r3, #0
 8010524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801052c:	f003 0301 	and.w	r3, r3, #1
 8010530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8010534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010536:	2b04      	cmp	r3, #4
 8010538:	d102      	bne.n	8010540 <compress_kitiku+0xb8>
 801053a:	2301      	movs	r3, #1
 801053c:	64bb      	str	r3, [r7, #72]	; 0x48
 801053e:	e002      	b.n	8010546 <compress_kitiku+0xbe>
 8010540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010542:	3301      	adds	r3, #1
 8010544:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 8010546:	f107 0120 	add.w	r1, r7, #32
 801054a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801054e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010550:	4618      	mov	r0, r3
 8010552:	f7fd fc3b 	bl	800ddcc <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 8010556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010558:	6a39      	ldr	r1, [r7, #32]
 801055a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801055e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010562:	9301      	str	r3, [sp, #4]
 8010564:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010568:	9300      	str	r3, [sp, #0]
 801056a:	4613      	mov	r3, r2
 801056c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801056e:	f000 fd67 	bl	8011040 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 8010572:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010576:	2b00      	cmp	r3, #0
 8010578:	d009      	beq.n	801058e <compress_kitiku+0x106>
 801057a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801057e:	2b00      	cmp	r3, #0
 8010580:	d005      	beq.n	801058e <compress_kitiku+0x106>
 8010582:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <compress_kitiku+0x106>
 801058a:	2301      	movs	r3, #1
 801058c:	e000      	b.n	8010590 <compress_kitiku+0x108>
 801058e:	2300      	movs	r3, #0
 8010590:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010594:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010598:	f003 0301 	and.w	r3, r3, #1
 801059c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 80105a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d102      	bne.n	80105ac <compress_kitiku+0x124>
 80105a6:	2304      	movs	r3, #4
 80105a8:	647b      	str	r3, [r7, #68]	; 0x44
 80105aa:	e002      	b.n	80105b2 <compress_kitiku+0x12a>
 80105ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ae:	3b01      	subs	r3, #1
 80105b0:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 80105b2:	f107 0118 	add.w	r1, r7, #24
 80105b6:	f107 031c 	add.w	r3, r7, #28
 80105ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105bc:	4618      	mov	r0, r3
 80105be:	f7fd fc05 	bl	800ddcc <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 80105c2:	69f8      	ldr	r0, [r7, #28]
 80105c4:	69b9      	ldr	r1, [r7, #24]
 80105c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80105ca:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80105ce:	9301      	str	r3, [sp, #4]
 80105d0:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80105d4:	9300      	str	r3, [sp, #0]
 80105d6:	4613      	mov	r3, r2
 80105d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105da:	f000 fd31 	bl	8011040 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 80105de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d009      	beq.n	80105fa <compress_kitiku+0x172>
 80105e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d005      	beq.n	80105fa <compress_kitiku+0x172>
 80105ee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <compress_kitiku+0x172>
 80105f6:	2301      	movs	r3, #1
 80105f8:	e000      	b.n	80105fc <compress_kitiku+0x174>
 80105fa:	2300      	movs	r3, #0
 80105fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010600:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 801060c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801060e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010610:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010614:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801061e:	9300      	str	r3, [sp, #0]
 8010620:	4613      	mov	r3, r2
 8010622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010624:	f000 fb98 	bl	8010d58 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801062c:	f107 0610 	add.w	r6, r7, #16
 8010630:	f107 0512 	add.w	r5, r7, #18
 8010634:	f107 0414 	add.w	r4, r7, #20
 8010638:	f107 0016 	add.w	r0, r7, #22
 801063c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801063e:	9102      	str	r1, [sp, #8]
 8010640:	9201      	str	r2, [sp, #4]
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	4633      	mov	r3, r6
 8010646:	462a      	mov	r2, r5
 8010648:	4621      	mov	r1, r4
 801064a:	f000 fe79 	bl	8011340 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 801064e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <compress_kitiku+0x1d2>
 8010656:	23ff      	movs	r3, #255	; 0xff
 8010658:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 801065a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801065e:	2b00      	cmp	r3, #0
 8010660:	d001      	beq.n	8010666 <compress_kitiku+0x1de>
 8010662:	23ff      	movs	r3, #255	; 0xff
 8010664:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 8010666:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801066a:	2b00      	cmp	r3, #0
 801066c:	d001      	beq.n	8010672 <compress_kitiku+0x1ea>
 801066e:	23ff      	movs	r3, #255	; 0xff
 8010670:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 8010672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010676:	4929      	ldr	r1, [pc, #164]	; (801071c <compress_kitiku+0x294>)
 8010678:	0112      	lsls	r2, r2, #4
 801067a:	4413      	add	r3, r2
 801067c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010680:	2b01      	cmp	r3, #1
 8010682:	f240 80a9 	bls.w	80107d8 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 8010686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010688:	2b01      	cmp	r3, #1
 801068a:	d103      	bne.n	8010694 <compress_kitiku+0x20c>
 801068c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068e:	2b0d      	cmp	r3, #13
 8010690:	f300 80a4 	bgt.w	80107dc <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 8010694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010696:	2b02      	cmp	r3, #2
 8010698:	d103      	bne.n	80106a2 <compress_kitiku+0x21a>
 801069a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069c:	2b0d      	cmp	r3, #13
 801069e:	f300 809f 	bgt.w	80107e0 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 80106a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d103      	bne.n	80106b0 <compress_kitiku+0x228>
 80106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	f340 809a 	ble.w	80107e4 <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 80106b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b2:	2b04      	cmp	r3, #4
 80106b4:	d103      	bne.n	80106be <compress_kitiku+0x236>
 80106b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	f340 8095 	ble.w	80107e8 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80106be:	8afb      	ldrh	r3, [r7, #22]
 80106c0:	2bff      	cmp	r3, #255	; 0xff
 80106c2:	d10c      	bne.n	80106de <compress_kitiku+0x256>
 80106c4:	8abb      	ldrh	r3, [r7, #20]
 80106c6:	2bff      	cmp	r3, #255	; 0xff
 80106c8:	d109      	bne.n	80106de <compress_kitiku+0x256>
 80106ca:	8a3b      	ldrh	r3, [r7, #16]
 80106cc:	2bff      	cmp	r3, #255	; 0xff
 80106ce:	d106      	bne.n	80106de <compress_kitiku+0x256>
 80106d0:	8a7b      	ldrh	r3, [r7, #18]
 80106d2:	2bff      	cmp	r3, #255	; 0xff
 80106d4:	d103      	bne.n	80106de <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 80106d6:	4b12      	ldr	r3, [pc, #72]	; (8010720 <compress_kitiku+0x298>)
 80106d8:	2201      	movs	r2, #1
 80106da:	701a      	strb	r2, [r3, #0]
		break;
 80106dc:	e087      	b.n	80107ee <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80106de:	8afa      	ldrh	r2, [r7, #22]
 80106e0:	8abb      	ldrh	r3, [r7, #20]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d81e      	bhi.n	8010724 <compress_kitiku+0x29c>
 80106e6:	8afa      	ldrh	r2, [r7, #22]
 80106e8:	8a3b      	ldrh	r3, [r7, #16]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d81a      	bhi.n	8010724 <compress_kitiku+0x29c>
 80106ee:	8afa      	ldrh	r2, [r7, #22]
 80106f0:	8a7b      	ldrh	r3, [r7, #18]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d816      	bhi.n	8010724 <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 80106f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d005      	beq.n	801070a <compress_kitiku+0x282>
				kitiku_distance += 2;
 80106fe:	4b05      	ldr	r3, [pc, #20]	; (8010714 <compress_kitiku+0x28c>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	3302      	adds	r3, #2
 8010704:	4a03      	ldr	r2, [pc, #12]	; (8010714 <compress_kitiku+0x28c>)
 8010706:	6013      	str	r3, [r2, #0]
 8010708:	e00c      	b.n	8010724 <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 801070a:	4b03      	ldr	r3, [pc, #12]	; (8010718 <compress_kitiku+0x290>)
 801070c:	2200      	movs	r2, #0
 801070e:	701a      	strb	r2, [r3, #0]
				break;
 8010710:	e06d      	b.n	80107ee <compress_kitiku+0x366>
 8010712:	bf00      	nop
 8010714:	2000082c 	.word	0x2000082c
 8010718:	20000829 	.word	0x20000829
 801071c:	20000d30 	.word	0x20000d30
 8010720:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8010724:	8aba      	ldrh	r2, [r7, #20]
 8010726:	8afb      	ldrh	r3, [r7, #22]
 8010728:	429a      	cmp	r2, r3
 801072a:	d213      	bcs.n	8010754 <compress_kitiku+0x2cc>
 801072c:	8aba      	ldrh	r2, [r7, #20]
 801072e:	8a3b      	ldrh	r3, [r7, #16]
 8010730:	429a      	cmp	r2, r3
 8010732:	d80f      	bhi.n	8010754 <compress_kitiku+0x2cc>
 8010734:	8aba      	ldrh	r2, [r7, #20]
 8010736:	8a7b      	ldrh	r3, [r7, #18]
 8010738:	429a      	cmp	r2, r3
 801073a:	d80b      	bhi.n	8010754 <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 801073c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010740:	2b00      	cmp	r3, #0
 8010742:	d003      	beq.n	801074c <compress_kitiku+0x2c4>
				kitiku = 0;
 8010744:	4b40      	ldr	r3, [pc, #256]	; (8010848 <compress_kitiku+0x3c0>)
 8010746:	2200      	movs	r2, #0
 8010748:	701a      	strb	r2, [r3, #0]
				break;
 801074a:	e050      	b.n	80107ee <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 801074c:	4b3e      	ldr	r3, [pc, #248]	; (8010848 <compress_kitiku+0x3c0>)
 801074e:	2200      	movs	r2, #0
 8010750:	701a      	strb	r2, [r3, #0]
				break;
 8010752:	e04c      	b.n	80107ee <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8010754:	8a3a      	ldrh	r2, [r7, #16]
 8010756:	8afb      	ldrh	r3, [r7, #22]
 8010758:	429a      	cmp	r2, r3
 801075a:	d213      	bcs.n	8010784 <compress_kitiku+0x2fc>
 801075c:	8a3a      	ldrh	r2, [r7, #16]
 801075e:	8abb      	ldrh	r3, [r7, #20]
 8010760:	429a      	cmp	r2, r3
 8010762:	d20f      	bcs.n	8010784 <compress_kitiku+0x2fc>
 8010764:	8a3a      	ldrh	r2, [r7, #16]
 8010766:	8a7b      	ldrh	r3, [r7, #18]
 8010768:	429a      	cmp	r2, r3
 801076a:	d80b      	bhi.n	8010784 <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 801076c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010770:	2b00      	cmp	r3, #0
 8010772:	d003      	beq.n	801077c <compress_kitiku+0x2f4>
				kitiku = 0;
 8010774:	4b34      	ldr	r3, [pc, #208]	; (8010848 <compress_kitiku+0x3c0>)
 8010776:	2200      	movs	r2, #0
 8010778:	701a      	strb	r2, [r3, #0]
				break;
 801077a:	e038      	b.n	80107ee <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 801077c:	4b32      	ldr	r3, [pc, #200]	; (8010848 <compress_kitiku+0x3c0>)
 801077e:	2200      	movs	r2, #0
 8010780:	701a      	strb	r2, [r3, #0]
				break;
 8010782:	e034      	b.n	80107ee <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 8010784:	8a7a      	ldrh	r2, [r7, #18]
 8010786:	8afb      	ldrh	r3, [r7, #22]
 8010788:	429a      	cmp	r2, r3
 801078a:	d20b      	bcs.n	80107a4 <compress_kitiku+0x31c>
 801078c:	8a7a      	ldrh	r2, [r7, #18]
 801078e:	8abb      	ldrh	r3, [r7, #20]
 8010790:	429a      	cmp	r2, r3
 8010792:	d207      	bcs.n	80107a4 <compress_kitiku+0x31c>
								&& back_count < left_count){
 8010794:	8a7a      	ldrh	r2, [r7, #18]
 8010796:	8a3b      	ldrh	r3, [r7, #16]
 8010798:	429a      	cmp	r2, r3
 801079a:	d203      	bcs.n	80107a4 <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 801079c:	4b2a      	ldr	r3, [pc, #168]	; (8010848 <compress_kitiku+0x3c0>)
 801079e:	2200      	movs	r2, #0
 80107a0:	701a      	strb	r2, [r3, #0]
			break;
 80107a2:	e024      	b.n	80107ee <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80107a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a6:	2b05      	cmp	r3, #5
 80107a8:	d101      	bne.n	80107ae <compress_kitiku+0x326>
			direction_now = 1;
 80107aa:	2301      	movs	r3, #1
 80107ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 80107ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b0:	2b06      	cmp	r3, #6
 80107b2:	d101      	bne.n	80107b8 <compress_kitiku+0x330>
			direction_now = 2;
 80107b4:	2302      	movs	r3, #2
 80107b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 80107b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d101      	bne.n	80107c2 <compress_kitiku+0x33a>
			direction_now = 4;
 80107be:	2304      	movs	r3, #4
 80107c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 80107c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c8:	d101      	bne.n	80107ce <compress_kitiku+0x346>
			direction_now = 3;
 80107ca:	2303      	movs	r3, #3
 80107cc:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 80107ce:	4b1e      	ldr	r3, [pc, #120]	; (8010848 <compress_kitiku+0x3c0>)
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00a      	beq.n	80107ec <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 80107d6:	e66c      	b.n	80104b2 <compress_kitiku+0x2a>
			break;
 80107d8:	bf00      	nop
 80107da:	e008      	b.n	80107ee <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 80107dc:	bf00      	nop
 80107de:	e006      	b.n	80107ee <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 80107e0:	bf00      	nop
 80107e2:	e004      	b.n	80107ee <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 80107e4:	bf00      	nop
 80107e6:	e002      	b.n	80107ee <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 80107e8:	bf00      	nop
 80107ea:	e000      	b.n	80107ee <compress_kitiku+0x366>

			break;
 80107ec:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 80107ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107f0:	3302      	adds	r3, #2
 80107f2:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 80107f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f6:	2b05      	cmp	r3, #5
 80107f8:	d101      	bne.n	80107fe <compress_kitiku+0x376>
				direction2 = 1;
 80107fa:	2301      	movs	r3, #1
 80107fc:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 80107fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010800:	2b06      	cmp	r3, #6
 8010802:	d101      	bne.n	8010808 <compress_kitiku+0x380>
				direction2 = 2;
 8010804:	2302      	movs	r3, #2
 8010806:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 8010808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801080a:	2b00      	cmp	r3, #0
 801080c:	d101      	bne.n	8010812 <compress_kitiku+0x38a>
				direction2 = 4;
 801080e:	2304      	movs	r3, #4
 8010810:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 8010812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010818:	d101      	bne.n	801081e <compress_kitiku+0x396>
				direction2 = 3;
 801081a:	2303      	movs	r3, #3
 801081c:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 801081e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010822:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010828:	4618      	mov	r0, r3
 801082a:	f7fd facf 	bl	800ddcc <update_coordinate>

	*x=x_now;
 801082e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8010834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801083e:	601a      	str	r2, [r3, #0]

}
 8010840:	bf00      	nop
 8010842:	3754      	adds	r7, #84	; 0x54
 8010844:	46bd      	mov	sp, r7
 8010846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010848:	20000829 	.word	0x20000829

0801084c <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	3b01      	subs	r3, #1
 801085e:	2b03      	cmp	r3, #3
 8010860:	f200 8272 	bhi.w	8010d48 <update_wall+0x4fc>
 8010864:	a201      	add	r2, pc, #4	; (adr r2, 801086c <update_wall+0x20>)
 8010866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086a:	bf00      	nop
 801086c:	0801087d 	.word	0x0801087d
 8010870:	080109a3 	.word	0x080109a3
 8010874:	08010ad9 	.word	0x08010ad9
 8010878:	08010c07 	.word	0x08010c07
	case 1:
		if (y <= 14) {
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	2b0e      	cmp	r3, #14
 8010880:	dc2e      	bgt.n	80108e0 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010882:	4a94      	ldr	r2, [pc, #592]	; (8010ad4 <update_wall+0x288>)
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	332c      	adds	r3, #44	; 0x2c
 8010888:	005b      	lsls	r3, r3, #1
 801088a:	4413      	add	r3, r2
 801088c:	885b      	ldrh	r3, [r3, #2]
 801088e:	b21a      	sxth	r2, r3
 8010890:	2101      	movs	r1, #1
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	fa01 f303 	lsl.w	r3, r1, r3
 8010898:	b21b      	sxth	r3, r3
 801089a:	4313      	orrs	r3, r2
 801089c:	b21b      	sxth	r3, r3
 801089e:	b299      	uxth	r1, r3
 80108a0:	4a8c      	ldr	r2, [pc, #560]	; (8010ad4 <update_wall+0x288>)
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	332c      	adds	r3, #44	; 0x2c
 80108a6:	005b      	lsls	r3, r3, #1
 80108a8:	4413      	add	r3, r2
 80108aa:	460a      	mov	r2, r1
 80108ac:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80108ae:	78fb      	ldrb	r3, [r7, #3]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d015      	beq.n	80108e0 <update_wall+0x94>
 80108b4:	4a87      	ldr	r2, [pc, #540]	; (8010ad4 <update_wall+0x288>)
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	330c      	adds	r3, #12
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	4413      	add	r3, r2
 80108be:	88db      	ldrh	r3, [r3, #6]
 80108c0:	b21a      	sxth	r2, r3
 80108c2:	2101      	movs	r1, #1
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	fa01 f303 	lsl.w	r3, r1, r3
 80108ca:	b21b      	sxth	r3, r3
 80108cc:	4313      	orrs	r3, r2
 80108ce:	b21b      	sxth	r3, r3
 80108d0:	b299      	uxth	r1, r3
 80108d2:	4a80      	ldr	r2, [pc, #512]	; (8010ad4 <update_wall+0x288>)
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	330c      	adds	r3, #12
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	4413      	add	r3, r2
 80108dc:	460a      	mov	r2, r1
 80108de:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	dd2d      	ble.n	8010942 <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	4a7a      	ldr	r2, [pc, #488]	; (8010ad4 <update_wall+0x288>)
 80108ec:	331c      	adds	r3, #28
 80108ee:	005b      	lsls	r3, r3, #1
 80108f0:	4413      	add	r3, r2
 80108f2:	889b      	ldrh	r3, [r3, #4]
 80108f4:	b21a      	sxth	r2, r3
 80108f6:	2101      	movs	r1, #1
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	fa01 f303 	lsl.w	r3, r1, r3
 80108fe:	b21b      	sxth	r3, r3
 8010900:	4313      	orrs	r3, r2
 8010902:	b21a      	sxth	r2, r3
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	3b01      	subs	r3, #1
 8010908:	b291      	uxth	r1, r2
 801090a:	4a72      	ldr	r2, [pc, #456]	; (8010ad4 <update_wall+0x288>)
 801090c:	331c      	adds	r3, #28
 801090e:	005b      	lsls	r3, r3, #1
 8010910:	4413      	add	r3, r2
 8010912:	460a      	mov	r2, r1
 8010914:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010916:	7f3b      	ldrb	r3, [r7, #28]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d012      	beq.n	8010942 <update_wall+0xf6>
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	3b01      	subs	r3, #1
 8010920:	4a6c      	ldr	r2, [pc, #432]	; (8010ad4 <update_wall+0x288>)
 8010922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010926:	b21a      	sxth	r2, r3
 8010928:	2101      	movs	r1, #1
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	fa01 f303 	lsl.w	r3, r1, r3
 8010930:	b21b      	sxth	r3, r3
 8010932:	4313      	orrs	r3, r2
 8010934:	b21a      	sxth	r2, r3
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	3b01      	subs	r3, #1
 801093a:	b291      	uxth	r1, r2
 801093c:	4a65      	ldr	r2, [pc, #404]	; (8010ad4 <update_wall+0x288>)
 801093e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2b0e      	cmp	r3, #14
 8010946:	f300 81f8 	bgt.w	8010d3a <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 801094a:	4a62      	ldr	r2, [pc, #392]	; (8010ad4 <update_wall+0x288>)
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	331c      	adds	r3, #28
 8010950:	005b      	lsls	r3, r3, #1
 8010952:	4413      	add	r3, r2
 8010954:	889b      	ldrh	r3, [r3, #4]
 8010956:	b21a      	sxth	r2, r3
 8010958:	2101      	movs	r1, #1
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	fa01 f303 	lsl.w	r3, r1, r3
 8010960:	b21b      	sxth	r3, r3
 8010962:	4313      	orrs	r3, r2
 8010964:	b21b      	sxth	r3, r3
 8010966:	b299      	uxth	r1, r3
 8010968:	4a5a      	ldr	r2, [pc, #360]	; (8010ad4 <update_wall+0x288>)
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	331c      	adds	r3, #28
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	4413      	add	r3, r2
 8010972:	460a      	mov	r2, r1
 8010974:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010976:	7e3b      	ldrb	r3, [r7, #24]
 8010978:	2b00      	cmp	r3, #0
 801097a:	f000 81de 	beq.w	8010d3a <update_wall+0x4ee>
 801097e:	4a55      	ldr	r2, [pc, #340]	; (8010ad4 <update_wall+0x288>)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010986:	b21a      	sxth	r2, r3
 8010988:	2101      	movs	r1, #1
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	fa01 f303 	lsl.w	r3, r1, r3
 8010990:	b21b      	sxth	r3, r3
 8010992:	4313      	orrs	r3, r2
 8010994:	b21b      	sxth	r3, r3
 8010996:	b299      	uxth	r1, r3
 8010998:	4a4e      	ldr	r2, [pc, #312]	; (8010ad4 <update_wall+0x288>)
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 80109a0:	e1cb      	b.n	8010d3a <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2b0e      	cmp	r3, #14
 80109a6:	dc29      	bgt.n	80109fc <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 80109a8:	4a4a      	ldr	r2, [pc, #296]	; (8010ad4 <update_wall+0x288>)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	331c      	adds	r3, #28
 80109ae:	005b      	lsls	r3, r3, #1
 80109b0:	4413      	add	r3, r2
 80109b2:	889b      	ldrh	r3, [r3, #4]
 80109b4:	b21a      	sxth	r2, r3
 80109b6:	2101      	movs	r1, #1
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	fa01 f303 	lsl.w	r3, r1, r3
 80109be:	b21b      	sxth	r3, r3
 80109c0:	4313      	orrs	r3, r2
 80109c2:	b21b      	sxth	r3, r3
 80109c4:	b299      	uxth	r1, r3
 80109c6:	4a43      	ldr	r2, [pc, #268]	; (8010ad4 <update_wall+0x288>)
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	331c      	adds	r3, #28
 80109cc:	005b      	lsls	r3, r3, #1
 80109ce:	4413      	add	r3, r2
 80109d0:	460a      	mov	r2, r1
 80109d2:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 80109d4:	78fb      	ldrb	r3, [r7, #3]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d010      	beq.n	80109fc <update_wall+0x1b0>
 80109da:	4a3e      	ldr	r2, [pc, #248]	; (8010ad4 <update_wall+0x288>)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109e2:	b21a      	sxth	r2, r3
 80109e4:	2101      	movs	r1, #1
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	fa01 f303 	lsl.w	r3, r1, r3
 80109ec:	b21b      	sxth	r3, r3
 80109ee:	4313      	orrs	r3, r2
 80109f0:	b21b      	sxth	r3, r3
 80109f2:	b299      	uxth	r1, r3
 80109f4:	4a37      	ldr	r2, [pc, #220]	; (8010ad4 <update_wall+0x288>)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	2b0e      	cmp	r3, #14
 8010a00:	dc2e      	bgt.n	8010a60 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010a02:	4a34      	ldr	r2, [pc, #208]	; (8010ad4 <update_wall+0x288>)
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	332c      	adds	r3, #44	; 0x2c
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	4413      	add	r3, r2
 8010a0c:	885b      	ldrh	r3, [r3, #2]
 8010a0e:	b21a      	sxth	r2, r3
 8010a10:	2101      	movs	r1, #1
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	fa01 f303 	lsl.w	r3, r1, r3
 8010a18:	b21b      	sxth	r3, r3
 8010a1a:	4313      	orrs	r3, r2
 8010a1c:	b21b      	sxth	r3, r3
 8010a1e:	b299      	uxth	r1, r3
 8010a20:	4a2c      	ldr	r2, [pc, #176]	; (8010ad4 <update_wall+0x288>)
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	332c      	adds	r3, #44	; 0x2c
 8010a26:	005b      	lsls	r3, r3, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	460a      	mov	r2, r1
 8010a2c:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010a2e:	7f3b      	ldrb	r3, [r7, #28]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d015      	beq.n	8010a60 <update_wall+0x214>
 8010a34:	4a27      	ldr	r2, [pc, #156]	; (8010ad4 <update_wall+0x288>)
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	330c      	adds	r3, #12
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	4413      	add	r3, r2
 8010a3e:	88db      	ldrh	r3, [r3, #6]
 8010a40:	b21a      	sxth	r2, r3
 8010a42:	2101      	movs	r1, #1
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	fa01 f303 	lsl.w	r3, r1, r3
 8010a4a:	b21b      	sxth	r3, r3
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	b21b      	sxth	r3, r3
 8010a50:	b299      	uxth	r1, r3
 8010a52:	4a20      	ldr	r2, [pc, #128]	; (8010ad4 <update_wall+0x288>)
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	330c      	adds	r3, #12
 8010a58:	005b      	lsls	r3, r3, #1
 8010a5a:	4413      	add	r3, r2
 8010a5c:	460a      	mov	r2, r1
 8010a5e:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f340 816b 	ble.w	8010d3e <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	4a19      	ldr	r2, [pc, #100]	; (8010ad4 <update_wall+0x288>)
 8010a6e:	332c      	adds	r3, #44	; 0x2c
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	4413      	add	r3, r2
 8010a74:	885b      	ldrh	r3, [r3, #2]
 8010a76:	b21a      	sxth	r2, r3
 8010a78:	2101      	movs	r1, #1
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a80:	b21b      	sxth	r3, r3
 8010a82:	4313      	orrs	r3, r2
 8010a84:	b21a      	sxth	r2, r3
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	b291      	uxth	r1, r2
 8010a8c:	4a11      	ldr	r2, [pc, #68]	; (8010ad4 <update_wall+0x288>)
 8010a8e:	332c      	adds	r3, #44	; 0x2c
 8010a90:	005b      	lsls	r3, r3, #1
 8010a92:	4413      	add	r3, r2
 8010a94:	460a      	mov	r2, r1
 8010a96:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010a98:	7e3b      	ldrb	r3, [r7, #24]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 814f 	beq.w	8010d3e <update_wall+0x4f2>
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	4a0b      	ldr	r2, [pc, #44]	; (8010ad4 <update_wall+0x288>)
 8010aa6:	330c      	adds	r3, #12
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	4413      	add	r3, r2
 8010aac:	88db      	ldrh	r3, [r3, #6]
 8010aae:	b21a      	sxth	r2, r3
 8010ab0:	2101      	movs	r1, #1
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab8:	b21b      	sxth	r3, r3
 8010aba:	4313      	orrs	r3, r2
 8010abc:	b21a      	sxth	r2, r3
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	b291      	uxth	r1, r2
 8010ac4:	4a03      	ldr	r2, [pc, #12]	; (8010ad4 <update_wall+0x288>)
 8010ac6:	330c      	adds	r3, #12
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	4413      	add	r3, r2
 8010acc:	460a      	mov	r2, r1
 8010ace:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010ad0:	e135      	b.n	8010d3e <update_wall+0x4f2>
 8010ad2:	bf00      	nop
 8010ad4:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	dd32      	ble.n	8010b44 <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	4a9c      	ldr	r2, [pc, #624]	; (8010d54 <update_wall+0x508>)
 8010ae4:	332c      	adds	r3, #44	; 0x2c
 8010ae6:	005b      	lsls	r3, r3, #1
 8010ae8:	4413      	add	r3, r2
 8010aea:	885b      	ldrh	r3, [r3, #2]
 8010aec:	b21a      	sxth	r2, r3
 8010aee:	2101      	movs	r1, #1
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	fa01 f303 	lsl.w	r3, r1, r3
 8010af6:	b21b      	sxth	r3, r3
 8010af8:	4313      	orrs	r3, r2
 8010afa:	b21a      	sxth	r2, r3
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	3b01      	subs	r3, #1
 8010b00:	b291      	uxth	r1, r2
 8010b02:	4a94      	ldr	r2, [pc, #592]	; (8010d54 <update_wall+0x508>)
 8010b04:	332c      	adds	r3, #44	; 0x2c
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	4413      	add	r3, r2
 8010b0a:	460a      	mov	r2, r1
 8010b0c:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010b0e:	78fb      	ldrb	r3, [r7, #3]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d017      	beq.n	8010b44 <update_wall+0x2f8>
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	4a8e      	ldr	r2, [pc, #568]	; (8010d54 <update_wall+0x508>)
 8010b1a:	330c      	adds	r3, #12
 8010b1c:	005b      	lsls	r3, r3, #1
 8010b1e:	4413      	add	r3, r2
 8010b20:	88db      	ldrh	r3, [r3, #6]
 8010b22:	b21a      	sxth	r2, r3
 8010b24:	2101      	movs	r1, #1
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	fa01 f303 	lsl.w	r3, r1, r3
 8010b2c:	b21b      	sxth	r3, r3
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	b21a      	sxth	r2, r3
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	3b01      	subs	r3, #1
 8010b36:	b291      	uxth	r1, r2
 8010b38:	4a86      	ldr	r2, [pc, #536]	; (8010d54 <update_wall+0x508>)
 8010b3a:	330c      	adds	r3, #12
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	4413      	add	r3, r2
 8010b40:	460a      	mov	r2, r1
 8010b42:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2b0e      	cmp	r3, #14
 8010b48:	dc29      	bgt.n	8010b9e <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010b4a:	4a82      	ldr	r2, [pc, #520]	; (8010d54 <update_wall+0x508>)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	331c      	adds	r3, #28
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	4413      	add	r3, r2
 8010b54:	889b      	ldrh	r3, [r3, #4]
 8010b56:	b21a      	sxth	r2, r3
 8010b58:	2101      	movs	r1, #1
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8010b60:	b21b      	sxth	r3, r3
 8010b62:	4313      	orrs	r3, r2
 8010b64:	b21b      	sxth	r3, r3
 8010b66:	b299      	uxth	r1, r3
 8010b68:	4a7a      	ldr	r2, [pc, #488]	; (8010d54 <update_wall+0x508>)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	331c      	adds	r3, #28
 8010b6e:	005b      	lsls	r3, r3, #1
 8010b70:	4413      	add	r3, r2
 8010b72:	460a      	mov	r2, r1
 8010b74:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010b76:	7f3b      	ldrb	r3, [r7, #28]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d010      	beq.n	8010b9e <update_wall+0x352>
 8010b7c:	4a75      	ldr	r2, [pc, #468]	; (8010d54 <update_wall+0x508>)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b84:	b21a      	sxth	r2, r3
 8010b86:	2101      	movs	r1, #1
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8010b8e:	b21b      	sxth	r3, r3
 8010b90:	4313      	orrs	r3, r2
 8010b92:	b21b      	sxth	r3, r3
 8010b94:	b299      	uxth	r1, r3
 8010b96:	4a6f      	ldr	r2, [pc, #444]	; (8010d54 <update_wall+0x508>)
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f340 80ce 	ble.w	8010d42 <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	4a6a      	ldr	r2, [pc, #424]	; (8010d54 <update_wall+0x508>)
 8010bac:	331c      	adds	r3, #28
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	889b      	ldrh	r3, [r3, #4]
 8010bb4:	b21a      	sxth	r2, r3
 8010bb6:	2101      	movs	r1, #1
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	fa01 f303 	lsl.w	r3, r1, r3
 8010bbe:	b21b      	sxth	r3, r3
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	b21a      	sxth	r2, r3
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	b291      	uxth	r1, r2
 8010bca:	4a62      	ldr	r2, [pc, #392]	; (8010d54 <update_wall+0x508>)
 8010bcc:	331c      	adds	r3, #28
 8010bce:	005b      	lsls	r3, r3, #1
 8010bd0:	4413      	add	r3, r2
 8010bd2:	460a      	mov	r2, r1
 8010bd4:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010bd6:	7e3b      	ldrb	r3, [r7, #24]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 80b2 	beq.w	8010d42 <update_wall+0x4f6>
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	3b01      	subs	r3, #1
 8010be2:	4a5c      	ldr	r2, [pc, #368]	; (8010d54 <update_wall+0x508>)
 8010be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010be8:	b21a      	sxth	r2, r3
 8010bea:	2101      	movs	r1, #1
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	fa01 f303 	lsl.w	r3, r1, r3
 8010bf2:	b21b      	sxth	r3, r3
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	b21a      	sxth	r2, r3
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	b291      	uxth	r1, r2
 8010bfe:	4a55      	ldr	r2, [pc, #340]	; (8010d54 <update_wall+0x508>)
 8010c00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010c04:	e09d      	b.n	8010d42 <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	dd2d      	ble.n	8010c68 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	4a50      	ldr	r2, [pc, #320]	; (8010d54 <update_wall+0x508>)
 8010c12:	331c      	adds	r3, #28
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	4413      	add	r3, r2
 8010c18:	889b      	ldrh	r3, [r3, #4]
 8010c1a:	b21a      	sxth	r2, r3
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	fa01 f303 	lsl.w	r3, r1, r3
 8010c24:	b21b      	sxth	r3, r3
 8010c26:	4313      	orrs	r3, r2
 8010c28:	b21a      	sxth	r2, r3
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	b291      	uxth	r1, r2
 8010c30:	4a48      	ldr	r2, [pc, #288]	; (8010d54 <update_wall+0x508>)
 8010c32:	331c      	adds	r3, #28
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	4413      	add	r3, r2
 8010c38:	460a      	mov	r2, r1
 8010c3a:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010c3c:	78fb      	ldrb	r3, [r7, #3]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d012      	beq.n	8010c68 <update_wall+0x41c>
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	3b01      	subs	r3, #1
 8010c46:	4a43      	ldr	r2, [pc, #268]	; (8010d54 <update_wall+0x508>)
 8010c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c4c:	b21a      	sxth	r2, r3
 8010c4e:	2101      	movs	r1, #1
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	fa01 f303 	lsl.w	r3, r1, r3
 8010c56:	b21b      	sxth	r3, r3
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	b21a      	sxth	r2, r3
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	b291      	uxth	r1, r2
 8010c62:	4a3c      	ldr	r2, [pc, #240]	; (8010d54 <update_wall+0x508>)
 8010c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	dd32      	ble.n	8010cd4 <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	4a38      	ldr	r2, [pc, #224]	; (8010d54 <update_wall+0x508>)
 8010c74:	332c      	adds	r3, #44	; 0x2c
 8010c76:	005b      	lsls	r3, r3, #1
 8010c78:	4413      	add	r3, r2
 8010c7a:	885b      	ldrh	r3, [r3, #2]
 8010c7c:	b21a      	sxth	r2, r3
 8010c7e:	2101      	movs	r1, #1
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	fa01 f303 	lsl.w	r3, r1, r3
 8010c86:	b21b      	sxth	r3, r3
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	b21a      	sxth	r2, r3
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	b291      	uxth	r1, r2
 8010c92:	4a30      	ldr	r2, [pc, #192]	; (8010d54 <update_wall+0x508>)
 8010c94:	332c      	adds	r3, #44	; 0x2c
 8010c96:	005b      	lsls	r3, r3, #1
 8010c98:	4413      	add	r3, r2
 8010c9a:	460a      	mov	r2, r1
 8010c9c:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010c9e:	7f3b      	ldrb	r3, [r7, #28]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d017      	beq.n	8010cd4 <update_wall+0x488>
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	4a2a      	ldr	r2, [pc, #168]	; (8010d54 <update_wall+0x508>)
 8010caa:	330c      	adds	r3, #12
 8010cac:	005b      	lsls	r3, r3, #1
 8010cae:	4413      	add	r3, r2
 8010cb0:	88db      	ldrh	r3, [r3, #6]
 8010cb2:	b21a      	sxth	r2, r3
 8010cb4:	2101      	movs	r1, #1
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8010cbc:	b21b      	sxth	r3, r3
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	b21a      	sxth	r2, r3
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	3b01      	subs	r3, #1
 8010cc6:	b291      	uxth	r1, r2
 8010cc8:	4a22      	ldr	r2, [pc, #136]	; (8010d54 <update_wall+0x508>)
 8010cca:	330c      	adds	r3, #12
 8010ccc:	005b      	lsls	r3, r3, #1
 8010cce:	4413      	add	r3, r2
 8010cd0:	460a      	mov	r2, r1
 8010cd2:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	2b0e      	cmp	r3, #14
 8010cd8:	dc35      	bgt.n	8010d46 <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010cda:	4a1e      	ldr	r2, [pc, #120]	; (8010d54 <update_wall+0x508>)
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	332c      	adds	r3, #44	; 0x2c
 8010ce0:	005b      	lsls	r3, r3, #1
 8010ce2:	4413      	add	r3, r2
 8010ce4:	885b      	ldrh	r3, [r3, #2]
 8010ce6:	b21a      	sxth	r2, r3
 8010ce8:	2101      	movs	r1, #1
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf0:	b21b      	sxth	r3, r3
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	b21b      	sxth	r3, r3
 8010cf6:	b299      	uxth	r1, r3
 8010cf8:	4a16      	ldr	r2, [pc, #88]	; (8010d54 <update_wall+0x508>)
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	332c      	adds	r3, #44	; 0x2c
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	4413      	add	r3, r2
 8010d02:	460a      	mov	r2, r1
 8010d04:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010d06:	7e3b      	ldrb	r3, [r7, #24]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d01c      	beq.n	8010d46 <update_wall+0x4fa>
 8010d0c:	4a11      	ldr	r2, [pc, #68]	; (8010d54 <update_wall+0x508>)
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	330c      	adds	r3, #12
 8010d12:	005b      	lsls	r3, r3, #1
 8010d14:	4413      	add	r3, r2
 8010d16:	88db      	ldrh	r3, [r3, #6]
 8010d18:	b21a      	sxth	r2, r3
 8010d1a:	2101      	movs	r1, #1
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d22:	b21b      	sxth	r3, r3
 8010d24:	4313      	orrs	r3, r2
 8010d26:	b21b      	sxth	r3, r3
 8010d28:	b299      	uxth	r1, r3
 8010d2a:	4a0a      	ldr	r2, [pc, #40]	; (8010d54 <update_wall+0x508>)
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	330c      	adds	r3, #12
 8010d30:	005b      	lsls	r3, r3, #1
 8010d32:	4413      	add	r3, r2
 8010d34:	460a      	mov	r2, r1
 8010d36:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010d38:	e005      	b.n	8010d46 <update_wall+0x4fa>
		break;
 8010d3a:	bf00      	nop
 8010d3c:	e004      	b.n	8010d48 <update_wall+0x4fc>
		break;
 8010d3e:	bf00      	nop
 8010d40:	e002      	b.n	8010d48 <update_wall+0x4fc>
		break;
 8010d42:	bf00      	nop
 8010d44:	e000      	b.n	8010d48 <update_wall+0x4fc>
		break;
 8010d46:	bf00      	nop

	}


}
 8010d48:	bf00      	nop
 8010d4a:	3714      	adds	r7, #20
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr
 8010d54:	20000c3c 	.word	0x20000c3c

08010d58 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010d58:	b480      	push	{r7}
 8010d5a:	b085      	sub	sp, #20
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
 8010d64:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	2201      	movs	r2, #1
 8010d70:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	2201      	movs	r2, #1
 8010d76:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	2b03      	cmp	r3, #3
 8010d7e:	f200 8156 	bhi.w	801102e <get_wall+0x2d6>
 8010d82:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <get_wall+0x30>)
 8010d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d88:	08010d99 	.word	0x08010d99
 8010d8c:	08010e39 	.word	0x08010e39
 8010d90:	08010edd 	.word	0x08010edd
 8010d94:	08010f7d 	.word	0x08010f7d
	case 1:
		if (y <= 14) {
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	2b0e      	cmp	r3, #14
 8010d9c:	dc17      	bgt.n	8010dce <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010d9e:	4aa7      	ldr	r2, [pc, #668]	; (801103c <get_wall+0x2e4>)
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	330c      	adds	r3, #12
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	4413      	add	r3, r2
 8010da8:	88db      	ldrh	r3, [r3, #6]
 8010daa:	4619      	mov	r1, r3
 8010dac:	2201      	movs	r2, #1
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	fa02 f303 	lsl.w	r3, r2, r3
 8010db4:	ea01 0203 	and.w	r2, r1, r3
 8010db8:	2101      	movs	r1, #1
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	bf0c      	ite	eq
 8010dc4:	2301      	moveq	r3, #1
 8010dc6:	2300      	movne	r3, #0
 8010dc8:	b2da      	uxtb	r2, r3
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dd16      	ble.n	8010e02 <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	4a98      	ldr	r2, [pc, #608]	; (801103c <get_wall+0x2e4>)
 8010dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dde:	4619      	mov	r1, r3
 8010de0:	2201      	movs	r2, #1
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	fa02 f303 	lsl.w	r3, r2, r3
 8010de8:	ea01 0203 	and.w	r2, r1, r3
 8010dec:	2101      	movs	r1, #1
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	fa01 f303 	lsl.w	r3, r1, r3
 8010df4:	429a      	cmp	r2, r3
 8010df6:	bf0c      	ite	eq
 8010df8:	2301      	moveq	r3, #1
 8010dfa:	2300      	movne	r3, #0
 8010dfc:	b2da      	uxtb	r2, r3
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2b0e      	cmp	r3, #14
 8010e06:	f300 810b 	bgt.w	8011020 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010e0a:	4a8c      	ldr	r2, [pc, #560]	; (801103c <get_wall+0x2e4>)
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e12:	4619      	mov	r1, r3
 8010e14:	2201      	movs	r2, #1
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	fa02 f303 	lsl.w	r3, r2, r3
 8010e1c:	ea01 0203 	and.w	r2, r1, r3
 8010e20:	2101      	movs	r1, #1
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	fa01 f303 	lsl.w	r3, r1, r3
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	bf0c      	ite	eq
 8010e2c:	2301      	moveq	r3, #1
 8010e2e:	2300      	movne	r3, #0
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	69bb      	ldr	r3, [r7, #24]
 8010e34:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010e36:	e0f3      	b.n	8011020 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b0e      	cmp	r3, #14
 8010e3c:	dc15      	bgt.n	8010e6a <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010e3e:	4a7f      	ldr	r2, [pc, #508]	; (801103c <get_wall+0x2e4>)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e46:	4619      	mov	r1, r3
 8010e48:	2201      	movs	r2, #1
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e50:	ea01 0203 	and.w	r2, r1, r3
 8010e54:	2101      	movs	r1, #1
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	fa01 f303 	lsl.w	r3, r1, r3
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	bf0c      	ite	eq
 8010e60:	2301      	moveq	r3, #1
 8010e62:	2300      	movne	r3, #0
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	2b0e      	cmp	r3, #14
 8010e6e:	dc17      	bgt.n	8010ea0 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010e70:	4a72      	ldr	r2, [pc, #456]	; (801103c <get_wall+0x2e4>)
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	330c      	adds	r3, #12
 8010e76:	005b      	lsls	r3, r3, #1
 8010e78:	4413      	add	r3, r2
 8010e7a:	88db      	ldrh	r3, [r3, #6]
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	2201      	movs	r2, #1
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	fa02 f303 	lsl.w	r3, r2, r3
 8010e86:	ea01 0203 	and.w	r2, r1, r3
 8010e8a:	2101      	movs	r1, #1
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e92:	429a      	cmp	r2, r3
 8010e94:	bf0c      	ite	eq
 8010e96:	2301      	moveq	r3, #1
 8010e98:	2300      	movne	r3, #0
 8010e9a:	b2da      	uxtb	r2, r3
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f340 80be 	ble.w	8011024 <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	4a63      	ldr	r2, [pc, #396]	; (801103c <get_wall+0x2e4>)
 8010eae:	330c      	adds	r3, #12
 8010eb0:	005b      	lsls	r3, r3, #1
 8010eb2:	4413      	add	r3, r2
 8010eb4:	88db      	ldrh	r3, [r3, #6]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	2201      	movs	r2, #1
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec0:	ea01 0203 	and.w	r2, r1, r3
 8010ec4:	2101      	movs	r1, #1
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	bf0c      	ite	eq
 8010ed0:	2301      	moveq	r3, #1
 8010ed2:	2300      	movne	r3, #0
 8010ed4:	b2da      	uxtb	r2, r3
 8010ed6:	69bb      	ldr	r3, [r7, #24]
 8010ed8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010eda:	e0a3      	b.n	8011024 <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	dd18      	ble.n	8010f14 <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	3b01      	subs	r3, #1
 8010ee6:	4a55      	ldr	r2, [pc, #340]	; (801103c <get_wall+0x2e4>)
 8010ee8:	330c      	adds	r3, #12
 8010eea:	005b      	lsls	r3, r3, #1
 8010eec:	4413      	add	r3, r2
 8010eee:	88db      	ldrh	r3, [r3, #6]
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8010efa:	ea01 0203 	and.w	r2, r1, r3
 8010efe:	2101      	movs	r1, #1
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	fa01 f303 	lsl.w	r3, r1, r3
 8010f06:	429a      	cmp	r2, r3
 8010f08:	bf0c      	ite	eq
 8010f0a:	2301      	moveq	r3, #1
 8010f0c:	2300      	movne	r3, #0
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2b0e      	cmp	r3, #14
 8010f18:	dc15      	bgt.n	8010f46 <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f1a:	4a48      	ldr	r2, [pc, #288]	; (801103c <get_wall+0x2e4>)
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f22:	4619      	mov	r1, r3
 8010f24:	2201      	movs	r2, #1
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	fa02 f303 	lsl.w	r3, r2, r3
 8010f2c:	ea01 0203 	and.w	r2, r1, r3
 8010f30:	2101      	movs	r1, #1
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	fa01 f303 	lsl.w	r3, r1, r3
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	bf0c      	ite	eq
 8010f3c:	2301      	moveq	r3, #1
 8010f3e:	2300      	movne	r3, #0
 8010f40:	b2da      	uxtb	r2, r3
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	dd6d      	ble.n	8011028 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	3b01      	subs	r3, #1
 8010f50:	4a3a      	ldr	r2, [pc, #232]	; (801103c <get_wall+0x2e4>)
 8010f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f56:	4619      	mov	r1, r3
 8010f58:	2201      	movs	r2, #1
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f60:	ea01 0203 	and.w	r2, r1, r3
 8010f64:	2101      	movs	r1, #1
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	fa01 f303 	lsl.w	r3, r1, r3
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	bf0c      	ite	eq
 8010f70:	2301      	moveq	r3, #1
 8010f72:	2300      	movne	r3, #0
 8010f74:	b2da      	uxtb	r2, r3
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010f7a:	e055      	b.n	8011028 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	dd16      	ble.n	8010fb0 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	3b01      	subs	r3, #1
 8010f86:	4a2d      	ldr	r2, [pc, #180]	; (801103c <get_wall+0x2e4>)
 8010f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	2201      	movs	r2, #1
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	fa02 f303 	lsl.w	r3, r2, r3
 8010f96:	ea01 0203 	and.w	r2, r1, r3
 8010f9a:	2101      	movs	r1, #1
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	bf0c      	ite	eq
 8010fa6:	2301      	moveq	r3, #1
 8010fa8:	2300      	movne	r3, #0
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	dd18      	ble.n	8010fe8 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	4a20      	ldr	r2, [pc, #128]	; (801103c <get_wall+0x2e4>)
 8010fbc:	330c      	adds	r3, #12
 8010fbe:	005b      	lsls	r3, r3, #1
 8010fc0:	4413      	add	r3, r2
 8010fc2:	88db      	ldrh	r3, [r3, #6]
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	fa02 f303 	lsl.w	r3, r2, r3
 8010fce:	ea01 0203 	and.w	r2, r1, r3
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	bf0c      	ite	eq
 8010fde:	2301      	moveq	r3, #1
 8010fe0:	2300      	movne	r3, #0
 8010fe2:	b2da      	uxtb	r2, r3
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	2b0e      	cmp	r3, #14
 8010fec:	dc1e      	bgt.n	801102c <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010fee:	4a13      	ldr	r2, [pc, #76]	; (801103c <get_wall+0x2e4>)
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	330c      	adds	r3, #12
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	4413      	add	r3, r2
 8010ff8:	88db      	ldrh	r3, [r3, #6]
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	fa02 f303 	lsl.w	r3, r2, r3
 8011004:	ea01 0203 	and.w	r2, r1, r3
 8011008:	2101      	movs	r1, #1
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	fa01 f303 	lsl.w	r3, r1, r3
 8011010:	429a      	cmp	r2, r3
 8011012:	bf0c      	ite	eq
 8011014:	2301      	moveq	r3, #1
 8011016:	2300      	movne	r3, #0
 8011018:	b2da      	uxtb	r2, r3
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801101e:	e005      	b.n	801102c <get_wall+0x2d4>
		break;
 8011020:	bf00      	nop
 8011022:	e004      	b.n	801102e <get_wall+0x2d6>
		break;
 8011024:	bf00      	nop
 8011026:	e002      	b.n	801102e <get_wall+0x2d6>
		break;
 8011028:	bf00      	nop
 801102a:	e000      	b.n	801102e <get_wall+0x2d6>
		break;
 801102c:	bf00      	nop
	}

}
 801102e:	bf00      	nop
 8011030:	3714      	adds	r7, #20
 8011032:	46bd      	mov	sp, r7
 8011034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop
 801103c:	20000c3c 	.word	0x20000c3c

08011040 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
 801104c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	2201      	movs	r2, #1
 8011052:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	2201      	movs	r2, #1
 8011058:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	2201      	movs	r2, #1
 801105e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	3b01      	subs	r3, #1
 8011064:	2b03      	cmp	r3, #3
 8011066:	f200 8162 	bhi.w	801132e <get_wall_look+0x2ee>
 801106a:	a201      	add	r2, pc, #4	; (adr r2, 8011070 <get_wall_look+0x30>)
 801106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011070:	08011081 	.word	0x08011081
 8011074:	08011129 	.word	0x08011129
 8011078:	080111d1 	.word	0x080111d1
 801107c:	08011279 	.word	0x08011279
	case 1:
		if (y <= 14) {
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	2b0e      	cmp	r3, #14
 8011084:	dc17      	bgt.n	80110b6 <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011086:	4aad      	ldr	r2, [pc, #692]	; (801133c <get_wall_look+0x2fc>)
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	332c      	adds	r3, #44	; 0x2c
 801108c:	005b      	lsls	r3, r3, #1
 801108e:	4413      	add	r3, r2
 8011090:	885b      	ldrh	r3, [r3, #2]
 8011092:	4619      	mov	r1, r3
 8011094:	2201      	movs	r2, #1
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	fa02 f303 	lsl.w	r3, r2, r3
 801109c:	ea01 0203 	and.w	r2, r1, r3
 80110a0:	2101      	movs	r1, #1
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	fa01 f303 	lsl.w	r3, r1, r3
 80110a8:	429a      	cmp	r2, r3
 80110aa:	bf0c      	ite	eq
 80110ac:	2301      	moveq	r3, #1
 80110ae:	2300      	movne	r3, #0
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	dd18      	ble.n	80110ee <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	3b01      	subs	r3, #1
 80110c0:	4a9e      	ldr	r2, [pc, #632]	; (801133c <get_wall_look+0x2fc>)
 80110c2:	331c      	adds	r3, #28
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	889b      	ldrh	r3, [r3, #4]
 80110ca:	4619      	mov	r1, r3
 80110cc:	2201      	movs	r2, #1
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	fa02 f303 	lsl.w	r3, r2, r3
 80110d4:	ea01 0203 	and.w	r2, r1, r3
 80110d8:	2101      	movs	r1, #1
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	fa01 f303 	lsl.w	r3, r1, r3
 80110e0:	429a      	cmp	r2, r3
 80110e2:	bf0c      	ite	eq
 80110e4:	2301      	moveq	r3, #1
 80110e6:	2300      	movne	r3, #0
 80110e8:	b2da      	uxtb	r2, r3
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2b0e      	cmp	r3, #14
 80110f2:	f300 8115 	bgt.w	8011320 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 80110f6:	4a91      	ldr	r2, [pc, #580]	; (801133c <get_wall_look+0x2fc>)
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	331c      	adds	r3, #28
 80110fc:	005b      	lsls	r3, r3, #1
 80110fe:	4413      	add	r3, r2
 8011100:	889b      	ldrh	r3, [r3, #4]
 8011102:	4619      	mov	r1, r3
 8011104:	2201      	movs	r2, #1
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	fa02 f303 	lsl.w	r3, r2, r3
 801110c:	ea01 0203 	and.w	r2, r1, r3
 8011110:	2101      	movs	r1, #1
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	fa01 f303 	lsl.w	r3, r1, r3
 8011118:	429a      	cmp	r2, r3
 801111a:	bf0c      	ite	eq
 801111c:	2301      	moveq	r3, #1
 801111e:	2300      	movne	r3, #0
 8011120:	b2da      	uxtb	r2, r3
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011126:	e0fb      	b.n	8011320 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2b0e      	cmp	r3, #14
 801112c:	dc17      	bgt.n	801115e <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801112e:	4a83      	ldr	r2, [pc, #524]	; (801133c <get_wall_look+0x2fc>)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	331c      	adds	r3, #28
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	4413      	add	r3, r2
 8011138:	889b      	ldrh	r3, [r3, #4]
 801113a:	4619      	mov	r1, r3
 801113c:	2201      	movs	r2, #1
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	fa02 f303 	lsl.w	r3, r2, r3
 8011144:	ea01 0203 	and.w	r2, r1, r3
 8011148:	2101      	movs	r1, #1
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	fa01 f303 	lsl.w	r3, r1, r3
 8011150:	429a      	cmp	r2, r3
 8011152:	bf0c      	ite	eq
 8011154:	2301      	moveq	r3, #1
 8011156:	2300      	movne	r3, #0
 8011158:	b2da      	uxtb	r2, r3
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	2b0e      	cmp	r3, #14
 8011162:	dc17      	bgt.n	8011194 <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011164:	4a75      	ldr	r2, [pc, #468]	; (801133c <get_wall_look+0x2fc>)
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	332c      	adds	r3, #44	; 0x2c
 801116a:	005b      	lsls	r3, r3, #1
 801116c:	4413      	add	r3, r2
 801116e:	885b      	ldrh	r3, [r3, #2]
 8011170:	4619      	mov	r1, r3
 8011172:	2201      	movs	r2, #1
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	fa02 f303 	lsl.w	r3, r2, r3
 801117a:	ea01 0203 	and.w	r2, r1, r3
 801117e:	2101      	movs	r1, #1
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	fa01 f303 	lsl.w	r3, r1, r3
 8011186:	429a      	cmp	r2, r3
 8011188:	bf0c      	ite	eq
 801118a:	2301      	moveq	r3, #1
 801118c:	2300      	movne	r3, #0
 801118e:	b2da      	uxtb	r2, r3
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	2b00      	cmp	r3, #0
 8011198:	f340 80c4 	ble.w	8011324 <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	3b01      	subs	r3, #1
 80111a0:	4a66      	ldr	r2, [pc, #408]	; (801133c <get_wall_look+0x2fc>)
 80111a2:	332c      	adds	r3, #44	; 0x2c
 80111a4:	005b      	lsls	r3, r3, #1
 80111a6:	4413      	add	r3, r2
 80111a8:	885b      	ldrh	r3, [r3, #2]
 80111aa:	4619      	mov	r1, r3
 80111ac:	2201      	movs	r2, #1
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	fa02 f303 	lsl.w	r3, r2, r3
 80111b4:	ea01 0203 	and.w	r2, r1, r3
 80111b8:	2101      	movs	r1, #1
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	fa01 f303 	lsl.w	r3, r1, r3
 80111c0:	429a      	cmp	r2, r3
 80111c2:	bf0c      	ite	eq
 80111c4:	2301      	moveq	r3, #1
 80111c6:	2300      	movne	r3, #0
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80111ce:	e0a9      	b.n	8011324 <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	dd18      	ble.n	8011208 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	3b01      	subs	r3, #1
 80111da:	4a58      	ldr	r2, [pc, #352]	; (801133c <get_wall_look+0x2fc>)
 80111dc:	332c      	adds	r3, #44	; 0x2c
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	4413      	add	r3, r2
 80111e2:	885b      	ldrh	r3, [r3, #2]
 80111e4:	4619      	mov	r1, r3
 80111e6:	2201      	movs	r2, #1
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	fa02 f303 	lsl.w	r3, r2, r3
 80111ee:	ea01 0203 	and.w	r2, r1, r3
 80111f2:	2101      	movs	r1, #1
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	fa01 f303 	lsl.w	r3, r1, r3
 80111fa:	429a      	cmp	r2, r3
 80111fc:	bf0c      	ite	eq
 80111fe:	2301      	moveq	r3, #1
 8011200:	2300      	movne	r3, #0
 8011202:	b2da      	uxtb	r2, r3
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2b0e      	cmp	r3, #14
 801120c:	dc17      	bgt.n	801123e <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801120e:	4a4b      	ldr	r2, [pc, #300]	; (801133c <get_wall_look+0x2fc>)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	331c      	adds	r3, #28
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	4413      	add	r3, r2
 8011218:	889b      	ldrh	r3, [r3, #4]
 801121a:	4619      	mov	r1, r3
 801121c:	2201      	movs	r2, #1
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	fa02 f303 	lsl.w	r3, r2, r3
 8011224:	ea01 0203 	and.w	r2, r1, r3
 8011228:	2101      	movs	r1, #1
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	fa01 f303 	lsl.w	r3, r1, r3
 8011230:	429a      	cmp	r2, r3
 8011232:	bf0c      	ite	eq
 8011234:	2301      	moveq	r3, #1
 8011236:	2300      	movne	r3, #0
 8011238:	b2da      	uxtb	r2, r3
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b00      	cmp	r3, #0
 8011242:	dd71      	ble.n	8011328 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3b01      	subs	r3, #1
 8011248:	4a3c      	ldr	r2, [pc, #240]	; (801133c <get_wall_look+0x2fc>)
 801124a:	331c      	adds	r3, #28
 801124c:	005b      	lsls	r3, r3, #1
 801124e:	4413      	add	r3, r2
 8011250:	889b      	ldrh	r3, [r3, #4]
 8011252:	4619      	mov	r1, r3
 8011254:	2201      	movs	r2, #1
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	fa02 f303 	lsl.w	r3, r2, r3
 801125c:	ea01 0203 	and.w	r2, r1, r3
 8011260:	2101      	movs	r1, #1
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	fa01 f303 	lsl.w	r3, r1, r3
 8011268:	429a      	cmp	r2, r3
 801126a:	bf0c      	ite	eq
 801126c:	2301      	moveq	r3, #1
 801126e:	2300      	movne	r3, #0
 8011270:	b2da      	uxtb	r2, r3
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011276:	e057      	b.n	8011328 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2b00      	cmp	r3, #0
 801127c:	dd18      	ble.n	80112b0 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	3b01      	subs	r3, #1
 8011282:	4a2e      	ldr	r2, [pc, #184]	; (801133c <get_wall_look+0x2fc>)
 8011284:	331c      	adds	r3, #28
 8011286:	005b      	lsls	r3, r3, #1
 8011288:	4413      	add	r3, r2
 801128a:	889b      	ldrh	r3, [r3, #4]
 801128c:	4619      	mov	r1, r3
 801128e:	2201      	movs	r2, #1
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	fa02 f303 	lsl.w	r3, r2, r3
 8011296:	ea01 0203 	and.w	r2, r1, r3
 801129a:	2101      	movs	r1, #1
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	fa01 f303 	lsl.w	r3, r1, r3
 80112a2:	429a      	cmp	r2, r3
 80112a4:	bf0c      	ite	eq
 80112a6:	2301      	moveq	r3, #1
 80112a8:	2300      	movne	r3, #0
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	dd18      	ble.n	80112e8 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	3b01      	subs	r3, #1
 80112ba:	4a20      	ldr	r2, [pc, #128]	; (801133c <get_wall_look+0x2fc>)
 80112bc:	332c      	adds	r3, #44	; 0x2c
 80112be:	005b      	lsls	r3, r3, #1
 80112c0:	4413      	add	r3, r2
 80112c2:	885b      	ldrh	r3, [r3, #2]
 80112c4:	4619      	mov	r1, r3
 80112c6:	2201      	movs	r2, #1
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	fa02 f303 	lsl.w	r3, r2, r3
 80112ce:	ea01 0203 	and.w	r2, r1, r3
 80112d2:	2101      	movs	r1, #1
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	fa01 f303 	lsl.w	r3, r1, r3
 80112da:	429a      	cmp	r2, r3
 80112dc:	bf0c      	ite	eq
 80112de:	2301      	moveq	r3, #1
 80112e0:	2300      	movne	r3, #0
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	2b0e      	cmp	r3, #14
 80112ec:	dc1e      	bgt.n	801132c <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80112ee:	4a13      	ldr	r2, [pc, #76]	; (801133c <get_wall_look+0x2fc>)
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	332c      	adds	r3, #44	; 0x2c
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	4413      	add	r3, r2
 80112f8:	885b      	ldrh	r3, [r3, #2]
 80112fa:	4619      	mov	r1, r3
 80112fc:	2201      	movs	r2, #1
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	fa02 f303 	lsl.w	r3, r2, r3
 8011304:	ea01 0203 	and.w	r2, r1, r3
 8011308:	2101      	movs	r1, #1
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	fa01 f303 	lsl.w	r3, r1, r3
 8011310:	429a      	cmp	r2, r3
 8011312:	bf0c      	ite	eq
 8011314:	2301      	moveq	r3, #1
 8011316:	2300      	movne	r3, #0
 8011318:	b2da      	uxtb	r2, r3
 801131a:	69bb      	ldr	r3, [r7, #24]
 801131c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801131e:	e005      	b.n	801132c <get_wall_look+0x2ec>
		break;
 8011320:	bf00      	nop
 8011322:	e004      	b.n	801132e <get_wall_look+0x2ee>
		break;
 8011324:	bf00      	nop
 8011326:	e002      	b.n	801132e <get_wall_look+0x2ee>
		break;
 8011328:	bf00      	nop
 801132a:	e000      	b.n	801132e <get_wall_look+0x2ee>
		break;
 801132c:	bf00      	nop
	}

}
 801132e:	bf00      	nop
 8011330:	3714      	adds	r7, #20
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	20000c3c 	.word	0x20000c3c

08011340 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011340:	b480      	push	{r7}
 8011342:	b087      	sub	sp, #28
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]
 801134c:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	2b0e      	cmp	r3, #14
 8011352:	dd02      	ble.n	801135a <search_AroundWalkCount+0x1a>
 8011354:	23ff      	movs	r3, #255	; 0xff
 8011356:	82fb      	strh	r3, [r7, #22]
 8011358:	e008      	b.n	801136c <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 801135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135c:	3301      	adds	r3, #1
 801135e:	493e      	ldr	r1, [pc, #248]	; (8011458 <search_AroundWalkCount+0x118>)
 8011360:	6a3a      	ldr	r2, [r7, #32]
 8011362:	0112      	lsls	r2, r2, #4
 8011364:	4413      	add	r3, r2
 8011366:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801136a:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 801136c:	6a3b      	ldr	r3, [r7, #32]
 801136e:	2b0e      	cmp	r3, #14
 8011370:	dd02      	ble.n	8011378 <search_AroundWalkCount+0x38>
 8011372:	23ff      	movs	r3, #255	; 0xff
 8011374:	82bb      	strh	r3, [r7, #20]
 8011376:	e008      	b.n	801138a <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 8011378:	6a3b      	ldr	r3, [r7, #32]
 801137a:	3301      	adds	r3, #1
 801137c:	4936      	ldr	r1, [pc, #216]	; (8011458 <search_AroundWalkCount+0x118>)
 801137e:	011a      	lsls	r2, r3, #4
 8011380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011382:	4413      	add	r3, r2
 8011384:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011388:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 801138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138c:	2b00      	cmp	r3, #0
 801138e:	dc02      	bgt.n	8011396 <search_AroundWalkCount+0x56>
 8011390:	23ff      	movs	r3, #255	; 0xff
 8011392:	827b      	strh	r3, [r7, #18]
 8011394:	e008      	b.n	80113a8 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 8011396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011398:	3b01      	subs	r3, #1
 801139a:	492f      	ldr	r1, [pc, #188]	; (8011458 <search_AroundWalkCount+0x118>)
 801139c:	6a3a      	ldr	r2, [r7, #32]
 801139e:	0112      	lsls	r2, r2, #4
 80113a0:	4413      	add	r3, r2
 80113a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80113a6:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dc02      	bgt.n	80113b4 <search_AroundWalkCount+0x74>
 80113ae:	23ff      	movs	r3, #255	; 0xff
 80113b0:	823b      	strh	r3, [r7, #16]
 80113b2:	e008      	b.n	80113c6 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 80113b4:	6a3b      	ldr	r3, [r7, #32]
 80113b6:	3b01      	subs	r3, #1
 80113b8:	4927      	ldr	r1, [pc, #156]	; (8011458 <search_AroundWalkCount+0x118>)
 80113ba:	011a      	lsls	r2, r3, #4
 80113bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113be:	4413      	add	r3, r2
 80113c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80113c4:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80113c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c8:	3b01      	subs	r3, #1
 80113ca:	2b03      	cmp	r3, #3
 80113cc:	d83e      	bhi.n	801144c <search_AroundWalkCount+0x10c>
 80113ce:	a201      	add	r2, pc, #4	; (adr r2, 80113d4 <search_AroundWalkCount+0x94>)
 80113d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d4:	080113e5 	.word	0x080113e5
 80113d8:	080113ff 	.word	0x080113ff
 80113dc:	08011419 	.word	0x08011419
 80113e0:	08011433 	.word	0x08011433
	case 1:
		*front_count = north_count;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	8afa      	ldrh	r2, [r7, #22]
 80113e8:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	8aba      	ldrh	r2, [r7, #20]
 80113ee:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8a7a      	ldrh	r2, [r7, #18]
 80113f4:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	8a3a      	ldrh	r2, [r7, #16]
 80113fa:	801a      	strh	r2, [r3, #0]
		break;
 80113fc:	e026      	b.n	801144c <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	8aba      	ldrh	r2, [r7, #20]
 8011402:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	8a7a      	ldrh	r2, [r7, #18]
 8011408:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	8a3a      	ldrh	r2, [r7, #16]
 801140e:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	8afa      	ldrh	r2, [r7, #22]
 8011414:	801a      	strh	r2, [r3, #0]
		break;
 8011416:	e019      	b.n	801144c <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	8a7a      	ldrh	r2, [r7, #18]
 801141c:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	8a3a      	ldrh	r2, [r7, #16]
 8011422:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	8afa      	ldrh	r2, [r7, #22]
 8011428:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	8aba      	ldrh	r2, [r7, #20]
 801142e:	801a      	strh	r2, [r3, #0]
		break;
 8011430:	e00c      	b.n	801144c <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	8a3a      	ldrh	r2, [r7, #16]
 8011436:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	8afa      	ldrh	r2, [r7, #22]
 801143c:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8aba      	ldrh	r2, [r7, #20]
 8011442:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	8a7a      	ldrh	r2, [r7, #18]
 8011448:	801a      	strh	r2, [r3, #0]
		break;
 801144a:	bf00      	nop

	}


}
 801144c:	bf00      	nop
 801144e:	371c      	adds	r7, #28
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr
 8011458:	20000d30 	.word	0x20000d30

0801145c <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 801145c:	b480      	push	{r7}
 801145e:	b087      	sub	sp, #28
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	607a      	str	r2, [r7, #4]
 8011468:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	2b0e      	cmp	r3, #14
 801146e:	dd03      	ble.n	8011478 <search_AroundDijkstraCount+0x1c>
 8011470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011474:	82fb      	strh	r3, [r7, #22]
 8011476:	e00a      	b.n	801148e <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 8011478:	4944      	ldr	r1, [pc, #272]	; (801158c <search_AroundDijkstraCount+0x130>)
 801147a:	6a3a      	ldr	r2, [r7, #32]
 801147c:	4613      	mov	r3, r2
 801147e:	011b      	lsls	r3, r3, #4
 8011480:	1a9b      	subs	r3, r3, r2
 8011482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011484:	4413      	add	r3, r2
 8011486:	33f0      	adds	r3, #240	; 0xf0
 8011488:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801148c:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 801148e:	6a3b      	ldr	r3, [r7, #32]
 8011490:	2b0e      	cmp	r3, #14
 8011492:	dd03      	ble.n	801149c <search_AroundDijkstraCount+0x40>
 8011494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011498:	82bb      	strh	r3, [r7, #20]
 801149a:	e009      	b.n	80114b0 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 801149c:	493b      	ldr	r1, [pc, #236]	; (801158c <search_AroundDijkstraCount+0x130>)
 801149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114a0:	4613      	mov	r3, r2
 80114a2:	011b      	lsls	r3, r3, #4
 80114a4:	1a9b      	subs	r3, r3, r2
 80114a6:	6a3a      	ldr	r2, [r7, #32]
 80114a8:	4413      	add	r3, r2
 80114aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114ae:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	dc03      	bgt.n	80114be <search_AroundDijkstraCount+0x62>
 80114b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114ba:	827b      	strh	r3, [r7, #18]
 80114bc:	e00b      	b.n	80114d6 <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 80114be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c0:	1e59      	subs	r1, r3, #1
 80114c2:	4832      	ldr	r0, [pc, #200]	; (801158c <search_AroundDijkstraCount+0x130>)
 80114c4:	6a3a      	ldr	r2, [r7, #32]
 80114c6:	4613      	mov	r3, r2
 80114c8:	011b      	lsls	r3, r3, #4
 80114ca:	1a9b      	subs	r3, r3, r2
 80114cc:	440b      	add	r3, r1
 80114ce:	33f0      	adds	r3, #240	; 0xf0
 80114d0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80114d4:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 80114d6:	6a3b      	ldr	r3, [r7, #32]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dc03      	bgt.n	80114e4 <search_AroundDijkstraCount+0x88>
 80114dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114e0:	823b      	strh	r3, [r7, #16]
 80114e2:	e00a      	b.n	80114fa <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	1e59      	subs	r1, r3, #1
 80114e8:	4828      	ldr	r0, [pc, #160]	; (801158c <search_AroundDijkstraCount+0x130>)
 80114ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ec:	4613      	mov	r3, r2
 80114ee:	011b      	lsls	r3, r3, #4
 80114f0:	1a9b      	subs	r3, r3, r2
 80114f2:	440b      	add	r3, r1
 80114f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80114f8:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80114fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fc:	3b01      	subs	r3, #1
 80114fe:	2b03      	cmp	r3, #3
 8011500:	d83e      	bhi.n	8011580 <search_AroundDijkstraCount+0x124>
 8011502:	a201      	add	r2, pc, #4	; (adr r2, 8011508 <search_AroundDijkstraCount+0xac>)
 8011504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011508:	08011519 	.word	0x08011519
 801150c:	08011533 	.word	0x08011533
 8011510:	0801154d 	.word	0x0801154d
 8011514:	08011567 	.word	0x08011567
	case 1:
		*front_count = north_count;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	8afa      	ldrh	r2, [r7, #22]
 801151c:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	8aba      	ldrh	r2, [r7, #20]
 8011522:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	8a7a      	ldrh	r2, [r7, #18]
 8011528:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	8a3a      	ldrh	r2, [r7, #16]
 801152e:	801a      	strh	r2, [r3, #0]
		break;
 8011530:	e026      	b.n	8011580 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	8aba      	ldrh	r2, [r7, #20]
 8011536:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	8a7a      	ldrh	r2, [r7, #18]
 801153c:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	8a3a      	ldrh	r2, [r7, #16]
 8011542:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	8afa      	ldrh	r2, [r7, #22]
 8011548:	801a      	strh	r2, [r3, #0]
		break;
 801154a:	e019      	b.n	8011580 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	8a7a      	ldrh	r2, [r7, #18]
 8011550:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	8a3a      	ldrh	r2, [r7, #16]
 8011556:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	8afa      	ldrh	r2, [r7, #22]
 801155c:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	8aba      	ldrh	r2, [r7, #20]
 8011562:	801a      	strh	r2, [r3, #0]
		break;
 8011564:	e00c      	b.n	8011580 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	8a3a      	ldrh	r2, [r7, #16]
 801156a:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	8afa      	ldrh	r2, [r7, #22]
 8011570:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	8aba      	ldrh	r2, [r7, #20]
 8011576:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	8a7a      	ldrh	r2, [r7, #18]
 801157c:	801a      	strh	r2, [r3, #0]
		break;
 801157e:	bf00      	nop

	}


}
 8011580:	bf00      	nop
 8011582:	371c      	adds	r7, #28
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr
 801158c:	20000f30 	.word	0x20000f30

08011590 <create_DijkstraMap>:




void create_DijkstraMap(void){
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8011596:	b081      	sub	sp, #4
 8011598:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 801159a:	23b4      	movs	r3, #180	; 0xb4
 801159c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80115a0:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80115a4:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 80115a6:	237f      	movs	r3, #127	; 0x7f
 80115a8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80115ac:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80115b0:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 80115b2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80115b6:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80115ba:	4a1d      	ldr	r2, [pc, #116]	; (8011630 <create_DijkstraMap+0xa0>)
 80115bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80115be:	c303      	stmia	r3!, {r0, r1}
 80115c0:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 80115c2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80115c6:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80115ca:	4a1a      	ldr	r2, [pc, #104]	; (8011634 <create_DijkstraMap+0xa4>)
 80115cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80115ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 80115d2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80115d6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80115da:	4618      	mov	r0, r3
 80115dc:	f003 fb1a 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_y);
 80115e0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80115e4:	f103 0320 	add.w	r3, r3, #32
 80115e8:	3b0c      	subs	r3, #12
 80115ea:	4618      	mov	r0, r3
 80115ec:	f003 fb12 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_matrix);
 80115f0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80115f4:	3b14      	subs	r3, #20
 80115f6:	4618      	mov	r0, r3
 80115f8:	f003 fb0c 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_direction);
 80115fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011600:	3b3c      	subs	r3, #60	; 0x3c
 8011602:	4618      	mov	r0, r3
 8011604:	f003 fb06 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_cost);
 8011608:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801160c:	3b64      	subs	r3, #100	; 0x64
 801160e:	4618      	mov	r0, r3
 8011610:	f003 fb00 	bl	8014c14 <initStack_walk>
	for(int i=0;i<=15;i++){
 8011614:	2300      	movs	r3, #0
 8011616:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801161a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801161e:	6013      	str	r3, [r2, #0]
 8011620:	e04e      	b.n	80116c0 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 8011622:	2300      	movs	r3, #0
 8011624:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011628:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801162c:	6013      	str	r3, [r2, #0]
 801162e:	e035      	b.n	801169c <create_DijkstraMap+0x10c>
 8011630:	0802300c 	.word	0x0802300c
 8011634:	08023018 	.word	0x08023018
			Dijkstra.column_count[i][j]=65535;
 8011638:	49c6      	ldr	r1, [pc, #792]	; (8011954 <create_DijkstraMap+0x3c4>)
 801163a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801163e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	4613      	mov	r3, r2
 8011646:	011b      	lsls	r3, r3, #4
 8011648:	1a9b      	subs	r3, r3, r2
 801164a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801164e:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011652:	6812      	ldr	r2, [r2, #0]
 8011654:	4413      	add	r3, r2
 8011656:	33f0      	adds	r3, #240	; 0xf0
 8011658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801165c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 8011660:	49bc      	ldr	r1, [pc, #752]	; (8011954 <create_DijkstraMap+0x3c4>)
 8011662:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011666:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	4613      	mov	r3, r2
 801166e:	011b      	lsls	r3, r3, #4
 8011670:	1a9b      	subs	r3, r3, r2
 8011672:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011676:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801167a:	6812      	ldr	r2, [r2, #0]
 801167c:	4413      	add	r3, r2
 801167e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011682:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 8011686:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801168a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	3301      	adds	r3, #1
 8011692:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011696:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801169a:	6013      	str	r3, [r2, #0]
 801169c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80116a0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2b0e      	cmp	r3, #14
 80116a8:	ddc6      	ble.n	8011638 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 80116aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80116ae:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	3301      	adds	r3, #1
 80116b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116ba:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80116be:	6013      	str	r3, [r2, #0]
 80116c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80116c4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	2b0f      	cmp	r3, #15
 80116cc:	dda9      	ble.n	8011622 <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 80116ce:	4ba1      	ldr	r3, [pc, #644]	; (8011954 <create_DijkstraMap+0x3c4>)
 80116d0:	2200      	movs	r2, #0
 80116d2:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 80116d6:	4b9f      	ldr	r3, [pc, #636]	; (8011954 <create_DijkstraMap+0x3c4>)
 80116d8:	2200      	movs	r2, #0
 80116da:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 80116de:	4b9d      	ldr	r3, [pc, #628]	; (8011954 <create_DijkstraMap+0x3c4>)
 80116e0:	2200      	movs	r2, #0
 80116e2:	805a      	strh	r2, [r3, #2]
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 80116e4:	4b9b      	ldr	r3, [pc, #620]	; (8011954 <create_DijkstraMap+0x3c4>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	841a      	strh	r2, [r3, #32]
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80116ea:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80116ee:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80116f2:	2101      	movs	r1, #1
 80116f4:	4618      	mov	r0, r3
 80116f6:	f003 fa9d 	bl	8014c34 <pushStack_walk>
 80116fa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80116fe:	f103 0320 	add.w	r3, r3, #32
 8011702:	3b0c      	subs	r3, #12
 8011704:	2100      	movs	r1, #0
 8011706:	4618      	mov	r0, r3
 8011708:	f003 fa94 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801170c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011710:	3b14      	subs	r3, #20
 8011712:	2100      	movs	r1, #0
 8011714:	4618      	mov	r0, r3
 8011716:	f003 fa8d 	bl	8014c34 <pushStack_walk>
 801171a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801171e:	3b3c      	subs	r3, #60	; 0x3c
 8011720:	2108      	movs	r1, #8
 8011722:	4618      	mov	r0, r3
 8011724:	f003 fa86 	bl	8014c34 <pushStack_walk>
 8011728:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801172c:	3b64      	subs	r3, #100	; 0x64
 801172e:	2100      	movs	r1, #0
 8011730:	4618      	mov	r0, r3
 8011732:	f003 fa7f 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 8011736:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801173a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801173e:	2102      	movs	r1, #2
 8011740:	4618      	mov	r0, r3
 8011742:	f003 fa77 	bl	8014c34 <pushStack_walk>
 8011746:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801174a:	f103 0320 	add.w	r3, r3, #32
 801174e:	3b0c      	subs	r3, #12
 8011750:	2100      	movs	r1, #0
 8011752:	4618      	mov	r0, r3
 8011754:	f003 fa6e 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011758:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801175c:	3b14      	subs	r3, #20
 801175e:	2100      	movs	r1, #0
 8011760:	4618      	mov	r0, r3
 8011762:	f003 fa67 	bl	8014c34 <pushStack_walk>
 8011766:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801176a:	3b3c      	subs	r3, #60	; 0x3c
 801176c:	2108      	movs	r1, #8
 801176e:	4618      	mov	r0, r3
 8011770:	f003 fa60 	bl	8014c34 <pushStack_walk>
 8011774:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011778:	3b64      	subs	r3, #100	; 0x64
 801177a:	2100      	movs	r1, #0
 801177c:	4618      	mov	r0, r3
 801177e:	f003 fa59 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011782:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011786:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801178a:	2101      	movs	r1, #1
 801178c:	4618      	mov	r0, r3
 801178e:	f003 fa51 	bl	8014c34 <pushStack_walk>
 8011792:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011796:	f103 0320 	add.w	r3, r3, #32
 801179a:	3b0c      	subs	r3, #12
 801179c:	2100      	movs	r1, #0
 801179e:	4618      	mov	r0, r3
 80117a0:	f003 fa48 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80117a4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80117a8:	3b14      	subs	r3, #20
 80117aa:	2101      	movs	r1, #1
 80117ac:	4618      	mov	r0, r3
 80117ae:	f003 fa41 	bl	8014c34 <pushStack_walk>
 80117b2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80117b6:	3b3c      	subs	r3, #60	; 0x3c
 80117b8:	2108      	movs	r1, #8
 80117ba:	4618      	mov	r0, r3
 80117bc:	f003 fa3a 	bl	8014c34 <pushStack_walk>
 80117c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80117c4:	3b64      	subs	r3, #100	; 0x64
 80117c6:	2100      	movs	r1, #0
 80117c8:	4618      	mov	r0, r3
 80117ca:	f003 fa33 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 80117ce:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80117d2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80117d6:	2101      	movs	r1, #1
 80117d8:	4618      	mov	r0, r3
 80117da:	f003 fa2b 	bl	8014c34 <pushStack_walk>
 80117de:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80117e2:	f103 0320 	add.w	r3, r3, #32
 80117e6:	3b0c      	subs	r3, #12
 80117e8:	2101      	movs	r1, #1
 80117ea:	4618      	mov	r0, r3
 80117ec:	f003 fa22 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80117f0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80117f4:	3b14      	subs	r3, #20
 80117f6:	2101      	movs	r1, #1
 80117f8:	4618      	mov	r0, r3
 80117fa:	f003 fa1b 	bl	8014c34 <pushStack_walk>
 80117fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011802:	3b3c      	subs	r3, #60	; 0x3c
 8011804:	2108      	movs	r1, #8
 8011806:	4618      	mov	r0, r3
 8011808:	f003 fa14 	bl	8014c34 <pushStack_walk>
 801180c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011810:	3b64      	subs	r3, #100	; 0x64
 8011812:	2100      	movs	r1, #0
 8011814:	4618      	mov	r0, r3
 8011816:	f003 fa0d 	bl	8014c34 <pushStack_walk>



	unsigned short count_number = 1;
 801181a:	2301      	movs	r3, #1
 801181c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011820:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8011824:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 8011826:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801182a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801182e:	4618      	mov	r0, r3
 8011830:	f003 fa2a 	bl	8014c88 <popStack_walk>
 8011834:	4603      	mov	r3, r0
 8011836:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801183a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801183e:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8011840:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011844:	f103 0320 	add.w	r3, r3, #32
 8011848:	3b0c      	subs	r3, #12
 801184a:	4618      	mov	r0, r3
 801184c:	f003 fa1c 	bl	8014c88 <popStack_walk>
 8011850:	4603      	mov	r3, r0
 8011852:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011856:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801185a:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 801185c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011860:	3b14      	subs	r3, #20
 8011862:	4618      	mov	r0, r3
 8011864:	f003 fa10 	bl	8014c88 <popStack_walk>
 8011868:	4603      	mov	r3, r0
 801186a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801186e:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8011872:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8011874:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011878:	3b3c      	subs	r3, #60	; 0x3c
 801187a:	4618      	mov	r0, r3
 801187c:	f003 fa04 	bl	8014c88 <popStack_walk>
 8011880:	4603      	mov	r3, r0
 8011882:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011886:	f102 0266 	add.w	r2, r2, #102	; 0x66
 801188a:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 801188c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011890:	3b64      	subs	r3, #100	; 0x64
 8011892:	4618      	mov	r0, r3
 8011894:	f003 f9f8 	bl	8014c88 <popStack_walk>
 8011898:	4603      	mov	r3, r0
 801189a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801189e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80118a2:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80118a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118a8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118b2:	4293      	cmp	r3, r2
 80118b4:	f001 83a9 	beq.w	801300a <create_DijkstraMap+0x1a7a>
 80118b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118bc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80118c0:	881b      	ldrh	r3, [r3, #0]
 80118c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118c6:	4293      	cmp	r3, r2
 80118c8:	f001 839f 	beq.w	801300a <create_DijkstraMap+0x1a7a>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 80118cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118d0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80118d4:	881b      	ldrh	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f040 85c5 	bne.w	8012466 <create_DijkstraMap+0xed6>
			if(Ycoordinate <= 13){
 80118dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118e0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	2b0d      	cmp	r3, #13
 80118e8:	f200 80f2 	bhi.w	8011ad0 <create_DijkstraMap+0x540>
				if(Direction==SLANT_NORTH){
 80118ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118f0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80118f4:	881b      	ldrh	r3, [r3, #0]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d12e      	bne.n	8011958 <create_DijkstraMap+0x3c8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80118fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118fe:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	3301      	adds	r3, #1
 8011906:	b29b      	uxth	r3, r3
 8011908:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801190c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011910:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011912:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011916:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801191e:	2b04      	cmp	r3, #4
 8011920:	dd05      	ble.n	801192e <create_DijkstraMap+0x39e>
 8011922:	2304      	movs	r3, #4
 8011924:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011928:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801192c:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 801192e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011932:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011936:	f9b3 2000 	ldrsh.w	r2, [r3]
 801193a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801193e:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011942:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011946:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801194a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801194e:	8013      	strh	r3, [r2, #0]
 8011950:	e012      	b.n	8011978 <create_DijkstraMap+0x3e8>
 8011952:	bf00      	nop
 8011954:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011958:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801195c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011966:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801196a:	8013      	strh	r3, [r2, #0]
 801196c:	2300      	movs	r3, #0
 801196e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011972:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011976:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011978:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801197c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011980:	881b      	ldrh	r3, [r3, #0]
 8011982:	3301      	adds	r3, #1
 8011984:	4a70      	ldr	r2, [pc, #448]	; (8011b48 <create_DijkstraMap+0x5b8>)
 8011986:	330c      	adds	r3, #12
 8011988:	005b      	lsls	r3, r3, #1
 801198a:	4413      	add	r3, r2
 801198c:	88db      	ldrh	r3, [r3, #6]
 801198e:	461a      	mov	r2, r3
 8011990:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011994:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011998:	881b      	ldrh	r3, [r3, #0]
 801199a:	fa42 f303 	asr.w	r3, r2, r3
 801199e:	f003 0301 	and.w	r3, r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f040 8094 	bne.w	8011ad0 <create_DijkstraMap+0x540>
 80119a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119ac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80119b0:	881a      	ldrh	r2, [r3, #0]
 80119b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119b6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	1c59      	adds	r1, r3, #1
 80119be:	4863      	ldr	r0, [pc, #396]	; (8011b4c <create_DijkstraMap+0x5bc>)
 80119c0:	4613      	mov	r3, r2
 80119c2:	011b      	lsls	r3, r3, #4
 80119c4:	1a9b      	subs	r3, r3, r2
 80119c6:	440b      	add	r3, r1
 80119c8:	33f0      	adds	r3, #240	; 0xf0
 80119ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80119ce:	461c      	mov	r4, r3
 80119d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119d4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80119d8:	881a      	ldrh	r2, [r3, #0]
 80119da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119de:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80119e2:	8819      	ldrh	r1, [r3, #0]
 80119e4:	4859      	ldr	r0, [pc, #356]	; (8011b4c <create_DijkstraMap+0x5bc>)
 80119e6:	4613      	mov	r3, r2
 80119e8:	011b      	lsls	r3, r3, #4
 80119ea:	1a9b      	subs	r3, r3, r2
 80119ec:	440b      	add	r3, r1
 80119ee:	33f0      	adds	r3, #240	; 0xf0
 80119f0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80119f4:	461a      	mov	r2, r3
 80119f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119fa:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80119fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a02:	4413      	add	r3, r2
 8011a04:	429c      	cmp	r4, r3
 8011a06:	dd63      	ble.n	8011ad0 <create_DijkstraMap+0x540>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011a08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a0c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a10:	881a      	ldrh	r2, [r3, #0]
 8011a12:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a16:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a1a:	8819      	ldrh	r1, [r3, #0]
 8011a1c:	484b      	ldr	r0, [pc, #300]	; (8011b4c <create_DijkstraMap+0x5bc>)
 8011a1e:	4613      	mov	r3, r2
 8011a20:	011b      	lsls	r3, r3, #4
 8011a22:	1a9b      	subs	r3, r3, r2
 8011a24:	440b      	add	r3, r1
 8011a26:	33f0      	adds	r3, #240	; 0xf0
 8011a28:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011a2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a30:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a3a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011a3e:	8812      	ldrh	r2, [r2, #0]
 8011a40:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011a44:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011a48:	8809      	ldrh	r1, [r1, #0]
 8011a4a:	3101      	adds	r1, #1
 8011a4c:	4403      	add	r3, r0
 8011a4e:	b29c      	uxth	r4, r3
 8011a50:	483e      	ldr	r0, [pc, #248]	; (8011b4c <create_DijkstraMap+0x5bc>)
 8011a52:	4613      	mov	r3, r2
 8011a54:	011b      	lsls	r3, r3, #4
 8011a56:	1a9b      	subs	r3, r3, r2
 8011a58:	440b      	add	r3, r1
 8011a5a:	33f0      	adds	r3, #240	; 0xf0
 8011a5c:	4622      	mov	r2, r4
 8011a5e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011a62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a66:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a6a:	881a      	ldrh	r2, [r3, #0]
 8011a6c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011a70:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011a74:	4611      	mov	r1, r2
 8011a76:	4618      	mov	r0, r3
 8011a78:	f003 f8dc 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011a7c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a80:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	3301      	adds	r3, #1
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011a8e:	f103 0320 	add.w	r3, r3, #32
 8011a92:	3b0c      	subs	r3, #12
 8011a94:	4611      	mov	r1, r2
 8011a96:	4618      	mov	r0, r3
 8011a98:	f003 f8cc 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011a9c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011aa0:	3b14      	subs	r3, #20
 8011aa2:	2100      	movs	r1, #0
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f003 f8c5 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011aaa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011aae:	3b3c      	subs	r3, #60	; 0x3c
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f003 f8be 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011ab8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011abc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011ac0:	881a      	ldrh	r2, [r3, #0]
 8011ac2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011ac6:	3b64      	subs	r3, #100	; 0x64
 8011ac8:	4611      	mov	r1, r2
 8011aca:	4618      	mov	r0, r3
 8011acc:	f003 f8b2 	bl	8014c34 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011ad0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ad4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f000 80f4 	beq.w	8011cc8 <create_DijkstraMap+0x738>
				if(Direction==SLANT_SOUTH){
 8011ae0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ae4:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011ae8:	881b      	ldrh	r3, [r3, #0]
 8011aea:	2b04      	cmp	r3, #4
 8011aec:	d130      	bne.n	8011b50 <create_DijkstraMap+0x5c0>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011aee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011af2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011af6:	881b      	ldrh	r3, [r3, #0]
 8011af8:	3301      	adds	r3, #1
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b00:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b04:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011b06:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b0a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b12:	2b04      	cmp	r3, #4
 8011b14:	dd05      	ble.n	8011b22 <create_DijkstraMap+0x592>
 8011b16:	2304      	movs	r3, #4
 8011b18:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b1c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b20:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011b22:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b26:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b2e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011b32:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011b36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011b3a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b3e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011b42:	8013      	strh	r3, [r2, #0]
 8011b44:	e014      	b.n	8011b70 <create_DijkstraMap+0x5e0>
 8011b46:	bf00      	nop
 8011b48:	20000c3c 	.word	0x20000c3c
 8011b4c:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011b50:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011b54:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011b58:	881b      	ldrh	r3, [r3, #0]
 8011b5a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b5e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011b62:	8013      	strh	r3, [r2, #0]
 8011b64:	2300      	movs	r3, #0
 8011b66:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b6a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b6e:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011b70:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b74:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	4a70      	ldr	r2, [pc, #448]	; (8011d40 <create_DijkstraMap+0x7b0>)
 8011b7e:	330c      	adds	r3, #12
 8011b80:	005b      	lsls	r3, r3, #1
 8011b82:	4413      	add	r3, r2
 8011b84:	88db      	ldrh	r3, [r3, #6]
 8011b86:	461a      	mov	r2, r3
 8011b88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b8c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	fa42 f303 	asr.w	r3, r2, r3
 8011b96:	f003 0301 	and.w	r3, r3, #1
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f040 8094 	bne.w	8011cc8 <create_DijkstraMap+0x738>
 8011ba0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ba4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ba8:	881a      	ldrh	r2, [r3, #0]
 8011baa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bae:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	1e59      	subs	r1, r3, #1
 8011bb6:	4863      	ldr	r0, [pc, #396]	; (8011d44 <create_DijkstraMap+0x7b4>)
 8011bb8:	4613      	mov	r3, r2
 8011bba:	011b      	lsls	r3, r3, #4
 8011bbc:	1a9b      	subs	r3, r3, r2
 8011bbe:	440b      	add	r3, r1
 8011bc0:	33f0      	adds	r3, #240	; 0xf0
 8011bc2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011bc6:	461c      	mov	r4, r3
 8011bc8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bcc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011bd0:	881a      	ldrh	r2, [r3, #0]
 8011bd2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bd6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011bda:	8819      	ldrh	r1, [r3, #0]
 8011bdc:	4859      	ldr	r0, [pc, #356]	; (8011d44 <create_DijkstraMap+0x7b4>)
 8011bde:	4613      	mov	r3, r2
 8011be0:	011b      	lsls	r3, r3, #4
 8011be2:	1a9b      	subs	r3, r3, r2
 8011be4:	440b      	add	r3, r1
 8011be6:	33f0      	adds	r3, #240	; 0xf0
 8011be8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011bec:	461a      	mov	r2, r3
 8011bee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bf2:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	429c      	cmp	r4, r3
 8011bfe:	dd63      	ble.n	8011cc8 <create_DijkstraMap+0x738>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011c00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c04:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c08:	881a      	ldrh	r2, [r3, #0]
 8011c0a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c0e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c12:	8819      	ldrh	r1, [r3, #0]
 8011c14:	484b      	ldr	r0, [pc, #300]	; (8011d44 <create_DijkstraMap+0x7b4>)
 8011c16:	4613      	mov	r3, r2
 8011c18:	011b      	lsls	r3, r3, #4
 8011c1a:	1a9b      	subs	r3, r3, r2
 8011c1c:	440b      	add	r3, r1
 8011c1e:	33f0      	adds	r3, #240	; 0xf0
 8011c20:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011c24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c28:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011c2c:	881b      	ldrh	r3, [r3, #0]
 8011c2e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c32:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011c36:	8812      	ldrh	r2, [r2, #0]
 8011c38:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011c3c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011c40:	8809      	ldrh	r1, [r1, #0]
 8011c42:	3901      	subs	r1, #1
 8011c44:	4403      	add	r3, r0
 8011c46:	b29c      	uxth	r4, r3
 8011c48:	483e      	ldr	r0, [pc, #248]	; (8011d44 <create_DijkstraMap+0x7b4>)
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	011b      	lsls	r3, r3, #4
 8011c4e:	1a9b      	subs	r3, r3, r2
 8011c50:	440b      	add	r3, r1
 8011c52:	33f0      	adds	r3, #240	; 0xf0
 8011c54:	4622      	mov	r2, r4
 8011c56:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011c5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c5e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c62:	881a      	ldrh	r2, [r3, #0]
 8011c64:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011c68:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f002 ffe0 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011c74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c78:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011c86:	f103 0320 	add.w	r3, r3, #32
 8011c8a:	3b0c      	subs	r3, #12
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f002 ffd0 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011c94:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011c98:	3b14      	subs	r3, #20
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f002 ffc9 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011ca2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011ca6:	3b3c      	subs	r3, #60	; 0x3c
 8011ca8:	2104      	movs	r1, #4
 8011caa:	4618      	mov	r0, r3
 8011cac:	f002 ffc2 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011cb0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cb4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011cb8:	881a      	ldrh	r2, [r3, #0]
 8011cba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011cbe:	3b64      	subs	r3, #100	; 0x64
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f002 ffb6 	bl	8014c34 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011cc8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ccc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	2b0e      	cmp	r3, #14
 8011cd4:	f200 81da 	bhi.w	801208c <create_DijkstraMap+0xafc>
				if(Direction==SLANT_SOUTH_EAST){
 8011cd8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cdc:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011ce0:	881b      	ldrh	r3, [r3, #0]
 8011ce2:	2b03      	cmp	r3, #3
 8011ce4:	d130      	bne.n	8011d48 <create_DijkstraMap+0x7b8>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011ce6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cea:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011cee:	881b      	ldrh	r3, [r3, #0]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011cf8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011cfc:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011cfe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d02:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d0a:	2b05      	cmp	r3, #5
 8011d0c:	dd05      	ble.n	8011d1a <create_DijkstraMap+0x78a>
 8011d0e:	2305      	movs	r3, #5
 8011d10:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d14:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d18:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011d1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d1e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d26:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011d2a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011d2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011d32:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d36:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011d3a:	8013      	strh	r3, [r2, #0]
 8011d3c:	e014      	b.n	8011d68 <create_DijkstraMap+0x7d8>
 8011d3e:	bf00      	nop
 8011d40:	20000c3c 	.word	0x20000c3c
 8011d44:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011d48:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011d4c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d56:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011d5a:	8013      	strh	r3, [r2, #0]
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d62:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d66:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011d68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d6c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d70:	881b      	ldrh	r3, [r3, #0]
 8011d72:	4a68      	ldr	r2, [pc, #416]	; (8011f14 <create_DijkstraMap+0x984>)
 8011d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d78:	461a      	mov	r2, r3
 8011d7a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d7e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	fa42 f303 	asr.w	r3, r2, r3
 8011d88:	f003 0301 	and.w	r3, r3, #1
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	f040 808e 	bne.w	8011eae <create_DijkstraMap+0x91e>
 8011d92:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d96:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d9a:	881a      	ldrh	r2, [r3, #0]
 8011d9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011da0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011da4:	8819      	ldrh	r1, [r3, #0]
 8011da6:	485c      	ldr	r0, [pc, #368]	; (8011f18 <create_DijkstraMap+0x988>)
 8011da8:	4613      	mov	r3, r2
 8011daa:	011b      	lsls	r3, r3, #4
 8011dac:	1a9b      	subs	r3, r3, r2
 8011dae:	440b      	add	r3, r1
 8011db0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011db4:	461c      	mov	r4, r3
 8011db6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011dbe:	881a      	ldrh	r2, [r3, #0]
 8011dc0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dc4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011dc8:	8819      	ldrh	r1, [r3, #0]
 8011dca:	4853      	ldr	r0, [pc, #332]	; (8011f18 <create_DijkstraMap+0x988>)
 8011dcc:	4613      	mov	r3, r2
 8011dce:	011b      	lsls	r3, r3, #4
 8011dd0:	1a9b      	subs	r3, r3, r2
 8011dd2:	440b      	add	r3, r1
 8011dd4:	33f0      	adds	r3, #240	; 0xf0
 8011dd6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011de0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011de8:	4413      	add	r3, r2
 8011dea:	429c      	cmp	r4, r3
 8011dec:	dd5f      	ble.n	8011eae <create_DijkstraMap+0x91e>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011dee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011df2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011df6:	881a      	ldrh	r2, [r3, #0]
 8011df8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dfc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011e00:	8819      	ldrh	r1, [r3, #0]
 8011e02:	4845      	ldr	r0, [pc, #276]	; (8011f18 <create_DijkstraMap+0x988>)
 8011e04:	4613      	mov	r3, r2
 8011e06:	011b      	lsls	r3, r3, #4
 8011e08:	1a9b      	subs	r3, r3, r2
 8011e0a:	440b      	add	r3, r1
 8011e0c:	33f0      	adds	r3, #240	; 0xf0
 8011e0e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011e12:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e16:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011e1a:	881b      	ldrh	r3, [r3, #0]
 8011e1c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e20:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011e24:	8812      	ldrh	r2, [r2, #0]
 8011e26:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011e2a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011e2e:	8809      	ldrh	r1, [r1, #0]
 8011e30:	4403      	add	r3, r0
 8011e32:	b29c      	uxth	r4, r3
 8011e34:	4838      	ldr	r0, [pc, #224]	; (8011f18 <create_DijkstraMap+0x988>)
 8011e36:	4613      	mov	r3, r2
 8011e38:	011b      	lsls	r3, r3, #4
 8011e3a:	1a9b      	subs	r3, r3, r2
 8011e3c:	440b      	add	r3, r1
 8011e3e:	4622      	mov	r2, r4
 8011e40:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011e44:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e48:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e4c:	881a      	ldrh	r2, [r3, #0]
 8011e4e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011e52:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011e56:	4611      	mov	r1, r2
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f002 feeb 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011e5e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e62:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011e66:	881a      	ldrh	r2, [r3, #0]
 8011e68:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011e6c:	f103 0320 	add.w	r3, r3, #32
 8011e70:	3b0c      	subs	r3, #12
 8011e72:	4611      	mov	r1, r2
 8011e74:	4618      	mov	r0, r3
 8011e76:	f002 fedd 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011e7a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011e7e:	3b14      	subs	r3, #20
 8011e80:	2101      	movs	r1, #1
 8011e82:	4618      	mov	r0, r3
 8011e84:	f002 fed6 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011e88:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011e8c:	3b3c      	subs	r3, #60	; 0x3c
 8011e8e:	2103      	movs	r1, #3
 8011e90:	4618      	mov	r0, r3
 8011e92:	f002 fecf 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011e96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e9a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e9e:	881a      	ldrh	r2, [r3, #0]
 8011ea0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011ea4:	3b64      	subs	r3, #100	; 0x64
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f002 fec3 	bl	8014c34 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011eae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011eb2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d12f      	bne.n	8011f1c <create_DijkstraMap+0x98c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011ebc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ec0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011ec4:	881b      	ldrh	r3, [r3, #0]
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ece:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011ed2:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011ed4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ed8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ee0:	2b05      	cmp	r3, #5
 8011ee2:	dd05      	ble.n	8011ef0 <create_DijkstraMap+0x960>
 8011ee4:	2305      	movs	r3, #5
 8011ee6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011eea:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011eee:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011ef0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ef4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011ef8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011efc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f00:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011f04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011f08:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f0c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f10:	8013      	strh	r3, [r2, #0]
 8011f12:	e013      	b.n	8011f3c <create_DijkstraMap+0x9ac>
 8011f14:	20000c3c 	.word	0x20000c3c
 8011f18:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011f1c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f20:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011f24:	881b      	ldrh	r3, [r3, #0]
 8011f26:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f2a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f2e:	8013      	strh	r3, [r2, #0]
 8011f30:	2300      	movs	r3, #0
 8011f32:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f36:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f3a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011f3c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f40:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f44:	881b      	ldrh	r3, [r3, #0]
 8011f46:	4a6f      	ldr	r2, [pc, #444]	; (8012104 <create_DijkstraMap+0xb74>)
 8011f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f52:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f56:	881b      	ldrh	r3, [r3, #0]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	fa42 f303 	asr.w	r3, r2, r3
 8011f5e:	f003 0301 	and.w	r3, r3, #1
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	f040 8092 	bne.w	801208c <create_DijkstraMap+0xafc>
 8011f68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f6c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f70:	881b      	ldrh	r3, [r3, #0]
 8011f72:	1c5a      	adds	r2, r3, #1
 8011f74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f78:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f7c:	8819      	ldrh	r1, [r3, #0]
 8011f7e:	4862      	ldr	r0, [pc, #392]	; (8012108 <create_DijkstraMap+0xb78>)
 8011f80:	4613      	mov	r3, r2
 8011f82:	011b      	lsls	r3, r3, #4
 8011f84:	1a9b      	subs	r3, r3, r2
 8011f86:	440b      	add	r3, r1
 8011f88:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011f8c:	461c      	mov	r4, r3
 8011f8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f92:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f96:	881a      	ldrh	r2, [r3, #0]
 8011f98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f9c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fa0:	8819      	ldrh	r1, [r3, #0]
 8011fa2:	4859      	ldr	r0, [pc, #356]	; (8012108 <create_DijkstraMap+0xb78>)
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	011b      	lsls	r3, r3, #4
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	440b      	add	r3, r1
 8011fac:	33f0      	adds	r3, #240	; 0xf0
 8011fae:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fb8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	429c      	cmp	r4, r3
 8011fc4:	dd62      	ble.n	801208c <create_DijkstraMap+0xafc>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011fc6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011fce:	881a      	ldrh	r2, [r3, #0]
 8011fd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fd4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fd8:	8819      	ldrh	r1, [r3, #0]
 8011fda:	484b      	ldr	r0, [pc, #300]	; (8012108 <create_DijkstraMap+0xb78>)
 8011fdc:	4613      	mov	r3, r2
 8011fde:	011b      	lsls	r3, r3, #4
 8011fe0:	1a9b      	subs	r3, r3, r2
 8011fe2:	440b      	add	r3, r1
 8011fe4:	33f0      	adds	r3, #240	; 0xf0
 8011fe6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011fea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fee:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011ff2:	881b      	ldrh	r3, [r3, #0]
 8011ff4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ff8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011ffc:	8812      	ldrh	r2, [r2, #0]
 8011ffe:	3201      	adds	r2, #1
 8012000:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012004:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012008:	8809      	ldrh	r1, [r1, #0]
 801200a:	4403      	add	r3, r0
 801200c:	b29c      	uxth	r4, r3
 801200e:	483e      	ldr	r0, [pc, #248]	; (8012108 <create_DijkstraMap+0xb78>)
 8012010:	4613      	mov	r3, r2
 8012012:	011b      	lsls	r3, r3, #4
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	440b      	add	r3, r1
 8012018:	4622      	mov	r2, r4
 801201a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 801201e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012022:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012026:	881a      	ldrh	r2, [r3, #0]
 8012028:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801202c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012030:	4611      	mov	r1, r2
 8012032:	4618      	mov	r0, r3
 8012034:	f002 fdfe 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012038:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801203c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012040:	881b      	ldrh	r3, [r3, #0]
 8012042:	3301      	adds	r3, #1
 8012044:	b29a      	uxth	r2, r3
 8012046:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801204a:	f103 0320 	add.w	r3, r3, #32
 801204e:	3b0c      	subs	r3, #12
 8012050:	4611      	mov	r1, r2
 8012052:	4618      	mov	r0, r3
 8012054:	f002 fdee 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012058:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801205c:	3b14      	subs	r3, #20
 801205e:	2101      	movs	r1, #1
 8012060:	4618      	mov	r0, r3
 8012062:	f002 fde7 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012066:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801206a:	3b3c      	subs	r3, #60	; 0x3c
 801206c:	2101      	movs	r1, #1
 801206e:	4618      	mov	r0, r3
 8012070:	f002 fde0 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012074:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012078:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801207c:	881a      	ldrh	r2, [r3, #0]
 801207e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012082:	3b64      	subs	r3, #100	; 0x64
 8012084:	4611      	mov	r1, r2
 8012086:	4618      	mov	r0, r3
 8012088:	f002 fdd4 	bl	8014c34 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 801208c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012090:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012094:	881b      	ldrh	r3, [r3, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	f000 81e5 	beq.w	8012466 <create_DijkstraMap+0xed6>
				if(Direction==SLANT_SOUTH_WEST){
 801209c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120a0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80120a4:	881b      	ldrh	r3, [r3, #0]
 80120a6:	2b05      	cmp	r3, #5
 80120a8:	d130      	bne.n	801210c <create_DijkstraMap+0xb7c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80120aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120ae:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	3301      	adds	r3, #1
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80120bc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80120c0:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80120c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120c6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80120ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120ce:	2b05      	cmp	r3, #5
 80120d0:	dd05      	ble.n	80120de <create_DijkstraMap+0xb4e>
 80120d2:	2305      	movs	r3, #5
 80120d4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80120d8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80120dc:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80120de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120e2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80120e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80120ea:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80120ee:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80120f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80120f6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80120fa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80120fe:	8013      	strh	r3, [r2, #0]
 8012100:	e014      	b.n	801212c <create_DijkstraMap+0xb9c>
 8012102:	bf00      	nop
 8012104:	20000c3c 	.word	0x20000c3c
 8012108:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801210c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012110:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012114:	881b      	ldrh	r3, [r3, #0]
 8012116:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801211a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801211e:	8013      	strh	r3, [r2, #0]
 8012120:	2300      	movs	r3, #0
 8012122:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012126:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801212a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 801212c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012130:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	3b01      	subs	r3, #1
 8012138:	4a6a      	ldr	r2, [pc, #424]	; (80122e4 <create_DijkstraMap+0xd54>)
 801213a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801213e:	461a      	mov	r2, r3
 8012140:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012144:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012148:	881b      	ldrh	r3, [r3, #0]
 801214a:	fa42 f303 	asr.w	r3, r2, r3
 801214e:	f003 0301 	and.w	r3, r3, #1
 8012152:	2b00      	cmp	r3, #0
 8012154:	f040 8092 	bne.w	801227c <create_DijkstraMap+0xcec>
 8012158:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801215c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012160:	881a      	ldrh	r2, [r3, #0]
 8012162:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012166:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801216a:	881b      	ldrh	r3, [r3, #0]
 801216c:	1e59      	subs	r1, r3, #1
 801216e:	485e      	ldr	r0, [pc, #376]	; (80122e8 <create_DijkstraMap+0xd58>)
 8012170:	4613      	mov	r3, r2
 8012172:	011b      	lsls	r3, r3, #4
 8012174:	1a9b      	subs	r3, r3, r2
 8012176:	440b      	add	r3, r1
 8012178:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801217c:	461c      	mov	r4, r3
 801217e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012182:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012186:	881a      	ldrh	r2, [r3, #0]
 8012188:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801218c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012190:	8819      	ldrh	r1, [r3, #0]
 8012192:	4855      	ldr	r0, [pc, #340]	; (80122e8 <create_DijkstraMap+0xd58>)
 8012194:	4613      	mov	r3, r2
 8012196:	011b      	lsls	r3, r3, #4
 8012198:	1a9b      	subs	r3, r3, r2
 801219a:	440b      	add	r3, r1
 801219c:	33f0      	adds	r3, #240	; 0xf0
 801219e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80121a2:	461a      	mov	r2, r3
 80121a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121a8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80121ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121b0:	4413      	add	r3, r2
 80121b2:	429c      	cmp	r4, r3
 80121b4:	dd62      	ble.n	801227c <create_DijkstraMap+0xcec>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80121b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121be:	881a      	ldrh	r2, [r3, #0]
 80121c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121c4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80121c8:	8819      	ldrh	r1, [r3, #0]
 80121ca:	4847      	ldr	r0, [pc, #284]	; (80122e8 <create_DijkstraMap+0xd58>)
 80121cc:	4613      	mov	r3, r2
 80121ce:	011b      	lsls	r3, r3, #4
 80121d0:	1a9b      	subs	r3, r3, r2
 80121d2:	440b      	add	r3, r1
 80121d4:	33f0      	adds	r3, #240	; 0xf0
 80121d6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80121da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121de:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80121e2:	881b      	ldrh	r3, [r3, #0]
 80121e4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80121e8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80121ec:	8812      	ldrh	r2, [r2, #0]
 80121ee:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80121f2:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80121f6:	8809      	ldrh	r1, [r1, #0]
 80121f8:	3901      	subs	r1, #1
 80121fa:	4403      	add	r3, r0
 80121fc:	b29c      	uxth	r4, r3
 80121fe:	483a      	ldr	r0, [pc, #232]	; (80122e8 <create_DijkstraMap+0xd58>)
 8012200:	4613      	mov	r3, r2
 8012202:	011b      	lsls	r3, r3, #4
 8012204:	1a9b      	subs	r3, r3, r2
 8012206:	440b      	add	r3, r1
 8012208:	4622      	mov	r2, r4
 801220a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 801220e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012212:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012216:	881b      	ldrh	r3, [r3, #0]
 8012218:	3b01      	subs	r3, #1
 801221a:	b29a      	uxth	r2, r3
 801221c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012220:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012224:	4611      	mov	r1, r2
 8012226:	4618      	mov	r0, r3
 8012228:	f002 fd04 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 801222c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012230:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012234:	881a      	ldrh	r2, [r3, #0]
 8012236:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801223a:	f103 0320 	add.w	r3, r3, #32
 801223e:	3b0c      	subs	r3, #12
 8012240:	4611      	mov	r1, r2
 8012242:	4618      	mov	r0, r3
 8012244:	f002 fcf6 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012248:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801224c:	3b14      	subs	r3, #20
 801224e:	2101      	movs	r1, #1
 8012250:	4618      	mov	r0, r3
 8012252:	f002 fcef 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012256:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801225a:	3b3c      	subs	r3, #60	; 0x3c
 801225c:	2105      	movs	r1, #5
 801225e:	4618      	mov	r0, r3
 8012260:	f002 fce8 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012264:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012268:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801226c:	881a      	ldrh	r2, [r3, #0]
 801226e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012272:	3b64      	subs	r3, #100	; 0x64
 8012274:	4611      	mov	r1, r2
 8012276:	4618      	mov	r0, r3
 8012278:	f002 fcdc 	bl	8014c34 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 801227c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012280:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012284:	881b      	ldrh	r3, [r3, #0]
 8012286:	2b07      	cmp	r3, #7
 8012288:	d130      	bne.n	80122ec <create_DijkstraMap+0xd5c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801228a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801228e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	3301      	adds	r3, #1
 8012296:	b29b      	uxth	r3, r3
 8012298:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801229c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80122a0:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80122a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122a6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80122aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122ae:	2b05      	cmp	r3, #5
 80122b0:	dd05      	ble.n	80122be <create_DijkstraMap+0xd2e>
 80122b2:	2305      	movs	r3, #5
 80122b4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122b8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80122bc:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80122be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122c2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80122c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80122ca:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80122ce:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80122d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80122d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122da:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80122de:	8013      	strh	r3, [r2, #0]
 80122e0:	e014      	b.n	801230c <create_DijkstraMap+0xd7c>
 80122e2:	bf00      	nop
 80122e4:	20000c3c 	.word	0x20000c3c
 80122e8:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80122ec:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80122f0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122fa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80122fe:	8013      	strh	r3, [r2, #0]
 8012300:	2300      	movs	r3, #0
 8012302:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012306:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801230a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 801230c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012310:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	3b01      	subs	r3, #1
 8012318:	4a74      	ldr	r2, [pc, #464]	; (80124ec <create_DijkstraMap+0xf5c>)
 801231a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801231e:	461a      	mov	r2, r3
 8012320:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012324:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012328:	881b      	ldrh	r3, [r3, #0]
 801232a:	3301      	adds	r3, #1
 801232c:	fa42 f303 	asr.w	r3, r2, r3
 8012330:	f003 0301 	and.w	r3, r3, #1
 8012334:	2b00      	cmp	r3, #0
 8012336:	f040 8096 	bne.w	8012466 <create_DijkstraMap+0xed6>
 801233a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801233e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012342:	881b      	ldrh	r3, [r3, #0]
 8012344:	1c5a      	adds	r2, r3, #1
 8012346:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801234a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801234e:	881b      	ldrh	r3, [r3, #0]
 8012350:	1e59      	subs	r1, r3, #1
 8012352:	4867      	ldr	r0, [pc, #412]	; (80124f0 <create_DijkstraMap+0xf60>)
 8012354:	4613      	mov	r3, r2
 8012356:	011b      	lsls	r3, r3, #4
 8012358:	1a9b      	subs	r3, r3, r2
 801235a:	440b      	add	r3, r1
 801235c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012360:	461c      	mov	r4, r3
 8012362:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012366:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801236a:	881a      	ldrh	r2, [r3, #0]
 801236c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012370:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012374:	8819      	ldrh	r1, [r3, #0]
 8012376:	485e      	ldr	r0, [pc, #376]	; (80124f0 <create_DijkstraMap+0xf60>)
 8012378:	4613      	mov	r3, r2
 801237a:	011b      	lsls	r3, r3, #4
 801237c:	1a9b      	subs	r3, r3, r2
 801237e:	440b      	add	r3, r1
 8012380:	33f0      	adds	r3, #240	; 0xf0
 8012382:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012386:	461a      	mov	r2, r3
 8012388:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801238c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012394:	4413      	add	r3, r2
 8012396:	429c      	cmp	r4, r3
 8012398:	dd65      	ble.n	8012466 <create_DijkstraMap+0xed6>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801239a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801239e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123a2:	881a      	ldrh	r2, [r3, #0]
 80123a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123ac:	8819      	ldrh	r1, [r3, #0]
 80123ae:	4850      	ldr	r0, [pc, #320]	; (80124f0 <create_DijkstraMap+0xf60>)
 80123b0:	4613      	mov	r3, r2
 80123b2:	011b      	lsls	r3, r3, #4
 80123b4:	1a9b      	subs	r3, r3, r2
 80123b6:	440b      	add	r3, r1
 80123b8:	33f0      	adds	r3, #240	; 0xf0
 80123ba:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80123be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123c2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80123c6:	881b      	ldrh	r3, [r3, #0]
 80123c8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80123cc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80123d0:	8812      	ldrh	r2, [r2, #0]
 80123d2:	3201      	adds	r2, #1
 80123d4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80123d8:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80123dc:	8809      	ldrh	r1, [r1, #0]
 80123de:	3901      	subs	r1, #1
 80123e0:	4403      	add	r3, r0
 80123e2:	b29c      	uxth	r4, r3
 80123e4:	4842      	ldr	r0, [pc, #264]	; (80124f0 <create_DijkstraMap+0xf60>)
 80123e6:	4613      	mov	r3, r2
 80123e8:	011b      	lsls	r3, r3, #4
 80123ea:	1a9b      	subs	r3, r3, r2
 80123ec:	440b      	add	r3, r1
 80123ee:	4622      	mov	r2, r4
 80123f0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80123f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123f8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123fc:	881b      	ldrh	r3, [r3, #0]
 80123fe:	3b01      	subs	r3, #1
 8012400:	b29a      	uxth	r2, r3
 8012402:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012406:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801240a:	4611      	mov	r1, r2
 801240c:	4618      	mov	r0, r3
 801240e:	f002 fc11 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012412:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012416:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801241a:	881b      	ldrh	r3, [r3, #0]
 801241c:	3301      	adds	r3, #1
 801241e:	b29a      	uxth	r2, r3
 8012420:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012424:	f103 0320 	add.w	r3, r3, #32
 8012428:	3b0c      	subs	r3, #12
 801242a:	4611      	mov	r1, r2
 801242c:	4618      	mov	r0, r3
 801242e:	f002 fc01 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012432:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012436:	3b14      	subs	r3, #20
 8012438:	2101      	movs	r1, #1
 801243a:	4618      	mov	r0, r3
 801243c:	f002 fbfa 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012440:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012444:	3b3c      	subs	r3, #60	; 0x3c
 8012446:	2107      	movs	r1, #7
 8012448:	4618      	mov	r0, r3
 801244a:	f002 fbf3 	bl	8014c34 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801244e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012452:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012456:	881a      	ldrh	r2, [r3, #0]
 8012458:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801245c:	3b64      	subs	r3, #100	; 0x64
 801245e:	4611      	mov	r1, r2
 8012460:	4618      	mov	r0, r3
 8012462:	f002 fbe7 	bl	8014c34 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 8012466:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801246a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 801246e:	881b      	ldrh	r3, [r3, #0]
 8012470:	2b01      	cmp	r3, #1
 8012472:	f040 85bd 	bne.w	8012ff0 <create_DijkstraMap+0x1a60>
					if(Xcoordinate <= 13){
 8012476:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801247a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	2b0d      	cmp	r3, #13
 8012482:	f200 80ed 	bhi.w	8012660 <create_DijkstraMap+0x10d0>
						if(Direction==SLANT_EAST){
 8012486:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801248a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	2b02      	cmp	r3, #2
 8012492:	d12f      	bne.n	80124f4 <create_DijkstraMap+0xf64>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012494:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012498:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	3301      	adds	r3, #1
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124a6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124aa:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80124ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124b0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124b8:	2b04      	cmp	r3, #4
 80124ba:	dd05      	ble.n	80124c8 <create_DijkstraMap+0xf38>
 80124bc:	2304      	movs	r3, #4
 80124be:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124c2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124c6:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80124c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124cc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124d4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80124d8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80124dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80124e0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124e4:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80124e8:	8013      	strh	r3, [r2, #0]
 80124ea:	e013      	b.n	8012514 <create_DijkstraMap+0xf84>
 80124ec:	20000c3c 	.word	0x20000c3c
 80124f0:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80124f4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80124f8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80124fc:	881b      	ldrh	r3, [r3, #0]
 80124fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012502:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012506:	8013      	strh	r3, [r2, #0]
 8012508:	2300      	movs	r3, #0
 801250a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801250e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012512:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012514:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012518:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801251c:	881b      	ldrh	r3, [r3, #0]
 801251e:	3301      	adds	r3, #1
 8012520:	4a6d      	ldr	r2, [pc, #436]	; (80126d8 <create_DijkstraMap+0x1148>)
 8012522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012526:	461a      	mov	r2, r3
 8012528:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801252c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012530:	881b      	ldrh	r3, [r3, #0]
 8012532:	fa42 f303 	asr.w	r3, r2, r3
 8012536:	f003 0301 	and.w	r3, r3, #1
 801253a:	2b00      	cmp	r3, #0
 801253c:	f040 8090 	bne.w	8012660 <create_DijkstraMap+0x10d0>
 8012540:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012544:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012548:	881a      	ldrh	r2, [r3, #0]
 801254a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801254e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	1c59      	adds	r1, r3, #1
 8012556:	4861      	ldr	r0, [pc, #388]	; (80126dc <create_DijkstraMap+0x114c>)
 8012558:	4613      	mov	r3, r2
 801255a:	011b      	lsls	r3, r3, #4
 801255c:	1a9b      	subs	r3, r3, r2
 801255e:	440b      	add	r3, r1
 8012560:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012564:	461c      	mov	r4, r3
 8012566:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801256a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801256e:	881a      	ldrh	r2, [r3, #0]
 8012570:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012574:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012578:	8819      	ldrh	r1, [r3, #0]
 801257a:	4858      	ldr	r0, [pc, #352]	; (80126dc <create_DijkstraMap+0x114c>)
 801257c:	4613      	mov	r3, r2
 801257e:	011b      	lsls	r3, r3, #4
 8012580:	1a9b      	subs	r3, r3, r2
 8012582:	440b      	add	r3, r1
 8012584:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012588:	461a      	mov	r2, r3
 801258a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801258e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012596:	4413      	add	r3, r2
 8012598:	429c      	cmp	r4, r3
 801259a:	dd61      	ble.n	8012660 <create_DijkstraMap+0x10d0>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 801259c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125a0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125a4:	881a      	ldrh	r2, [r3, #0]
 80125a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125aa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125ae:	8819      	ldrh	r1, [r3, #0]
 80125b0:	484a      	ldr	r0, [pc, #296]	; (80126dc <create_DijkstraMap+0x114c>)
 80125b2:	4613      	mov	r3, r2
 80125b4:	011b      	lsls	r3, r3, #4
 80125b6:	1a9b      	subs	r3, r3, r2
 80125b8:	440b      	add	r3, r1
 80125ba:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80125be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125c2:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80125cc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80125d0:	8812      	ldrh	r2, [r2, #0]
 80125d2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80125d6:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80125da:	8809      	ldrh	r1, [r1, #0]
 80125dc:	3101      	adds	r1, #1
 80125de:	4403      	add	r3, r0
 80125e0:	b29c      	uxth	r4, r3
 80125e2:	483e      	ldr	r0, [pc, #248]	; (80126dc <create_DijkstraMap+0x114c>)
 80125e4:	4613      	mov	r3, r2
 80125e6:	011b      	lsls	r3, r3, #4
 80125e8:	1a9b      	subs	r3, r3, r2
 80125ea:	440b      	add	r3, r1
 80125ec:	4622      	mov	r2, r4
 80125ee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 80125f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125f6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125fa:	881b      	ldrh	r3, [r3, #0]
 80125fc:	3301      	adds	r3, #1
 80125fe:	b29a      	uxth	r2, r3
 8012600:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012604:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012608:	4611      	mov	r1, r2
 801260a:	4618      	mov	r0, r3
 801260c:	f002 fb12 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012610:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012614:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012618:	881a      	ldrh	r2, [r3, #0]
 801261a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801261e:	f103 0320 	add.w	r3, r3, #32
 8012622:	3b0c      	subs	r3, #12
 8012624:	4611      	mov	r1, r2
 8012626:	4618      	mov	r0, r3
 8012628:	f002 fb04 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 801262c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012630:	3b14      	subs	r3, #20
 8012632:	2101      	movs	r1, #1
 8012634:	4618      	mov	r0, r3
 8012636:	f002 fafd 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 801263a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801263e:	3b3c      	subs	r3, #60	; 0x3c
 8012640:	2102      	movs	r1, #2
 8012642:	4618      	mov	r0, r3
 8012644:	f002 faf6 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012648:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801264c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012650:	881a      	ldrh	r2, [r3, #0]
 8012652:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012656:	3b64      	subs	r3, #100	; 0x64
 8012658:	4611      	mov	r1, r2
 801265a:	4618      	mov	r0, r3
 801265c:	f002 faea 	bl	8014c34 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 8012660:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012664:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012668:	881b      	ldrh	r3, [r3, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	f000 80ee 	beq.w	801284c <create_DijkstraMap+0x12bc>
						if(Direction==SLANT_WEST){
 8012670:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012674:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	2b06      	cmp	r3, #6
 801267c:	d130      	bne.n	80126e0 <create_DijkstraMap+0x1150>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801267e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012682:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012686:	881b      	ldrh	r3, [r3, #0]
 8012688:	3301      	adds	r3, #1
 801268a:	b29b      	uxth	r3, r3
 801268c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012690:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012694:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012696:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801269a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801269e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126a2:	2b04      	cmp	r3, #4
 80126a4:	dd05      	ble.n	80126b2 <create_DijkstraMap+0x1122>
 80126a6:	2304      	movs	r3, #4
 80126a8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126ac:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126b0:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80126b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126b6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80126be:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80126c2:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80126c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80126ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126ce:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80126d2:	8013      	strh	r3, [r2, #0]
 80126d4:	e014      	b.n	8012700 <create_DijkstraMap+0x1170>
 80126d6:	bf00      	nop
 80126d8:	20000c3c 	.word	0x20000c3c
 80126dc:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80126e0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80126e4:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126ee:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80126f2:	8013      	strh	r3, [r2, #0]
 80126f4:	2300      	movs	r3, #0
 80126f6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126fa:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126fe:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012700:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012704:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	3b01      	subs	r3, #1
 801270c:	4a6d      	ldr	r2, [pc, #436]	; (80128c4 <create_DijkstraMap+0x1334>)
 801270e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012712:	461a      	mov	r2, r3
 8012714:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012718:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	fa42 f303 	asr.w	r3, r2, r3
 8012722:	f003 0301 	and.w	r3, r3, #1
 8012726:	2b00      	cmp	r3, #0
 8012728:	f040 8090 	bne.w	801284c <create_DijkstraMap+0x12bc>
 801272c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012730:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012734:	881a      	ldrh	r2, [r3, #0]
 8012736:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801273a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801273e:	881b      	ldrh	r3, [r3, #0]
 8012740:	1e59      	subs	r1, r3, #1
 8012742:	4861      	ldr	r0, [pc, #388]	; (80128c8 <create_DijkstraMap+0x1338>)
 8012744:	4613      	mov	r3, r2
 8012746:	011b      	lsls	r3, r3, #4
 8012748:	1a9b      	subs	r3, r3, r2
 801274a:	440b      	add	r3, r1
 801274c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012750:	461c      	mov	r4, r3
 8012752:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012756:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801275a:	881a      	ldrh	r2, [r3, #0]
 801275c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012760:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012764:	8819      	ldrh	r1, [r3, #0]
 8012766:	4858      	ldr	r0, [pc, #352]	; (80128c8 <create_DijkstraMap+0x1338>)
 8012768:	4613      	mov	r3, r2
 801276a:	011b      	lsls	r3, r3, #4
 801276c:	1a9b      	subs	r3, r3, r2
 801276e:	440b      	add	r3, r1
 8012770:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012774:	461a      	mov	r2, r3
 8012776:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801277a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801277e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012782:	4413      	add	r3, r2
 8012784:	429c      	cmp	r4, r3
 8012786:	dd61      	ble.n	801284c <create_DijkstraMap+0x12bc>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012788:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801278c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012790:	881a      	ldrh	r2, [r3, #0]
 8012792:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012796:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801279a:	8819      	ldrh	r1, [r3, #0]
 801279c:	484a      	ldr	r0, [pc, #296]	; (80128c8 <create_DijkstraMap+0x1338>)
 801279e:	4613      	mov	r3, r2
 80127a0:	011b      	lsls	r3, r3, #4
 80127a2:	1a9b      	subs	r3, r3, r2
 80127a4:	440b      	add	r3, r1
 80127a6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80127aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127ae:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80127b2:	881b      	ldrh	r3, [r3, #0]
 80127b4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127b8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80127bc:	8812      	ldrh	r2, [r2, #0]
 80127be:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80127c2:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80127c6:	8809      	ldrh	r1, [r1, #0]
 80127c8:	3901      	subs	r1, #1
 80127ca:	4403      	add	r3, r0
 80127cc:	b29c      	uxth	r4, r3
 80127ce:	483e      	ldr	r0, [pc, #248]	; (80128c8 <create_DijkstraMap+0x1338>)
 80127d0:	4613      	mov	r3, r2
 80127d2:	011b      	lsls	r3, r3, #4
 80127d4:	1a9b      	subs	r3, r3, r2
 80127d6:	440b      	add	r3, r1
 80127d8:	4622      	mov	r2, r4
 80127da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 80127de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127e2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127e6:	881b      	ldrh	r3, [r3, #0]
 80127e8:	3b01      	subs	r3, #1
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80127f0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80127f4:	4611      	mov	r1, r2
 80127f6:	4618      	mov	r0, r3
 80127f8:	f002 fa1c 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80127fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012800:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012804:	881a      	ldrh	r2, [r3, #0]
 8012806:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801280a:	f103 0320 	add.w	r3, r3, #32
 801280e:	3b0c      	subs	r3, #12
 8012810:	4611      	mov	r1, r2
 8012812:	4618      	mov	r0, r3
 8012814:	f002 fa0e 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012818:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801281c:	3b14      	subs	r3, #20
 801281e:	2101      	movs	r1, #1
 8012820:	4618      	mov	r0, r3
 8012822:	f002 fa07 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 8012826:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801282a:	3b3c      	subs	r3, #60	; 0x3c
 801282c:	2106      	movs	r1, #6
 801282e:	4618      	mov	r0, r3
 8012830:	f002 fa00 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012834:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012838:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801283c:	881a      	ldrh	r2, [r3, #0]
 801283e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012842:	3b64      	subs	r3, #100	; 0x64
 8012844:	4611      	mov	r1, r2
 8012846:	4618      	mov	r0, r3
 8012848:	f002 f9f4 	bl	8014c34 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 801284c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012850:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012854:	881b      	ldrh	r3, [r3, #0]
 8012856:	2b0e      	cmp	r3, #14
 8012858:	f200 81de 	bhi.w	8012c18 <create_DijkstraMap+0x1688>
						if(Direction==SLANT_NORTH_WEST){
 801285c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012860:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	2b07      	cmp	r3, #7
 8012868:	d130      	bne.n	80128cc <create_DijkstraMap+0x133c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801286a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801286e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012872:	881b      	ldrh	r3, [r3, #0]
 8012874:	3301      	adds	r3, #1
 8012876:	b29b      	uxth	r3, r3
 8012878:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801287c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012880:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012882:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012886:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801288a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801288e:	2b05      	cmp	r3, #5
 8012890:	dd05      	ble.n	801289e <create_DijkstraMap+0x130e>
 8012892:	2305      	movs	r3, #5
 8012894:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012898:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801289c:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801289e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128a2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80128a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80128aa:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80128ae:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80128b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80128b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128ba:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80128be:	8013      	strh	r3, [r2, #0]
 80128c0:	e014      	b.n	80128ec <create_DijkstraMap+0x135c>
 80128c2:	bf00      	nop
 80128c4:	20000c3c 	.word	0x20000c3c
 80128c8:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80128cc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80128d0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128da:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80128de:	8013      	strh	r3, [r2, #0]
 80128e0:	2300      	movs	r3, #0
 80128e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128e6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128ea:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 80128ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128f0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	4a69      	ldr	r2, [pc, #420]	; (8012a9c <create_DijkstraMap+0x150c>)
 80128f8:	330c      	adds	r3, #12
 80128fa:	005b      	lsls	r3, r3, #1
 80128fc:	4413      	add	r3, r2
 80128fe:	88db      	ldrh	r3, [r3, #6]
 8012900:	461a      	mov	r2, r3
 8012902:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012906:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801290a:	881b      	ldrh	r3, [r3, #0]
 801290c:	fa42 f303 	asr.w	r3, r2, r3
 8012910:	f003 0301 	and.w	r3, r3, #1
 8012914:	2b00      	cmp	r3, #0
 8012916:	f040 808e 	bne.w	8012a36 <create_DijkstraMap+0x14a6>
 801291a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801291e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012922:	881a      	ldrh	r2, [r3, #0]
 8012924:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012928:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801292c:	8819      	ldrh	r1, [r3, #0]
 801292e:	485c      	ldr	r0, [pc, #368]	; (8012aa0 <create_DijkstraMap+0x1510>)
 8012930:	4613      	mov	r3, r2
 8012932:	011b      	lsls	r3, r3, #4
 8012934:	1a9b      	subs	r3, r3, r2
 8012936:	440b      	add	r3, r1
 8012938:	33f0      	adds	r3, #240	; 0xf0
 801293a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801293e:	461c      	mov	r4, r3
 8012940:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012944:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012948:	881a      	ldrh	r2, [r3, #0]
 801294a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801294e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012952:	8819      	ldrh	r1, [r3, #0]
 8012954:	4852      	ldr	r0, [pc, #328]	; (8012aa0 <create_DijkstraMap+0x1510>)
 8012956:	4613      	mov	r3, r2
 8012958:	011b      	lsls	r3, r3, #4
 801295a:	1a9b      	subs	r3, r3, r2
 801295c:	440b      	add	r3, r1
 801295e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012962:	461a      	mov	r2, r3
 8012964:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012968:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801296c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012970:	4413      	add	r3, r2
 8012972:	429c      	cmp	r4, r3
 8012974:	dd5f      	ble.n	8012a36 <create_DijkstraMap+0x14a6>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012976:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801297a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801297e:	881a      	ldrh	r2, [r3, #0]
 8012980:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012984:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012988:	8819      	ldrh	r1, [r3, #0]
 801298a:	4845      	ldr	r0, [pc, #276]	; (8012aa0 <create_DijkstraMap+0x1510>)
 801298c:	4613      	mov	r3, r2
 801298e:	011b      	lsls	r3, r3, #4
 8012990:	1a9b      	subs	r3, r3, r2
 8012992:	440b      	add	r3, r1
 8012994:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012998:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801299c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129a6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80129aa:	8812      	ldrh	r2, [r2, #0]
 80129ac:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80129b0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80129b4:	8809      	ldrh	r1, [r1, #0]
 80129b6:	4403      	add	r3, r0
 80129b8:	b29c      	uxth	r4, r3
 80129ba:	4839      	ldr	r0, [pc, #228]	; (8012aa0 <create_DijkstraMap+0x1510>)
 80129bc:	4613      	mov	r3, r2
 80129be:	011b      	lsls	r3, r3, #4
 80129c0:	1a9b      	subs	r3, r3, r2
 80129c2:	440b      	add	r3, r1
 80129c4:	33f0      	adds	r3, #240	; 0xf0
 80129c6:	4622      	mov	r2, r4
 80129c8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 80129cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80129d4:	881a      	ldrh	r2, [r3, #0]
 80129d6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80129da:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80129de:	4611      	mov	r1, r2
 80129e0:	4618      	mov	r0, r3
 80129e2:	f002 f927 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80129e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ea:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129ee:	881a      	ldrh	r2, [r3, #0]
 80129f0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80129f4:	f103 0320 	add.w	r3, r3, #32
 80129f8:	3b0c      	subs	r3, #12
 80129fa:	4611      	mov	r1, r2
 80129fc:	4618      	mov	r0, r3
 80129fe:	f002 f919 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012a02:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012a06:	3b14      	subs	r3, #20
 8012a08:	2100      	movs	r1, #0
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f002 f912 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012a10:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012a14:	3b3c      	subs	r3, #60	; 0x3c
 8012a16:	2107      	movs	r1, #7
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f002 f90b 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012a1e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a22:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a26:	881a      	ldrh	r2, [r3, #0]
 8012a28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012a2c:	3b64      	subs	r3, #100	; 0x64
 8012a2e:	4611      	mov	r1, r2
 8012a30:	4618      	mov	r0, r3
 8012a32:	f002 f8ff 	bl	8014c34 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012a36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a3a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012a3e:	881b      	ldrh	r3, [r3, #0]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d12f      	bne.n	8012aa4 <create_DijkstraMap+0x1514>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012a44:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a48:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012a4c:	881b      	ldrh	r3, [r3, #0]
 8012a4e:	3301      	adds	r3, #1
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a56:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a5a:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012a5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a60:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a68:	2b05      	cmp	r3, #5
 8012a6a:	dd05      	ble.n	8012a78 <create_DijkstraMap+0x14e8>
 8012a6c:	2305      	movs	r3, #5
 8012a6e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a72:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a76:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012a78:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a7c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012a84:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012a88:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012a8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012a90:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a94:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a98:	8013      	strh	r3, [r2, #0]
 8012a9a:	e013      	b.n	8012ac4 <create_DijkstraMap+0x1534>
 8012a9c:	20000c3c 	.word	0x20000c3c
 8012aa0:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012aa4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012aa8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012aac:	881b      	ldrh	r3, [r3, #0]
 8012aae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ab2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012ab6:	8013      	strh	r3, [r2, #0]
 8012ab8:	2300      	movs	r3, #0
 8012aba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012abe:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ac2:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012ac4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ac8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	4a70      	ldr	r2, [pc, #448]	; (8012c90 <create_DijkstraMap+0x1700>)
 8012ad0:	330c      	adds	r3, #12
 8012ad2:	005b      	lsls	r3, r3, #1
 8012ad4:	4413      	add	r3, r2
 8012ad6:	88db      	ldrh	r3, [r3, #6]
 8012ad8:	461a      	mov	r2, r3
 8012ada:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ade:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ae2:	881b      	ldrh	r3, [r3, #0]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	fa42 f303 	asr.w	r3, r2, r3
 8012aea:	f003 0301 	and.w	r3, r3, #1
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f040 8092 	bne.w	8012c18 <create_DijkstraMap+0x1688>
 8012af4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012af8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012afc:	881b      	ldrh	r3, [r3, #0]
 8012afe:	1c5a      	adds	r2, r3, #1
 8012b00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b04:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b08:	8819      	ldrh	r1, [r3, #0]
 8012b0a:	4862      	ldr	r0, [pc, #392]	; (8012c94 <create_DijkstraMap+0x1704>)
 8012b0c:	4613      	mov	r3, r2
 8012b0e:	011b      	lsls	r3, r3, #4
 8012b10:	1a9b      	subs	r3, r3, r2
 8012b12:	440b      	add	r3, r1
 8012b14:	33f0      	adds	r3, #240	; 0xf0
 8012b16:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b1a:	461c      	mov	r4, r3
 8012b1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b20:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b24:	881a      	ldrh	r2, [r3, #0]
 8012b26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b2a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b2e:	8819      	ldrh	r1, [r3, #0]
 8012b30:	4858      	ldr	r0, [pc, #352]	; (8012c94 <create_DijkstraMap+0x1704>)
 8012b32:	4613      	mov	r3, r2
 8012b34:	011b      	lsls	r3, r3, #4
 8012b36:	1a9b      	subs	r3, r3, r2
 8012b38:	440b      	add	r3, r1
 8012b3a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b44:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	429c      	cmp	r4, r3
 8012b50:	dd62      	ble.n	8012c18 <create_DijkstraMap+0x1688>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012b52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b56:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b5a:	881a      	ldrh	r2, [r3, #0]
 8012b5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b60:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b64:	8819      	ldrh	r1, [r3, #0]
 8012b66:	484b      	ldr	r0, [pc, #300]	; (8012c94 <create_DijkstraMap+0x1704>)
 8012b68:	4613      	mov	r3, r2
 8012b6a:	011b      	lsls	r3, r3, #4
 8012b6c:	1a9b      	subs	r3, r3, r2
 8012b6e:	440b      	add	r3, r1
 8012b70:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012b74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b78:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b7c:	881b      	ldrh	r3, [r3, #0]
 8012b7e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b82:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012b86:	8812      	ldrh	r2, [r2, #0]
 8012b88:	3201      	adds	r2, #1
 8012b8a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012b8e:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012b92:	8809      	ldrh	r1, [r1, #0]
 8012b94:	4403      	add	r3, r0
 8012b96:	b29c      	uxth	r4, r3
 8012b98:	483e      	ldr	r0, [pc, #248]	; (8012c94 <create_DijkstraMap+0x1704>)
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	011b      	lsls	r3, r3, #4
 8012b9e:	1a9b      	subs	r3, r3, r2
 8012ba0:	440b      	add	r3, r1
 8012ba2:	33f0      	adds	r3, #240	; 0xf0
 8012ba4:	4622      	mov	r2, r4
 8012ba6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012baa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012bb2:	881b      	ldrh	r3, [r3, #0]
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012bbc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f002 f836 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012bc8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bcc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012bd0:	881a      	ldrh	r2, [r3, #0]
 8012bd2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012bd6:	f103 0320 	add.w	r3, r3, #32
 8012bda:	3b0c      	subs	r3, #12
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f002 f828 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012be4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012be8:	3b14      	subs	r3, #20
 8012bea:	2100      	movs	r1, #0
 8012bec:	4618      	mov	r0, r3
 8012bee:	f002 f821 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012bf2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012bf6:	3b3c      	subs	r3, #60	; 0x3c
 8012bf8:	2101      	movs	r1, #1
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f002 f81a 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012c00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c04:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c08:	881a      	ldrh	r2, [r3, #0]
 8012c0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012c0e:	3b64      	subs	r3, #100	; 0x64
 8012c10:	4611      	mov	r1, r2
 8012c12:	4618      	mov	r0, r3
 8012c14:	f002 f80e 	bl	8014c34 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012c18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c1c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c20:	881b      	ldrh	r3, [r3, #0]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	f000 81e4 	beq.w	8012ff0 <create_DijkstraMap+0x1a60>
						if(Direction==SLANT_SOUTH_WEST){
 8012c28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c2c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012c30:	881b      	ldrh	r3, [r3, #0]
 8012c32:	2b05      	cmp	r3, #5
 8012c34:	d130      	bne.n	8012c98 <create_DijkstraMap+0x1708>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012c36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c3a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012c3e:	881b      	ldrh	r3, [r3, #0]
 8012c40:	3301      	adds	r3, #1
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c48:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c4c:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012c4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c52:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c5a:	2b05      	cmp	r3, #5
 8012c5c:	dd05      	ble.n	8012c6a <create_DijkstraMap+0x16da>
 8012c5e:	2305      	movs	r3, #5
 8012c60:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c64:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c68:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012c6a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c6e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c76:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012c7a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012c7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012c82:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c86:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012c8a:	8013      	strh	r3, [r2, #0]
 8012c8c:	e014      	b.n	8012cb8 <create_DijkstraMap+0x1728>
 8012c8e:	bf00      	nop
 8012c90:	20000c3c 	.word	0x20000c3c
 8012c94:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012c98:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012c9c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012ca0:	881b      	ldrh	r3, [r3, #0]
 8012ca2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ca6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012caa:	8013      	strh	r3, [r2, #0]
 8012cac:	2300      	movs	r3, #0
 8012cae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cb2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012cb6:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012cb8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cbc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	3b01      	subs	r3, #1
 8012cc4:	4ad4      	ldr	r2, [pc, #848]	; (8013018 <create_DijkstraMap+0x1a88>)
 8012cc6:	330c      	adds	r3, #12
 8012cc8:	005b      	lsls	r3, r3, #1
 8012cca:	4413      	add	r3, r2
 8012ccc:	88db      	ldrh	r3, [r3, #6]
 8012cce:	461a      	mov	r2, r3
 8012cd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cd4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	fa42 f303 	asr.w	r3, r2, r3
 8012cde:	f003 0301 	and.w	r3, r3, #1
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f040 8092 	bne.w	8012e0c <create_DijkstraMap+0x187c>
 8012ce8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cec:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cf0:	881a      	ldrh	r2, [r3, #0]
 8012cf2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cf6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012cfa:	881b      	ldrh	r3, [r3, #0]
 8012cfc:	1e59      	subs	r1, r3, #1
 8012cfe:	48c7      	ldr	r0, [pc, #796]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012d00:	4613      	mov	r3, r2
 8012d02:	011b      	lsls	r3, r3, #4
 8012d04:	1a9b      	subs	r3, r3, r2
 8012d06:	440b      	add	r3, r1
 8012d08:	33f0      	adds	r3, #240	; 0xf0
 8012d0a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d0e:	461c      	mov	r4, r3
 8012d10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d14:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d18:	881a      	ldrh	r2, [r3, #0]
 8012d1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d1e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d22:	8819      	ldrh	r1, [r3, #0]
 8012d24:	48bd      	ldr	r0, [pc, #756]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012d26:	4613      	mov	r3, r2
 8012d28:	011b      	lsls	r3, r3, #4
 8012d2a:	1a9b      	subs	r3, r3, r2
 8012d2c:	440b      	add	r3, r1
 8012d2e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d32:	461a      	mov	r2, r3
 8012d34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d38:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d40:	4413      	add	r3, r2
 8012d42:	429c      	cmp	r4, r3
 8012d44:	dd62      	ble.n	8012e0c <create_DijkstraMap+0x187c>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012d46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d4a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d4e:	881a      	ldrh	r2, [r3, #0]
 8012d50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d54:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d58:	8819      	ldrh	r1, [r3, #0]
 8012d5a:	48b0      	ldr	r0, [pc, #704]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012d5c:	4613      	mov	r3, r2
 8012d5e:	011b      	lsls	r3, r3, #4
 8012d60:	1a9b      	subs	r3, r3, r2
 8012d62:	440b      	add	r3, r1
 8012d64:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012d68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d6c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d76:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012d7a:	8812      	ldrh	r2, [r2, #0]
 8012d7c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012d80:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012d84:	8809      	ldrh	r1, [r1, #0]
 8012d86:	3901      	subs	r1, #1
 8012d88:	4403      	add	r3, r0
 8012d8a:	b29c      	uxth	r4, r3
 8012d8c:	48a3      	ldr	r0, [pc, #652]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012d8e:	4613      	mov	r3, r2
 8012d90:	011b      	lsls	r3, r3, #4
 8012d92:	1a9b      	subs	r3, r3, r2
 8012d94:	440b      	add	r3, r1
 8012d96:	33f0      	adds	r3, #240	; 0xf0
 8012d98:	4622      	mov	r2, r4
 8012d9a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012d9e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012da2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012da6:	881a      	ldrh	r2, [r3, #0]
 8012da8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012dac:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012db0:	4611      	mov	r1, r2
 8012db2:	4618      	mov	r0, r3
 8012db4:	f001 ff3e 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012db8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dbc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012dc0:	881b      	ldrh	r3, [r3, #0]
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	b29a      	uxth	r2, r3
 8012dc6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012dca:	f103 0320 	add.w	r3, r3, #32
 8012dce:	3b0c      	subs	r3, #12
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f001 ff2e 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012dd8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012ddc:	3b14      	subs	r3, #20
 8012dde:	2100      	movs	r1, #0
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 ff27 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012de6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012dea:	3b3c      	subs	r3, #60	; 0x3c
 8012dec:	2105      	movs	r1, #5
 8012dee:	4618      	mov	r0, r3
 8012df0:	f001 ff20 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012df4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012df8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012dfc:	881a      	ldrh	r2, [r3, #0]
 8012dfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e02:	3b64      	subs	r3, #100	; 0x64
 8012e04:	4611      	mov	r1, r2
 8012e06:	4618      	mov	r0, r3
 8012e08:	f001 ff14 	bl	8014c34 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012e0c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e10:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	2b03      	cmp	r3, #3
 8012e18:	d12b      	bne.n	8012e72 <create_DijkstraMap+0x18e2>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012e1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e1e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012e22:	881b      	ldrh	r3, [r3, #0]
 8012e24:	3301      	adds	r3, #1
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e2c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e30:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012e32:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e36:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e3e:	2b05      	cmp	r3, #5
 8012e40:	dd05      	ble.n	8012e4e <create_DijkstraMap+0x18be>
 8012e42:	2305      	movs	r3, #5
 8012e44:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e48:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e4c:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012e4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e52:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e5a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012e5e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012e62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012e66:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e6a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012e6e:	8013      	strh	r3, [r2, #0]
 8012e70:	e00f      	b.n	8012e92 <create_DijkstraMap+0x1902>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012e72:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012e76:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012e7a:	881b      	ldrh	r3, [r3, #0]
 8012e7c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e80:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012e84:	8013      	strh	r3, [r2, #0]
 8012e86:	2300      	movs	r3, #0
 8012e88:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e8c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e90:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012e92:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e96:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	3b01      	subs	r3, #1
 8012e9e:	4a5e      	ldr	r2, [pc, #376]	; (8013018 <create_DijkstraMap+0x1a88>)
 8012ea0:	330c      	adds	r3, #12
 8012ea2:	005b      	lsls	r3, r3, #1
 8012ea4:	4413      	add	r3, r2
 8012ea6:	88db      	ldrh	r3, [r3, #6]
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	fa42 f303 	asr.w	r3, r2, r3
 8012eba:	f003 0301 	and.w	r3, r3, #1
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f040 8096 	bne.w	8012ff0 <create_DijkstraMap+0x1a60>
 8012ec4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ec8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ecc:	881b      	ldrh	r3, [r3, #0]
 8012ece:	1c5a      	adds	r2, r3, #1
 8012ed0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ed4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	1e59      	subs	r1, r3, #1
 8012edc:	484f      	ldr	r0, [pc, #316]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012ede:	4613      	mov	r3, r2
 8012ee0:	011b      	lsls	r3, r3, #4
 8012ee2:	1a9b      	subs	r3, r3, r2
 8012ee4:	440b      	add	r3, r1
 8012ee6:	33f0      	adds	r3, #240	; 0xf0
 8012ee8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012eec:	461c      	mov	r4, r3
 8012eee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ef2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ef6:	881a      	ldrh	r2, [r3, #0]
 8012ef8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012efc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f00:	8819      	ldrh	r1, [r3, #0]
 8012f02:	4846      	ldr	r0, [pc, #280]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012f04:	4613      	mov	r3, r2
 8012f06:	011b      	lsls	r3, r3, #4
 8012f08:	1a9b      	subs	r3, r3, r2
 8012f0a:	440b      	add	r3, r1
 8012f0c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012f10:	461a      	mov	r2, r3
 8012f12:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f16:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f1e:	4413      	add	r3, r2
 8012f20:	429c      	cmp	r4, r3
 8012f22:	dd65      	ble.n	8012ff0 <create_DijkstraMap+0x1a60>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012f24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f28:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f2c:	881a      	ldrh	r2, [r3, #0]
 8012f2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f32:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f36:	8819      	ldrh	r1, [r3, #0]
 8012f38:	4838      	ldr	r0, [pc, #224]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	011b      	lsls	r3, r3, #4
 8012f3e:	1a9b      	subs	r3, r3, r2
 8012f40:	440b      	add	r3, r1
 8012f42:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012f46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f4a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012f4e:	881b      	ldrh	r3, [r3, #0]
 8012f50:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f54:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012f58:	8812      	ldrh	r2, [r2, #0]
 8012f5a:	3201      	adds	r2, #1
 8012f5c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012f60:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012f64:	8809      	ldrh	r1, [r1, #0]
 8012f66:	3901      	subs	r1, #1
 8012f68:	4403      	add	r3, r0
 8012f6a:	b29c      	uxth	r4, r3
 8012f6c:	482b      	ldr	r0, [pc, #172]	; (801301c <create_DijkstraMap+0x1a8c>)
 8012f6e:	4613      	mov	r3, r2
 8012f70:	011b      	lsls	r3, r3, #4
 8012f72:	1a9b      	subs	r3, r3, r2
 8012f74:	440b      	add	r3, r1
 8012f76:	33f0      	adds	r3, #240	; 0xf0
 8012f78:	4622      	mov	r2, r4
 8012f7a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8012f7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f82:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f86:	881b      	ldrh	r3, [r3, #0]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	b29a      	uxth	r2, r3
 8012f8c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012f90:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012f94:	4611      	mov	r1, r2
 8012f96:	4618      	mov	r0, r3
 8012f98:	f001 fe4c 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8012f9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fa0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	3b01      	subs	r3, #1
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012fae:	f103 0320 	add.w	r3, r3, #32
 8012fb2:	3b0c      	subs	r3, #12
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f001 fe3c 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012fbc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012fc0:	3b14      	subs	r3, #20
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f001 fe35 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012fca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012fce:	3b3c      	subs	r3, #60	; 0x3c
 8012fd0:	2103      	movs	r1, #3
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f001 fe2e 	bl	8014c34 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012fd8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fdc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012fe0:	881a      	ldrh	r2, [r3, #0]
 8012fe2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012fe6:	3b64      	subs	r3, #100	; 0x64
 8012fe8:	4611      	mov	r1, r2
 8012fea:	4618      	mov	r0, r3
 8012fec:	f001 fe22 	bl	8014c34 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8012ff0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ff4:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8012ff8:	881b      	ldrh	r3, [r3, #0]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013000:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8013004:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 8013006:	f7fe bc0e 	b.w	8011826 <create_DijkstraMap+0x296>

		}



}
 801300a:	bf00      	nop
 801300c:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8013010:	3704      	adds	r7, #4
 8013012:	46bd      	mov	sp, r7
 8013014:	bd90      	pop	{r4, r7, pc}
 8013016:	bf00      	nop
 8013018:	20000c3c 	.word	0x20000c3c
 801301c:	20000f30 	.word	0x20000f30

08013020 <route_Dijkstra>:





void route_Dijkstra(void){
 8013020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013022:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 8013026:	b089      	sub	sp, #36	; 0x24
 8013028:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 801302a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801302e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013032:	4618      	mov	r0, r3
 8013034:	f001 fdee 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_y);
 8013038:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801303c:	f103 0310 	add.w	r3, r3, #16
 8013040:	3b1c      	subs	r3, #28
 8013042:	4618      	mov	r0, r3
 8013044:	f001 fde6 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_matrix);
 8013048:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801304c:	f103 0310 	add.w	r3, r3, #16
 8013050:	3b04      	subs	r3, #4
 8013052:	4618      	mov	r0, r3
 8013054:	f001 fdde 	bl	8014c14 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8013058:	48ce      	ldr	r0, [pc, #824]	; (8013394 <route_Dijkstra+0x374>)
 801305a:	f001 fddb 	bl	8014c14 <initStack_walk>
	initStack_walk(&g_Goal_y);
 801305e:	48ce      	ldr	r0, [pc, #824]	; (8013398 <route_Dijkstra+0x378>)
 8013060:	f001 fdd8 	bl	8014c14 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013064:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013068:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801306c:	2100      	movs	r1, #0
 801306e:	4618      	mov	r0, r3
 8013070:	f001 fde0 	bl	8014c34 <pushStack_walk>
 8013074:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013078:	f103 0310 	add.w	r3, r3, #16
 801307c:	3b1c      	subs	r3, #28
 801307e:	2100      	movs	r1, #0
 8013080:	4618      	mov	r0, r3
 8013082:	f001 fdd7 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 8013086:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801308a:	f103 0310 	add.w	r3, r3, #16
 801308e:	3b04      	subs	r3, #4
 8013090:	2100      	movs	r1, #0
 8013092:	4618      	mov	r0, r3
 8013094:	f001 fdce 	bl	8014c34 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8013098:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801309c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80130a0:	2200      	movs	r2, #0
 80130a2:	601a      	str	r2, [r3, #0]
	int y = 0;
 80130a4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130a8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80130ac:	2200      	movs	r2, #0
 80130ae:	601a      	str	r2, [r3, #0]
	int direction = 1;
 80130b0:	2301      	movs	r3, #1
 80130b2:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80130b6:	f102 020c 	add.w	r2, r2, #12
 80130ba:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 80130bc:	f107 0110 	add.w	r1, r7, #16
 80130c0:	3910      	subs	r1, #16
 80130c2:	f107 0310 	add.w	r3, r7, #16
 80130c6:	3b0c      	subs	r3, #12
 80130c8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80130cc:	f102 020c 	add.w	r2, r2, #12
 80130d0:	6812      	ldr	r2, [r2, #0]
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7fa fe7a 	bl	800ddcc <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 80130d8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130dc:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d006      	beq.n	80130f4 <route_Dijkstra+0xd4>
 80130e6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130ea:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b02      	cmp	r3, #2
 80130f2:	d10f      	bne.n	8013114 <route_Dijkstra+0xf4>
 80130f4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130f8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	f000 837b 	beq.w	80137fa <route_Dijkstra+0x7da>
 8013104:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013108:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	2b01      	cmp	r3, #1
 8013110:	f000 8373 	beq.w	80137fa <route_Dijkstra+0x7da>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 8013114:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013118:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801311c:	6818      	ldr	r0, [r3, #0]
 801311e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013122:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013126:	6819      	ldr	r1, [r3, #0]
 8013128:	f107 0210 	add.w	r2, r7, #16
 801312c:	3a05      	subs	r2, #5
 801312e:	f107 0310 	add.w	r3, r7, #16
 8013132:	3b07      	subs	r3, #7
 8013134:	9301      	str	r3, [sp, #4]
 8013136:	f107 0310 	add.w	r3, r7, #16
 801313a:	3b06      	subs	r3, #6
 801313c:	9300      	str	r3, [sp, #0]
 801313e:	4613      	mov	r3, r2
 8013140:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013144:	f102 020c 	add.w	r2, r2, #12
 8013148:	6812      	ldr	r2, [r2, #0]
 801314a:	f7fd fe05 	bl	8010d58 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 801314e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013152:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013156:	6819      	ldr	r1, [r3, #0]
 8013158:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801315c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013160:	681c      	ldr	r4, [r3, #0]
 8013162:	f107 0310 	add.w	r3, r7, #16
 8013166:	3b04      	subs	r3, #4
 8013168:	f107 0210 	add.w	r2, r7, #16
 801316c:	3a02      	subs	r2, #2
 801316e:	f107 0610 	add.w	r6, r7, #16
 8013172:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8013176:	387e      	subs	r0, #126	; 0x7e
 8013178:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 801317c:	f105 050c 	add.w	r5, r5, #12
 8013180:	682d      	ldr	r5, [r5, #0]
 8013182:	9502      	str	r5, [sp, #8]
 8013184:	9401      	str	r4, [sp, #4]
 8013186:	9100      	str	r1, [sp, #0]
 8013188:	4631      	mov	r1, r6
 801318a:	f7fe f967 	bl	801145c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 801318e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013192:	f6a3 6305 	subw	r3, r3, #3589	; 0xe05
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d006      	beq.n	80131aa <route_Dijkstra+0x18a>
 801319c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131a0:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80131a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131a8:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 80131aa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131ae:	f6a3 6306 	subw	r3, r3, #3590	; 0xe06
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d006      	beq.n	80131c6 <route_Dijkstra+0x1a6>
 80131b8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131bc:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80131c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131c4:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 80131c6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131ca:	f6a3 6307 	subw	r3, r3, #3591	; 0xe07
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d006      	beq.n	80131e2 <route_Dijkstra+0x1c2>
 80131d4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131d8:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80131dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131e0:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 80131e2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131e6:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131f0:	4293      	cmp	r3, r2
 80131f2:	d11b      	bne.n	801322c <route_Dijkstra+0x20c>
 80131f4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131f8:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80131fc:	881b      	ldrh	r3, [r3, #0]
 80131fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013202:	4293      	cmp	r3, r2
 8013204:	d112      	bne.n	801322c <route_Dijkstra+0x20c>
 8013206:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801320a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801320e:	881b      	ldrh	r3, [r3, #0]
 8013210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013214:	4293      	cmp	r3, r2
 8013216:	d109      	bne.n	801322c <route_Dijkstra+0x20c>
 8013218:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801321c:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013220:	881b      	ldrh	r3, [r3, #0]
 8013222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013226:	4293      	cmp	r3, r2
 8013228:	f000 82e6 	beq.w	80137f8 <route_Dijkstra+0x7d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 801322c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013230:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013234:	881a      	ldrh	r2, [r3, #0]
 8013236:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801323a:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801323e:	881b      	ldrh	r3, [r3, #0]
 8013240:	429a      	cmp	r2, r3
 8013242:	f200 80d4 	bhi.w	80133ee <route_Dijkstra+0x3ce>
 8013246:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801324a:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801324e:	881a      	ldrh	r2, [r3, #0]
 8013250:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013254:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013258:	881b      	ldrh	r3, [r3, #0]
 801325a:	429a      	cmp	r2, r3
 801325c:	f200 80c7 	bhi.w	80133ee <route_Dijkstra+0x3ce>
 8013260:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013264:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013268:	881a      	ldrh	r2, [r3, #0]
 801326a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801326e:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013272:	881b      	ldrh	r3, [r3, #0]
 8013274:	429a      	cmp	r2, r3
 8013276:	f200 80ba 	bhi.w	80133ee <route_Dijkstra+0x3ce>
			// 直進
			switch (direction) {		//
 801327a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801327e:	f103 030c 	add.w	r3, r3, #12
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	3b01      	subs	r3, #1
 8013286:	2b03      	cmp	r3, #3
 8013288:	f200 80b2 	bhi.w	80133f0 <route_Dijkstra+0x3d0>
 801328c:	a201      	add	r2, pc, #4	; (adr r2, 8013294 <route_Dijkstra+0x274>)
 801328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013292:	bf00      	nop
 8013294:	080132a5 	.word	0x080132a5
 8013298:	080132f3 	.word	0x080132f3
 801329c:	08013341 	.word	0x08013341
 80132a0:	0801339d 	.word	0x0801339d
			case 1:
				pushStack_walk(&stack_x,x);
 80132a4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132a8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132b4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80132b8:	4611      	mov	r1, r2
 80132ba:	4618      	mov	r0, r3
 80132bc:	f001 fcba 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80132c0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132c4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	b29a      	uxth	r2, r3
 80132cc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80132d0:	f103 0310 	add.w	r3, r3, #16
 80132d4:	3b1c      	subs	r3, #28
 80132d6:	4611      	mov	r1, r2
 80132d8:	4618      	mov	r0, r3
 80132da:	f001 fcab 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80132de:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80132e2:	f103 0310 	add.w	r3, r3, #16
 80132e6:	3b04      	subs	r3, #4
 80132e8:	2100      	movs	r1, #0
 80132ea:	4618      	mov	r0, r3
 80132ec:	f001 fca2 	bl	8014c34 <pushStack_walk>
				break;
 80132f0:	e07e      	b.n	80133f0 <route_Dijkstra+0x3d0>
			case 2:
				pushStack_walk(&stack_x,x);
 80132f2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132f6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013302:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013306:	4611      	mov	r1, r2
 8013308:	4618      	mov	r0, r3
 801330a:	f001 fc93 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801330e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013312:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	b29a      	uxth	r2, r3
 801331a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801331e:	f103 0310 	add.w	r3, r3, #16
 8013322:	3b1c      	subs	r3, #28
 8013324:	4611      	mov	r1, r2
 8013326:	4618      	mov	r0, r3
 8013328:	f001 fc84 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801332c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013330:	f103 0310 	add.w	r3, r3, #16
 8013334:	3b04      	subs	r3, #4
 8013336:	2101      	movs	r1, #1
 8013338:	4618      	mov	r0, r3
 801333a:	f001 fc7b 	bl	8014c34 <pushStack_walk>
				break;
 801333e:	e057      	b.n	80133f0 <route_Dijkstra+0x3d0>
			case 3:
				pushStack_walk(&stack_x,x);
 8013340:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013344:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	b29a      	uxth	r2, r3
 801334c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013350:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013354:	4611      	mov	r1, r2
 8013356:	4618      	mov	r0, r3
 8013358:	f001 fc6c 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801335c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013360:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	b29b      	uxth	r3, r3
 8013368:	3b01      	subs	r3, #1
 801336a:	b29a      	uxth	r2, r3
 801336c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013370:	f103 0310 	add.w	r3, r3, #16
 8013374:	3b1c      	subs	r3, #28
 8013376:	4611      	mov	r1, r2
 8013378:	4618      	mov	r0, r3
 801337a:	f001 fc5b 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801337e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013382:	f103 0310 	add.w	r3, r3, #16
 8013386:	3b04      	subs	r3, #4
 8013388:	2100      	movs	r1, #0
 801338a:	4618      	mov	r0, r3
 801338c:	f001 fc52 	bl	8014c34 <pushStack_walk>
				break;
 8013390:	e02e      	b.n	80133f0 <route_Dijkstra+0x3d0>
 8013392:	bf00      	nop
 8013394:	200012f0 	.word	0x200012f0
 8013398:	20002298 	.word	0x20002298
			case 4:
				pushStack_walk(&stack_x,x-1);
 801339c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133a0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	3b01      	subs	r3, #1
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133b0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80133b4:	4611      	mov	r1, r2
 80133b6:	4618      	mov	r0, r3
 80133b8:	f001 fc3c 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80133bc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133c0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	b29a      	uxth	r2, r3
 80133c8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80133cc:	f103 0310 	add.w	r3, r3, #16
 80133d0:	3b1c      	subs	r3, #28
 80133d2:	4611      	mov	r1, r2
 80133d4:	4618      	mov	r0, r3
 80133d6:	f001 fc2d 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80133da:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80133de:	f103 0310 	add.w	r3, r3, #16
 80133e2:	3b04      	subs	r3, #4
 80133e4:	2101      	movs	r1, #1
 80133e6:	4618      	mov	r0, r3
 80133e8:	f001 fc24 	bl	8014c34 <pushStack_walk>
				break;
 80133ec:	e000      	b.n	80133f0 <route_Dijkstra+0x3d0>
			}

		}
 80133ee:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 80133f0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133f4:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80133f8:	881a      	ldrh	r2, [r3, #0]
 80133fa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133fe:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013402:	881b      	ldrh	r3, [r3, #0]
 8013404:	429a      	cmp	r2, r3
 8013406:	f080 80da 	bcs.w	80135be <route_Dijkstra+0x59e>
 801340a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801340e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013412:	881a      	ldrh	r2, [r3, #0]
 8013414:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013418:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801341c:	881b      	ldrh	r3, [r3, #0]
 801341e:	429a      	cmp	r2, r3
 8013420:	f200 80cd 	bhi.w	80135be <route_Dijkstra+0x59e>
 8013424:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013428:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801342c:	881a      	ldrh	r2, [r3, #0]
 801342e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013432:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013436:	881b      	ldrh	r3, [r3, #0]
 8013438:	429a      	cmp	r2, r3
 801343a:	f200 80c0 	bhi.w	80135be <route_Dijkstra+0x59e>
			// 右旋回
			switch (direction) {		//
 801343e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013442:	f103 030c 	add.w	r3, r3, #12
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	3b01      	subs	r3, #1
 801344a:	2b03      	cmp	r3, #3
 801344c:	f200 80ac 	bhi.w	80135a8 <route_Dijkstra+0x588>
 8013450:	a201      	add	r2, pc, #4	; (adr r2, 8013458 <route_Dijkstra+0x438>)
 8013452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013456:	bf00      	nop
 8013458:	08013469 	.word	0x08013469
 801345c:	080134b7 	.word	0x080134b7
 8013460:	08013509 	.word	0x08013509
 8013464:	0801355b 	.word	0x0801355b
			case 1:
				pushStack_walk(&stack_x,x);
 8013468:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801346c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	b29a      	uxth	r2, r3
 8013474:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013478:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801347c:	4611      	mov	r1, r2
 801347e:	4618      	mov	r0, r3
 8013480:	f001 fbd8 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013484:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013488:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	b29a      	uxth	r2, r3
 8013490:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013494:	f103 0310 	add.w	r3, r3, #16
 8013498:	3b1c      	subs	r3, #28
 801349a:	4611      	mov	r1, r2
 801349c:	4618      	mov	r0, r3
 801349e:	f001 fbc9 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80134a2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134a6:	f103 0310 	add.w	r3, r3, #16
 80134aa:	3b04      	subs	r3, #4
 80134ac:	2101      	movs	r1, #1
 80134ae:	4618      	mov	r0, r3
 80134b0:	f001 fbc0 	bl	8014c34 <pushStack_walk>
				break;
 80134b4:	e078      	b.n	80135a8 <route_Dijkstra+0x588>
			case 2:
				pushStack_walk(&stack_x,x);
 80134b6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134ba:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134c6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80134ca:	4611      	mov	r1, r2
 80134cc:	4618      	mov	r0, r3
 80134ce:	f001 fbb1 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80134d2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134d6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	b29b      	uxth	r3, r3
 80134de:	3b01      	subs	r3, #1
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80134e6:	f103 0310 	add.w	r3, r3, #16
 80134ea:	3b1c      	subs	r3, #28
 80134ec:	4611      	mov	r1, r2
 80134ee:	4618      	mov	r0, r3
 80134f0:	f001 fba0 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80134f4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134f8:	f103 0310 	add.w	r3, r3, #16
 80134fc:	3b04      	subs	r3, #4
 80134fe:	2100      	movs	r1, #0
 8013500:	4618      	mov	r0, r3
 8013502:	f001 fb97 	bl	8014c34 <pushStack_walk>
				break;
 8013506:	e04f      	b.n	80135a8 <route_Dijkstra+0x588>
			case 3:
				pushStack_walk(&stack_x,x-1);
 8013508:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801350c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	b29b      	uxth	r3, r3
 8013514:	3b01      	subs	r3, #1
 8013516:	b29a      	uxth	r2, r3
 8013518:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801351c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013520:	4611      	mov	r1, r2
 8013522:	4618      	mov	r0, r3
 8013524:	f001 fb86 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013528:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801352c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	b29a      	uxth	r2, r3
 8013534:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013538:	f103 0310 	add.w	r3, r3, #16
 801353c:	3b1c      	subs	r3, #28
 801353e:	4611      	mov	r1, r2
 8013540:	4618      	mov	r0, r3
 8013542:	f001 fb77 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013546:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801354a:	f103 0310 	add.w	r3, r3, #16
 801354e:	3b04      	subs	r3, #4
 8013550:	2101      	movs	r1, #1
 8013552:	4618      	mov	r0, r3
 8013554:	f001 fb6e 	bl	8014c34 <pushStack_walk>
				break;
 8013558:	e026      	b.n	80135a8 <route_Dijkstra+0x588>
			case 4:
				pushStack_walk(&stack_x,x);
 801355a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801355e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	b29a      	uxth	r2, r3
 8013566:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801356a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801356e:	4611      	mov	r1, r2
 8013570:	4618      	mov	r0, r3
 8013572:	f001 fb5f 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013576:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801357a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	b29a      	uxth	r2, r3
 8013582:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013586:	f103 0310 	add.w	r3, r3, #16
 801358a:	3b1c      	subs	r3, #28
 801358c:	4611      	mov	r1, r2
 801358e:	4618      	mov	r0, r3
 8013590:	f001 fb50 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013594:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013598:	f103 0310 	add.w	r3, r3, #16
 801359c:	3b04      	subs	r3, #4
 801359e:	2100      	movs	r1, #0
 80135a0:	4618      	mov	r0, r3
 80135a2:	f001 fb47 	bl	8014c34 <pushStack_walk>
				break;
 80135a6:	bf00      	nop
			}
			direction++;
 80135a8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135ac:	f103 030c 	add.w	r3, r3, #12
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	3301      	adds	r3, #1
 80135b4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80135b8:	f102 020c 	add.w	r2, r2, #12
 80135bc:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80135be:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135c2:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80135c6:	881a      	ldrh	r2, [r3, #0]
 80135c8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135cc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80135d0:	881b      	ldrh	r3, [r3, #0]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	f080 80d9 	bcs.w	801378a <route_Dijkstra+0x76a>
 80135d8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135dc:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80135e0:	881a      	ldrh	r2, [r3, #0]
 80135e2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135e6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80135ea:	881b      	ldrh	r3, [r3, #0]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	f080 80cc 	bcs.w	801378a <route_Dijkstra+0x76a>
 80135f2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135f6:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80135fa:	881a      	ldrh	r2, [r3, #0]
 80135fc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013600:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	429a      	cmp	r2, r3
 8013608:	f200 80bf 	bhi.w	801378a <route_Dijkstra+0x76a>
			// 左旋回
			switch (direction) {		//
 801360c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013610:	f103 030c 	add.w	r3, r3, #12
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	3b01      	subs	r3, #1
 8013618:	2b03      	cmp	r3, #3
 801361a:	f200 80ab 	bhi.w	8013774 <route_Dijkstra+0x754>
 801361e:	a201      	add	r2, pc, #4	; (adr r2, 8013624 <route_Dijkstra+0x604>)
 8013620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013624:	08013635 	.word	0x08013635
 8013628:	08013687 	.word	0x08013687
 801362c:	080136d5 	.word	0x080136d5
 8013630:	08013723 	.word	0x08013723
			case 1:
				pushStack_walk(&stack_x,x-1);
 8013634:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013638:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	b29b      	uxth	r3, r3
 8013640:	3b01      	subs	r3, #1
 8013642:	b29a      	uxth	r2, r3
 8013644:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013648:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801364c:	4611      	mov	r1, r2
 801364e:	4618      	mov	r0, r3
 8013650:	f001 faf0 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013654:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013658:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	b29a      	uxth	r2, r3
 8013660:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013664:	f103 0310 	add.w	r3, r3, #16
 8013668:	3b1c      	subs	r3, #28
 801366a:	4611      	mov	r1, r2
 801366c:	4618      	mov	r0, r3
 801366e:	f001 fae1 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013672:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013676:	f103 0310 	add.w	r3, r3, #16
 801367a:	3b04      	subs	r3, #4
 801367c:	2101      	movs	r1, #1
 801367e:	4618      	mov	r0, r3
 8013680:	f001 fad8 	bl	8014c34 <pushStack_walk>
				break;
 8013684:	e076      	b.n	8013774 <route_Dijkstra+0x754>
			case 2:
				pushStack_walk(&stack_x,x);
 8013686:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801368a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	b29a      	uxth	r2, r3
 8013692:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013696:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801369a:	4611      	mov	r1, r2
 801369c:	4618      	mov	r0, r3
 801369e:	f001 fac9 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136a2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136a6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	b29a      	uxth	r2, r3
 80136ae:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80136b2:	f103 0310 	add.w	r3, r3, #16
 80136b6:	3b1c      	subs	r3, #28
 80136b8:	4611      	mov	r1, r2
 80136ba:	4618      	mov	r0, r3
 80136bc:	f001 faba 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80136c0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80136c4:	f103 0310 	add.w	r3, r3, #16
 80136c8:	3b04      	subs	r3, #4
 80136ca:	2100      	movs	r1, #0
 80136cc:	4618      	mov	r0, r3
 80136ce:	f001 fab1 	bl	8014c34 <pushStack_walk>
				break;
 80136d2:	e04f      	b.n	8013774 <route_Dijkstra+0x754>
			case 3:
				pushStack_walk(&stack_x,x);
 80136d4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136d8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	b29a      	uxth	r2, r3
 80136e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136e4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80136e8:	4611      	mov	r1, r2
 80136ea:	4618      	mov	r0, r3
 80136ec:	f001 faa2 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136f0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136f4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	b29a      	uxth	r2, r3
 80136fc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013700:	f103 0310 	add.w	r3, r3, #16
 8013704:	3b1c      	subs	r3, #28
 8013706:	4611      	mov	r1, r2
 8013708:	4618      	mov	r0, r3
 801370a:	f001 fa93 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801370e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013712:	f103 0310 	add.w	r3, r3, #16
 8013716:	3b04      	subs	r3, #4
 8013718:	2101      	movs	r1, #1
 801371a:	4618      	mov	r0, r3
 801371c:	f001 fa8a 	bl	8014c34 <pushStack_walk>
				break;
 8013720:	e028      	b.n	8013774 <route_Dijkstra+0x754>
			case 4:
				pushStack_walk(&stack_x,x);
 8013722:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013726:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	b29a      	uxth	r2, r3
 801372e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013732:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013736:	4611      	mov	r1, r2
 8013738:	4618      	mov	r0, r3
 801373a:	f001 fa7b 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801373e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013742:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	b29b      	uxth	r3, r3
 801374a:	3b01      	subs	r3, #1
 801374c:	b29a      	uxth	r2, r3
 801374e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013752:	f103 0310 	add.w	r3, r3, #16
 8013756:	3b1c      	subs	r3, #28
 8013758:	4611      	mov	r1, r2
 801375a:	4618      	mov	r0, r3
 801375c:	f001 fa6a 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013760:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013764:	f103 0310 	add.w	r3, r3, #16
 8013768:	3b04      	subs	r3, #4
 801376a:	2100      	movs	r1, #0
 801376c:	4618      	mov	r0, r3
 801376e:	f001 fa61 	bl	8014c34 <pushStack_walk>
				break;
 8013772:	bf00      	nop
			}
			direction--;
 8013774:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013778:	f103 030c 	add.w	r3, r3, #12
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	3b01      	subs	r3, #1
 8013780:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013784:	f102 020c 	add.w	r2, r2, #12
 8013788:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 801378a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801378e:	f103 030c 	add.w	r3, r3, #12
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	2b05      	cmp	r3, #5
 8013796:	d105      	bne.n	80137a4 <route_Dijkstra+0x784>
			direction = 1;
 8013798:	2301      	movs	r3, #1
 801379a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801379e:	f102 020c 	add.w	r2, r2, #12
 80137a2:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80137a4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80137a8:	f103 030c 	add.w	r3, r3, #12
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b06      	cmp	r3, #6
 80137b0:	d105      	bne.n	80137be <route_Dijkstra+0x79e>
			direction = 2;
 80137b2:	2302      	movs	r3, #2
 80137b4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80137b8:	f102 020c 	add.w	r2, r2, #12
 80137bc:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 80137be:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80137c2:	f103 030c 	add.w	r3, r3, #12
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d105      	bne.n	80137d8 <route_Dijkstra+0x7b8>
			direction = 4;
 80137cc:	2304      	movs	r3, #4
 80137ce:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80137d2:	f102 020c 	add.w	r2, r2, #12
 80137d6:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 80137d8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80137dc:	f103 030c 	add.w	r3, r3, #12
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137e6:	f47f ac69 	bne.w	80130bc <route_Dijkstra+0x9c>
			direction = 3;
 80137ea:	2303      	movs	r3, #3
 80137ec:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80137f0:	f102 020c 	add.w	r2, r2, #12
 80137f4:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 80137f6:	e461      	b.n	80130bc <route_Dijkstra+0x9c>
			break;
 80137f8:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 80137fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137fe:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013802:	4618      	mov	r0, r3
 8013804:	f001 fa40 	bl	8014c88 <popStack_walk>
 8013808:	4603      	mov	r3, r0
 801380a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801380e:	f102 020a 	add.w	r2, r2, #10
 8013812:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 8013814:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013818:	f103 0310 	add.w	r3, r3, #16
 801381c:	3b1c      	subs	r3, #28
 801381e:	4618      	mov	r0, r3
 8013820:	f001 fa32 	bl	8014c88 <popStack_walk>
 8013824:	4603      	mov	r3, r0
 8013826:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801382a:	f102 0208 	add.w	r2, r2, #8
 801382e:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013830:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013834:	f103 0310 	add.w	r3, r3, #16
 8013838:	3b04      	subs	r3, #4
 801383a:	4618      	mov	r0, r3
 801383c:	f001 fa24 	bl	8014c88 <popStack_walk>
 8013840:	4603      	mov	r3, r0
 8013842:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013846:	f102 0206 	add.w	r2, r2, #6
 801384a:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801384c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013850:	f103 030a 	add.w	r3, r3, #10
 8013854:	881b      	ldrh	r3, [r3, #0]
 8013856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801385a:	4293      	cmp	r3, r2
 801385c:	f000 80d5 	beq.w	8013a0a <route_Dijkstra+0x9ea>
 8013860:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013864:	f103 0308 	add.w	r3, r3, #8
 8013868:	881b      	ldrh	r3, [r3, #0]
 801386a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801386e:	4293      	cmp	r3, r2
 8013870:	f000 80cb 	beq.w	8013a0a <route_Dijkstra+0x9ea>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 8013874:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013878:	f103 0306 	add.w	r3, r3, #6
 801387c:	881b      	ldrh	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d15c      	bne.n	801393c <route_Dijkstra+0x91c>
 8013882:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013886:	f103 0308 	add.w	r3, r3, #8
 801388a:	881b      	ldrh	r3, [r3, #0]
 801388c:	4a62      	ldr	r2, [pc, #392]	; (8013a18 <route_Dijkstra+0x9f8>)
 801388e:	332c      	adds	r3, #44	; 0x2c
 8013890:	005b      	lsls	r3, r3, #1
 8013892:	4413      	add	r3, r2
 8013894:	885b      	ldrh	r3, [r3, #2]
 8013896:	461a      	mov	r2, r3
 8013898:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801389c:	f103 030a 	add.w	r3, r3, #10
 80138a0:	881b      	ldrh	r3, [r3, #0]
 80138a2:	fa42 f303 	asr.w	r3, r2, r3
 80138a6:	f003 0301 	and.w	r3, r3, #1
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d146      	bne.n	801393c <route_Dijkstra+0x91c>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80138ae:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138b2:	f103 030a 	add.w	r3, r3, #10
 80138b6:	881a      	ldrh	r2, [r3, #0]
 80138b8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138bc:	f103 0308 	add.w	r3, r3, #8
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	4956      	ldr	r1, [pc, #344]	; (8013a1c <route_Dijkstra+0x9fc>)
 80138c4:	0112      	lsls	r2, r2, #4
 80138c6:	4413      	add	r3, r2
 80138c8:	2200      	movs	r2, #0
 80138ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 80138ce:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138d2:	f103 030a 	add.w	r3, r3, #10
 80138d6:	881a      	ldrh	r2, [r3, #0]
 80138d8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138dc:	f103 0308 	add.w	r3, r3, #8
 80138e0:	881b      	ldrh	r3, [r3, #0]
 80138e2:	3301      	adds	r3, #1
 80138e4:	494d      	ldr	r1, [pc, #308]	; (8013a1c <route_Dijkstra+0x9fc>)
 80138e6:	0112      	lsls	r2, r2, #4
 80138e8:	4413      	add	r3, r2
 80138ea:	2200      	movs	r2, #0
 80138ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80138f0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138f4:	f103 030a 	add.w	r3, r3, #10
 80138f8:	881b      	ldrh	r3, [r3, #0]
 80138fa:	4619      	mov	r1, r3
 80138fc:	4848      	ldr	r0, [pc, #288]	; (8013a20 <route_Dijkstra+0xa00>)
 80138fe:	f001 f999 	bl	8014c34 <pushStack_walk>
 8013902:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013906:	f103 0308 	add.w	r3, r3, #8
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	4619      	mov	r1, r3
 801390e:	4845      	ldr	r0, [pc, #276]	; (8013a24 <route_Dijkstra+0xa04>)
 8013910:	f001 f990 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013914:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013918:	f103 030a 	add.w	r3, r3, #10
 801391c:	881b      	ldrh	r3, [r3, #0]
 801391e:	4619      	mov	r1, r3
 8013920:	483f      	ldr	r0, [pc, #252]	; (8013a20 <route_Dijkstra+0xa00>)
 8013922:	f001 f987 	bl	8014c34 <pushStack_walk>
 8013926:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801392a:	f103 0308 	add.w	r3, r3, #8
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	3301      	adds	r3, #1
 8013932:	b29b      	uxth	r3, r3
 8013934:	4619      	mov	r1, r3
 8013936:	483b      	ldr	r0, [pc, #236]	; (8013a24 <route_Dijkstra+0xa04>)
 8013938:	f001 f97c 	bl	8014c34 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 801393c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013940:	f103 0306 	add.w	r3, r3, #6
 8013944:	881b      	ldrh	r3, [r3, #0]
 8013946:	2b01      	cmp	r3, #1
 8013948:	f47f af57 	bne.w	80137fa <route_Dijkstra+0x7da>
 801394c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013950:	f103 030a 	add.w	r3, r3, #10
 8013954:	881b      	ldrh	r3, [r3, #0]
 8013956:	4a30      	ldr	r2, [pc, #192]	; (8013a18 <route_Dijkstra+0x9f8>)
 8013958:	331c      	adds	r3, #28
 801395a:	005b      	lsls	r3, r3, #1
 801395c:	4413      	add	r3, r2
 801395e:	889b      	ldrh	r3, [r3, #4]
 8013960:	461a      	mov	r2, r3
 8013962:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013966:	f103 0308 	add.w	r3, r3, #8
 801396a:	881b      	ldrh	r3, [r3, #0]
 801396c:	fa42 f303 	asr.w	r3, r2, r3
 8013970:	f003 0301 	and.w	r3, r3, #1
 8013974:	2b00      	cmp	r3, #0
 8013976:	f47f af40 	bne.w	80137fa <route_Dijkstra+0x7da>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 801397a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801397e:	f103 030a 	add.w	r3, r3, #10
 8013982:	881a      	ldrh	r2, [r3, #0]
 8013984:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013988:	f103 0308 	add.w	r3, r3, #8
 801398c:	881b      	ldrh	r3, [r3, #0]
 801398e:	4923      	ldr	r1, [pc, #140]	; (8013a1c <route_Dijkstra+0x9fc>)
 8013990:	0112      	lsls	r2, r2, #4
 8013992:	4413      	add	r3, r2
 8013994:	2200      	movs	r2, #0
 8013996:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 801399a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801399e:	f103 030a 	add.w	r3, r3, #10
 80139a2:	881b      	ldrh	r3, [r3, #0]
 80139a4:	1c5a      	adds	r2, r3, #1
 80139a6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139aa:	f103 0308 	add.w	r3, r3, #8
 80139ae:	881b      	ldrh	r3, [r3, #0]
 80139b0:	491a      	ldr	r1, [pc, #104]	; (8013a1c <route_Dijkstra+0x9fc>)
 80139b2:	0112      	lsls	r2, r2, #4
 80139b4:	4413      	add	r3, r2
 80139b6:	2200      	movs	r2, #0
 80139b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80139bc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139c0:	f103 030a 	add.w	r3, r3, #10
 80139c4:	881b      	ldrh	r3, [r3, #0]
 80139c6:	4619      	mov	r1, r3
 80139c8:	4815      	ldr	r0, [pc, #84]	; (8013a20 <route_Dijkstra+0xa00>)
 80139ca:	f001 f933 	bl	8014c34 <pushStack_walk>
 80139ce:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139d2:	f103 0308 	add.w	r3, r3, #8
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	4619      	mov	r1, r3
 80139da:	4812      	ldr	r0, [pc, #72]	; (8013a24 <route_Dijkstra+0xa04>)
 80139dc:	f001 f92a 	bl	8014c34 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 80139e0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139e4:	f103 030a 	add.w	r3, r3, #10
 80139e8:	881b      	ldrh	r3, [r3, #0]
 80139ea:	3301      	adds	r3, #1
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	4619      	mov	r1, r3
 80139f0:	480b      	ldr	r0, [pc, #44]	; (8013a20 <route_Dijkstra+0xa00>)
 80139f2:	f001 f91f 	bl	8014c34 <pushStack_walk>
 80139f6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139fa:	f103 0308 	add.w	r3, r3, #8
 80139fe:	881b      	ldrh	r3, [r3, #0]
 8013a00:	4619      	mov	r1, r3
 8013a02:	4808      	ldr	r0, [pc, #32]	; (8013a24 <route_Dijkstra+0xa04>)
 8013a04:	f001 f916 	bl	8014c34 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013a08:	e6f7      	b.n	80137fa <route_Dijkstra+0x7da>
			}
	}


}
 8013a0a:	bf00      	nop
 8013a0c:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8013a10:	3714      	adds	r7, #20
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a16:	bf00      	nop
 8013a18:	20000c3c 	.word	0x20000c3c
 8013a1c:	20000d30 	.word	0x20000d30
 8013a20:	200012f0 	.word	0x200012f0
 8013a24:	20002298 	.word	0x20002298

08013a28 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013a32:	2300      	movs	r3, #0
 8013a34:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013a38:	f102 0207 	add.w	r2, r2, #7
 8013a3c:	7013      	strb	r3, [r2, #0]
 8013a3e:	e033      	b.n	8013aa8 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013a40:	2300      	movs	r3, #0
 8013a42:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013a46:	f102 0206 	add.w	r2, r2, #6
 8013a4a:	7013      	strb	r3, [r2, #0]
 8013a4c:	e01a      	b.n	8013a84 <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = 255;
 8013a4e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013a52:	f103 0307 	add.w	r3, r3, #7
 8013a56:	781a      	ldrb	r2, [r3, #0]
 8013a58:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013a5c:	f103 0306 	add.w	r3, r3, #6
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	4966      	ldr	r1, [pc, #408]	; (8013bfc <create_StepCountMap_unknown+0x1d4>)
 8013a64:	0112      	lsls	r2, r2, #4
 8013a66:	4413      	add	r3, r2
 8013a68:	22ff      	movs	r2, #255	; 0xff
 8013a6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013a6e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013a72:	f103 0306 	add.w	r3, r3, #6
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013a7e:	f102 0206 	add.w	r2, r2, #6
 8013a82:	7013      	strb	r3, [r2, #0]
 8013a84:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013a88:	f103 0306 	add.w	r3, r3, #6
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	2b0f      	cmp	r3, #15
 8013a90:	d9dd      	bls.n	8013a4e <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013a92:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013a96:	f103 0307 	add.w	r3, r3, #7
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013aa2:	f102 0207 	add.w	r2, r2, #7
 8013aa6:	7013      	strb	r3, [r2, #0]
 8013aa8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013aac:	f103 0307 	add.w	r3, r3, #7
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	2b0f      	cmp	r3, #15
 8013ab4:	d9c4      	bls.n	8013a40 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 8013ab6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013aba:	4618      	mov	r0, r3
 8013abc:	f001 f8aa 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_y);
 8013ac0:	f107 0308 	add.w	r3, r7, #8
 8013ac4:	3b04      	subs	r3, #4
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f001 f8a4 	bl	8014c14 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013acc:	484c      	ldr	r0, [pc, #304]	; (8013c00 <create_StepCountMap_unknown+0x1d8>)
 8013ace:	f001 f8db 	bl	8014c88 <popStack_walk>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013ad8:	f102 021a 	add.w	r2, r2, #26
 8013adc:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 8013ade:	4849      	ldr	r0, [pc, #292]	; (8013c04 <create_StepCountMap_unknown+0x1dc>)
 8013ae0:	f001 f8d2 	bl	8014c88 <popStack_walk>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013aea:	f102 0218 	add.w	r2, r2, #24
 8013aee:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013af0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013af4:	f103 031a 	add.w	r3, r3, #26
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d030      	beq.n	8013b64 <create_StepCountMap_unknown+0x13c>
 8013b02:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b06:	f103 0318 	add.w	r3, r3, #24
 8013b0a:	881b      	ldrh	r3, [r3, #0]
 8013b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d027      	beq.n	8013b64 <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8013b14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b18:	f103 031a 	add.w	r3, r3, #26
 8013b1c:	881a      	ldrh	r2, [r3, #0]
 8013b1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b22:	f103 0318 	add.w	r3, r3, #24
 8013b26:	881b      	ldrh	r3, [r3, #0]
 8013b28:	4934      	ldr	r1, [pc, #208]	; (8013bfc <create_StepCountMap_unknown+0x1d4>)
 8013b2a:	0112      	lsls	r2, r2, #4
 8013b2c:	4413      	add	r3, r2
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013b34:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b38:	f103 031a 	add.w	r3, r3, #26
 8013b3c:	881a      	ldrh	r2, [r3, #0]
 8013b3e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013b42:	4611      	mov	r1, r2
 8013b44:	4618      	mov	r0, r3
 8013b46:	f001 f875 	bl	8014c34 <pushStack_walk>
 8013b4a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b4e:	f103 0318 	add.w	r3, r3, #24
 8013b52:	881a      	ldrh	r2, [r3, #0]
 8013b54:	f107 0308 	add.w	r3, r7, #8
 8013b58:	3b04      	subs	r3, #4
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f001 f869 	bl	8014c34 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013b62:	e7b3      	b.n	8013acc <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8013b64:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b68:	f103 0308 	add.w	r3, r3, #8
 8013b6c:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013b70:	685a      	ldr	r2, [r3, #4]
 8013b72:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b76:	f103 0308 	add.w	r3, r3, #8
 8013b7a:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d11b      	bne.n	8013bbc <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 8013b84:	4b1d      	ldr	r3, [pc, #116]	; (8013bfc <create_StepCountMap_unknown+0x1d4>)
 8013b86:	2200      	movs	r2, #0
 8013b88:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013b8a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013b8e:	2100      	movs	r1, #0
 8013b90:	4618      	mov	r0, r3
 8013b92:	f001 f84f 	bl	8014c34 <pushStack_walk>
 8013b96:	f107 0308 	add.w	r3, r7, #8
 8013b9a:	3b04      	subs	r3, #4
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f001 f848 	bl	8014c34 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 8013ba4:	4b18      	ldr	r3, [pc, #96]	; (8013c08 <create_StepCountMap_unknown+0x1e0>)
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d003      	beq.n	8013bb4 <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 8013bac:	4b16      	ldr	r3, [pc, #88]	; (8013c08 <create_StepCountMap_unknown+0x1e0>)
 8013bae:	2202      	movs	r2, #2
 8013bb0:	701a      	strb	r2, [r3, #0]
 8013bb2:	e006      	b.n	8013bc2 <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 8013bb4:	4b14      	ldr	r3, [pc, #80]	; (8013c08 <create_StepCountMap_unknown+0x1e0>)
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	701a      	strb	r2, [r3, #0]
 8013bba:	e002      	b.n	8013bc2 <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 8013bbc:	4b12      	ldr	r3, [pc, #72]	; (8013c08 <create_StepCountMap_unknown+0x1e0>)
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013bc8:	f102 0204 	add.w	r2, r2, #4
 8013bcc:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013bce:	2301      	movs	r3, #1
 8013bd0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013bd4:	f102 0202 	add.w	r2, r2, #2
 8013bd8:	8013      	strh	r3, [r2, #0]
 8013bda:	2301      	movs	r3, #1
 8013bdc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013be0:	8013      	strh	r3, [r2, #0]
 8013be2:	2301      	movs	r3, #1
 8013be4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013be8:	f102 021e 	add.w	r2, r2, #30
 8013bec:	8013      	strh	r3, [r2, #0]
 8013bee:	2301      	movs	r3, #1
 8013bf0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013bf4:	f102 021c 	add.w	r2, r2, #28
 8013bf8:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013bfa:	e23b      	b.n	8014074 <create_StepCountMap_unknown+0x64c>
 8013bfc:	20000d30 	.word	0x20000d30
 8013c00:	200012f0 	.word	0x200012f0
 8013c04:	20002298 	.word	0x20002298
 8013c08:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013c0c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c10:	4618      	mov	r0, r3
 8013c12:	f001 f839 	bl	8014c88 <popStack_walk>
 8013c16:	4603      	mov	r3, r0
 8013c18:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c1c:	f102 0216 	add.w	r2, r2, #22
 8013c20:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8013c22:	f107 0308 	add.w	r3, r7, #8
 8013c26:	3b04      	subs	r3, #4
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f001 f82d 	bl	8014c88 <popStack_walk>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c34:	f102 0214 	add.w	r2, r2, #20
 8013c38:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013c3a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c3e:	f103 0316 	add.w	r3, r3, #22
 8013c42:	881b      	ldrh	r3, [r3, #0]
 8013c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	f000 821b 	beq.w	8014084 <create_StepCountMap_unknown+0x65c>
 8013c4e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c52:	f103 0314 	add.w	r3, r3, #20
 8013c56:	881b      	ldrh	r3, [r3, #0]
 8013c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	f000 8211 	beq.w	8014084 <create_StepCountMap_unknown+0x65c>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8013c62:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c66:	f103 0314 	add.w	r3, r3, #20
 8013c6a:	881b      	ldrh	r3, [r3, #0]
 8013c6c:	2b0e      	cmp	r3, #14
 8013c6e:	d81a      	bhi.n	8013ca6 <create_StepCountMap_unknown+0x27e>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013c70:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c74:	f103 0314 	add.w	r3, r3, #20
 8013c78:	881b      	ldrh	r3, [r3, #0]
 8013c7a:	4ac4      	ldr	r2, [pc, #784]	; (8013f8c <create_StepCountMap_unknown+0x564>)
 8013c7c:	330c      	adds	r3, #12
 8013c7e:	005b      	lsls	r3, r3, #1
 8013c80:	4413      	add	r3, r2
 8013c82:	88db      	ldrh	r3, [r3, #6]
 8013c84:	b21a      	sxth	r2, r3
 8013c86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c8a:	f103 0316 	add.w	r3, r3, #22
 8013c8e:	881b      	ldrh	r3, [r3, #0]
 8013c90:	2101      	movs	r1, #1
 8013c92:	fa01 f303 	lsl.w	r3, r1, r3
 8013c96:	b21b      	sxth	r3, r3
 8013c98:	4013      	ands	r3, r2
 8013c9a:	b21b      	sxth	r3, r3
 8013c9c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013ca0:	f102 0202 	add.w	r2, r2, #2
 8013ca4:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8013ca6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013caa:	f103 0314 	add.w	r3, r3, #20
 8013cae:	881b      	ldrh	r3, [r3, #0]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d019      	beq.n	8013ce8 <create_StepCountMap_unknown+0x2c0>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013cb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cb8:	f103 0314 	add.w	r3, r3, #20
 8013cbc:	881b      	ldrh	r3, [r3, #0]
 8013cbe:	3b01      	subs	r3, #1
 8013cc0:	4ab2      	ldr	r2, [pc, #712]	; (8013f8c <create_StepCountMap_unknown+0x564>)
 8013cc2:	330c      	adds	r3, #12
 8013cc4:	005b      	lsls	r3, r3, #1
 8013cc6:	4413      	add	r3, r2
 8013cc8:	88db      	ldrh	r3, [r3, #6]
 8013cca:	b21a      	sxth	r2, r3
 8013ccc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cd0:	f103 0316 	add.w	r3, r3, #22
 8013cd4:	881b      	ldrh	r3, [r3, #0]
 8013cd6:	2101      	movs	r1, #1
 8013cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8013cdc:	b21b      	sxth	r3, r3
 8013cde:	4013      	ands	r3, r2
 8013ce0:	b21b      	sxth	r3, r3
 8013ce2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013ce6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8013ce8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cec:	f103 0316 	add.w	r3, r3, #22
 8013cf0:	881b      	ldrh	r3, [r3, #0]
 8013cf2:	2b0e      	cmp	r3, #14
 8013cf4:	d818      	bhi.n	8013d28 <create_StepCountMap_unknown+0x300>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013cf6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cfa:	f103 0316 	add.w	r3, r3, #22
 8013cfe:	881b      	ldrh	r3, [r3, #0]
 8013d00:	4aa2      	ldr	r2, [pc, #648]	; (8013f8c <create_StepCountMap_unknown+0x564>)
 8013d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d06:	b21a      	sxth	r2, r3
 8013d08:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d0c:	f103 0314 	add.w	r3, r3, #20
 8013d10:	881b      	ldrh	r3, [r3, #0]
 8013d12:	2101      	movs	r1, #1
 8013d14:	fa01 f303 	lsl.w	r3, r1, r3
 8013d18:	b21b      	sxth	r3, r3
 8013d1a:	4013      	ands	r3, r2
 8013d1c:	b21b      	sxth	r3, r3
 8013d1e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d22:	f102 021e 	add.w	r2, r2, #30
 8013d26:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013d28:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d2c:	f103 0316 	add.w	r3, r3, #22
 8013d30:	881b      	ldrh	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d019      	beq.n	8013d6a <create_StepCountMap_unknown+0x342>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013d36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d3a:	f103 0316 	add.w	r3, r3, #22
 8013d3e:	881b      	ldrh	r3, [r3, #0]
 8013d40:	3b01      	subs	r3, #1
 8013d42:	4a92      	ldr	r2, [pc, #584]	; (8013f8c <create_StepCountMap_unknown+0x564>)
 8013d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d48:	b21a      	sxth	r2, r3
 8013d4a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d4e:	f103 0314 	add.w	r3, r3, #20
 8013d52:	881b      	ldrh	r3, [r3, #0]
 8013d54:	2101      	movs	r1, #1
 8013d56:	fa01 f303 	lsl.w	r3, r1, r3
 8013d5a:	b21b      	sxth	r3, r3
 8013d5c:	4013      	ands	r3, r2
 8013d5e:	b21b      	sxth	r3, r3
 8013d60:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d64:	f102 021c 	add.w	r2, r2, #28
 8013d68:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013d6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d6e:	f103 0316 	add.w	r3, r3, #22
 8013d72:	881a      	ldrh	r2, [r3, #0]
 8013d74:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d78:	f103 0314 	add.w	r3, r3, #20
 8013d7c:	881b      	ldrh	r3, [r3, #0]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	4983      	ldr	r1, [pc, #524]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013d82:	0112      	lsls	r2, r2, #4
 8013d84:	4413      	add	r3, r2
 8013d86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d8a:	2bff      	cmp	r3, #255	; 0xff
 8013d8c:	d148      	bne.n	8013e20 <create_StepCountMap_unknown+0x3f8>
 8013d8e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d92:	f103 0314 	add.w	r3, r3, #20
 8013d96:	881b      	ldrh	r3, [r3, #0]
 8013d98:	2b0f      	cmp	r3, #15
 8013d9a:	d041      	beq.n	8013e20 <create_StepCountMap_unknown+0x3f8>
 8013d9c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013da0:	f103 0302 	add.w	r3, r3, #2
 8013da4:	881b      	ldrh	r3, [r3, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d13a      	bne.n	8013e20 <create_StepCountMap_unknown+0x3f8>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013daa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dae:	f103 0316 	add.w	r3, r3, #22
 8013db2:	881a      	ldrh	r2, [r3, #0]
 8013db4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013db8:	f103 0314 	add.w	r3, r3, #20
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	4974      	ldr	r1, [pc, #464]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013dc0:	0112      	lsls	r2, r2, #4
 8013dc2:	4413      	add	r3, r2
 8013dc4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013dc8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dcc:	f103 0316 	add.w	r3, r3, #22
 8013dd0:	881a      	ldrh	r2, [r3, #0]
 8013dd2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dd6:	f103 0314 	add.w	r3, r3, #20
 8013dda:	881b      	ldrh	r3, [r3, #0]
 8013ddc:	3301      	adds	r3, #1
 8013dde:	3101      	adds	r1, #1
 8013de0:	b288      	uxth	r0, r1
 8013de2:	496b      	ldr	r1, [pc, #428]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013de4:	0112      	lsls	r2, r2, #4
 8013de6:	4413      	add	r3, r2
 8013de8:	4602      	mov	r2, r0
 8013dea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013dee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013df2:	f103 0316 	add.w	r3, r3, #22
 8013df6:	881a      	ldrh	r2, [r3, #0]
 8013df8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013dfc:	4611      	mov	r1, r2
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f000 ff18 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013e04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e08:	f103 0314 	add.w	r3, r3, #20
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	f107 0308 	add.w	r3, r7, #8
 8013e16:	3b04      	subs	r3, #4
 8013e18:	4611      	mov	r1, r2
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f000 ff0a 	bl	8014c34 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013e20:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e24:	f103 0316 	add.w	r3, r3, #22
 8013e28:	881a      	ldrh	r2, [r3, #0]
 8013e2a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e2e:	f103 0314 	add.w	r3, r3, #20
 8013e32:	881b      	ldrh	r3, [r3, #0]
 8013e34:	3b01      	subs	r3, #1
 8013e36:	4956      	ldr	r1, [pc, #344]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013e38:	0112      	lsls	r2, r2, #4
 8013e3a:	4413      	add	r3, r2
 8013e3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013e40:	2bff      	cmp	r3, #255	; 0xff
 8013e42:	d146      	bne.n	8013ed2 <create_StepCountMap_unknown+0x4aa>
 8013e44:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e48:	f103 0314 	add.w	r3, r3, #20
 8013e4c:	881b      	ldrh	r3, [r3, #0]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d03f      	beq.n	8013ed2 <create_StepCountMap_unknown+0x4aa>
 8013e52:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013e56:	881b      	ldrh	r3, [r3, #0]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d13a      	bne.n	8013ed2 <create_StepCountMap_unknown+0x4aa>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013e5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e60:	f103 0316 	add.w	r3, r3, #22
 8013e64:	881a      	ldrh	r2, [r3, #0]
 8013e66:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e6a:	f103 0314 	add.w	r3, r3, #20
 8013e6e:	881b      	ldrh	r3, [r3, #0]
 8013e70:	4947      	ldr	r1, [pc, #284]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013e72:	0112      	lsls	r2, r2, #4
 8013e74:	4413      	add	r3, r2
 8013e76:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013e7a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e7e:	f103 0316 	add.w	r3, r3, #22
 8013e82:	881a      	ldrh	r2, [r3, #0]
 8013e84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e88:	f103 0314 	add.w	r3, r3, #20
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	3b01      	subs	r3, #1
 8013e90:	3101      	adds	r1, #1
 8013e92:	b288      	uxth	r0, r1
 8013e94:	493e      	ldr	r1, [pc, #248]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013e96:	0112      	lsls	r2, r2, #4
 8013e98:	4413      	add	r3, r2
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013ea0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ea4:	f103 0316 	add.w	r3, r3, #22
 8013ea8:	881a      	ldrh	r2, [r3, #0]
 8013eaa:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013eae:	4611      	mov	r1, r2
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f000 febf 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013eb6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eba:	f103 0314 	add.w	r3, r3, #20
 8013ebe:	881b      	ldrh	r3, [r3, #0]
 8013ec0:	3b01      	subs	r3, #1
 8013ec2:	b29a      	uxth	r2, r3
 8013ec4:	f107 0308 	add.w	r3, r7, #8
 8013ec8:	3b04      	subs	r3, #4
 8013eca:	4611      	mov	r1, r2
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f000 feb1 	bl	8014c34 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013ed2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ed6:	f103 0316 	add.w	r3, r3, #22
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	1c5a      	adds	r2, r3, #1
 8013ede:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ee2:	f103 0314 	add.w	r3, r3, #20
 8013ee6:	881b      	ldrh	r3, [r3, #0]
 8013ee8:	4929      	ldr	r1, [pc, #164]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013eea:	0112      	lsls	r2, r2, #4
 8013eec:	4413      	add	r3, r2
 8013eee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013ef2:	2bff      	cmp	r3, #255	; 0xff
 8013ef4:	d14e      	bne.n	8013f94 <create_StepCountMap_unknown+0x56c>
 8013ef6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013efa:	f103 0316 	add.w	r3, r3, #22
 8013efe:	881b      	ldrh	r3, [r3, #0]
 8013f00:	2b0f      	cmp	r3, #15
 8013f02:	d047      	beq.n	8013f94 <create_StepCountMap_unknown+0x56c>
 8013f04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f08:	f103 031e 	add.w	r3, r3, #30
 8013f0c:	881b      	ldrh	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d140      	bne.n	8013f94 <create_StepCountMap_unknown+0x56c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013f12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f16:	f103 0316 	add.w	r3, r3, #22
 8013f1a:	881a      	ldrh	r2, [r3, #0]
 8013f1c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f20:	f103 0314 	add.w	r3, r3, #20
 8013f24:	881b      	ldrh	r3, [r3, #0]
 8013f26:	491a      	ldr	r1, [pc, #104]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013f28:	0112      	lsls	r2, r2, #4
 8013f2a:	4413      	add	r3, r2
 8013f2c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013f30:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f34:	f103 0316 	add.w	r3, r3, #22
 8013f38:	881b      	ldrh	r3, [r3, #0]
 8013f3a:	1c5a      	adds	r2, r3, #1
 8013f3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f40:	f103 0314 	add.w	r3, r3, #20
 8013f44:	881b      	ldrh	r3, [r3, #0]
 8013f46:	3101      	adds	r1, #1
 8013f48:	b288      	uxth	r0, r1
 8013f4a:	4911      	ldr	r1, [pc, #68]	; (8013f90 <create_StepCountMap_unknown+0x568>)
 8013f4c:	0112      	lsls	r2, r2, #4
 8013f4e:	4413      	add	r3, r2
 8013f50:	4602      	mov	r2, r0
 8013f52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013f56:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f5a:	f103 0316 	add.w	r3, r3, #22
 8013f5e:	881b      	ldrh	r3, [r3, #0]
 8013f60:	3301      	adds	r3, #1
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013f68:	4611      	mov	r1, r2
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f000 fe62 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013f70:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f74:	f103 0314 	add.w	r3, r3, #20
 8013f78:	881a      	ldrh	r2, [r3, #0]
 8013f7a:	f107 0308 	add.w	r3, r7, #8
 8013f7e:	3b04      	subs	r3, #4
 8013f80:	4611      	mov	r1, r2
 8013f82:	4618      	mov	r0, r3
 8013f84:	f000 fe56 	bl	8014c34 <pushStack_walk>
 8013f88:	e004      	b.n	8013f94 <create_StepCountMap_unknown+0x56c>
 8013f8a:	bf00      	nop
 8013f8c:	20000c3c 	.word	0x20000c3c
 8013f90:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013f94:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f98:	f103 0316 	add.w	r3, r3, #22
 8013f9c:	881b      	ldrh	r3, [r3, #0]
 8013f9e:	1e5a      	subs	r2, r3, #1
 8013fa0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fa4:	f103 0314 	add.w	r3, r3, #20
 8013fa8:	881b      	ldrh	r3, [r3, #0]
 8013faa:	4939      	ldr	r1, [pc, #228]	; (8014090 <create_StepCountMap_unknown+0x668>)
 8013fac:	0112      	lsls	r2, r2, #4
 8013fae:	4413      	add	r3, r2
 8013fb0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013fb4:	2bff      	cmp	r3, #255	; 0xff
 8013fb6:	d148      	bne.n	801404a <create_StepCountMap_unknown+0x622>
 8013fb8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fbc:	f103 0316 	add.w	r3, r3, #22
 8013fc0:	881b      	ldrh	r3, [r3, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d041      	beq.n	801404a <create_StepCountMap_unknown+0x622>
 8013fc6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fca:	f103 031c 	add.w	r3, r3, #28
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d13a      	bne.n	801404a <create_StepCountMap_unknown+0x622>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013fd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fd8:	f103 0316 	add.w	r3, r3, #22
 8013fdc:	881a      	ldrh	r2, [r3, #0]
 8013fde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fe2:	f103 0314 	add.w	r3, r3, #20
 8013fe6:	881b      	ldrh	r3, [r3, #0]
 8013fe8:	4929      	ldr	r1, [pc, #164]	; (8014090 <create_StepCountMap_unknown+0x668>)
 8013fea:	0112      	lsls	r2, r2, #4
 8013fec:	4413      	add	r3, r2
 8013fee:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013ff2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ff6:	f103 0316 	add.w	r3, r3, #22
 8013ffa:	881b      	ldrh	r3, [r3, #0]
 8013ffc:	1e5a      	subs	r2, r3, #1
 8013ffe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014002:	f103 0314 	add.w	r3, r3, #20
 8014006:	881b      	ldrh	r3, [r3, #0]
 8014008:	3101      	adds	r1, #1
 801400a:	b288      	uxth	r0, r1
 801400c:	4920      	ldr	r1, [pc, #128]	; (8014090 <create_StepCountMap_unknown+0x668>)
 801400e:	0112      	lsls	r2, r2, #4
 8014010:	4413      	add	r3, r2
 8014012:	4602      	mov	r2, r0
 8014014:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014018:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801401c:	f103 0316 	add.w	r3, r3, #22
 8014020:	881b      	ldrh	r3, [r3, #0]
 8014022:	3b01      	subs	r3, #1
 8014024:	b29a      	uxth	r2, r3
 8014026:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801402a:	4611      	mov	r1, r2
 801402c:	4618      	mov	r0, r3
 801402e:	f000 fe01 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014032:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014036:	f103 0314 	add.w	r3, r3, #20
 801403a:	881a      	ldrh	r2, [r3, #0]
 801403c:	f107 0308 	add.w	r3, r7, #8
 8014040:	3b04      	subs	r3, #4
 8014042:	4611      	mov	r1, r2
 8014044:	4618      	mov	r0, r3
 8014046:	f000 fdf5 	bl	8014c34 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801404a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801404e:	f103 0316 	add.w	r3, r3, #22
 8014052:	881a      	ldrh	r2, [r3, #0]
 8014054:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014058:	f103 0314 	add.w	r3, r3, #20
 801405c:	881b      	ldrh	r3, [r3, #0]
 801405e:	490c      	ldr	r1, [pc, #48]	; (8014090 <create_StepCountMap_unknown+0x668>)
 8014060:	0112      	lsls	r2, r2, #4
 8014062:	4413      	add	r3, r2
 8014064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014068:	3301      	adds	r3, #1
 801406a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801406e:	f102 0204 	add.w	r2, r2, #4
 8014072:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014074:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014078:	f103 0304 	add.w	r3, r3, #4
 801407c:	881b      	ldrh	r3, [r3, #0]
 801407e:	2bfe      	cmp	r3, #254	; 0xfe
 8014080:	f67f adc4 	bls.w	8013c0c <create_StepCountMap_unknown+0x1e4>

		}

}
 8014084:	bf00      	nop
 8014086:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	20000d30 	.word	0x20000d30

08014094 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8014094:	b580      	push	{r7, lr}
 8014096:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801409a:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801409c:	2300      	movs	r3, #0
 801409e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80140a2:	f102 021f 	add.w	r2, r2, #31
 80140a6:	7013      	strb	r3, [r2, #0]
 80140a8:	e033      	b.n	8014112 <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80140aa:	2300      	movs	r3, #0
 80140ac:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80140b0:	f102 021e 	add.w	r2, r2, #30
 80140b4:	7013      	strb	r3, [r2, #0]
 80140b6:	e01a      	b.n	80140ee <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = 255;
 80140b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140bc:	f103 031f 	add.w	r3, r3, #31
 80140c0:	781a      	ldrb	r2, [r3, #0]
 80140c2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140c6:	f103 031e 	add.w	r3, r3, #30
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	4945      	ldr	r1, [pc, #276]	; (80141e4 <create_StepCountMap_queue+0x150>)
 80140ce:	0112      	lsls	r2, r2, #4
 80140d0:	4413      	add	r3, r2
 80140d2:	22ff      	movs	r2, #255	; 0xff
 80140d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80140d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140dc:	f103 031e 	add.w	r3, r3, #30
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	3301      	adds	r3, #1
 80140e4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80140e8:	f102 021e 	add.w	r2, r2, #30
 80140ec:	7013      	strb	r3, [r2, #0]
 80140ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140f2:	f103 031e 	add.w	r3, r3, #30
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	2b0f      	cmp	r3, #15
 80140fa:	d9dd      	bls.n	80140b8 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80140fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014100:	f103 031f 	add.w	r3, r3, #31
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	3301      	adds	r3, #1
 8014108:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801410c:	f102 021f 	add.w	r2, r2, #31
 8014110:	7013      	strb	r3, [r2, #0]
 8014112:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014116:	f103 031f 	add.w	r3, r3, #31
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	2b0f      	cmp	r3, #15
 801411e:	d9c4      	bls.n	80140aa <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8014120:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014124:	4618      	mov	r0, r3
 8014126:	f000 fd75 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_y);
 801412a:	463b      	mov	r3, r7
 801412c:	4618      	mov	r0, r3
 801412e:	f000 fd71 	bl	8014c14 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8014132:	4b2c      	ldr	r3, [pc, #176]	; (80141e4 <create_StepCountMap_queue+0x150>)
 8014134:	2200      	movs	r2, #0
 8014136:	841a      	strh	r2, [r3, #32]
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8014138:	4b2a      	ldr	r3, [pc, #168]	; (80141e4 <create_StepCountMap_queue+0x150>)
 801413a:	2200      	movs	r2, #0
 801413c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8014140:	4b28      	ldr	r3, [pc, #160]	; (80141e4 <create_StepCountMap_queue+0x150>)
 8014142:	2200      	movs	r2, #0
 8014144:	845a      	strh	r2, [r3, #34]	; 0x22
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8014146:	4b27      	ldr	r3, [pc, #156]	; (80141e4 <create_StepCountMap_queue+0x150>)
 8014148:	2200      	movs	r2, #0
 801414a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801414e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014152:	2101      	movs	r1, #1
 8014154:	4618      	mov	r0, r3
 8014156:	f000 fd6d 	bl	8014c34 <pushStack_walk>
 801415a:	463b      	mov	r3, r7
 801415c:	2100      	movs	r1, #0
 801415e:	4618      	mov	r0, r3
 8014160:	f000 fd68 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8014164:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014168:	2102      	movs	r1, #2
 801416a:	4618      	mov	r0, r3
 801416c:	f000 fd62 	bl	8014c34 <pushStack_walk>
 8014170:	463b      	mov	r3, r7
 8014172:	2100      	movs	r1, #0
 8014174:	4618      	mov	r0, r3
 8014176:	f000 fd5d 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 801417a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801417e:	2101      	movs	r1, #1
 8014180:	4618      	mov	r0, r3
 8014182:	f000 fd57 	bl	8014c34 <pushStack_walk>
 8014186:	463b      	mov	r3, r7
 8014188:	2101      	movs	r1, #1
 801418a:	4618      	mov	r0, r3
 801418c:	f000 fd52 	bl	8014c34 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014190:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014194:	2102      	movs	r1, #2
 8014196:	4618      	mov	r0, r3
 8014198:	f000 fd4c 	bl	8014c34 <pushStack_walk>
 801419c:	463b      	mov	r3, r7
 801419e:	2101      	movs	r1, #1
 80141a0:	4618      	mov	r0, r3
 80141a2:	f000 fd47 	bl	8014c34 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80141a6:	2301      	movs	r3, #1
 80141a8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141ac:	f102 021c 	add.w	r2, r2, #28
 80141b0:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80141b2:	2301      	movs	r3, #1
 80141b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141b8:	f102 021a 	add.w	r2, r2, #26
 80141bc:	8013      	strh	r3, [r2, #0]
 80141be:	2301      	movs	r3, #1
 80141c0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141c4:	f102 0218 	add.w	r2, r2, #24
 80141c8:	8013      	strh	r3, [r2, #0]
 80141ca:	2301      	movs	r3, #1
 80141cc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141d0:	f102 0216 	add.w	r2, r2, #22
 80141d4:	8013      	strh	r3, [r2, #0]
 80141d6:	2301      	movs	r3, #1
 80141d8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141dc:	f102 0214 	add.w	r2, r2, #20
 80141e0:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80141e2:	e22f      	b.n	8014644 <create_StepCountMap_queue+0x5b0>
 80141e4:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 80141e8:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80141ec:	4618      	mov	r0, r3
 80141ee:	f000 fd4b 	bl	8014c88 <popStack_walk>
 80141f2:	4603      	mov	r3, r0
 80141f4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141f8:	f102 0212 	add.w	r2, r2, #18
 80141fc:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80141fe:	463b      	mov	r3, r7
 8014200:	4618      	mov	r0, r3
 8014202:	f000 fd41 	bl	8014c88 <popStack_walk>
 8014206:	4603      	mov	r3, r0
 8014208:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801420c:	f102 0210 	add.w	r2, r2, #16
 8014210:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014212:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014216:	f103 0312 	add.w	r3, r3, #18
 801421a:	881b      	ldrh	r3, [r3, #0]
 801421c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014220:	4293      	cmp	r3, r2
 8014222:	f000 8217 	beq.w	8014654 <create_StepCountMap_queue+0x5c0>
 8014226:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801422a:	f103 0310 	add.w	r3, r3, #16
 801422e:	881b      	ldrh	r3, [r3, #0]
 8014230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014234:	4293      	cmp	r3, r2
 8014236:	f000 820d 	beq.w	8014654 <create_StepCountMap_queue+0x5c0>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 801423a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801423e:	f103 0310 	add.w	r3, r3, #16
 8014242:	881b      	ldrh	r3, [r3, #0]
 8014244:	2b0e      	cmp	r3, #14
 8014246:	d81a      	bhi.n	801427e <create_StepCountMap_queue+0x1ea>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014248:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801424c:	f103 0310 	add.w	r3, r3, #16
 8014250:	881b      	ldrh	r3, [r3, #0]
 8014252:	4aca      	ldr	r2, [pc, #808]	; (801457c <create_StepCountMap_queue+0x4e8>)
 8014254:	330c      	adds	r3, #12
 8014256:	005b      	lsls	r3, r3, #1
 8014258:	4413      	add	r3, r2
 801425a:	88db      	ldrh	r3, [r3, #6]
 801425c:	b21a      	sxth	r2, r3
 801425e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014262:	f103 0312 	add.w	r3, r3, #18
 8014266:	881b      	ldrh	r3, [r3, #0]
 8014268:	2101      	movs	r1, #1
 801426a:	fa01 f303 	lsl.w	r3, r1, r3
 801426e:	b21b      	sxth	r3, r3
 8014270:	4013      	ands	r3, r2
 8014272:	b21b      	sxth	r3, r3
 8014274:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014278:	f102 021a 	add.w	r2, r2, #26
 801427c:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 801427e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014282:	f103 0310 	add.w	r3, r3, #16
 8014286:	881b      	ldrh	r3, [r3, #0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d01b      	beq.n	80142c4 <create_StepCountMap_queue+0x230>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 801428c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014290:	f103 0310 	add.w	r3, r3, #16
 8014294:	881b      	ldrh	r3, [r3, #0]
 8014296:	3b01      	subs	r3, #1
 8014298:	4ab8      	ldr	r2, [pc, #736]	; (801457c <create_StepCountMap_queue+0x4e8>)
 801429a:	330c      	adds	r3, #12
 801429c:	005b      	lsls	r3, r3, #1
 801429e:	4413      	add	r3, r2
 80142a0:	88db      	ldrh	r3, [r3, #6]
 80142a2:	b21a      	sxth	r2, r3
 80142a4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142a8:	f103 0312 	add.w	r3, r3, #18
 80142ac:	881b      	ldrh	r3, [r3, #0]
 80142ae:	2101      	movs	r1, #1
 80142b0:	fa01 f303 	lsl.w	r3, r1, r3
 80142b4:	b21b      	sxth	r3, r3
 80142b6:	4013      	ands	r3, r2
 80142b8:	b21b      	sxth	r3, r3
 80142ba:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142be:	f102 0218 	add.w	r2, r2, #24
 80142c2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80142c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142c8:	f103 0312 	add.w	r3, r3, #18
 80142cc:	881b      	ldrh	r3, [r3, #0]
 80142ce:	2b0e      	cmp	r3, #14
 80142d0:	d818      	bhi.n	8014304 <create_StepCountMap_queue+0x270>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80142d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142d6:	f103 0312 	add.w	r3, r3, #18
 80142da:	881b      	ldrh	r3, [r3, #0]
 80142dc:	4aa7      	ldr	r2, [pc, #668]	; (801457c <create_StepCountMap_queue+0x4e8>)
 80142de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80142e2:	b21a      	sxth	r2, r3
 80142e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142e8:	f103 0310 	add.w	r3, r3, #16
 80142ec:	881b      	ldrh	r3, [r3, #0]
 80142ee:	2101      	movs	r1, #1
 80142f0:	fa01 f303 	lsl.w	r3, r1, r3
 80142f4:	b21b      	sxth	r3, r3
 80142f6:	4013      	ands	r3, r2
 80142f8:	b21b      	sxth	r3, r3
 80142fa:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142fe:	f102 0216 	add.w	r2, r2, #22
 8014302:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8014304:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014308:	f103 0312 	add.w	r3, r3, #18
 801430c:	881b      	ldrh	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d019      	beq.n	8014346 <create_StepCountMap_queue+0x2b2>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8014312:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014316:	f103 0312 	add.w	r3, r3, #18
 801431a:	881b      	ldrh	r3, [r3, #0]
 801431c:	3b01      	subs	r3, #1
 801431e:	4a97      	ldr	r2, [pc, #604]	; (801457c <create_StepCountMap_queue+0x4e8>)
 8014320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014324:	b21a      	sxth	r2, r3
 8014326:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801432a:	f103 0310 	add.w	r3, r3, #16
 801432e:	881b      	ldrh	r3, [r3, #0]
 8014330:	2101      	movs	r1, #1
 8014332:	fa01 f303 	lsl.w	r3, r1, r3
 8014336:	b21b      	sxth	r3, r3
 8014338:	4013      	ands	r3, r2
 801433a:	b21b      	sxth	r3, r3
 801433c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014340:	f102 0214 	add.w	r2, r2, #20
 8014344:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014346:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801434a:	f103 0312 	add.w	r3, r3, #18
 801434e:	881a      	ldrh	r2, [r3, #0]
 8014350:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014354:	f103 0310 	add.w	r3, r3, #16
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	3301      	adds	r3, #1
 801435c:	4988      	ldr	r1, [pc, #544]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 801435e:	0112      	lsls	r2, r2, #4
 8014360:	4413      	add	r3, r2
 8014362:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014366:	2bff      	cmp	r3, #255	; 0xff
 8014368:	d146      	bne.n	80143f8 <create_StepCountMap_queue+0x364>
 801436a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801436e:	f103 0310 	add.w	r3, r3, #16
 8014372:	881b      	ldrh	r3, [r3, #0]
 8014374:	2b0f      	cmp	r3, #15
 8014376:	d03f      	beq.n	80143f8 <create_StepCountMap_queue+0x364>
 8014378:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801437c:	f103 031a 	add.w	r3, r3, #26
 8014380:	881b      	ldrh	r3, [r3, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d138      	bne.n	80143f8 <create_StepCountMap_queue+0x364>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014386:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801438a:	f103 0312 	add.w	r3, r3, #18
 801438e:	881a      	ldrh	r2, [r3, #0]
 8014390:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014394:	f103 0310 	add.w	r3, r3, #16
 8014398:	881b      	ldrh	r3, [r3, #0]
 801439a:	4979      	ldr	r1, [pc, #484]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 801439c:	0112      	lsls	r2, r2, #4
 801439e:	4413      	add	r3, r2
 80143a0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80143a4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143a8:	f103 0312 	add.w	r3, r3, #18
 80143ac:	881a      	ldrh	r2, [r3, #0]
 80143ae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143b2:	f103 0310 	add.w	r3, r3, #16
 80143b6:	881b      	ldrh	r3, [r3, #0]
 80143b8:	3301      	adds	r3, #1
 80143ba:	3101      	adds	r1, #1
 80143bc:	b288      	uxth	r0, r1
 80143be:	4970      	ldr	r1, [pc, #448]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 80143c0:	0112      	lsls	r2, r2, #4
 80143c2:	4413      	add	r3, r2
 80143c4:	4602      	mov	r2, r0
 80143c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80143ca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143ce:	f103 0312 	add.w	r3, r3, #18
 80143d2:	881a      	ldrh	r2, [r3, #0]
 80143d4:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80143d8:	4611      	mov	r1, r2
 80143da:	4618      	mov	r0, r3
 80143dc:	f000 fc2a 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 80143e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143e4:	f103 0310 	add.w	r3, r3, #16
 80143e8:	881b      	ldrh	r3, [r3, #0]
 80143ea:	3301      	adds	r3, #1
 80143ec:	b29a      	uxth	r2, r3
 80143ee:	463b      	mov	r3, r7
 80143f0:	4611      	mov	r1, r2
 80143f2:	4618      	mov	r0, r3
 80143f4:	f000 fc1e 	bl	8014c34 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 80143f8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143fc:	f103 0312 	add.w	r3, r3, #18
 8014400:	881a      	ldrh	r2, [r3, #0]
 8014402:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014406:	f103 0310 	add.w	r3, r3, #16
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	3b01      	subs	r3, #1
 801440e:	495c      	ldr	r1, [pc, #368]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 8014410:	0112      	lsls	r2, r2, #4
 8014412:	4413      	add	r3, r2
 8014414:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014418:	2bff      	cmp	r3, #255	; 0xff
 801441a:	d146      	bne.n	80144aa <create_StepCountMap_queue+0x416>
 801441c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014420:	f103 0310 	add.w	r3, r3, #16
 8014424:	881b      	ldrh	r3, [r3, #0]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d03f      	beq.n	80144aa <create_StepCountMap_queue+0x416>
 801442a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801442e:	f103 0318 	add.w	r3, r3, #24
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d138      	bne.n	80144aa <create_StepCountMap_queue+0x416>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014438:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801443c:	f103 0312 	add.w	r3, r3, #18
 8014440:	881a      	ldrh	r2, [r3, #0]
 8014442:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014446:	f103 0310 	add.w	r3, r3, #16
 801444a:	881b      	ldrh	r3, [r3, #0]
 801444c:	494c      	ldr	r1, [pc, #304]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 801444e:	0112      	lsls	r2, r2, #4
 8014450:	4413      	add	r3, r2
 8014452:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014456:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801445a:	f103 0312 	add.w	r3, r3, #18
 801445e:	881a      	ldrh	r2, [r3, #0]
 8014460:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014464:	f103 0310 	add.w	r3, r3, #16
 8014468:	881b      	ldrh	r3, [r3, #0]
 801446a:	3b01      	subs	r3, #1
 801446c:	3101      	adds	r1, #1
 801446e:	b288      	uxth	r0, r1
 8014470:	4943      	ldr	r1, [pc, #268]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 8014472:	0112      	lsls	r2, r2, #4
 8014474:	4413      	add	r3, r2
 8014476:	4602      	mov	r2, r0
 8014478:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801447c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014480:	f103 0312 	add.w	r3, r3, #18
 8014484:	881a      	ldrh	r2, [r3, #0]
 8014486:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801448a:	4611      	mov	r1, r2
 801448c:	4618      	mov	r0, r3
 801448e:	f000 fbd1 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014492:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014496:	f103 0310 	add.w	r3, r3, #16
 801449a:	881b      	ldrh	r3, [r3, #0]
 801449c:	3b01      	subs	r3, #1
 801449e:	b29a      	uxth	r2, r3
 80144a0:	463b      	mov	r3, r7
 80144a2:	4611      	mov	r1, r2
 80144a4:	4618      	mov	r0, r3
 80144a6:	f000 fbc5 	bl	8014c34 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80144aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ae:	f103 0312 	add.w	r3, r3, #18
 80144b2:	881b      	ldrh	r3, [r3, #0]
 80144b4:	1c5a      	adds	r2, r3, #1
 80144b6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ba:	f103 0310 	add.w	r3, r3, #16
 80144be:	881b      	ldrh	r3, [r3, #0]
 80144c0:	492f      	ldr	r1, [pc, #188]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 80144c2:	0112      	lsls	r2, r2, #4
 80144c4:	4413      	add	r3, r2
 80144c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80144ca:	2bff      	cmp	r3, #255	; 0xff
 80144cc:	d146      	bne.n	801455c <create_StepCountMap_queue+0x4c8>
 80144ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144d2:	f103 0312 	add.w	r3, r3, #18
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	2b0f      	cmp	r3, #15
 80144da:	d03f      	beq.n	801455c <create_StepCountMap_queue+0x4c8>
 80144dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144e0:	f103 0316 	add.w	r3, r3, #22
 80144e4:	881b      	ldrh	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d138      	bne.n	801455c <create_StepCountMap_queue+0x4c8>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80144ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ee:	f103 0312 	add.w	r3, r3, #18
 80144f2:	881a      	ldrh	r2, [r3, #0]
 80144f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144f8:	f103 0310 	add.w	r3, r3, #16
 80144fc:	881b      	ldrh	r3, [r3, #0]
 80144fe:	4920      	ldr	r1, [pc, #128]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 8014500:	0112      	lsls	r2, r2, #4
 8014502:	4413      	add	r3, r2
 8014504:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014508:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801450c:	f103 0312 	add.w	r3, r3, #18
 8014510:	881b      	ldrh	r3, [r3, #0]
 8014512:	1c5a      	adds	r2, r3, #1
 8014514:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014518:	f103 0310 	add.w	r3, r3, #16
 801451c:	881b      	ldrh	r3, [r3, #0]
 801451e:	3101      	adds	r1, #1
 8014520:	b288      	uxth	r0, r1
 8014522:	4917      	ldr	r1, [pc, #92]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 8014524:	0112      	lsls	r2, r2, #4
 8014526:	4413      	add	r3, r2
 8014528:	4602      	mov	r2, r0
 801452a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801452e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014532:	f103 0312 	add.w	r3, r3, #18
 8014536:	881b      	ldrh	r3, [r3, #0]
 8014538:	3301      	adds	r3, #1
 801453a:	b29a      	uxth	r2, r3
 801453c:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014540:	4611      	mov	r1, r2
 8014542:	4618      	mov	r0, r3
 8014544:	f000 fb76 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014548:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801454c:	f103 0310 	add.w	r3, r3, #16
 8014550:	881a      	ldrh	r2, [r3, #0]
 8014552:	463b      	mov	r3, r7
 8014554:	4611      	mov	r1, r2
 8014556:	4618      	mov	r0, r3
 8014558:	f000 fb6c 	bl	8014c34 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 801455c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014560:	f103 0312 	add.w	r3, r3, #18
 8014564:	881b      	ldrh	r3, [r3, #0]
 8014566:	1e5a      	subs	r2, r3, #1
 8014568:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801456c:	f103 0310 	add.w	r3, r3, #16
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	4903      	ldr	r1, [pc, #12]	; (8014580 <create_StepCountMap_queue+0x4ec>)
 8014574:	0112      	lsls	r2, r2, #4
 8014576:	4413      	add	r3, r2
 8014578:	e004      	b.n	8014584 <create_StepCountMap_queue+0x4f0>
 801457a:	bf00      	nop
 801457c:	20000c3c 	.word	0x20000c3c
 8014580:	20000d30 	.word	0x20000d30
 8014584:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014588:	2bff      	cmp	r3, #255	; 0xff
 801458a:	d146      	bne.n	801461a <create_StepCountMap_queue+0x586>
 801458c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014590:	f103 0312 	add.w	r3, r3, #18
 8014594:	881b      	ldrh	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d03f      	beq.n	801461a <create_StepCountMap_queue+0x586>
 801459a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801459e:	f103 0314 	add.w	r3, r3, #20
 80145a2:	881b      	ldrh	r3, [r3, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d138      	bne.n	801461a <create_StepCountMap_queue+0x586>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80145a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ac:	f103 0312 	add.w	r3, r3, #18
 80145b0:	881a      	ldrh	r2, [r3, #0]
 80145b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145b6:	f103 0310 	add.w	r3, r3, #16
 80145ba:	881b      	ldrh	r3, [r3, #0]
 80145bc:	4928      	ldr	r1, [pc, #160]	; (8014660 <create_StepCountMap_queue+0x5cc>)
 80145be:	0112      	lsls	r2, r2, #4
 80145c0:	4413      	add	r3, r2
 80145c2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80145c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ca:	f103 0312 	add.w	r3, r3, #18
 80145ce:	881b      	ldrh	r3, [r3, #0]
 80145d0:	1e5a      	subs	r2, r3, #1
 80145d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145d6:	f103 0310 	add.w	r3, r3, #16
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	3101      	adds	r1, #1
 80145de:	b288      	uxth	r0, r1
 80145e0:	491f      	ldr	r1, [pc, #124]	; (8014660 <create_StepCountMap_queue+0x5cc>)
 80145e2:	0112      	lsls	r2, r2, #4
 80145e4:	4413      	add	r3, r2
 80145e6:	4602      	mov	r2, r0
 80145e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80145ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145f0:	f103 0312 	add.w	r3, r3, #18
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	3b01      	subs	r3, #1
 80145f8:	b29a      	uxth	r2, r3
 80145fa:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80145fe:	4611      	mov	r1, r2
 8014600:	4618      	mov	r0, r3
 8014602:	f000 fb17 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014606:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801460a:	f103 0310 	add.w	r3, r3, #16
 801460e:	881a      	ldrh	r2, [r3, #0]
 8014610:	463b      	mov	r3, r7
 8014612:	4611      	mov	r1, r2
 8014614:	4618      	mov	r0, r3
 8014616:	f000 fb0d 	bl	8014c34 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801461a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801461e:	f103 0312 	add.w	r3, r3, #18
 8014622:	881a      	ldrh	r2, [r3, #0]
 8014624:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014628:	f103 0310 	add.w	r3, r3, #16
 801462c:	881b      	ldrh	r3, [r3, #0]
 801462e:	490c      	ldr	r1, [pc, #48]	; (8014660 <create_StepCountMap_queue+0x5cc>)
 8014630:	0112      	lsls	r2, r2, #4
 8014632:	4413      	add	r3, r2
 8014634:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014638:	3301      	adds	r3, #1
 801463a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801463e:	f102 021c 	add.w	r2, r2, #28
 8014642:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014644:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014648:	f103 031c 	add.w	r3, r3, #28
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	2bfe      	cmp	r3, #254	; 0xfe
 8014650:	f67f adca 	bls.w	80141e8 <create_StepCountMap_queue+0x154>

		}

}
 8014654:	bf00      	nop
 8014656:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	20000d30 	.word	0x20000d30

08014664 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8014664:	b580      	push	{r7, lr}
 8014666:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801466e:	2300      	movs	r3, #0
 8014670:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014674:	f102 0207 	add.w	r2, r2, #7
 8014678:	7013      	strb	r3, [r2, #0]
 801467a:	e033      	b.n	80146e4 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 801467c:	2300      	movs	r3, #0
 801467e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014682:	f102 0206 	add.w	r2, r2, #6
 8014686:	7013      	strb	r3, [r2, #0]
 8014688:	e01a      	b.n	80146c0 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = 255;
 801468a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801468e:	f103 0307 	add.w	r3, r3, #7
 8014692:	781a      	ldrb	r2, [r3, #0]
 8014694:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014698:	f103 0306 	add.w	r3, r3, #6
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	4931      	ldr	r1, [pc, #196]	; (8014764 <create_StepCountMapBack_queue+0x100>)
 80146a0:	0112      	lsls	r2, r2, #4
 80146a2:	4413      	add	r3, r2
 80146a4:	22ff      	movs	r2, #255	; 0xff
 80146a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80146aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80146ae:	f103 0306 	add.w	r3, r3, #6
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	3301      	adds	r3, #1
 80146b6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80146ba:	f102 0206 	add.w	r2, r2, #6
 80146be:	7013      	strb	r3, [r2, #0]
 80146c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80146c4:	f103 0306 	add.w	r3, r3, #6
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	2b0f      	cmp	r3, #15
 80146cc:	d9dd      	bls.n	801468a <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80146ce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80146d2:	f103 0307 	add.w	r3, r3, #7
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	3301      	adds	r3, #1
 80146da:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80146de:	f102 0207 	add.w	r2, r2, #7
 80146e2:	7013      	strb	r3, [r2, #0]
 80146e4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80146e8:	f103 0307 	add.w	r3, r3, #7
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	2b0f      	cmp	r3, #15
 80146f0:	d9c4      	bls.n	801467c <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 80146f2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80146f6:	4618      	mov	r0, r3
 80146f8:	f000 fa8c 	bl	8014c14 <initStack_walk>
	initStack_walk(&stack_y);
 80146fc:	f107 0308 	add.w	r3, r7, #8
 8014700:	3b04      	subs	r3, #4
 8014702:	4618      	mov	r0, r3
 8014704:	f000 fa86 	bl	8014c14 <initStack_walk>


	walk_count[0][0] = 0;
 8014708:	4b16      	ldr	r3, [pc, #88]	; (8014764 <create_StepCountMapBack_queue+0x100>)
 801470a:	2200      	movs	r2, #0
 801470c:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801470e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014712:	2100      	movs	r1, #0
 8014714:	4618      	mov	r0, r3
 8014716:	f000 fa8d 	bl	8014c34 <pushStack_walk>
 801471a:	f107 0308 	add.w	r3, r7, #8
 801471e:	3b04      	subs	r3, #4
 8014720:	2100      	movs	r1, #0
 8014722:	4618      	mov	r0, r3
 8014724:	f000 fa86 	bl	8014c34 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8014728:	2301      	movs	r3, #1
 801472a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801472e:	f102 0204 	add.w	r2, r2, #4
 8014732:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014734:	2301      	movs	r3, #1
 8014736:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801473a:	f102 0202 	add.w	r2, r2, #2
 801473e:	8013      	strh	r3, [r2, #0]
 8014740:	2301      	movs	r3, #1
 8014742:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014746:	8013      	strh	r3, [r2, #0]
 8014748:	2301      	movs	r3, #1
 801474a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801474e:	f102 021e 	add.w	r2, r2, #30
 8014752:	8013      	strh	r3, [r2, #0]
 8014754:	2301      	movs	r3, #1
 8014756:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801475a:	f102 021c 	add.w	r2, r2, #28
 801475e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014760:	e248      	b.n	8014bf4 <create_StepCountMapBack_queue+0x590>
 8014762:	bf00      	nop
 8014764:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 8014768:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801476c:	4618      	mov	r0, r3
 801476e:	f000 fa8b 	bl	8014c88 <popStack_walk>
 8014772:	4603      	mov	r3, r0
 8014774:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014778:	f102 021a 	add.w	r2, r2, #26
 801477c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801477e:	f107 0308 	add.w	r3, r7, #8
 8014782:	3b04      	subs	r3, #4
 8014784:	4618      	mov	r0, r3
 8014786:	f000 fa7f 	bl	8014c88 <popStack_walk>
 801478a:	4603      	mov	r3, r0
 801478c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014790:	f102 0218 	add.w	r2, r2, #24
 8014794:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014796:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801479a:	f103 031a 	add.w	r3, r3, #26
 801479e:	881b      	ldrh	r3, [r3, #0]
 80147a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147a4:	4293      	cmp	r3, r2
 80147a6:	f000 822d 	beq.w	8014c04 <create_StepCountMapBack_queue+0x5a0>
 80147aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147ae:	f103 0318 	add.w	r3, r3, #24
 80147b2:	881b      	ldrh	r3, [r3, #0]
 80147b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147b8:	4293      	cmp	r3, r2
 80147ba:	f000 8223 	beq.w	8014c04 <create_StepCountMapBack_queue+0x5a0>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 80147be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147c2:	f103 031a 	add.w	r3, r3, #26
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	011b      	lsls	r3, r3, #4
 80147ca:	b29a      	uxth	r2, r3
 80147cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147d0:	f103 0318 	add.w	r3, r3, #24
 80147d4:	881b      	ldrh	r3, [r3, #0]
 80147d6:	4413      	add	r3, r2
 80147d8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80147dc:	f102 0216 	add.w	r2, r2, #22
 80147e0:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 80147e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147e6:	f103 0318 	add.w	r3, r3, #24
 80147ea:	881b      	ldrh	r3, [r3, #0]
 80147ec:	2b0e      	cmp	r3, #14
 80147ee:	d81a      	bhi.n	8014826 <create_StepCountMapBack_queue+0x1c2>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 80147f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147f4:	f103 0318 	add.w	r3, r3, #24
 80147f8:	881b      	ldrh	r3, [r3, #0]
 80147fa:	4ac4      	ldr	r2, [pc, #784]	; (8014b0c <create_StepCountMapBack_queue+0x4a8>)
 80147fc:	330c      	adds	r3, #12
 80147fe:	005b      	lsls	r3, r3, #1
 8014800:	4413      	add	r3, r2
 8014802:	88db      	ldrh	r3, [r3, #6]
 8014804:	b21a      	sxth	r2, r3
 8014806:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801480a:	f103 031a 	add.w	r3, r3, #26
 801480e:	881b      	ldrh	r3, [r3, #0]
 8014810:	2101      	movs	r1, #1
 8014812:	fa01 f303 	lsl.w	r3, r1, r3
 8014816:	b21b      	sxth	r3, r3
 8014818:	4013      	ands	r3, r2
 801481a:	b21b      	sxth	r3, r3
 801481c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014820:	f102 0202 	add.w	r2, r2, #2
 8014824:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014826:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801482a:	f103 0318 	add.w	r3, r3, #24
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d019      	beq.n	8014868 <create_StepCountMapBack_queue+0x204>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8014834:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014838:	f103 0318 	add.w	r3, r3, #24
 801483c:	881b      	ldrh	r3, [r3, #0]
 801483e:	3b01      	subs	r3, #1
 8014840:	4ab2      	ldr	r2, [pc, #712]	; (8014b0c <create_StepCountMapBack_queue+0x4a8>)
 8014842:	330c      	adds	r3, #12
 8014844:	005b      	lsls	r3, r3, #1
 8014846:	4413      	add	r3, r2
 8014848:	88db      	ldrh	r3, [r3, #6]
 801484a:	b21a      	sxth	r2, r3
 801484c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014850:	f103 031a 	add.w	r3, r3, #26
 8014854:	881b      	ldrh	r3, [r3, #0]
 8014856:	2101      	movs	r1, #1
 8014858:	fa01 f303 	lsl.w	r3, r1, r3
 801485c:	b21b      	sxth	r3, r3
 801485e:	4013      	ands	r3, r2
 8014860:	b21b      	sxth	r3, r3
 8014862:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014866:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014868:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801486c:	f103 031a 	add.w	r3, r3, #26
 8014870:	881b      	ldrh	r3, [r3, #0]
 8014872:	2b0e      	cmp	r3, #14
 8014874:	d818      	bhi.n	80148a8 <create_StepCountMapBack_queue+0x244>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8014876:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801487a:	f103 031a 	add.w	r3, r3, #26
 801487e:	881b      	ldrh	r3, [r3, #0]
 8014880:	4aa2      	ldr	r2, [pc, #648]	; (8014b0c <create_StepCountMapBack_queue+0x4a8>)
 8014882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014886:	b21a      	sxth	r2, r3
 8014888:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801488c:	f103 0318 	add.w	r3, r3, #24
 8014890:	881b      	ldrh	r3, [r3, #0]
 8014892:	2101      	movs	r1, #1
 8014894:	fa01 f303 	lsl.w	r3, r1, r3
 8014898:	b21b      	sxth	r3, r3
 801489a:	4013      	ands	r3, r2
 801489c:	b21b      	sxth	r3, r3
 801489e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148a2:	f102 021e 	add.w	r2, r2, #30
 80148a6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80148a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ac:	f103 031a 	add.w	r3, r3, #26
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d019      	beq.n	80148ea <create_StepCountMapBack_queue+0x286>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80148b6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ba:	f103 031a 	add.w	r3, r3, #26
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	3b01      	subs	r3, #1
 80148c2:	4a92      	ldr	r2, [pc, #584]	; (8014b0c <create_StepCountMapBack_queue+0x4a8>)
 80148c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148c8:	b21a      	sxth	r2, r3
 80148ca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ce:	f103 0318 	add.w	r3, r3, #24
 80148d2:	881b      	ldrh	r3, [r3, #0]
 80148d4:	2101      	movs	r1, #1
 80148d6:	fa01 f303 	lsl.w	r3, r1, r3
 80148da:	b21b      	sxth	r3, r3
 80148dc:	4013      	ands	r3, r2
 80148de:	b21b      	sxth	r3, r3
 80148e0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148e4:	f102 021c 	add.w	r2, r2, #28
 80148e8:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 80148ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ee:	f103 031a 	add.w	r3, r3, #26
 80148f2:	881a      	ldrh	r2, [r3, #0]
 80148f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148f8:	f103 0318 	add.w	r3, r3, #24
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	3301      	adds	r3, #1
 8014900:	4983      	ldr	r1, [pc, #524]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 8014902:	0112      	lsls	r2, r2, #4
 8014904:	4413      	add	r3, r2
 8014906:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801490a:	2bff      	cmp	r3, #255	; 0xff
 801490c:	d148      	bne.n	80149a0 <create_StepCountMapBack_queue+0x33c>
 801490e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014912:	f103 0318 	add.w	r3, r3, #24
 8014916:	881b      	ldrh	r3, [r3, #0]
 8014918:	2b0f      	cmp	r3, #15
 801491a:	d041      	beq.n	80149a0 <create_StepCountMapBack_queue+0x33c>
 801491c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014920:	f103 0302 	add.w	r3, r3, #2
 8014924:	881b      	ldrh	r3, [r3, #0]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d13a      	bne.n	80149a0 <create_StepCountMapBack_queue+0x33c>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801492a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801492e:	f103 031a 	add.w	r3, r3, #26
 8014932:	881a      	ldrh	r2, [r3, #0]
 8014934:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014938:	f103 0318 	add.w	r3, r3, #24
 801493c:	881b      	ldrh	r3, [r3, #0]
 801493e:	4974      	ldr	r1, [pc, #464]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 8014940:	0112      	lsls	r2, r2, #4
 8014942:	4413      	add	r3, r2
 8014944:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014948:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801494c:	f103 031a 	add.w	r3, r3, #26
 8014950:	881a      	ldrh	r2, [r3, #0]
 8014952:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014956:	f103 0318 	add.w	r3, r3, #24
 801495a:	881b      	ldrh	r3, [r3, #0]
 801495c:	3301      	adds	r3, #1
 801495e:	3101      	adds	r1, #1
 8014960:	b288      	uxth	r0, r1
 8014962:	496b      	ldr	r1, [pc, #428]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 8014964:	0112      	lsls	r2, r2, #4
 8014966:	4413      	add	r3, r2
 8014968:	4602      	mov	r2, r0
 801496a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801496e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014972:	f103 031a 	add.w	r3, r3, #26
 8014976:	881a      	ldrh	r2, [r3, #0]
 8014978:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801497c:	4611      	mov	r1, r2
 801497e:	4618      	mov	r0, r3
 8014980:	f000 f958 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014984:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014988:	f103 0318 	add.w	r3, r3, #24
 801498c:	881b      	ldrh	r3, [r3, #0]
 801498e:	3301      	adds	r3, #1
 8014990:	b29a      	uxth	r2, r3
 8014992:	f107 0308 	add.w	r3, r7, #8
 8014996:	3b04      	subs	r3, #4
 8014998:	4611      	mov	r1, r2
 801499a:	4618      	mov	r0, r3
 801499c:	f000 f94a 	bl	8014c34 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 80149a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149a4:	f103 031a 	add.w	r3, r3, #26
 80149a8:	881a      	ldrh	r2, [r3, #0]
 80149aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149ae:	f103 0318 	add.w	r3, r3, #24
 80149b2:	881b      	ldrh	r3, [r3, #0]
 80149b4:	3b01      	subs	r3, #1
 80149b6:	4956      	ldr	r1, [pc, #344]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 80149b8:	0112      	lsls	r2, r2, #4
 80149ba:	4413      	add	r3, r2
 80149bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149c0:	2bff      	cmp	r3, #255	; 0xff
 80149c2:	d146      	bne.n	8014a52 <create_StepCountMapBack_queue+0x3ee>
 80149c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149c8:	f103 0318 	add.w	r3, r3, #24
 80149cc:	881b      	ldrh	r3, [r3, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d03f      	beq.n	8014a52 <create_StepCountMapBack_queue+0x3ee>
 80149d2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80149d6:	881b      	ldrh	r3, [r3, #0]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d13a      	bne.n	8014a52 <create_StepCountMapBack_queue+0x3ee>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80149dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149e0:	f103 031a 	add.w	r3, r3, #26
 80149e4:	881a      	ldrh	r2, [r3, #0]
 80149e6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149ea:	f103 0318 	add.w	r3, r3, #24
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	4947      	ldr	r1, [pc, #284]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 80149f2:	0112      	lsls	r2, r2, #4
 80149f4:	4413      	add	r3, r2
 80149f6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80149fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149fe:	f103 031a 	add.w	r3, r3, #26
 8014a02:	881a      	ldrh	r2, [r3, #0]
 8014a04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a08:	f103 0318 	add.w	r3, r3, #24
 8014a0c:	881b      	ldrh	r3, [r3, #0]
 8014a0e:	3b01      	subs	r3, #1
 8014a10:	3101      	adds	r1, #1
 8014a12:	b288      	uxth	r0, r1
 8014a14:	493e      	ldr	r1, [pc, #248]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 8014a16:	0112      	lsls	r2, r2, #4
 8014a18:	4413      	add	r3, r2
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014a20:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a24:	f103 031a 	add.w	r3, r3, #26
 8014a28:	881a      	ldrh	r2, [r3, #0]
 8014a2a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014a2e:	4611      	mov	r1, r2
 8014a30:	4618      	mov	r0, r3
 8014a32:	f000 f8ff 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014a36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a3a:	f103 0318 	add.w	r3, r3, #24
 8014a3e:	881b      	ldrh	r3, [r3, #0]
 8014a40:	3b01      	subs	r3, #1
 8014a42:	b29a      	uxth	r2, r3
 8014a44:	f107 0308 	add.w	r3, r7, #8
 8014a48:	3b04      	subs	r3, #4
 8014a4a:	4611      	mov	r1, r2
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f000 f8f1 	bl	8014c34 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014a52:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a56:	f103 031a 	add.w	r3, r3, #26
 8014a5a:	881b      	ldrh	r3, [r3, #0]
 8014a5c:	1c5a      	adds	r2, r3, #1
 8014a5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a62:	f103 0318 	add.w	r3, r3, #24
 8014a66:	881b      	ldrh	r3, [r3, #0]
 8014a68:	4929      	ldr	r1, [pc, #164]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 8014a6a:	0112      	lsls	r2, r2, #4
 8014a6c:	4413      	add	r3, r2
 8014a6e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a72:	2bff      	cmp	r3, #255	; 0xff
 8014a74:	d14e      	bne.n	8014b14 <create_StepCountMapBack_queue+0x4b0>
 8014a76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a7a:	f103 031a 	add.w	r3, r3, #26
 8014a7e:	881b      	ldrh	r3, [r3, #0]
 8014a80:	2b0f      	cmp	r3, #15
 8014a82:	d047      	beq.n	8014b14 <create_StepCountMapBack_queue+0x4b0>
 8014a84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a88:	f103 031e 	add.w	r3, r3, #30
 8014a8c:	881b      	ldrh	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d140      	bne.n	8014b14 <create_StepCountMapBack_queue+0x4b0>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014a92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a96:	f103 031a 	add.w	r3, r3, #26
 8014a9a:	881a      	ldrh	r2, [r3, #0]
 8014a9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014aa0:	f103 0318 	add.w	r3, r3, #24
 8014aa4:	881b      	ldrh	r3, [r3, #0]
 8014aa6:	491a      	ldr	r1, [pc, #104]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 8014aa8:	0112      	lsls	r2, r2, #4
 8014aaa:	4413      	add	r3, r2
 8014aac:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014ab0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ab4:	f103 031a 	add.w	r3, r3, #26
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	1c5a      	adds	r2, r3, #1
 8014abc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ac0:	f103 0318 	add.w	r3, r3, #24
 8014ac4:	881b      	ldrh	r3, [r3, #0]
 8014ac6:	3101      	adds	r1, #1
 8014ac8:	b288      	uxth	r0, r1
 8014aca:	4911      	ldr	r1, [pc, #68]	; (8014b10 <create_StepCountMapBack_queue+0x4ac>)
 8014acc:	0112      	lsls	r2, r2, #4
 8014ace:	4413      	add	r3, r2
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014ad6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ada:	f103 031a 	add.w	r3, r3, #26
 8014ade:	881b      	ldrh	r3, [r3, #0]
 8014ae0:	3301      	adds	r3, #1
 8014ae2:	b29a      	uxth	r2, r3
 8014ae4:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014ae8:	4611      	mov	r1, r2
 8014aea:	4618      	mov	r0, r3
 8014aec:	f000 f8a2 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014af0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014af4:	f103 0318 	add.w	r3, r3, #24
 8014af8:	881a      	ldrh	r2, [r3, #0]
 8014afa:	f107 0308 	add.w	r3, r7, #8
 8014afe:	3b04      	subs	r3, #4
 8014b00:	4611      	mov	r1, r2
 8014b02:	4618      	mov	r0, r3
 8014b04:	f000 f896 	bl	8014c34 <pushStack_walk>
 8014b08:	e004      	b.n	8014b14 <create_StepCountMapBack_queue+0x4b0>
 8014b0a:	bf00      	nop
 8014b0c:	20000c3c 	.word	0x20000c3c
 8014b10:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014b14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b18:	f103 031a 	add.w	r3, r3, #26
 8014b1c:	881b      	ldrh	r3, [r3, #0]
 8014b1e:	1e5a      	subs	r2, r3, #1
 8014b20:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b24:	f103 0318 	add.w	r3, r3, #24
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	4939      	ldr	r1, [pc, #228]	; (8014c10 <create_StepCountMapBack_queue+0x5ac>)
 8014b2c:	0112      	lsls	r2, r2, #4
 8014b2e:	4413      	add	r3, r2
 8014b30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b34:	2bff      	cmp	r3, #255	; 0xff
 8014b36:	d148      	bne.n	8014bca <create_StepCountMapBack_queue+0x566>
 8014b38:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b3c:	f103 031a 	add.w	r3, r3, #26
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d041      	beq.n	8014bca <create_StepCountMapBack_queue+0x566>
 8014b46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b4a:	f103 031c 	add.w	r3, r3, #28
 8014b4e:	881b      	ldrh	r3, [r3, #0]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d13a      	bne.n	8014bca <create_StepCountMapBack_queue+0x566>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014b54:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b58:	f103 031a 	add.w	r3, r3, #26
 8014b5c:	881a      	ldrh	r2, [r3, #0]
 8014b5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b62:	f103 0318 	add.w	r3, r3, #24
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	4929      	ldr	r1, [pc, #164]	; (8014c10 <create_StepCountMapBack_queue+0x5ac>)
 8014b6a:	0112      	lsls	r2, r2, #4
 8014b6c:	4413      	add	r3, r2
 8014b6e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014b72:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b76:	f103 031a 	add.w	r3, r3, #26
 8014b7a:	881b      	ldrh	r3, [r3, #0]
 8014b7c:	1e5a      	subs	r2, r3, #1
 8014b7e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b82:	f103 0318 	add.w	r3, r3, #24
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	3101      	adds	r1, #1
 8014b8a:	b288      	uxth	r0, r1
 8014b8c:	4920      	ldr	r1, [pc, #128]	; (8014c10 <create_StepCountMapBack_queue+0x5ac>)
 8014b8e:	0112      	lsls	r2, r2, #4
 8014b90:	4413      	add	r3, r2
 8014b92:	4602      	mov	r2, r0
 8014b94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014b98:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b9c:	f103 031a 	add.w	r3, r3, #26
 8014ba0:	881b      	ldrh	r3, [r3, #0]
 8014ba2:	3b01      	subs	r3, #1
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014baa:	4611      	mov	r1, r2
 8014bac:	4618      	mov	r0, r3
 8014bae:	f000 f841 	bl	8014c34 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014bb2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bb6:	f103 0318 	add.w	r3, r3, #24
 8014bba:	881a      	ldrh	r2, [r3, #0]
 8014bbc:	f107 0308 	add.w	r3, r7, #8
 8014bc0:	3b04      	subs	r3, #4
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f000 f835 	bl	8014c34 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014bca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bce:	f103 031a 	add.w	r3, r3, #26
 8014bd2:	881a      	ldrh	r2, [r3, #0]
 8014bd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bd8:	f103 0318 	add.w	r3, r3, #24
 8014bdc:	881b      	ldrh	r3, [r3, #0]
 8014bde:	490c      	ldr	r1, [pc, #48]	; (8014c10 <create_StepCountMapBack_queue+0x5ac>)
 8014be0:	0112      	lsls	r2, r2, #4
 8014be2:	4413      	add	r3, r2
 8014be4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014be8:	3301      	adds	r3, #1
 8014bea:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014bee:	f102 0204 	add.w	r2, r2, #4
 8014bf2:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014bf4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014bf8:	f103 0304 	add.w	r3, r3, #4
 8014bfc:	881b      	ldrh	r3, [r3, #0]
 8014bfe:	2bfe      	cmp	r3, #254	; 0xfe
 8014c00:	f67f adb2 	bls.w	8014768 <create_StepCountMapBack_queue+0x104>

		}

}
 8014c04:	bf00      	nop
 8014c06:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014c0a:	3708      	adds	r7, #8
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	20000d30 	.word	0x20000d30

08014c14 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014c14:	b480      	push	{r7}
 8014c16:	b083      	sub	sp, #12
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2200      	movs	r2, #0
 8014c26:	605a      	str	r2, [r3, #4]
}
 8014c28:	bf00      	nop
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685a      	ldr	r2, [r3, #4]
 8014c44:	8879      	ldrh	r1, [r7, #2]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	3202      	adds	r2, #2
 8014c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	1c5a      	adds	r2, r3, #1
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014c60:	d102      	bne.n	8014c68 <pushStack_walk+0x34>
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2200      	movs	r2, #0
 8014c66:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	685a      	ldr	r2, [r3, #4]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d103      	bne.n	8014c7c <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014c74:	4803      	ldr	r0, [pc, #12]	; (8014c84 <pushStack_walk+0x50>)
 8014c76:	f00b fdc5 	bl	8020804 <puts>
        return;
 8014c7a:	bf00      	nop
    }
}
 8014c7c:	3708      	adds	r7, #8
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	bf00      	nop
 8014c84:	08023024 	.word	0x08023024

08014c88 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014c88:	b480      	push	{r7}
 8014c8a:	b085      	sub	sp, #20
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014c90:	2300      	movs	r3, #0
 8014c92:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	685a      	ldr	r2, [r3, #4]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d102      	bne.n	8014ca6 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ca4:	e014      	b.n	8014cd0 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	3202      	adds	r2, #2
 8014cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cb2:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	1c5a      	adds	r2, r3, #1
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014cc6:	d102      	bne.n	8014cce <popStack_walk+0x46>
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014cce:	89fb      	ldrh	r3, [r7, #14]
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3714      	adds	r7, #20
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cda:	4770      	bx	lr

08014cdc <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b082      	sub	sp, #8
 8014ce0:	af00      	add	r7, sp, #0

	int tt = 14;
 8014ce2:	230e      	movs	r3, #14
 8014ce4:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	603b      	str	r3, [r7, #0]

	printf(
 8014cea:	4881      	ldr	r0, [pc, #516]	; (8014ef0 <maze_display+0x214>)
 8014cec:	f00b fd8a 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014cf0:	230e      	movs	r3, #14
 8014cf2:	607b      	str	r3, [r7, #4]
 8014cf4:	e06e      	b.n	8014dd4 <maze_display+0xf8>

		printf("|%5d", walk_count[0][tt + 1]);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	4a7e      	ldr	r2, [pc, #504]	; (8014ef4 <maze_display+0x218>)
 8014cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014d00:	4619      	mov	r1, r3
 8014d02:	487d      	ldr	r0, [pc, #500]	; (8014ef8 <maze_display+0x21c>)
 8014d04:	f00b fce2 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014d08:	2300      	movs	r3, #0
 8014d0a:	603b      	str	r3, [r7, #0]
 8014d0c:	e030      	b.n	8014d70 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014d0e:	4a7b      	ldr	r2, [pc, #492]	; (8014efc <maze_display+0x220>)
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014d16:	4619      	mov	r1, r3
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014d22:	ea01 0203 	and.w	r2, r1, r3
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	3301      	adds	r3, #1
 8014d2a:	2101      	movs	r1, #1
 8014d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d10d      	bne.n	8014d50 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	1c5a      	adds	r2, r3, #1
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	496d      	ldr	r1, [pc, #436]	; (8014ef4 <maze_display+0x218>)
 8014d3e:	0112      	lsls	r2, r2, #4
 8014d40:	4413      	add	r3, r2
 8014d42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d46:	4619      	mov	r1, r3
 8014d48:	486b      	ldr	r0, [pc, #428]	; (8014ef8 <maze_display+0x21c>)
 8014d4a:	f00b fcbf 	bl	80206cc <iprintf>
 8014d4e:	e00c      	b.n	8014d6a <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	1c5a      	adds	r2, r3, #1
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	3301      	adds	r3, #1
 8014d58:	4966      	ldr	r1, [pc, #408]	; (8014ef4 <maze_display+0x218>)
 8014d5a:	0112      	lsls	r2, r2, #4
 8014d5c:	4413      	add	r3, r2
 8014d5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d62:	4619      	mov	r1, r3
 8014d64:	4866      	ldr	r0, [pc, #408]	; (8014f00 <maze_display+0x224>)
 8014d66:	f00b fcb1 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	603b      	str	r3, [r7, #0]
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	2b0e      	cmp	r3, #14
 8014d74:	ddcb      	ble.n	8014d0e <maze_display+0x32>
			}
		}
		printf("|\n");
 8014d76:	4863      	ldr	r0, [pc, #396]	; (8014f04 <maze_display+0x228>)
 8014d78:	f00b fd44 	bl	8020804 <puts>
		if (tt <= -1) {
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	db2d      	blt.n	8014dde <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014d82:	2300      	movs	r3, #0
 8014d84:	603b      	str	r3, [r7, #0]
 8014d86:	e01c      	b.n	8014dc2 <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014d88:	4a5c      	ldr	r2, [pc, #368]	; (8014efc <maze_display+0x220>)
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	330c      	adds	r3, #12
 8014d8e:	005b      	lsls	r3, r3, #1
 8014d90:	4413      	add	r3, r2
 8014d92:	88db      	ldrh	r3, [r3, #6]
 8014d94:	4619      	mov	r1, r3
 8014d96:	2201      	movs	r2, #1
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8014d9e:	ea01 0203 	and.w	r2, r1, r3
 8014da2:	2101      	movs	r1, #1
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	fa01 f303 	lsl.w	r3, r1, r3
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d103      	bne.n	8014db6 <maze_display+0xda>
				printf("+-----");
 8014dae:	4856      	ldr	r0, [pc, #344]	; (8014f08 <maze_display+0x22c>)
 8014db0:	f00b fc8c 	bl	80206cc <iprintf>
 8014db4:	e002      	b.n	8014dbc <maze_display+0xe0>
			}else{
				printf("+     ");
 8014db6:	4855      	ldr	r0, [pc, #340]	; (8014f0c <maze_display+0x230>)
 8014db8:	f00b fc88 	bl	80206cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	603b      	str	r3, [r7, #0]
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	2b0f      	cmp	r3, #15
 8014dc6:	dddf      	ble.n	8014d88 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014dc8:	4851      	ldr	r0, [pc, #324]	; (8014f10 <maze_display+0x234>)
 8014dca:	f00b fd1b 	bl	8020804 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	607b      	str	r3, [r7, #4]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dda:	da8c      	bge.n	8014cf6 <maze_display+0x1a>
 8014ddc:	e000      	b.n	8014de0 <maze_display+0x104>
			break;
 8014dde:	bf00      	nop

	}

	printf(
 8014de0:	484c      	ldr	r0, [pc, #304]	; (8014f14 <maze_display+0x238>)
 8014de2:	f00b fd0f 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014de6:	4842      	ldr	r0, [pc, #264]	; (8014ef0 <maze_display+0x214>)
 8014de8:	f00b fd0c 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014dec:	230e      	movs	r3, #14
 8014dee:	607b      	str	r3, [r7, #4]
 8014df0:	e070      	b.n	8014ed4 <maze_display+0x1f8>
		printf("|%5d", walk_count[0][tt + 1]);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	3301      	adds	r3, #1
 8014df6:	4a3f      	ldr	r2, [pc, #252]	; (8014ef4 <maze_display+0x218>)
 8014df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	483e      	ldr	r0, [pc, #248]	; (8014ef8 <maze_display+0x21c>)
 8014e00:	f00b fc64 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e04:	2300      	movs	r3, #0
 8014e06:	603b      	str	r3, [r7, #0]
 8014e08:	e032      	b.n	8014e70 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014e0a:	4a3c      	ldr	r2, [pc, #240]	; (8014efc <maze_display+0x220>)
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	331c      	adds	r3, #28
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	4413      	add	r3, r2
 8014e14:	889b      	ldrh	r3, [r3, #4]
 8014e16:	4619      	mov	r1, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e22:	ea01 0203 	and.w	r2, r1, r3
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	3301      	adds	r3, #1
 8014e2a:	2101      	movs	r1, #1
 8014e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d10d      	bne.n	8014e50 <maze_display+0x174>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	1c5a      	adds	r2, r3, #1
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	3301      	adds	r3, #1
 8014e3c:	492d      	ldr	r1, [pc, #180]	; (8014ef4 <maze_display+0x218>)
 8014e3e:	0112      	lsls	r2, r2, #4
 8014e40:	4413      	add	r3, r2
 8014e42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e46:	4619      	mov	r1, r3
 8014e48:	482b      	ldr	r0, [pc, #172]	; (8014ef8 <maze_display+0x21c>)
 8014e4a:	f00b fc3f 	bl	80206cc <iprintf>
 8014e4e:	e00c      	b.n	8014e6a <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	1c5a      	adds	r2, r3, #1
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	3301      	adds	r3, #1
 8014e58:	4926      	ldr	r1, [pc, #152]	; (8014ef4 <maze_display+0x218>)
 8014e5a:	0112      	lsls	r2, r2, #4
 8014e5c:	4413      	add	r3, r2
 8014e5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e62:	4619      	mov	r1, r3
 8014e64:	4826      	ldr	r0, [pc, #152]	; (8014f00 <maze_display+0x224>)
 8014e66:	f00b fc31 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	603b      	str	r3, [r7, #0]
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	2b0e      	cmp	r3, #14
 8014e74:	ddc9      	ble.n	8014e0a <maze_display+0x12e>
			}
		}
		printf("|\n");
 8014e76:	4823      	ldr	r0, [pc, #140]	; (8014f04 <maze_display+0x228>)
 8014e78:	f00b fcc4 	bl	8020804 <puts>
		if (tt <= -1) {
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	db2d      	blt.n	8014ede <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014e82:	2300      	movs	r3, #0
 8014e84:	603b      	str	r3, [r7, #0]
 8014e86:	e01c      	b.n	8014ec2 <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014e88:	4a1c      	ldr	r2, [pc, #112]	; (8014efc <maze_display+0x220>)
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	332c      	adds	r3, #44	; 0x2c
 8014e8e:	005b      	lsls	r3, r3, #1
 8014e90:	4413      	add	r3, r2
 8014e92:	885b      	ldrh	r3, [r3, #2]
 8014e94:	4619      	mov	r1, r3
 8014e96:	2201      	movs	r2, #1
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8014e9e:	ea01 0203 	and.w	r2, r1, r3
 8014ea2:	2101      	movs	r1, #1
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d103      	bne.n	8014eb6 <maze_display+0x1da>
				printf("+-----");
 8014eae:	4816      	ldr	r0, [pc, #88]	; (8014f08 <maze_display+0x22c>)
 8014eb0:	f00b fc0c 	bl	80206cc <iprintf>
 8014eb4:	e002      	b.n	8014ebc <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014eb6:	4815      	ldr	r0, [pc, #84]	; (8014f0c <maze_display+0x230>)
 8014eb8:	f00b fc08 	bl	80206cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	603b      	str	r3, [r7, #0]
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	2b0f      	cmp	r3, #15
 8014ec6:	dddf      	ble.n	8014e88 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014ec8:	4811      	ldr	r0, [pc, #68]	; (8014f10 <maze_display+0x234>)
 8014eca:	f00b fc9b 	bl	8020804 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	607b      	str	r3, [r7, #4]
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eda:	da8a      	bge.n	8014df2 <maze_display+0x116>
 8014edc:	e000      	b.n	8014ee0 <maze_display+0x204>
			break;
 8014ede:	bf00      	nop
	}

	printf(
 8014ee0:	480c      	ldr	r0, [pc, #48]	; (8014f14 <maze_display+0x238>)
 8014ee2:	f00b fc8f 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8014ee6:	bf00      	nop
 8014ee8:	3708      	adds	r7, #8
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	08023030 	.word	0x08023030
 8014ef4:	20000d30 	.word	0x20000d30
 8014ef8:	08023094 	.word	0x08023094
 8014efc:	20000c3c 	.word	0x20000c3c
 8014f00:	0802309c 	.word	0x0802309c
 8014f04:	080230a4 	.word	0x080230a4
 8014f08:	080230a8 	.word	0x080230a8
 8014f0c:	080230b0 	.word	0x080230b0
 8014f10:	080230b8 	.word	0x080230b8
 8014f14:	080230bc 	.word	0x080230bc

08014f18 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0

	int tt = 14;
 8014f1e:	230e      	movs	r3, #14
 8014f20:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014f22:	2300      	movs	r3, #0
 8014f24:	603b      	str	r3, [r7, #0]

	printf(
 8014f26:	4865      	ldr	r0, [pc, #404]	; (80150bc <maze_display_Dijkstra+0x1a4>)
 8014f28:	f00b fc6c 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014f2c:	230e      	movs	r3, #14
 8014f2e:	607b      	str	r3, [r7, #4]
 8014f30:	e06a      	b.n	8015008 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 8014f32:	4863      	ldr	r0, [pc, #396]	; (80150c0 <maze_display_Dijkstra+0x1a8>)
 8014f34:	f00b fbca 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014f38:	2300      	movs	r3, #0
 8014f3a:	603b      	str	r3, [r7, #0]
 8014f3c:	e027      	b.n	8014f8e <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014f3e:	4a61      	ldr	r2, [pc, #388]	; (80150c4 <maze_display_Dijkstra+0x1ac>)
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f46:	4619      	mov	r1, r3
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	2201      	movs	r2, #1
 8014f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f52:	ea01 0203 	and.w	r2, r1, r3
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	2101      	movs	r1, #1
 8014f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d103      	bne.n	8014f6c <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8014f64:	4858      	ldr	r0, [pc, #352]	; (80150c8 <maze_display_Dijkstra+0x1b0>)
 8014f66:	f00b fbb1 	bl	80206cc <iprintf>
 8014f6a:	e00d      	b.n	8014f88 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	1c5a      	adds	r2, r3, #1
 8014f70:	4956      	ldr	r1, [pc, #344]	; (80150cc <maze_display_Dijkstra+0x1b4>)
 8014f72:	4613      	mov	r3, r2
 8014f74:	011b      	lsls	r3, r3, #4
 8014f76:	1a9b      	subs	r3, r3, r2
 8014f78:	683a      	ldr	r2, [r7, #0]
 8014f7a:	4413      	add	r3, r2
 8014f7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f80:	4619      	mov	r1, r3
 8014f82:	4853      	ldr	r0, [pc, #332]	; (80150d0 <maze_display_Dijkstra+0x1b8>)
 8014f84:	f00b fba2 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	603b      	str	r3, [r7, #0]
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	2b0e      	cmp	r3, #14
 8014f92:	ddd4      	ble.n	8014f3e <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8014f94:	484f      	ldr	r0, [pc, #316]	; (80150d4 <maze_display_Dijkstra+0x1bc>)
 8014f96:	f00b fc35 	bl	8020804 <puts>
		if (tt <= -1) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	db38      	blt.n	8015012 <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	603b      	str	r3, [r7, #0]
 8014fa4:	e027      	b.n	8014ff6 <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014fa6:	4a47      	ldr	r2, [pc, #284]	; (80150c4 <maze_display_Dijkstra+0x1ac>)
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	330c      	adds	r3, #12
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	4413      	add	r3, r2
 8014fb0:	88db      	ldrh	r3, [r3, #6]
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8014fbc:	ea01 0203 	and.w	r2, r1, r3
 8014fc0:	2101      	movs	r1, #1
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d103      	bne.n	8014fd4 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8014fcc:	4842      	ldr	r0, [pc, #264]	; (80150d8 <maze_display_Dijkstra+0x1c0>)
 8014fce:	f00b fb7d 	bl	80206cc <iprintf>
 8014fd2:	e00d      	b.n	8014ff0 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014fd4:	493d      	ldr	r1, [pc, #244]	; (80150cc <maze_display_Dijkstra+0x1b4>)
 8014fd6:	683a      	ldr	r2, [r7, #0]
 8014fd8:	4613      	mov	r3, r2
 8014fda:	011b      	lsls	r3, r3, #4
 8014fdc:	1a9b      	subs	r3, r3, r2
 8014fde:	687a      	ldr	r2, [r7, #4]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	33f0      	adds	r3, #240	; 0xf0
 8014fe4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014fe8:	4619      	mov	r1, r3
 8014fea:	483c      	ldr	r0, [pc, #240]	; (80150dc <maze_display_Dijkstra+0x1c4>)
 8014fec:	f00b fb6e 	bl	80206cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	603b      	str	r3, [r7, #0]
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	2b0f      	cmp	r3, #15
 8014ffa:	ddd4      	ble.n	8014fa6 <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8014ffc:	4838      	ldr	r0, [pc, #224]	; (80150e0 <maze_display_Dijkstra+0x1c8>)
 8014ffe:	f00b fc01 	bl	8020804 <puts>
	for (tt = 14;tt >= -1;tt--){
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	3b01      	subs	r3, #1
 8015006:	607b      	str	r3, [r7, #4]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801500e:	da90      	bge.n	8014f32 <maze_display_Dijkstra+0x1a>
 8015010:	e000      	b.n	8015014 <maze_display_Dijkstra+0xfc>
			break;
 8015012:	bf00      	nop

	}

	printf(
 8015014:	4833      	ldr	r0, [pc, #204]	; (80150e4 <maze_display_Dijkstra+0x1cc>)
 8015016:	f00b fbf5 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801501a:	4828      	ldr	r0, [pc, #160]	; (80150bc <maze_display_Dijkstra+0x1a4>)
 801501c:	f00b fbf2 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015020:	230e      	movs	r3, #14
 8015022:	607b      	str	r3, [r7, #4]
 8015024:	e03c      	b.n	80150a0 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 8015026:	4826      	ldr	r0, [pc, #152]	; (80150c0 <maze_display_Dijkstra+0x1a8>)
 8015028:	f00b fb50 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 801502c:	2300      	movs	r3, #0
 801502e:	603b      	str	r3, [r7, #0]
 8015030:	e010      	b.n	8015054 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	1c5a      	adds	r2, r3, #1
 8015036:	4925      	ldr	r1, [pc, #148]	; (80150cc <maze_display_Dijkstra+0x1b4>)
 8015038:	4613      	mov	r3, r2
 801503a:	011b      	lsls	r3, r3, #4
 801503c:	1a9b      	subs	r3, r3, r2
 801503e:	683a      	ldr	r2, [r7, #0]
 8015040:	4413      	add	r3, r2
 8015042:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015046:	4619      	mov	r1, r3
 8015048:	4821      	ldr	r0, [pc, #132]	; (80150d0 <maze_display_Dijkstra+0x1b8>)
 801504a:	f00b fb3f 	bl	80206cc <iprintf>
		for(ss = 0;ss < 15;ss++){
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	3301      	adds	r3, #1
 8015052:	603b      	str	r3, [r7, #0]
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	2b0e      	cmp	r3, #14
 8015058:	ddeb      	ble.n	8015032 <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 801505a:	481e      	ldr	r0, [pc, #120]	; (80150d4 <maze_display_Dijkstra+0x1bc>)
 801505c:	f00b fbd2 	bl	8020804 <puts>
		if (tt <= -1) {
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2b00      	cmp	r3, #0
 8015064:	db21      	blt.n	80150aa <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015066:	2300      	movs	r3, #0
 8015068:	603b      	str	r3, [r7, #0]
 801506a:	e010      	b.n	801508e <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 801506c:	4917      	ldr	r1, [pc, #92]	; (80150cc <maze_display_Dijkstra+0x1b4>)
 801506e:	683a      	ldr	r2, [r7, #0]
 8015070:	4613      	mov	r3, r2
 8015072:	011b      	lsls	r3, r3, #4
 8015074:	1a9b      	subs	r3, r3, r2
 8015076:	687a      	ldr	r2, [r7, #4]
 8015078:	4413      	add	r3, r2
 801507a:	33f0      	adds	r3, #240	; 0xf0
 801507c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015080:	4619      	mov	r1, r3
 8015082:	4816      	ldr	r0, [pc, #88]	; (80150dc <maze_display_Dijkstra+0x1c4>)
 8015084:	f00b fb22 	bl	80206cc <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	3301      	adds	r3, #1
 801508c:	603b      	str	r3, [r7, #0]
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	2b0f      	cmp	r3, #15
 8015092:	ddeb      	ble.n	801506c <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8015094:	4812      	ldr	r0, [pc, #72]	; (80150e0 <maze_display_Dijkstra+0x1c8>)
 8015096:	f00b fbb5 	bl	8020804 <puts>
	for (tt = 14;tt >= -1;tt--){
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	3b01      	subs	r3, #1
 801509e:	607b      	str	r3, [r7, #4]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150a6:	dabe      	bge.n	8015026 <maze_display_Dijkstra+0x10e>
 80150a8:	e000      	b.n	80150ac <maze_display_Dijkstra+0x194>
			break;
 80150aa:	bf00      	nop

	}

	printf(
 80150ac:	480d      	ldr	r0, [pc, #52]	; (80150e4 <maze_display_Dijkstra+0x1cc>)
 80150ae:	f00b fba9 	bl	8020804 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 80150b2:	bf00      	nop
 80150b4:	3708      	adds	r7, #8
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	08023030 	.word	0x08023030
 80150c0:	08023120 	.word	0x08023120
 80150c4:	20000c3c 	.word	0x20000c3c
 80150c8:	08023128 	.word	0x08023128
 80150cc:	20000f30 	.word	0x20000f30
 80150d0:	08023130 	.word	0x08023130
 80150d4:	08023138 	.word	0x08023138
 80150d8:	080230a8 	.word	0x080230a8
 80150dc:	08023140 	.word	0x08023140
 80150e0:	080230b8 	.word	0x080230b8
 80150e4:	080230bc 	.word	0x080230bc

080150e8 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	4603      	mov	r3, r0
 80150f0:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80150f2:	2300      	movs	r3, #0
 80150f4:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80150f6:	2300      	movs	r3, #0
 80150f8:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 80150fa:	2300      	movs	r3, #0
 80150fc:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 80150fe:	4b71      	ldr	r3, [pc, #452]	; (80152c4 <mode_decision+0x1dc>)
 8015100:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8015102:	79fb      	ldrb	r3, [r7, #7]
 8015104:	f003 030f 	and.w	r3, r3, #15
 8015108:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 801510a:	79fb      	ldrb	r3, [r7, #7]
 801510c:	091b      	lsrs	r3, r3, #4
 801510e:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015110:	7bbb      	ldrb	r3, [r7, #14]
 8015112:	011b      	lsls	r3, r3, #4
 8015114:	b2da      	uxtb	r2, r3
 8015116:	7bfb      	ldrb	r3, [r7, #15]
 8015118:	4413      	add	r3, r2
 801511a:	b2db      	uxtb	r3, r3
 801511c:	4618      	mov	r0, r3
 801511e:	f7f1 fe3b 	bl	8006d98 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8015122:	e07f      	b.n	8015224 <mode_decision+0x13c>
				HAL_Delay(1);
 8015124:	2001      	movs	r0, #1
 8015126:	f003 fb7f 	bl	8018828 <HAL_Delay>
				if (E_distanceR >= dis8) {
 801512a:	4b67      	ldr	r3, [pc, #412]	; (80152c8 <mode_decision+0x1e0>)
 801512c:	edd3 7a00 	vldr	s15, [r3]
 8015130:	ed97 7a02 	vldr	s14, [r7, #8]
 8015134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513c:	d813      	bhi.n	8015166 <mode_decision+0x7e>
					if (main_modeR == 15) {
 801513e:	7bfb      	ldrb	r3, [r7, #15]
 8015140:	2b0f      	cmp	r3, #15
 8015142:	d102      	bne.n	801514a <mode_decision+0x62>
						main_modeR = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	73fb      	strb	r3, [r7, #15]
 8015148:	e002      	b.n	8015150 <mode_decision+0x68>
					} else {
						main_modeR++;
 801514a:	7bfb      	ldrb	r3, [r7, #15]
 801514c:	3301      	adds	r3, #1
 801514e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015150:	f7eb ff24 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015154:	7bbb      	ldrb	r3, [r7, #14]
 8015156:	011b      	lsls	r3, r3, #4
 8015158:	b2da      	uxtb	r2, r3
 801515a:	7bfb      	ldrb	r3, [r7, #15]
 801515c:	4413      	add	r3, r2
 801515e:	b2db      	uxtb	r3, r3
 8015160:	4618      	mov	r0, r3
 8015162:	f7f1 fe19 	bl	8006d98 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8015166:	edd7 7a02 	vldr	s15, [r7, #8]
 801516a:	eeb1 7a67 	vneg.f32	s14, s15
 801516e:	4b56      	ldr	r3, [pc, #344]	; (80152c8 <mode_decision+0x1e0>)
 8015170:	edd3 7a00 	vldr	s15, [r3]
 8015174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801517c:	db13      	blt.n	80151a6 <mode_decision+0xbe>
					if (main_modeR == 0) {
 801517e:	7bfb      	ldrb	r3, [r7, #15]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d102      	bne.n	801518a <mode_decision+0xa2>
						main_modeR = 15;
 8015184:	230f      	movs	r3, #15
 8015186:	73fb      	strb	r3, [r7, #15]
 8015188:	e002      	b.n	8015190 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 801518a:	7bfb      	ldrb	r3, [r7, #15]
 801518c:	3b01      	subs	r3, #1
 801518e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015190:	f7eb ff04 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015194:	7bbb      	ldrb	r3, [r7, #14]
 8015196:	011b      	lsls	r3, r3, #4
 8015198:	b2da      	uxtb	r2, r3
 801519a:	7bfb      	ldrb	r3, [r7, #15]
 801519c:	4413      	add	r3, r2
 801519e:	b2db      	uxtb	r3, r3
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f1 fdf9 	bl	8006d98 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 80151a6:	4b49      	ldr	r3, [pc, #292]	; (80152cc <mode_decision+0x1e4>)
 80151a8:	edd3 7a00 	vldr	s15, [r3]
 80151ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80151b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151b8:	d813      	bhi.n	80151e2 <mode_decision+0xfa>
					if (main_modeL == 15) {
 80151ba:	7bbb      	ldrb	r3, [r7, #14]
 80151bc:	2b0f      	cmp	r3, #15
 80151be:	d102      	bne.n	80151c6 <mode_decision+0xde>
						main_modeL = 0;
 80151c0:	2300      	movs	r3, #0
 80151c2:	73bb      	strb	r3, [r7, #14]
 80151c4:	e002      	b.n	80151cc <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 80151c6:	7bbb      	ldrb	r3, [r7, #14]
 80151c8:	3301      	adds	r3, #1
 80151ca:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 80151cc:	f7eb fee6 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80151d0:	7bbb      	ldrb	r3, [r7, #14]
 80151d2:	011b      	lsls	r3, r3, #4
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	7bfb      	ldrb	r3, [r7, #15]
 80151d8:	4413      	add	r3, r2
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	4618      	mov	r0, r3
 80151de:	f7f1 fddb 	bl	8006d98 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 80151e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80151e6:	eeb1 7a67 	vneg.f32	s14, s15
 80151ea:	4b38      	ldr	r3, [pc, #224]	; (80152cc <mode_decision+0x1e4>)
 80151ec:	edd3 7a00 	vldr	s15, [r3]
 80151f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f8:	da00      	bge.n	80151fc <mode_decision+0x114>
 80151fa:	e013      	b.n	8015224 <mode_decision+0x13c>
					if (main_modeL == 0) {
 80151fc:	7bbb      	ldrb	r3, [r7, #14]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d102      	bne.n	8015208 <mode_decision+0x120>
						main_modeL = 15;
 8015202:	230f      	movs	r3, #15
 8015204:	73bb      	strb	r3, [r7, #14]
 8015206:	e002      	b.n	801520e <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8015208:	7bbb      	ldrb	r3, [r7, #14]
 801520a:	3b01      	subs	r3, #1
 801520c:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 801520e:	f7eb fec5 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015212:	7bbb      	ldrb	r3, [r7, #14]
 8015214:	011b      	lsls	r3, r3, #4
 8015216:	b2da      	uxtb	r2, r3
 8015218:	7bfb      	ldrb	r3, [r7, #15]
 801521a:	4413      	add	r3, r2
 801521c:	b2db      	uxtb	r3, r3
 801521e:	4618      	mov	r0, r3
 8015220:	f7f1 fdba 	bl	8006d98 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8015224:	4b2a      	ldr	r3, [pc, #168]	; (80152d0 <mode_decision+0x1e8>)
 8015226:	edd3 7a00 	vldr	s15, [r3]
 801522a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80152d4 <mode_decision+0x1ec>
 801522e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015236:	f67f af75 	bls.w	8015124 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 801523a:	f7f1 fd73 	bl	8006d24 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 801523e:	2001      	movs	r0, #1
 8015240:	f7f1 fe5a 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015244:	2001      	movs	r0, #1
 8015246:	f7f1 fe69 	bl	8006f1c <pl_l_blue_LED>
			HAL_Delay(1000);
 801524a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801524e:	f003 faeb 	bl	8018828 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015252:	e011      	b.n	8015278 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8015254:	4b1e      	ldr	r3, [pc, #120]	; (80152d0 <mode_decision+0x1e8>)
 8015256:	edd3 7a00 	vldr	s15, [r3]
 801525a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80152d4 <mode_decision+0x1ec>
 801525e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015266:	db04      	blt.n	8015272 <mode_decision+0x18a>
					main_modeL = 0;
 8015268:	2300      	movs	r3, #0
 801526a:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 801526c:	2300      	movs	r3, #0
 801526e:	73fb      	strb	r3, [r7, #15]
					break;
 8015270:	e013      	b.n	801529a <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8015272:	2001      	movs	r0, #1
 8015274:	f003 fad8 	bl	8018828 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015278:	4b17      	ldr	r3, [pc, #92]	; (80152d8 <mode_decision+0x1f0>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015280:	dde8      	ble.n	8015254 <mode_decision+0x16c>
 8015282:	4b15      	ldr	r3, [pc, #84]	; (80152d8 <mode_decision+0x1f0>)
 8015284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015288:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801528c:	dde2      	ble.n	8015254 <mode_decision+0x16c>
 801528e:	4b12      	ldr	r3, [pc, #72]	; (80152d8 <mode_decision+0x1f0>)
 8015290:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015294:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015298:	dddc      	ble.n	8015254 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 801529a:	2000      	movs	r0, #0
 801529c:	f7f1 fe2c 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80152a0:	2000      	movs	r0, #0
 80152a2:	f7f1 fe3b 	bl	8006f1c <pl_l_blue_LED>
			pl_yellow_LED_off();
 80152a6:	f7f1 fd3d 	bl	8006d24 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 80152aa:	7bbb      	ldrb	r3, [r7, #14]
 80152ac:	011b      	lsls	r3, r3, #4
 80152ae:	b25a      	sxtb	r2, r3
 80152b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152b4:	4313      	orrs	r3, r2
 80152b6:	b25b      	sxtb	r3, r3
 80152b8:	737b      	strb	r3, [r7, #13]

return main_mode;
 80152ba:	7b7b      	ldrb	r3, [r7, #13]
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3710      	adds	r7, #16
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	41200000 	.word	0x41200000
 80152c8:	20000224 	.word	0x20000224
 80152cc:	20000220 	.word	0x20000220
 80152d0:	20000270 	.word	0x20000270
 80152d4:	43c80000 	.word	0x43c80000
 80152d8:	200002b8 	.word	0x200002b8

080152dc <mode_execution>:


void mode_execution(unsigned char now_mode){
 80152dc:	b590      	push	{r4, r7, lr}
 80152de:	b0d7      	sub	sp, #348	; 0x15c
 80152e0:	af52      	add	r7, sp, #328	; 0x148
 80152e2:	4603      	mov	r3, r0
 80152e4:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80152e6:	2300      	movs	r3, #0
 80152e8:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80152ea:	2300      	movs	r3, #0
 80152ec:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 80152ee:	79fb      	ldrb	r3, [r7, #7]
 80152f0:	f003 030f 	and.w	r3, r3, #15
 80152f4:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80152f6:	79fb      	ldrb	r3, [r7, #7]
 80152f8:	091b      	lsrs	r3, r3, #4
 80152fa:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 80152fc:	7bbb      	ldrb	r3, [r7, #14]
 80152fe:	2b0f      	cmp	r3, #15
 8015300:	f200 8086 	bhi.w	8015410 <mode_execution+0x134>
 8015304:	a201      	add	r2, pc, #4	; (adr r2, 801530c <mode_execution+0x30>)
 8015306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801530a:	bf00      	nop
 801530c:	0801534d 	.word	0x0801534d
 8015310:	08015357 	.word	0x08015357
 8015314:	0801540f 	.word	0x0801540f
 8015318:	08015361 	.word	0x08015361
 801531c:	0801536b 	.word	0x0801536b
 8015320:	08015375 	.word	0x08015375
 8015324:	080153a5 	.word	0x080153a5
 8015328:	080153af 	.word	0x080153af
 801532c:	080153df 	.word	0x080153df
 8015330:	0801540f 	.word	0x0801540f
 8015334:	0801540f 	.word	0x0801540f
 8015338:	0801540f 	.word	0x0801540f
 801533c:	0801540f 	.word	0x0801540f
 8015340:	0801540f 	.word	0x0801540f
 8015344:	0801540f 	.word	0x0801540f
 8015348:	0801540f 	.word	0x0801540f
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 801534c:	7bfb      	ldrb	r3, [r7, #15]
 801534e:	4618      	mov	r0, r3
 8015350:	f000 f86c 	bl	801542c <mode_PLtest>
	break;
 8015354:	e05c      	b.n	8015410 <mode_execution+0x134>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8015356:	7bfb      	ldrb	r3, [r7, #15]
 8015358:	4618      	mov	r0, r3
 801535a:	f000 fa27 	bl	80157ac <mode_Running>
	break;
 801535e:	e057      	b.n	8015410 <mode_execution+0x134>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8015360:	7bfb      	ldrb	r3, [r7, #15]
 8015362:	4618      	mov	r0, r3
 8015364:	f000 fbd8 	bl	8015b18 <mode_Tuning0>
	break;
 8015368:	e052      	b.n	8015410 <mode_execution+0x134>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 801536a:	7bfb      	ldrb	r3, [r7, #15]
 801536c:	4618      	mov	r0, r3
 801536e:	f000 ff15 	bl	801619c <mode_WallSensorTuning>
	break;
 8015372:	e04d      	b.n	8015410 <mode_execution+0x134>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8015374:	7bfb      	ldrb	r3, [r7, #15]
 8015376:	4c28      	ldr	r4, [pc, #160]	; (8015418 <mode_execution+0x13c>)
 8015378:	2201      	movs	r2, #1
 801537a:	9251      	str	r2, [sp, #324]	; 0x144
 801537c:	2200      	movs	r2, #0
 801537e:	9250      	str	r2, [sp, #320]	; 0x140
 8015380:	2201      	movs	r2, #1
 8015382:	924f      	str	r2, [sp, #316]	; 0x13c
 8015384:	934e      	str	r3, [sp, #312]	; 0x138
 8015386:	4668      	mov	r0, sp
 8015388:	f104 0310 	add.w	r3, r4, #16
 801538c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015390:	4619      	mov	r1, r3
 8015392:	f00a fd1b 	bl	801fdcc <memcpy>
 8015396:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801539a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 801541c <mode_execution+0x140>
 801539e:	f7f8 fb8f 	bl	800dac0 <testturning>
	break;
 80153a2:	e035      	b.n	8015410 <mode_execution+0x134>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 80153a4:	7bfb      	ldrb	r3, [r7, #15]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f001 f930 	bl	801660c <mode_WallSensorTuning_fast>
	break;
 80153ac:	e030      	b.n	8015410 <mode_execution+0x134>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80153ae:	7bfb      	ldrb	r3, [r7, #15]
 80153b0:	4c1b      	ldr	r4, [pc, #108]	; (8015420 <mode_execution+0x144>)
 80153b2:	2201      	movs	r2, #1
 80153b4:	9251      	str	r2, [sp, #324]	; 0x144
 80153b6:	2201      	movs	r2, #1
 80153b8:	9250      	str	r2, [sp, #320]	; 0x140
 80153ba:	2201      	movs	r2, #1
 80153bc:	924f      	str	r2, [sp, #316]	; 0x13c
 80153be:	934e      	str	r3, [sp, #312]	; 0x138
 80153c0:	4668      	mov	r0, sp
 80153c2:	f104 0310 	add.w	r3, r4, #16
 80153c6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80153ca:	4619      	mov	r1, r3
 80153cc:	f00a fcfe 	bl	801fdcc <memcpy>
 80153d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80153d4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015424 <mode_execution+0x148>
 80153d8:	f7f8 fb72 	bl	800dac0 <testturning>
	break;
 80153dc:	e018      	b.n	8015410 <mode_execution+0x134>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80153de:	7bfb      	ldrb	r3, [r7, #15]
 80153e0:	4c11      	ldr	r4, [pc, #68]	; (8015428 <mode_execution+0x14c>)
 80153e2:	2201      	movs	r2, #1
 80153e4:	9251      	str	r2, [sp, #324]	; 0x144
 80153e6:	2201      	movs	r2, #1
 80153e8:	9250      	str	r2, [sp, #320]	; 0x140
 80153ea:	2201      	movs	r2, #1
 80153ec:	924f      	str	r2, [sp, #316]	; 0x13c
 80153ee:	934e      	str	r3, [sp, #312]	; 0x138
 80153f0:	4668      	mov	r0, sp
 80153f2:	f104 0310 	add.w	r3, r4, #16
 80153f6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80153fa:	4619      	mov	r1, r3
 80153fc:	f00a fce6 	bl	801fdcc <memcpy>
 8015400:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015404:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8015424 <mode_execution+0x148>
 8015408:	f7f8 fb5a 	bl	800dac0 <testturning>
	break;
 801540c:	e000      	b.n	8015410 <mode_execution+0x134>
	break;
 801540e:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015410:	bf00      	nop
 8015412:	3714      	adds	r7, #20
 8015414:	46bd      	mov	sp, r7
 8015416:	bd90      	pop	{r4, r7, pc}
 8015418:	2000f358 	.word	0x2000f358
 801541c:	3f028f5c 	.word	0x3f028f5c
 8015420:	2000f4a0 	.word	0x2000f4a0
 8015424:	3f7d70a4 	.word	0x3f7d70a4
 8015428:	2000f5e8 	.word	0x2000f5e8

0801542c <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 801542c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015430:	b092      	sub	sp, #72	; 0x48
 8015432:	af0a      	add	r7, sp, #40	; 0x28
 8015434:	4603      	mov	r3, r0
 8015436:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8015438:	2300      	movs	r3, #0
 801543a:	61fb      	str	r3, [r7, #28]
 801543c:	2300      	movs	r3, #0
 801543e:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8015440:	7dfb      	ldrb	r3, [r7, #23]
 8015442:	2b0f      	cmp	r3, #15
 8015444:	f200 819f 	bhi.w	8015786 <mode_PLtest+0x35a>
 8015448:	a201      	add	r2, pc, #4	; (adr r2, 8015450 <mode_PLtest+0x24>)
 801544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801544e:	bf00      	nop
 8015450:	08015785 	.word	0x08015785
 8015454:	08015491 	.word	0x08015491
 8015458:	080154c3 	.word	0x080154c3
 801545c:	0801553f 	.word	0x0801553f
 8015460:	080155a3 	.word	0x080155a3
 8015464:	08015623 	.word	0x08015623
 8015468:	08015629 	.word	0x08015629
 801546c:	08015787 	.word	0x08015787
 8015470:	08015787 	.word	0x08015787
 8015474:	080156af 	.word	0x080156af
 8015478:	08015717 	.word	0x08015717
 801547c:	08015787 	.word	0x08015787
 8015480:	08015787 	.word	0x08015787
 8015484:	08015787 	.word	0x08015787
 8015488:	08015787 	.word	0x08015787
 801548c:	0801577f 	.word	0x0801577f
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015490:	4bbf      	ldr	r3, [pc, #764]	; (8015790 <mode_PLtest+0x364>)
 8015492:	6819      	ldr	r1, [r3, #0]
 8015494:	4bbe      	ldr	r3, [pc, #760]	; (8015790 <mode_PLtest+0x364>)
 8015496:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015498:	4bbd      	ldr	r3, [pc, #756]	; (8015790 <mode_PLtest+0x364>)
 801549a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801549e:	4bbc      	ldr	r3, [pc, #752]	; (8015790 <mode_PLtest+0x364>)
 80154a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80154a4:	4aba      	ldr	r2, [pc, #744]	; (8015790 <mode_PLtest+0x364>)
 80154a6:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 80154aa:	9201      	str	r2, [sp, #4]
 80154ac:	9300      	str	r3, [sp, #0]
 80154ae:	4623      	mov	r3, r4
 80154b0:	4602      	mov	r2, r0
 80154b2:	48b8      	ldr	r0, [pc, #736]	; (8015794 <mode_PLtest+0x368>)
 80154b4:	f00b f90a 	bl	80206cc <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 80154b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80154bc:	f7f2 fcac 	bl	8007e18 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80154c0:	e7e6      	b.n	8015490 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 80154c2:	2001      	movs	r0, #1
 80154c4:	f7f1 fd18 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80154c8:	2001      	movs	r0, #1
 80154ca:	f7f1 fd27 	bl	8006f1c <pl_l_blue_LED>
		record_mode = 1;
 80154ce:	4bb2      	ldr	r3, [pc, #712]	; (8015798 <mode_PLtest+0x36c>)
 80154d0:	2201      	movs	r2, #1
 80154d2:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 80154d4:	f44f 7161 	mov.w	r1, #900	; 0x384
 80154d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80154dc:	f7f2 fa24 	bl	8007928 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 80154e0:	2001      	movs	r0, #1
 80154e2:	f7f2 f9df 	bl	80078a4 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 80154e6:	2001      	movs	r0, #1
 80154e8:	f7f2 f9b4 	bl	8007854 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 80154ec:	f7f2 fa00 	bl	80078f0 <pl_DriveMotor_start>
		wait_ms(2500);
 80154f0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80154f4:	f7f2 fc90 	bl	8007e18 <wait_ms>
		pl_DriveMotor_stop();
 80154f8:	f7f2 fa08 	bl	800790c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80154fc:	2000      	movs	r0, #0
 80154fe:	f7f1 fcfb 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015502:	2000      	movs	r0, #0
 8015504:	f7f1 fd0a 	bl	8006f1c <pl_l_blue_LED>
		record_mode = 0;
 8015508:	4ba3      	ldr	r3, [pc, #652]	; (8015798 <mode_PLtest+0x36c>)
 801550a:	2200      	movs	r2, #0
 801550c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801550e:	e002      	b.n	8015516 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015510:	2001      	movs	r0, #1
 8015512:	f7f2 fc81 	bl	8007e18 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015516:	4b9e      	ldr	r3, [pc, #632]	; (8015790 <mode_PLtest+0x364>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801551e:	ddf7      	ble.n	8015510 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015520:	4b9b      	ldr	r3, [pc, #620]	; (8015790 <mode_PLtest+0x364>)
 8015522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015526:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801552a:	ddf1      	ble.n	8015510 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 801552c:	4b98      	ldr	r3, [pc, #608]	; (8015790 <mode_PLtest+0x364>)
 801552e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015532:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015536:	ddeb      	ble.n	8015510 <mode_PLtest+0xe4>
		}
		record_print();
 8015538:	f001 fb1a 	bl	8016b70 <record_print>
		break;
 801553c:	e123      	b.n	8015786 <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 801553e:	f7ec f913 	bl	8001768 <reset_gyro>
		reset_speed();
 8015542:	f7eb fd69 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8015546:	2001      	movs	r0, #1
 8015548:	f7f1 fcd6 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 801554c:	2001      	movs	r0, #1
 801554e:	f7f1 fce5 	bl	8006f1c <pl_l_blue_LED>
		record_mode = 2;
 8015552:	4b91      	ldr	r3, [pc, #580]	; (8015798 <mode_PLtest+0x36c>)
 8015554:	2202      	movs	r2, #2
 8015556:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8015558:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801555c:	f7f2 fc5c 	bl	8007e18 <wait_ms>
		pl_r_blue_LED(OFF);
 8015560:	2000      	movs	r0, #0
 8015562:	f7f1 fcc9 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015566:	2000      	movs	r0, #0
 8015568:	f7f1 fcd8 	bl	8006f1c <pl_l_blue_LED>
		record_mode = 0;
 801556c:	4b8a      	ldr	r3, [pc, #552]	; (8015798 <mode_PLtest+0x36c>)
 801556e:	2200      	movs	r2, #0
 8015570:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015572:	e002      	b.n	801557a <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015574:	2001      	movs	r0, #1
 8015576:	f7f2 fc4f 	bl	8007e18 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801557a:	4b85      	ldr	r3, [pc, #532]	; (8015790 <mode_PLtest+0x364>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015582:	ddf7      	ble.n	8015574 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015584:	4b82      	ldr	r3, [pc, #520]	; (8015790 <mode_PLtest+0x364>)
 8015586:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801558a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801558e:	ddf1      	ble.n	8015574 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015590:	4b7f      	ldr	r3, [pc, #508]	; (8015790 <mode_PLtest+0x364>)
 8015592:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015596:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801559a:	ddeb      	ble.n	8015574 <mode_PLtest+0x148>
		}
		record_print();
 801559c:	f001 fae8 	bl	8016b70 <record_print>
		break;
 80155a0:	e0f1      	b.n	8015786 <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80155a2:	4b7e      	ldr	r3, [pc, #504]	; (801579c <mode_PLtest+0x370>)
 80155a4:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7ea fff6 	bl	8000598 <__aeabi_f2d>
 80155ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80155b0:	4b7a      	ldr	r3, [pc, #488]	; (801579c <mode_PLtest+0x370>)
 80155b2:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7ea ffef 	bl	8000598 <__aeabi_f2d>
 80155ba:	4604      	mov	r4, r0
 80155bc:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80155be:	4b77      	ldr	r3, [pc, #476]	; (801579c <mode_PLtest+0x370>)
 80155c0:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7ea ffe8 	bl	8000598 <__aeabi_f2d>
 80155c8:	4680      	mov	r8, r0
 80155ca:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80155cc:	4b73      	ldr	r3, [pc, #460]	; (801579c <mode_PLtest+0x370>)
 80155ce:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7ea ffe1 	bl	8000598 <__aeabi_f2d>
 80155d6:	4682      	mov	sl, r0
 80155d8:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80155da:	4b70      	ldr	r3, [pc, #448]	; (801579c <mode_PLtest+0x370>)
 80155dc:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ea ffda 	bl	8000598 <__aeabi_f2d>
 80155e4:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80155e8:	4b6c      	ldr	r3, [pc, #432]	; (801579c <mode_PLtest+0x370>)
 80155ea:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7ea ffd3 	bl	8000598 <__aeabi_f2d>
 80155f2:	4602      	mov	r2, r0
 80155f4:	460b      	mov	r3, r1
 80155f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80155fa:	ed97 7b00 	vldr	d7, [r7]
 80155fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015602:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015606:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801560a:	e9cd 4500 	strd	r4, r5, [sp]
 801560e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015612:	4863      	ldr	r0, [pc, #396]	; (80157a0 <mode_PLtest+0x374>)
 8015614:	f00b f85a 	bl	80206cc <iprintf>
			wait_ms(500);
 8015618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801561c:	f7f2 fbfc 	bl	8007e18 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015620:	e7bf      	b.n	80155a2 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8015622:	f7f1 fdb9 	bl	8007198 <test_flash>
		break;
 8015626:	e0ae      	b.n	8015786 <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 8015628:	4b5b      	ldr	r3, [pc, #364]	; (8015798 <mode_PLtest+0x36c>)
 801562a:	2206      	movs	r2, #6
 801562c:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 801562e:	2001      	movs	r0, #1
 8015630:	f7f1 fc62 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015634:	2001      	movs	r0, #1
 8015636:	f7f1 fc71 	bl	8006f1c <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 801563a:	f107 0218 	add.w	r2, r7, #24
 801563e:	f107 031c 	add.w	r3, r7, #28
 8015642:	4611      	mov	r1, r2
 8015644:	4618      	mov	r0, r3
 8015646:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 801564a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801564e:	f7ec fbf1 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	69ba      	ldr	r2, [r7, #24]
 8015656:	4611      	mov	r1, r2
 8015658:	4618      	mov	r0, r3
 801565a:	f7f2 f965 	bl	8007928 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 801565e:	f7f2 f947 	bl	80078f0 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015662:	e00a      	b.n	801567a <mode_PLtest+0x24e>
			wait_ms(1);
 8015664:	2001      	movs	r0, #1
 8015666:	f7f2 fbd7 	bl	8007e18 <wait_ms>
			if(record_rupe_flag==1){
 801566a:	4b4e      	ldr	r3, [pc, #312]	; (80157a4 <mode_PLtest+0x378>)
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	2b01      	cmp	r3, #1
 8015670:	d103      	bne.n	801567a <mode_PLtest+0x24e>
				record_mode=0;
 8015672:	4b49      	ldr	r3, [pc, #292]	; (8015798 <mode_PLtest+0x36c>)
 8015674:	2200      	movs	r2, #0
 8015676:	701a      	strb	r2, [r3, #0]
				break;
 8015678:	e010      	b.n	801569c <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801567a:	4b45      	ldr	r3, [pc, #276]	; (8015790 <mode_PLtest+0x364>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015682:	ddef      	ble.n	8015664 <mode_PLtest+0x238>
 8015684:	4b42      	ldr	r3, [pc, #264]	; (8015790 <mode_PLtest+0x364>)
 8015686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801568a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801568e:	dde9      	ble.n	8015664 <mode_PLtest+0x238>
 8015690:	4b3f      	ldr	r3, [pc, #252]	; (8015790 <mode_PLtest+0x364>)
 8015692:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015696:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801569a:	dde3      	ble.n	8015664 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 801569c:	f7f2 f936 	bl	800790c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80156a0:	2000      	movs	r0, #0
 80156a2:	f7f1 fc29 	bl	8006ef8 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80156a6:	2000      	movs	r0, #0
 80156a8:	f7f1 fc38 	bl	8006f1c <pl_l_blue_LED>

		break;
 80156ac:	e06b      	b.n	8015786 <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 80156ae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80156b2:	f7f2 f963 	bl	800797c <pl_FunMotor_duty>
			pl_FunMotor_start();
 80156b6:	f7f2 f94d 	bl	8007954 <pl_FunMotor_start>
			HAL_Delay(2000);
 80156ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80156be:	f003 f8b3 	bl	8018828 <HAL_Delay>
			reset_gyro();
 80156c2:	f7ec f851 	bl	8001768 <reset_gyro>
			reset_speed();
 80156c6:	f7eb fca7 	bl	8001018 <reset_speed>
			clear_Ierror();
 80156ca:	f7ee ff6b 	bl	80045a4 <clear_Ierror>
			pl_r_blue_LED(ON);
 80156ce:	2001      	movs	r0, #1
 80156d0:	f7f1 fc12 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80156d4:	2001      	movs	r0, #1
 80156d6:	f7f1 fc21 	bl	8006f1c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80156da:	e002      	b.n	80156e2 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 80156dc:	2001      	movs	r0, #1
 80156de:	f003 f8a3 	bl	8018828 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80156e2:	4b2b      	ldr	r3, [pc, #172]	; (8015790 <mode_PLtest+0x364>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156ea:	ddf7      	ble.n	80156dc <mode_PLtest+0x2b0>
 80156ec:	4b28      	ldr	r3, [pc, #160]	; (8015790 <mode_PLtest+0x364>)
 80156ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80156f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156f6:	ddf1      	ble.n	80156dc <mode_PLtest+0x2b0>
 80156f8:	4b25      	ldr	r3, [pc, #148]	; (8015790 <mode_PLtest+0x364>)
 80156fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80156fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015702:	ddeb      	ble.n	80156dc <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8015704:	2000      	movs	r0, #0
 8015706:	f7f1 fbf7 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801570a:	2000      	movs	r0, #0
 801570c:	f7f1 fc06 	bl	8006f1c <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015710:	f7f2 f92a 	bl	8007968 <pl_FunMotor_stop>
		break;
 8015714:	e037      	b.n	8015786 <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8015716:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80157a8 <mode_PLtest+0x37c>
 801571a:	f7f2 f92f 	bl	800797c <pl_FunMotor_duty>
			pl_FunMotor_start();
 801571e:	f7f2 f919 	bl	8007954 <pl_FunMotor_start>
			HAL_Delay(2000);
 8015722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015726:	f003 f87f 	bl	8018828 <HAL_Delay>
			reset_gyro();
 801572a:	f7ec f81d 	bl	8001768 <reset_gyro>
			reset_speed();
 801572e:	f7eb fc73 	bl	8001018 <reset_speed>
			clear_Ierror();
 8015732:	f7ee ff37 	bl	80045a4 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015736:	2001      	movs	r0, #1
 8015738:	f7f1 fbde 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801573c:	2001      	movs	r0, #1
 801573e:	f7f1 fbed 	bl	8006f1c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015742:	e002      	b.n	801574a <mode_PLtest+0x31e>
				HAL_Delay(1);
 8015744:	2001      	movs	r0, #1
 8015746:	f003 f86f 	bl	8018828 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801574a:	4b11      	ldr	r3, [pc, #68]	; (8015790 <mode_PLtest+0x364>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015752:	ddf7      	ble.n	8015744 <mode_PLtest+0x318>
 8015754:	4b0e      	ldr	r3, [pc, #56]	; (8015790 <mode_PLtest+0x364>)
 8015756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801575a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801575e:	ddf1      	ble.n	8015744 <mode_PLtest+0x318>
 8015760:	4b0b      	ldr	r3, [pc, #44]	; (8015790 <mode_PLtest+0x364>)
 8015762:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015766:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801576a:	ddeb      	ble.n	8015744 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 801576c:	2000      	movs	r0, #0
 801576e:	f7f1 fbc3 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015772:	2000      	movs	r0, #0
 8015774:	f7f1 fbd2 	bl	8006f1c <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015778:	f7f2 f8f6 	bl	8007968 <pl_FunMotor_stop>
		break;
 801577c:	e003      	b.n	8015786 <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 801577e:	f001 f9f7 	bl	8016b70 <record_print>
		break;
 8015782:	e000      	b.n	8015786 <mode_PLtest+0x35a>
		break;
 8015784:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8015786:	bf00      	nop
 8015788:	3720      	adds	r7, #32
 801578a:	46bd      	mov	sp, r7
 801578c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015790:	200002b8 	.word	0x200002b8
 8015794:	08023148 	.word	0x08023148
 8015798:	2000edc0 	.word	0x2000edc0
 801579c:	200006e4 	.word	0x200006e4
 80157a0:	08023174 	.word	0x08023174
 80157a4:	2000edcc 	.word	0x2000edcc
 80157a8:	3f7d70a4 	.word	0x3f7d70a4

080157ac <mode_Running>:


void mode_Running(unsigned char main_modeR){
 80157ac:	b5b0      	push	{r4, r5, r7, lr}
 80157ae:	b0da      	sub	sp, #360	; 0x168
 80157b0:	af54      	add	r7, sp, #336	; 0x150
 80157b2:	4603      	mov	r3, r0
 80157b4:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80157b6:	2003      	movs	r0, #3
 80157b8:	f7f2 f84c 	bl	8007854 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80157bc:	2003      	movs	r0, #3
 80157be:	f7f2 f871 	bl	80078a4 <pl_R_DriveMotor_mode>
	reset_gyro();
 80157c2:	f7eb ffd1 	bl	8001768 <reset_gyro>
	reset_speed();
 80157c6:	f7eb fc27 	bl	8001018 <reset_speed>
	reset_distance();
 80157ca:	f7eb fbe7 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80157ce:	f7ee fee9 	bl	80045a4 <clear_Ierror>
	switch (main_modeR) {
 80157d2:	79fb      	ldrb	r3, [r7, #7]
 80157d4:	2b0f      	cmp	r3, #15
 80157d6:	f200 8175 	bhi.w	8015ac4 <mode_Running+0x318>
 80157da:	a201      	add	r2, pc, #4	; (adr r2, 80157e0 <mode_Running+0x34>)
 80157dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157e0:	08015821 	.word	0x08015821
 80157e4:	080158d1 	.word	0x080158d1
 80157e8:	08015909 	.word	0x08015909
 80157ec:	0801590f 	.word	0x0801590f
 80157f0:	08015947 	.word	0x08015947
 80157f4:	08015979 	.word	0x08015979
 80157f8:	080159ab 	.word	0x080159ab
 80157fc:	080159dd 	.word	0x080159dd
 8015800:	08015a0f 	.word	0x08015a0f
 8015804:	08015a41 	.word	0x08015a41
 8015808:	08015a73 	.word	0x08015a73
 801580c:	08015a79 	.word	0x08015a79
 8015810:	08015a7f 	.word	0x08015a7f
 8015814:	08015a85 	.word	0x08015a85
 8015818:	08015a8b 	.word	0x08015a8b
 801581c:	08015a91 	.word	0x08015a91
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 8015820:	f7fe fc38 	bl	8014094 <create_StepCountMap_queue>
			maze_display();
 8015824:	f7ff fa5a 	bl	8014cdc <maze_display>

			create_DijkstraMap();
 8015828:	f7fb feb2 	bl	8011590 <create_DijkstraMap>
			maze_display_Dijkstra();
 801582c:	f7ff fb74 	bl	8014f18 <maze_display_Dijkstra>

			route_Dijkstra();
 8015830:	f7fd fbf6 	bl	8013020 <route_Dijkstra>
			create_StepCountMap_unknown();
 8015834:	f7fe f8f8 	bl	8013a28 <create_StepCountMap_unknown>
			maze_display();
 8015838:	f7ff fa50 	bl	8014cdc <maze_display>

			tic_timer();
 801583c:	f7f2 fabe 	bl	8007dbc <tic_timer>
			for(int j=0;j<5000;j++){
 8015840:	2300      	movs	r3, #0
 8015842:	617b      	str	r3, [r7, #20]
 8015844:	e004      	b.n	8015850 <mode_Running+0xa4>
			create_StepCountMap_queue();
 8015846:	f7fe fc25 	bl	8014094 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	3301      	adds	r3, #1
 801584e:	617b      	str	r3, [r7, #20]
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	f241 3287 	movw	r2, #4999	; 0x1387
 8015856:	4293      	cmp	r3, r2
 8015858:	ddf5      	ble.n	8015846 <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 801585a:	f7f2 fac1 	bl	8007de0 <toc_timer>
 801585e:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 8015862:	f7ff fa3b 	bl	8014cdc <maze_display>
			printf("tim2=%f\n", tim2);
 8015866:	68f8      	ldr	r0, [r7, #12]
 8015868:	f7ea fe96 	bl	8000598 <__aeabi_f2d>
 801586c:	4602      	mov	r2, r0
 801586e:	460b      	mov	r3, r1
 8015870:	4896      	ldr	r0, [pc, #600]	; (8015acc <mode_Running+0x320>)
 8015872:	f00a ff2b 	bl	80206cc <iprintf>
			tic_timer();
 8015876:	f7f2 faa1 	bl	8007dbc <tic_timer>
			create_DijkstraMap();
 801587a:	f7fb fe89 	bl	8011590 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 801587e:	2300      	movs	r3, #0
 8015880:	613b      	str	r3, [r7, #16]
 8015882:	e006      	b.n	8015892 <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 8015884:	f7fd fbcc 	bl	8013020 <route_Dijkstra>
			create_StepCountMap_unknown();
 8015888:	f7fe f8ce 	bl	8013a28 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 801588c:	693b      	ldr	r3, [r7, #16]
 801588e:	3301      	adds	r3, #1
 8015890:	613b      	str	r3, [r7, #16]
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	f241 3287 	movw	r2, #4999	; 0x1387
 8015898:	4293      	cmp	r3, r2
 801589a:	ddf3      	ble.n	8015884 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 801589c:	f7f2 faa0 	bl	8007de0 <toc_timer>
 80158a0:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 80158a4:	f7ff fa1a 	bl	8014cdc <maze_display>
			maze_display_Dijkstra();
 80158a8:	f7ff fb36 	bl	8014f18 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 80158ac:	68b8      	ldr	r0, [r7, #8]
 80158ae:	f7ea fe73 	bl	8000598 <__aeabi_f2d>
 80158b2:	4604      	mov	r4, r0
 80158b4:	460d      	mov	r5, r1
 80158b6:	68f8      	ldr	r0, [r7, #12]
 80158b8:	f7ea fe6e 	bl	8000598 <__aeabi_f2d>
 80158bc:	4602      	mov	r2, r0
 80158be:	460b      	mov	r3, r1
 80158c0:	e9cd 2300 	strd	r2, r3, [sp]
 80158c4:	4622      	mov	r2, r4
 80158c6:	462b      	mov	r3, r5
 80158c8:	4881      	ldr	r0, [pc, #516]	; (8015ad0 <mode_Running+0x324>)
 80158ca:	f00a feff 	bl	80206cc <iprintf>
		break;
 80158ce:	e0f9      	b.n	8015ac4 <mode_Running+0x318>
		case 0b0001://足立法(遅い)
			tic_timer();
 80158d0:	f7f2 fa74 	bl	8007dbc <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 80158d4:	4c7f      	ldr	r4, [pc, #508]	; (8015ad4 <mode_Running+0x328>)
 80158d6:	2300      	movs	r3, #0
 80158d8:	934f      	str	r3, [sp, #316]	; 0x13c
 80158da:	2301      	movs	r3, #1
 80158dc:	934e      	str	r3, [sp, #312]	; 0x138
 80158de:	4668      	mov	r0, sp
 80158e0:	f104 0310 	add.w	r3, r4, #16
 80158e4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80158e8:	4619      	mov	r1, r3
 80158ea:	f00a fa6f 	bl	801fdcc <memcpy>
 80158ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80158f2:	eddf 1a79 	vldr	s3, [pc, #484]	; 8015ad8 <mode_Running+0x32c>
 80158f6:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8015adc <mode_Running+0x330>
 80158fa:	eddf 0a79 	vldr	s1, [pc, #484]	; 8015ae0 <mode_Running+0x334>
 80158fe:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8015ae4 <mode_Running+0x338>
 8015902:	f7f8 fa97 	bl	800de34 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8015906:	e0dd      	b.n	8015ac4 <mode_Running+0x318>
		case 0b0010://Flashから
			record_out();
 8015908:	f7f1 fd64 	bl	80073d4 <record_out>
		break;
 801590c:	e0da      	b.n	8015ac4 <mode_Running+0x318>
		case 0b0011://ゴミ
			tic_timer();
 801590e:	f7f2 fa55 	bl	8007dbc <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015912:	4c70      	ldr	r4, [pc, #448]	; (8015ad4 <mode_Running+0x328>)
 8015914:	2301      	movs	r3, #1
 8015916:	934f      	str	r3, [sp, #316]	; 0x13c
 8015918:	2301      	movs	r3, #1
 801591a:	934e      	str	r3, [sp, #312]	; 0x138
 801591c:	4668      	mov	r0, sp
 801591e:	f104 0310 	add.w	r3, r4, #16
 8015922:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015926:	4619      	mov	r1, r3
 8015928:	f00a fa50 	bl	801fdcc <memcpy>
 801592c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015930:	eddf 1a69 	vldr	s3, [pc, #420]	; 8015ad8 <mode_Running+0x32c>
 8015934:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8015adc <mode_Running+0x330>
 8015938:	eddf 0a69 	vldr	s1, [pc, #420]	; 8015ae0 <mode_Running+0x334>
 801593c:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8015ae4 <mode_Running+0x338>
 8015940:	f7f8 fa78 	bl	800de34 <AdatiWayReturn>
		break;
 8015944:	e0be      	b.n	8015ac4 <mode_Running+0x318>
		case 0b0100://ゴミ
			record_out();
 8015946:	f7f1 fd45 	bl	80073d4 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 801594a:	2300      	movs	r3, #0
 801594c:	9352      	str	r3, [sp, #328]	; 0x148
 801594e:	4a66      	ldr	r2, [pc, #408]	; (8015ae8 <mode_Running+0x33c>)
 8015950:	466b      	mov	r3, sp
 8015952:	4611      	mov	r1, r2
 8015954:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015958:	4618      	mov	r0, r3
 801595a:	f00a fa37 	bl	801fdcc <memcpy>
 801595e:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8015aec <mode_Running+0x340>
 8015962:	2300      	movs	r3, #0
 8015964:	2200      	movs	r2, #0
 8015966:	2100      	movs	r1, #0
 8015968:	2000      	movs	r0, #0
 801596a:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8015ad8 <mode_Running+0x32c>
 801596e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8015af0 <mode_Running+0x344>
 8015972:	f7f9 fb49 	bl	800f008 <run_shortest>
		break;
 8015976:	e0a5      	b.n	8015ac4 <mode_Running+0x318>
		case 0b0101://
			record_out();
 8015978:	f7f1 fd2c 	bl	80073d4 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 801597c:	2301      	movs	r3, #1
 801597e:	9352      	str	r3, [sp, #328]	; 0x148
 8015980:	4a5c      	ldr	r2, [pc, #368]	; (8015af4 <mode_Running+0x348>)
 8015982:	466b      	mov	r3, sp
 8015984:	4611      	mov	r1, r2
 8015986:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801598a:	4618      	mov	r0, r3
 801598c:	f00a fa1e 	bl	801fdcc <memcpy>
 8015990:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8015aec <mode_Running+0x340>
 8015994:	2300      	movs	r3, #0
 8015996:	2200      	movs	r2, #0
 8015998:	2101      	movs	r1, #1
 801599a:	2000      	movs	r0, #0
 801599c:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8015ad8 <mode_Running+0x32c>
 80159a0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8015af0 <mode_Running+0x344>
 80159a4:	f7f9 fb30 	bl	800f008 <run_shortest>
		break;
 80159a8:	e08c      	b.n	8015ac4 <mode_Running+0x318>
		case 0b0110://吸引なしで斜め走行
			record_out();
 80159aa:	f7f1 fd13 	bl	80073d4 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 80159ae:	2301      	movs	r3, #1
 80159b0:	9352      	str	r3, [sp, #328]	; 0x148
 80159b2:	4a50      	ldr	r2, [pc, #320]	; (8015af4 <mode_Running+0x348>)
 80159b4:	466b      	mov	r3, sp
 80159b6:	4611      	mov	r1, r2
 80159b8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80159bc:	4618      	mov	r0, r3
 80159be:	f00a fa05 	bl	801fdcc <memcpy>
 80159c2:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8015aec <mode_Running+0x340>
 80159c6:	2301      	movs	r3, #1
 80159c8:	2200      	movs	r2, #0
 80159ca:	2101      	movs	r1, #1
 80159cc:	2000      	movs	r0, #0
 80159ce:	eddf 0a42 	vldr	s1, [pc, #264]	; 8015ad8 <mode_Running+0x32c>
 80159d2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8015af0 <mode_Running+0x344>
 80159d6:	f7f9 fb17 	bl	800f008 <run_shortest>
		break;
 80159da:	e073      	b.n	8015ac4 <mode_Running+0x318>
		case 0b0111://吸引ありで斜め走行
			record_out();
 80159dc:	f7f1 fcfa 	bl	80073d4 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 80159e0:	2301      	movs	r3, #1
 80159e2:	9352      	str	r3, [sp, #328]	; 0x148
 80159e4:	4a44      	ldr	r2, [pc, #272]	; (8015af8 <mode_Running+0x34c>)
 80159e6:	466b      	mov	r3, sp
 80159e8:	4611      	mov	r1, r2
 80159ea:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80159ee:	4618      	mov	r0, r3
 80159f0:	f00a f9ec 	bl	801fdcc <memcpy>
 80159f4:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8015afc <mode_Running+0x350>
 80159f8:	2301      	movs	r3, #1
 80159fa:	2201      	movs	r2, #1
 80159fc:	2101      	movs	r1, #1
 80159fe:	2000      	movs	r0, #0
 8015a00:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8015b00 <mode_Running+0x354>
 8015a04:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8015ad8 <mode_Running+0x32c>
 8015a08:	f7f9 fafe 	bl	800f008 <run_shortest>
		break;
 8015a0c:	e05a      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1000://
			record_out();
 8015a0e:	f7f1 fce1 	bl	80073d4 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015a12:	2301      	movs	r3, #1
 8015a14:	9352      	str	r3, [sp, #328]	; 0x148
 8015a16:	4a38      	ldr	r2, [pc, #224]	; (8015af8 <mode_Running+0x34c>)
 8015a18:	466b      	mov	r3, sp
 8015a1a:	4611      	mov	r1, r2
 8015a1c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015a20:	4618      	mov	r0, r3
 8015a22:	f00a f9d3 	bl	801fdcc <memcpy>
 8015a26:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8015afc <mode_Running+0x350>
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	2201      	movs	r2, #1
 8015a2e:	2101      	movs	r1, #1
 8015a30:	2000      	movs	r0, #0
 8015a32:	eddf 0a34 	vldr	s1, [pc, #208]	; 8015b04 <mode_Running+0x358>
 8015a36:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8015b08 <mode_Running+0x35c>
 8015a3a:	f7f9 fae5 	bl	800f008 <run_shortest>
		break;
 8015a3e:	e041      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1001:
			record_out();
 8015a40:	f7f1 fcc8 	bl	80073d4 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015a44:	2301      	movs	r3, #1
 8015a46:	9352      	str	r3, [sp, #328]	; 0x148
 8015a48:	4a30      	ldr	r2, [pc, #192]	; (8015b0c <mode_Running+0x360>)
 8015a4a:	466b      	mov	r3, sp
 8015a4c:	4611      	mov	r1, r2
 8015a4e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015a52:	4618      	mov	r0, r3
 8015a54:	f00a f9ba 	bl	801fdcc <memcpy>
 8015a58:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8015afc <mode_Running+0x350>
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	2201      	movs	r2, #1
 8015a60:	2101      	movs	r1, #1
 8015a62:	2000      	movs	r0, #0
 8015a64:	eddf 0a27 	vldr	s1, [pc, #156]	; 8015b04 <mode_Running+0x358>
 8015a68:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8015b08 <mode_Running+0x35c>
 8015a6c:	f7f9 facc 	bl	800f008 <run_shortest>
		break;
 8015a70:	e028      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1010:
			record_out();
 8015a72:	f7f1 fcaf 	bl	80073d4 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015a76:	e025      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1011:
			record_out();
 8015a78:	f7f1 fcac 	bl	80073d4 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015a7c:	e022      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1100:
			record_out();
 8015a7e:	f7f1 fca9 	bl	80073d4 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015a82:	e01f      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1101:
			record_out();
 8015a84:	f7f1 fca6 	bl	80073d4 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015a88:	e01c      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1110:
			record_out();
 8015a8a:	f7f1 fca3 	bl	80073d4 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015a8e:	e019      	b.n	8015ac4 <mode_Running+0x318>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015a90:	4c1f      	ldr	r4, [pc, #124]	; (8015b10 <mode_Running+0x364>)
 8015a92:	2300      	movs	r3, #0
 8015a94:	934f      	str	r3, [sp, #316]	; 0x13c
 8015a96:	2301      	movs	r3, #1
 8015a98:	934e      	str	r3, [sp, #312]	; 0x138
 8015a9a:	4668      	mov	r0, sp
 8015a9c:	f104 0310 	add.w	r3, r4, #16
 8015aa0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	f00a f991 	bl	801fdcc <memcpy>
 8015aaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015aae:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8015ad8 <mode_Running+0x32c>
 8015ab2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015adc <mode_Running+0x330>
 8015ab6:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015ae0 <mode_Running+0x334>
 8015aba:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8015b14 <mode_Running+0x368>
 8015abe:	f7f8 f9b9 	bl	800de34 <AdatiWayReturn>
		break;
 8015ac2:	bf00      	nop
	}


}
 8015ac4:	bf00      	nop
 8015ac6:	3718      	adds	r7, #24
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bdb0      	pop	{r4, r5, r7, pc}
 8015acc:	080231c0 	.word	0x080231c0
 8015ad0:	080231cc 	.word	0x080231cc
 8015ad4:	2000ef80 	.word	0x2000ef80
 8015ad8:	453b8000 	.word	0x453b8000
 8015adc:	44fa0000 	.word	0x44fa0000
 8015ae0:	43c80000 	.word	0x43c80000
 8015ae4:	43960000 	.word	0x43960000
 8015ae8:	2000f210 	.word	0x2000f210
 8015aec:	3e99999a 	.word	0x3e99999a
 8015af0:	447a0000 	.word	0x447a0000
 8015af4:	2000f358 	.word	0x2000f358
 8015af8:	2000f4a0 	.word	0x2000f4a0
 8015afc:	3f7d70a4 	.word	0x3f7d70a4
 8015b00:	461c4000 	.word	0x461c4000
 8015b04:	464b2000 	.word	0x464b2000
 8015b08:	45480000 	.word	0x45480000
 8015b0c:	2000f5e8 	.word	0x2000f5e8
 8015b10:	2000f0c8 	.word	0x2000f0c8
 8015b14:	437a0000 	.word	0x437a0000

08015b18 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015b18:	b590      	push	{r4, r7, lr}
 8015b1a:	b0db      	sub	sp, #364	; 0x16c
 8015b1c:	af52      	add	r7, sp, #328	; 0x148
 8015b1e:	4603      	mov	r3, r0
 8015b20:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015b22:	2300      	movs	r3, #0
 8015b24:	613b      	str	r3, [r7, #16]
 8015b26:	2300      	movs	r3, #0
 8015b28:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015b32:	2300      	movs	r3, #0
 8015b34:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015b3a:	2003      	movs	r0, #3
 8015b3c:	f7f1 fe8a 	bl	8007854 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015b40:	2003      	movs	r0, #3
 8015b42:	f7f1 feaf 	bl	80078a4 <pl_R_DriveMotor_mode>
	reset_gyro();
 8015b46:	f7eb fe0f 	bl	8001768 <reset_gyro>
	reset_speed();
 8015b4a:	f7eb fa65 	bl	8001018 <reset_speed>
	reset_distance();
 8015b4e:	f7eb fa25 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015b52:	f7ee fd27 	bl	80045a4 <clear_Ierror>

	switch (main_modeR) {
 8015b56:	79fb      	ldrb	r3, [r7, #7]
 8015b58:	2b0f      	cmp	r3, #15
 8015b5a:	f200 82c7 	bhi.w	80160ec <mode_Tuning0+0x5d4>
 8015b5e:	a201      	add	r2, pc, #4	; (adr r2, 8015b64 <mode_Tuning0+0x4c>)
 8015b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b64:	08015ba5 	.word	0x08015ba5
 8015b68:	08015c2f 	.word	0x08015c2f
 8015b6c:	08015c55 	.word	0x08015c55
 8015b70:	08015c7b 	.word	0x08015c7b
 8015b74:	08015cab 	.word	0x08015cab
 8015b78:	08015cdb 	.word	0x08015cdb
 8015b7c:	08015d01 	.word	0x08015d01
 8015b80:	08015d27 	.word	0x08015d27
 8015b84:	08015d4d 	.word	0x08015d4d
 8015b88:	08015d71 	.word	0x08015d71
 8015b8c:	08015df3 	.word	0x08015df3
 8015b90:	08015e79 	.word	0x08015e79
 8015b94:	08015e9f 	.word	0x08015e9f
 8015b98:	08015f39 	.word	0x08015f39
 8015b9c:	08016051 	.word	0x08016051
 8015ba0:	080160a1 	.word	0x080160a1
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015ba4:	4bca      	ldr	r3, [pc, #808]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015ba6:	2203      	movs	r2, #3
 8015ba8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8015bae:	6978      	ldr	r0, [r7, #20]
 8015bb0:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 8015ed4 <mode_Tuning0+0x3bc>
 8015bb4:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8015ed8 <mode_Tuning0+0x3c0>
 8015bb8:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 8015edc <mode_Tuning0+0x3c4>
 8015bbc:	eddf 0ac7 	vldr	s1, [pc, #796]	; 8015edc <mode_Tuning0+0x3c4>
 8015bc0:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8015ee0 <mode_Tuning0+0x3c8>
 8015bc4:	f7ed fa0a 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015bc8:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 8015ee4 <mode_Tuning0+0x3cc>
 8015bcc:	eddf 1ac6 	vldr	s3, [pc, #792]	; 8015ee8 <mode_Tuning0+0x3d0>
 8015bd0:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8015edc <mode_Tuning0+0x3c4>
 8015bd4:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8015edc <mode_Tuning0+0x3c4>
 8015bd8:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8015eec <mode_Tuning0+0x3d4>
 8015bdc:	f7ed ff0c 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015be0:	6978      	ldr	r0, [r7, #20]
 8015be2:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 8015ef0 <mode_Tuning0+0x3d8>
 8015be6:	eddf 1ac3 	vldr	s3, [pc, #780]	; 8015ef4 <mode_Tuning0+0x3dc>
 8015bea:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8015edc <mode_Tuning0+0x3c4>
 8015bee:	eddf 0abb 	vldr	s1, [pc, #748]	; 8015edc <mode_Tuning0+0x3c4>
 8015bf2:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8015ee0 <mode_Tuning0+0x3c8>
 8015bf6:	f7ed f9f1 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015bfa:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8015ee4 <mode_Tuning0+0x3cc>
 8015bfe:	eddf 1aba 	vldr	s3, [pc, #744]	; 8015ee8 <mode_Tuning0+0x3d0>
 8015c02:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8015edc <mode_Tuning0+0x3c4>
 8015c06:	eddf 0ab5 	vldr	s1, [pc, #724]	; 8015edc <mode_Tuning0+0x3c4>
 8015c0a:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015eec <mode_Tuning0+0x3d4>
 8015c0e:	f7ed fef3 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015c12:	6978      	ldr	r0, [r7, #20]
 8015c14:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 8015ef8 <mode_Tuning0+0x3e0>
 8015c18:	eddf 1ab8 	vldr	s3, [pc, #736]	; 8015efc <mode_Tuning0+0x3e4>
 8015c1c:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8015edc <mode_Tuning0+0x3c4>
 8015c20:	eddf 0aae 	vldr	s1, [pc, #696]	; 8015edc <mode_Tuning0+0x3c4>
 8015c24:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8015ee0 <mode_Tuning0+0x3c8>
 8015c28:	f7ed f9d8 	bl	8002fdc <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015c2c:	e25e      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015c2e:	4ba8      	ldr	r3, [pc, #672]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015c30:	2205      	movs	r2, #5
 8015c32:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015c34:	2300      	movs	r3, #0
 8015c36:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 8015c38:	6978      	ldr	r0, [r7, #20]
 8015c3a:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015f00 <mode_Tuning0+0x3e8>
 8015c3e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8015f04 <mode_Tuning0+0x3ec>
 8015c42:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8015edc <mode_Tuning0+0x3c4>
 8015c46:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8015edc <mode_Tuning0+0x3c4>
 8015c4a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8015f08 <mode_Tuning0+0x3f0>
 8015c4e:	f7ed f9c5 	bl	8002fdc <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015c52:	e24b      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 2://壁制御
			record_mode=6;
 8015c54:	4b9e      	ldr	r3, [pc, #632]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015c56:	2206      	movs	r2, #6
 8015c58:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 8015c5e:	6978      	ldr	r0, [r7, #20]
 8015c60:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8015f0c <mode_Tuning0+0x3f4>
 8015c64:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8015f10 <mode_Tuning0+0x3f8>
 8015c68:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8015edc <mode_Tuning0+0x3c4>
 8015c6c:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8015edc <mode_Tuning0+0x3c4>
 8015c70:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8015f14 <mode_Tuning0+0x3fc>
 8015c74:	f7ed f9b2 	bl	8002fdc <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015c78:	e238      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015c7a:	4ca7      	ldr	r4, [pc, #668]	; (8015f18 <mode_Tuning0+0x400>)
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	9351      	str	r3, [sp, #324]	; 0x144
 8015c80:	2300      	movs	r3, #0
 8015c82:	9350      	str	r3, [sp, #320]	; 0x140
 8015c84:	2300      	movs	r3, #0
 8015c86:	934f      	str	r3, [sp, #316]	; 0x13c
 8015c88:	2300      	movs	r3, #0
 8015c8a:	934e      	str	r3, [sp, #312]	; 0x138
 8015c8c:	4668      	mov	r0, sp
 8015c8e:	f104 0310 	add.w	r3, r4, #16
 8015c92:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015c96:	4619      	mov	r1, r3
 8015c98:	f00a f898 	bl	801fdcc <memcpy>
 8015c9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015ca0:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8015edc <mode_Tuning0+0x3c4>
 8015ca4:	f7f7 ff0c 	bl	800dac0 <testturning>
		break;
 8015ca8:	e220      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8015caa:	4c9b      	ldr	r4, [pc, #620]	; (8015f18 <mode_Tuning0+0x400>)
 8015cac:	2300      	movs	r3, #0
 8015cae:	9351      	str	r3, [sp, #324]	; 0x144
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	9350      	str	r3, [sp, #320]	; 0x140
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	934f      	str	r3, [sp, #316]	; 0x13c
 8015cb8:	2301      	movs	r3, #1
 8015cba:	934e      	str	r3, [sp, #312]	; 0x138
 8015cbc:	4668      	mov	r0, sp
 8015cbe:	f104 0310 	add.w	r3, r4, #16
 8015cc2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	f00a f880 	bl	801fdcc <memcpy>
 8015ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015cd0:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8015edc <mode_Tuning0+0x3c4>
 8015cd4:	f7f7 fef4 	bl	800dac0 <testturning>
		break;
 8015cd8:	e208      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 5://直進(制御なし)
			record_mode=7;
 8015cda:	4b7d      	ldr	r3, [pc, #500]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015cdc:	2207      	movs	r2, #7
 8015cde:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	753b      	strb	r3, [r7, #20]
			straight_table2(180, 0, 0, 300, 6000,mode);
 8015ce4:	6978      	ldr	r0, [r7, #20]
 8015ce6:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8015f0c <mode_Tuning0+0x3f4>
 8015cea:	eddf 1a89 	vldr	s3, [pc, #548]	; 8015f10 <mode_Tuning0+0x3f8>
 8015cee:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8015edc <mode_Tuning0+0x3c4>
 8015cf2:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8015edc <mode_Tuning0+0x3c4>
 8015cf6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8015eec <mode_Tuning0+0x3d4>
 8015cfa:	f7ed f96f 	bl	8002fdc <straight_table2>
		break;
 8015cfe:	e1f5      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015d00:	4b73      	ldr	r3, [pc, #460]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015d02:	2207      	movs	r2, #7
 8015d04:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015d06:	2300      	movs	r3, #0
 8015d08:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015d0a:	6978      	ldr	r0, [r7, #20]
 8015d0c:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 8015f0c <mode_Tuning0+0x3f4>
 8015d10:	eddf 1a82 	vldr	s3, [pc, #520]	; 8015f1c <mode_Tuning0+0x404>
 8015d14:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8015edc <mode_Tuning0+0x3c4>
 8015d18:	eddf 0a70 	vldr	s1, [pc, #448]	; 8015edc <mode_Tuning0+0x3c4>
 8015d1c:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8015f20 <mode_Tuning0+0x408>
 8015d20:	f7ed f95c 	bl	8002fdc <straight_table2>
		break;
 8015d24:	e1e2      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015d26:	4b6a      	ldr	r3, [pc, #424]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015d28:	2207      	movs	r2, #7
 8015d2a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015d2c:	2303      	movs	r3, #3
 8015d2e:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015d30:	6978      	ldr	r0, [r7, #20]
 8015d32:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8015f0c <mode_Tuning0+0x3f4>
 8015d36:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8015ef4 <mode_Tuning0+0x3dc>
 8015d3a:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8015edc <mode_Tuning0+0x3c4>
 8015d3e:	eddf 0a67 	vldr	s1, [pc, #412]	; 8015edc <mode_Tuning0+0x3c4>
 8015d42:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8015f20 <mode_Tuning0+0x408>
 8015d46:	f7ed f949 	bl	8002fdc <straight_table2>
		break;
 8015d4a:	e1cf      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 8://宴会芸
			record_mode=2;
 8015d4c:	4b60      	ldr	r3, [pc, #384]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015d4e:	2202      	movs	r2, #2
 8015d50:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015d52:	2001      	movs	r0, #1
 8015d54:	f7f1 f8d0 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015d58:	2001      	movs	r0, #1
 8015d5a:	f7f1 f8df 	bl	8006f1c <pl_l_blue_LED>
			no_angle();
 8015d5e:	f7ee f85f 	bl	8003e20 <no_angle>
			pl_r_blue_LED(OFF);
 8015d62:	2000      	movs	r0, #0
 8015d64:	f7f1 f8c8 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015d68:	2000      	movs	r0, #0
 8015d6a:	f7f1 f8d7 	bl	8006f1c <pl_l_blue_LED>
		break;
 8015d6e:	e1bd      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 9://システム同定enc
			record_mode=6;
 8015d70:	4b57      	ldr	r3, [pc, #348]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015d72:	2206      	movs	r2, #6
 8015d74:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015d76:	2001      	movs	r0, #1
 8015d78:	f7f1 f8be 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015d7c:	2001      	movs	r0, #1
 8015d7e:	f7f1 f8cd 	bl	8006f1c <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8015d82:	f107 020c 	add.w	r2, r7, #12
 8015d86:	f107 0310 	add.w	r3, r7, #16
 8015d8a:	4611      	mov	r1, r2
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015d92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d96:	f7ec f84d 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	68fa      	ldr	r2, [r7, #12]
 8015d9e:	4611      	mov	r1, r2
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7f1 fdc1 	bl	8007928 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015da6:	f7f1 fda3 	bl	80078f0 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015daa:	e006      	b.n	8015dba <mode_Tuning0+0x2a2>
				wait_ms(1);
 8015dac:	2001      	movs	r0, #1
 8015dae:	f7f2 f833 	bl	8007e18 <wait_ms>
				if(record_rupe_flag==1){
 8015db2:	4b5c      	ldr	r3, [pc, #368]	; (8015f24 <mode_Tuning0+0x40c>)
 8015db4:	781b      	ldrb	r3, [r3, #0]
 8015db6:	2b01      	cmp	r3, #1
 8015db8:	d011      	beq.n	8015dde <mode_Tuning0+0x2c6>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015dba:	4b5b      	ldr	r3, [pc, #364]	; (8015f28 <mode_Tuning0+0x410>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015dc2:	ddf3      	ble.n	8015dac <mode_Tuning0+0x294>
 8015dc4:	4b58      	ldr	r3, [pc, #352]	; (8015f28 <mode_Tuning0+0x410>)
 8015dc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015dca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015dce:	dded      	ble.n	8015dac <mode_Tuning0+0x294>
 8015dd0:	4b55      	ldr	r3, [pc, #340]	; (8015f28 <mode_Tuning0+0x410>)
 8015dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015dd6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015dda:	dde7      	ble.n	8015dac <mode_Tuning0+0x294>
 8015ddc:	e000      	b.n	8015de0 <mode_Tuning0+0x2c8>
					break;
 8015dde:	bf00      	nop
				}
			}
			pl_DriveMotor_stop();
 8015de0:	f7f1 fd94 	bl	800790c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015de4:	2000      	movs	r0, #0
 8015de6:	f7f1 f887 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015dea:	2000      	movs	r0, #0
 8015dec:	f7f1 f896 	bl	8006f1c <pl_l_blue_LED>
		break;
 8015df0:	e17c      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 10://システム同定gyro
			record_mode=6;
 8015df2:	4b37      	ldr	r3, [pc, #220]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015df4:	2206      	movs	r2, #6
 8015df6:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015df8:	2001      	movs	r0, #1
 8015dfa:	f7f1 f87d 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015dfe:	2001      	movs	r0, #1
 8015e00:	f7f1 f88c 	bl	8006f1c <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8015e04:	f107 020c 	add.w	r2, r7, #12
 8015e08:	f107 0310 	add.w	r3, r7, #16
 8015e0c:	4611      	mov	r1, r2
 8015e0e:	4618      	mov	r0, r3
 8015e10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015e14:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015e18:	f7ec f80c 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	68fa      	ldr	r2, [r7, #12]
 8015e20:	4611      	mov	r1, r2
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7f1 fd80 	bl	8007928 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015e28:	f7f1 fd62 	bl	80078f0 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e2c:	e00a      	b.n	8015e44 <mode_Tuning0+0x32c>
				wait_ms(1);
 8015e2e:	2001      	movs	r0, #1
 8015e30:	f7f1 fff2 	bl	8007e18 <wait_ms>
				if(record_rupe_flag==1){
 8015e34:	4b3b      	ldr	r3, [pc, #236]	; (8015f24 <mode_Tuning0+0x40c>)
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	2b01      	cmp	r3, #1
 8015e3a:	d103      	bne.n	8015e44 <mode_Tuning0+0x32c>
					record_mode=0;
 8015e3c:	4b24      	ldr	r3, [pc, #144]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015e3e:	2200      	movs	r2, #0
 8015e40:	701a      	strb	r2, [r3, #0]
					break;
 8015e42:	e010      	b.n	8015e66 <mode_Tuning0+0x34e>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e44:	4b38      	ldr	r3, [pc, #224]	; (8015f28 <mode_Tuning0+0x410>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e4c:	ddef      	ble.n	8015e2e <mode_Tuning0+0x316>
 8015e4e:	4b36      	ldr	r3, [pc, #216]	; (8015f28 <mode_Tuning0+0x410>)
 8015e50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e54:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e58:	dde9      	ble.n	8015e2e <mode_Tuning0+0x316>
 8015e5a:	4b33      	ldr	r3, [pc, #204]	; (8015f28 <mode_Tuning0+0x410>)
 8015e5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015e60:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e64:	dde3      	ble.n	8015e2e <mode_Tuning0+0x316>
				}
			}
			pl_DriveMotor_stop();
 8015e66:	f7f1 fd51 	bl	800790c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015e6a:	2000      	movs	r0, #0
 8015e6c:	f7f1 f844 	bl	8006ef8 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015e70:	2000      	movs	r0, #0
 8015e72:	f7f1 f853 	bl	8006f1c <pl_l_blue_LED>
		break;
 8015e76:	e139      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 11:
		record_mode=1;
 8015e78:	4b15      	ldr	r3, [pc, #84]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8015e82:	6978      	ldr	r0, [r7, #20]
 8015e84:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8015f0c <mode_Tuning0+0x3f4>
 8015e88:	eddf 1a21 	vldr	s3, [pc, #132]	; 8015f10 <mode_Tuning0+0x3f8>
 8015e8c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8015edc <mode_Tuning0+0x3c4>
 8015e90:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015edc <mode_Tuning0+0x3c4>
 8015e94:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8015f2c <mode_Tuning0+0x414>
 8015e98:	f7ed f8a0 	bl	8002fdc <straight_table2>
		break;
 8015e9c:	e126      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 12:
		record_mode=2;
 8015e9e:	4b0c      	ldr	r3, [pc, #48]	; (8015ed0 <mode_Tuning0+0x3b8>)
 8015ea0:	2202      	movs	r2, #2
 8015ea2:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	61fb      	str	r3, [r7, #28]
 8015ea8:	e00e      	b.n	8015ec8 <mode_Tuning0+0x3b0>
		turning_table2(90, 0, 0, 400, 3000);
 8015eaa:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8015f30 <mode_Tuning0+0x418>
 8015eae:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8015ee8 <mode_Tuning0+0x3d0>
 8015eb2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015edc <mode_Tuning0+0x3c4>
 8015eb6:	eddf 0a09 	vldr	s1, [pc, #36]	; 8015edc <mode_Tuning0+0x3c4>
 8015eba:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8015f34 <mode_Tuning0+0x41c>
 8015ebe:	f7ed fd9b 	bl	80039f8 <turning_table2>
		for(int i=0;i<40;i++){
 8015ec2:	69fb      	ldr	r3, [r7, #28]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	61fb      	str	r3, [r7, #28]
 8015ec8:	69fb      	ldr	r3, [r7, #28]
 8015eca:	2b27      	cmp	r3, #39	; 0x27
 8015ecc:	dded      	ble.n	8015eaa <mode_Tuning0+0x392>
		}
		break;
 8015ece:	e10d      	b.n	80160ec <mode_Tuning0+0x5d4>
 8015ed0:	2000edc0 	.word	0x2000edc0
 8015ed4:	464b2000 	.word	0x464b2000
 8015ed8:	44c80000 	.word	0x44c80000
 8015edc:	00000000 	.word	0x00000000
 8015ee0:	44070000 	.word	0x44070000
 8015ee4:	457a0000 	.word	0x457a0000
 8015ee8:	43c80000 	.word	0x43c80000
 8015eec:	43340000 	.word	0x43340000
 8015ef0:	466a6000 	.word	0x466a6000
 8015ef4:	44fa0000 	.word	0x44fa0000
 8015ef8:	469c4000 	.word	0x469c4000
 8015efc:	45160000 	.word	0x45160000
 8015f00:	447a0000 	.word	0x447a0000
 8015f04:	c3160000 	.word	0xc3160000
 8015f08:	c1a40000 	.word	0xc1a40000
 8015f0c:	45bb8000 	.word	0x45bb8000
 8015f10:	43960000 	.word	0x43960000
 8015f14:	44340000 	.word	0x44340000
 8015f18:	2000ef80 	.word	0x2000ef80
 8015f1c:	43fa0000 	.word	0x43fa0000
 8015f20:	443eeb39 	.word	0x443eeb39
 8015f24:	2000edcc 	.word	0x2000edcc
 8015f28:	200002b8 	.word	0x200002b8
 8015f2c:	420a0000 	.word	0x420a0000
 8015f30:	453b8000 	.word	0x453b8000
 8015f34:	42b40000 	.word	0x42b40000
		case 13:
			record_mode=2;
 8015f38:	4b89      	ldr	r3, [pc, #548]	; (8016160 <mode_Tuning0+0x648>)
 8015f3a:	2202      	movs	r2, #2
 8015f3c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015f3e:	2301      	movs	r3, #1
 8015f40:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015f42:	4b88      	ldr	r3, [pc, #544]	; (8016164 <mode_Tuning0+0x64c>)
 8015f44:	edd3 6a02 	vldr	s13, [r3, #8]
 8015f48:	4b86      	ldr	r3, [pc, #536]	; (8016164 <mode_Tuning0+0x64c>)
 8015f4a:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015f4e:	4b85      	ldr	r3, [pc, #532]	; (8016164 <mode_Tuning0+0x64c>)
 8015f50:	ed93 7a02 	vldr	s14, [r3, #8]
 8015f54:	4b83      	ldr	r3, [pc, #524]	; (8016164 <mode_Tuning0+0x64c>)
 8015f56:	edd3 7a02 	vldr	s15, [r3, #8]
 8015f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015f5e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015f62:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015f66:	eddf 5a80 	vldr	s11, [pc, #512]	; 8016168 <mode_Tuning0+0x650>
 8015f6a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8015f6e:	6978      	ldr	r0, [r7, #20]
 8015f70:	eeb0 2a47 	vmov.f32	s4, s14
 8015f74:	eef0 1a46 	vmov.f32	s3, s12
 8015f78:	eeb0 1a66 	vmov.f32	s2, s13
 8015f7c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 801616c <mode_Tuning0+0x654>
 8015f80:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8016170 <mode_Tuning0+0x658>
 8015f84:	f7ed f82a 	bl	8002fdc <straight_table2>
			for(int i=0;i<40;i++){
 8015f88:	2300      	movs	r3, #0
 8015f8a:	61bb      	str	r3, [r7, #24]
 8015f8c:	e037      	b.n	8015ffe <mode_Tuning0+0x4e6>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015f8e:	4b75      	ldr	r3, [pc, #468]	; (8016164 <mode_Tuning0+0x64c>)
 8015f90:	edd3 6a02 	vldr	s13, [r3, #8]
 8015f94:	4b73      	ldr	r3, [pc, #460]	; (8016164 <mode_Tuning0+0x64c>)
 8015f96:	ed93 6a02 	vldr	s12, [r3, #8]
 8015f9a:	4b72      	ldr	r3, [pc, #456]	; (8016164 <mode_Tuning0+0x64c>)
 8015f9c:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015fa0:	4b70      	ldr	r3, [pc, #448]	; (8016164 <mode_Tuning0+0x64c>)
 8015fa2:	ed93 7a02 	vldr	s14, [r3, #8]
 8015fa6:	4b6f      	ldr	r3, [pc, #444]	; (8016164 <mode_Tuning0+0x64c>)
 8015fa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8015fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015fb0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015fb4:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015fb8:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8016168 <mode_Tuning0+0x650>
 8015fbc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8015fc0:	6978      	ldr	r0, [r7, #20]
 8015fc2:	eeb0 2a47 	vmov.f32	s4, s14
 8015fc6:	eef0 1a65 	vmov.f32	s3, s11
 8015fca:	eeb0 1a46 	vmov.f32	s2, s12
 8015fce:	eef0 0a66 	vmov.f32	s1, s13
 8015fd2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8015fd6:	f7ed f801 	bl	8002fdc <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8015fda:	4b62      	ldr	r3, [pc, #392]	; (8016164 <mode_Tuning0+0x64c>)
 8015fdc:	2200      	movs	r2, #0
 8015fde:	9203      	str	r2, [sp, #12]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	9202      	str	r2, [sp, #8]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	9201      	str	r2, [sp, #4]
 8015fe8:	699a      	ldr	r2, [r3, #24]
 8015fea:	9200      	str	r2, [sp, #0]
 8015fec:	3308      	adds	r3, #8
 8015fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ff0:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8016174 <mode_Tuning0+0x65c>
 8015ff4:	f7f3 ff78 	bl	8009ee8 <slalomR>
			for(int i=0;i<40;i++){
 8015ff8:	69bb      	ldr	r3, [r7, #24]
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	61bb      	str	r3, [r7, #24]
 8015ffe:	69bb      	ldr	r3, [r7, #24]
 8016000:	2b27      	cmp	r3, #39	; 0x27
 8016002:	ddc4      	ble.n	8015f8e <mode_Tuning0+0x476>
			}
			mode.WallControlMode=0;
 8016004:	2300      	movs	r3, #0
 8016006:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016008:	4b56      	ldr	r3, [pc, #344]	; (8016164 <mode_Tuning0+0x64c>)
 801600a:	edd3 6a02 	vldr	s13, [r3, #8]
 801600e:	4b55      	ldr	r3, [pc, #340]	; (8016164 <mode_Tuning0+0x64c>)
 8016010:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016014:	4b53      	ldr	r3, [pc, #332]	; (8016164 <mode_Tuning0+0x64c>)
 8016016:	ed93 7a02 	vldr	s14, [r3, #8]
 801601a:	4b52      	ldr	r3, [pc, #328]	; (8016164 <mode_Tuning0+0x64c>)
 801601c:	edd3 7a02 	vldr	s15, [r3, #8]
 8016020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016024:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016028:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 801602c:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8016168 <mode_Tuning0+0x650>
 8016030:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016034:	6978      	ldr	r0, [r7, #20]
 8016036:	eeb0 2a47 	vmov.f32	s4, s14
 801603a:	eef0 1a46 	vmov.f32	s3, s12
 801603e:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 801616c <mode_Tuning0+0x654>
 8016042:	eef0 0a66 	vmov.f32	s1, s13
 8016046:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8016168 <mode_Tuning0+0x650>
 801604a:	f7ec ffc7 	bl	8002fdc <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 801604e:	e04d      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8016050:	4b49      	ldr	r3, [pc, #292]	; (8016178 <mode_Tuning0+0x660>)
 8016052:	2201      	movs	r2, #1
 8016054:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016056:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801617c <mode_Tuning0+0x664>
 801605a:	f7f1 fc8f 	bl	800797c <pl_FunMotor_duty>
			pl_FunMotor_start();
 801605e:	f7f1 fc79 	bl	8007954 <pl_FunMotor_start>
			HAL_Delay(600);
 8016062:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016066:	f002 fbdf 	bl	8018828 <HAL_Delay>
			reset_gyro();
 801606a:	f7eb fb7d 	bl	8001768 <reset_gyro>
			reset_speed();
 801606e:	f7ea ffd3 	bl	8001018 <reset_speed>
			reset_distance();
 8016072:	f7ea ff93 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016076:	f7ee fa95 	bl	80045a4 <clear_Ierror>
			record_mode=3;
 801607a:	4b39      	ldr	r3, [pc, #228]	; (8016160 <mode_Tuning0+0x648>)
 801607c:	2203      	movs	r2, #3
 801607e:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8016080:	2301      	movs	r3, #1
 8016082:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 3200, 14000,mode);
 8016084:	6978      	ldr	r0, [r7, #20]
 8016086:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8016180 <mode_Tuning0+0x668>
 801608a:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8016184 <mode_Tuning0+0x66c>
 801608e:	ed9f 1a37 	vldr	s2, [pc, #220]	; 801616c <mode_Tuning0+0x654>
 8016092:	eddf 0a36 	vldr	s1, [pc, #216]	; 801616c <mode_Tuning0+0x654>
 8016096:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016188 <mode_Tuning0+0x670>
 801609a:	f7ec ff9f 	bl	8002fdc <straight_table2>
		break;
 801609e:	e025      	b.n	80160ec <mode_Tuning0+0x5d4>
		case 15:
			highspeed_mode = 1;
 80160a0:	4b35      	ldr	r3, [pc, #212]	; (8016178 <mode_Tuning0+0x660>)
 80160a2:	2201      	movs	r2, #1
 80160a4:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 80160a6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801618c <mode_Tuning0+0x674>
 80160aa:	f7f1 fc67 	bl	800797c <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 80160ae:	f44f 7016 	mov.w	r0, #600	; 0x258
 80160b2:	f002 fbb9 	bl	8018828 <HAL_Delay>
						reset_gyro();
 80160b6:	f7eb fb57 	bl	8001768 <reset_gyro>
						reset_speed();
 80160ba:	f7ea ffad 	bl	8001018 <reset_speed>
						reset_distance();
 80160be:	f7ea ff6d 	bl	8000f9c <reset_distance>
						clear_Ierror();
 80160c2:	f7ee fa6f 	bl	80045a4 <clear_Ierror>
						record_mode=3;
 80160c6:	4b26      	ldr	r3, [pc, #152]	; (8016160 <mode_Tuning0+0x648>)
 80160c8:	2203      	movs	r2, #3
 80160ca:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 80160cc:	2301      	movs	r3, #1
 80160ce:	753b      	strb	r3, [r7, #20]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 80160d0:	6978      	ldr	r0, [r7, #20]
 80160d2:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8016190 <mode_Tuning0+0x678>
 80160d6:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8016194 <mode_Tuning0+0x67c>
 80160da:	ed9f 1a24 	vldr	s2, [pc, #144]	; 801616c <mode_Tuning0+0x654>
 80160de:	eddf 0a23 	vldr	s1, [pc, #140]	; 801616c <mode_Tuning0+0x654>
 80160e2:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8016188 <mode_Tuning0+0x670>
 80160e6:	f7ec ff79 	bl	8002fdc <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 80160ea:	bf00      	nop
	}
	record_mode=0;
 80160ec:	4b1c      	ldr	r3, [pc, #112]	; (8016160 <mode_Tuning0+0x648>)
 80160ee:	2200      	movs	r2, #0
 80160f0:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80160f2:	2003      	movs	r0, #3
 80160f4:	f7f1 fbd6 	bl	80078a4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80160f8:	2003      	movs	r0, #3
 80160fa:	f7f1 fbab 	bl	8007854 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80160fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016102:	f7f1 fecd 	bl	8007ea0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016106:	f7f1 fc2f 	bl	8007968 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 801610a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801610e:	f7f1 fec7 	bl	8007ea0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016112:	2000      	movs	r0, #0
 8016114:	f7f1 fb94 	bl	8007840 <pl_DriveMotor_standby>
	record_mode=0;
 8016118:	4b11      	ldr	r3, [pc, #68]	; (8016160 <mode_Tuning0+0x648>)
 801611a:	2200      	movs	r2, #0
 801611c:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801611e:	e002      	b.n	8016126 <mode_Tuning0+0x60e>
		HAL_Delay(1);
 8016120:	2001      	movs	r0, #1
 8016122:	f002 fb81 	bl	8018828 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016126:	4b1c      	ldr	r3, [pc, #112]	; (8016198 <mode_Tuning0+0x680>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801612e:	ddf7      	ble.n	8016120 <mode_Tuning0+0x608>
 8016130:	4b19      	ldr	r3, [pc, #100]	; (8016198 <mode_Tuning0+0x680>)
 8016132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016136:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801613a:	ddf1      	ble.n	8016120 <mode_Tuning0+0x608>
 801613c:	4b16      	ldr	r3, [pc, #88]	; (8016198 <mode_Tuning0+0x680>)
 801613e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016142:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016146:	ddeb      	ble.n	8016120 <mode_Tuning0+0x608>
	}
	pl_r_blue_LED(ON);
 8016148:	2001      	movs	r0, #1
 801614a:	f7f0 fed5 	bl	8006ef8 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 801614e:	2001      	movs	r0, #1
 8016150:	f7f0 fee4 	bl	8006f1c <pl_l_blue_LED>
	record_print();
 8016154:	f000 fd0c 	bl	8016b70 <record_print>



}
 8016158:	bf00      	nop
 801615a:	3724      	adds	r7, #36	; 0x24
 801615c:	46bd      	mov	sp, r7
 801615e:	bd90      	pop	{r4, r7, pc}
 8016160:	2000edc0 	.word	0x2000edc0
 8016164:	2000ef80 	.word	0x2000ef80
 8016168:	42340000 	.word	0x42340000
 801616c:	00000000 	.word	0x00000000
 8016170:	431b8000 	.word	0x431b8000
 8016174:	43960000 	.word	0x43960000
 8016178:	20000808 	.word	0x20000808
 801617c:	3f7d70a4 	.word	0x3f7d70a4
 8016180:	465ac000 	.word	0x465ac000
 8016184:	45480000 	.word	0x45480000
 8016188:	44340000 	.word	0x44340000
 801618c:	3f733333 	.word	0x3f733333
 8016190:	45dac000 	.word	0x45dac000
 8016194:	447a0000 	.word	0x447a0000
 8016198:	200002b8 	.word	0x200002b8

0801619c <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	4603      	mov	r3, r0
 80161a4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 80161aa:	2300      	movs	r3, #0
 80161ac:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 80161ae:	2300      	movs	r3, #0
 80161b0:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 80161b2:	2300      	movs	r3, #0
 80161b4:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80161b6:	2001      	movs	r0, #1
 80161b8:	f7f1 fb42 	bl	8007840 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80161bc:	2003      	movs	r0, #3
 80161be:	f7f1 fb49 	bl	8007854 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80161c2:	2003      	movs	r0, #3
 80161c4:	f7f1 fb6e 	bl	80078a4 <pl_R_DriveMotor_mode>
	reset_gyro();
 80161c8:	f7eb face 	bl	8001768 <reset_gyro>
	reset_speed();
 80161cc:	f7ea ff24 	bl	8001018 <reset_speed>
	clear_Ierror();
 80161d0:	f7ee f9e8 	bl	80045a4 <clear_Ierror>

	switch (main_modeR) {
 80161d4:	79fb      	ldrb	r3, [r7, #7]
 80161d6:	2b0f      	cmp	r3, #15
 80161d8:	f200 81b0 	bhi.w	801653c <mode_WallSensorTuning+0x3a0>
 80161dc:	a201      	add	r2, pc, #4	; (adr r2, 80161e4 <mode_WallSensorTuning+0x48>)
 80161de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161e2:	bf00      	nop
 80161e4:	08016225 	.word	0x08016225
 80161e8:	0801624b 	.word	0x0801624b
 80161ec:	08016263 	.word	0x08016263
 80161f0:	080162d9 	.word	0x080162d9
 80161f4:	0801634f 	.word	0x0801634f
 80161f8:	080163c5 	.word	0x080163c5
 80161fc:	08016435 	.word	0x08016435
 8016200:	0801645b 	.word	0x0801645b
 8016204:	08016481 	.word	0x08016481
 8016208:	080164a7 	.word	0x080164a7
 801620c:	0801653d 	.word	0x0801653d
 8016210:	0801653d 	.word	0x0801653d
 8016214:	0801653d 	.word	0x0801653d
 8016218:	0801653d 	.word	0x0801653d
 801621c:	0801653d 	.word	0x0801653d
 8016220:	080164cd 	.word	0x080164cd
		case 0://横壁追従制御
			record_mode=16;
 8016224:	4bd2      	ldr	r3, [pc, #840]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 8016226:	2210      	movs	r2, #16
 8016228:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801622a:	2301      	movs	r3, #1
 801622c:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 801622e:	68b8      	ldr	r0, [r7, #8]
 8016230:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8016574 <mode_WallSensorTuning+0x3d8>
 8016234:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8016578 <mode_WallSensorTuning+0x3dc>
 8016238:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 801657c <mode_WallSensorTuning+0x3e0>
 801623c:	eddf 0acf 	vldr	s1, [pc, #828]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016240:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8016580 <mode_WallSensorTuning+0x3e4>
 8016244:	f7ec feca 	bl	8002fdc <straight_table2>
		break;
 8016248:	e178      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 801624a:	2300      	movs	r3, #0
 801624c:	60fb      	str	r3, [r7, #12]
 801624e:	e004      	b.n	801625a <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8016250:	f7ed fece 	bl	8003ff0 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	3301      	adds	r3, #1
 8016258:	60fb      	str	r3, [r7, #12]
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2b14      	cmp	r3, #20
 801625e:	ddf7      	ble.n	8016250 <mode_WallSensorTuning+0xb4>
			}
		break;
 8016260:	e16c      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016262:	4bc3      	ldr	r3, [pc, #780]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 8016264:	2207      	movs	r2, #7
 8016266:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016268:	2300      	movs	r3, #0
 801626a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801626c:	2300      	movs	r3, #0
 801626e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016270:	2300      	movs	r3, #0
 8016272:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016274:	2300      	movs	r3, #0
 8016276:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8016278:	68b8      	ldr	r0, [r7, #8]
 801627a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8016584 <mode_WallSensorTuning+0x3e8>
 801627e:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016282:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016286:	eddf 0abd 	vldr	s1, [pc, #756]	; 801657c <mode_WallSensorTuning+0x3e0>
 801628a:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 801658c <mode_WallSensorTuning+0x3f0>
 801628e:	f7ec fea5 	bl	8002fdc <straight_table2>
			mode.WallCutMode=1;
 8016292:	2301      	movs	r3, #1
 8016294:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016296:	2300      	movs	r3, #0
 8016298:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801629a:	68b8      	ldr	r0, [r7, #8]
 801629c:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8016584 <mode_WallSensorTuning+0x3e8>
 80162a0:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80162a4:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80162a8:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80162ac:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8016590 <mode_WallSensorTuning+0x3f4>
 80162b0:	f7ec fe94 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80162b4:	2300      	movs	r3, #0
 80162b6:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80162b8:	2300      	movs	r3, #0
 80162ba:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 80162bc:	68b8      	ldr	r0, [r7, #8]
 80162be:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8016584 <mode_WallSensorTuning+0x3e8>
 80162c2:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80162c6:	ed9f 1aad 	vldr	s2, [pc, #692]	; 801657c <mode_WallSensorTuning+0x3e0>
 80162ca:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80162ce:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016594 <mode_WallSensorTuning+0x3f8>
 80162d2:	f7ec fe83 	bl	8002fdc <straight_table2>
		break;
 80162d6:	e131      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 80162d8:	4ba5      	ldr	r3, [pc, #660]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 80162da:	2208      	movs	r2, #8
 80162dc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80162de:	2300      	movs	r3, #0
 80162e0:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80162e2:	2300      	movs	r3, #0
 80162e4:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80162e6:	2300      	movs	r3, #0
 80162e8:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 80162ee:	68b8      	ldr	r0, [r7, #8]
 80162f0:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8016584 <mode_WallSensorTuning+0x3e8>
 80162f4:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80162f8:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80162fc:	eddf 0a9f 	vldr	s1, [pc, #636]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016300:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8016598 <mode_WallSensorTuning+0x3fc>
 8016304:	f7ec fe6a 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016308:	2302      	movs	r3, #2
 801630a:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801630c:	2300      	movs	r3, #0
 801630e:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016310:	68b8      	ldr	r0, [r7, #8]
 8016312:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8016584 <mode_WallSensorTuning+0x3e8>
 8016316:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8016588 <mode_WallSensorTuning+0x3ec>
 801631a:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8016588 <mode_WallSensorTuning+0x3ec>
 801631e:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016322:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016590 <mode_WallSensorTuning+0x3f4>
 8016326:	f7ec fe59 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 801632a:	2300      	movs	r3, #0
 801632c:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801632e:	2300      	movs	r3, #0
 8016330:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8016332:	68b8      	ldr	r0, [r7, #8]
 8016334:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8016584 <mode_WallSensorTuning+0x3e8>
 8016338:	eddf 1a93 	vldr	s3, [pc, #588]	; 8016588 <mode_WallSensorTuning+0x3ec>
 801633c:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016340:	eddf 0a91 	vldr	s1, [pc, #580]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016344:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8016594 <mode_WallSensorTuning+0x3f8>
 8016348:	f7ec fe48 	bl	8002fdc <straight_table2>
		break;
 801634c:	e0f6      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 801634e:	4b88      	ldr	r3, [pc, #544]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 8016350:	2208      	movs	r2, #8
 8016352:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016354:	2300      	movs	r3, #0
 8016356:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016358:	2300      	movs	r3, #0
 801635a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 801635c:	2300      	movs	r3, #0
 801635e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016360:	2300      	movs	r3, #0
 8016362:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016364:	68b8      	ldr	r0, [r7, #8]
 8016366:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8016584 <mode_WallSensorTuning+0x3e8>
 801636a:	eddf 1a87 	vldr	s3, [pc, #540]	; 8016588 <mode_WallSensorTuning+0x3ec>
 801636e:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016372:	eddf 0a82 	vldr	s1, [pc, #520]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016376:	ed9f 0a89 	vldr	s0, [pc, #548]	; 801659c <mode_WallSensorTuning+0x400>
 801637a:	f7ec fe2f 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 801637e:	2303      	movs	r3, #3
 8016380:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016382:	2300      	movs	r3, #0
 8016384:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016386:	68b8      	ldr	r0, [r7, #8]
 8016388:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8016584 <mode_WallSensorTuning+0x3e8>
 801638c:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016390:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016394:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016398:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80165a0 <mode_WallSensorTuning+0x404>
 801639c:	f7ec fe1e 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80163a0:	2300      	movs	r3, #0
 80163a2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80163a4:	2300      	movs	r3, #0
 80163a6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80163a8:	68b8      	ldr	r0, [r7, #8]
 80163aa:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8016584 <mode_WallSensorTuning+0x3e8>
 80163ae:	eddf 1a76 	vldr	s3, [pc, #472]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80163b2:	ed9f 1a72 	vldr	s2, [pc, #456]	; 801657c <mode_WallSensorTuning+0x3e0>
 80163b6:	eddf 0a74 	vldr	s1, [pc, #464]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80163ba:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80165a4 <mode_WallSensorTuning+0x408>
 80163be:	f7ec fe0d 	bl	8002fdc <straight_table2>
		break;
 80163c2:	e0bb      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 80163c4:	2300      	movs	r3, #0
 80163c6:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80163c8:	2300      	movs	r3, #0
 80163ca:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80163cc:	2300      	movs	r3, #0
 80163ce:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80163d0:	2300      	movs	r3, #0
 80163d2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 80163d4:	68b8      	ldr	r0, [r7, #8]
 80163d6:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016584 <mode_WallSensorTuning+0x3e8>
 80163da:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80163de:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8016588 <mode_WallSensorTuning+0x3ec>
 80163e2:	eddf 0a66 	vldr	s1, [pc, #408]	; 801657c <mode_WallSensorTuning+0x3e0>
 80163e6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801659c <mode_WallSensorTuning+0x400>
 80163ea:	f7ec fdf7 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 80163ee:	2304      	movs	r3, #4
 80163f0:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 80163f6:	68b8      	ldr	r0, [r7, #8]
 80163f8:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016584 <mode_WallSensorTuning+0x3e8>
 80163fc:	eddf 1a62 	vldr	s3, [pc, #392]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016400:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016404:	eddf 0a60 	vldr	s1, [pc, #384]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016408:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80165a0 <mode_WallSensorTuning+0x404>
 801640c:	f7ec fde6 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016410:	2300      	movs	r3, #0
 8016412:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016414:	2300      	movs	r3, #0
 8016416:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016418:	68b8      	ldr	r0, [r7, #8]
 801641a:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016584 <mode_WallSensorTuning+0x3e8>
 801641e:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016422:	ed9f 1a56 	vldr	s2, [pc, #344]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016426:	eddf 0a58 	vldr	s1, [pc, #352]	; 8016588 <mode_WallSensorTuning+0x3ec>
 801642a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80165a4 <mode_WallSensorTuning+0x408>
 801642e:	f7ec fdd5 	bl	8002fdc <straight_table2>
		break;
 8016432:	e083      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 8016434:	4b4e      	ldr	r3, [pc, #312]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 8016436:	2209      	movs	r2, #9
 8016438:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801643a:	2300      	movs	r3, #0
 801643c:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801643e:	68b8      	ldr	r0, [r7, #8]
 8016440:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8016584 <mode_WallSensorTuning+0x3e8>
 8016444:	eddf 1a50 	vldr	s3, [pc, #320]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016448:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 801657c <mode_WallSensorTuning+0x3e0>
 801644c:	eddf 0a4b 	vldr	s1, [pc, #300]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016450:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80165a8 <mode_WallSensorTuning+0x40c>
 8016454:	f7ec fdc2 	bl	8002fdc <straight_table2>
		break;
 8016458:	e070      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 801645a:	4b45      	ldr	r3, [pc, #276]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 801645c:	220a      	movs	r2, #10
 801645e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016460:	2300      	movs	r3, #0
 8016462:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016464:	68b8      	ldr	r0, [r7, #8]
 8016466:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8016584 <mode_WallSensorTuning+0x3e8>
 801646a:	eddf 1a47 	vldr	s3, [pc, #284]	; 8016588 <mode_WallSensorTuning+0x3ec>
 801646e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016472:	eddf 0a42 	vldr	s1, [pc, #264]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016476:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80165a8 <mode_WallSensorTuning+0x40c>
 801647a:	f7ec fdaf 	bl	8002fdc <straight_table2>

		break;
 801647e:	e05d      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016480:	4b3b      	ldr	r3, [pc, #236]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 8016482:	2207      	movs	r2, #7
 8016484:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016486:	2303      	movs	r3, #3
 8016488:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801648a:	68b8      	ldr	r0, [r7, #8]
 801648c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8016584 <mode_WallSensorTuning+0x3e8>
 8016490:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8016588 <mode_WallSensorTuning+0x3ec>
 8016494:	ed9f 1a39 	vldr	s2, [pc, #228]	; 801657c <mode_WallSensorTuning+0x3e0>
 8016498:	eddf 0a38 	vldr	s1, [pc, #224]	; 801657c <mode_WallSensorTuning+0x3e0>
 801649c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80165a8 <mode_WallSensorTuning+0x40c>
 80164a0:	f7ec fd9c 	bl	8002fdc <straight_table2>
		break;
 80164a4:	e04a      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 80164a6:	4b32      	ldr	r3, [pc, #200]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 80164a8:	2208      	movs	r2, #8
 80164aa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80164ac:	2303      	movs	r3, #3
 80164ae:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 80164b0:	68b8      	ldr	r0, [r7, #8]
 80164b2:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80165ac <mode_WallSensorTuning+0x410>
 80164b6:	eddf 1a3e 	vldr	s3, [pc, #248]	; 80165b0 <mode_WallSensorTuning+0x414>
 80164ba:	ed9f 1a30 	vldr	s2, [pc, #192]	; 801657c <mode_WallSensorTuning+0x3e0>
 80164be:	eddf 0a2f 	vldr	s1, [pc, #188]	; 801657c <mode_WallSensorTuning+0x3e0>
 80164c2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80165b4 <mode_WallSensorTuning+0x418>
 80164c6:	f7ec fd89 	bl	8002fdc <straight_table2>
		break;
 80164ca:	e037      	b.n	801653c <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 80164cc:	2305      	movs	r3, #5
 80164ce:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80164d0:	2300      	movs	r3, #0
 80164d2:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80164d4:	2300      	movs	r3, #0
 80164d6:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80164d8:	2300      	movs	r3, #0
 80164da:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 80164dc:	68b8      	ldr	r0, [r7, #8]
 80164de:	ed9f 2a36 	vldr	s4, [pc, #216]	; 80165b8 <mode_WallSensorTuning+0x41c>
 80164e2:	eddf 1a25 	vldr	s3, [pc, #148]	; 8016578 <mode_WallSensorTuning+0x3dc>
 80164e6:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016578 <mode_WallSensorTuning+0x3dc>
 80164ea:	eddf 0a24 	vldr	s1, [pc, #144]	; 801657c <mode_WallSensorTuning+0x3e0>
 80164ee:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80165bc <mode_WallSensorTuning+0x420>
 80164f2:	f7ec fd73 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80164f6:	2302      	movs	r3, #2
 80164f8:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80164fa:	2300      	movs	r3, #0
 80164fc:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 80164fe:	68b8      	ldr	r0, [r7, #8]
 8016500:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 80165b8 <mode_WallSensorTuning+0x41c>
 8016504:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8016578 <mode_WallSensorTuning+0x3dc>
 8016508:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8016578 <mode_WallSensorTuning+0x3dc>
 801650c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8016578 <mode_WallSensorTuning+0x3dc>
 8016510:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80165c0 <mode_WallSensorTuning+0x424>
 8016514:	f7ec fd62 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016518:	2300      	movs	r3, #0
 801651a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801651c:	2300      	movs	r3, #0
 801651e:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8016520:	68b8      	ldr	r0, [r7, #8]
 8016522:	ed9f 2a25 	vldr	s4, [pc, #148]	; 80165b8 <mode_WallSensorTuning+0x41c>
 8016526:	eddf 1a14 	vldr	s3, [pc, #80]	; 8016578 <mode_WallSensorTuning+0x3dc>
 801652a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 801657c <mode_WallSensorTuning+0x3e0>
 801652e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016578 <mode_WallSensorTuning+0x3dc>
 8016532:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80165c4 <mode_WallSensorTuning+0x428>
 8016536:	f7ec fd51 	bl	8002fdc <straight_table2>
		break;
 801653a:	bf00      	nop
	}
	record_mode=0;
 801653c:	4b0c      	ldr	r3, [pc, #48]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 801653e:	2200      	movs	r2, #0
 8016540:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016542:	2003      	movs	r0, #3
 8016544:	f7f1 f9ae 	bl	80078a4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016548:	2003      	movs	r0, #3
 801654a:	f7f1 f983 	bl	8007854 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801654e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016552:	f7f1 fca5 	bl	8007ea0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016556:	f7f1 fa07 	bl	8007968 <pl_FunMotor_stop>
	record_mode=0;
 801655a:	4b05      	ldr	r3, [pc, #20]	; (8016570 <mode_WallSensorTuning+0x3d4>)
 801655c:	2200      	movs	r2, #0
 801655e:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016564:	f7f1 fc9c 	bl	8007ea0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016568:	2000      	movs	r0, #0
 801656a:	f7f1 f969 	bl	8007840 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801656e:	e02e      	b.n	80165ce <mode_WallSensorTuning+0x432>
 8016570:	2000edc0 	.word	0x2000edc0
 8016574:	459c4000 	.word	0x459c4000
 8016578:	43fa0000 	.word	0x43fa0000
 801657c:	00000000 	.word	0x00000000
 8016580:	44b40000 	.word	0x44b40000
 8016584:	453b8000 	.word	0x453b8000
 8016588:	43960000 	.word	0x43960000
 801658c:	431b8000 	.word	0x431b8000
 8016590:	41b40000 	.word	0x41b40000
 8016594:	42870000 	.word	0x42870000
 8016598:	42cd0000 	.word	0x42cd0000
 801659c:	4329c77b 	.word	0x4329c77b
 80165a0:	41fe8ef6 	.word	0x41fe8ef6
 80165a4:	42beeb39 	.word	0x42beeb39
 80165a8:	43beeb39 	.word	0x43beeb39
 80165ac:	461c4000 	.word	0x461c4000
 80165b0:	442f0000 	.word	0x442f0000
 80165b4:	4484977b 	.word	0x4484977b
 80165b8:	44bb8000 	.word	0x44bb8000
 80165bc:	43488000 	.word	0x43488000
 80165c0:	42340000 	.word	0x42340000
 80165c4:	43070000 	.word	0x43070000
		HAL_Delay(1);
 80165c8:	2001      	movs	r0, #1
 80165ca:	f002 f92d 	bl	8018828 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80165ce:	4b0e      	ldr	r3, [pc, #56]	; (8016608 <mode_WallSensorTuning+0x46c>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80165d6:	ddf7      	ble.n	80165c8 <mode_WallSensorTuning+0x42c>
 80165d8:	4b0b      	ldr	r3, [pc, #44]	; (8016608 <mode_WallSensorTuning+0x46c>)
 80165da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80165de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80165e2:	ddf1      	ble.n	80165c8 <mode_WallSensorTuning+0x42c>
 80165e4:	4b08      	ldr	r3, [pc, #32]	; (8016608 <mode_WallSensorTuning+0x46c>)
 80165e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80165ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80165ee:	ddeb      	ble.n	80165c8 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 80165f0:	2001      	movs	r0, #1
 80165f2:	f7f0 fc81 	bl	8006ef8 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80165f6:	2001      	movs	r0, #1
 80165f8:	f7f0 fc90 	bl	8006f1c <pl_l_blue_LED>
	record_print();
 80165fc:	f000 fab8 	bl	8016b70 <record_print>



}
 8016600:	bf00      	nop
 8016602:	3710      	adds	r7, #16
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	200002b8 	.word	0x200002b8

0801660c <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 801660c:	b580      	push	{r7, lr}
 801660e:	b084      	sub	sp, #16
 8016610:	af00      	add	r7, sp, #0
 8016612:	4603      	mov	r3, r0
 8016614:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016616:	2300      	movs	r3, #0
 8016618:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 801661a:	2300      	movs	r3, #0
 801661c:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 801661e:	2300      	movs	r3, #0
 8016620:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8016622:	2300      	movs	r3, #0
 8016624:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016626:	2001      	movs	r0, #1
 8016628:	f7f1 f90a 	bl	8007840 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801662c:	2003      	movs	r0, #3
 801662e:	f7f1 f911 	bl	8007854 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016632:	2003      	movs	r0, #3
 8016634:	f7f1 f936 	bl	80078a4 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 8016638:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80169a0 <mode_WallSensorTuning_fast+0x394>
 801663c:	f7f1 f99e 	bl	800797c <pl_FunMotor_duty>
	pl_FunMotor_start();
 8016640:	f7f1 f988 	bl	8007954 <pl_FunMotor_start>
	HAL_Delay(600);
 8016644:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016648:	f002 f8ee 	bl	8018828 <HAL_Delay>
	reset_gyro();
 801664c:	f7eb f88c 	bl	8001768 <reset_gyro>
	reset_speed();
 8016650:	f7ea fce2 	bl	8001018 <reset_speed>
	clear_Ierror();
 8016654:	f7ed ffa6 	bl	80045a4 <clear_Ierror>
	angle=0;
 8016658:	4bd2      	ldr	r3, [pc, #840]	; (80169a4 <mode_WallSensorTuning_fast+0x398>)
 801665a:	f04f 0200 	mov.w	r2, #0
 801665e:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8016660:	79fb      	ldrb	r3, [r7, #7]
 8016662:	2b0f      	cmp	r3, #15
 8016664:	f200 81e1 	bhi.w	8016a2a <mode_WallSensorTuning_fast+0x41e>
 8016668:	a201      	add	r2, pc, #4	; (adr r2, 8016670 <mode_WallSensorTuning_fast+0x64>)
 801666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801666e:	bf00      	nop
 8016670:	080166b1 	.word	0x080166b1
 8016674:	08016a2b 	.word	0x08016a2b
 8016678:	080166e3 	.word	0x080166e3
 801667c:	08016759 	.word	0x08016759
 8016680:	080167cf 	.word	0x080167cf
 8016684:	08016845 	.word	0x08016845
 8016688:	080168bb 	.word	0x080168bb
 801668c:	080168e1 	.word	0x080168e1
 8016690:	08016907 	.word	0x08016907
 8016694:	0801692d 	.word	0x0801692d
 8016698:	08016953 	.word	0x08016953
 801669c:	08016979 	.word	0x08016979
 80166a0:	08016a05 	.word	0x08016a05
 80166a4:	08016a2b 	.word	0x08016a2b
 80166a8:	08016a2b 	.word	0x08016a2b
 80166ac:	08016a2b 	.word	0x08016a2b
		case 0://横壁追従制御
			record_mode=15;
 80166b0:	4bbd      	ldr	r3, [pc, #756]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 80166b2:	220f      	movs	r2, #15
 80166b4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80166b6:	2301      	movs	r3, #1
 80166b8:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 80166ba:	4bbc      	ldr	r3, [pc, #752]	; (80169ac <mode_WallSensorTuning_fast+0x3a0>)
 80166bc:	2201      	movs	r2, #1
 80166be:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	ed9f 2abb 	vldr	s4, [pc, #748]	; 80169b0 <mode_WallSensorTuning_fast+0x3a4>
 80166c6:	eddf 1abb 	vldr	s3, [pc, #748]	; 80169b4 <mode_WallSensorTuning_fast+0x3a8>
 80166ca:	ed9f 1abb 	vldr	s2, [pc, #748]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80166ce:	eddf 0aba 	vldr	s1, [pc, #744]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80166d2:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80169bc <mode_WallSensorTuning_fast+0x3b0>
 80166d6:	f7ec fc81 	bl	8002fdc <straight_table2>
			highspeed_mode=0;
 80166da:	4bb4      	ldr	r3, [pc, #720]	; (80169ac <mode_WallSensorTuning_fast+0x3a0>)
 80166dc:	2200      	movs	r2, #0
 80166de:	701a      	strb	r2, [r3, #0]
		break;
 80166e0:	e1a3      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 1://なし
		break;
		case 2://なし
			record_mode=8;
 80166e2:	4bb1      	ldr	r3, [pc, #708]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 80166e4:	2208      	movs	r2, #8
 80166e6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80166e8:	2301      	movs	r3, #1
 80166ea:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80166ec:	2300      	movs	r3, #0
 80166ee:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80166f0:	2300      	movs	r3, #0
 80166f2:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80166f4:	2300      	movs	r3, #0
 80166f6:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 600, 600,15000,mode);
 80166f8:	68f8      	ldr	r0, [r7, #12]
 80166fa:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80169c0 <mode_WallSensorTuning_fast+0x3b4>
 80166fe:	eddf 1ab1 	vldr	s3, [pc, #708]	; 80169c4 <mode_WallSensorTuning_fast+0x3b8>
 8016702:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 80169c4 <mode_WallSensorTuning_fast+0x3b8>
 8016706:	eddf 0aac 	vldr	s1, [pc, #688]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 801670a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80169c8 <mode_WallSensorTuning_fast+0x3bc>
 801670e:	f7ec fc65 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016712:	2302      	movs	r3, #2
 8016714:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016716:	2300      	movs	r3, #0
 8016718:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 600, 600, 600,15000,mode);
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 80169c0 <mode_WallSensorTuning_fast+0x3b4>
 8016720:	eddf 1aa8 	vldr	s3, [pc, #672]	; 80169c4 <mode_WallSensorTuning_fast+0x3b8>
 8016724:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 80169c4 <mode_WallSensorTuning_fast+0x3b8>
 8016728:	eddf 0aa6 	vldr	s1, [pc, #664]	; 80169c4 <mode_WallSensorTuning_fast+0x3b8>
 801672c:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 80169cc <mode_WallSensorTuning_fast+0x3c0>
 8016730:	f7ec fc54 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 8016734:	2301      	movs	r3, #1
 8016736:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016738:	2300      	movs	r3, #0
 801673a:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 600, 0, 600,15000,mode);
 801673c:	68f8      	ldr	r0, [r7, #12]
 801673e:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 80169c0 <mode_WallSensorTuning_fast+0x3b4>
 8016742:	eddf 1aa0 	vldr	s3, [pc, #640]	; 80169c4 <mode_WallSensorTuning_fast+0x3b8>
 8016746:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 801674a:	eddf 0a9e 	vldr	s1, [pc, #632]	; 80169c4 <mode_WallSensorTuning_fast+0x3b8>
 801674e:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80169d0 <mode_WallSensorTuning_fast+0x3c4>
 8016752:	f7ec fc43 	bl	8002fdc <straight_table2>
		break;
 8016756:	e168      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8016758:	4b93      	ldr	r3, [pc, #588]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 801675a:	2208      	movs	r2, #8
 801675c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801675e:	2301      	movs	r3, #1
 8016760:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016762:	2300      	movs	r3, #0
 8016764:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016766:	2300      	movs	r3, #0
 8016768:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801676a:	2300      	movs	r3, #0
 801676c:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 801676e:	68f8      	ldr	r0, [r7, #12]
 8016770:	ed9f 2a98 	vldr	s4, [pc, #608]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 8016774:	eddf 1a98 	vldr	s3, [pc, #608]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016778:	ed9f 1a97 	vldr	s2, [pc, #604]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 801677c:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 8016780:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80169c8 <mode_WallSensorTuning_fast+0x3bc>
 8016784:	f7ec fc2a 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016788:	2302      	movs	r3, #2
 801678a:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801678c:	2300      	movs	r3, #0
 801678e:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 8016790:	68f8      	ldr	r0, [r7, #12]
 8016792:	ed9f 2a90 	vldr	s4, [pc, #576]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 8016796:	eddf 1a90 	vldr	s3, [pc, #576]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 801679a:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 801679e:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 80167a2:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80169cc <mode_WallSensorTuning_fast+0x3c0>
 80167a6:	f7ec fc19 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 80167aa:	2301      	movs	r3, #1
 80167ac:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80167ae:	2300      	movs	r3, #0
 80167b0:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 80167b2:	68f8      	ldr	r0, [r7, #12]
 80167b4:	ed9f 2a87 	vldr	s4, [pc, #540]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 80167b8:	eddf 1a87 	vldr	s3, [pc, #540]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 80167bc:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80167c0:	eddf 0a85 	vldr	s1, [pc, #532]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 80167c4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80169d0 <mode_WallSensorTuning_fast+0x3c4>
 80167c8:	f7ec fc08 	bl	8002fdc <straight_table2>
		break;
 80167cc:	e12d      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 80167ce:	4b76      	ldr	r3, [pc, #472]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 80167d0:	2208      	movs	r2, #8
 80167d2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80167d4:	2300      	movs	r3, #0
 80167d6:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80167d8:	2300      	movs	r3, #0
 80167da:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80167dc:	2300      	movs	r3, #0
 80167de:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80167e0:	2300      	movs	r3, #0
 80167e2:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 80167e4:	68f8      	ldr	r0, [r7, #12]
 80167e6:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 80167ea:	eddf 1a7b 	vldr	s3, [pc, #492]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 80167ee:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 80167f2:	eddf 0a71 	vldr	s1, [pc, #452]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80167f6:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80169dc <mode_WallSensorTuning_fast+0x3d0>
 80167fa:	f7ec fbef 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 80167fe:	2303      	movs	r3, #3
 8016800:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016802:	2300      	movs	r3, #0
 8016804:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	ed9f 2a72 	vldr	s4, [pc, #456]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 801680c:	eddf 1a72 	vldr	s3, [pc, #456]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016810:	ed9f 1a71 	vldr	s2, [pc, #452]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016814:	eddf 0a70 	vldr	s1, [pc, #448]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016818:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80169e0 <mode_WallSensorTuning_fast+0x3d4>
 801681c:	f7ec fbde 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016820:	2300      	movs	r3, #0
 8016822:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016824:	2300      	movs	r3, #0
 8016826:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 801682e:	eddf 1a6a 	vldr	s3, [pc, #424]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016832:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 8016836:	eddf 0a68 	vldr	s1, [pc, #416]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 801683a:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80169e4 <mode_WallSensorTuning_fast+0x3d8>
 801683e:	f7ec fbcd 	bl	8002fdc <straight_table2>
		break;
 8016842:	e0f2      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8016844:	4b58      	ldr	r3, [pc, #352]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 8016846:	2208      	movs	r2, #8
 8016848:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 801684a:	2300      	movs	r3, #0
 801684c:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801684e:	2300      	movs	r3, #0
 8016850:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016852:	2300      	movs	r3, #0
 8016854:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016856:	2300      	movs	r3, #0
 8016858:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 801685a:	68f8      	ldr	r0, [r7, #12]
 801685c:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 8016860:	eddf 1a5d 	vldr	s3, [pc, #372]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016864:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016868:	eddf 0a53 	vldr	s1, [pc, #332]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 801686c:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80169dc <mode_WallSensorTuning_fast+0x3d0>
 8016870:	f7ec fbb4 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 8016874:	2304      	movs	r3, #4
 8016876:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016878:	2300      	movs	r3, #0
 801687a:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 801687c:	68f8      	ldr	r0, [r7, #12]
 801687e:	ed9f 2a55 	vldr	s4, [pc, #340]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 8016882:	eddf 1a55 	vldr	s3, [pc, #340]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 8016886:	ed9f 1a54 	vldr	s2, [pc, #336]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 801688a:	eddf 0a53 	vldr	s1, [pc, #332]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 801688e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80169e0 <mode_WallSensorTuning_fast+0x3d4>
 8016892:	f7ec fba3 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016896:	2300      	movs	r3, #0
 8016898:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801689a:	2300      	movs	r3, #0
 801689c:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 801689e:	68f8      	ldr	r0, [r7, #12]
 80168a0:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 80169d4 <mode_WallSensorTuning_fast+0x3c8>
 80168a4:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 80168a8:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80168ac:	eddf 0a4a 	vldr	s1, [pc, #296]	; 80169d8 <mode_WallSensorTuning_fast+0x3cc>
 80168b0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80169e4 <mode_WallSensorTuning_fast+0x3d8>
 80168b4:	f7ec fb92 	bl	8002fdc <straight_table2>
		break;
 80168b8:	e0b7      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 6://斜め直進(制御あり)
			record_mode=7;
 80168ba:	4b3b      	ldr	r3, [pc, #236]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 80168bc:	2207      	movs	r2, #7
 80168be:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80168c0:	2300      	movs	r3, #0
 80168c2:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80168c4:	68f8      	ldr	r0, [r7, #12]
 80168c6:	ed9f 2a48 	vldr	s4, [pc, #288]	; 80169e8 <mode_WallSensorTuning_fast+0x3dc>
 80168ca:	eddf 1a48 	vldr	s3, [pc, #288]	; 80169ec <mode_WallSensorTuning_fast+0x3e0>
 80168ce:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80168d2:	eddf 0a39 	vldr	s1, [pc, #228]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80168d6:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80169f0 <mode_WallSensorTuning_fast+0x3e4>
 80168da:	f7ec fb7f 	bl	8002fdc <straight_table2>
		break;
 80168de:	e0a4      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 80168e0:	4b31      	ldr	r3, [pc, #196]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 80168e2:	2209      	movs	r2, #9
 80168e4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80168e6:	2300      	movs	r3, #0
 80168e8:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80168ea:	68f8      	ldr	r0, [r7, #12]
 80168ec:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80169e8 <mode_WallSensorTuning_fast+0x3dc>
 80168f0:	eddf 1a3e 	vldr	s3, [pc, #248]	; 80169ec <mode_WallSensorTuning_fast+0x3e0>
 80168f4:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80168f8:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 80168fc:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80169f0 <mode_WallSensorTuning_fast+0x3e4>
 8016900:	f7ec fb6c 	bl	8002fdc <straight_table2>

		break;
 8016904:	e091      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016906:	4b28      	ldr	r3, [pc, #160]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 8016908:	2207      	movs	r2, #7
 801690a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801690c:	2303      	movs	r3, #3
 801690e:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	ed9f 2a35 	vldr	s4, [pc, #212]	; 80169e8 <mode_WallSensorTuning_fast+0x3dc>
 8016916:	eddf 1a37 	vldr	s3, [pc, #220]	; 80169f4 <mode_WallSensorTuning_fast+0x3e8>
 801691a:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 801691e:	eddf 0a26 	vldr	s1, [pc, #152]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 8016922:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80169f8 <mode_WallSensorTuning_fast+0x3ec>
 8016926:	f7ec fb59 	bl	8002fdc <straight_table2>
		break;
 801692a:	e07e      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 9:
			record_mode=8;
 801692c:	4b1e      	ldr	r3, [pc, #120]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 801692e:	2208      	movs	r2, #8
 8016930:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016932:	2303      	movs	r3, #3
 8016934:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 80169e8 <mode_WallSensorTuning_fast+0x3dc>
 801693c:	eddf 1a2d 	vldr	s3, [pc, #180]	; 80169f4 <mode_WallSensorTuning_fast+0x3e8>
 8016940:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 8016944:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 8016948:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80169fc <mode_WallSensorTuning_fast+0x3f0>
 801694c:	f7ec fb46 	bl	8002fdc <straight_table2>
		break;
 8016950:	e06b      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 10:
			record_mode=10;
 8016952:	4b15      	ldr	r3, [pc, #84]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 8016954:	220a      	movs	r2, #10
 8016956:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016958:	2303      	movs	r3, #3
 801695a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 801695c:	68f8      	ldr	r0, [r7, #12]
 801695e:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80169e8 <mode_WallSensorTuning_fast+0x3dc>
 8016962:	eddf 1a24 	vldr	s3, [pc, #144]	; 80169f4 <mode_WallSensorTuning_fast+0x3e8>
 8016966:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 801696a:	eddf 0a13 	vldr	s1, [pc, #76]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 801696e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80169f8 <mode_WallSensorTuning_fast+0x3ec>
 8016972:	f7ec fb33 	bl	8002fdc <straight_table2>
		break;
 8016976:	e058      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
		case 11:
			record_mode=11;
 8016978:	4b0b      	ldr	r3, [pc, #44]	; (80169a8 <mode_WallSensorTuning_fast+0x39c>)
 801697a:	220b      	movs	r2, #11
 801697c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801697e:	2303      	movs	r3, #3
 8016980:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016982:	68f8      	ldr	r0, [r7, #12]
 8016984:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 80169c0 <mode_WallSensorTuning_fast+0x3b4>
 8016988:	eddf 1a1d 	vldr	s3, [pc, #116]	; 8016a00 <mode_WallSensorTuning_fast+0x3f4>
 801698c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 8016990:	eddf 0a09 	vldr	s1, [pc, #36]	; 80169b8 <mode_WallSensorTuning_fast+0x3ac>
 8016994:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80169f8 <mode_WallSensorTuning_fast+0x3ec>
 8016998:	f7ec fb20 	bl	8002fdc <straight_table2>
		break;
 801699c:	e045      	b.n	8016a2a <mode_WallSensorTuning_fast+0x41e>
 801699e:	bf00      	nop
 80169a0:	3f7d70a4 	.word	0x3f7d70a4
 80169a4:	20000264 	.word	0x20000264
 80169a8:	2000edc0 	.word	0x2000edc0
 80169ac:	20000808 	.word	0x20000808
 80169b0:	46bb8000 	.word	0x46bb8000
 80169b4:	459c4000 	.word	0x459c4000
 80169b8:	00000000 	.word	0x00000000
 80169bc:	44e39000 	.word	0x44e39000
 80169c0:	466a6000 	.word	0x466a6000
 80169c4:	44160000 	.word	0x44160000
 80169c8:	42cd0000 	.word	0x42cd0000
 80169cc:	41b40000 	.word	0x41b40000
 80169d0:	42e10000 	.word	0x42e10000
 80169d4:	461c4000 	.word	0x461c4000
 80169d8:	447a0000 	.word	0x447a0000
 80169dc:	4321c77b 	.word	0x4321c77b
 80169e0:	41fe8ef6 	.word	0x41fe8ef6
 80169e4:	42beeb39 	.word	0x42beeb39
 80169e8:	469c4000 	.word	0x469c4000
 80169ec:	44fa0000 	.word	0x44fa0000
 80169f0:	445ebd17 	.word	0x445ebd17
 80169f4:	455ac000 	.word	0x455ac000
 80169f8:	443eeb39 	.word	0x443eeb39
 80169fc:	4484977b 	.word	0x4484977b
 8016a00:	453b8000 	.word	0x453b8000
		case 12:
			record_mode=12;
 8016a04:	4b26      	ldr	r3, [pc, #152]	; (8016aa0 <mode_WallSensorTuning_fast+0x494>)
 8016a06:	220c      	movs	r2, #12
 8016a08:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016a0a:	2303      	movs	r3, #3
 8016a0c:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016a0e:	68f8      	ldr	r0, [r7, #12]
 8016a10:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8016aa4 <mode_WallSensorTuning_fast+0x498>
 8016a14:	eddf 1a24 	vldr	s3, [pc, #144]	; 8016aa8 <mode_WallSensorTuning_fast+0x49c>
 8016a18:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016aac <mode_WallSensorTuning_fast+0x4a0>
 8016a1c:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016aac <mode_WallSensorTuning_fast+0x4a0>
 8016a20:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016ab0 <mode_WallSensorTuning_fast+0x4a4>
 8016a24:	f7ec fada 	bl	8002fdc <straight_table2>
		break;
 8016a28:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8016a2a:	4b1d      	ldr	r3, [pc, #116]	; (8016aa0 <mode_WallSensorTuning_fast+0x494>)
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016a30:	2003      	movs	r0, #3
 8016a32:	f7f0 ff37 	bl	80078a4 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016a36:	2003      	movs	r0, #3
 8016a38:	f7f0 ff0c 	bl	8007854 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016a40:	f7f1 fa2e 	bl	8007ea0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016a44:	f7f0 ff90 	bl	8007968 <pl_FunMotor_stop>
	record_mode=0;
 8016a48:	4b15      	ldr	r3, [pc, #84]	; (8016aa0 <mode_WallSensorTuning_fast+0x494>)
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016a4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016a52:	f7f1 fa25 	bl	8007ea0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016a56:	2000      	movs	r0, #0
 8016a58:	f7f0 fef2 	bl	8007840 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016a5c:	e002      	b.n	8016a64 <mode_WallSensorTuning_fast+0x458>
		HAL_Delay(1);
 8016a5e:	2001      	movs	r0, #1
 8016a60:	f001 fee2 	bl	8018828 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016a64:	4b13      	ldr	r3, [pc, #76]	; (8016ab4 <mode_WallSensorTuning_fast+0x4a8>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a6c:	ddf7      	ble.n	8016a5e <mode_WallSensorTuning_fast+0x452>
 8016a6e:	4b11      	ldr	r3, [pc, #68]	; (8016ab4 <mode_WallSensorTuning_fast+0x4a8>)
 8016a70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016a74:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a78:	ddf1      	ble.n	8016a5e <mode_WallSensorTuning_fast+0x452>
 8016a7a:	4b0e      	ldr	r3, [pc, #56]	; (8016ab4 <mode_WallSensorTuning_fast+0x4a8>)
 8016a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016a80:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a84:	ddeb      	ble.n	8016a5e <mode_WallSensorTuning_fast+0x452>
	}
	pl_r_blue_LED(ON);
 8016a86:	2001      	movs	r0, #1
 8016a88:	f7f0 fa36 	bl	8006ef8 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016a8c:	2001      	movs	r0, #1
 8016a8e:	f7f0 fa45 	bl	8006f1c <pl_l_blue_LED>
	record_print();
 8016a92:	f000 f86d 	bl	8016b70 <record_print>



}
 8016a96:	bf00      	nop
 8016a98:	3710      	adds	r7, #16
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	2000edc0 	.word	0x2000edc0
 8016aa4:	466a6000 	.word	0x466a6000
 8016aa8:	453b8000 	.word	0x453b8000
 8016aac:	00000000 	.word	0x00000000
 8016ab0:	443eeb39 	.word	0x443eeb39
 8016ab4:	200002b8 	.word	0x200002b8

08016ab8 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016ab8:	b480      	push	{r7}
 8016aba:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016abc:	4b06      	ldr	r3, [pc, #24]	; (8016ad8 <record_reset+0x20>)
 8016abe:	2200      	movs	r2, #0
 8016ac0:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8016ac2:	4b06      	ldr	r3, [pc, #24]	; (8016adc <record_reset+0x24>)
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016ac8:	4b05      	ldr	r3, [pc, #20]	; (8016ae0 <record_reset+0x28>)
 8016aca:	2200      	movs	r2, #0
 8016acc:	701a      	strb	r2, [r3, #0]
}
 8016ace:	bf00      	nop
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr
 8016ad8:	2000edc0 	.word	0x2000edc0
 8016adc:	2000edc4 	.word	0x2000edc4
 8016ae0:	2000edcc 	.word	0x2000edcc

08016ae4 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8016ae4:	b490      	push	{r4, r7}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8016aee:	2300      	movs	r3, #0
 8016af0:	60fb      	str	r3, [r7, #12]
 8016af2:	e013      	b.n	8016b1c <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	009b      	lsls	r3, r3, #2
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016afc:	4b18      	ldr	r3, [pc, #96]	; (8016b60 <record_data+0x7c>)
 8016afe:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016b00:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016b02:	4818      	ldr	r0, [pc, #96]	; (8016b64 <record_data+0x80>)
 8016b04:	68f9      	ldr	r1, [r7, #12]
 8016b06:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8016b0a:	fb04 f101 	mul.w	r1, r4, r1
 8016b0e:	440b      	add	r3, r1
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	4403      	add	r3, r0
 8016b14:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	3301      	adds	r3, #1
 8016b1a:	60fb      	str	r3, [r7, #12]
 8016b1c:	68fa      	ldr	r2, [r7, #12]
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	dbe7      	blt.n	8016af4 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016b24:	4b10      	ldr	r3, [pc, #64]	; (8016b68 <record_data+0x84>)
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	2b01      	cmp	r3, #1
 8016b2a:	d103      	bne.n	8016b34 <record_data+0x50>
		record_end_point = record_time;
 8016b2c:	4b0c      	ldr	r3, [pc, #48]	; (8016b60 <record_data+0x7c>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	4a0e      	ldr	r2, [pc, #56]	; (8016b6c <record_data+0x88>)
 8016b32:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016b34:	4b0a      	ldr	r3, [pc, #40]	; (8016b60 <record_data+0x7c>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	3301      	adds	r3, #1
 8016b3a:	4a09      	ldr	r2, [pc, #36]	; (8016b60 <record_data+0x7c>)
 8016b3c:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8016b3e:	4b08      	ldr	r3, [pc, #32]	; (8016b60 <record_data+0x7c>)
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016b46:	4293      	cmp	r3, r2
 8016b48:	dd05      	ble.n	8016b56 <record_data+0x72>
		record_time = 0;
 8016b4a:	4b05      	ldr	r3, [pc, #20]	; (8016b60 <record_data+0x7c>)
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016b50:	4b05      	ldr	r3, [pc, #20]	; (8016b68 <record_data+0x84>)
 8016b52:	2201      	movs	r2, #1
 8016b54:	701a      	strb	r2, [r3, #0]
	}

}
 8016b56:	bf00      	nop
 8016b58:	3710      	adds	r7, #16
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bc90      	pop	{r4, r7}
 8016b5e:	4770      	bx	lr
 8016b60:	2000edc4 	.word	0x2000edc4
 8016b64:	20003240 	.word	0x20003240
 8016b68:	2000edcc 	.word	0x2000edcc
 8016b6c:	2000edc8 	.word	0x2000edc8

08016b70 <record_print>:

void record_print(void) {
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b084      	sub	sp, #16
 8016b74:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016b76:	4b3a      	ldr	r3, [pc, #232]	; (8016c60 <record_print+0xf0>)
 8016b78:	781b      	ldrb	r3, [r3, #0]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d12e      	bne.n	8016bdc <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016b7e:	2300      	movs	r3, #0
 8016b80:	60fb      	str	r3, [r7, #12]
 8016b82:	e025      	b.n	8016bd0 <record_print+0x60>

			printf("%d", a);
 8016b84:	68f9      	ldr	r1, [r7, #12]
 8016b86:	4837      	ldr	r0, [pc, #220]	; (8016c64 <record_print+0xf4>)
 8016b88:	f009 fda0 	bl	80206cc <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	607b      	str	r3, [r7, #4]
 8016b90:	e015      	b.n	8016bbe <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8016b92:	4935      	ldr	r1, [pc, #212]	; (8016c68 <record_print+0xf8>)
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016b9a:	fb03 f202 	mul.w	r2, r3, r2
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	4413      	add	r3, r2
 8016ba2:	009b      	lsls	r3, r3, #2
 8016ba4:	440b      	add	r3, r1
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7e9 fcf5 	bl	8000598 <__aeabi_f2d>
 8016bae:	4602      	mov	r2, r0
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	482e      	ldr	r0, [pc, #184]	; (8016c6c <record_print+0xfc>)
 8016bb4:	f009 fd8a 	bl	80206cc <iprintf>
					record_count++) {
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	3301      	adds	r3, #1
 8016bbc:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2b03      	cmp	r3, #3
 8016bc2:	dde6      	ble.n	8016b92 <record_print+0x22>
			}
			printf("\n");
 8016bc4:	200a      	movs	r0, #10
 8016bc6:	f009 fd99 	bl	80206fc <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	3301      	adds	r3, #1
 8016bce:	60fb      	str	r3, [r7, #12]
 8016bd0:	4b27      	ldr	r3, [pc, #156]	; (8016c70 <record_print+0x100>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	68fa      	ldr	r2, [r7, #12]
 8016bd6:	429a      	cmp	r2, r3
 8016bd8:	dbd4      	blt.n	8016b84 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016bda:	e03c      	b.n	8016c56 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016bdc:	2300      	movs	r3, #0
 8016bde:	60fb      	str	r3, [r7, #12]
 8016be0:	e034      	b.n	8016c4c <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8016be2:	4b24      	ldr	r3, [pc, #144]	; (8016c74 <record_print+0x104>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	3301      	adds	r3, #1
 8016be8:	68fa      	ldr	r2, [r7, #12]
 8016bea:	4413      	add	r3, r2
 8016bec:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016bf4:	4293      	cmp	r3, r2
 8016bf6:	dd03      	ble.n	8016c00 <record_print+0x90>
				time_index -= max_record_time;
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016bfe:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016c00:	68f9      	ldr	r1, [r7, #12]
 8016c02:	4818      	ldr	r0, [pc, #96]	; (8016c64 <record_print+0xf4>)
 8016c04:	f009 fd62 	bl	80206cc <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	603b      	str	r3, [r7, #0]
 8016c0c:	e015      	b.n	8016c3a <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016c0e:	4916      	ldr	r1, [pc, #88]	; (8016c68 <record_print+0xf8>)
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016c16:	fb03 f202 	mul.w	r2, r3, r2
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	4413      	add	r3, r2
 8016c1e:	009b      	lsls	r3, r3, #2
 8016c20:	440b      	add	r3, r1
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7e9 fcb7 	bl	8000598 <__aeabi_f2d>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	480f      	ldr	r0, [pc, #60]	; (8016c6c <record_print+0xfc>)
 8016c30:	f009 fd4c 	bl	80206cc <iprintf>
					record_count++) {
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	3301      	adds	r3, #1
 8016c38:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	2b03      	cmp	r3, #3
 8016c3e:	dde6      	ble.n	8016c0e <record_print+0x9e>
			printf("\n");
 8016c40:	200a      	movs	r0, #10
 8016c42:	f009 fd5b 	bl	80206fc <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	3301      	adds	r3, #1
 8016c4a:	60fb      	str	r3, [r7, #12]
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016c52:	4293      	cmp	r3, r2
 8016c54:	ddc5      	ble.n	8016be2 <record_print+0x72>
}
 8016c56:	bf00      	nop
 8016c58:	3710      	adds	r7, #16
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	2000edcc 	.word	0x2000edcc
 8016c64:	080231e0 	.word	0x080231e0
 8016c68:	20003240 	.word	0x20003240
 8016c6c:	080231e4 	.word	0x080231e4
 8016c70:	2000edc4 	.word	0x2000edc4
 8016c74:	2000edc8 	.word	0x2000edc8

08016c78 <interrupt_record>:

void interrupt_record(void) {
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016c7e:	4baf      	ldr	r3, [pc, #700]	; (8016f3c <interrupt_record+0x2c4>)
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d110      	bne.n	8016ca8 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016c86:	4bae      	ldr	r3, [pc, #696]	; (8016f40 <interrupt_record+0x2c8>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016c8c:	4bad      	ldr	r3, [pc, #692]	; (8016f44 <interrupt_record+0x2cc>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016c92:	4bad      	ldr	r3, [pc, #692]	; (8016f48 <interrupt_record+0x2d0>)
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016c98:	4bac      	ldr	r3, [pc, #688]	; (8016f4c <interrupt_record+0x2d4>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016c9e:	463b      	mov	r3, r7
 8016ca0:	2104      	movs	r1, #4
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7ff ff1e 	bl	8016ae4 <record_data>
		}
	if (record_mode == 2) {
 8016ca8:	4ba4      	ldr	r3, [pc, #656]	; (8016f3c <interrupt_record+0x2c4>)
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b02      	cmp	r3, #2
 8016cae:	d11b      	bne.n	8016ce8 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016cb0:	4ba7      	ldr	r3, [pc, #668]	; (8016f50 <interrupt_record+0x2d8>)
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016cb6:	4ba7      	ldr	r3, [pc, #668]	; (8016f54 <interrupt_record+0x2dc>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016cbc:	4ba6      	ldr	r3, [pc, #664]	; (8016f58 <interrupt_record+0x2e0>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8016cc2:	4ba6      	ldr	r3, [pc, #664]	; (8016f5c <interrupt_record+0x2e4>)
 8016cc4:	ed93 7a00 	vldr	s14, [r3]
 8016cc8:	4ba5      	ldr	r3, [pc, #660]	; (8016f60 <interrupt_record+0x2e8>)
 8016cca:	edd3 7a00 	vldr	s15, [r3]
 8016cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016cd2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016cda:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016cde:	463b      	mov	r3, r7
 8016ce0:	2104      	movs	r1, #4
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7ff fefe 	bl	8016ae4 <record_data>
		}
	if (record_mode == 3) {
 8016ce8:	4b94      	ldr	r3, [pc, #592]	; (8016f3c <interrupt_record+0x2c4>)
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	2b03      	cmp	r3, #3
 8016cee:	d126      	bne.n	8016d3e <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016cf0:	4b99      	ldr	r3, [pc, #612]	; (8016f58 <interrupt_record+0x2e0>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8016cf6:	4b98      	ldr	r3, [pc, #608]	; (8016f58 <interrupt_record+0x2e0>)
 8016cf8:	689b      	ldr	r3, [r3, #8]
 8016cfa:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016cfc:	4b97      	ldr	r3, [pc, #604]	; (8016f5c <interrupt_record+0x2e4>)
 8016cfe:	ed93 7a00 	vldr	s14, [r3]
 8016d02:	4b97      	ldr	r3, [pc, #604]	; (8016f60 <interrupt_record+0x2e8>)
 8016d04:	edd3 7a00 	vldr	s15, [r3]
 8016d08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d14:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016d18:	4b92      	ldr	r3, [pc, #584]	; (8016f64 <interrupt_record+0x2ec>)
 8016d1a:	ed93 7a00 	vldr	s14, [r3]
 8016d1e:	4b92      	ldr	r3, [pc, #584]	; (8016f68 <interrupt_record+0x2f0>)
 8016d20:	edd3 7a00 	vldr	s15, [r3]
 8016d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d30:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016d34:	463b      	mov	r3, r7
 8016d36:	2104      	movs	r1, #4
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7ff fed3 	bl	8016ae4 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8016d3e:	4b7f      	ldr	r3, [pc, #508]	; (8016f3c <interrupt_record+0x2c4>)
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	2b04      	cmp	r3, #4
 8016d44:	d126      	bne.n	8016d94 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8016d46:	4b84      	ldr	r3, [pc, #528]	; (8016f58 <interrupt_record+0x2e0>)
 8016d48:	689b      	ldr	r3, [r3, #8]
 8016d4a:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8016d4c:	4b7e      	ldr	r3, [pc, #504]	; (8016f48 <interrupt_record+0x2d0>)
 8016d4e:	ed93 7a00 	vldr	s14, [r3]
 8016d52:	4b7e      	ldr	r3, [pc, #504]	; (8016f4c <interrupt_record+0x2d4>)
 8016d54:	edd3 7a00 	vldr	s15, [r3]
 8016d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d64:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016d68:	4b80      	ldr	r3, [pc, #512]	; (8016f6c <interrupt_record+0x2f4>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016d6e:	4b7d      	ldr	r3, [pc, #500]	; (8016f64 <interrupt_record+0x2ec>)
 8016d70:	ed93 7a00 	vldr	s14, [r3]
 8016d74:	4b7c      	ldr	r3, [pc, #496]	; (8016f68 <interrupt_record+0x2f0>)
 8016d76:	edd3 7a00 	vldr	s15, [r3]
 8016d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d86:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016d8a:	463b      	mov	r3, r7
 8016d8c:	2104      	movs	r1, #4
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7ff fea8 	bl	8016ae4 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016d94:	4b69      	ldr	r3, [pc, #420]	; (8016f3c <interrupt_record+0x2c4>)
 8016d96:	781b      	ldrb	r3, [r3, #0]
 8016d98:	2b05      	cmp	r3, #5
 8016d9a:	d110      	bne.n	8016dbe <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8016d9c:	4b6e      	ldr	r3, [pc, #440]	; (8016f58 <interrupt_record+0x2e0>)
 8016d9e:	689b      	ldr	r3, [r3, #8]
 8016da0:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016da2:	4b69      	ldr	r3, [pc, #420]	; (8016f48 <interrupt_record+0x2d0>)
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016da8:	4b68      	ldr	r3, [pc, #416]	; (8016f4c <interrupt_record+0x2d4>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016dae:	4b6f      	ldr	r3, [pc, #444]	; (8016f6c <interrupt_record+0x2f4>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016db4:	463b      	mov	r3, r7
 8016db6:	2104      	movs	r1, #4
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7ff fe93 	bl	8016ae4 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016dbe:	4b5f      	ldr	r3, [pc, #380]	; (8016f3c <interrupt_record+0x2c4>)
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	2b05      	cmp	r3, #5
 8016dc4:	d110      	bne.n	8016de8 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8016dc6:	4b6a      	ldr	r3, [pc, #424]	; (8016f70 <interrupt_record+0x2f8>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016dcc:	4b5e      	ldr	r3, [pc, #376]	; (8016f48 <interrupt_record+0x2d0>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016dd2:	4b5e      	ldr	r3, [pc, #376]	; (8016f4c <interrupt_record+0x2d4>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016dd8:	4b64      	ldr	r3, [pc, #400]	; (8016f6c <interrupt_record+0x2f4>)
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016dde:	463b      	mov	r3, r7
 8016de0:	2104      	movs	r1, #4
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7ff fe7e 	bl	8016ae4 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8016de8:	4b54      	ldr	r3, [pc, #336]	; (8016f3c <interrupt_record+0x2c4>)
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	2b06      	cmp	r3, #6
 8016dee:	d110      	bne.n	8016e12 <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8016df0:	4b59      	ldr	r3, [pc, #356]	; (8016f58 <interrupt_record+0x2e0>)
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 8016df6:	4b5f      	ldr	r3, [pc, #380]	; (8016f74 <interrupt_record+0x2fc>)
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8016dfc:	4b5e      	ldr	r3, [pc, #376]	; (8016f78 <interrupt_record+0x300>)
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8016e02:	4b5e      	ldr	r3, [pc, #376]	; (8016f7c <interrupt_record+0x304>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016e08:	463b      	mov	r3, r7
 8016e0a:	2104      	movs	r1, #4
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ff fe69 	bl	8016ae4 <record_data>
			}
	if (record_mode == 7) {
 8016e12:	4b4a      	ldr	r3, [pc, #296]	; (8016f3c <interrupt_record+0x2c4>)
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	2b07      	cmp	r3, #7
 8016e18:	d125      	bne.n	8016e66 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8016e1a:	4b59      	ldr	r3, [pc, #356]	; (8016f80 <interrupt_record+0x308>)
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	ee07 3a90 	vmov	s15, r3
 8016e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e26:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 8016e2a:	4b56      	ldr	r3, [pc, #344]	; (8016f84 <interrupt_record+0x30c>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	ee07 3a90 	vmov	s15, r3
 8016e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e36:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8016e3a:	4b51      	ldr	r3, [pc, #324]	; (8016f80 <interrupt_record+0x308>)
 8016e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016e40:	ee07 3a90 	vmov	s15, r3
 8016e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e48:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8016e4c:	4b4d      	ldr	r3, [pc, #308]	; (8016f84 <interrupt_record+0x30c>)
 8016e4e:	691b      	ldr	r3, [r3, #16]
 8016e50:	ee07 3a90 	vmov	s15, r3
 8016e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e58:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016e5c:	463b      	mov	r3, r7
 8016e5e:	2104      	movs	r1, #4
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7ff fe3f 	bl	8016ae4 <record_data>
		}
	if (record_mode == 8) {
 8016e66:	4b35      	ldr	r3, [pc, #212]	; (8016f3c <interrupt_record+0x2c4>)
 8016e68:	781b      	ldrb	r3, [r3, #0]
 8016e6a:	2b08      	cmp	r3, #8
 8016e6c:	d125      	bne.n	8016eba <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016e6e:	4b44      	ldr	r3, [pc, #272]	; (8016f80 <interrupt_record+0x308>)
 8016e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e72:	ee07 3a90 	vmov	s15, r3
 8016e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e7a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8016e7e:	4b42      	ldr	r3, [pc, #264]	; (8016f88 <interrupt_record+0x310>)
 8016e80:	685b      	ldr	r3, [r3, #4]
 8016e82:	ee07 3a90 	vmov	s15, r3
 8016e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e8a:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016e8e:	4b3c      	ldr	r3, [pc, #240]	; (8016f80 <interrupt_record+0x308>)
 8016e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016e94:	ee07 3a90 	vmov	s15, r3
 8016e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e9c:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8016ea0:	4b39      	ldr	r3, [pc, #228]	; (8016f88 <interrupt_record+0x310>)
 8016ea2:	68db      	ldr	r3, [r3, #12]
 8016ea4:	ee07 3a90 	vmov	s15, r3
 8016ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eac:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016eb0:	463b      	mov	r3, r7
 8016eb2:	2104      	movs	r1, #4
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7ff fe15 	bl	8016ae4 <record_data>
		}
	if (record_mode == 9) { //90
 8016eba:	4b20      	ldr	r3, [pc, #128]	; (8016f3c <interrupt_record+0x2c4>)
 8016ebc:	781b      	ldrb	r3, [r3, #0]
 8016ebe:	2b09      	cmp	r3, #9
 8016ec0:	d11b      	bne.n	8016efa <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8016ec2:	4b2f      	ldr	r3, [pc, #188]	; (8016f80 <interrupt_record+0x308>)
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	ee07 3a90 	vmov	s15, r3
 8016eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ece:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8016ed2:	4b2b      	ldr	r3, [pc, #172]	; (8016f80 <interrupt_record+0x308>)
 8016ed4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016ed8:	ee07 3a90 	vmov	s15, r3
 8016edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ee0:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016ee4:	4b29      	ldr	r3, [pc, #164]	; (8016f8c <interrupt_record+0x314>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8016eea:	4b29      	ldr	r3, [pc, #164]	; (8016f90 <interrupt_record+0x318>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016ef0:	463b      	mov	r3, r7
 8016ef2:	2104      	movs	r1, #4
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f7ff fdf5 	bl	8016ae4 <record_data>
		}
	if (record_mode == 10) { //90
 8016efa:	4b10      	ldr	r3, [pc, #64]	; (8016f3c <interrupt_record+0x2c4>)
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	2b0a      	cmp	r3, #10
 8016f00:	d148      	bne.n	8016f94 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016f02:	4b1f      	ldr	r3, [pc, #124]	; (8016f80 <interrupt_record+0x308>)
 8016f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f06:	ee07 3a90 	vmov	s15, r3
 8016f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f0e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016f12:	4b1b      	ldr	r3, [pc, #108]	; (8016f80 <interrupt_record+0x308>)
 8016f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016f18:	ee07 3a90 	vmov	s15, r3
 8016f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f20:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016f24:	4b19      	ldr	r3, [pc, #100]	; (8016f8c <interrupt_record+0x314>)
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8016f2a:	4b19      	ldr	r3, [pc, #100]	; (8016f90 <interrupt_record+0x318>)
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016f30:	463b      	mov	r3, r7
 8016f32:	2104      	movs	r1, #4
 8016f34:	4618      	mov	r0, r3
 8016f36:	f7ff fdd5 	bl	8016ae4 <record_data>
 8016f3a:	e02b      	b.n	8016f94 <interrupt_record+0x31c>
 8016f3c:	2000edc0 	.word	0x2000edc0
 8016f40:	2000022c 	.word	0x2000022c
 8016f44:	20000228 	.word	0x20000228
 8016f48:	20000224 	.word	0x20000224
 8016f4c:	20000220 	.word	0x20000220
 8016f50:	200004e4 	.word	0x200004e4
 8016f54:	20000268 	.word	0x20000268
 8016f58:	200004d8 	.word	0x200004d8
 8016f5c:	2000025c 	.word	0x2000025c
 8016f60:	20000258 	.word	0x20000258
 8016f64:	20000254 	.word	0x20000254
 8016f68:	20000250 	.word	0x20000250
 8016f6c:	2000027c 	.word	0x2000027c
 8016f70:	2000052c 	.word	0x2000052c
 8016f74:	20000238 	.word	0x20000238
 8016f78:	2000023c 	.word	0x2000023c
 8016f7c:	20000278 	.word	0x20000278
 8016f80:	200002b8 	.word	0x200002b8
 8016f84:	20000448 	.word	0x20000448
 8016f88:	2000045c 	.word	0x2000045c
 8016f8c:	200005e0 	.word	0x200005e0
 8016f90:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8016f94:	bf00      	nop
 8016f96:	3710      	adds	r7, #16
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8016fa0:	4b1b      	ldr	r3, [pc, #108]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fa2:	4a1c      	ldr	r2, [pc, #112]	; (8017014 <MX_SPI1_Init+0x78>)
 8016fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8016fa6:	4b1a      	ldr	r3, [pc, #104]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8016fae:	4b18      	ldr	r3, [pc, #96]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8016fb4:	4b16      	ldr	r3, [pc, #88]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016fba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016fbc:	4b14      	ldr	r3, [pc, #80]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016fc2:	4b13      	ldr	r3, [pc, #76]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8016fc8:	4b11      	ldr	r3, [pc, #68]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016fce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016fd0:	4b0f      	ldr	r3, [pc, #60]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fd2:	2210      	movs	r2, #16
 8016fd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016fd6:	4b0e      	ldr	r3, [pc, #56]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fd8:	2200      	movs	r2, #0
 8016fda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8016fdc:	4b0c      	ldr	r3, [pc, #48]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fde:	2200      	movs	r2, #0
 8016fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016fe2:	4b0b      	ldr	r3, [pc, #44]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8016fe8:	4b09      	ldr	r3, [pc, #36]	; (8017010 <MX_SPI1_Init+0x74>)
 8016fea:	2207      	movs	r2, #7
 8016fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016fee:	4b08      	ldr	r3, [pc, #32]	; (8017010 <MX_SPI1_Init+0x74>)
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8016ff4:	4b06      	ldr	r3, [pc, #24]	; (8017010 <MX_SPI1_Init+0x74>)
 8016ff6:	2208      	movs	r2, #8
 8016ff8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8016ffa:	4805      	ldr	r0, [pc, #20]	; (8017010 <MX_SPI1_Init+0x74>)
 8016ffc:	f005 fe08 	bl	801cc10 <HAL_SPI_Init>
 8017000:	4603      	mov	r3, r0
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8017006:	f7f2 fea0 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801700a:	bf00      	nop
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	2000edd0 	.word	0x2000edd0
 8017014:	40013000 	.word	0x40013000

08017018 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 801701c:	4b1b      	ldr	r3, [pc, #108]	; (801708c <MX_SPI3_Init+0x74>)
 801701e:	4a1c      	ldr	r2, [pc, #112]	; (8017090 <MX_SPI3_Init+0x78>)
 8017020:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017022:	4b1a      	ldr	r3, [pc, #104]	; (801708c <MX_SPI3_Init+0x74>)
 8017024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017028:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801702a:	4b18      	ldr	r3, [pc, #96]	; (801708c <MX_SPI3_Init+0x74>)
 801702c:	2200      	movs	r2, #0
 801702e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8017030:	4b16      	ldr	r3, [pc, #88]	; (801708c <MX_SPI3_Init+0x74>)
 8017032:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017036:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017038:	4b14      	ldr	r3, [pc, #80]	; (801708c <MX_SPI3_Init+0x74>)
 801703a:	2200      	movs	r2, #0
 801703c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801703e:	4b13      	ldr	r3, [pc, #76]	; (801708c <MX_SPI3_Init+0x74>)
 8017040:	2201      	movs	r2, #1
 8017042:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017044:	4b11      	ldr	r3, [pc, #68]	; (801708c <MX_SPI3_Init+0x74>)
 8017046:	f44f 7200 	mov.w	r2, #512	; 0x200
 801704a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801704c:	4b0f      	ldr	r3, [pc, #60]	; (801708c <MX_SPI3_Init+0x74>)
 801704e:	2208      	movs	r2, #8
 8017050:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017052:	4b0e      	ldr	r3, [pc, #56]	; (801708c <MX_SPI3_Init+0x74>)
 8017054:	2200      	movs	r2, #0
 8017056:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017058:	4b0c      	ldr	r3, [pc, #48]	; (801708c <MX_SPI3_Init+0x74>)
 801705a:	2200      	movs	r2, #0
 801705c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801705e:	4b0b      	ldr	r3, [pc, #44]	; (801708c <MX_SPI3_Init+0x74>)
 8017060:	2200      	movs	r2, #0
 8017062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8017064:	4b09      	ldr	r3, [pc, #36]	; (801708c <MX_SPI3_Init+0x74>)
 8017066:	2207      	movs	r2, #7
 8017068:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801706a:	4b08      	ldr	r3, [pc, #32]	; (801708c <MX_SPI3_Init+0x74>)
 801706c:	2200      	movs	r2, #0
 801706e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8017070:	4b06      	ldr	r3, [pc, #24]	; (801708c <MX_SPI3_Init+0x74>)
 8017072:	2200      	movs	r2, #0
 8017074:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017076:	4805      	ldr	r0, [pc, #20]	; (801708c <MX_SPI3_Init+0x74>)
 8017078:	f005 fdca 	bl	801cc10 <HAL_SPI_Init>
 801707c:	4603      	mov	r3, r0
 801707e:	2b00      	cmp	r3, #0
 8017080:	d001      	beq.n	8017086 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8017082:	f7f2 fe62 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017086:	bf00      	nop
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	2000ee34 	.word	0x2000ee34
 8017090:	40003c00 	.word	0x40003c00

08017094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b08c      	sub	sp, #48	; 0x30
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801709c:	f107 031c 	add.w	r3, r7, #28
 80170a0:	2200      	movs	r2, #0
 80170a2:	601a      	str	r2, [r3, #0]
 80170a4:	605a      	str	r2, [r3, #4]
 80170a6:	609a      	str	r2, [r3, #8]
 80170a8:	60da      	str	r2, [r3, #12]
 80170aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	4a3d      	ldr	r2, [pc, #244]	; (80171a8 <HAL_SPI_MspInit+0x114>)
 80170b2:	4293      	cmp	r3, r2
 80170b4:	d129      	bne.n	801710a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80170b6:	4b3d      	ldr	r3, [pc, #244]	; (80171ac <HAL_SPI_MspInit+0x118>)
 80170b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80170ba:	4a3c      	ldr	r2, [pc, #240]	; (80171ac <HAL_SPI_MspInit+0x118>)
 80170bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80170c0:	6613      	str	r3, [r2, #96]	; 0x60
 80170c2:	4b3a      	ldr	r3, [pc, #232]	; (80171ac <HAL_SPI_MspInit+0x118>)
 80170c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80170c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80170ca:	61bb      	str	r3, [r7, #24]
 80170cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80170ce:	4b37      	ldr	r3, [pc, #220]	; (80171ac <HAL_SPI_MspInit+0x118>)
 80170d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170d2:	4a36      	ldr	r2, [pc, #216]	; (80171ac <HAL_SPI_MspInit+0x118>)
 80170d4:	f043 0301 	orr.w	r3, r3, #1
 80170d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80170da:	4b34      	ldr	r3, [pc, #208]	; (80171ac <HAL_SPI_MspInit+0x118>)
 80170dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170de:	f003 0301 	and.w	r3, r3, #1
 80170e2:	617b      	str	r3, [r7, #20]
 80170e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80170e6:	23e0      	movs	r3, #224	; 0xe0
 80170e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80170ea:	2302      	movs	r3, #2
 80170ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170ee:	2300      	movs	r3, #0
 80170f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80170f2:	2300      	movs	r3, #0
 80170f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80170f6:	2305      	movs	r3, #5
 80170f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80170fa:	f107 031c 	add.w	r3, r7, #28
 80170fe:	4619      	mov	r1, r3
 8017100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017104:	f004 fbca 	bl	801b89c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8017108:	e049      	b.n	801719e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	4a28      	ldr	r2, [pc, #160]	; (80171b0 <HAL_SPI_MspInit+0x11c>)
 8017110:	4293      	cmp	r3, r2
 8017112:	d144      	bne.n	801719e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017114:	4b25      	ldr	r3, [pc, #148]	; (80171ac <HAL_SPI_MspInit+0x118>)
 8017116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017118:	4a24      	ldr	r2, [pc, #144]	; (80171ac <HAL_SPI_MspInit+0x118>)
 801711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801711e:	6593      	str	r3, [r2, #88]	; 0x58
 8017120:	4b22      	ldr	r3, [pc, #136]	; (80171ac <HAL_SPI_MspInit+0x118>)
 8017122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017128:	613b      	str	r3, [r7, #16]
 801712a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801712c:	4b1f      	ldr	r3, [pc, #124]	; (80171ac <HAL_SPI_MspInit+0x118>)
 801712e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017130:	4a1e      	ldr	r2, [pc, #120]	; (80171ac <HAL_SPI_MspInit+0x118>)
 8017132:	f043 0304 	orr.w	r3, r3, #4
 8017136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017138:	4b1c      	ldr	r3, [pc, #112]	; (80171ac <HAL_SPI_MspInit+0x118>)
 801713a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801713c:	f003 0304 	and.w	r3, r3, #4
 8017140:	60fb      	str	r3, [r7, #12]
 8017142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017144:	4b19      	ldr	r3, [pc, #100]	; (80171ac <HAL_SPI_MspInit+0x118>)
 8017146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017148:	4a18      	ldr	r2, [pc, #96]	; (80171ac <HAL_SPI_MspInit+0x118>)
 801714a:	f043 0302 	orr.w	r3, r3, #2
 801714e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017150:	4b16      	ldr	r3, [pc, #88]	; (80171ac <HAL_SPI_MspInit+0x118>)
 8017152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017154:	f003 0302 	and.w	r3, r3, #2
 8017158:	60bb      	str	r3, [r7, #8]
 801715a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801715c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017162:	2302      	movs	r3, #2
 8017164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017166:	2300      	movs	r3, #0
 8017168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801716a:	2300      	movs	r3, #0
 801716c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801716e:	2306      	movs	r3, #6
 8017170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017172:	f107 031c 	add.w	r3, r7, #28
 8017176:	4619      	mov	r1, r3
 8017178:	480e      	ldr	r0, [pc, #56]	; (80171b4 <HAL_SPI_MspInit+0x120>)
 801717a:	f004 fb8f 	bl	801b89c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801717e:	2320      	movs	r3, #32
 8017180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017182:	2302      	movs	r3, #2
 8017184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017186:	2300      	movs	r3, #0
 8017188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801718a:	2300      	movs	r3, #0
 801718c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801718e:	2306      	movs	r3, #6
 8017190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017192:	f107 031c 	add.w	r3, r7, #28
 8017196:	4619      	mov	r1, r3
 8017198:	4807      	ldr	r0, [pc, #28]	; (80171b8 <HAL_SPI_MspInit+0x124>)
 801719a:	f004 fb7f 	bl	801b89c <HAL_GPIO_Init>
}
 801719e:	bf00      	nop
 80171a0:	3730      	adds	r7, #48	; 0x30
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd80      	pop	{r7, pc}
 80171a6:	bf00      	nop
 80171a8:	40013000 	.word	0x40013000
 80171ac:	40021000 	.word	0x40021000
 80171b0:	40003c00 	.word	0x40003c00
 80171b4:	48000800 	.word	0x48000800
 80171b8:	48000400 	.word	0x48000400

080171bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80171c2:	4b0f      	ldr	r3, [pc, #60]	; (8017200 <HAL_MspInit+0x44>)
 80171c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80171c6:	4a0e      	ldr	r2, [pc, #56]	; (8017200 <HAL_MspInit+0x44>)
 80171c8:	f043 0301 	orr.w	r3, r3, #1
 80171cc:	6613      	str	r3, [r2, #96]	; 0x60
 80171ce:	4b0c      	ldr	r3, [pc, #48]	; (8017200 <HAL_MspInit+0x44>)
 80171d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80171d2:	f003 0301 	and.w	r3, r3, #1
 80171d6:	607b      	str	r3, [r7, #4]
 80171d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80171da:	4b09      	ldr	r3, [pc, #36]	; (8017200 <HAL_MspInit+0x44>)
 80171dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80171de:	4a08      	ldr	r2, [pc, #32]	; (8017200 <HAL_MspInit+0x44>)
 80171e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80171e4:	6593      	str	r3, [r2, #88]	; 0x58
 80171e6:	4b06      	ldr	r3, [pc, #24]	; (8017200 <HAL_MspInit+0x44>)
 80171e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80171ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80171ee:	603b      	str	r3, [r7, #0]
 80171f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80171f2:	f004 fd91 	bl	801bd18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80171f6:	bf00      	nop
 80171f8:	3708      	adds	r7, #8
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	40021000 	.word	0x40021000

08017204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017204:	b480      	push	{r7}
 8017206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017208:	e7fe      	b.n	8017208 <NMI_Handler+0x4>

0801720a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801720a:	b480      	push	{r7}
 801720c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801720e:	e7fe      	b.n	801720e <HardFault_Handler+0x4>

08017210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017210:	b480      	push	{r7}
 8017212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017214:	e7fe      	b.n	8017214 <MemManage_Handler+0x4>

08017216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017216:	b480      	push	{r7}
 8017218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801721a:	e7fe      	b.n	801721a <BusFault_Handler+0x4>

0801721c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801721c:	b480      	push	{r7}
 801721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017220:	e7fe      	b.n	8017220 <UsageFault_Handler+0x4>

08017222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017222:	b480      	push	{r7}
 8017224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017226:	bf00      	nop
 8017228:	46bd      	mov	sp, r7
 801722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722e:	4770      	bx	lr

08017230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017230:	b480      	push	{r7}
 8017232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017234:	bf00      	nop
 8017236:	46bd      	mov	sp, r7
 8017238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723c:	4770      	bx	lr

0801723e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801723e:	b480      	push	{r7}
 8017240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017242:	bf00      	nop
 8017244:	46bd      	mov	sp, r7
 8017246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724a:	4770      	bx	lr

0801724c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017250:	f001 facc 	bl	80187ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017254:	bf00      	nop
 8017256:	bd80      	pop	{r7, pc}

08017258 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801725c:	4802      	ldr	r0, [pc, #8]	; (8017268 <DMA1_Channel1_IRQHandler+0x10>)
 801725e:	f003 ff65 	bl	801b12c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8017262:	bf00      	nop
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	200007a0 	.word	0x200007a0

0801726c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017270:	4802      	ldr	r0, [pc, #8]	; (801727c <ADC1_2_IRQHandler+0x10>)
 8017272:	f002 fa6b 	bl	801974c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8017276:	bf00      	nop
 8017278:	bd80      	pop	{r7, pc}
 801727a:	bf00      	nop
 801727c:	20000734 	.word	0x20000734

08017280 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017284:	480d      	ldr	r0, [pc, #52]	; (80172bc <TIM6_DAC_IRQHandler+0x3c>)
 8017286:	f006 fea3 	bl	801dfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 801728a:	f7f0 fd6d 	bl	8007d68 <interrupt_timer>
  interupt_calSensor();
 801728e:	f7ea fcf1 	bl	8001c74 <interupt_calSensor>
  ICM20602_DataUpdate();
 8017292:	f7f0 fa8b 	bl	80077ac <ICM20602_DataUpdate>
  interrupt_calGyro();
 8017296:	f7ea fafb 	bl	8001890 <interrupt_calGyro>
  AS5047_DataUpdate();
 801729a:	f7ef ff43 	bl	8007124 <AS5047_DataUpdate>
  interupt_calEncoder();
 801729e:	f7e9 feef 	bl	8001080 <interupt_calEncoder>
  interupt_calFusion();
 80172a2:	f7ea f8fd 	bl	80014a0 <interupt_calFusion>
  interrupt_WallCut();
 80172a6:	f7ee feab 	bl	8006000 <interrupt_WallCut>
  interupt_DriveMotor();
 80172aa:	f7ea fe55 	bl	8001f58 <interupt_DriveMotor>

  interrupt_FailSafe();
 80172ae:	f7f2 faa3 	bl	80097f8 <interrupt_FailSafe>
  interrupt_record();
 80172b2:	f7ff fce1 	bl	8016c78 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80172b6:	bf00      	nop
 80172b8:	bd80      	pop	{r7, pc}
 80172ba:	bf00      	nop
 80172bc:	2000ee9c 	.word	0x2000ee9c

080172c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80172c0:	b480      	push	{r7}
 80172c2:	af00      	add	r7, sp, #0
	return 1;
 80172c4:	2301      	movs	r3, #1
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	46bd      	mov	sp, r7
 80172ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ce:	4770      	bx	lr

080172d0 <_kill>:

int _kill(int pid, int sig)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b082      	sub	sp, #8
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80172da:	f008 fd4d 	bl	801fd78 <__errno>
 80172de:	4603      	mov	r3, r0
 80172e0:	2216      	movs	r2, #22
 80172e2:	601a      	str	r2, [r3, #0]
	return -1;
 80172e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3708      	adds	r7, #8
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}

080172f0 <_exit>:

void _exit (int status)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b082      	sub	sp, #8
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80172f8:	f04f 31ff 	mov.w	r1, #4294967295
 80172fc:	6878      	ldr	r0, [r7, #4]
 80172fe:	f7ff ffe7 	bl	80172d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017302:	e7fe      	b.n	8017302 <_exit+0x12>

08017304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b086      	sub	sp, #24
 8017308:	af00      	add	r7, sp, #0
 801730a:	60f8      	str	r0, [r7, #12]
 801730c:	60b9      	str	r1, [r7, #8]
 801730e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017310:	2300      	movs	r3, #0
 8017312:	617b      	str	r3, [r7, #20]
 8017314:	e00a      	b.n	801732c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017316:	f3af 8000 	nop.w
 801731a:	4601      	mov	r1, r0
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	1c5a      	adds	r2, r3, #1
 8017320:	60ba      	str	r2, [r7, #8]
 8017322:	b2ca      	uxtb	r2, r1
 8017324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	3301      	adds	r3, #1
 801732a:	617b      	str	r3, [r7, #20]
 801732c:	697a      	ldr	r2, [r7, #20]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	429a      	cmp	r2, r3
 8017332:	dbf0      	blt.n	8017316 <_read+0x12>
	}

return len;
 8017334:	687b      	ldr	r3, [r7, #4]
}
 8017336:	4618      	mov	r0, r3
 8017338:	3718      	adds	r7, #24
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
	...

08017340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b086      	sub	sp, #24
 8017344:	af00      	add	r7, sp, #0
 8017346:	60f8      	str	r0, [r7, #12]
 8017348:	60b9      	str	r1, [r7, #8]
 801734a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801734c:	2300      	movs	r3, #0
 801734e:	617b      	str	r3, [r7, #20]
 8017350:	e00a      	b.n	8017368 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8017352:	68b9      	ldr	r1, [r7, #8]
 8017354:	1c4b      	adds	r3, r1, #1
 8017356:	60bb      	str	r3, [r7, #8]
 8017358:	2301      	movs	r3, #1
 801735a:	2201      	movs	r2, #1
 801735c:	4807      	ldr	r0, [pc, #28]	; (801737c <_write+0x3c>)
 801735e:	f007 fec1 	bl	801f0e4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	3301      	adds	r3, #1
 8017366:	617b      	str	r3, [r7, #20]
 8017368:	697a      	ldr	r2, [r7, #20]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	429a      	cmp	r2, r3
 801736e:	dbf0      	blt.n	8017352 <_write+0x12>
	}
	return len;
 8017370:	687b      	ldr	r3, [r7, #4]
}
 8017372:	4618      	mov	r0, r3
 8017374:	3718      	adds	r7, #24
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}
 801737a:	bf00      	nop
 801737c:	2000f730 	.word	0x2000f730

08017380 <_close>:

int _close(int file)
{
 8017380:	b480      	push	{r7}
 8017382:	b083      	sub	sp, #12
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
	return -1;
 8017388:	f04f 33ff 	mov.w	r3, #4294967295
}
 801738c:	4618      	mov	r0, r3
 801738e:	370c      	adds	r7, #12
 8017390:	46bd      	mov	sp, r7
 8017392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017396:	4770      	bx	lr

08017398 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017398:	b480      	push	{r7}
 801739a:	b083      	sub	sp, #12
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80173a8:	605a      	str	r2, [r3, #4]
	return 0;
 80173aa:	2300      	movs	r3, #0
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	370c      	adds	r7, #12
 80173b0:	46bd      	mov	sp, r7
 80173b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b6:	4770      	bx	lr

080173b8 <_isatty>:

int _isatty(int file)
{
 80173b8:	b480      	push	{r7}
 80173ba:	b083      	sub	sp, #12
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
	return 1;
 80173c0:	2301      	movs	r3, #1
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	370c      	adds	r7, #12
 80173c6:	46bd      	mov	sp, r7
 80173c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173cc:	4770      	bx	lr

080173ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80173ce:	b480      	push	{r7}
 80173d0:	b085      	sub	sp, #20
 80173d2:	af00      	add	r7, sp, #0
 80173d4:	60f8      	str	r0, [r7, #12]
 80173d6:	60b9      	str	r1, [r7, #8]
 80173d8:	607a      	str	r2, [r7, #4]
	return 0;
 80173da:	2300      	movs	r3, #0
}
 80173dc:	4618      	mov	r0, r3
 80173de:	3714      	adds	r7, #20
 80173e0:	46bd      	mov	sp, r7
 80173e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e6:	4770      	bx	lr

080173e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b086      	sub	sp, #24
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80173f0:	4a14      	ldr	r2, [pc, #80]	; (8017444 <_sbrk+0x5c>)
 80173f2:	4b15      	ldr	r3, [pc, #84]	; (8017448 <_sbrk+0x60>)
 80173f4:	1ad3      	subs	r3, r2, r3
 80173f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80173f8:	697b      	ldr	r3, [r7, #20]
 80173fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80173fc:	4b13      	ldr	r3, [pc, #76]	; (801744c <_sbrk+0x64>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d102      	bne.n	801740a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8017404:	4b11      	ldr	r3, [pc, #68]	; (801744c <_sbrk+0x64>)
 8017406:	4a12      	ldr	r2, [pc, #72]	; (8017450 <_sbrk+0x68>)
 8017408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801740a:	4b10      	ldr	r3, [pc, #64]	; (801744c <_sbrk+0x64>)
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	4413      	add	r3, r2
 8017412:	693a      	ldr	r2, [r7, #16]
 8017414:	429a      	cmp	r2, r3
 8017416:	d207      	bcs.n	8017428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8017418:	f008 fcae 	bl	801fd78 <__errno>
 801741c:	4603      	mov	r3, r0
 801741e:	220c      	movs	r2, #12
 8017420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017422:	f04f 33ff 	mov.w	r3, #4294967295
 8017426:	e009      	b.n	801743c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8017428:	4b08      	ldr	r3, [pc, #32]	; (801744c <_sbrk+0x64>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801742e:	4b07      	ldr	r3, [pc, #28]	; (801744c <_sbrk+0x64>)
 8017430:	681a      	ldr	r2, [r3, #0]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	4413      	add	r3, r2
 8017436:	4a05      	ldr	r2, [pc, #20]	; (801744c <_sbrk+0x64>)
 8017438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801743a:	68fb      	ldr	r3, [r7, #12]
}
 801743c:	4618      	mov	r0, r3
 801743e:	3718      	adds	r7, #24
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}
 8017444:	2001c000 	.word	0x2001c000
 8017448:	00000400 	.word	0x00000400
 801744c:	2000ee98 	.word	0x2000ee98
 8017450:	2000f7d8 	.word	0x2000f7d8

08017454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8017454:	b480      	push	{r7}
 8017456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8017458:	4b06      	ldr	r3, [pc, #24]	; (8017474 <SystemInit+0x20>)
 801745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801745e:	4a05      	ldr	r2, [pc, #20]	; (8017474 <SystemInit+0x20>)
 8017460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017468:	bf00      	nop
 801746a:	46bd      	mov	sp, r7
 801746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017470:	4770      	bx	lr
 8017472:	bf00      	nop
 8017474:	e000ed00 	.word	0xe000ed00

08017478 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801747e:	1d3b      	adds	r3, r7, #4
 8017480:	2200      	movs	r2, #0
 8017482:	601a      	str	r2, [r3, #0]
 8017484:	605a      	str	r2, [r3, #4]
 8017486:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8017488:	4b14      	ldr	r3, [pc, #80]	; (80174dc <MX_TIM6_Init+0x64>)
 801748a:	4a15      	ldr	r2, [pc, #84]	; (80174e0 <MX_TIM6_Init+0x68>)
 801748c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 801748e:	4b13      	ldr	r3, [pc, #76]	; (80174dc <MX_TIM6_Init+0x64>)
 8017490:	2254      	movs	r2, #84	; 0x54
 8017492:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017494:	4b11      	ldr	r3, [pc, #68]	; (80174dc <MX_TIM6_Init+0x64>)
 8017496:	2200      	movs	r2, #0
 8017498:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 801749a:	4b10      	ldr	r3, [pc, #64]	; (80174dc <MX_TIM6_Init+0x64>)
 801749c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80174a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80174a2:	4b0e      	ldr	r3, [pc, #56]	; (80174dc <MX_TIM6_Init+0x64>)
 80174a4:	2200      	movs	r2, #0
 80174a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80174a8:	480c      	ldr	r0, [pc, #48]	; (80174dc <MX_TIM6_Init+0x64>)
 80174aa:	f006 fac9 	bl	801da40 <HAL_TIM_Base_Init>
 80174ae:	4603      	mov	r3, r0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d001      	beq.n	80174b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80174b4:	f7f2 fc49 	bl	8009d4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80174b8:	2300      	movs	r3, #0
 80174ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80174bc:	2300      	movs	r3, #0
 80174be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80174c0:	1d3b      	adds	r3, r7, #4
 80174c2:	4619      	mov	r1, r3
 80174c4:	4805      	ldr	r0, [pc, #20]	; (80174dc <MX_TIM6_Init+0x64>)
 80174c6:	f007 fc37 	bl	801ed38 <HAL_TIMEx_MasterConfigSynchronization>
 80174ca:	4603      	mov	r3, r0
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d001      	beq.n	80174d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80174d0:	f7f2 fc3b 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80174d4:	bf00      	nop
 80174d6:	3710      	adds	r7, #16
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}
 80174dc:	2000ee9c 	.word	0x2000ee9c
 80174e0:	40001000 	.word	0x40001000

080174e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b098      	sub	sp, #96	; 0x60
 80174e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80174ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80174ee:	2200      	movs	r2, #0
 80174f0:	601a      	str	r2, [r3, #0]
 80174f2:	605a      	str	r2, [r3, #4]
 80174f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80174f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80174fa:	2200      	movs	r2, #0
 80174fc:	601a      	str	r2, [r3, #0]
 80174fe:	605a      	str	r2, [r3, #4]
 8017500:	609a      	str	r2, [r3, #8]
 8017502:	60da      	str	r2, [r3, #12]
 8017504:	611a      	str	r2, [r3, #16]
 8017506:	615a      	str	r2, [r3, #20]
 8017508:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801750a:	1d3b      	adds	r3, r7, #4
 801750c:	2234      	movs	r2, #52	; 0x34
 801750e:	2100      	movs	r1, #0
 8017510:	4618      	mov	r0, r3
 8017512:	f008 fc69 	bl	801fde8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8017516:	4b41      	ldr	r3, [pc, #260]	; (801761c <MX_TIM8_Init+0x138>)
 8017518:	4a41      	ldr	r2, [pc, #260]	; (8017620 <MX_TIM8_Init+0x13c>)
 801751a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 801751c:	4b3f      	ldr	r3, [pc, #252]	; (801761c <MX_TIM8_Init+0x138>)
 801751e:	2201      	movs	r2, #1
 8017520:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017522:	4b3e      	ldr	r3, [pc, #248]	; (801761c <MX_TIM8_Init+0x138>)
 8017524:	2200      	movs	r2, #0
 8017526:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8017528:	4b3c      	ldr	r3, [pc, #240]	; (801761c <MX_TIM8_Init+0x138>)
 801752a:	f240 628f 	movw	r2, #1679	; 0x68f
 801752e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017530:	4b3a      	ldr	r3, [pc, #232]	; (801761c <MX_TIM8_Init+0x138>)
 8017532:	2200      	movs	r2, #0
 8017534:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8017536:	4b39      	ldr	r3, [pc, #228]	; (801761c <MX_TIM8_Init+0x138>)
 8017538:	2200      	movs	r2, #0
 801753a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801753c:	4b37      	ldr	r3, [pc, #220]	; (801761c <MX_TIM8_Init+0x138>)
 801753e:	2200      	movs	r2, #0
 8017540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8017542:	4836      	ldr	r0, [pc, #216]	; (801761c <MX_TIM8_Init+0x138>)
 8017544:	f006 fb44 	bl	801dbd0 <HAL_TIM_PWM_Init>
 8017548:	4603      	mov	r3, r0
 801754a:	2b00      	cmp	r3, #0
 801754c:	d001      	beq.n	8017552 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 801754e:	f7f2 fbfc 	bl	8009d4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017552:	2300      	movs	r3, #0
 8017554:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8017556:	2300      	movs	r3, #0
 8017558:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801755a:	2300      	movs	r3, #0
 801755c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801755e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017562:	4619      	mov	r1, r3
 8017564:	482d      	ldr	r0, [pc, #180]	; (801761c <MX_TIM8_Init+0x138>)
 8017566:	f007 fbe7 	bl	801ed38 <HAL_TIMEx_MasterConfigSynchronization>
 801756a:	4603      	mov	r3, r0
 801756c:	2b00      	cmp	r3, #0
 801756e:	d001      	beq.n	8017574 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8017570:	f7f2 fbeb 	bl	8009d4a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017574:	2360      	movs	r3, #96	; 0x60
 8017576:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8017578:	f240 13a3 	movw	r3, #419	; 0x1a3
 801757c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801757e:	2300      	movs	r3, #0
 8017580:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017582:	2300      	movs	r3, #0
 8017584:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017586:	2300      	movs	r3, #0
 8017588:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801758a:	2300      	movs	r3, #0
 801758c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801758e:	2300      	movs	r3, #0
 8017590:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017596:	2200      	movs	r2, #0
 8017598:	4619      	mov	r1, r3
 801759a:	4820      	ldr	r0, [pc, #128]	; (801761c <MX_TIM8_Init+0x138>)
 801759c:	f006 fe98 	bl	801e2d0 <HAL_TIM_PWM_ConfigChannel>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d001      	beq.n	80175aa <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80175a6:	f7f2 fbd0 	bl	8009d4a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80175aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80175ae:	2208      	movs	r2, #8
 80175b0:	4619      	mov	r1, r3
 80175b2:	481a      	ldr	r0, [pc, #104]	; (801761c <MX_TIM8_Init+0x138>)
 80175b4:	f006 fe8c 	bl	801e2d0 <HAL_TIM_PWM_ConfigChannel>
 80175b8:	4603      	mov	r3, r0
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d001      	beq.n	80175c2 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 80175be:	f7f2 fbc4 	bl	8009d4a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80175c2:	2300      	movs	r3, #0
 80175c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80175c6:	2300      	movs	r3, #0
 80175c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80175ca:	2300      	movs	r3, #0
 80175cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80175ce:	2300      	movs	r3, #0
 80175d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80175d2:	2300      	movs	r3, #0
 80175d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80175d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80175da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80175dc:	2300      	movs	r3, #0
 80175de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80175e0:	2300      	movs	r3, #0
 80175e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80175e4:	2300      	movs	r3, #0
 80175e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80175e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80175ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80175ee:	2300      	movs	r3, #0
 80175f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80175f2:	2300      	movs	r3, #0
 80175f4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80175f6:	2300      	movs	r3, #0
 80175f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80175fa:	1d3b      	adds	r3, r7, #4
 80175fc:	4619      	mov	r1, r3
 80175fe:	4807      	ldr	r0, [pc, #28]	; (801761c <MX_TIM8_Init+0x138>)
 8017600:	f007 fc28 	bl	801ee54 <HAL_TIMEx_ConfigBreakDeadTime>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d001      	beq.n	801760e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801760a:	f7f2 fb9e 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801760e:	4803      	ldr	r0, [pc, #12]	; (801761c <MX_TIM8_Init+0x138>)
 8017610:	f000 f8da 	bl	80177c8 <HAL_TIM_MspPostInit>

}
 8017614:	bf00      	nop
 8017616:	3760      	adds	r7, #96	; 0x60
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	2000eee8 	.word	0x2000eee8
 8017620:	40013400 	.word	0x40013400

08017624 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b094      	sub	sp, #80	; 0x50
 8017628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801762a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801762e:	2200      	movs	r2, #0
 8017630:	601a      	str	r2, [r3, #0]
 8017632:	605a      	str	r2, [r3, #4]
 8017634:	609a      	str	r2, [r3, #8]
 8017636:	60da      	str	r2, [r3, #12]
 8017638:	611a      	str	r2, [r3, #16]
 801763a:	615a      	str	r2, [r3, #20]
 801763c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801763e:	463b      	mov	r3, r7
 8017640:	2234      	movs	r2, #52	; 0x34
 8017642:	2100      	movs	r1, #0
 8017644:	4618      	mov	r0, r3
 8017646:	f008 fbcf 	bl	801fde8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 801764a:	4b30      	ldr	r3, [pc, #192]	; (801770c <MX_TIM16_Init+0xe8>)
 801764c:	4a30      	ldr	r2, [pc, #192]	; (8017710 <MX_TIM16_Init+0xec>)
 801764e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8017650:	4b2e      	ldr	r3, [pc, #184]	; (801770c <MX_TIM16_Init+0xe8>)
 8017652:	2201      	movs	r2, #1
 8017654:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017656:	4b2d      	ldr	r3, [pc, #180]	; (801770c <MX_TIM16_Init+0xe8>)
 8017658:	2200      	movs	r2, #0
 801765a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 801765c:	4b2b      	ldr	r3, [pc, #172]	; (801770c <MX_TIM16_Init+0xe8>)
 801765e:	2264      	movs	r2, #100	; 0x64
 8017660:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017662:	4b2a      	ldr	r3, [pc, #168]	; (801770c <MX_TIM16_Init+0xe8>)
 8017664:	2200      	movs	r2, #0
 8017666:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8017668:	4b28      	ldr	r3, [pc, #160]	; (801770c <MX_TIM16_Init+0xe8>)
 801766a:	2200      	movs	r2, #0
 801766c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801766e:	4b27      	ldr	r3, [pc, #156]	; (801770c <MX_TIM16_Init+0xe8>)
 8017670:	2200      	movs	r2, #0
 8017672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8017674:	4825      	ldr	r0, [pc, #148]	; (801770c <MX_TIM16_Init+0xe8>)
 8017676:	f006 f9e3 	bl	801da40 <HAL_TIM_Base_Init>
 801767a:	4603      	mov	r3, r0
 801767c:	2b00      	cmp	r3, #0
 801767e:	d001      	beq.n	8017684 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8017680:	f7f2 fb63 	bl	8009d4a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8017684:	4821      	ldr	r0, [pc, #132]	; (801770c <MX_TIM16_Init+0xe8>)
 8017686:	f006 faa3 	bl	801dbd0 <HAL_TIM_PWM_Init>
 801768a:	4603      	mov	r3, r0
 801768c:	2b00      	cmp	r3, #0
 801768e:	d001      	beq.n	8017694 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8017690:	f7f2 fb5b 	bl	8009d4a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017694:	2360      	movs	r3, #96	; 0x60
 8017696:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8017698:	231e      	movs	r3, #30
 801769a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801769c:	2300      	movs	r3, #0
 801769e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80176a0:	2300      	movs	r3, #0
 80176a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80176a4:	2300      	movs	r3, #0
 80176a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80176a8:	2300      	movs	r3, #0
 80176aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80176ac:	2300      	movs	r3, #0
 80176ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80176b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80176b4:	2200      	movs	r2, #0
 80176b6:	4619      	mov	r1, r3
 80176b8:	4814      	ldr	r0, [pc, #80]	; (801770c <MX_TIM16_Init+0xe8>)
 80176ba:	f006 fe09 	bl	801e2d0 <HAL_TIM_PWM_ConfigChannel>
 80176be:	4603      	mov	r3, r0
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d001      	beq.n	80176c8 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80176c4:	f7f2 fb41 	bl	8009d4a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80176c8:	2300      	movs	r3, #0
 80176ca:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80176cc:	2300      	movs	r3, #0
 80176ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80176d0:	2300      	movs	r3, #0
 80176d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80176d4:	2300      	movs	r3, #0
 80176d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80176d8:	2300      	movs	r3, #0
 80176da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80176dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80176e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80176e2:	2300      	movs	r3, #0
 80176e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80176e6:	2300      	movs	r3, #0
 80176e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80176ea:	463b      	mov	r3, r7
 80176ec:	4619      	mov	r1, r3
 80176ee:	4807      	ldr	r0, [pc, #28]	; (801770c <MX_TIM16_Init+0xe8>)
 80176f0:	f007 fbb0 	bl	801ee54 <HAL_TIMEx_ConfigBreakDeadTime>
 80176f4:	4603      	mov	r3, r0
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d001      	beq.n	80176fe <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80176fa:	f7f2 fb26 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80176fe:	4803      	ldr	r0, [pc, #12]	; (801770c <MX_TIM16_Init+0xe8>)
 8017700:	f000 f862 	bl	80177c8 <HAL_TIM_MspPostInit>

}
 8017704:	bf00      	nop
 8017706:	3750      	adds	r7, #80	; 0x50
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}
 801770c:	2000ef34 	.word	0x2000ef34
 8017710:	40014400 	.word	0x40014400

08017714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b084      	sub	sp, #16
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	4a16      	ldr	r2, [pc, #88]	; (801777c <HAL_TIM_Base_MspInit+0x68>)
 8017722:	4293      	cmp	r3, r2
 8017724:	d114      	bne.n	8017750 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8017726:	4b16      	ldr	r3, [pc, #88]	; (8017780 <HAL_TIM_Base_MspInit+0x6c>)
 8017728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801772a:	4a15      	ldr	r2, [pc, #84]	; (8017780 <HAL_TIM_Base_MspInit+0x6c>)
 801772c:	f043 0310 	orr.w	r3, r3, #16
 8017730:	6593      	str	r3, [r2, #88]	; 0x58
 8017732:	4b13      	ldr	r3, [pc, #76]	; (8017780 <HAL_TIM_Base_MspInit+0x6c>)
 8017734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017736:	f003 0310 	and.w	r3, r3, #16
 801773a:	60fb      	str	r3, [r7, #12]
 801773c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801773e:	2200      	movs	r2, #0
 8017740:	2103      	movs	r1, #3
 8017742:	2036      	movs	r0, #54	; 0x36
 8017744:	f003 fb41 	bl	801adca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017748:	2036      	movs	r0, #54	; 0x36
 801774a:	f003 fb58 	bl	801adfe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 801774e:	e010      	b.n	8017772 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	4a0b      	ldr	r2, [pc, #44]	; (8017784 <HAL_TIM_Base_MspInit+0x70>)
 8017756:	4293      	cmp	r3, r2
 8017758:	d10b      	bne.n	8017772 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 801775a:	4b09      	ldr	r3, [pc, #36]	; (8017780 <HAL_TIM_Base_MspInit+0x6c>)
 801775c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801775e:	4a08      	ldr	r2, [pc, #32]	; (8017780 <HAL_TIM_Base_MspInit+0x6c>)
 8017760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017764:	6613      	str	r3, [r2, #96]	; 0x60
 8017766:	4b06      	ldr	r3, [pc, #24]	; (8017780 <HAL_TIM_Base_MspInit+0x6c>)
 8017768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801776a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801776e:	60bb      	str	r3, [r7, #8]
 8017770:	68bb      	ldr	r3, [r7, #8]
}
 8017772:	bf00      	nop
 8017774:	3710      	adds	r7, #16
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	40001000 	.word	0x40001000
 8017780:	40021000 	.word	0x40021000
 8017784:	40014400 	.word	0x40014400

08017788 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8017788:	b480      	push	{r7}
 801778a:	b085      	sub	sp, #20
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	4a0a      	ldr	r2, [pc, #40]	; (80177c0 <HAL_TIM_PWM_MspInit+0x38>)
 8017796:	4293      	cmp	r3, r2
 8017798:	d10b      	bne.n	80177b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 801779a:	4b0a      	ldr	r3, [pc, #40]	; (80177c4 <HAL_TIM_PWM_MspInit+0x3c>)
 801779c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801779e:	4a09      	ldr	r2, [pc, #36]	; (80177c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80177a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80177a4:	6613      	str	r3, [r2, #96]	; 0x60
 80177a6:	4b07      	ldr	r3, [pc, #28]	; (80177c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80177a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80177aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80177ae:	60fb      	str	r3, [r7, #12]
 80177b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80177b2:	bf00      	nop
 80177b4:	3714      	adds	r7, #20
 80177b6:	46bd      	mov	sp, r7
 80177b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop
 80177c0:	40013400 	.word	0x40013400
 80177c4:	40021000 	.word	0x40021000

080177c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b08a      	sub	sp, #40	; 0x28
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80177d0:	f107 0314 	add.w	r3, r7, #20
 80177d4:	2200      	movs	r2, #0
 80177d6:	601a      	str	r2, [r3, #0]
 80177d8:	605a      	str	r2, [r3, #4]
 80177da:	609a      	str	r2, [r3, #8]
 80177dc:	60da      	str	r2, [r3, #12]
 80177de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	4a2b      	ldr	r2, [pc, #172]	; (8017894 <HAL_TIM_MspPostInit+0xcc>)
 80177e6:	4293      	cmp	r3, r2
 80177e8:	d12d      	bne.n	8017846 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80177ea:	4b2b      	ldr	r3, [pc, #172]	; (8017898 <HAL_TIM_MspPostInit+0xd0>)
 80177ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177ee:	4a2a      	ldr	r2, [pc, #168]	; (8017898 <HAL_TIM_MspPostInit+0xd0>)
 80177f0:	f043 0302 	orr.w	r3, r3, #2
 80177f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80177f6:	4b28      	ldr	r3, [pc, #160]	; (8017898 <HAL_TIM_MspPostInit+0xd0>)
 80177f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177fa:	f003 0302 	and.w	r3, r3, #2
 80177fe:	613b      	str	r3, [r7, #16]
 8017800:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8017802:	2340      	movs	r3, #64	; 0x40
 8017804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017806:	2302      	movs	r3, #2
 8017808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801780a:	2300      	movs	r3, #0
 801780c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801780e:	2300      	movs	r3, #0
 8017810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8017812:	2305      	movs	r3, #5
 8017814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017816:	f107 0314 	add.w	r3, r7, #20
 801781a:	4619      	mov	r1, r3
 801781c:	481f      	ldr	r0, [pc, #124]	; (801789c <HAL_TIM_MspPostInit+0xd4>)
 801781e:	f004 f83d 	bl	801b89c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8017822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017828:	2302      	movs	r3, #2
 801782a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801782c:	2300      	movs	r3, #0
 801782e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017830:	2300      	movs	r3, #0
 8017832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8017834:	230a      	movs	r3, #10
 8017836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017838:	f107 0314 	add.w	r3, r7, #20
 801783c:	4619      	mov	r1, r3
 801783e:	4817      	ldr	r0, [pc, #92]	; (801789c <HAL_TIM_MspPostInit+0xd4>)
 8017840:	f004 f82c 	bl	801b89c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8017844:	e022      	b.n	801788c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	4a15      	ldr	r2, [pc, #84]	; (80178a0 <HAL_TIM_MspPostInit+0xd8>)
 801784c:	4293      	cmp	r3, r2
 801784e:	d11d      	bne.n	801788c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017850:	4b11      	ldr	r3, [pc, #68]	; (8017898 <HAL_TIM_MspPostInit+0xd0>)
 8017852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017854:	4a10      	ldr	r2, [pc, #64]	; (8017898 <HAL_TIM_MspPostInit+0xd0>)
 8017856:	f043 0301 	orr.w	r3, r3, #1
 801785a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801785c:	4b0e      	ldr	r3, [pc, #56]	; (8017898 <HAL_TIM_MspPostInit+0xd0>)
 801785e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017860:	f003 0301 	and.w	r3, r3, #1
 8017864:	60fb      	str	r3, [r7, #12]
 8017866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8017868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801786c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801786e:	2302      	movs	r3, #2
 8017870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017872:	2300      	movs	r3, #0
 8017874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017876:	2300      	movs	r3, #0
 8017878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 801787a:	2301      	movs	r3, #1
 801787c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 801787e:	f107 0314 	add.w	r3, r7, #20
 8017882:	4619      	mov	r1, r3
 8017884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017888:	f004 f808 	bl	801b89c <HAL_GPIO_Init>
}
 801788c:	bf00      	nop
 801788e:	3728      	adds	r7, #40	; 0x28
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	40013400 	.word	0x40013400
 8017898:	40021000 	.word	0x40021000
 801789c:	48000400 	.word	0x48000400
 80178a0:	40014400 	.word	0x40014400

080178a4 <get_center_velocity>:

parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 80178a4:	b084      	sub	sp, #16
 80178a6:	b480      	push	{r7}
 80178a8:	b083      	sub	sp, #12
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	f107 0c10 	add.w	ip, r7, #16
 80178b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 80178b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80178b8:	f113 0f02 	cmn.w	r3, #2
 80178bc:	d102      	bne.n	80178c4 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 80178be:	69bb      	ldr	r3, [r7, #24]
 80178c0:	607b      	str	r3, [r7, #4]
 80178c2:	e083      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 80178c4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80178c8:	f113 0f03 	cmn.w	r3, #3
 80178cc:	d102      	bne.n	80178d4 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 80178ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d0:	607b      	str	r3, [r7, #4]
 80178d2:	e07b      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 80178d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80178d8:	f113 0f04 	cmn.w	r3, #4
 80178dc:	d102      	bne.n	80178e4 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 80178de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178e0:	607b      	str	r3, [r7, #4]
 80178e2:	e073      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 80178e4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80178e8:	f113 0f05 	cmn.w	r3, #5
 80178ec:	d102      	bne.n	80178f4 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 80178ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178f0:	607b      	str	r3, [r7, #4]
 80178f2:	e06b      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 80178f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80178f8:	f113 0f06 	cmn.w	r3, #6
 80178fc:	d102      	bne.n	8017904 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 80178fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017900:	607b      	str	r3, [r7, #4]
 8017902:	e063      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017904:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017908:	f113 0f07 	cmn.w	r3, #7
 801790c:	d102      	bne.n	8017914 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 801790e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017910:	607b      	str	r3, [r7, #4]
 8017912:	e05b      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017914:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017918:	f113 0f08 	cmn.w	r3, #8
 801791c:	d103      	bne.n	8017926 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 801791e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017922:	607b      	str	r3, [r7, #4]
 8017924:	e052      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8017926:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801792a:	f113 0f09 	cmn.w	r3, #9
 801792e:	d103      	bne.n	8017938 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8017930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017934:	607b      	str	r3, [r7, #4]
 8017936:	e049      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8017938:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801793c:	f113 0f0a 	cmn.w	r3, #10
 8017940:	d103      	bne.n	801794a <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8017942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017946:	607b      	str	r3, [r7, #4]
 8017948:	e040      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 801794a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801794e:	f113 0f0b 	cmn.w	r3, #11
 8017952:	d103      	bne.n	801795c <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017958:	607b      	str	r3, [r7, #4]
 801795a:	e037      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 801795c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017960:	f113 0f0c 	cmn.w	r3, #12
 8017964:	d103      	bne.n	801796e <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8017966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801796a:	607b      	str	r3, [r7, #4]
 801796c:	e02e      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 801796e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017972:	f113 0f0d 	cmn.w	r3, #13
 8017976:	d103      	bne.n	8017980 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8017978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801797c:	607b      	str	r3, [r7, #4]
 801797e:	e025      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017980:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017984:	f113 0f0e 	cmn.w	r3, #14
 8017988:	d103      	bne.n	8017992 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 801798a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801798e:	607b      	str	r3, [r7, #4]
 8017990:	e01c      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8017992:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017996:	f113 0f0f 	cmn.w	r3, #15
 801799a:	d103      	bne.n	80179a4 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 801799c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80179a0:	607b      	str	r3, [r7, #4]
 80179a2:	e013      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 80179a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80179a8:	f113 0f10 	cmn.w	r3, #16
 80179ac:	d103      	bne.n	80179b6 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 80179ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80179b2:	607b      	str	r3, [r7, #4]
 80179b4:	e00a      	b.n	80179cc <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 80179b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80179ba:	f113 0f11 	cmn.w	r3, #17
 80179be:	d103      	bne.n	80179c8 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 80179c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80179c4:	607b      	str	r3, [r7, #4]
 80179c6:	e001      	b.n	80179cc <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	ee07 3a90 	vmov	s15, r3
}
 80179d2:	eeb0 0a67 	vmov.f32	s0, s15
 80179d6:	370c      	adds	r7, #12
 80179d8:	46bd      	mov	sp, r7
 80179da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179de:	b004      	add	sp, #16
 80179e0:	4770      	bx	lr
	...

080179e4 <input_parameter>:

void input_parameter(void) {
 80179e4:	b480      	push	{r7}
 80179e6:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 80179e8:	4b8e      	ldr	r3, [pc, #568]	; (8017c24 <input_parameter+0x240>)
 80179ea:	4a8f      	ldr	r2, [pc, #572]	; (8017c28 <input_parameter+0x244>)
 80179ec:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 80179ee:	4b8d      	ldr	r3, [pc, #564]	; (8017c24 <input_parameter+0x240>)
 80179f0:	4a8d      	ldr	r2, [pc, #564]	; (8017c28 <input_parameter+0x244>)
 80179f2:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80179f4:	4b8b      	ldr	r3, [pc, #556]	; (8017c24 <input_parameter+0x240>)
 80179f6:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 80179f8:	4a8a      	ldr	r2, [pc, #552]	; (8017c24 <input_parameter+0x240>)
 80179fa:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 80179fc:	4b89      	ldr	r3, [pc, #548]	; (8017c24 <input_parameter+0x240>)
 80179fe:	4a8b      	ldr	r2, [pc, #556]	; (8017c2c <input_parameter+0x248>)
 8017a00:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8017a02:	4b88      	ldr	r3, [pc, #544]	; (8017c24 <input_parameter+0x240>)
 8017a04:	4a8a      	ldr	r2, [pc, #552]	; (8017c30 <input_parameter+0x24c>)
 8017a06:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 7; //55;
 8017a08:	4b86      	ldr	r3, [pc, #536]	; (8017c24 <input_parameter+0x240>)
 8017a0a:	4a8a      	ldr	r2, [pc, #552]	; (8017c34 <input_parameter+0x250>)
 8017a0c:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8017a0e:	4b85      	ldr	r3, [pc, #532]	; (8017c24 <input_parameter+0x240>)
 8017a10:	4a89      	ldr	r2, [pc, #548]	; (8017c38 <input_parameter+0x254>)
 8017a12:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017a14:	4b83      	ldr	r3, [pc, #524]	; (8017c24 <input_parameter+0x240>)
 8017a16:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8017a18:	4a82      	ldr	r2, [pc, #520]	; (8017c24 <input_parameter+0x240>)
 8017a1a:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 8017a1c:	4b81      	ldr	r3, [pc, #516]	; (8017c24 <input_parameter+0x240>)
 8017a1e:	4a83      	ldr	r2, [pc, #524]	; (8017c2c <input_parameter+0x248>)
 8017a20:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8017a22:	4b80      	ldr	r3, [pc, #512]	; (8017c24 <input_parameter+0x240>)
 8017a24:	4a82      	ldr	r2, [pc, #520]	; (8017c30 <input_parameter+0x24c>)
 8017a26:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 3; //50;
 8017a28:	4b7e      	ldr	r3, [pc, #504]	; (8017c24 <input_parameter+0x240>)
 8017a2a:	4a84      	ldr	r2, [pc, #528]	; (8017c3c <input_parameter+0x258>)
 8017a2c:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8017a2e:	4b7d      	ldr	r3, [pc, #500]	; (8017c24 <input_parameter+0x240>)
 8017a30:	4a83      	ldr	r2, [pc, #524]	; (8017c40 <input_parameter+0x25c>)
 8017a32:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8017a34:	4b83      	ldr	r3, [pc, #524]	; (8017c44 <input_parameter+0x260>)
 8017a36:	4a84      	ldr	r2, [pc, #528]	; (8017c48 <input_parameter+0x264>)
 8017a38:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017a3a:	4b82      	ldr	r3, [pc, #520]	; (8017c44 <input_parameter+0x260>)
 8017a3c:	4a82      	ldr	r2, [pc, #520]	; (8017c48 <input_parameter+0x264>)
 8017a3e:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017a40:	4b80      	ldr	r3, [pc, #512]	; (8017c44 <input_parameter+0x260>)
 8017a42:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8017a44:	4a7f      	ldr	r2, [pc, #508]	; (8017c44 <input_parameter+0x260>)
 8017a46:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017a48:	4b7e      	ldr	r3, [pc, #504]	; (8017c44 <input_parameter+0x260>)
 8017a4a:	4a80      	ldr	r2, [pc, #512]	; (8017c4c <input_parameter+0x268>)
 8017a4c:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017a4e:	4b7d      	ldr	r3, [pc, #500]	; (8017c44 <input_parameter+0x260>)
 8017a50:	4a7f      	ldr	r2, [pc, #508]	; (8017c50 <input_parameter+0x26c>)
 8017a52:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8017a54:	4b7b      	ldr	r3, [pc, #492]	; (8017c44 <input_parameter+0x260>)
 8017a56:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017a5a:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017a5c:	4b79      	ldr	r3, [pc, #484]	; (8017c44 <input_parameter+0x260>)
 8017a5e:	4a76      	ldr	r2, [pc, #472]	; (8017c38 <input_parameter+0x254>)
 8017a60:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017a62:	4b78      	ldr	r3, [pc, #480]	; (8017c44 <input_parameter+0x260>)
 8017a64:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8017a66:	4a77      	ldr	r2, [pc, #476]	; (8017c44 <input_parameter+0x260>)
 8017a68:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017a6a:	4b76      	ldr	r3, [pc, #472]	; (8017c44 <input_parameter+0x260>)
 8017a6c:	4a79      	ldr	r2, [pc, #484]	; (8017c54 <input_parameter+0x270>)
 8017a6e:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017a70:	4b74      	ldr	r3, [pc, #464]	; (8017c44 <input_parameter+0x260>)
 8017a72:	4a77      	ldr	r2, [pc, #476]	; (8017c50 <input_parameter+0x26c>)
 8017a74:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8017a76:	4b73      	ldr	r3, [pc, #460]	; (8017c44 <input_parameter+0x260>)
 8017a78:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017a7c:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017a7e:	4b71      	ldr	r3, [pc, #452]	; (8017c44 <input_parameter+0x260>)
 8017a80:	4a6f      	ldr	r2, [pc, #444]	; (8017c40 <input_parameter+0x25c>)
 8017a82:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017a84:	4b67      	ldr	r3, [pc, #412]	; (8017c24 <input_parameter+0x240>)
 8017a86:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017a88:	4a73      	ldr	r2, [pc, #460]	; (8017c58 <input_parameter+0x274>)
 8017a8a:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017a8c:	4b65      	ldr	r3, [pc, #404]	; (8017c24 <input_parameter+0x240>)
 8017a8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8017a92:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8017c5c <input_parameter+0x278>
 8017a96:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017a9a:	4b6f      	ldr	r3, [pc, #444]	; (8017c58 <input_parameter+0x274>)
 8017a9c:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017aa0:	4b60      	ldr	r3, [pc, #384]	; (8017c24 <input_parameter+0x240>)
 8017aa2:	689b      	ldr	r3, [r3, #8]
 8017aa4:	4a6c      	ldr	r2, [pc, #432]	; (8017c58 <input_parameter+0x274>)
 8017aa6:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017aa8:	4b5e      	ldr	r3, [pc, #376]	; (8017c24 <input_parameter+0x240>)
 8017aaa:	695b      	ldr	r3, [r3, #20]
 8017aac:	4a6a      	ldr	r2, [pc, #424]	; (8017c58 <input_parameter+0x274>)
 8017aae:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017ab0:	4b5c      	ldr	r3, [pc, #368]	; (8017c24 <input_parameter+0x240>)
 8017ab2:	699b      	ldr	r3, [r3, #24]
 8017ab4:	4a68      	ldr	r2, [pc, #416]	; (8017c58 <input_parameter+0x274>)
 8017ab6:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017ab8:	4b5a      	ldr	r3, [pc, #360]	; (8017c24 <input_parameter+0x240>)
 8017aba:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8017abe:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017ac6:	4b64      	ldr	r3, [pc, #400]	; (8017c58 <input_parameter+0x274>)
 8017ac8:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017acc:	4b55      	ldr	r3, [pc, #340]	; (8017c24 <input_parameter+0x240>)
 8017ace:	691b      	ldr	r3, [r3, #16]
 8017ad0:	4a61      	ldr	r2, [pc, #388]	; (8017c58 <input_parameter+0x274>)
 8017ad2:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017ad4:	4b53      	ldr	r3, [pc, #332]	; (8017c24 <input_parameter+0x240>)
 8017ad6:	69db      	ldr	r3, [r3, #28]
 8017ad8:	4a5f      	ldr	r2, [pc, #380]	; (8017c58 <input_parameter+0x274>)
 8017ada:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8017adc:	4b51      	ldr	r3, [pc, #324]	; (8017c24 <input_parameter+0x240>)
 8017ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ae0:	4a5d      	ldr	r2, [pc, #372]	; (8017c58 <input_parameter+0x274>)
 8017ae2:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8017ae4:	4b4f      	ldr	r3, [pc, #316]	; (8017c24 <input_parameter+0x240>)
 8017ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ae8:	4a5b      	ldr	r2, [pc, #364]	; (8017c58 <input_parameter+0x274>)
 8017aea:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017aec:	4b4d      	ldr	r3, [pc, #308]	; (8017c24 <input_parameter+0x240>)
 8017aee:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8017af2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017af6:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017afa:	4b57      	ldr	r3, [pc, #348]	; (8017c58 <input_parameter+0x274>)
 8017afc:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8017b00:	4b48      	ldr	r3, [pc, #288]	; (8017c24 <input_parameter+0x240>)
 8017b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b04:	4a54      	ldr	r2, [pc, #336]	; (8017c58 <input_parameter+0x274>)
 8017b06:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017b08:	4b53      	ldr	r3, [pc, #332]	; (8017c58 <input_parameter+0x274>)
 8017b0a:	685b      	ldr	r3, [r3, #4]
 8017b0c:	4a52      	ldr	r2, [pc, #328]	; (8017c58 <input_parameter+0x274>)
 8017b0e:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8017b10:	4b51      	ldr	r3, [pc, #324]	; (8017c58 <input_parameter+0x274>)
 8017b12:	4a53      	ldr	r2, [pc, #332]	; (8017c60 <input_parameter+0x27c>)
 8017b14:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8017b16:	4b50      	ldr	r3, [pc, #320]	; (8017c58 <input_parameter+0x274>)
 8017b18:	4a52      	ldr	r2, [pc, #328]	; (8017c64 <input_parameter+0x280>)
 8017b1a:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8017b1c:	4b4e      	ldr	r3, [pc, #312]	; (8017c58 <input_parameter+0x274>)
 8017b1e:	4a52      	ldr	r2, [pc, #328]	; (8017c68 <input_parameter+0x284>)
 8017b20:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8017b22:	4b4d      	ldr	r3, [pc, #308]	; (8017c58 <input_parameter+0x274>)
 8017b24:	4a51      	ldr	r2, [pc, #324]	; (8017c6c <input_parameter+0x288>)
 8017b26:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017b28:	4b4b      	ldr	r3, [pc, #300]	; (8017c58 <input_parameter+0x274>)
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	4a4a      	ldr	r2, [pc, #296]	; (8017c58 <input_parameter+0x274>)
 8017b2e:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017b30:	4b49      	ldr	r3, [pc, #292]	; (8017c58 <input_parameter+0x274>)
 8017b32:	4a4b      	ldr	r2, [pc, #300]	; (8017c60 <input_parameter+0x27c>)
 8017b34:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8017b36:	4b48      	ldr	r3, [pc, #288]	; (8017c58 <input_parameter+0x274>)
 8017b38:	4a4a      	ldr	r2, [pc, #296]	; (8017c64 <input_parameter+0x280>)
 8017b3a:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017b3c:	4b46      	ldr	r3, [pc, #280]	; (8017c58 <input_parameter+0x274>)
 8017b3e:	4a4c      	ldr	r2, [pc, #304]	; (8017c70 <input_parameter+0x28c>)
 8017b40:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017b42:	4b45      	ldr	r3, [pc, #276]	; (8017c58 <input_parameter+0x274>)
 8017b44:	4a4b      	ldr	r2, [pc, #300]	; (8017c74 <input_parameter+0x290>)
 8017b46:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017b48:	4b43      	ldr	r3, [pc, #268]	; (8017c58 <input_parameter+0x274>)
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	4a42      	ldr	r2, [pc, #264]	; (8017c58 <input_parameter+0x274>)
 8017b4e:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017b50:	4b41      	ldr	r3, [pc, #260]	; (8017c58 <input_parameter+0x274>)
 8017b52:	4a49      	ldr	r2, [pc, #292]	; (8017c78 <input_parameter+0x294>)
 8017b54:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017b56:	4b40      	ldr	r3, [pc, #256]	; (8017c58 <input_parameter+0x274>)
 8017b58:	4a48      	ldr	r2, [pc, #288]	; (8017c7c <input_parameter+0x298>)
 8017b5a:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017b5c:	4b3e      	ldr	r3, [pc, #248]	; (8017c58 <input_parameter+0x274>)
 8017b5e:	4a48      	ldr	r2, [pc, #288]	; (8017c80 <input_parameter+0x29c>)
 8017b60:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017b62:	4b3d      	ldr	r3, [pc, #244]	; (8017c58 <input_parameter+0x274>)
 8017b64:	4a47      	ldr	r2, [pc, #284]	; (8017c84 <input_parameter+0x2a0>)
 8017b66:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017b68:	4b3b      	ldr	r3, [pc, #236]	; (8017c58 <input_parameter+0x274>)
 8017b6a:	685b      	ldr	r3, [r3, #4]
 8017b6c:	4a3a      	ldr	r2, [pc, #232]	; (8017c58 <input_parameter+0x274>)
 8017b6e:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017b70:	4b39      	ldr	r3, [pc, #228]	; (8017c58 <input_parameter+0x274>)
 8017b72:	4a45      	ldr	r2, [pc, #276]	; (8017c88 <input_parameter+0x2a4>)
 8017b74:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017b76:	4b38      	ldr	r3, [pc, #224]	; (8017c58 <input_parameter+0x274>)
 8017b78:	4a40      	ldr	r2, [pc, #256]	; (8017c7c <input_parameter+0x298>)
 8017b7a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017b7c:	4b36      	ldr	r3, [pc, #216]	; (8017c58 <input_parameter+0x274>)
 8017b7e:	4a43      	ldr	r2, [pc, #268]	; (8017c8c <input_parameter+0x2a8>)
 8017b80:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017b82:	4b35      	ldr	r3, [pc, #212]	; (8017c58 <input_parameter+0x274>)
 8017b84:	4a42      	ldr	r2, [pc, #264]	; (8017c90 <input_parameter+0x2ac>)
 8017b86:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017b88:	4b33      	ldr	r3, [pc, #204]	; (8017c58 <input_parameter+0x274>)
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	4a32      	ldr	r2, [pc, #200]	; (8017c58 <input_parameter+0x274>)
 8017b8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017b92:	4b31      	ldr	r3, [pc, #196]	; (8017c58 <input_parameter+0x274>)
 8017b94:	4a32      	ldr	r2, [pc, #200]	; (8017c60 <input_parameter+0x27c>)
 8017b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017b9a:	4b2f      	ldr	r3, [pc, #188]	; (8017c58 <input_parameter+0x274>)
 8017b9c:	4a31      	ldr	r2, [pc, #196]	; (8017c64 <input_parameter+0x280>)
 8017b9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017ba2:	4b2d      	ldr	r3, [pc, #180]	; (8017c58 <input_parameter+0x274>)
 8017ba4:	4a3b      	ldr	r2, [pc, #236]	; (8017c94 <input_parameter+0x2b0>)
 8017ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017baa:	4b2b      	ldr	r3, [pc, #172]	; (8017c58 <input_parameter+0x274>)
 8017bac:	4a3a      	ldr	r2, [pc, #232]	; (8017c98 <input_parameter+0x2b4>)
 8017bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017bb2:	4b29      	ldr	r3, [pc, #164]	; (8017c58 <input_parameter+0x274>)
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	4a28      	ldr	r2, [pc, #160]	; (8017c58 <input_parameter+0x274>)
 8017bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017bbc:	4b26      	ldr	r3, [pc, #152]	; (8017c58 <input_parameter+0x274>)
 8017bbe:	4a28      	ldr	r2, [pc, #160]	; (8017c60 <input_parameter+0x27c>)
 8017bc0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017bc4:	4b24      	ldr	r3, [pc, #144]	; (8017c58 <input_parameter+0x274>)
 8017bc6:	4a27      	ldr	r2, [pc, #156]	; (8017c64 <input_parameter+0x280>)
 8017bc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017bcc:	4b22      	ldr	r3, [pc, #136]	; (8017c58 <input_parameter+0x274>)
 8017bce:	4a33      	ldr	r2, [pc, #204]	; (8017c9c <input_parameter+0x2b8>)
 8017bd0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017bd4:	4b20      	ldr	r3, [pc, #128]	; (8017c58 <input_parameter+0x274>)
 8017bd6:	4a32      	ldr	r2, [pc, #200]	; (8017ca0 <input_parameter+0x2bc>)
 8017bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017bdc:	4b1e      	ldr	r3, [pc, #120]	; (8017c58 <input_parameter+0x274>)
 8017bde:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8017be0:	4a1d      	ldr	r2, [pc, #116]	; (8017c58 <input_parameter+0x274>)
 8017be2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8017be6:	4b1c      	ldr	r3, [pc, #112]	; (8017c58 <input_parameter+0x274>)
 8017be8:	4a2e      	ldr	r2, [pc, #184]	; (8017ca4 <input_parameter+0x2c0>)
 8017bea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017bee:	4b1a      	ldr	r3, [pc, #104]	; (8017c58 <input_parameter+0x274>)
 8017bf0:	4a22      	ldr	r2, [pc, #136]	; (8017c7c <input_parameter+0x298>)
 8017bf2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8017bf6:	4b18      	ldr	r3, [pc, #96]	; (8017c58 <input_parameter+0x274>)
 8017bf8:	4a2b      	ldr	r2, [pc, #172]	; (8017ca8 <input_parameter+0x2c4>)
 8017bfa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017bfe:	4b16      	ldr	r3, [pc, #88]	; (8017c58 <input_parameter+0x274>)
 8017c00:	4a2a      	ldr	r2, [pc, #168]	; (8017cac <input_parameter+0x2c8>)
 8017c02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017c06:	4b14      	ldr	r3, [pc, #80]	; (8017c58 <input_parameter+0x274>)
 8017c08:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017c0a:	4a13      	ldr	r2, [pc, #76]	; (8017c58 <input_parameter+0x274>)
 8017c0c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017c10:	4b11      	ldr	r3, [pc, #68]	; (8017c58 <input_parameter+0x274>)
 8017c12:	4a24      	ldr	r2, [pc, #144]	; (8017ca4 <input_parameter+0x2c0>)
 8017c14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017c18:	4b0f      	ldr	r3, [pc, #60]	; (8017c58 <input_parameter+0x274>)
 8017c1a:	4a18      	ldr	r2, [pc, #96]	; (8017c7c <input_parameter+0x298>)
 8017c1c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017c20:	4b0d      	ldr	r3, [pc, #52]	; (8017c58 <input_parameter+0x274>)
 8017c22:	e045      	b.n	8017cb0 <input_parameter+0x2cc>
 8017c24:	2000ef80 	.word	0x2000ef80
 8017c28:	43960000 	.word	0x43960000
 8017c2c:	44750000 	.word	0x44750000
 8017c30:	464b2000 	.word	0x464b2000
 8017c34:	40e00000 	.word	0x40e00000
 8017c38:	41a00000 	.word	0x41a00000
 8017c3c:	40400000 	.word	0x40400000
 8017c40:	41980000 	.word	0x41980000
 8017c44:	2000f0c8 	.word	0x2000f0c8
 8017c48:	437a0000 	.word	0x437a0000
 8017c4c:	444f8000 	.word	0x444f8000
 8017c50:	460ca000 	.word	0x460ca000
 8017c54:	44368000 	.word	0x44368000
 8017c58:	2000f210 	.word	0x2000f210
 8017c5c:	43480000 	.word	0x43480000
 8017c60:	44160000 	.word	0x44160000
 8017c64:	461c4000 	.word	0x461c4000
 8017c68:	42980000 	.word	0x42980000
 8017c6c:	42d60000 	.word	0x42d60000
 8017c70:	429a0000 	.word	0x429a0000
 8017c74:	42ce0000 	.word	0x42ce0000
 8017c78:	43d70000 	.word	0x43d70000
 8017c7c:	45fa0000 	.word	0x45fa0000
 8017c80:	42820000 	.word	0x42820000
 8017c84:	42a00000 	.word	0x42a00000
 8017c88:	43e10000 	.word	0x43e10000
 8017c8c:	42700000 	.word	0x42700000
 8017c90:	428e0000 	.word	0x428e0000
 8017c94:	41d80000 	.word	0x41d80000
 8017c98:	42b20000 	.word	0x42b20000
 8017c9c:	42040000 	.word	0x42040000
 8017ca0:	42b40000 	.word	0x42b40000
 8017ca4:	44188000 	.word	0x44188000
 8017ca8:	42860000 	.word	0x42860000
 8017cac:	42920000 	.word	0x42920000
 8017cb0:	4a99      	ldr	r2, [pc, #612]	; (8017f18 <input_parameter+0x534>)
 8017cb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8017cb6:	4b99      	ldr	r3, [pc, #612]	; (8017f1c <input_parameter+0x538>)
 8017cb8:	4a99      	ldr	r2, [pc, #612]	; (8017f20 <input_parameter+0x53c>)
 8017cba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017cbe:	4b97      	ldr	r3, [pc, #604]	; (8017f1c <input_parameter+0x538>)
 8017cc0:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017cc2:	4a96      	ldr	r2, [pc, #600]	; (8017f1c <input_parameter+0x538>)
 8017cc4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8017cc8:	4b94      	ldr	r3, [pc, #592]	; (8017f1c <input_parameter+0x538>)
 8017cca:	4a96      	ldr	r2, [pc, #600]	; (8017f24 <input_parameter+0x540>)
 8017ccc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017cd0:	4b92      	ldr	r3, [pc, #584]	; (8017f1c <input_parameter+0x538>)
 8017cd2:	4a95      	ldr	r2, [pc, #596]	; (8017f28 <input_parameter+0x544>)
 8017cd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8017cd8:	4b90      	ldr	r3, [pc, #576]	; (8017f1c <input_parameter+0x538>)
 8017cda:	4a94      	ldr	r2, [pc, #592]	; (8017f2c <input_parameter+0x548>)
 8017cdc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017ce0:	4b8e      	ldr	r3, [pc, #568]	; (8017f1c <input_parameter+0x538>)
 8017ce2:	4a92      	ldr	r2, [pc, #584]	; (8017f2c <input_parameter+0x548>)
 8017ce4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ce8:	4b8c      	ldr	r3, [pc, #560]	; (8017f1c <input_parameter+0x538>)
 8017cea:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8017cec:	4a8b      	ldr	r2, [pc, #556]	; (8017f1c <input_parameter+0x538>)
 8017cee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017cf2:	4b8a      	ldr	r3, [pc, #552]	; (8017f1c <input_parameter+0x538>)
 8017cf4:	4a8b      	ldr	r2, [pc, #556]	; (8017f24 <input_parameter+0x540>)
 8017cf6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8017cfa:	4b88      	ldr	r3, [pc, #544]	; (8017f1c <input_parameter+0x538>)
 8017cfc:	4a8a      	ldr	r2, [pc, #552]	; (8017f28 <input_parameter+0x544>)
 8017cfe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017d02:	4b86      	ldr	r3, [pc, #536]	; (8017f1c <input_parameter+0x538>)
 8017d04:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8017d08:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8017d0c:	4b83      	ldr	r3, [pc, #524]	; (8017f1c <input_parameter+0x538>)
 8017d0e:	4a88      	ldr	r2, [pc, #544]	; (8017f30 <input_parameter+0x54c>)
 8017d10:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017d14:	4b81      	ldr	r3, [pc, #516]	; (8017f1c <input_parameter+0x538>)
 8017d16:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8017d18:	4a80      	ldr	r2, [pc, #512]	; (8017f1c <input_parameter+0x538>)
 8017d1a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8017d1e:	4b7f      	ldr	r3, [pc, #508]	; (8017f1c <input_parameter+0x538>)
 8017d20:	4a84      	ldr	r2, [pc, #528]	; (8017f34 <input_parameter+0x550>)
 8017d22:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8017d26:	4b7d      	ldr	r3, [pc, #500]	; (8017f1c <input_parameter+0x538>)
 8017d28:	4a83      	ldr	r2, [pc, #524]	; (8017f38 <input_parameter+0x554>)
 8017d2a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8017d2e:	4b7b      	ldr	r3, [pc, #492]	; (8017f1c <input_parameter+0x538>)
 8017d30:	4a82      	ldr	r2, [pc, #520]	; (8017f3c <input_parameter+0x558>)
 8017d32:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8017d36:	4b79      	ldr	r3, [pc, #484]	; (8017f1c <input_parameter+0x538>)
 8017d38:	4a81      	ldr	r2, [pc, #516]	; (8017f40 <input_parameter+0x55c>)
 8017d3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017d3e:	4b77      	ldr	r3, [pc, #476]	; (8017f1c <input_parameter+0x538>)
 8017d40:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8017d42:	4a76      	ldr	r2, [pc, #472]	; (8017f1c <input_parameter+0x538>)
 8017d44:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8017d48:	4b74      	ldr	r3, [pc, #464]	; (8017f1c <input_parameter+0x538>)
 8017d4a:	4a7a      	ldr	r2, [pc, #488]	; (8017f34 <input_parameter+0x550>)
 8017d4c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017d50:	4b72      	ldr	r3, [pc, #456]	; (8017f1c <input_parameter+0x538>)
 8017d52:	4a79      	ldr	r2, [pc, #484]	; (8017f38 <input_parameter+0x554>)
 8017d54:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8017d58:	4b70      	ldr	r3, [pc, #448]	; (8017f1c <input_parameter+0x538>)
 8017d5a:	4a78      	ldr	r2, [pc, #480]	; (8017f3c <input_parameter+0x558>)
 8017d5c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017d60:	4b6e      	ldr	r3, [pc, #440]	; (8017f1c <input_parameter+0x538>)
 8017d62:	4a78      	ldr	r2, [pc, #480]	; (8017f44 <input_parameter+0x560>)
 8017d64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017d68:	4b6c      	ldr	r3, [pc, #432]	; (8017f1c <input_parameter+0x538>)
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	4a6b      	ldr	r2, [pc, #428]	; (8017f1c <input_parameter+0x538>)
 8017d6e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8017d72:	4b6a      	ldr	r3, [pc, #424]	; (8017f1c <input_parameter+0x538>)
 8017d74:	4a74      	ldr	r2, [pc, #464]	; (8017f48 <input_parameter+0x564>)
 8017d76:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8017d7a:	4b68      	ldr	r3, [pc, #416]	; (8017f1c <input_parameter+0x538>)
 8017d7c:	4a73      	ldr	r2, [pc, #460]	; (8017f4c <input_parameter+0x568>)
 8017d7e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8017d82:	4b66      	ldr	r3, [pc, #408]	; (8017f1c <input_parameter+0x538>)
 8017d84:	4a72      	ldr	r2, [pc, #456]	; (8017f50 <input_parameter+0x56c>)
 8017d86:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8017d8a:	4b64      	ldr	r3, [pc, #400]	; (8017f1c <input_parameter+0x538>)
 8017d8c:	4a71      	ldr	r2, [pc, #452]	; (8017f54 <input_parameter+0x570>)
 8017d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017d92:	4b62      	ldr	r3, [pc, #392]	; (8017f1c <input_parameter+0x538>)
 8017d94:	685b      	ldr	r3, [r3, #4]
 8017d96:	4a61      	ldr	r2, [pc, #388]	; (8017f1c <input_parameter+0x538>)
 8017d98:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017d9c:	4b5f      	ldr	r3, [pc, #380]	; (8017f1c <input_parameter+0x538>)
 8017d9e:	4a6a      	ldr	r2, [pc, #424]	; (8017f48 <input_parameter+0x564>)
 8017da0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8017da4:	4b5d      	ldr	r3, [pc, #372]	; (8017f1c <input_parameter+0x538>)
 8017da6:	4a69      	ldr	r2, [pc, #420]	; (8017f4c <input_parameter+0x568>)
 8017da8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017dac:	4b5b      	ldr	r3, [pc, #364]	; (8017f1c <input_parameter+0x538>)
 8017dae:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017db2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 8017db6:	4b59      	ldr	r3, [pc, #356]	; (8017f1c <input_parameter+0x538>)
 8017db8:	4a67      	ldr	r2, [pc, #412]	; (8017f58 <input_parameter+0x574>)
 8017dba:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8017dbe:	4b67      	ldr	r3, [pc, #412]	; (8017f5c <input_parameter+0x578>)
 8017dc0:	4a58      	ldr	r2, [pc, #352]	; (8017f24 <input_parameter+0x540>)
 8017dc2:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8017dc4:	4b65      	ldr	r3, [pc, #404]	; (8017f5c <input_parameter+0x578>)
 8017dc6:	4a57      	ldr	r2, [pc, #348]	; (8017f24 <input_parameter+0x540>)
 8017dc8:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017dca:	4b64      	ldr	r3, [pc, #400]	; (8017f5c <input_parameter+0x578>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8017dce:	4a63      	ldr	r2, [pc, #396]	; (8017f5c <input_parameter+0x578>)
 8017dd0:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8017dd2:	4b62      	ldr	r3, [pc, #392]	; (8017f5c <input_parameter+0x578>)
 8017dd4:	4a62      	ldr	r2, [pc, #392]	; (8017f60 <input_parameter+0x57c>)
 8017dd6:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8017dd8:	4b60      	ldr	r3, [pc, #384]	; (8017f5c <input_parameter+0x578>)
 8017dda:	4a62      	ldr	r2, [pc, #392]	; (8017f64 <input_parameter+0x580>)
 8017ddc:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8017dde:	4b5f      	ldr	r3, [pc, #380]	; (8017f5c <input_parameter+0x578>)
 8017de0:	4a61      	ldr	r2, [pc, #388]	; (8017f68 <input_parameter+0x584>)
 8017de2:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8017de4:	4b5d      	ldr	r3, [pc, #372]	; (8017f5c <input_parameter+0x578>)
 8017de6:	4a61      	ldr	r2, [pc, #388]	; (8017f6c <input_parameter+0x588>)
 8017de8:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017dea:	4b5c      	ldr	r3, [pc, #368]	; (8017f5c <input_parameter+0x578>)
 8017dec:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 8017dee:	4a5b      	ldr	r2, [pc, #364]	; (8017f5c <input_parameter+0x578>)
 8017df0:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8017df2:	4b5a      	ldr	r3, [pc, #360]	; (8017f5c <input_parameter+0x578>)
 8017df4:	4a5a      	ldr	r2, [pc, #360]	; (8017f60 <input_parameter+0x57c>)
 8017df6:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8017df8:	4b58      	ldr	r3, [pc, #352]	; (8017f5c <input_parameter+0x578>)
 8017dfa:	4a5a      	ldr	r2, [pc, #360]	; (8017f64 <input_parameter+0x580>)
 8017dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8017dfe:	4b57      	ldr	r3, [pc, #348]	; (8017f5c <input_parameter+0x578>)
 8017e00:	4a59      	ldr	r2, [pc, #356]	; (8017f68 <input_parameter+0x584>)
 8017e02:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8017e04:	4b55      	ldr	r3, [pc, #340]	; (8017f5c <input_parameter+0x578>)
 8017e06:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017e0a:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8017e0c:	4b53      	ldr	r3, [pc, #332]	; (8017f5c <input_parameter+0x578>)
 8017e0e:	4a45      	ldr	r2, [pc, #276]	; (8017f24 <input_parameter+0x540>)
 8017e10:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8017e12:	4b52      	ldr	r3, [pc, #328]	; (8017f5c <input_parameter+0x578>)
 8017e14:	4a56      	ldr	r2, [pc, #344]	; (8017f70 <input_parameter+0x58c>)
 8017e16:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8017e18:	4b50      	ldr	r3, [pc, #320]	; (8017f5c <input_parameter+0x578>)
 8017e1a:	4a56      	ldr	r2, [pc, #344]	; (8017f74 <input_parameter+0x590>)
 8017e1c:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8017e1e:	4b4f      	ldr	r3, [pc, #316]	; (8017f5c <input_parameter+0x578>)
 8017e20:	4a55      	ldr	r2, [pc, #340]	; (8017f78 <input_parameter+0x594>)
 8017e22:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8017e24:	4b4d      	ldr	r3, [pc, #308]	; (8017f5c <input_parameter+0x578>)
 8017e26:	4a54      	ldr	r2, [pc, #336]	; (8017f78 <input_parameter+0x594>)
 8017e28:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8017e2a:	4b4c      	ldr	r3, [pc, #304]	; (8017f5c <input_parameter+0x578>)
 8017e2c:	4a3d      	ldr	r2, [pc, #244]	; (8017f24 <input_parameter+0x540>)
 8017e2e:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8017e30:	4b4a      	ldr	r3, [pc, #296]	; (8017f5c <input_parameter+0x578>)
 8017e32:	4a4f      	ldr	r2, [pc, #316]	; (8017f70 <input_parameter+0x58c>)
 8017e34:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8017e36:	4b49      	ldr	r3, [pc, #292]	; (8017f5c <input_parameter+0x578>)
 8017e38:	4a4e      	ldr	r2, [pc, #312]	; (8017f74 <input_parameter+0x590>)
 8017e3a:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8017e3c:	4b47      	ldr	r3, [pc, #284]	; (8017f5c <input_parameter+0x578>)
 8017e3e:	4a4e      	ldr	r2, [pc, #312]	; (8017f78 <input_parameter+0x594>)
 8017e40:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8017e42:	4b46      	ldr	r3, [pc, #280]	; (8017f5c <input_parameter+0x578>)
 8017e44:	4a42      	ldr	r2, [pc, #264]	; (8017f50 <input_parameter+0x56c>)
 8017e46:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8017e48:	4b44      	ldr	r3, [pc, #272]	; (8017f5c <input_parameter+0x578>)
 8017e4a:	4a36      	ldr	r2, [pc, #216]	; (8017f24 <input_parameter+0x540>)
 8017e4c:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8017e4e:	4b43      	ldr	r3, [pc, #268]	; (8017f5c <input_parameter+0x578>)
 8017e50:	4a4a      	ldr	r2, [pc, #296]	; (8017f7c <input_parameter+0x598>)
 8017e52:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017e54:	4b41      	ldr	r3, [pc, #260]	; (8017f5c <input_parameter+0x578>)
 8017e56:	4a4a      	ldr	r2, [pc, #296]	; (8017f80 <input_parameter+0x59c>)
 8017e58:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8017e5a:	4b40      	ldr	r3, [pc, #256]	; (8017f5c <input_parameter+0x578>)
 8017e5c:	4a49      	ldr	r2, [pc, #292]	; (8017f84 <input_parameter+0x5a0>)
 8017e5e:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8017e60:	4b3e      	ldr	r3, [pc, #248]	; (8017f5c <input_parameter+0x578>)
 8017e62:	4a49      	ldr	r2, [pc, #292]	; (8017f88 <input_parameter+0x5a4>)
 8017e64:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8017e66:	4b3d      	ldr	r3, [pc, #244]	; (8017f5c <input_parameter+0x578>)
 8017e68:	4a2e      	ldr	r2, [pc, #184]	; (8017f24 <input_parameter+0x540>)
 8017e6a:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8017e6c:	4b3b      	ldr	r3, [pc, #236]	; (8017f5c <input_parameter+0x578>)
 8017e6e:	4a47      	ldr	r2, [pc, #284]	; (8017f8c <input_parameter+0x5a8>)
 8017e70:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8017e72:	4b3a      	ldr	r3, [pc, #232]	; (8017f5c <input_parameter+0x578>)
 8017e74:	4a42      	ldr	r2, [pc, #264]	; (8017f80 <input_parameter+0x59c>)
 8017e76:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8017e78:	4b38      	ldr	r3, [pc, #224]	; (8017f5c <input_parameter+0x578>)
 8017e7a:	4a42      	ldr	r2, [pc, #264]	; (8017f84 <input_parameter+0x5a0>)
 8017e7c:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8017e7e:	4b37      	ldr	r3, [pc, #220]	; (8017f5c <input_parameter+0x578>)
 8017e80:	4a43      	ldr	r2, [pc, #268]	; (8017f90 <input_parameter+0x5ac>)
 8017e82:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8017e84:	4b35      	ldr	r3, [pc, #212]	; (8017f5c <input_parameter+0x578>)
 8017e86:	4a27      	ldr	r2, [pc, #156]	; (8017f24 <input_parameter+0x540>)
 8017e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8017e8c:	4b33      	ldr	r3, [pc, #204]	; (8017f5c <input_parameter+0x578>)
 8017e8e:	4a41      	ldr	r2, [pc, #260]	; (8017f94 <input_parameter+0x5b0>)
 8017e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8017e94:	4b31      	ldr	r3, [pc, #196]	; (8017f5c <input_parameter+0x578>)
 8017e96:	4a40      	ldr	r2, [pc, #256]	; (8017f98 <input_parameter+0x5b4>)
 8017e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8017e9c:	4b2f      	ldr	r3, [pc, #188]	; (8017f5c <input_parameter+0x578>)
 8017e9e:	4a3f      	ldr	r2, [pc, #252]	; (8017f9c <input_parameter+0x5b8>)
 8017ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8017ea4:	4b2d      	ldr	r3, [pc, #180]	; (8017f5c <input_parameter+0x578>)
 8017ea6:	4a3e      	ldr	r2, [pc, #248]	; (8017fa0 <input_parameter+0x5bc>)
 8017ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8017eac:	4b2b      	ldr	r3, [pc, #172]	; (8017f5c <input_parameter+0x578>)
 8017eae:	4a1d      	ldr	r2, [pc, #116]	; (8017f24 <input_parameter+0x540>)
 8017eb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8017eb4:	4b29      	ldr	r3, [pc, #164]	; (8017f5c <input_parameter+0x578>)
 8017eb6:	4a3b      	ldr	r2, [pc, #236]	; (8017fa4 <input_parameter+0x5c0>)
 8017eb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8017ebc:	4b27      	ldr	r3, [pc, #156]	; (8017f5c <input_parameter+0x578>)
 8017ebe:	4a36      	ldr	r2, [pc, #216]	; (8017f98 <input_parameter+0x5b4>)
 8017ec0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8017ec4:	4b25      	ldr	r3, [pc, #148]	; (8017f5c <input_parameter+0x578>)
 8017ec6:	4a38      	ldr	r2, [pc, #224]	; (8017fa8 <input_parameter+0x5c4>)
 8017ec8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8017ecc:	4b23      	ldr	r3, [pc, #140]	; (8017f5c <input_parameter+0x578>)
 8017ece:	4a37      	ldr	r2, [pc, #220]	; (8017fac <input_parameter+0x5c8>)
 8017ed0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8017ed4:	4b21      	ldr	r3, [pc, #132]	; (8017f5c <input_parameter+0x578>)
 8017ed6:	4a13      	ldr	r2, [pc, #76]	; (8017f24 <input_parameter+0x540>)
 8017ed8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8017edc:	4b1f      	ldr	r3, [pc, #124]	; (8017f5c <input_parameter+0x578>)
 8017ede:	4a34      	ldr	r2, [pc, #208]	; (8017fb0 <input_parameter+0x5cc>)
 8017ee0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8017ee4:	4b1d      	ldr	r3, [pc, #116]	; (8017f5c <input_parameter+0x578>)
 8017ee6:	4a26      	ldr	r2, [pc, #152]	; (8017f80 <input_parameter+0x59c>)
 8017ee8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 8017eec:	4b1b      	ldr	r3, [pc, #108]	; (8017f5c <input_parameter+0x578>)
 8017eee:	4a31      	ldr	r2, [pc, #196]	; (8017fb4 <input_parameter+0x5d0>)
 8017ef0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8017ef4:	4b19      	ldr	r3, [pc, #100]	; (8017f5c <input_parameter+0x578>)
 8017ef6:	4a2d      	ldr	r2, [pc, #180]	; (8017fac <input_parameter+0x5c8>)
 8017ef8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 8017efc:	4b17      	ldr	r3, [pc, #92]	; (8017f5c <input_parameter+0x578>)
 8017efe:	4a09      	ldr	r2, [pc, #36]	; (8017f24 <input_parameter+0x540>)
 8017f00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8017f04:	4b15      	ldr	r3, [pc, #84]	; (8017f5c <input_parameter+0x578>)
 8017f06:	4a2c      	ldr	r2, [pc, #176]	; (8017fb8 <input_parameter+0x5d4>)
 8017f08:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 8017f0c:	4b13      	ldr	r3, [pc, #76]	; (8017f5c <input_parameter+0x578>)
 8017f0e:	4a1c      	ldr	r2, [pc, #112]	; (8017f80 <input_parameter+0x59c>)
 8017f10:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8017f14:	e052      	b.n	8017fbc <input_parameter+0x5d8>
 8017f16:	bf00      	nop
 8017f18:	42860000 	.word	0x42860000
 8017f1c:	2000f210 	.word	0x2000f210
 8017f20:	42920000 	.word	0x42920000
 8017f24:	44160000 	.word	0x44160000
 8017f28:	461c4000 	.word	0x461c4000
 8017f2c:	42640000 	.word	0x42640000
 8017f30:	42500000 	.word	0x42500000
 8017f34:	44250000 	.word	0x44250000
 8017f38:	45fa0000 	.word	0x45fa0000
 8017f3c:	425c0000 	.word	0x425c0000
 8017f40:	42c80000 	.word	0x42c80000
 8017f44:	42ce0000 	.word	0x42ce0000
 8017f48:	442f0000 	.word	0x442f0000
 8017f4c:	462be000 	.word	0x462be000
 8017f50:	420c0000 	.word	0x420c0000
 8017f54:	42600000 	.word	0x42600000
 8017f58:	42700000 	.word	0x42700000
 8017f5c:	2000f358 	.word	0x2000f358
 8017f60:	44898000 	.word	0x44898000
 8017f64:	476a6000 	.word	0x476a6000
 8017f68:	40a00000 	.word	0x40a00000
 8017f6c:	41e00000 	.word	0x41e00000
 8017f70:	446d8000 	.word	0x446d8000
 8017f74:	466a6000 	.word	0x466a6000
 8017f78:	41f80000 	.word	0x41f80000
 8017f7c:	44520000 	.word	0x44520000
 8017f80:	465ac000 	.word	0x465ac000
 8017f84:	40e00000 	.word	0x40e00000
 8017f88:	41a00000 	.word	0x41a00000
 8017f8c:	444d0000 	.word	0x444d0000
 8017f90:	41900000 	.word	0x41900000
 8017f94:	444f8000 	.word	0x444f8000
 8017f98:	463b8000 	.word	0x463b8000
 8017f9c:	41500000 	.word	0x41500000
 8017fa0:	42180000 	.word	0x42180000
 8017fa4:	44608000 	.word	0x44608000
 8017fa8:	41400000 	.word	0x41400000
 8017fac:	42100000 	.word	0x42100000
 8017fb0:	446b0000 	.word	0x446b0000
 8017fb4:	41180000 	.word	0x41180000
 8017fb8:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8017fbc:	4b9e      	ldr	r3, [pc, #632]	; (8018238 <input_parameter+0x854>)
 8017fbe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017fc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8017fc6:	4b9c      	ldr	r3, [pc, #624]	; (8018238 <input_parameter+0x854>)
 8017fc8:	4a9c      	ldr	r2, [pc, #624]	; (801823c <input_parameter+0x858>)
 8017fca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8017fce:	4b9a      	ldr	r3, [pc, #616]	; (8018238 <input_parameter+0x854>)
 8017fd0:	4a9b      	ldr	r2, [pc, #620]	; (8018240 <input_parameter+0x85c>)
 8017fd2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8017fd6:	4b98      	ldr	r3, [pc, #608]	; (8018238 <input_parameter+0x854>)
 8017fd8:	4a9a      	ldr	r2, [pc, #616]	; (8018244 <input_parameter+0x860>)
 8017fda:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8017fde:	4b96      	ldr	r3, [pc, #600]	; (8018238 <input_parameter+0x854>)
 8017fe0:	4a99      	ldr	r2, [pc, #612]	; (8018248 <input_parameter+0x864>)
 8017fe2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8017fe6:	4b94      	ldr	r3, [pc, #592]	; (8018238 <input_parameter+0x854>)
 8017fe8:	4a98      	ldr	r2, [pc, #608]	; (801824c <input_parameter+0x868>)
 8017fea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8017fee:	4b92      	ldr	r3, [pc, #584]	; (8018238 <input_parameter+0x854>)
 8017ff0:	4a97      	ldr	r2, [pc, #604]	; (8018250 <input_parameter+0x86c>)
 8017ff2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8017ff6:	4b90      	ldr	r3, [pc, #576]	; (8018238 <input_parameter+0x854>)
 8017ff8:	4a91      	ldr	r2, [pc, #580]	; (8018240 <input_parameter+0x85c>)
 8017ffa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 8017ffe:	4b8e      	ldr	r3, [pc, #568]	; (8018238 <input_parameter+0x854>)
 8018000:	4a94      	ldr	r2, [pc, #592]	; (8018254 <input_parameter+0x870>)
 8018002:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8018006:	4b8c      	ldr	r3, [pc, #560]	; (8018238 <input_parameter+0x854>)
 8018008:	4a8f      	ldr	r2, [pc, #572]	; (8018248 <input_parameter+0x864>)
 801800a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 801800e:	4b8a      	ldr	r3, [pc, #552]	; (8018238 <input_parameter+0x854>)
 8018010:	4a91      	ldr	r2, [pc, #580]	; (8018258 <input_parameter+0x874>)
 8018012:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018016:	4b88      	ldr	r3, [pc, #544]	; (8018238 <input_parameter+0x854>)
 8018018:	4a90      	ldr	r2, [pc, #576]	; (801825c <input_parameter+0x878>)
 801801a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 801801e:	4b86      	ldr	r3, [pc, #536]	; (8018238 <input_parameter+0x854>)
 8018020:	4a87      	ldr	r2, [pc, #540]	; (8018240 <input_parameter+0x85c>)
 8018022:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8018026:	4b84      	ldr	r3, [pc, #528]	; (8018238 <input_parameter+0x854>)
 8018028:	4a8d      	ldr	r2, [pc, #564]	; (8018260 <input_parameter+0x87c>)
 801802a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 801802e:	4b82      	ldr	r3, [pc, #520]	; (8018238 <input_parameter+0x854>)
 8018030:	4a8c      	ldr	r2, [pc, #560]	; (8018264 <input_parameter+0x880>)
 8018032:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8018036:	4b80      	ldr	r3, [pc, #512]	; (8018238 <input_parameter+0x854>)
 8018038:	4a8b      	ldr	r2, [pc, #556]	; (8018268 <input_parameter+0x884>)
 801803a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 801803e:	4b7e      	ldr	r3, [pc, #504]	; (8018238 <input_parameter+0x854>)
 8018040:	4a83      	ldr	r2, [pc, #524]	; (8018250 <input_parameter+0x86c>)
 8018042:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 8018046:	4b7c      	ldr	r3, [pc, #496]	; (8018238 <input_parameter+0x854>)
 8018048:	4a7d      	ldr	r2, [pc, #500]	; (8018240 <input_parameter+0x85c>)
 801804a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 801804e:	4b7a      	ldr	r3, [pc, #488]	; (8018238 <input_parameter+0x854>)
 8018050:	4a86      	ldr	r2, [pc, #536]	; (801826c <input_parameter+0x888>)
 8018052:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 8018056:	4b78      	ldr	r3, [pc, #480]	; (8018238 <input_parameter+0x854>)
 8018058:	4a85      	ldr	r2, [pc, #532]	; (8018270 <input_parameter+0x88c>)
 801805a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 801805e:	4b76      	ldr	r3, [pc, #472]	; (8018238 <input_parameter+0x854>)
 8018060:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018064:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8018068:	4b73      	ldr	r3, [pc, #460]	; (8018238 <input_parameter+0x854>)
 801806a:	4a82      	ldr	r2, [pc, #520]	; (8018274 <input_parameter+0x890>)
 801806c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8018070:	4b71      	ldr	r3, [pc, #452]	; (8018238 <input_parameter+0x854>)
 8018072:	4a73      	ldr	r2, [pc, #460]	; (8018240 <input_parameter+0x85c>)
 8018074:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8018078:	4b6f      	ldr	r3, [pc, #444]	; (8018238 <input_parameter+0x854>)
 801807a:	4a7f      	ldr	r2, [pc, #508]	; (8018278 <input_parameter+0x894>)
 801807c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8018080:	4b6d      	ldr	r3, [pc, #436]	; (8018238 <input_parameter+0x854>)
 8018082:	4a78      	ldr	r2, [pc, #480]	; (8018264 <input_parameter+0x880>)
 8018084:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8018088:	4b6b      	ldr	r3, [pc, #428]	; (8018238 <input_parameter+0x854>)
 801808a:	4a7c      	ldr	r2, [pc, #496]	; (801827c <input_parameter+0x898>)
 801808c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8018090:	4b69      	ldr	r3, [pc, #420]	; (8018238 <input_parameter+0x854>)
 8018092:	4a7b      	ldr	r2, [pc, #492]	; (8018280 <input_parameter+0x89c>)
 8018094:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8018098:	4b67      	ldr	r3, [pc, #412]	; (8018238 <input_parameter+0x854>)
 801809a:	4a69      	ldr	r2, [pc, #420]	; (8018240 <input_parameter+0x85c>)
 801809c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 80180a0:	4b65      	ldr	r3, [pc, #404]	; (8018238 <input_parameter+0x854>)
 80180a2:	4a78      	ldr	r2, [pc, #480]	; (8018284 <input_parameter+0x8a0>)
 80180a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 80180a8:	4b63      	ldr	r3, [pc, #396]	; (8018238 <input_parameter+0x854>)
 80180aa:	4a77      	ldr	r2, [pc, #476]	; (8018288 <input_parameter+0x8a4>)
 80180ac:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 80180b0:	4b61      	ldr	r3, [pc, #388]	; (8018238 <input_parameter+0x854>)
 80180b2:	4a76      	ldr	r2, [pc, #472]	; (801828c <input_parameter+0x8a8>)
 80180b4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 80180b8:	4b5f      	ldr	r3, [pc, #380]	; (8018238 <input_parameter+0x854>)
 80180ba:	4a71      	ldr	r2, [pc, #452]	; (8018280 <input_parameter+0x89c>)
 80180bc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 80180c0:	4b73      	ldr	r3, [pc, #460]	; (8018290 <input_parameter+0x8ac>)
 80180c2:	4a74      	ldr	r2, [pc, #464]	; (8018294 <input_parameter+0x8b0>)
 80180c4:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 80180c6:	4b72      	ldr	r3, [pc, #456]	; (8018290 <input_parameter+0x8ac>)
 80180c8:	4a72      	ldr	r2, [pc, #456]	; (8018294 <input_parameter+0x8b0>)
 80180ca:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 80180cc:	4b70      	ldr	r3, [pc, #448]	; (8018290 <input_parameter+0x8ac>)
 80180ce:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 80180d0:	4a6f      	ldr	r2, [pc, #444]	; (8018290 <input_parameter+0x8ac>)
 80180d2:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 80180d4:	4b6e      	ldr	r3, [pc, #440]	; (8018290 <input_parameter+0x8ac>)
 80180d6:	4a70      	ldr	r2, [pc, #448]	; (8018298 <input_parameter+0x8b4>)
 80180d8:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 80180da:	4b6d      	ldr	r3, [pc, #436]	; (8018290 <input_parameter+0x8ac>)
 80180dc:	4a62      	ldr	r2, [pc, #392]	; (8018268 <input_parameter+0x884>)
 80180de:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 80180e0:	4b6b      	ldr	r3, [pc, #428]	; (8018290 <input_parameter+0x8ac>)
 80180e2:	4a6e      	ldr	r2, [pc, #440]	; (801829c <input_parameter+0x8b8>)
 80180e4:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 80180e6:	4b6a      	ldr	r3, [pc, #424]	; (8018290 <input_parameter+0x8ac>)
 80180e8:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 80180ea:	4a69      	ldr	r2, [pc, #420]	; (8018290 <input_parameter+0x8ac>)
 80180ec:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 80180ee:	4b68      	ldr	r3, [pc, #416]	; (8018290 <input_parameter+0x8ac>)
 80180f0:	4a69      	ldr	r2, [pc, #420]	; (8018298 <input_parameter+0x8b4>)
 80180f2:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 80180f4:	4b66      	ldr	r3, [pc, #408]	; (8018290 <input_parameter+0x8ac>)
 80180f6:	4a5c      	ldr	r2, [pc, #368]	; (8018268 <input_parameter+0x884>)
 80180f8:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 80180fa:	4b65      	ldr	r3, [pc, #404]	; (8018290 <input_parameter+0x8ac>)
 80180fc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018100:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 8018102:	4b63      	ldr	r3, [pc, #396]	; (8018290 <input_parameter+0x8ac>)
 8018104:	4a63      	ldr	r2, [pc, #396]	; (8018294 <input_parameter+0x8b0>)
 8018106:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 8018108:	4b61      	ldr	r3, [pc, #388]	; (8018290 <input_parameter+0x8ac>)
 801810a:	4a65      	ldr	r2, [pc, #404]	; (80182a0 <input_parameter+0x8bc>)
 801810c:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 32;
 801810e:	4b60      	ldr	r3, [pc, #384]	; (8018290 <input_parameter+0x8ac>)
 8018110:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018114:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 8018116:	4b5e      	ldr	r3, [pc, #376]	; (8018290 <input_parameter+0x8ac>)
 8018118:	4a62      	ldr	r2, [pc, #392]	; (80182a4 <input_parameter+0x8c0>)
 801811a:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 801811c:	4b5c      	ldr	r3, [pc, #368]	; (8018290 <input_parameter+0x8ac>)
 801811e:	4a5d      	ldr	r2, [pc, #372]	; (8018294 <input_parameter+0x8b0>)
 8018120:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8018122:	4b5b      	ldr	r3, [pc, #364]	; (8018290 <input_parameter+0x8ac>)
 8018124:	4a5e      	ldr	r2, [pc, #376]	; (80182a0 <input_parameter+0x8bc>)
 8018126:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 32;
 8018128:	4b59      	ldr	r3, [pc, #356]	; (8018290 <input_parameter+0x8ac>)
 801812a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801812e:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 8018130:	4b57      	ldr	r3, [pc, #348]	; (8018290 <input_parameter+0x8ac>)
 8018132:	4a5d      	ldr	r2, [pc, #372]	; (80182a8 <input_parameter+0x8c4>)
 8018134:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 8018136:	4b56      	ldr	r3, [pc, #344]	; (8018290 <input_parameter+0x8ac>)
 8018138:	4a56      	ldr	r2, [pc, #344]	; (8018294 <input_parameter+0x8b0>)
 801813a:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 801813c:	4b54      	ldr	r3, [pc, #336]	; (8018290 <input_parameter+0x8ac>)
 801813e:	4a5b      	ldr	r2, [pc, #364]	; (80182ac <input_parameter+0x8c8>)
 8018140:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 20;
 8018142:	4b53      	ldr	r3, [pc, #332]	; (8018290 <input_parameter+0x8ac>)
 8018144:	4a4e      	ldr	r2, [pc, #312]	; (8018280 <input_parameter+0x89c>)
 8018146:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 8018148:	4b51      	ldr	r3, [pc, #324]	; (8018290 <input_parameter+0x8ac>)
 801814a:	4a4d      	ldr	r2, [pc, #308]	; (8018280 <input_parameter+0x89c>)
 801814c:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 801814e:	4b50      	ldr	r3, [pc, #320]	; (8018290 <input_parameter+0x8ac>)
 8018150:	4a50      	ldr	r2, [pc, #320]	; (8018294 <input_parameter+0x8b0>)
 8018152:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018154:	4b4e      	ldr	r3, [pc, #312]	; (8018290 <input_parameter+0x8ac>)
 8018156:	4a55      	ldr	r2, [pc, #340]	; (80182ac <input_parameter+0x8c8>)
 8018158:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 20;
 801815a:	4b4d      	ldr	r3, [pc, #308]	; (8018290 <input_parameter+0x8ac>)
 801815c:	4a48      	ldr	r2, [pc, #288]	; (8018280 <input_parameter+0x89c>)
 801815e:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018160:	4b4b      	ldr	r3, [pc, #300]	; (8018290 <input_parameter+0x8ac>)
 8018162:	4a53      	ldr	r2, [pc, #332]	; (80182b0 <input_parameter+0x8cc>)
 8018164:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 8018166:	4b4a      	ldr	r3, [pc, #296]	; (8018290 <input_parameter+0x8ac>)
 8018168:	4a4a      	ldr	r2, [pc, #296]	; (8018294 <input_parameter+0x8b0>)
 801816a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 801816e:	4b48      	ldr	r3, [pc, #288]	; (8018290 <input_parameter+0x8ac>)
 8018170:	4a50      	ldr	r2, [pc, #320]	; (80182b4 <input_parameter+0x8d0>)
 8018172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 20;
 8018176:	4b46      	ldr	r3, [pc, #280]	; (8018290 <input_parameter+0x8ac>)
 8018178:	4a41      	ldr	r2, [pc, #260]	; (8018280 <input_parameter+0x89c>)
 801817a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 801817e:	4b44      	ldr	r3, [pc, #272]	; (8018290 <input_parameter+0x8ac>)
 8018180:	4a4d      	ldr	r2, [pc, #308]	; (80182b8 <input_parameter+0x8d4>)
 8018182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 8018186:	4b42      	ldr	r3, [pc, #264]	; (8018290 <input_parameter+0x8ac>)
 8018188:	4a42      	ldr	r2, [pc, #264]	; (8018294 <input_parameter+0x8b0>)
 801818a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 801818e:	4b40      	ldr	r3, [pc, #256]	; (8018290 <input_parameter+0x8ac>)
 8018190:	4a48      	ldr	r2, [pc, #288]	; (80182b4 <input_parameter+0x8d0>)
 8018192:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 20;
 8018196:	4b3e      	ldr	r3, [pc, #248]	; (8018290 <input_parameter+0x8ac>)
 8018198:	4a39      	ldr	r2, [pc, #228]	; (8018280 <input_parameter+0x89c>)
 801819a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 801819e:	4b3c      	ldr	r3, [pc, #240]	; (8018290 <input_parameter+0x8ac>)
 80181a0:	4a34      	ldr	r2, [pc, #208]	; (8018274 <input_parameter+0x890>)
 80181a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 80181a6:	4b3a      	ldr	r3, [pc, #232]	; (8018290 <input_parameter+0x8ac>)
 80181a8:	4a3a      	ldr	r2, [pc, #232]	; (8018294 <input_parameter+0x8b0>)
 80181aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 80181ae:	4b38      	ldr	r3, [pc, #224]	; (8018290 <input_parameter+0x8ac>)
 80181b0:	4a42      	ldr	r2, [pc, #264]	; (80182bc <input_parameter+0x8d8>)
 80181b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 20;
 80181b6:	4b36      	ldr	r3, [pc, #216]	; (8018290 <input_parameter+0x8ac>)
 80181b8:	4a31      	ldr	r2, [pc, #196]	; (8018280 <input_parameter+0x89c>)
 80181ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 36;
 80181be:	4b34      	ldr	r3, [pc, #208]	; (8018290 <input_parameter+0x8ac>)
 80181c0:	4a2c      	ldr	r2, [pc, #176]	; (8018274 <input_parameter+0x890>)
 80181c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 80181c6:	4b32      	ldr	r3, [pc, #200]	; (8018290 <input_parameter+0x8ac>)
 80181c8:	4a32      	ldr	r2, [pc, #200]	; (8018294 <input_parameter+0x8b0>)
 80181ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 80181ce:	4b30      	ldr	r3, [pc, #192]	; (8018290 <input_parameter+0x8ac>)
 80181d0:	4a3b      	ldr	r2, [pc, #236]	; (80182c0 <input_parameter+0x8dc>)
 80181d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 20;
 80181d6:	4b2e      	ldr	r3, [pc, #184]	; (8018290 <input_parameter+0x8ac>)
 80181d8:	4a29      	ldr	r2, [pc, #164]	; (8018280 <input_parameter+0x89c>)
 80181da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 34;
 80181de:	4b2c      	ldr	r3, [pc, #176]	; (8018290 <input_parameter+0x8ac>)
 80181e0:	4a16      	ldr	r2, [pc, #88]	; (801823c <input_parameter+0x858>)
 80181e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 80181e6:	4b2a      	ldr	r3, [pc, #168]	; (8018290 <input_parameter+0x8ac>)
 80181e8:	4a2a      	ldr	r2, [pc, #168]	; (8018294 <input_parameter+0x8b0>)
 80181ea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 80181ee:	4b28      	ldr	r3, [pc, #160]	; (8018290 <input_parameter+0x8ac>)
 80181f0:	4a30      	ldr	r2, [pc, #192]	; (80182b4 <input_parameter+0x8d0>)
 80181f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 80181f6:	4b26      	ldr	r3, [pc, #152]	; (8018290 <input_parameter+0x8ac>)
 80181f8:	4a2f      	ldr	r2, [pc, #188]	; (80182b8 <input_parameter+0x8d4>)
 80181fa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 80181fe:	4b24      	ldr	r3, [pc, #144]	; (8018290 <input_parameter+0x8ac>)
 8018200:	4a13      	ldr	r2, [pc, #76]	; (8018250 <input_parameter+0x86c>)
 8018202:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 8018206:	4b22      	ldr	r3, [pc, #136]	; (8018290 <input_parameter+0x8ac>)
 8018208:	4a22      	ldr	r2, [pc, #136]	; (8018294 <input_parameter+0x8b0>)
 801820a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 801820e:	4b20      	ldr	r3, [pc, #128]	; (8018290 <input_parameter+0x8ac>)
 8018210:	4a28      	ldr	r2, [pc, #160]	; (80182b4 <input_parameter+0x8d0>)
 8018212:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 8018216:	4b1e      	ldr	r3, [pc, #120]	; (8018290 <input_parameter+0x8ac>)
 8018218:	4a2a      	ldr	r2, [pc, #168]	; (80182c4 <input_parameter+0x8e0>)
 801821a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 801821e:	4b1c      	ldr	r3, [pc, #112]	; (8018290 <input_parameter+0x8ac>)
 8018220:	4a0e      	ldr	r2, [pc, #56]	; (801825c <input_parameter+0x878>)
 8018222:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 8018226:	4b1a      	ldr	r3, [pc, #104]	; (8018290 <input_parameter+0x8ac>)
 8018228:	4a1a      	ldr	r2, [pc, #104]	; (8018294 <input_parameter+0x8b0>)
 801822a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 801822e:	4b18      	ldr	r3, [pc, #96]	; (8018290 <input_parameter+0x8ac>)
 8018230:	4a25      	ldr	r2, [pc, #148]	; (80182c8 <input_parameter+0x8e4>)
 8018232:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8018236:	e049      	b.n	80182cc <input_parameter+0x8e8>
 8018238:	2000f358 	.word	0x2000f358
 801823c:	42080000 	.word	0x42080000
 8018240:	44160000 	.word	0x44160000
 8018244:	44340000 	.word	0x44340000
 8018248:	463b8000 	.word	0x463b8000
 801824c:	422c0000 	.word	0x422c0000
 8018250:	41b00000 	.word	0x41b00000
 8018254:	443b8000 	.word	0x443b8000
 8018258:	42200000 	.word	0x42200000
 801825c:	41c00000 	.word	0x41c00000
 8018260:	44660000 	.word	0x44660000
 8018264:	466a6000 	.word	0x466a6000
 8018268:	40a00000 	.word	0x40a00000
 801826c:	445e8000 	.word	0x445e8000
 8018270:	465ac000 	.word	0x465ac000
 8018274:	42100000 	.word	0x42100000
 8018278:	446b0000 	.word	0x446b0000
 801827c:	41880000 	.word	0x41880000
 8018280:	41a00000 	.word	0x41a00000
 8018284:	44700000 	.word	0x44700000
 8018288:	467a0000 	.word	0x467a0000
 801828c:	41200000 	.word	0x41200000
 8018290:	2000f4a0 	.word	0x2000f4a0
 8018294:	447a0000 	.word	0x447a0000
 8018298:	44898000 	.word	0x44898000
 801829c:	41e00000 	.word	0x41e00000
 80182a0:	44b54000 	.word	0x44b54000
 80182a4:	41f80000 	.word	0x41f80000
 80182a8:	420c0000 	.word	0x420c0000
 80182ac:	44af0000 	.word	0x44af0000
 80182b0:	41900000 	.word	0x41900000
 80182b4:	44a28000 	.word	0x44a28000
 80182b8:	42180000 	.word	0x42180000
 80182bc:	44c6c000 	.word	0x44c6c000
 80182c0:	44c30000 	.word	0x44c30000
 80182c4:	41f00000 	.word	0x41f00000
 80182c8:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 12;
 80182cc:	4b97      	ldr	r3, [pc, #604]	; (801852c <input_parameter+0xb48>)
 80182ce:	4a98      	ldr	r2, [pc, #608]	; (8018530 <input_parameter+0xb4c>)
 80182d0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 80182d4:	4b95      	ldr	r3, [pc, #596]	; (801852c <input_parameter+0xb48>)
 80182d6:	4a97      	ldr	r2, [pc, #604]	; (8018534 <input_parameter+0xb50>)
 80182d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 80182dc:	4b93      	ldr	r3, [pc, #588]	; (801852c <input_parameter+0xb48>)
 80182de:	4a96      	ldr	r2, [pc, #600]	; (8018538 <input_parameter+0xb54>)
 80182e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 80182e4:	4b91      	ldr	r3, [pc, #580]	; (801852c <input_parameter+0xb48>)
 80182e6:	4a95      	ldr	r2, [pc, #596]	; (801853c <input_parameter+0xb58>)
 80182e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 80182ec:	4b8f      	ldr	r3, [pc, #572]	; (801852c <input_parameter+0xb48>)
 80182ee:	4a94      	ldr	r2, [pc, #592]	; (8018540 <input_parameter+0xb5c>)
 80182f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 80182f4:	4b8d      	ldr	r3, [pc, #564]	; (801852c <input_parameter+0xb48>)
 80182f6:	4a93      	ldr	r2, [pc, #588]	; (8018544 <input_parameter+0xb60>)
 80182f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 80182fc:	4b8b      	ldr	r3, [pc, #556]	; (801852c <input_parameter+0xb48>)
 80182fe:	4a8e      	ldr	r2, [pc, #568]	; (8018538 <input_parameter+0xb54>)
 8018300:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 8018304:	4b89      	ldr	r3, [pc, #548]	; (801852c <input_parameter+0xb48>)
 8018306:	4a90      	ldr	r2, [pc, #576]	; (8018548 <input_parameter+0xb64>)
 8018308:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 10;
 801830c:	4b87      	ldr	r3, [pc, #540]	; (801852c <input_parameter+0xb48>)
 801830e:	4a8c      	ldr	r2, [pc, #560]	; (8018540 <input_parameter+0xb5c>)
 8018310:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 20;
 8018314:	4b85      	ldr	r3, [pc, #532]	; (801852c <input_parameter+0xb48>)
 8018316:	4a8d      	ldr	r2, [pc, #564]	; (801854c <input_parameter+0xb68>)
 8018318:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 801831c:	4b83      	ldr	r3, [pc, #524]	; (801852c <input_parameter+0xb48>)
 801831e:	4a86      	ldr	r2, [pc, #536]	; (8018538 <input_parameter+0xb54>)
 8018320:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 8018324:	4b81      	ldr	r3, [pc, #516]	; (801852c <input_parameter+0xb48>)
 8018326:	4a88      	ldr	r2, [pc, #544]	; (8018548 <input_parameter+0xb64>)
 8018328:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 8;
 801832c:	4b7f      	ldr	r3, [pc, #508]	; (801852c <input_parameter+0xb48>)
 801832e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018332:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 20;
 8018336:	4b7d      	ldr	r3, [pc, #500]	; (801852c <input_parameter+0xb48>)
 8018338:	4a84      	ldr	r2, [pc, #528]	; (801854c <input_parameter+0xb68>)
 801833a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 801833e:	4b84      	ldr	r3, [pc, #528]	; (8018550 <input_parameter+0xb6c>)
 8018340:	4a84      	ldr	r2, [pc, #528]	; (8018554 <input_parameter+0xb70>)
 8018342:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018344:	4b82      	ldr	r3, [pc, #520]	; (8018550 <input_parameter+0xb6c>)
 8018346:	4a83      	ldr	r2, [pc, #524]	; (8018554 <input_parameter+0xb70>)
 8018348:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 801834a:	4b81      	ldr	r3, [pc, #516]	; (8018550 <input_parameter+0xb6c>)
 801834c:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 801834e:	4a80      	ldr	r2, [pc, #512]	; (8018550 <input_parameter+0xb6c>)
 8018350:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 8018352:	4b7f      	ldr	r3, [pc, #508]	; (8018550 <input_parameter+0xb6c>)
 8018354:	4a80      	ldr	r2, [pc, #512]	; (8018558 <input_parameter+0xb74>)
 8018356:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 8018358:	4b7d      	ldr	r3, [pc, #500]	; (8018550 <input_parameter+0xb6c>)
 801835a:	4a80      	ldr	r2, [pc, #512]	; (801855c <input_parameter+0xb78>)
 801835c:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 801835e:	4b7c      	ldr	r3, [pc, #496]	; (8018550 <input_parameter+0xb6c>)
 8018360:	4a7f      	ldr	r2, [pc, #508]	; (8018560 <input_parameter+0xb7c>)
 8018362:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018364:	4b7a      	ldr	r3, [pc, #488]	; (8018550 <input_parameter+0xb6c>)
 8018366:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 8018368:	4a79      	ldr	r2, [pc, #484]	; (8018550 <input_parameter+0xb6c>)
 801836a:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 801836c:	4b78      	ldr	r3, [pc, #480]	; (8018550 <input_parameter+0xb6c>)
 801836e:	4a7a      	ldr	r2, [pc, #488]	; (8018558 <input_parameter+0xb74>)
 8018370:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8018372:	4b77      	ldr	r3, [pc, #476]	; (8018550 <input_parameter+0xb6c>)
 8018374:	4a79      	ldr	r2, [pc, #484]	; (801855c <input_parameter+0xb78>)
 8018376:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 8018378:	4b75      	ldr	r3, [pc, #468]	; (8018550 <input_parameter+0xb6c>)
 801837a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801837e:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8018380:	4b73      	ldr	r3, [pc, #460]	; (8018550 <input_parameter+0xb6c>)
 8018382:	4a74      	ldr	r2, [pc, #464]	; (8018554 <input_parameter+0xb70>)
 8018384:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 8018386:	4b72      	ldr	r3, [pc, #456]	; (8018550 <input_parameter+0xb6c>)
 8018388:	4a76      	ldr	r2, [pc, #472]	; (8018564 <input_parameter+0xb80>)
 801838a:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 23;
 801838c:	4b70      	ldr	r3, [pc, #448]	; (8018550 <input_parameter+0xb6c>)
 801838e:	4a76      	ldr	r2, [pc, #472]	; (8018568 <input_parameter+0xb84>)
 8018390:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 31;
 8018392:	4b6f      	ldr	r3, [pc, #444]	; (8018550 <input_parameter+0xb6c>)
 8018394:	4a75      	ldr	r2, [pc, #468]	; (801856c <input_parameter+0xb88>)
 8018396:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 8018398:	4b6d      	ldr	r3, [pc, #436]	; (8018550 <input_parameter+0xb6c>)
 801839a:	4a6e      	ldr	r2, [pc, #440]	; (8018554 <input_parameter+0xb70>)
 801839c:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 801839e:	4b6c      	ldr	r3, [pc, #432]	; (8018550 <input_parameter+0xb6c>)
 80183a0:	4a70      	ldr	r2, [pc, #448]	; (8018564 <input_parameter+0xb80>)
 80183a2:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 23;
 80183a4:	4b6a      	ldr	r3, [pc, #424]	; (8018550 <input_parameter+0xb6c>)
 80183a6:	4a70      	ldr	r2, [pc, #448]	; (8018568 <input_parameter+0xb84>)
 80183a8:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 35;
 80183aa:	4b69      	ldr	r3, [pc, #420]	; (8018550 <input_parameter+0xb6c>)
 80183ac:	4a70      	ldr	r2, [pc, #448]	; (8018570 <input_parameter+0xb8c>)
 80183ae:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 80183b0:	4b67      	ldr	r3, [pc, #412]	; (8018550 <input_parameter+0xb6c>)
 80183b2:	4a68      	ldr	r2, [pc, #416]	; (8018554 <input_parameter+0xb70>)
 80183b4:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 80183b6:	4b66      	ldr	r3, [pc, #408]	; (8018550 <input_parameter+0xb6c>)
 80183b8:	4a6e      	ldr	r2, [pc, #440]	; (8018574 <input_parameter+0xb90>)
 80183ba:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 20;
 80183bc:	4b64      	ldr	r3, [pc, #400]	; (8018550 <input_parameter+0xb6c>)
 80183be:	4a63      	ldr	r2, [pc, #396]	; (801854c <input_parameter+0xb68>)
 80183c0:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 80183c2:	4b63      	ldr	r3, [pc, #396]	; (8018550 <input_parameter+0xb6c>)
 80183c4:	4a61      	ldr	r2, [pc, #388]	; (801854c <input_parameter+0xb68>)
 80183c6:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 80183c8:	4b61      	ldr	r3, [pc, #388]	; (8018550 <input_parameter+0xb6c>)
 80183ca:	4a62      	ldr	r2, [pc, #392]	; (8018554 <input_parameter+0xb70>)
 80183cc:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 80183ce:	4b60      	ldr	r3, [pc, #384]	; (8018550 <input_parameter+0xb6c>)
 80183d0:	4a68      	ldr	r2, [pc, #416]	; (8018574 <input_parameter+0xb90>)
 80183d2:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 20;
 80183d4:	4b5e      	ldr	r3, [pc, #376]	; (8018550 <input_parameter+0xb6c>)
 80183d6:	4a5d      	ldr	r2, [pc, #372]	; (801854c <input_parameter+0xb68>)
 80183d8:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 18;
 80183da:	4b5d      	ldr	r3, [pc, #372]	; (8018550 <input_parameter+0xb6c>)
 80183dc:	4a66      	ldr	r2, [pc, #408]	; (8018578 <input_parameter+0xb94>)
 80183de:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 80183e0:	4b5b      	ldr	r3, [pc, #364]	; (8018550 <input_parameter+0xb6c>)
 80183e2:	4a5c      	ldr	r2, [pc, #368]	; (8018554 <input_parameter+0xb70>)
 80183e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1400;
 80183e8:	4b59      	ldr	r3, [pc, #356]	; (8018550 <input_parameter+0xb6c>)
 80183ea:	4a64      	ldr	r2, [pc, #400]	; (801857c <input_parameter+0xb98>)
 80183ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 20;
 80183f0:	4b57      	ldr	r3, [pc, #348]	; (8018550 <input_parameter+0xb6c>)
 80183f2:	4a56      	ldr	r2, [pc, #344]	; (801854c <input_parameter+0xb68>)
 80183f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 38;
 80183f8:	4b55      	ldr	r3, [pc, #340]	; (8018550 <input_parameter+0xb6c>)
 80183fa:	4a61      	ldr	r2, [pc, #388]	; (8018580 <input_parameter+0xb9c>)
 80183fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 8018400:	4b53      	ldr	r3, [pc, #332]	; (8018550 <input_parameter+0xb6c>)
 8018402:	4a54      	ldr	r2, [pc, #336]	; (8018554 <input_parameter+0xb70>)
 8018404:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1400;
 8018408:	4b51      	ldr	r3, [pc, #324]	; (8018550 <input_parameter+0xb6c>)
 801840a:	4a5c      	ldr	r2, [pc, #368]	; (801857c <input_parameter+0xb98>)
 801840c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 20;
 8018410:	4b4f      	ldr	r3, [pc, #316]	; (8018550 <input_parameter+0xb6c>)
 8018412:	4a4e      	ldr	r2, [pc, #312]	; (801854c <input_parameter+0xb68>)
 8018414:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018418:	4b4d      	ldr	r3, [pc, #308]	; (8018550 <input_parameter+0xb6c>)
 801841a:	4a5a      	ldr	r2, [pc, #360]	; (8018584 <input_parameter+0xba0>)
 801841c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 8018420:	4b4b      	ldr	r3, [pc, #300]	; (8018550 <input_parameter+0xb6c>)
 8018422:	4a4c      	ldr	r2, [pc, #304]	; (8018554 <input_parameter+0xb70>)
 8018424:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1750;
 8018428:	4b49      	ldr	r3, [pc, #292]	; (8018550 <input_parameter+0xb6c>)
 801842a:	4a47      	ldr	r2, [pc, #284]	; (8018548 <input_parameter+0xb64>)
 801842c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 20;
 8018430:	4b47      	ldr	r3, [pc, #284]	; (8018550 <input_parameter+0xb6c>)
 8018432:	4a46      	ldr	r2, [pc, #280]	; (801854c <input_parameter+0xb68>)
 8018434:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018438:	4b45      	ldr	r3, [pc, #276]	; (8018550 <input_parameter+0xb6c>)
 801843a:	4a52      	ldr	r2, [pc, #328]	; (8018584 <input_parameter+0xba0>)
 801843c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 8018440:	4b43      	ldr	r3, [pc, #268]	; (8018550 <input_parameter+0xb6c>)
 8018442:	4a44      	ldr	r2, [pc, #272]	; (8018554 <input_parameter+0xb70>)
 8018444:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1750;
 8018448:	4b41      	ldr	r3, [pc, #260]	; (8018550 <input_parameter+0xb6c>)
 801844a:	4a3f      	ldr	r2, [pc, #252]	; (8018548 <input_parameter+0xb64>)
 801844c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 20;
 8018450:	4b3f      	ldr	r3, [pc, #252]	; (8018550 <input_parameter+0xb6c>)
 8018452:	4a3e      	ldr	r2, [pc, #248]	; (801854c <input_parameter+0xb68>)
 8018454:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018458:	4b3d      	ldr	r3, [pc, #244]	; (8018550 <input_parameter+0xb6c>)
 801845a:	4a4b      	ldr	r2, [pc, #300]	; (8018588 <input_parameter+0xba4>)
 801845c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 8018460:	4b3b      	ldr	r3, [pc, #236]	; (8018550 <input_parameter+0xb6c>)
 8018462:	4a3c      	ldr	r2, [pc, #240]	; (8018554 <input_parameter+0xb70>)
 8018464:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 8018468:	4b39      	ldr	r3, [pc, #228]	; (8018550 <input_parameter+0xb6c>)
 801846a:	4a44      	ldr	r2, [pc, #272]	; (801857c <input_parameter+0xb98>)
 801846c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 25;
 8018470:	4b37      	ldr	r3, [pc, #220]	; (8018550 <input_parameter+0xb6c>)
 8018472:	4a46      	ldr	r2, [pc, #280]	; (801858c <input_parameter+0xba8>)
 8018474:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018478:	4b35      	ldr	r3, [pc, #212]	; (8018550 <input_parameter+0xb6c>)
 801847a:	4a2e      	ldr	r2, [pc, #184]	; (8018534 <input_parameter+0xb50>)
 801847c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 8018480:	4b33      	ldr	r3, [pc, #204]	; (8018550 <input_parameter+0xb6c>)
 8018482:	4a34      	ldr	r2, [pc, #208]	; (8018554 <input_parameter+0xb70>)
 8018484:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 8018488:	4b31      	ldr	r3, [pc, #196]	; (8018550 <input_parameter+0xb6c>)
 801848a:	4a3c      	ldr	r2, [pc, #240]	; (801857c <input_parameter+0xb98>)
 801848c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 25;
 8018490:	4b2f      	ldr	r3, [pc, #188]	; (8018550 <input_parameter+0xb6c>)
 8018492:	4a3e      	ldr	r2, [pc, #248]	; (801858c <input_parameter+0xba8>)
 8018494:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018498:	4b2d      	ldr	r3, [pc, #180]	; (8018550 <input_parameter+0xb6c>)
 801849a:	4a3d      	ldr	r2, [pc, #244]	; (8018590 <input_parameter+0xbac>)
 801849c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 80184a0:	4b2b      	ldr	r3, [pc, #172]	; (8018550 <input_parameter+0xb6c>)
 80184a2:	4a2c      	ldr	r2, [pc, #176]	; (8018554 <input_parameter+0xb70>)
 80184a4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1800;
 80184a8:	4b29      	ldr	r3, [pc, #164]	; (8018550 <input_parameter+0xb6c>)
 80184aa:	4a3a      	ldr	r2, [pc, #232]	; (8018594 <input_parameter+0xbb0>)
 80184ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 12;
 80184b0:	4b27      	ldr	r3, [pc, #156]	; (8018550 <input_parameter+0xb6c>)
 80184b2:	4a1f      	ldr	r2, [pc, #124]	; (8018530 <input_parameter+0xb4c>)
 80184b4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 22;
 80184b8:	4b25      	ldr	r3, [pc, #148]	; (8018550 <input_parameter+0xb6c>)
 80184ba:	4a1e      	ldr	r2, [pc, #120]	; (8018534 <input_parameter+0xb50>)
 80184bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 80184c0:	4b23      	ldr	r3, [pc, #140]	; (8018550 <input_parameter+0xb6c>)
 80184c2:	4a24      	ldr	r2, [pc, #144]	; (8018554 <input_parameter+0xb70>)
 80184c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1800;
 80184c8:	4b21      	ldr	r3, [pc, #132]	; (8018550 <input_parameter+0xb6c>)
 80184ca:	4a32      	ldr	r2, [pc, #200]	; (8018594 <input_parameter+0xbb0>)
 80184cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 80184d0:	4b1f      	ldr	r3, [pc, #124]	; (8018550 <input_parameter+0xb6c>)
 80184d2:	4a1b      	ldr	r2, [pc, #108]	; (8018540 <input_parameter+0xb5c>)
 80184d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 80184d8:	4b1d      	ldr	r3, [pc, #116]	; (8018550 <input_parameter+0xb6c>)
 80184da:	4a1a      	ldr	r2, [pc, #104]	; (8018544 <input_parameter+0xb60>)
 80184dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 80184e0:	4b1b      	ldr	r3, [pc, #108]	; (8018550 <input_parameter+0xb6c>)
 80184e2:	4a1c      	ldr	r2, [pc, #112]	; (8018554 <input_parameter+0xb70>)
 80184e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1850;
 80184e8:	4b19      	ldr	r3, [pc, #100]	; (8018550 <input_parameter+0xb6c>)
 80184ea:	4a2b      	ldr	r2, [pc, #172]	; (8018598 <input_parameter+0xbb4>)
 80184ec:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 10;
 80184f0:	4b17      	ldr	r3, [pc, #92]	; (8018550 <input_parameter+0xb6c>)
 80184f2:	4a13      	ldr	r2, [pc, #76]	; (8018540 <input_parameter+0xb5c>)
 80184f4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 20;
 80184f8:	4b15      	ldr	r3, [pc, #84]	; (8018550 <input_parameter+0xb6c>)
 80184fa:	4a14      	ldr	r2, [pc, #80]	; (801854c <input_parameter+0xb68>)
 80184fc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 8018500:	4b13      	ldr	r3, [pc, #76]	; (8018550 <input_parameter+0xb6c>)
 8018502:	4a14      	ldr	r2, [pc, #80]	; (8018554 <input_parameter+0xb70>)
 8018504:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1850;
 8018508:	4b11      	ldr	r3, [pc, #68]	; (8018550 <input_parameter+0xb6c>)
 801850a:	4a23      	ldr	r2, [pc, #140]	; (8018598 <input_parameter+0xbb4>)
 801850c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8;
 8018510:	4b0f      	ldr	r3, [pc, #60]	; (8018550 <input_parameter+0xb6c>)
 8018512:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018516:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 20;
 801851a:	4b0d      	ldr	r3, [pc, #52]	; (8018550 <input_parameter+0xb6c>)
 801851c:	4a0b      	ldr	r2, [pc, #44]	; (801854c <input_parameter+0xb68>)
 801851e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 8018522:	bf00      	nop
 8018524:	46bd      	mov	sp, r7
 8018526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852a:	4770      	bx	lr
 801852c:	2000f4a0 	.word	0x2000f4a0
 8018530:	41400000 	.word	0x41400000
 8018534:	41b00000 	.word	0x41b00000
 8018538:	447a0000 	.word	0x447a0000
 801853c:	44cf8000 	.word	0x44cf8000
 8018540:	41200000 	.word	0x41200000
 8018544:	41f00000 	.word	0x41f00000
 8018548:	44dac000 	.word	0x44dac000
 801854c:	41a00000 	.word	0x41a00000
 8018550:	2000f5e8 	.word	0x2000f5e8
 8018554:	44960000 	.word	0x44960000
 8018558:	44898000 	.word	0x44898000
 801855c:	40a00000 	.word	0x40a00000
 8018560:	41e00000 	.word	0x41e00000
 8018564:	44bcc000 	.word	0x44bcc000
 8018568:	41b80000 	.word	0x41b80000
 801856c:	41f80000 	.word	0x41f80000
 8018570:	420c0000 	.word	0x420c0000
 8018574:	44ce4000 	.word	0x44ce4000
 8018578:	41900000 	.word	0x41900000
 801857c:	44af0000 	.word	0x44af0000
 8018580:	42180000 	.word	0x42180000
 8018584:	42100000 	.word	0x42100000
 8018588:	42080000 	.word	0x42080000
 801858c:	41c80000 	.word	0x41c80000
 8018590:	41c00000 	.word	0x41c00000
 8018594:	44e10000 	.word	0x44e10000
 8018598:	44e74000 	.word	0x44e74000

0801859c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80185a0:	4b22      	ldr	r3, [pc, #136]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185a2:	4a23      	ldr	r2, [pc, #140]	; (8018630 <MX_USART1_UART_Init+0x94>)
 80185a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80185a6:	4b21      	ldr	r3, [pc, #132]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80185ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80185ae:	4b1f      	ldr	r3, [pc, #124]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185b0:	2200      	movs	r2, #0
 80185b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80185b4:	4b1d      	ldr	r3, [pc, #116]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185b6:	2200      	movs	r2, #0
 80185b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80185ba:	4b1c      	ldr	r3, [pc, #112]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185bc:	2200      	movs	r2, #0
 80185be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80185c0:	4b1a      	ldr	r3, [pc, #104]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185c2:	220c      	movs	r2, #12
 80185c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80185c6:	4b19      	ldr	r3, [pc, #100]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185c8:	2200      	movs	r2, #0
 80185ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80185cc:	4b17      	ldr	r3, [pc, #92]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185ce:	2200      	movs	r2, #0
 80185d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80185d2:	4b16      	ldr	r3, [pc, #88]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185d4:	2200      	movs	r2, #0
 80185d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80185d8:	4b14      	ldr	r3, [pc, #80]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185da:	2200      	movs	r2, #0
 80185dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80185de:	4b13      	ldr	r3, [pc, #76]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185e0:	2200      	movs	r2, #0
 80185e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80185e4:	4811      	ldr	r0, [pc, #68]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185e6:	f006 fd2d 	bl	801f044 <HAL_UART_Init>
 80185ea:	4603      	mov	r3, r0
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d001      	beq.n	80185f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80185f0:	f7f1 fbab 	bl	8009d4a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80185f4:	2100      	movs	r1, #0
 80185f6:	480d      	ldr	r0, [pc, #52]	; (801862c <MX_USART1_UART_Init+0x90>)
 80185f8:	f007 faf4 	bl	801fbe4 <HAL_UARTEx_SetTxFifoThreshold>
 80185fc:	4603      	mov	r3, r0
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d001      	beq.n	8018606 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8018602:	f7f1 fba2 	bl	8009d4a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018606:	2100      	movs	r1, #0
 8018608:	4808      	ldr	r0, [pc, #32]	; (801862c <MX_USART1_UART_Init+0x90>)
 801860a:	f007 fb29 	bl	801fc60 <HAL_UARTEx_SetRxFifoThreshold>
 801860e:	4603      	mov	r3, r0
 8018610:	2b00      	cmp	r3, #0
 8018612:	d001      	beq.n	8018618 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8018614:	f7f1 fb99 	bl	8009d4a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8018618:	4804      	ldr	r0, [pc, #16]	; (801862c <MX_USART1_UART_Init+0x90>)
 801861a:	f007 faaa 	bl	801fb72 <HAL_UARTEx_DisableFifoMode>
 801861e:	4603      	mov	r3, r0
 8018620:	2b00      	cmp	r3, #0
 8018622:	d001      	beq.n	8018628 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8018624:	f7f1 fb91 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8018628:	bf00      	nop
 801862a:	bd80      	pop	{r7, pc}
 801862c:	2000f730 	.word	0x2000f730
 8018630:	40013800 	.word	0x40013800

08018634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b09e      	sub	sp, #120	; 0x78
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801863c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018640:	2200      	movs	r2, #0
 8018642:	601a      	str	r2, [r3, #0]
 8018644:	605a      	str	r2, [r3, #4]
 8018646:	609a      	str	r2, [r3, #8]
 8018648:	60da      	str	r2, [r3, #12]
 801864a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801864c:	f107 0314 	add.w	r3, r7, #20
 8018650:	2250      	movs	r2, #80	; 0x50
 8018652:	2100      	movs	r1, #0
 8018654:	4618      	mov	r0, r3
 8018656:	f007 fbc7 	bl	801fde8 <memset>
  if(uartHandle->Instance==USART1)
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	4a1f      	ldr	r2, [pc, #124]	; (80186dc <HAL_UART_MspInit+0xa8>)
 8018660:	4293      	cmp	r3, r2
 8018662:	d137      	bne.n	80186d4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018664:	2301      	movs	r3, #1
 8018666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8018668:	2300      	movs	r3, #0
 801866a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801866c:	f107 0314 	add.w	r3, r7, #20
 8018670:	4618      	mov	r0, r3
 8018672:	f004 f891 	bl	801c798 <HAL_RCCEx_PeriphCLKConfig>
 8018676:	4603      	mov	r3, r0
 8018678:	2b00      	cmp	r3, #0
 801867a:	d001      	beq.n	8018680 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 801867c:	f7f1 fb65 	bl	8009d4a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018680:	4b17      	ldr	r3, [pc, #92]	; (80186e0 <HAL_UART_MspInit+0xac>)
 8018682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018684:	4a16      	ldr	r2, [pc, #88]	; (80186e0 <HAL_UART_MspInit+0xac>)
 8018686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801868a:	6613      	str	r3, [r2, #96]	; 0x60
 801868c:	4b14      	ldr	r3, [pc, #80]	; (80186e0 <HAL_UART_MspInit+0xac>)
 801868e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018694:	613b      	str	r3, [r7, #16]
 8018696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018698:	4b11      	ldr	r3, [pc, #68]	; (80186e0 <HAL_UART_MspInit+0xac>)
 801869a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801869c:	4a10      	ldr	r2, [pc, #64]	; (80186e0 <HAL_UART_MspInit+0xac>)
 801869e:	f043 0301 	orr.w	r3, r3, #1
 80186a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80186a4:	4b0e      	ldr	r3, [pc, #56]	; (80186e0 <HAL_UART_MspInit+0xac>)
 80186a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80186a8:	f003 0301 	and.w	r3, r3, #1
 80186ac:	60fb      	str	r3, [r7, #12]
 80186ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80186b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80186b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186b6:	2302      	movs	r3, #2
 80186b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186ba:	2300      	movs	r3, #0
 80186bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80186be:	2300      	movs	r3, #0
 80186c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80186c2:	2307      	movs	r3, #7
 80186c4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80186c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80186ca:	4619      	mov	r1, r3
 80186cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80186d0:	f003 f8e4 	bl	801b89c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80186d4:	bf00      	nop
 80186d6:	3778      	adds	r7, #120	; 0x78
 80186d8:	46bd      	mov	sp, r7
 80186da:	bd80      	pop	{r7, pc}
 80186dc:	40013800 	.word	0x40013800
 80186e0:	40021000 	.word	0x40021000

080186e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80186e4:	480d      	ldr	r0, [pc, #52]	; (801871c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80186e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80186e8:	480d      	ldr	r0, [pc, #52]	; (8018720 <LoopForever+0x6>)
  ldr r1, =_edata
 80186ea:	490e      	ldr	r1, [pc, #56]	; (8018724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80186ec:	4a0e      	ldr	r2, [pc, #56]	; (8018728 <LoopForever+0xe>)
  movs r3, #0
 80186ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80186f0:	e002      	b.n	80186f8 <LoopCopyDataInit>

080186f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80186f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80186f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80186f6:	3304      	adds	r3, #4

080186f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80186f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80186fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80186fc:	d3f9      	bcc.n	80186f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80186fe:	4a0b      	ldr	r2, [pc, #44]	; (801872c <LoopForever+0x12>)
  ldr r4, =_ebss
 8018700:	4c0b      	ldr	r4, [pc, #44]	; (8018730 <LoopForever+0x16>)
  movs r3, #0
 8018702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018704:	e001      	b.n	801870a <LoopFillZerobss>

08018706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018708:	3204      	adds	r2, #4

0801870a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801870a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801870c:	d3fb      	bcc.n	8018706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801870e:	f7fe fea1 	bl	8017454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018712:	f007 fb37 	bl	801fd84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8018716:	f7f1 fa1f 	bl	8009b58 <main>

0801871a <LoopForever>:

LoopForever:
    b LoopForever
 801871a:	e7fe      	b.n	801871a <LoopForever>
  ldr   r0, =_estack
 801871c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8018720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018724:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8018728:	08023648 	.word	0x08023648
  ldr r2, =_sbss
 801872c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8018730:	2000f7d4 	.word	0x2000f7d4

08018734 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8018734:	e7fe      	b.n	8018734 <ADC3_IRQHandler>
	...

08018738 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801873e:	2300      	movs	r3, #0
 8018740:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018742:	4b0c      	ldr	r3, [pc, #48]	; (8018774 <HAL_Init+0x3c>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	4a0b      	ldr	r2, [pc, #44]	; (8018774 <HAL_Init+0x3c>)
 8018748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801874c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801874e:	2003      	movs	r0, #3
 8018750:	f002 fb30 	bl	801adb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018754:	2000      	movs	r0, #0
 8018756:	f000 f80f 	bl	8018778 <HAL_InitTick>
 801875a:	4603      	mov	r3, r0
 801875c:	2b00      	cmp	r3, #0
 801875e:	d002      	beq.n	8018766 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8018760:	2301      	movs	r3, #1
 8018762:	71fb      	strb	r3, [r7, #7]
 8018764:	e001      	b.n	801876a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018766:	f7fe fd29 	bl	80171bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801876a:	79fb      	ldrb	r3, [r7, #7]

}
 801876c:	4618      	mov	r0, r3
 801876e:	3708      	adds	r7, #8
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}
 8018774:	40022000 	.word	0x40022000

08018778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b084      	sub	sp, #16
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8018780:	2300      	movs	r3, #0
 8018782:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8018784:	4b16      	ldr	r3, [pc, #88]	; (80187e0 <HAL_InitTick+0x68>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d022      	beq.n	80187d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 801878c:	4b15      	ldr	r3, [pc, #84]	; (80187e4 <HAL_InitTick+0x6c>)
 801878e:	681a      	ldr	r2, [r3, #0]
 8018790:	4b13      	ldr	r3, [pc, #76]	; (80187e0 <HAL_InitTick+0x68>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018798:	fbb1 f3f3 	udiv	r3, r1, r3
 801879c:	fbb2 f3f3 	udiv	r3, r2, r3
 80187a0:	4618      	mov	r0, r3
 80187a2:	f002 fb3a 	bl	801ae1a <HAL_SYSTICK_Config>
 80187a6:	4603      	mov	r3, r0
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d10f      	bne.n	80187cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2b0f      	cmp	r3, #15
 80187b0:	d809      	bhi.n	80187c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80187b2:	2200      	movs	r2, #0
 80187b4:	6879      	ldr	r1, [r7, #4]
 80187b6:	f04f 30ff 	mov.w	r0, #4294967295
 80187ba:	f002 fb06 	bl	801adca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80187be:	4a0a      	ldr	r2, [pc, #40]	; (80187e8 <HAL_InitTick+0x70>)
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	6013      	str	r3, [r2, #0]
 80187c4:	e007      	b.n	80187d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80187c6:	2301      	movs	r3, #1
 80187c8:	73fb      	strb	r3, [r7, #15]
 80187ca:	e004      	b.n	80187d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80187cc:	2301      	movs	r3, #1
 80187ce:	73fb      	strb	r3, [r7, #15]
 80187d0:	e001      	b.n	80187d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80187d2:	2301      	movs	r3, #1
 80187d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80187d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80187d8:	4618      	mov	r0, r3
 80187da:	3710      	adds	r7, #16
 80187dc:	46bd      	mov	sp, r7
 80187de:	bd80      	pop	{r7, pc}
 80187e0:	20000008 	.word	0x20000008
 80187e4:	20000000 	.word	0x20000000
 80187e8:	20000004 	.word	0x20000004

080187ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80187ec:	b480      	push	{r7}
 80187ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80187f0:	4b05      	ldr	r3, [pc, #20]	; (8018808 <HAL_IncTick+0x1c>)
 80187f2:	681a      	ldr	r2, [r3, #0]
 80187f4:	4b05      	ldr	r3, [pc, #20]	; (801880c <HAL_IncTick+0x20>)
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	4413      	add	r3, r2
 80187fa:	4a03      	ldr	r2, [pc, #12]	; (8018808 <HAL_IncTick+0x1c>)
 80187fc:	6013      	str	r3, [r2, #0]
}
 80187fe:	bf00      	nop
 8018800:	46bd      	mov	sp, r7
 8018802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018806:	4770      	bx	lr
 8018808:	2000f7c0 	.word	0x2000f7c0
 801880c:	20000008 	.word	0x20000008

08018810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018810:	b480      	push	{r7}
 8018812:	af00      	add	r7, sp, #0
  return uwTick;
 8018814:	4b03      	ldr	r3, [pc, #12]	; (8018824 <HAL_GetTick+0x14>)
 8018816:	681b      	ldr	r3, [r3, #0]
}
 8018818:	4618      	mov	r0, r3
 801881a:	46bd      	mov	sp, r7
 801881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018820:	4770      	bx	lr
 8018822:	bf00      	nop
 8018824:	2000f7c0 	.word	0x2000f7c0

08018828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018830:	f7ff ffee 	bl	8018810 <HAL_GetTick>
 8018834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018840:	d004      	beq.n	801884c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8018842:	4b09      	ldr	r3, [pc, #36]	; (8018868 <HAL_Delay+0x40>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	68fa      	ldr	r2, [r7, #12]
 8018848:	4413      	add	r3, r2
 801884a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801884c:	bf00      	nop
 801884e:	f7ff ffdf 	bl	8018810 <HAL_GetTick>
 8018852:	4602      	mov	r2, r0
 8018854:	68bb      	ldr	r3, [r7, #8]
 8018856:	1ad3      	subs	r3, r2, r3
 8018858:	68fa      	ldr	r2, [r7, #12]
 801885a:	429a      	cmp	r2, r3
 801885c:	d8f7      	bhi.n	801884e <HAL_Delay+0x26>
  {
  }
}
 801885e:	bf00      	nop
 8018860:	bf00      	nop
 8018862:	3710      	adds	r7, #16
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}
 8018868:	20000008 	.word	0x20000008

0801886c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 801886c:	b480      	push	{r7}
 801886e:	b083      	sub	sp, #12
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
 8018874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	689b      	ldr	r3, [r3, #8]
 801887a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	431a      	orrs	r2, r3
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	609a      	str	r2, [r3, #8]
}
 8018886:	bf00      	nop
 8018888:	370c      	adds	r7, #12
 801888a:	46bd      	mov	sp, r7
 801888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018890:	4770      	bx	lr

08018892 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8018892:	b480      	push	{r7}
 8018894:	b083      	sub	sp, #12
 8018896:	af00      	add	r7, sp, #0
 8018898:	6078      	str	r0, [r7, #4]
 801889a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	689b      	ldr	r3, [r3, #8]
 80188a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80188a4:	683b      	ldr	r3, [r7, #0]
 80188a6:	431a      	orrs	r2, r3
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	609a      	str	r2, [r3, #8]
}
 80188ac:	bf00      	nop
 80188ae:	370c      	adds	r7, #12
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr

080188b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80188b8:	b480      	push	{r7}
 80188ba:	b083      	sub	sp, #12
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	689b      	ldr	r3, [r3, #8]
 80188c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80188c8:	4618      	mov	r0, r3
 80188ca:	370c      	adds	r7, #12
 80188cc:	46bd      	mov	sp, r7
 80188ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d2:	4770      	bx	lr

080188d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80188d4:	b480      	push	{r7}
 80188d6:	b087      	sub	sp, #28
 80188d8:	af00      	add	r7, sp, #0
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	607a      	str	r2, [r7, #4]
 80188e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	3360      	adds	r3, #96	; 0x60
 80188e6:	461a      	mov	r2, r3
 80188e8:	68bb      	ldr	r3, [r7, #8]
 80188ea:	009b      	lsls	r3, r3, #2
 80188ec:	4413      	add	r3, r2
 80188ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80188f0:	697b      	ldr	r3, [r7, #20]
 80188f2:	681a      	ldr	r2, [r3, #0]
 80188f4:	4b08      	ldr	r3, [pc, #32]	; (8018918 <LL_ADC_SetOffset+0x44>)
 80188f6:	4013      	ands	r3, r2
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80188fe:	683a      	ldr	r2, [r7, #0]
 8018900:	430a      	orrs	r2, r1
 8018902:	4313      	orrs	r3, r2
 8018904:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 801890c:	bf00      	nop
 801890e:	371c      	adds	r7, #28
 8018910:	46bd      	mov	sp, r7
 8018912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018916:	4770      	bx	lr
 8018918:	03fff000 	.word	0x03fff000

0801891c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 801891c:	b480      	push	{r7}
 801891e:	b085      	sub	sp, #20
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
 8018924:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	3360      	adds	r3, #96	; 0x60
 801892a:	461a      	mov	r2, r3
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	009b      	lsls	r3, r3, #2
 8018930:	4413      	add	r3, r2
 8018932:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 801893c:	4618      	mov	r0, r3
 801893e:	3714      	adds	r7, #20
 8018940:	46bd      	mov	sp, r7
 8018942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018946:	4770      	bx	lr

08018948 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018948:	b480      	push	{r7}
 801894a:	b087      	sub	sp, #28
 801894c:	af00      	add	r7, sp, #0
 801894e:	60f8      	str	r0, [r7, #12]
 8018950:	60b9      	str	r1, [r7, #8]
 8018952:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	3360      	adds	r3, #96	; 0x60
 8018958:	461a      	mov	r2, r3
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	4413      	add	r3, r2
 8018960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018962:	697b      	ldr	r3, [r7, #20]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	431a      	orrs	r2, r3
 801896e:	697b      	ldr	r3, [r7, #20]
 8018970:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018972:	bf00      	nop
 8018974:	371c      	adds	r7, #28
 8018976:	46bd      	mov	sp, r7
 8018978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897c:	4770      	bx	lr

0801897e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801897e:	b480      	push	{r7}
 8018980:	b087      	sub	sp, #28
 8018982:	af00      	add	r7, sp, #0
 8018984:	60f8      	str	r0, [r7, #12]
 8018986:	60b9      	str	r1, [r7, #8]
 8018988:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	3360      	adds	r3, #96	; 0x60
 801898e:	461a      	mov	r2, r3
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	4413      	add	r3, r2
 8018996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018998:	697b      	ldr	r3, [r7, #20]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	431a      	orrs	r2, r3
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80189a8:	bf00      	nop
 80189aa:	371c      	adds	r7, #28
 80189ac:	46bd      	mov	sp, r7
 80189ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b2:	4770      	bx	lr

080189b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80189b4:	b480      	push	{r7}
 80189b6:	b087      	sub	sp, #28
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	60f8      	str	r0, [r7, #12]
 80189bc:	60b9      	str	r1, [r7, #8]
 80189be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	3360      	adds	r3, #96	; 0x60
 80189c4:	461a      	mov	r2, r3
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	009b      	lsls	r3, r3, #2
 80189ca:	4413      	add	r3, r2
 80189cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	431a      	orrs	r2, r3
 80189da:	697b      	ldr	r3, [r7, #20]
 80189dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80189de:	bf00      	nop
 80189e0:	371c      	adds	r7, #28
 80189e2:	46bd      	mov	sp, r7
 80189e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e8:	4770      	bx	lr

080189ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80189ea:	b480      	push	{r7}
 80189ec:	b083      	sub	sp, #12
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	6078      	str	r0, [r7, #4]
 80189f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	695b      	ldr	r3, [r3, #20]
 80189f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80189fc:	683b      	ldr	r3, [r7, #0]
 80189fe:	431a      	orrs	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	615a      	str	r2, [r3, #20]
}
 8018a04:	bf00      	nop
 8018a06:	370c      	adds	r7, #12
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr

08018a10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018a10:	b480      	push	{r7}
 8018a12:	b083      	sub	sp, #12
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	68db      	ldr	r3, [r3, #12]
 8018a1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d101      	bne.n	8018a28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018a24:	2301      	movs	r3, #1
 8018a26:	e000      	b.n	8018a2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018a28:	2300      	movs	r3, #0
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	370c      	adds	r7, #12
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a34:	4770      	bx	lr

08018a36 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018a36:	b480      	push	{r7}
 8018a38:	b087      	sub	sp, #28
 8018a3a:	af00      	add	r7, sp, #0
 8018a3c:	60f8      	str	r0, [r7, #12]
 8018a3e:	60b9      	str	r1, [r7, #8]
 8018a40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	3330      	adds	r3, #48	; 0x30
 8018a46:	461a      	mov	r2, r3
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	0a1b      	lsrs	r3, r3, #8
 8018a4c:	009b      	lsls	r3, r3, #2
 8018a4e:	f003 030c 	and.w	r3, r3, #12
 8018a52:	4413      	add	r3, r2
 8018a54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	68bb      	ldr	r3, [r7, #8]
 8018a5c:	f003 031f 	and.w	r3, r3, #31
 8018a60:	211f      	movs	r1, #31
 8018a62:	fa01 f303 	lsl.w	r3, r1, r3
 8018a66:	43db      	mvns	r3, r3
 8018a68:	401a      	ands	r2, r3
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	0e9b      	lsrs	r3, r3, #26
 8018a6e:	f003 011f 	and.w	r1, r3, #31
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	f003 031f 	and.w	r3, r3, #31
 8018a78:	fa01 f303 	lsl.w	r3, r1, r3
 8018a7c:	431a      	orrs	r2, r3
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8018a82:	bf00      	nop
 8018a84:	371c      	adds	r7, #28
 8018a86:	46bd      	mov	sp, r7
 8018a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8c:	4770      	bx	lr

08018a8e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018a8e:	b480      	push	{r7}
 8018a90:	b083      	sub	sp, #12
 8018a92:	af00      	add	r7, sp, #0
 8018a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a9a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d101      	bne.n	8018aa6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	e000      	b.n	8018aa8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8018aa6:	2300      	movs	r3, #0
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	370c      	adds	r7, #12
 8018aac:	46bd      	mov	sp, r7
 8018aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab2:	4770      	bx	lr

08018ab4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018ab4:	b480      	push	{r7}
 8018ab6:	b087      	sub	sp, #28
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	60f8      	str	r0, [r7, #12]
 8018abc:	60b9      	str	r1, [r7, #8]
 8018abe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	3314      	adds	r3, #20
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	68bb      	ldr	r3, [r7, #8]
 8018ac8:	0e5b      	lsrs	r3, r3, #25
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	f003 0304 	and.w	r3, r3, #4
 8018ad0:	4413      	add	r3, r2
 8018ad2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	681a      	ldr	r2, [r3, #0]
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	0d1b      	lsrs	r3, r3, #20
 8018adc:	f003 031f 	and.w	r3, r3, #31
 8018ae0:	2107      	movs	r1, #7
 8018ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8018ae6:	43db      	mvns	r3, r3
 8018ae8:	401a      	ands	r2, r3
 8018aea:	68bb      	ldr	r3, [r7, #8]
 8018aec:	0d1b      	lsrs	r3, r3, #20
 8018aee:	f003 031f 	and.w	r3, r3, #31
 8018af2:	6879      	ldr	r1, [r7, #4]
 8018af4:	fa01 f303 	lsl.w	r3, r1, r3
 8018af8:	431a      	orrs	r2, r3
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8018afe:	bf00      	nop
 8018b00:	371c      	adds	r7, #28
 8018b02:	46bd      	mov	sp, r7
 8018b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b08:	4770      	bx	lr
	...

08018b0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8018b0c:	b480      	push	{r7}
 8018b0e:	b085      	sub	sp, #20
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	60f8      	str	r0, [r7, #12]
 8018b14:	60b9      	str	r1, [r7, #8]
 8018b16:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	4a0f      	ldr	r2, [pc, #60]	; (8018b58 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8018b1c:	4293      	cmp	r3, r2
 8018b1e:	d10a      	bne.n	8018b36 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018b2c:	431a      	orrs	r2, r3
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8018b34:	e00a      	b.n	8018b4c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018b3c:	68bb      	ldr	r3, [r7, #8]
 8018b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018b42:	43db      	mvns	r3, r3
 8018b44:	401a      	ands	r2, r3
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8018b4c:	bf00      	nop
 8018b4e:	3714      	adds	r7, #20
 8018b50:	46bd      	mov	sp, r7
 8018b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b56:	4770      	bx	lr
 8018b58:	407f0000 	.word	0x407f0000

08018b5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	b083      	sub	sp, #12
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	689b      	ldr	r3, [r3, #8]
 8018b68:	f003 031f 	and.w	r3, r3, #31
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	370c      	adds	r7, #12
 8018b70:	46bd      	mov	sp, r7
 8018b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b76:	4770      	bx	lr

08018b78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018b78:	b480      	push	{r7}
 8018b7a:	b083      	sub	sp, #12
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	689b      	ldr	r3, [r3, #8]
 8018b84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8018b88:	4618      	mov	r0, r3
 8018b8a:	370c      	adds	r7, #12
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b92:	4770      	bx	lr

08018b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8018b94:	b480      	push	{r7}
 8018b96:	b083      	sub	sp, #12
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	689b      	ldr	r3, [r3, #8]
 8018ba0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8018ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018ba8:	687a      	ldr	r2, [r7, #4]
 8018baa:	6093      	str	r3, [r2, #8]
}
 8018bac:	bf00      	nop
 8018bae:	370c      	adds	r7, #12
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb6:	4770      	bx	lr

08018bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8018bb8:	b480      	push	{r7}
 8018bba:	b083      	sub	sp, #12
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	689b      	ldr	r3, [r3, #8]
 8018bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018bcc:	d101      	bne.n	8018bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8018bce:	2301      	movs	r3, #1
 8018bd0:	e000      	b.n	8018bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8018bd2:	2300      	movs	r3, #0
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	370c      	adds	r7, #12
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bde:	4770      	bx	lr

08018be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8018be0:	b480      	push	{r7}
 8018be2:	b083      	sub	sp, #12
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	689b      	ldr	r3, [r3, #8]
 8018bec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8018bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018bf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8018bfc:	bf00      	nop
 8018bfe:	370c      	adds	r7, #12
 8018c00:	46bd      	mov	sp, r7
 8018c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c06:	4770      	bx	lr

08018c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8018c08:	b480      	push	{r7}
 8018c0a:	b083      	sub	sp, #12
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	689b      	ldr	r3, [r3, #8]
 8018c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018c1c:	d101      	bne.n	8018c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8018c1e:	2301      	movs	r3, #1
 8018c20:	e000      	b.n	8018c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8018c22:	2300      	movs	r3, #0
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	370c      	adds	r7, #12
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2e:	4770      	bx	lr

08018c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8018c30:	b480      	push	{r7}
 8018c32:	b083      	sub	sp, #12
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	689b      	ldr	r3, [r3, #8]
 8018c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018c44:	f043 0201 	orr.w	r2, r3, #1
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8018c4c:	bf00      	nop
 8018c4e:	370c      	adds	r7, #12
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr

08018c58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b083      	sub	sp, #12
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	689b      	ldr	r3, [r3, #8]
 8018c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018c6c:	f043 0202 	orr.w	r2, r3, #2
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8018c74:	bf00      	nop
 8018c76:	370c      	adds	r7, #12
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7e:	4770      	bx	lr

08018c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8018c80:	b480      	push	{r7}
 8018c82:	b083      	sub	sp, #12
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	689b      	ldr	r3, [r3, #8]
 8018c8c:	f003 0301 	and.w	r3, r3, #1
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d101      	bne.n	8018c98 <LL_ADC_IsEnabled+0x18>
 8018c94:	2301      	movs	r3, #1
 8018c96:	e000      	b.n	8018c9a <LL_ADC_IsEnabled+0x1a>
 8018c98:	2300      	movs	r3, #0
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	370c      	adds	r7, #12
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca4:	4770      	bx	lr

08018ca6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8018ca6:	b480      	push	{r7}
 8018ca8:	b083      	sub	sp, #12
 8018caa:	af00      	add	r7, sp, #0
 8018cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	689b      	ldr	r3, [r3, #8]
 8018cb2:	f003 0302 	and.w	r3, r3, #2
 8018cb6:	2b02      	cmp	r3, #2
 8018cb8:	d101      	bne.n	8018cbe <LL_ADC_IsDisableOngoing+0x18>
 8018cba:	2301      	movs	r3, #1
 8018cbc:	e000      	b.n	8018cc0 <LL_ADC_IsDisableOngoing+0x1a>
 8018cbe:	2300      	movs	r3, #0
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	370c      	adds	r7, #12
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cca:	4770      	bx	lr

08018ccc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8018ccc:	b480      	push	{r7}
 8018cce:	b083      	sub	sp, #12
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	689b      	ldr	r3, [r3, #8]
 8018cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018ce0:	f043 0204 	orr.w	r2, r3, #4
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8018ce8:	bf00      	nop
 8018cea:	370c      	adds	r7, #12
 8018cec:	46bd      	mov	sp, r7
 8018cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf2:	4770      	bx	lr

08018cf4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8018cf4:	b480      	push	{r7}
 8018cf6:	b083      	sub	sp, #12
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	689b      	ldr	r3, [r3, #8]
 8018d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018d08:	f043 0210 	orr.w	r2, r3, #16
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8018d10:	bf00      	nop
 8018d12:	370c      	adds	r7, #12
 8018d14:	46bd      	mov	sp, r7
 8018d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1a:	4770      	bx	lr

08018d1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	b083      	sub	sp, #12
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	689b      	ldr	r3, [r3, #8]
 8018d28:	f003 0304 	and.w	r3, r3, #4
 8018d2c:	2b04      	cmp	r3, #4
 8018d2e:	d101      	bne.n	8018d34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8018d30:	2301      	movs	r3, #1
 8018d32:	e000      	b.n	8018d36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8018d34:	2300      	movs	r3, #0
}
 8018d36:	4618      	mov	r0, r3
 8018d38:	370c      	adds	r7, #12
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d40:	4770      	bx	lr

08018d42 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8018d42:	b480      	push	{r7}
 8018d44:	b083      	sub	sp, #12
 8018d46:	af00      	add	r7, sp, #0
 8018d48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	689b      	ldr	r3, [r3, #8]
 8018d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018d56:	f043 0220 	orr.w	r2, r3, #32
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8018d5e:	bf00      	nop
 8018d60:	370c      	adds	r7, #12
 8018d62:	46bd      	mov	sp, r7
 8018d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d68:	4770      	bx	lr

08018d6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8018d6a:	b480      	push	{r7}
 8018d6c:	b083      	sub	sp, #12
 8018d6e:	af00      	add	r7, sp, #0
 8018d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	689b      	ldr	r3, [r3, #8]
 8018d76:	f003 0308 	and.w	r3, r3, #8
 8018d7a:	2b08      	cmp	r3, #8
 8018d7c:	d101      	bne.n	8018d82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8018d7e:	2301      	movs	r3, #1
 8018d80:	e000      	b.n	8018d84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8018d82:	2300      	movs	r3, #0
}
 8018d84:	4618      	mov	r0, r3
 8018d86:	370c      	adds	r7, #12
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8e:	4770      	bx	lr

08018d90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8018d90:	b590      	push	{r4, r7, lr}
 8018d92:	b089      	sub	sp, #36	; 0x24
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018d98:	2300      	movs	r3, #0
 8018d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d101      	bne.n	8018daa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8018da6:	2301      	movs	r3, #1
 8018da8:	e1a1      	b.n	80190ee <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	695b      	ldr	r3, [r3, #20]
 8018dae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d109      	bne.n	8018dcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018db8:	6878      	ldr	r0, [r7, #4]
 8018dba:	f7ef f979 	bl	80080b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f7ff fef1 	bl	8018bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d004      	beq.n	8018de6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7ff fed7 	bl	8018b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	4618      	mov	r0, r3
 8018dec:	f7ff ff0c 	bl	8018c08 <LL_ADC_IsInternalRegulatorEnabled>
 8018df0:	4603      	mov	r3, r0
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d115      	bne.n	8018e22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7ff fef0 	bl	8018be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8018e00:	4b9a      	ldr	r3, [pc, #616]	; (801906c <HAL_ADC_Init+0x2dc>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	099b      	lsrs	r3, r3, #6
 8018e06:	4a9a      	ldr	r2, [pc, #616]	; (8019070 <HAL_ADC_Init+0x2e0>)
 8018e08:	fba2 2303 	umull	r2, r3, r2, r3
 8018e0c:	099b      	lsrs	r3, r3, #6
 8018e0e:	3301      	adds	r3, #1
 8018e10:	005b      	lsls	r3, r3, #1
 8018e12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8018e14:	e002      	b.n	8018e1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8018e16:	68bb      	ldr	r3, [r7, #8]
 8018e18:	3b01      	subs	r3, #1
 8018e1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d1f9      	bne.n	8018e16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7ff feee 	bl	8018c08 <LL_ADC_IsInternalRegulatorEnabled>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d10d      	bne.n	8018e4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e36:	f043 0210 	orr.w	r2, r3, #16
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018e42:	f043 0201 	orr.w	r2, r3, #1
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8018e4a:	2301      	movs	r3, #1
 8018e4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7ff ff62 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 8018e58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e5e:	f003 0310 	and.w	r3, r3, #16
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	f040 813a 	bne.w	80190dc <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	f040 8136 	bne.w	80190dc <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8018e78:	f043 0202 	orr.w	r2, r3, #2
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	4618      	mov	r0, r3
 8018e86:	f7ff fefb 	bl	8018c80 <LL_ADC_IsEnabled>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d137      	bne.n	8018f00 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018e98:	d004      	beq.n	8018ea4 <HAL_ADC_Init+0x114>
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	4a75      	ldr	r2, [pc, #468]	; (8019074 <HAL_ADC_Init+0x2e4>)
 8018ea0:	4293      	cmp	r3, r2
 8018ea2:	d10f      	bne.n	8018ec4 <HAL_ADC_Init+0x134>
 8018ea4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8018ea8:	f7ff feea 	bl	8018c80 <LL_ADC_IsEnabled>
 8018eac:	4604      	mov	r4, r0
 8018eae:	4871      	ldr	r0, [pc, #452]	; (8019074 <HAL_ADC_Init+0x2e4>)
 8018eb0:	f7ff fee6 	bl	8018c80 <LL_ADC_IsEnabled>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	4323      	orrs	r3, r4
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	bf0c      	ite	eq
 8018ebc:	2301      	moveq	r3, #1
 8018ebe:	2300      	movne	r3, #0
 8018ec0:	b2db      	uxtb	r3, r3
 8018ec2:	e008      	b.n	8018ed6 <HAL_ADC_Init+0x146>
 8018ec4:	486c      	ldr	r0, [pc, #432]	; (8019078 <HAL_ADC_Init+0x2e8>)
 8018ec6:	f7ff fedb 	bl	8018c80 <LL_ADC_IsEnabled>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	bf0c      	ite	eq
 8018ed0:	2301      	moveq	r3, #1
 8018ed2:	2300      	movne	r3, #0
 8018ed4:	b2db      	uxtb	r3, r3
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d012      	beq.n	8018f00 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018ee2:	d004      	beq.n	8018eee <HAL_ADC_Init+0x15e>
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4a62      	ldr	r2, [pc, #392]	; (8019074 <HAL_ADC_Init+0x2e4>)
 8018eea:	4293      	cmp	r3, r2
 8018eec:	d101      	bne.n	8018ef2 <HAL_ADC_Init+0x162>
 8018eee:	4a63      	ldr	r2, [pc, #396]	; (801907c <HAL_ADC_Init+0x2ec>)
 8018ef0:	e000      	b.n	8018ef4 <HAL_ADC_Init+0x164>
 8018ef2:	4a63      	ldr	r2, [pc, #396]	; (8019080 <HAL_ADC_Init+0x2f0>)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	685b      	ldr	r3, [r3, #4]
 8018ef8:	4619      	mov	r1, r3
 8018efa:	4610      	mov	r0, r2
 8018efc:	f7ff fcb6 	bl	801886c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	7f5b      	ldrb	r3, [r3, #29]
 8018f04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018f0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8018f10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8018f16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018f1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018f20:	4313      	orrs	r3, r2
 8018f22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	d106      	bne.n	8018f3c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f32:	3b01      	subs	r3, #1
 8018f34:	045b      	lsls	r3, r3, #17
 8018f36:	69ba      	ldr	r2, [r7, #24]
 8018f38:	4313      	orrs	r3, r2
 8018f3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d009      	beq.n	8018f58 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f48:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8018f52:	69ba      	ldr	r2, [r7, #24]
 8018f54:	4313      	orrs	r3, r2
 8018f56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	68da      	ldr	r2, [r3, #12]
 8018f5e:	4b49      	ldr	r3, [pc, #292]	; (8019084 <HAL_ADC_Init+0x2f4>)
 8018f60:	4013      	ands	r3, r2
 8018f62:	687a      	ldr	r2, [r7, #4]
 8018f64:	6812      	ldr	r2, [r2, #0]
 8018f66:	69b9      	ldr	r1, [r7, #24]
 8018f68:	430b      	orrs	r3, r1
 8018f6a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	691b      	ldr	r3, [r3, #16]
 8018f72:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	430a      	orrs	r2, r1
 8018f80:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	4618      	mov	r0, r3
 8018f88:	f7ff fec8 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 8018f8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	4618      	mov	r0, r3
 8018f94:	f7ff fee9 	bl	8018d6a <LL_ADC_INJ_IsConversionOngoing>
 8018f98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8018f9a:	693b      	ldr	r3, [r7, #16]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d17b      	bne.n	8019098 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d178      	bne.n	8019098 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8018faa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018fb2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8018fb4:	4313      	orrs	r3, r2
 8018fb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	68db      	ldr	r3, [r3, #12]
 8018fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8018fc2:	f023 0302 	bic.w	r3, r3, #2
 8018fc6:	687a      	ldr	r2, [r7, #4]
 8018fc8:	6812      	ldr	r2, [r2, #0]
 8018fca:	69b9      	ldr	r1, [r7, #24]
 8018fcc:	430b      	orrs	r3, r1
 8018fce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	691b      	ldr	r3, [r3, #16]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d017      	beq.n	8019008 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	691a      	ldr	r2, [r3, #16]
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018ff0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018ff8:	687a      	ldr	r2, [r7, #4]
 8018ffa:	6911      	ldr	r1, [r2, #16]
 8018ffc:	687a      	ldr	r2, [r7, #4]
 8018ffe:	6812      	ldr	r2, [r2, #0]
 8019000:	430b      	orrs	r3, r1
 8019002:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8019006:	e013      	b.n	8019030 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	691a      	ldr	r2, [r3, #16]
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8019016:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019020:	687a      	ldr	r2, [r7, #4]
 8019022:	6812      	ldr	r2, [r2, #0]
 8019024:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801902c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019036:	2b01      	cmp	r3, #1
 8019038:	d126      	bne.n	8019088 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	691b      	ldr	r3, [r3, #16]
 8019040:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019044:	f023 0304 	bic.w	r3, r3, #4
 8019048:	687a      	ldr	r2, [r7, #4]
 801904a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801904c:	687a      	ldr	r2, [r7, #4]
 801904e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019050:	4311      	orrs	r1, r2
 8019052:	687a      	ldr	r2, [r7, #4]
 8019054:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8019056:	4311      	orrs	r1, r2
 8019058:	687a      	ldr	r2, [r7, #4]
 801905a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801905c:	430a      	orrs	r2, r1
 801905e:	431a      	orrs	r2, r3
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	f042 0201 	orr.w	r2, r2, #1
 8019068:	611a      	str	r2, [r3, #16]
 801906a:	e015      	b.n	8019098 <HAL_ADC_Init+0x308>
 801906c:	20000000 	.word	0x20000000
 8019070:	053e2d63 	.word	0x053e2d63
 8019074:	50000100 	.word	0x50000100
 8019078:	50000400 	.word	0x50000400
 801907c:	50000300 	.word	0x50000300
 8019080:	50000700 	.word	0x50000700
 8019084:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	691a      	ldr	r2, [r3, #16]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	f022 0201 	bic.w	r2, r2, #1
 8019096:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	695b      	ldr	r3, [r3, #20]
 801909c:	2b01      	cmp	r3, #1
 801909e:	d10c      	bne.n	80190ba <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190a6:	f023 010f 	bic.w	r1, r3, #15
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6a1b      	ldr	r3, [r3, #32]
 80190ae:	1e5a      	subs	r2, r3, #1
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	430a      	orrs	r2, r1
 80190b6:	631a      	str	r2, [r3, #48]	; 0x30
 80190b8:	e007      	b.n	80190ca <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	f022 020f 	bic.w	r2, r2, #15
 80190c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190ce:	f023 0303 	bic.w	r3, r3, #3
 80190d2:	f043 0201 	orr.w	r2, r3, #1
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80190da:	e007      	b.n	80190ec <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190e0:	f043 0210 	orr.w	r2, r3, #16
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80190e8:	2301      	movs	r3, #1
 80190ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80190ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	3724      	adds	r7, #36	; 0x24
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd90      	pop	{r4, r7, pc}
 80190f6:	bf00      	nop

080190f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b086      	sub	sp, #24
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019108:	d004      	beq.n	8019114 <HAL_ADC_Start+0x1c>
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	4a5c      	ldr	r2, [pc, #368]	; (8019280 <HAL_ADC_Start+0x188>)
 8019110:	4293      	cmp	r3, r2
 8019112:	d101      	bne.n	8019118 <HAL_ADC_Start+0x20>
 8019114:	4b5b      	ldr	r3, [pc, #364]	; (8019284 <HAL_ADC_Start+0x18c>)
 8019116:	e000      	b.n	801911a <HAL_ADC_Start+0x22>
 8019118:	4b5b      	ldr	r3, [pc, #364]	; (8019288 <HAL_ADC_Start+0x190>)
 801911a:	4618      	mov	r0, r3
 801911c:	f7ff fd1e 	bl	8018b5c <LL_ADC_GetMultimode>
 8019120:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	4618      	mov	r0, r3
 8019128:	f7ff fdf8 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 801912c:	4603      	mov	r3, r0
 801912e:	2b00      	cmp	r3, #0
 8019130:	f040 809f 	bne.w	8019272 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801913a:	2b01      	cmp	r3, #1
 801913c:	d101      	bne.n	8019142 <HAL_ADC_Start+0x4a>
 801913e:	2302      	movs	r3, #2
 8019140:	e09a      	b.n	8019278 <HAL_ADC_Start+0x180>
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	2201      	movs	r2, #1
 8019146:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f001 fa3e 	bl	801a5cc <ADC_Enable>
 8019150:	4603      	mov	r3, r0
 8019152:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8019154:	7dfb      	ldrb	r3, [r7, #23]
 8019156:	2b00      	cmp	r3, #0
 8019158:	f040 8086 	bne.w	8019268 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019160:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019164:	f023 0301 	bic.w	r3, r3, #1
 8019168:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	4a42      	ldr	r2, [pc, #264]	; (8019280 <HAL_ADC_Start+0x188>)
 8019176:	4293      	cmp	r3, r2
 8019178:	d002      	beq.n	8019180 <HAL_ADC_Start+0x88>
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	e001      	b.n	8019184 <HAL_ADC_Start+0x8c>
 8019180:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019184:	687a      	ldr	r2, [r7, #4]
 8019186:	6812      	ldr	r2, [r2, #0]
 8019188:	4293      	cmp	r3, r2
 801918a:	d002      	beq.n	8019192 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d105      	bne.n	801919e <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80191a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80191aa:	d106      	bne.n	80191ba <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80191b0:	f023 0206 	bic.w	r2, r3, #6
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	661a      	str	r2, [r3, #96]	; 0x60
 80191b8:	e002      	b.n	80191c0 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	2200      	movs	r2, #0
 80191be:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	221c      	movs	r2, #28
 80191c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	2200      	movs	r2, #0
 80191cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	4a2a      	ldr	r2, [pc, #168]	; (8019280 <HAL_ADC_Start+0x188>)
 80191d6:	4293      	cmp	r3, r2
 80191d8:	d002      	beq.n	80191e0 <HAL_ADC_Start+0xe8>
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	e001      	b.n	80191e4 <HAL_ADC_Start+0xec>
 80191e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80191e4:	687a      	ldr	r2, [r7, #4]
 80191e6:	6812      	ldr	r2, [r2, #0]
 80191e8:	4293      	cmp	r3, r2
 80191ea:	d008      	beq.n	80191fe <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80191ec:	693b      	ldr	r3, [r7, #16]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d005      	beq.n	80191fe <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80191f2:	693b      	ldr	r3, [r7, #16]
 80191f4:	2b05      	cmp	r3, #5
 80191f6:	d002      	beq.n	80191fe <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80191f8:	693b      	ldr	r3, [r7, #16]
 80191fa:	2b09      	cmp	r3, #9
 80191fc:	d114      	bne.n	8019228 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	68db      	ldr	r3, [r3, #12]
 8019204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019208:	2b00      	cmp	r3, #0
 801920a:	d007      	beq.n	801921c <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019210:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019214:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	4618      	mov	r0, r3
 8019222:	f7ff fd53 	bl	8018ccc <LL_ADC_REG_StartConversion>
 8019226:	e026      	b.n	8019276 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801922c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	4a11      	ldr	r2, [pc, #68]	; (8019280 <HAL_ADC_Start+0x188>)
 801923a:	4293      	cmp	r3, r2
 801923c:	d002      	beq.n	8019244 <HAL_ADC_Start+0x14c>
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	e001      	b.n	8019248 <HAL_ADC_Start+0x150>
 8019244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019248:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	68db      	ldr	r3, [r3, #12]
 801924e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019252:	2b00      	cmp	r3, #0
 8019254:	d00f      	beq.n	8019276 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801925a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801925e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	65da      	str	r2, [r3, #92]	; 0x5c
 8019266:	e006      	b.n	8019276 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	2200      	movs	r2, #0
 801926c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019270:	e001      	b.n	8019276 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019272:	2302      	movs	r3, #2
 8019274:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019276:	7dfb      	ldrb	r3, [r7, #23]
}
 8019278:	4618      	mov	r0, r3
 801927a:	3718      	adds	r7, #24
 801927c:	46bd      	mov	sp, r7
 801927e:	bd80      	pop	{r7, pc}
 8019280:	50000100 	.word	0x50000100
 8019284:	50000300 	.word	0x50000300
 8019288:	50000700 	.word	0x50000700

0801928c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b084      	sub	sp, #16
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801929a:	2b01      	cmp	r3, #1
 801929c:	d101      	bne.n	80192a2 <HAL_ADC_Stop+0x16>
 801929e:	2302      	movs	r3, #2
 80192a0:	e023      	b.n	80192ea <HAL_ADC_Stop+0x5e>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	2201      	movs	r2, #1
 80192a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80192aa:	2103      	movs	r1, #3
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f001 f8d1 	bl	801a454 <ADC_ConversionStop>
 80192b2:	4603      	mov	r3, r0
 80192b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80192b6:	7bfb      	ldrb	r3, [r7, #15]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d111      	bne.n	80192e0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80192bc:	6878      	ldr	r0, [r7, #4]
 80192be:	f001 f9e7 	bl	801a690 <ADC_Disable>
 80192c2:	4603      	mov	r3, r0
 80192c4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80192c6:	7bfb      	ldrb	r3, [r7, #15]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d109      	bne.n	80192e0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80192d4:	f023 0301 	bic.w	r3, r3, #1
 80192d8:	f043 0201 	orr.w	r2, r3, #1
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	2200      	movs	r2, #0
 80192e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80192e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80192ea:	4618      	mov	r0, r3
 80192ec:	3710      	adds	r7, #16
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
	...

080192f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b088      	sub	sp, #32
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019306:	d004      	beq.n	8019312 <HAL_ADC_PollForConversion+0x1e>
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	4a70      	ldr	r2, [pc, #448]	; (80194d0 <HAL_ADC_PollForConversion+0x1dc>)
 801930e:	4293      	cmp	r3, r2
 8019310:	d101      	bne.n	8019316 <HAL_ADC_PollForConversion+0x22>
 8019312:	4b70      	ldr	r3, [pc, #448]	; (80194d4 <HAL_ADC_PollForConversion+0x1e0>)
 8019314:	e000      	b.n	8019318 <HAL_ADC_PollForConversion+0x24>
 8019316:	4b70      	ldr	r3, [pc, #448]	; (80194d8 <HAL_ADC_PollForConversion+0x1e4>)
 8019318:	4618      	mov	r0, r3
 801931a:	f7ff fc1f 	bl	8018b5c <LL_ADC_GetMultimode>
 801931e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	699b      	ldr	r3, [r3, #24]
 8019324:	2b08      	cmp	r3, #8
 8019326:	d102      	bne.n	801932e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8019328:	2308      	movs	r3, #8
 801932a:	61fb      	str	r3, [r7, #28]
 801932c:	e037      	b.n	801939e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801932e:	697b      	ldr	r3, [r7, #20]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d005      	beq.n	8019340 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	2b05      	cmp	r3, #5
 8019338:	d002      	beq.n	8019340 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801933a:	697b      	ldr	r3, [r7, #20]
 801933c:	2b09      	cmp	r3, #9
 801933e:	d111      	bne.n	8019364 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	68db      	ldr	r3, [r3, #12]
 8019346:	f003 0301 	and.w	r3, r3, #1
 801934a:	2b00      	cmp	r3, #0
 801934c:	d007      	beq.n	801935e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019352:	f043 0220 	orr.w	r2, r3, #32
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801935a:	2301      	movs	r3, #1
 801935c:	e0b3      	b.n	80194c6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801935e:	2304      	movs	r3, #4
 8019360:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019362:	e01c      	b.n	801939e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801936c:	d004      	beq.n	8019378 <HAL_ADC_PollForConversion+0x84>
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	4a57      	ldr	r2, [pc, #348]	; (80194d0 <HAL_ADC_PollForConversion+0x1dc>)
 8019374:	4293      	cmp	r3, r2
 8019376:	d101      	bne.n	801937c <HAL_ADC_PollForConversion+0x88>
 8019378:	4b56      	ldr	r3, [pc, #344]	; (80194d4 <HAL_ADC_PollForConversion+0x1e0>)
 801937a:	e000      	b.n	801937e <HAL_ADC_PollForConversion+0x8a>
 801937c:	4b56      	ldr	r3, [pc, #344]	; (80194d8 <HAL_ADC_PollForConversion+0x1e4>)
 801937e:	4618      	mov	r0, r3
 8019380:	f7ff fbfa 	bl	8018b78 <LL_ADC_GetMultiDMATransfer>
 8019384:	4603      	mov	r3, r0
 8019386:	2b00      	cmp	r3, #0
 8019388:	d007      	beq.n	801939a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801938e:	f043 0220 	orr.w	r2, r3, #32
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8019396:	2301      	movs	r3, #1
 8019398:	e095      	b.n	80194c6 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801939a:	2304      	movs	r3, #4
 801939c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801939e:	f7ff fa37 	bl	8018810 <HAL_GetTick>
 80193a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80193a4:	e021      	b.n	80193ea <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193ac:	d01d      	beq.n	80193ea <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80193ae:	f7ff fa2f 	bl	8018810 <HAL_GetTick>
 80193b2:	4602      	mov	r2, r0
 80193b4:	693b      	ldr	r3, [r7, #16]
 80193b6:	1ad3      	subs	r3, r2, r3
 80193b8:	683a      	ldr	r2, [r7, #0]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d302      	bcc.n	80193c4 <HAL_ADC_PollForConversion+0xd0>
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d112      	bne.n	80193ea <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	681a      	ldr	r2, [r3, #0]
 80193ca:	69fb      	ldr	r3, [r7, #28]
 80193cc:	4013      	ands	r3, r2
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d10b      	bne.n	80193ea <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193d6:	f043 0204 	orr.w	r2, r3, #4
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	2200      	movs	r2, #0
 80193e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80193e6:	2303      	movs	r3, #3
 80193e8:	e06d      	b.n	80194c6 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	681a      	ldr	r2, [r3, #0]
 80193f0:	69fb      	ldr	r3, [r7, #28]
 80193f2:	4013      	ands	r3, r2
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d0d6      	beq.n	80193a6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	4618      	mov	r0, r3
 801940a:	f7ff fb01 	bl	8018a10 <LL_ADC_REG_IsTriggerSourceSWStart>
 801940e:	4603      	mov	r3, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d01c      	beq.n	801944e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	7f5b      	ldrb	r3, [r3, #29]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d118      	bne.n	801944e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	f003 0308 	and.w	r3, r3, #8
 8019426:	2b08      	cmp	r3, #8
 8019428:	d111      	bne.n	801944e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801942e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801943a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801943e:	2b00      	cmp	r3, #0
 8019440:	d105      	bne.n	801944e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019446:	f043 0201 	orr.w	r2, r3, #1
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	4a1f      	ldr	r2, [pc, #124]	; (80194d0 <HAL_ADC_PollForConversion+0x1dc>)
 8019454:	4293      	cmp	r3, r2
 8019456:	d002      	beq.n	801945e <HAL_ADC_PollForConversion+0x16a>
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	e001      	b.n	8019462 <HAL_ADC_PollForConversion+0x16e>
 801945e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019462:	687a      	ldr	r2, [r7, #4]
 8019464:	6812      	ldr	r2, [r2, #0]
 8019466:	4293      	cmp	r3, r2
 8019468:	d008      	beq.n	801947c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801946a:	697b      	ldr	r3, [r7, #20]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d005      	beq.n	801947c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019470:	697b      	ldr	r3, [r7, #20]
 8019472:	2b05      	cmp	r3, #5
 8019474:	d002      	beq.n	801947c <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	2b09      	cmp	r3, #9
 801947a:	d104      	bne.n	8019486 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	68db      	ldr	r3, [r3, #12]
 8019482:	61bb      	str	r3, [r7, #24]
 8019484:	e00d      	b.n	80194a2 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	4a11      	ldr	r2, [pc, #68]	; (80194d0 <HAL_ADC_PollForConversion+0x1dc>)
 801948c:	4293      	cmp	r3, r2
 801948e:	d002      	beq.n	8019496 <HAL_ADC_PollForConversion+0x1a2>
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	e001      	b.n	801949a <HAL_ADC_PollForConversion+0x1a6>
 8019496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801949a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	68db      	ldr	r3, [r3, #12]
 80194a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80194a2:	69fb      	ldr	r3, [r7, #28]
 80194a4:	2b08      	cmp	r3, #8
 80194a6:	d104      	bne.n	80194b2 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	2208      	movs	r2, #8
 80194ae:	601a      	str	r2, [r3, #0]
 80194b0:	e008      	b.n	80194c4 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80194b2:	69bb      	ldr	r3, [r7, #24]
 80194b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d103      	bne.n	80194c4 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	220c      	movs	r2, #12
 80194c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80194c4:	2300      	movs	r3, #0
}
 80194c6:	4618      	mov	r0, r3
 80194c8:	3720      	adds	r7, #32
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	bf00      	nop
 80194d0:	50000100 	.word	0x50000100
 80194d4:	50000300 	.word	0x50000300
 80194d8:	50000700 	.word	0x50000700

080194dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b086      	sub	sp, #24
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	60f8      	str	r0, [r7, #12]
 80194e4:	60b9      	str	r1, [r7, #8]
 80194e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80194f0:	d004      	beq.n	80194fc <HAL_ADC_Start_DMA+0x20>
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	4a57      	ldr	r2, [pc, #348]	; (8019654 <HAL_ADC_Start_DMA+0x178>)
 80194f8:	4293      	cmp	r3, r2
 80194fa:	d101      	bne.n	8019500 <HAL_ADC_Start_DMA+0x24>
 80194fc:	4b56      	ldr	r3, [pc, #344]	; (8019658 <HAL_ADC_Start_DMA+0x17c>)
 80194fe:	e000      	b.n	8019502 <HAL_ADC_Start_DMA+0x26>
 8019500:	4b56      	ldr	r3, [pc, #344]	; (801965c <HAL_ADC_Start_DMA+0x180>)
 8019502:	4618      	mov	r0, r3
 8019504:	f7ff fb2a 	bl	8018b5c <LL_ADC_GetMultimode>
 8019508:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	4618      	mov	r0, r3
 8019510:	f7ff fc04 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 8019514:	4603      	mov	r3, r0
 8019516:	2b00      	cmp	r3, #0
 8019518:	f040 8094 	bne.w	8019644 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019522:	2b01      	cmp	r3, #1
 8019524:	d101      	bne.n	801952a <HAL_ADC_Start_DMA+0x4e>
 8019526:	2302      	movs	r3, #2
 8019528:	e08f      	b.n	801964a <HAL_ADC_Start_DMA+0x16e>
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	2201      	movs	r2, #1
 801952e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	4a4a      	ldr	r2, [pc, #296]	; (8019660 <HAL_ADC_Start_DMA+0x184>)
 8019538:	4293      	cmp	r3, r2
 801953a:	d008      	beq.n	801954e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801953c:	693b      	ldr	r3, [r7, #16]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d005      	beq.n	801954e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019542:	693b      	ldr	r3, [r7, #16]
 8019544:	2b05      	cmp	r3, #5
 8019546:	d002      	beq.n	801954e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019548:	693b      	ldr	r3, [r7, #16]
 801954a:	2b09      	cmp	r3, #9
 801954c:	d173      	bne.n	8019636 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801954e:	68f8      	ldr	r0, [r7, #12]
 8019550:	f001 f83c 	bl	801a5cc <ADC_Enable>
 8019554:	4603      	mov	r3, r0
 8019556:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8019558:	7dfb      	ldrb	r3, [r7, #23]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d166      	bne.n	801962c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019562:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019566:	f023 0301 	bic.w	r3, r3, #1
 801956a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	4a37      	ldr	r2, [pc, #220]	; (8019654 <HAL_ADC_Start_DMA+0x178>)
 8019578:	4293      	cmp	r3, r2
 801957a:	d002      	beq.n	8019582 <HAL_ADC_Start_DMA+0xa6>
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	e001      	b.n	8019586 <HAL_ADC_Start_DMA+0xaa>
 8019582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019586:	68fa      	ldr	r2, [r7, #12]
 8019588:	6812      	ldr	r2, [r2, #0]
 801958a:	4293      	cmp	r3, r2
 801958c:	d002      	beq.n	8019594 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d105      	bne.n	80195a0 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019598:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d006      	beq.n	80195ba <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80195b0:	f023 0206 	bic.w	r2, r3, #6
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	661a      	str	r2, [r3, #96]	; 0x60
 80195b8:	e002      	b.n	80195c0 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	2200      	movs	r2, #0
 80195be:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195c4:	4a27      	ldr	r2, [pc, #156]	; (8019664 <HAL_ADC_Start_DMA+0x188>)
 80195c6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195cc:	4a26      	ldr	r2, [pc, #152]	; (8019668 <HAL_ADC_Start_DMA+0x18c>)
 80195ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195d4:	4a25      	ldr	r2, [pc, #148]	; (801966c <HAL_ADC_Start_DMA+0x190>)
 80195d6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	221c      	movs	r2, #28
 80195de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	2200      	movs	r2, #0
 80195e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	685a      	ldr	r2, [r3, #4]
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	f042 0210 	orr.w	r2, r2, #16
 80195f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	68da      	ldr	r2, [r3, #12]
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	f042 0201 	orr.w	r2, r2, #1
 8019606:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	3340      	adds	r3, #64	; 0x40
 8019612:	4619      	mov	r1, r3
 8019614:	68ba      	ldr	r2, [r7, #8]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	f001 fcb4 	bl	801af84 <HAL_DMA_Start_IT>
 801961c:	4603      	mov	r3, r0
 801961e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	4618      	mov	r0, r3
 8019626:	f7ff fb51 	bl	8018ccc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801962a:	e00d      	b.n	8019648 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	2200      	movs	r2, #0
 8019630:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8019634:	e008      	b.n	8019648 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8019636:	2301      	movs	r3, #1
 8019638:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	2200      	movs	r2, #0
 801963e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019642:	e001      	b.n	8019648 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019644:	2302      	movs	r3, #2
 8019646:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019648:	7dfb      	ldrb	r3, [r7, #23]
}
 801964a:	4618      	mov	r0, r3
 801964c:	3718      	adds	r7, #24
 801964e:	46bd      	mov	sp, r7
 8019650:	bd80      	pop	{r7, pc}
 8019652:	bf00      	nop
 8019654:	50000100 	.word	0x50000100
 8019658:	50000300 	.word	0x50000300
 801965c:	50000700 	.word	0x50000700
 8019660:	50000400 	.word	0x50000400
 8019664:	0801a74f 	.word	0x0801a74f
 8019668:	0801a827 	.word	0x0801a827
 801966c:	0801a843 	.word	0x0801a843

08019670 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b084      	sub	sp, #16
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801967e:	2b01      	cmp	r3, #1
 8019680:	d101      	bne.n	8019686 <HAL_ADC_Stop_DMA+0x16>
 8019682:	2302      	movs	r3, #2
 8019684:	e051      	b.n	801972a <HAL_ADC_Stop_DMA+0xba>
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	2201      	movs	r2, #1
 801968a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801968e:	2103      	movs	r1, #3
 8019690:	6878      	ldr	r0, [r7, #4]
 8019692:	f000 fedf 	bl	801a454 <ADC_ConversionStop>
 8019696:	4603      	mov	r3, r0
 8019698:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801969a:	7bfb      	ldrb	r3, [r7, #15]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d13f      	bne.n	8019720 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	68da      	ldr	r2, [r3, #12]
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	f022 0201 	bic.w	r2, r2, #1
 80196ae:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80196b8:	b2db      	uxtb	r3, r3
 80196ba:	2b02      	cmp	r3, #2
 80196bc:	d10f      	bne.n	80196de <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196c2:	4618      	mov	r0, r3
 80196c4:	f001 fcd9 	bl	801b07a <HAL_DMA_Abort>
 80196c8:	4603      	mov	r3, r0
 80196ca:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80196cc:	7bfb      	ldrb	r3, [r7, #15]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d005      	beq.n	80196de <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	685a      	ldr	r2, [r3, #4]
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	f022 0210 	bic.w	r2, r2, #16
 80196ec:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80196ee:	7bfb      	ldrb	r3, [r7, #15]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d105      	bne.n	8019700 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80196f4:	6878      	ldr	r0, [r7, #4]
 80196f6:	f000 ffcb 	bl	801a690 <ADC_Disable>
 80196fa:	4603      	mov	r3, r0
 80196fc:	73fb      	strb	r3, [r7, #15]
 80196fe:	e002      	b.n	8019706 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8019700:	6878      	ldr	r0, [r7, #4]
 8019702:	f000 ffc5 	bl	801a690 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8019706:	7bfb      	ldrb	r3, [r7, #15]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d109      	bne.n	8019720 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019710:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019714:	f023 0301 	bic.w	r3, r3, #1
 8019718:	f043 0201 	orr.w	r2, r3, #1
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2200      	movs	r2, #0
 8019724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019728:	7bfb      	ldrb	r3, [r7, #15]
}
 801972a:	4618      	mov	r0, r3
 801972c:	3710      	adds	r7, #16
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}

08019732 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8019732:	b480      	push	{r7}
 8019734:	b083      	sub	sp, #12
 8019736:	af00      	add	r7, sp, #0
 8019738:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8019740:	4618      	mov	r0, r3
 8019742:	370c      	adds	r7, #12
 8019744:	46bd      	mov	sp, r7
 8019746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974a:	4770      	bx	lr

0801974c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b08a      	sub	sp, #40	; 0x28
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8019754:	2300      	movs	r3, #0
 8019756:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	685b      	ldr	r3, [r3, #4]
 8019766:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019770:	d004      	beq.n	801977c <HAL_ADC_IRQHandler+0x30>
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	4a87      	ldr	r2, [pc, #540]	; (8019994 <HAL_ADC_IRQHandler+0x248>)
 8019778:	4293      	cmp	r3, r2
 801977a:	d101      	bne.n	8019780 <HAL_ADC_IRQHandler+0x34>
 801977c:	4b86      	ldr	r3, [pc, #536]	; (8019998 <HAL_ADC_IRQHandler+0x24c>)
 801977e:	e000      	b.n	8019782 <HAL_ADC_IRQHandler+0x36>
 8019780:	4b86      	ldr	r3, [pc, #536]	; (801999c <HAL_ADC_IRQHandler+0x250>)
 8019782:	4618      	mov	r0, r3
 8019784:	f7ff f9ea 	bl	8018b5c <LL_ADC_GetMultimode>
 8019788:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801978a:	69fb      	ldr	r3, [r7, #28]
 801978c:	f003 0302 	and.w	r3, r3, #2
 8019790:	2b00      	cmp	r3, #0
 8019792:	d017      	beq.n	80197c4 <HAL_ADC_IRQHandler+0x78>
 8019794:	69bb      	ldr	r3, [r7, #24]
 8019796:	f003 0302 	and.w	r3, r3, #2
 801979a:	2b00      	cmp	r3, #0
 801979c:	d012      	beq.n	80197c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197a2:	f003 0310 	and.w	r3, r3, #16
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d105      	bne.n	80197b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197ae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80197b6:	6878      	ldr	r0, [r7, #4]
 80197b8:	f001 f93a 	bl	801aa30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	2202      	movs	r2, #2
 80197c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80197c4:	69fb      	ldr	r3, [r7, #28]
 80197c6:	f003 0304 	and.w	r3, r3, #4
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d004      	beq.n	80197d8 <HAL_ADC_IRQHandler+0x8c>
 80197ce:	69bb      	ldr	r3, [r7, #24]
 80197d0:	f003 0304 	and.w	r3, r3, #4
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d10a      	bne.n	80197ee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80197d8:	69fb      	ldr	r3, [r7, #28]
 80197da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80197de:	2b00      	cmp	r3, #0
 80197e0:	f000 8085 	beq.w	80198ee <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80197e4:	69bb      	ldr	r3, [r7, #24]
 80197e6:	f003 0308 	and.w	r3, r3, #8
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d07f      	beq.n	80198ee <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197f2:	f003 0310 	and.w	r3, r3, #16
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d105      	bne.n	8019806 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	4618      	mov	r0, r3
 801980c:	f7ff f900 	bl	8018a10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019810:	4603      	mov	r3, r0
 8019812:	2b00      	cmp	r3, #0
 8019814:	d064      	beq.n	80198e0 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	4a5e      	ldr	r2, [pc, #376]	; (8019994 <HAL_ADC_IRQHandler+0x248>)
 801981c:	4293      	cmp	r3, r2
 801981e:	d002      	beq.n	8019826 <HAL_ADC_IRQHandler+0xda>
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	e001      	b.n	801982a <HAL_ADC_IRQHandler+0xde>
 8019826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801982a:	687a      	ldr	r2, [r7, #4]
 801982c:	6812      	ldr	r2, [r2, #0]
 801982e:	4293      	cmp	r3, r2
 8019830:	d008      	beq.n	8019844 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019832:	697b      	ldr	r3, [r7, #20]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d005      	beq.n	8019844 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019838:	697b      	ldr	r3, [r7, #20]
 801983a:	2b05      	cmp	r3, #5
 801983c:	d002      	beq.n	8019844 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	2b09      	cmp	r3, #9
 8019842:	d104      	bne.n	801984e <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	68db      	ldr	r3, [r3, #12]
 801984a:	623b      	str	r3, [r7, #32]
 801984c:	e00d      	b.n	801986a <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	4a50      	ldr	r2, [pc, #320]	; (8019994 <HAL_ADC_IRQHandler+0x248>)
 8019854:	4293      	cmp	r3, r2
 8019856:	d002      	beq.n	801985e <HAL_ADC_IRQHandler+0x112>
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	e001      	b.n	8019862 <HAL_ADC_IRQHandler+0x116>
 801985e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019862:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019864:	693b      	ldr	r3, [r7, #16]
 8019866:	68db      	ldr	r3, [r3, #12]
 8019868:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 801986a:	6a3b      	ldr	r3, [r7, #32]
 801986c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019870:	2b00      	cmp	r3, #0
 8019872:	d135      	bne.n	80198e0 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	f003 0308 	and.w	r3, r3, #8
 801987e:	2b08      	cmp	r3, #8
 8019880:	d12e      	bne.n	80198e0 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	4618      	mov	r0, r3
 8019888:	f7ff fa48 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 801988c:	4603      	mov	r3, r0
 801988e:	2b00      	cmp	r3, #0
 8019890:	d11a      	bne.n	80198c8 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	685a      	ldr	r2, [r3, #4]
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	f022 020c 	bic.w	r2, r2, #12
 80198a0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d112      	bne.n	80198e0 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198be:	f043 0201 	orr.w	r2, r3, #1
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80198c6:	e00b      	b.n	80198e0 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198cc:	f043 0210 	orr.w	r2, r3, #16
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80198d8:	f043 0201 	orr.w	r2, r3, #1
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f7ee fc8d 	bl	8008200 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	220c      	movs	r2, #12
 80198ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80198ee:	69fb      	ldr	r3, [r7, #28]
 80198f0:	f003 0320 	and.w	r3, r3, #32
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d004      	beq.n	8019902 <HAL_ADC_IRQHandler+0x1b6>
 80198f8:	69bb      	ldr	r3, [r7, #24]
 80198fa:	f003 0320 	and.w	r3, r3, #32
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d10b      	bne.n	801991a <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019902:	69fb      	ldr	r3, [r7, #28]
 8019904:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019908:	2b00      	cmp	r3, #0
 801990a:	f000 80a1 	beq.w	8019a50 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801990e:	69bb      	ldr	r3, [r7, #24]
 8019910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019914:	2b00      	cmp	r3, #0
 8019916:	f000 809b 	beq.w	8019a50 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801991e:	f003 0310 	and.w	r3, r3, #16
 8019922:	2b00      	cmp	r3, #0
 8019924:	d105      	bne.n	8019932 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801992a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	4618      	mov	r0, r3
 8019938:	f7ff f8a9 	bl	8018a8e <LL_ADC_INJ_IsTriggerSourceSWStart>
 801993c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	4618      	mov	r0, r3
 8019944:	f7ff f864 	bl	8018a10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019948:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	4a11      	ldr	r2, [pc, #68]	; (8019994 <HAL_ADC_IRQHandler+0x248>)
 8019950:	4293      	cmp	r3, r2
 8019952:	d002      	beq.n	801995a <HAL_ADC_IRQHandler+0x20e>
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	e001      	b.n	801995e <HAL_ADC_IRQHandler+0x212>
 801995a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801995e:	687a      	ldr	r2, [r7, #4]
 8019960:	6812      	ldr	r2, [r2, #0]
 8019962:	4293      	cmp	r3, r2
 8019964:	d008      	beq.n	8019978 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019966:	697b      	ldr	r3, [r7, #20]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d005      	beq.n	8019978 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 801996c:	697b      	ldr	r3, [r7, #20]
 801996e:	2b06      	cmp	r3, #6
 8019970:	d002      	beq.n	8019978 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	2b07      	cmp	r3, #7
 8019976:	d104      	bne.n	8019982 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	68db      	ldr	r3, [r3, #12]
 801997e:	623b      	str	r3, [r7, #32]
 8019980:	e014      	b.n	80199ac <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	4a03      	ldr	r2, [pc, #12]	; (8019994 <HAL_ADC_IRQHandler+0x248>)
 8019988:	4293      	cmp	r3, r2
 801998a:	d009      	beq.n	80199a0 <HAL_ADC_IRQHandler+0x254>
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	e008      	b.n	80199a4 <HAL_ADC_IRQHandler+0x258>
 8019992:	bf00      	nop
 8019994:	50000100 	.word	0x50000100
 8019998:	50000300 	.word	0x50000300
 801999c:	50000700 	.word	0x50000700
 80199a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80199a4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	68db      	ldr	r3, [r3, #12]
 80199aa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d047      	beq.n	8019a42 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80199b2:	6a3b      	ldr	r3, [r7, #32]
 80199b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d007      	beq.n	80199cc <HAL_ADC_IRQHandler+0x280>
 80199bc:	68bb      	ldr	r3, [r7, #8]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d03f      	beq.n	8019a42 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80199c2:	6a3b      	ldr	r3, [r7, #32]
 80199c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d13a      	bne.n	8019a42 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80199d6:	2b40      	cmp	r3, #64	; 0x40
 80199d8:	d133      	bne.n	8019a42 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80199da:	6a3b      	ldr	r3, [r7, #32]
 80199dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d12e      	bne.n	8019a42 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7ff f9be 	bl	8018d6a <LL_ADC_INJ_IsConversionOngoing>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d11a      	bne.n	8019a2a <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	685a      	ldr	r2, [r3, #4]
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019a02:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d112      	bne.n	8019a42 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a20:	f043 0201 	orr.w	r2, r3, #1
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	65da      	str	r2, [r3, #92]	; 0x5c
 8019a28:	e00b      	b.n	8019a42 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a2e:	f043 0210 	orr.w	r2, r3, #16
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019a3a:	f043 0201 	orr.w	r2, r3, #1
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	f000 ffcc 	bl	801a9e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	2260      	movs	r2, #96	; 0x60
 8019a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019a50:	69fb      	ldr	r3, [r7, #28]
 8019a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d011      	beq.n	8019a7e <HAL_ADC_IRQHandler+0x332>
 8019a5a:	69bb      	ldr	r3, [r7, #24]
 8019a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d00c      	beq.n	8019a7e <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019a70:	6878      	ldr	r0, [r7, #4]
 8019a72:	f000 f8af 	bl	8019bd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	2280      	movs	r2, #128	; 0x80
 8019a7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8019a7e:	69fb      	ldr	r3, [r7, #28]
 8019a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d012      	beq.n	8019aae <HAL_ADC_IRQHandler+0x362>
 8019a88:	69bb      	ldr	r3, [r7, #24]
 8019a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d00d      	beq.n	8019aae <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8019a9e:	6878      	ldr	r0, [r7, #4]
 8019aa0:	f000 ffb2 	bl	801aa08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019aac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8019aae:	69fb      	ldr	r3, [r7, #28]
 8019ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d012      	beq.n	8019ade <HAL_ADC_IRQHandler+0x392>
 8019ab8:	69bb      	ldr	r3, [r7, #24]
 8019aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d00d      	beq.n	8019ade <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ac6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8019ace:	6878      	ldr	r0, [r7, #4]
 8019ad0:	f000 ffa4 	bl	801aa1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019adc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8019ade:	69fb      	ldr	r3, [r7, #28]
 8019ae0:	f003 0310 	and.w	r3, r3, #16
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d043      	beq.n	8019b70 <HAL_ADC_IRQHandler+0x424>
 8019ae8:	69bb      	ldr	r3, [r7, #24]
 8019aea:	f003 0310 	and.w	r3, r3, #16
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d03e      	beq.n	8019b70 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d102      	bne.n	8019b00 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8019afa:	2301      	movs	r3, #1
 8019afc:	627b      	str	r3, [r7, #36]	; 0x24
 8019afe:	e021      	b.n	8019b44 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8019b00:	697b      	ldr	r3, [r7, #20]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d015      	beq.n	8019b32 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b0e:	d004      	beq.n	8019b1a <HAL_ADC_IRQHandler+0x3ce>
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	4a27      	ldr	r2, [pc, #156]	; (8019bb4 <HAL_ADC_IRQHandler+0x468>)
 8019b16:	4293      	cmp	r3, r2
 8019b18:	d101      	bne.n	8019b1e <HAL_ADC_IRQHandler+0x3d2>
 8019b1a:	4b27      	ldr	r3, [pc, #156]	; (8019bb8 <HAL_ADC_IRQHandler+0x46c>)
 8019b1c:	e000      	b.n	8019b20 <HAL_ADC_IRQHandler+0x3d4>
 8019b1e:	4b27      	ldr	r3, [pc, #156]	; (8019bbc <HAL_ADC_IRQHandler+0x470>)
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7ff f829 	bl	8018b78 <LL_ADC_GetMultiDMATransfer>
 8019b26:	4603      	mov	r3, r0
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d00b      	beq.n	8019b44 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8019b30:	e008      	b.n	8019b44 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	68db      	ldr	r3, [r3, #12]
 8019b38:	f003 0301 	and.w	r3, r3, #1
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d001      	beq.n	8019b44 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019b40:	2301      	movs	r3, #1
 8019b42:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8019b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b46:	2b01      	cmp	r3, #1
 8019b48:	d10e      	bne.n	8019b68 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b4e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b5a:	f043 0202 	orr.w	r2, r3, #2
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	f000 f840 	bl	8019be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	2210      	movs	r2, #16
 8019b6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8019b70:	69fb      	ldr	r3, [r7, #28]
 8019b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d018      	beq.n	8019bac <HAL_ADC_IRQHandler+0x460>
 8019b7a:	69bb      	ldr	r3, [r7, #24]
 8019b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d013      	beq.n	8019bac <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b88:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b94:	f043 0208 	orr.w	r2, r3, #8
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019ba4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f000 ff24 	bl	801a9f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8019bac:	bf00      	nop
 8019bae:	3728      	adds	r7, #40	; 0x28
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}
 8019bb4:	50000100 	.word	0x50000100
 8019bb8:	50000300 	.word	0x50000300
 8019bbc:	50000700 	.word	0x50000700

08019bc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019bc0:	b480      	push	{r7}
 8019bc2:	b083      	sub	sp, #12
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8019bc8:	bf00      	nop
 8019bca:	370c      	adds	r7, #12
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd2:	4770      	bx	lr

08019bd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	b083      	sub	sp, #12
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8019bdc:	bf00      	nop
 8019bde:	370c      	adds	r7, #12
 8019be0:	46bd      	mov	sp, r7
 8019be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be6:	4770      	bx	lr

08019be8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8019be8:	b480      	push	{r7}
 8019bea:	b083      	sub	sp, #12
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8019bf0:	bf00      	nop
 8019bf2:	370c      	adds	r7, #12
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfa:	4770      	bx	lr

08019bfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b0b6      	sub	sp, #216	; 0xd8
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
 8019c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019c06:	2300      	movs	r3, #0
 8019c08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019c16:	2b01      	cmp	r3, #1
 8019c18:	d102      	bne.n	8019c20 <HAL_ADC_ConfigChannel+0x24>
 8019c1a:	2302      	movs	r3, #2
 8019c1c:	f000 bc04 	b.w	801a428 <HAL_ADC_ConfigChannel+0x82c>
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	2201      	movs	r2, #1
 8019c24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f7ff f875 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 8019c32:	4603      	mov	r3, r0
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	f040 83e8 	bne.w	801a40a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	6818      	ldr	r0, [r3, #0]
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	6859      	ldr	r1, [r3, #4]
 8019c42:	683b      	ldr	r3, [r7, #0]
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	461a      	mov	r2, r3
 8019c48:	f7fe fef5 	bl	8018a36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	4618      	mov	r0, r3
 8019c52:	f7ff f863 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 8019c56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f7ff f883 	bl	8018d6a <LL_ADC_INJ_IsConversionOngoing>
 8019c64:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8019c68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	f040 81d9 	bne.w	801a024 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	f040 81d4 	bne.w	801a024 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8019c7c:	683b      	ldr	r3, [r7, #0]
 8019c7e:	689b      	ldr	r3, [r3, #8]
 8019c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c84:	d10f      	bne.n	8019ca6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	6818      	ldr	r0, [r3, #0]
 8019c8a:	683b      	ldr	r3, [r7, #0]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	2200      	movs	r2, #0
 8019c90:	4619      	mov	r1, r3
 8019c92:	f7fe ff0f 	bl	8018ab4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7fe fea3 	bl	80189ea <LL_ADC_SetSamplingTimeCommonConfig>
 8019ca4:	e00e      	b.n	8019cc4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	6818      	ldr	r0, [r3, #0]
 8019caa:	683b      	ldr	r3, [r7, #0]
 8019cac:	6819      	ldr	r1, [r3, #0]
 8019cae:	683b      	ldr	r3, [r7, #0]
 8019cb0:	689b      	ldr	r3, [r3, #8]
 8019cb2:	461a      	mov	r2, r3
 8019cb4:	f7fe fefe 	bl	8018ab4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	2100      	movs	r1, #0
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	f7fe fe93 	bl	80189ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	695a      	ldr	r2, [r3, #20]
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	68db      	ldr	r3, [r3, #12]
 8019cce:	08db      	lsrs	r3, r3, #3
 8019cd0:	f003 0303 	and.w	r3, r3, #3
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8019cda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	691b      	ldr	r3, [r3, #16]
 8019ce2:	2b04      	cmp	r3, #4
 8019ce4:	d022      	beq.n	8019d2c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	6818      	ldr	r0, [r3, #0]
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	6919      	ldr	r1, [r3, #16]
 8019cee:	683b      	ldr	r3, [r7, #0]
 8019cf0:	681a      	ldr	r2, [r3, #0]
 8019cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019cf6:	f7fe fded 	bl	80188d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	6818      	ldr	r0, [r3, #0]
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	6919      	ldr	r1, [r3, #16]
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	699b      	ldr	r3, [r3, #24]
 8019d06:	461a      	mov	r2, r3
 8019d08:	f7fe fe39 	bl	801897e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	6818      	ldr	r0, [r3, #0]
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	6919      	ldr	r1, [r3, #16]
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	7f1b      	ldrb	r3, [r3, #28]
 8019d18:	2b01      	cmp	r3, #1
 8019d1a:	d102      	bne.n	8019d22 <HAL_ADC_ConfigChannel+0x126>
 8019d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019d20:	e000      	b.n	8019d24 <HAL_ADC_ConfigChannel+0x128>
 8019d22:	2300      	movs	r3, #0
 8019d24:	461a      	mov	r2, r3
 8019d26:	f7fe fe45 	bl	80189b4 <LL_ADC_SetOffsetSaturation>
 8019d2a:	e17b      	b.n	801a024 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	2100      	movs	r1, #0
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7fe fdf2 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d10a      	bne.n	8019d58 <HAL_ADC_ConfigChannel+0x15c>
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	2100      	movs	r1, #0
 8019d48:	4618      	mov	r0, r3
 8019d4a:	f7fe fde7 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	0e9b      	lsrs	r3, r3, #26
 8019d52:	f003 021f 	and.w	r2, r3, #31
 8019d56:	e01e      	b.n	8019d96 <HAL_ADC_ConfigChannel+0x19a>
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	2100      	movs	r1, #0
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f7fe fddc 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019d64:	4603      	mov	r3, r0
 8019d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019d6e:	fa93 f3a3 	rbit	r3, r3
 8019d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8019d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8019d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d101      	bne.n	8019d8a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8019d86:	2320      	movs	r3, #32
 8019d88:	e004      	b.n	8019d94 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8019d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019d8e:	fab3 f383 	clz	r3, r3
 8019d92:	b2db      	uxtb	r3, r3
 8019d94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d105      	bne.n	8019dae <HAL_ADC_ConfigChannel+0x1b2>
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	0e9b      	lsrs	r3, r3, #26
 8019da8:	f003 031f 	and.w	r3, r3, #31
 8019dac:	e018      	b.n	8019de0 <HAL_ADC_ConfigChannel+0x1e4>
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019db6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019dba:	fa93 f3a3 	rbit	r3, r3
 8019dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8019dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8019dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d101      	bne.n	8019dd6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8019dd2:	2320      	movs	r3, #32
 8019dd4:	e004      	b.n	8019de0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8019dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019dda:	fab3 f383 	clz	r3, r3
 8019dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019de0:	429a      	cmp	r2, r3
 8019de2:	d106      	bne.n	8019df2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	2200      	movs	r2, #0
 8019dea:	2100      	movs	r1, #0
 8019dec:	4618      	mov	r0, r3
 8019dee:	f7fe fdab 	bl	8018948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	2101      	movs	r1, #1
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f7fe fd8f 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019dfe:	4603      	mov	r3, r0
 8019e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d10a      	bne.n	8019e1e <HAL_ADC_ConfigChannel+0x222>
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2101      	movs	r1, #1
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7fe fd84 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019e14:	4603      	mov	r3, r0
 8019e16:	0e9b      	lsrs	r3, r3, #26
 8019e18:	f003 021f 	and.w	r2, r3, #31
 8019e1c:	e01e      	b.n	8019e5c <HAL_ADC_ConfigChannel+0x260>
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	2101      	movs	r1, #1
 8019e24:	4618      	mov	r0, r3
 8019e26:	f7fe fd79 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019e30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019e34:	fa93 f3a3 	rbit	r3, r3
 8019e38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8019e3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8019e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d101      	bne.n	8019e50 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8019e4c:	2320      	movs	r3, #32
 8019e4e:	e004      	b.n	8019e5a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8019e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019e54:	fab3 f383 	clz	r3, r3
 8019e58:	b2db      	uxtb	r3, r3
 8019e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019e5c:	683b      	ldr	r3, [r7, #0]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d105      	bne.n	8019e74 <HAL_ADC_ConfigChannel+0x278>
 8019e68:	683b      	ldr	r3, [r7, #0]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	0e9b      	lsrs	r3, r3, #26
 8019e6e:	f003 031f 	and.w	r3, r3, #31
 8019e72:	e018      	b.n	8019ea6 <HAL_ADC_ConfigChannel+0x2aa>
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e80:	fa93 f3a3 	rbit	r3, r3
 8019e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8019e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8019e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d101      	bne.n	8019e9c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8019e98:	2320      	movs	r3, #32
 8019e9a:	e004      	b.n	8019ea6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8019e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019ea0:	fab3 f383 	clz	r3, r3
 8019ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8019ea6:	429a      	cmp	r2, r3
 8019ea8:	d106      	bne.n	8019eb8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	2200      	movs	r2, #0
 8019eb0:	2101      	movs	r1, #1
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7fe fd48 	bl	8018948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	2102      	movs	r1, #2
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	f7fe fd2c 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019ec4:	4603      	mov	r3, r0
 8019ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d10a      	bne.n	8019ee4 <HAL_ADC_ConfigChannel+0x2e8>
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	2102      	movs	r1, #2
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f7fe fd21 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019eda:	4603      	mov	r3, r0
 8019edc:	0e9b      	lsrs	r3, r3, #26
 8019ede:	f003 021f 	and.w	r2, r3, #31
 8019ee2:	e01e      	b.n	8019f22 <HAL_ADC_ConfigChannel+0x326>
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	2102      	movs	r1, #2
 8019eea:	4618      	mov	r0, r3
 8019eec:	f7fe fd16 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019efa:	fa93 f3a3 	rbit	r3, r3
 8019efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8019f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8019f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d101      	bne.n	8019f16 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8019f12:	2320      	movs	r3, #32
 8019f14:	e004      	b.n	8019f20 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8019f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019f1a:	fab3 f383 	clz	r3, r3
 8019f1e:	b2db      	uxtb	r3, r3
 8019f20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d105      	bne.n	8019f3a <HAL_ADC_ConfigChannel+0x33e>
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	0e9b      	lsrs	r3, r3, #26
 8019f34:	f003 031f 	and.w	r3, r3, #31
 8019f38:	e016      	b.n	8019f68 <HAL_ADC_ConfigChannel+0x36c>
 8019f3a:	683b      	ldr	r3, [r7, #0]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019f46:	fa93 f3a3 	rbit	r3, r3
 8019f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8019f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8019f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d101      	bne.n	8019f5e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8019f5a:	2320      	movs	r3, #32
 8019f5c:	e004      	b.n	8019f68 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8019f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019f62:	fab3 f383 	clz	r3, r3
 8019f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019f68:	429a      	cmp	r2, r3
 8019f6a:	d106      	bne.n	8019f7a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	2200      	movs	r2, #0
 8019f72:	2102      	movs	r1, #2
 8019f74:	4618      	mov	r0, r3
 8019f76:	f7fe fce7 	bl	8018948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	2103      	movs	r1, #3
 8019f80:	4618      	mov	r0, r3
 8019f82:	f7fe fccb 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019f86:	4603      	mov	r3, r0
 8019f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d10a      	bne.n	8019fa6 <HAL_ADC_ConfigChannel+0x3aa>
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	2103      	movs	r1, #3
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7fe fcc0 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	0e9b      	lsrs	r3, r3, #26
 8019fa0:	f003 021f 	and.w	r2, r3, #31
 8019fa4:	e017      	b.n	8019fd6 <HAL_ADC_ConfigChannel+0x3da>
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2103      	movs	r1, #3
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7fe fcb5 	bl	801891c <LL_ADC_GetOffsetChannel>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019fb8:	fa93 f3a3 	rbit	r3, r3
 8019fbc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8019fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019fc0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8019fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d101      	bne.n	8019fcc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8019fc8:	2320      	movs	r3, #32
 8019fca:	e003      	b.n	8019fd4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8019fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019fce:	fab3 f383 	clz	r3, r3
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019fd6:	683b      	ldr	r3, [r7, #0]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d105      	bne.n	8019fee <HAL_ADC_ConfigChannel+0x3f2>
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	0e9b      	lsrs	r3, r3, #26
 8019fe8:	f003 031f 	and.w	r3, r3, #31
 8019fec:	e011      	b.n	801a012 <HAL_ADC_ConfigChannel+0x416>
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ff6:	fa93 f3a3 	rbit	r3, r3
 8019ffa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8019ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801a000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a002:	2b00      	cmp	r3, #0
 801a004:	d101      	bne.n	801a00a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801a006:	2320      	movs	r3, #32
 801a008:	e003      	b.n	801a012 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801a00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a00c:	fab3 f383 	clz	r3, r3
 801a010:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a012:	429a      	cmp	r2, r3
 801a014:	d106      	bne.n	801a024 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	2200      	movs	r2, #0
 801a01c:	2103      	movs	r1, #3
 801a01e:	4618      	mov	r0, r3
 801a020:	f7fe fc92 	bl	8018948 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	4618      	mov	r0, r3
 801a02a:	f7fe fe29 	bl	8018c80 <LL_ADC_IsEnabled>
 801a02e:	4603      	mov	r3, r0
 801a030:	2b00      	cmp	r3, #0
 801a032:	f040 813d 	bne.w	801a2b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6818      	ldr	r0, [r3, #0]
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	6819      	ldr	r1, [r3, #0]
 801a03e:	683b      	ldr	r3, [r7, #0]
 801a040:	68db      	ldr	r3, [r3, #12]
 801a042:	461a      	mov	r2, r3
 801a044:	f7fe fd62 	bl	8018b0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801a048:	683b      	ldr	r3, [r7, #0]
 801a04a:	68db      	ldr	r3, [r3, #12]
 801a04c:	4aa2      	ldr	r2, [pc, #648]	; (801a2d8 <HAL_ADC_ConfigChannel+0x6dc>)
 801a04e:	4293      	cmp	r3, r2
 801a050:	f040 812e 	bne.w	801a2b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a060:	2b00      	cmp	r3, #0
 801a062:	d10b      	bne.n	801a07c <HAL_ADC_ConfigChannel+0x480>
 801a064:	683b      	ldr	r3, [r7, #0]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	0e9b      	lsrs	r3, r3, #26
 801a06a:	3301      	adds	r3, #1
 801a06c:	f003 031f 	and.w	r3, r3, #31
 801a070:	2b09      	cmp	r3, #9
 801a072:	bf94      	ite	ls
 801a074:	2301      	movls	r3, #1
 801a076:	2300      	movhi	r3, #0
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	e019      	b.n	801a0b0 <HAL_ADC_ConfigChannel+0x4b4>
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a084:	fa93 f3a3 	rbit	r3, r3
 801a088:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801a08a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a08c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801a08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a090:	2b00      	cmp	r3, #0
 801a092:	d101      	bne.n	801a098 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801a094:	2320      	movs	r3, #32
 801a096:	e003      	b.n	801a0a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801a098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a09a:	fab3 f383 	clz	r3, r3
 801a09e:	b2db      	uxtb	r3, r3
 801a0a0:	3301      	adds	r3, #1
 801a0a2:	f003 031f 	and.w	r3, r3, #31
 801a0a6:	2b09      	cmp	r3, #9
 801a0a8:	bf94      	ite	ls
 801a0aa:	2301      	movls	r3, #1
 801a0ac:	2300      	movhi	r3, #0
 801a0ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d079      	beq.n	801a1a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d107      	bne.n	801a0d0 <HAL_ADC_ConfigChannel+0x4d4>
 801a0c0:	683b      	ldr	r3, [r7, #0]
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	0e9b      	lsrs	r3, r3, #26
 801a0c6:	3301      	adds	r3, #1
 801a0c8:	069b      	lsls	r3, r3, #26
 801a0ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a0ce:	e015      	b.n	801a0fc <HAL_ADC_ConfigChannel+0x500>
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0d8:	fa93 f3a3 	rbit	r3, r3
 801a0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801a0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801a0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d101      	bne.n	801a0ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801a0e8:	2320      	movs	r3, #32
 801a0ea:	e003      	b.n	801a0f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801a0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0ee:	fab3 f383 	clz	r3, r3
 801a0f2:	b2db      	uxtb	r3, r3
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	069b      	lsls	r3, r3, #26
 801a0f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a0fc:	683b      	ldr	r3, [r7, #0]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a104:	2b00      	cmp	r3, #0
 801a106:	d109      	bne.n	801a11c <HAL_ADC_ConfigChannel+0x520>
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	0e9b      	lsrs	r3, r3, #26
 801a10e:	3301      	adds	r3, #1
 801a110:	f003 031f 	and.w	r3, r3, #31
 801a114:	2101      	movs	r1, #1
 801a116:	fa01 f303 	lsl.w	r3, r1, r3
 801a11a:	e017      	b.n	801a14c <HAL_ADC_ConfigChannel+0x550>
 801a11c:	683b      	ldr	r3, [r7, #0]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a124:	fa93 f3a3 	rbit	r3, r3
 801a128:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801a12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a12c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801a12e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a130:	2b00      	cmp	r3, #0
 801a132:	d101      	bne.n	801a138 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801a134:	2320      	movs	r3, #32
 801a136:	e003      	b.n	801a140 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801a138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a13a:	fab3 f383 	clz	r3, r3
 801a13e:	b2db      	uxtb	r3, r3
 801a140:	3301      	adds	r3, #1
 801a142:	f003 031f 	and.w	r3, r3, #31
 801a146:	2101      	movs	r1, #1
 801a148:	fa01 f303 	lsl.w	r3, r1, r3
 801a14c:	ea42 0103 	orr.w	r1, r2, r3
 801a150:	683b      	ldr	r3, [r7, #0]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d10a      	bne.n	801a172 <HAL_ADC_ConfigChannel+0x576>
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	0e9b      	lsrs	r3, r3, #26
 801a162:	3301      	adds	r3, #1
 801a164:	f003 021f 	and.w	r2, r3, #31
 801a168:	4613      	mov	r3, r2
 801a16a:	005b      	lsls	r3, r3, #1
 801a16c:	4413      	add	r3, r2
 801a16e:	051b      	lsls	r3, r3, #20
 801a170:	e018      	b.n	801a1a4 <HAL_ADC_ConfigChannel+0x5a8>
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a17a:	fa93 f3a3 	rbit	r3, r3
 801a17e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a182:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801a184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a186:	2b00      	cmp	r3, #0
 801a188:	d101      	bne.n	801a18e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801a18a:	2320      	movs	r3, #32
 801a18c:	e003      	b.n	801a196 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801a18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a190:	fab3 f383 	clz	r3, r3
 801a194:	b2db      	uxtb	r3, r3
 801a196:	3301      	adds	r3, #1
 801a198:	f003 021f 	and.w	r2, r3, #31
 801a19c:	4613      	mov	r3, r2
 801a19e:	005b      	lsls	r3, r3, #1
 801a1a0:	4413      	add	r3, r2
 801a1a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a1a4:	430b      	orrs	r3, r1
 801a1a6:	e07e      	b.n	801a2a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a1a8:	683b      	ldr	r3, [r7, #0]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d107      	bne.n	801a1c4 <HAL_ADC_ConfigChannel+0x5c8>
 801a1b4:	683b      	ldr	r3, [r7, #0]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	0e9b      	lsrs	r3, r3, #26
 801a1ba:	3301      	adds	r3, #1
 801a1bc:	069b      	lsls	r3, r3, #26
 801a1be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a1c2:	e015      	b.n	801a1f0 <HAL_ADC_ConfigChannel+0x5f4>
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1cc:	fa93 f3a3 	rbit	r3, r3
 801a1d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d101      	bne.n	801a1e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801a1dc:	2320      	movs	r3, #32
 801a1de:	e003      	b.n	801a1e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e2:	fab3 f383 	clz	r3, r3
 801a1e6:	b2db      	uxtb	r3, r3
 801a1e8:	3301      	adds	r3, #1
 801a1ea:	069b      	lsls	r3, r3, #26
 801a1ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a1f0:	683b      	ldr	r3, [r7, #0]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d109      	bne.n	801a210 <HAL_ADC_ConfigChannel+0x614>
 801a1fc:	683b      	ldr	r3, [r7, #0]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	0e9b      	lsrs	r3, r3, #26
 801a202:	3301      	adds	r3, #1
 801a204:	f003 031f 	and.w	r3, r3, #31
 801a208:	2101      	movs	r1, #1
 801a20a:	fa01 f303 	lsl.w	r3, r1, r3
 801a20e:	e017      	b.n	801a240 <HAL_ADC_ConfigChannel+0x644>
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a216:	6a3b      	ldr	r3, [r7, #32]
 801a218:	fa93 f3a3 	rbit	r3, r3
 801a21c:	61fb      	str	r3, [r7, #28]
  return result;
 801a21e:	69fb      	ldr	r3, [r7, #28]
 801a220:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a224:	2b00      	cmp	r3, #0
 801a226:	d101      	bne.n	801a22c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801a228:	2320      	movs	r3, #32
 801a22a:	e003      	b.n	801a234 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a22e:	fab3 f383 	clz	r3, r3
 801a232:	b2db      	uxtb	r3, r3
 801a234:	3301      	adds	r3, #1
 801a236:	f003 031f 	and.w	r3, r3, #31
 801a23a:	2101      	movs	r1, #1
 801a23c:	fa01 f303 	lsl.w	r3, r1, r3
 801a240:	ea42 0103 	orr.w	r1, r2, r3
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d10d      	bne.n	801a26c <HAL_ADC_ConfigChannel+0x670>
 801a250:	683b      	ldr	r3, [r7, #0]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	0e9b      	lsrs	r3, r3, #26
 801a256:	3301      	adds	r3, #1
 801a258:	f003 021f 	and.w	r2, r3, #31
 801a25c:	4613      	mov	r3, r2
 801a25e:	005b      	lsls	r3, r3, #1
 801a260:	4413      	add	r3, r2
 801a262:	3b1e      	subs	r3, #30
 801a264:	051b      	lsls	r3, r3, #20
 801a266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a26a:	e01b      	b.n	801a2a4 <HAL_ADC_ConfigChannel+0x6a8>
 801a26c:	683b      	ldr	r3, [r7, #0]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	fa93 f3a3 	rbit	r3, r3
 801a278:	613b      	str	r3, [r7, #16]
  return result;
 801a27a:	693b      	ldr	r3, [r7, #16]
 801a27c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a27e:	69bb      	ldr	r3, [r7, #24]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d101      	bne.n	801a288 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801a284:	2320      	movs	r3, #32
 801a286:	e003      	b.n	801a290 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801a288:	69bb      	ldr	r3, [r7, #24]
 801a28a:	fab3 f383 	clz	r3, r3
 801a28e:	b2db      	uxtb	r3, r3
 801a290:	3301      	adds	r3, #1
 801a292:	f003 021f 	and.w	r2, r3, #31
 801a296:	4613      	mov	r3, r2
 801a298:	005b      	lsls	r3, r3, #1
 801a29a:	4413      	add	r3, r2
 801a29c:	3b1e      	subs	r3, #30
 801a29e:	051b      	lsls	r3, r3, #20
 801a2a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a2a4:	430b      	orrs	r3, r1
 801a2a6:	683a      	ldr	r2, [r7, #0]
 801a2a8:	6892      	ldr	r2, [r2, #8]
 801a2aa:	4619      	mov	r1, r3
 801a2ac:	f7fe fc02 	bl	8018ab4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801a2b0:	683b      	ldr	r3, [r7, #0]
 801a2b2:	681a      	ldr	r2, [r3, #0]
 801a2b4:	4b09      	ldr	r3, [pc, #36]	; (801a2dc <HAL_ADC_ConfigChannel+0x6e0>)
 801a2b6:	4013      	ands	r3, r2
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	f000 80af 	beq.w	801a41c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a2c6:	d004      	beq.n	801a2d2 <HAL_ADC_ConfigChannel+0x6d6>
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	4a04      	ldr	r2, [pc, #16]	; (801a2e0 <HAL_ADC_ConfigChannel+0x6e4>)
 801a2ce:	4293      	cmp	r3, r2
 801a2d0:	d10a      	bne.n	801a2e8 <HAL_ADC_ConfigChannel+0x6ec>
 801a2d2:	4b04      	ldr	r3, [pc, #16]	; (801a2e4 <HAL_ADC_ConfigChannel+0x6e8>)
 801a2d4:	e009      	b.n	801a2ea <HAL_ADC_ConfigChannel+0x6ee>
 801a2d6:	bf00      	nop
 801a2d8:	407f0000 	.word	0x407f0000
 801a2dc:	80080000 	.word	0x80080000
 801a2e0:	50000100 	.word	0x50000100
 801a2e4:	50000300 	.word	0x50000300
 801a2e8:	4b51      	ldr	r3, [pc, #324]	; (801a430 <HAL_ADC_ConfigChannel+0x834>)
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	f7fe fae4 	bl	80188b8 <LL_ADC_GetCommonPathInternalCh>
 801a2f0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	4a4e      	ldr	r2, [pc, #312]	; (801a434 <HAL_ADC_ConfigChannel+0x838>)
 801a2fa:	4293      	cmp	r3, r2
 801a2fc:	d004      	beq.n	801a308 <HAL_ADC_ConfigChannel+0x70c>
 801a2fe:	683b      	ldr	r3, [r7, #0]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	4a4d      	ldr	r2, [pc, #308]	; (801a438 <HAL_ADC_ConfigChannel+0x83c>)
 801a304:	4293      	cmp	r3, r2
 801a306:	d134      	bne.n	801a372 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801a308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a30c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a310:	2b00      	cmp	r3, #0
 801a312:	d12e      	bne.n	801a372 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a31c:	d17e      	bne.n	801a41c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a326:	d004      	beq.n	801a332 <HAL_ADC_ConfigChannel+0x736>
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	4a43      	ldr	r2, [pc, #268]	; (801a43c <HAL_ADC_ConfigChannel+0x840>)
 801a32e:	4293      	cmp	r3, r2
 801a330:	d101      	bne.n	801a336 <HAL_ADC_ConfigChannel+0x73a>
 801a332:	4a43      	ldr	r2, [pc, #268]	; (801a440 <HAL_ADC_ConfigChannel+0x844>)
 801a334:	e000      	b.n	801a338 <HAL_ADC_ConfigChannel+0x73c>
 801a336:	4a3e      	ldr	r2, [pc, #248]	; (801a430 <HAL_ADC_ConfigChannel+0x834>)
 801a338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a33c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a340:	4619      	mov	r1, r3
 801a342:	4610      	mov	r0, r2
 801a344:	f7fe faa5 	bl	8018892 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a348:	4b3e      	ldr	r3, [pc, #248]	; (801a444 <HAL_ADC_ConfigChannel+0x848>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	099b      	lsrs	r3, r3, #6
 801a34e:	4a3e      	ldr	r2, [pc, #248]	; (801a448 <HAL_ADC_ConfigChannel+0x84c>)
 801a350:	fba2 2303 	umull	r2, r3, r2, r3
 801a354:	099b      	lsrs	r3, r3, #6
 801a356:	1c5a      	adds	r2, r3, #1
 801a358:	4613      	mov	r3, r2
 801a35a:	005b      	lsls	r3, r3, #1
 801a35c:	4413      	add	r3, r2
 801a35e:	009b      	lsls	r3, r3, #2
 801a360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a362:	e002      	b.n	801a36a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	3b01      	subs	r3, #1
 801a368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d1f9      	bne.n	801a364 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a370:	e054      	b.n	801a41c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	4a35      	ldr	r2, [pc, #212]	; (801a44c <HAL_ADC_ConfigChannel+0x850>)
 801a378:	4293      	cmp	r3, r2
 801a37a:	d120      	bne.n	801a3be <HAL_ADC_ConfigChannel+0x7c2>
 801a37c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a384:	2b00      	cmp	r3, #0
 801a386:	d11a      	bne.n	801a3be <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a390:	d144      	bne.n	801a41c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a39a:	d004      	beq.n	801a3a6 <HAL_ADC_ConfigChannel+0x7aa>
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	4a26      	ldr	r2, [pc, #152]	; (801a43c <HAL_ADC_ConfigChannel+0x840>)
 801a3a2:	4293      	cmp	r3, r2
 801a3a4:	d101      	bne.n	801a3aa <HAL_ADC_ConfigChannel+0x7ae>
 801a3a6:	4a26      	ldr	r2, [pc, #152]	; (801a440 <HAL_ADC_ConfigChannel+0x844>)
 801a3a8:	e000      	b.n	801a3ac <HAL_ADC_ConfigChannel+0x7b0>
 801a3aa:	4a21      	ldr	r2, [pc, #132]	; (801a430 <HAL_ADC_ConfigChannel+0x834>)
 801a3ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a3b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a3b4:	4619      	mov	r1, r3
 801a3b6:	4610      	mov	r0, r2
 801a3b8:	f7fe fa6b 	bl	8018892 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a3bc:	e02e      	b.n	801a41c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801a3be:	683b      	ldr	r3, [r7, #0]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4a23      	ldr	r2, [pc, #140]	; (801a450 <HAL_ADC_ConfigChannel+0x854>)
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	d129      	bne.n	801a41c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a3c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a3cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d123      	bne.n	801a41c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	4a18      	ldr	r2, [pc, #96]	; (801a43c <HAL_ADC_ConfigChannel+0x840>)
 801a3da:	4293      	cmp	r3, r2
 801a3dc:	d01e      	beq.n	801a41c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a3e6:	d004      	beq.n	801a3f2 <HAL_ADC_ConfigChannel+0x7f6>
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	4a13      	ldr	r2, [pc, #76]	; (801a43c <HAL_ADC_ConfigChannel+0x840>)
 801a3ee:	4293      	cmp	r3, r2
 801a3f0:	d101      	bne.n	801a3f6 <HAL_ADC_ConfigChannel+0x7fa>
 801a3f2:	4a13      	ldr	r2, [pc, #76]	; (801a440 <HAL_ADC_ConfigChannel+0x844>)
 801a3f4:	e000      	b.n	801a3f8 <HAL_ADC_ConfigChannel+0x7fc>
 801a3f6:	4a0e      	ldr	r2, [pc, #56]	; (801a430 <HAL_ADC_ConfigChannel+0x834>)
 801a3f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a3fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a400:	4619      	mov	r1, r3
 801a402:	4610      	mov	r0, r2
 801a404:	f7fe fa45 	bl	8018892 <LL_ADC_SetCommonPathInternalCh>
 801a408:	e008      	b.n	801a41c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a40e:	f043 0220 	orr.w	r2, r3, #32
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a416:	2301      	movs	r3, #1
 801a418:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	2200      	movs	r2, #0
 801a420:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a424:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a428:	4618      	mov	r0, r3
 801a42a:	37d8      	adds	r7, #216	; 0xd8
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd80      	pop	{r7, pc}
 801a430:	50000700 	.word	0x50000700
 801a434:	c3210000 	.word	0xc3210000
 801a438:	90c00010 	.word	0x90c00010
 801a43c:	50000100 	.word	0x50000100
 801a440:	50000300 	.word	0x50000300
 801a444:	20000000 	.word	0x20000000
 801a448:	053e2d63 	.word	0x053e2d63
 801a44c:	c7520000 	.word	0xc7520000
 801a450:	cb840000 	.word	0xcb840000

0801a454 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801a454:	b580      	push	{r7, lr}
 801a456:	b088      	sub	sp, #32
 801a458:	af00      	add	r7, sp, #0
 801a45a:	6078      	str	r0, [r7, #4]
 801a45c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801a45e:	2300      	movs	r3, #0
 801a460:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	4618      	mov	r0, r3
 801a46c:	f7fe fc56 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 801a470:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	4618      	mov	r0, r3
 801a478:	f7fe fc77 	bl	8018d6a <LL_ADC_INJ_IsConversionOngoing>
 801a47c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801a47e:	693b      	ldr	r3, [r7, #16]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d103      	bne.n	801a48c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	2b00      	cmp	r3, #0
 801a488:	f000 8098 	beq.w	801a5bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	68db      	ldr	r3, [r3, #12]
 801a492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a496:	2b00      	cmp	r3, #0
 801a498:	d02a      	beq.n	801a4f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	7f5b      	ldrb	r3, [r3, #29]
 801a49e:	2b01      	cmp	r3, #1
 801a4a0:	d126      	bne.n	801a4f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	7f1b      	ldrb	r3, [r3, #28]
 801a4a6:	2b01      	cmp	r3, #1
 801a4a8:	d122      	bne.n	801a4f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801a4aa:	2301      	movs	r3, #1
 801a4ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a4ae:	e014      	b.n	801a4da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801a4b0:	69fb      	ldr	r3, [r7, #28]
 801a4b2:	4a45      	ldr	r2, [pc, #276]	; (801a5c8 <ADC_ConversionStop+0x174>)
 801a4b4:	4293      	cmp	r3, r2
 801a4b6:	d90d      	bls.n	801a4d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a4bc:	f043 0210 	orr.w	r2, r3, #16
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a4c8:	f043 0201 	orr.w	r2, r3, #1
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a4d0:	2301      	movs	r3, #1
 801a4d2:	e074      	b.n	801a5be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801a4d4:	69fb      	ldr	r3, [r7, #28]
 801a4d6:	3301      	adds	r3, #1
 801a4d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a4e4:	2b40      	cmp	r3, #64	; 0x40
 801a4e6:	d1e3      	bne.n	801a4b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	2240      	movs	r2, #64	; 0x40
 801a4ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801a4f0:	69bb      	ldr	r3, [r7, #24]
 801a4f2:	2b02      	cmp	r3, #2
 801a4f4:	d014      	beq.n	801a520 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f7fe fc0e 	bl	8018d1c <LL_ADC_REG_IsConversionOngoing>
 801a500:	4603      	mov	r3, r0
 801a502:	2b00      	cmp	r3, #0
 801a504:	d00c      	beq.n	801a520 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7fe fbcb 	bl	8018ca6 <LL_ADC_IsDisableOngoing>
 801a510:	4603      	mov	r3, r0
 801a512:	2b00      	cmp	r3, #0
 801a514:	d104      	bne.n	801a520 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	4618      	mov	r0, r3
 801a51c:	f7fe fbea 	bl	8018cf4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801a520:	69bb      	ldr	r3, [r7, #24]
 801a522:	2b01      	cmp	r3, #1
 801a524:	d014      	beq.n	801a550 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	4618      	mov	r0, r3
 801a52c:	f7fe fc1d 	bl	8018d6a <LL_ADC_INJ_IsConversionOngoing>
 801a530:	4603      	mov	r3, r0
 801a532:	2b00      	cmp	r3, #0
 801a534:	d00c      	beq.n	801a550 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	4618      	mov	r0, r3
 801a53c:	f7fe fbb3 	bl	8018ca6 <LL_ADC_IsDisableOngoing>
 801a540:	4603      	mov	r3, r0
 801a542:	2b00      	cmp	r3, #0
 801a544:	d104      	bne.n	801a550 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	4618      	mov	r0, r3
 801a54c:	f7fe fbf9 	bl	8018d42 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801a550:	69bb      	ldr	r3, [r7, #24]
 801a552:	2b02      	cmp	r3, #2
 801a554:	d005      	beq.n	801a562 <ADC_ConversionStop+0x10e>
 801a556:	69bb      	ldr	r3, [r7, #24]
 801a558:	2b03      	cmp	r3, #3
 801a55a:	d105      	bne.n	801a568 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801a55c:	230c      	movs	r3, #12
 801a55e:	617b      	str	r3, [r7, #20]
        break;
 801a560:	e005      	b.n	801a56e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801a562:	2308      	movs	r3, #8
 801a564:	617b      	str	r3, [r7, #20]
        break;
 801a566:	e002      	b.n	801a56e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801a568:	2304      	movs	r3, #4
 801a56a:	617b      	str	r3, [r7, #20]
        break;
 801a56c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801a56e:	f7fe f94f 	bl	8018810 <HAL_GetTick>
 801a572:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a574:	e01b      	b.n	801a5ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801a576:	f7fe f94b 	bl	8018810 <HAL_GetTick>
 801a57a:	4602      	mov	r2, r0
 801a57c:	68bb      	ldr	r3, [r7, #8]
 801a57e:	1ad3      	subs	r3, r2, r3
 801a580:	2b05      	cmp	r3, #5
 801a582:	d914      	bls.n	801a5ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	689a      	ldr	r2, [r3, #8]
 801a58a:	697b      	ldr	r3, [r7, #20]
 801a58c:	4013      	ands	r3, r2
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d00d      	beq.n	801a5ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a596:	f043 0210 	orr.w	r2, r3, #16
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a5a2:	f043 0201 	orr.w	r2, r3, #1
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	e007      	b.n	801a5be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	689a      	ldr	r2, [r3, #8]
 801a5b4:	697b      	ldr	r3, [r7, #20]
 801a5b6:	4013      	ands	r3, r2
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d1dc      	bne.n	801a576 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801a5bc:	2300      	movs	r3, #0
}
 801a5be:	4618      	mov	r0, r3
 801a5c0:	3720      	adds	r7, #32
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd80      	pop	{r7, pc}
 801a5c6:	bf00      	nop
 801a5c8:	a33fffff 	.word	0xa33fffff

0801a5cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	4618      	mov	r0, r3
 801a5da:	f7fe fb51 	bl	8018c80 <LL_ADC_IsEnabled>
 801a5de:	4603      	mov	r3, r0
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d14d      	bne.n	801a680 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	689a      	ldr	r2, [r3, #8]
 801a5ea:	4b28      	ldr	r3, [pc, #160]	; (801a68c <ADC_Enable+0xc0>)
 801a5ec:	4013      	ands	r3, r2
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d00d      	beq.n	801a60e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a5f6:	f043 0210 	orr.w	r2, r3, #16
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a602:	f043 0201 	orr.w	r2, r3, #1
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801a60a:	2301      	movs	r3, #1
 801a60c:	e039      	b.n	801a682 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	4618      	mov	r0, r3
 801a614:	f7fe fb0c 	bl	8018c30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801a618:	f7fe f8fa 	bl	8018810 <HAL_GetTick>
 801a61c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a61e:	e028      	b.n	801a672 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	4618      	mov	r0, r3
 801a626:	f7fe fb2b 	bl	8018c80 <LL_ADC_IsEnabled>
 801a62a:	4603      	mov	r3, r0
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d104      	bne.n	801a63a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	4618      	mov	r0, r3
 801a636:	f7fe fafb 	bl	8018c30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801a63a:	f7fe f8e9 	bl	8018810 <HAL_GetTick>
 801a63e:	4602      	mov	r2, r0
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	1ad3      	subs	r3, r2, r3
 801a644:	2b02      	cmp	r3, #2
 801a646:	d914      	bls.n	801a672 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	f003 0301 	and.w	r3, r3, #1
 801a652:	2b01      	cmp	r3, #1
 801a654:	d00d      	beq.n	801a672 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a65a:	f043 0210 	orr.w	r2, r3, #16
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a666:	f043 0201 	orr.w	r2, r3, #1
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a66e:	2301      	movs	r3, #1
 801a670:	e007      	b.n	801a682 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	f003 0301 	and.w	r3, r3, #1
 801a67c:	2b01      	cmp	r3, #1
 801a67e:	d1cf      	bne.n	801a620 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801a680:	2300      	movs	r3, #0
}
 801a682:	4618      	mov	r0, r3
 801a684:	3710      	adds	r7, #16
 801a686:	46bd      	mov	sp, r7
 801a688:	bd80      	pop	{r7, pc}
 801a68a:	bf00      	nop
 801a68c:	8000003f 	.word	0x8000003f

0801a690 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b084      	sub	sp, #16
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	4618      	mov	r0, r3
 801a69e:	f7fe fb02 	bl	8018ca6 <LL_ADC_IsDisableOngoing>
 801a6a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	f7fe fae9 	bl	8018c80 <LL_ADC_IsEnabled>
 801a6ae:	4603      	mov	r3, r0
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d047      	beq.n	801a744 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d144      	bne.n	801a744 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	689b      	ldr	r3, [r3, #8]
 801a6c0:	f003 030d 	and.w	r3, r3, #13
 801a6c4:	2b01      	cmp	r3, #1
 801a6c6:	d10c      	bne.n	801a6e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	f7fe fac3 	bl	8018c58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2203      	movs	r2, #3
 801a6d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801a6da:	f7fe f899 	bl	8018810 <HAL_GetTick>
 801a6de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a6e0:	e029      	b.n	801a736 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6e6:	f043 0210 	orr.w	r2, r3, #16
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a6f2:	f043 0201 	orr.w	r2, r3, #1
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801a6fa:	2301      	movs	r3, #1
 801a6fc:	e023      	b.n	801a746 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801a6fe:	f7fe f887 	bl	8018810 <HAL_GetTick>
 801a702:	4602      	mov	r2, r0
 801a704:	68bb      	ldr	r3, [r7, #8]
 801a706:	1ad3      	subs	r3, r2, r3
 801a708:	2b02      	cmp	r3, #2
 801a70a:	d914      	bls.n	801a736 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	689b      	ldr	r3, [r3, #8]
 801a712:	f003 0301 	and.w	r3, r3, #1
 801a716:	2b00      	cmp	r3, #0
 801a718:	d00d      	beq.n	801a736 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a71e:	f043 0210 	orr.w	r2, r3, #16
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a72a:	f043 0201 	orr.w	r2, r3, #1
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a732:	2301      	movs	r3, #1
 801a734:	e007      	b.n	801a746 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	689b      	ldr	r3, [r3, #8]
 801a73c:	f003 0301 	and.w	r3, r3, #1
 801a740:	2b00      	cmp	r3, #0
 801a742:	d1dc      	bne.n	801a6fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801a744:	2300      	movs	r3, #0
}
 801a746:	4618      	mov	r0, r3
 801a748:	3710      	adds	r7, #16
 801a74a:	46bd      	mov	sp, r7
 801a74c:	bd80      	pop	{r7, pc}

0801a74e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801a74e:	b580      	push	{r7, lr}
 801a750:	b084      	sub	sp, #16
 801a752:	af00      	add	r7, sp, #0
 801a754:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a75a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a764:	2b00      	cmp	r3, #0
 801a766:	d14b      	bne.n	801a800 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a76c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	f003 0308 	and.w	r3, r3, #8
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d021      	beq.n	801a7c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	4618      	mov	r0, r3
 801a788:	f7fe f942 	bl	8018a10 <LL_ADC_REG_IsTriggerSourceSWStart>
 801a78c:	4603      	mov	r3, r0
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d032      	beq.n	801a7f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	68db      	ldr	r3, [r3, #12]
 801a798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d12b      	bne.n	801a7f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d11f      	bne.n	801a7f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7bc:	f043 0201 	orr.w	r2, r3, #1
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	65da      	str	r2, [r3, #92]	; 0x5c
 801a7c4:	e018      	b.n	801a7f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	68db      	ldr	r3, [r3, #12]
 801a7cc:	f003 0302 	and.w	r3, r3, #2
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d111      	bne.n	801a7f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d105      	bne.n	801a7f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7f0:	f043 0201 	orr.w	r2, r3, #1
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801a7f8:	68f8      	ldr	r0, [r7, #12]
 801a7fa:	f7ed fd01 	bl	8008200 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801a7fe:	e00e      	b.n	801a81e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a804:	f003 0310 	and.w	r3, r3, #16
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d003      	beq.n	801a814 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801a80c:	68f8      	ldr	r0, [r7, #12]
 801a80e:	f7ff f9eb 	bl	8019be8 <HAL_ADC_ErrorCallback>
}
 801a812:	e004      	b.n	801a81e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a81a:	6878      	ldr	r0, [r7, #4]
 801a81c:	4798      	blx	r3
}
 801a81e:	bf00      	nop
 801a820:	3710      	adds	r7, #16
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}

0801a826 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801a826:	b580      	push	{r7, lr}
 801a828:	b084      	sub	sp, #16
 801a82a:	af00      	add	r7, sp, #0
 801a82c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a832:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801a834:	68f8      	ldr	r0, [r7, #12]
 801a836:	f7ff f9c3 	bl	8019bc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801a83a:	bf00      	nop
 801a83c:	3710      	adds	r7, #16
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}

0801a842 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801a842:	b580      	push	{r7, lr}
 801a844:	b084      	sub	sp, #16
 801a846:	af00      	add	r7, sp, #0
 801a848:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a84e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a854:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a860:	f043 0204 	orr.w	r2, r3, #4
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801a868:	68f8      	ldr	r0, [r7, #12]
 801a86a:	f7ff f9bd 	bl	8019be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801a86e:	bf00      	nop
 801a870:	3710      	adds	r7, #16
 801a872:	46bd      	mov	sp, r7
 801a874:	bd80      	pop	{r7, pc}

0801a876 <LL_ADC_IsEnabled>:
{
 801a876:	b480      	push	{r7}
 801a878:	b083      	sub	sp, #12
 801a87a:	af00      	add	r7, sp, #0
 801a87c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	689b      	ldr	r3, [r3, #8]
 801a882:	f003 0301 	and.w	r3, r3, #1
 801a886:	2b01      	cmp	r3, #1
 801a888:	d101      	bne.n	801a88e <LL_ADC_IsEnabled+0x18>
 801a88a:	2301      	movs	r3, #1
 801a88c:	e000      	b.n	801a890 <LL_ADC_IsEnabled+0x1a>
 801a88e:	2300      	movs	r3, #0
}
 801a890:	4618      	mov	r0, r3
 801a892:	370c      	adds	r7, #12
 801a894:	46bd      	mov	sp, r7
 801a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a89a:	4770      	bx	lr

0801a89c <LL_ADC_StartCalibration>:
{
 801a89c:	b480      	push	{r7}
 801a89e:	b083      	sub	sp, #12
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
 801a8a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	689b      	ldr	r3, [r3, #8]
 801a8aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a8ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801a8b2:	683a      	ldr	r2, [r7, #0]
 801a8b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a8b8:	4313      	orrs	r3, r2
 801a8ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	609a      	str	r2, [r3, #8]
}
 801a8c2:	bf00      	nop
 801a8c4:	370c      	adds	r7, #12
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8cc:	4770      	bx	lr

0801a8ce <LL_ADC_IsCalibrationOnGoing>:
{
 801a8ce:	b480      	push	{r7}
 801a8d0:	b083      	sub	sp, #12
 801a8d2:	af00      	add	r7, sp, #0
 801a8d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	689b      	ldr	r3, [r3, #8]
 801a8da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a8de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a8e2:	d101      	bne.n	801a8e8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801a8e4:	2301      	movs	r3, #1
 801a8e6:	e000      	b.n	801a8ea <LL_ADC_IsCalibrationOnGoing+0x1c>
 801a8e8:	2300      	movs	r3, #0
}
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	370c      	adds	r7, #12
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f4:	4770      	bx	lr

0801a8f6 <LL_ADC_REG_IsConversionOngoing>:
{
 801a8f6:	b480      	push	{r7}
 801a8f8:	b083      	sub	sp, #12
 801a8fa:	af00      	add	r7, sp, #0
 801a8fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	689b      	ldr	r3, [r3, #8]
 801a902:	f003 0304 	and.w	r3, r3, #4
 801a906:	2b04      	cmp	r3, #4
 801a908:	d101      	bne.n	801a90e <LL_ADC_REG_IsConversionOngoing+0x18>
 801a90a:	2301      	movs	r3, #1
 801a90c:	e000      	b.n	801a910 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801a90e:	2300      	movs	r3, #0
}
 801a910:	4618      	mov	r0, r3
 801a912:	370c      	adds	r7, #12
 801a914:	46bd      	mov	sp, r7
 801a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a91a:	4770      	bx	lr

0801a91c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801a926:	2300      	movs	r3, #0
 801a928:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a930:	2b01      	cmp	r3, #1
 801a932:	d101      	bne.n	801a938 <HAL_ADCEx_Calibration_Start+0x1c>
 801a934:	2302      	movs	r3, #2
 801a936:	e04d      	b.n	801a9d4 <HAL_ADCEx_Calibration_Start+0xb8>
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2201      	movs	r2, #1
 801a93c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801a940:	6878      	ldr	r0, [r7, #4]
 801a942:	f7ff fea5 	bl	801a690 <ADC_Disable>
 801a946:	4603      	mov	r3, r0
 801a948:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801a94a:	7bfb      	ldrb	r3, [r7, #15]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d136      	bne.n	801a9be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a958:	f023 0302 	bic.w	r3, r3, #2
 801a95c:	f043 0202 	orr.w	r2, r3, #2
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	6839      	ldr	r1, [r7, #0]
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7ff ff96 	bl	801a89c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801a970:	e014      	b.n	801a99c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	3301      	adds	r3, #1
 801a976:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801a978:	68bb      	ldr	r3, [r7, #8]
 801a97a:	4a18      	ldr	r2, [pc, #96]	; (801a9dc <HAL_ADCEx_Calibration_Start+0xc0>)
 801a97c:	4293      	cmp	r3, r2
 801a97e:	d90d      	bls.n	801a99c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a984:	f023 0312 	bic.w	r3, r3, #18
 801a988:	f043 0210 	orr.w	r2, r3, #16
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	2200      	movs	r2, #0
 801a994:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801a998:	2301      	movs	r3, #1
 801a99a:	e01b      	b.n	801a9d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	f7ff ff94 	bl	801a8ce <LL_ADC_IsCalibrationOnGoing>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d1e2      	bne.n	801a972 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9b0:	f023 0303 	bic.w	r3, r3, #3
 801a9b4:	f043 0201 	orr.w	r2, r3, #1
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	65da      	str	r2, [r3, #92]	; 0x5c
 801a9bc:	e005      	b.n	801a9ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9c2:	f043 0210 	orr.w	r2, r3, #16
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	3710      	adds	r7, #16
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}
 801a9dc:	0004de01 	.word	0x0004de01

0801a9e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801a9e0:	b480      	push	{r7}
 801a9e2:	b083      	sub	sp, #12
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801a9e8:	bf00      	nop
 801a9ea:	370c      	adds	r7, #12
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f2:	4770      	bx	lr

0801a9f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801a9f4:	b480      	push	{r7}
 801a9f6:	b083      	sub	sp, #12
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801a9fc:	bf00      	nop
 801a9fe:	370c      	adds	r7, #12
 801aa00:	46bd      	mov	sp, r7
 801aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa06:	4770      	bx	lr

0801aa08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801aa08:	b480      	push	{r7}
 801aa0a:	b083      	sub	sp, #12
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801aa10:	bf00      	nop
 801aa12:	370c      	adds	r7, #12
 801aa14:	46bd      	mov	sp, r7
 801aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1a:	4770      	bx	lr

0801aa1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801aa1c:	b480      	push	{r7}
 801aa1e:	b083      	sub	sp, #12
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801aa24:	bf00      	nop
 801aa26:	370c      	adds	r7, #12
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa2e:	4770      	bx	lr

0801aa30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801aa30:	b480      	push	{r7}
 801aa32:	b083      	sub	sp, #12
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801aa38:	bf00      	nop
 801aa3a:	370c      	adds	r7, #12
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa42:	4770      	bx	lr

0801aa44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801aa44:	b590      	push	{r4, r7, lr}
 801aa46:	b0a1      	sub	sp, #132	; 0x84
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801aa4e:	2300      	movs	r3, #0
 801aa50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801aa5a:	2b01      	cmp	r3, #1
 801aa5c:	d101      	bne.n	801aa62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801aa5e:	2302      	movs	r3, #2
 801aa60:	e0cb      	b.n	801abfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	2201      	movs	r2, #1
 801aa66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801aa6e:	2300      	movs	r3, #0
 801aa70:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801aa7a:	d102      	bne.n	801aa82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801aa7c:	4b61      	ldr	r3, [pc, #388]	; (801ac04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801aa7e:	60bb      	str	r3, [r7, #8]
 801aa80:	e001      	b.n	801aa86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801aa82:	2300      	movs	r3, #0
 801aa84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d10b      	bne.n	801aaa4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa90:	f043 0220 	orr.w	r2, r3, #32
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	e0aa      	b.n	801abfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801aaa4:	68bb      	ldr	r3, [r7, #8]
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7ff ff25 	bl	801a8f6 <LL_ADC_REG_IsConversionOngoing>
 801aaac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	4618      	mov	r0, r3
 801aab4:	f7ff ff1f 	bl	801a8f6 <LL_ADC_REG_IsConversionOngoing>
 801aab8:	4603      	mov	r3, r0
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	f040 808c 	bne.w	801abd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801aac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	f040 8088 	bne.w	801abd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801aad0:	d004      	beq.n	801aadc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	4a4b      	ldr	r2, [pc, #300]	; (801ac04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801aad8:	4293      	cmp	r3, r2
 801aada:	d101      	bne.n	801aae0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801aadc:	4b4a      	ldr	r3, [pc, #296]	; (801ac08 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801aade:	e000      	b.n	801aae2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801aae0:	4b4a      	ldr	r3, [pc, #296]	; (801ac0c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801aae2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801aae4:	683b      	ldr	r3, [r7, #0]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d041      	beq.n	801ab70 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801aaec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aaee:	689b      	ldr	r3, [r3, #8]
 801aaf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	6859      	ldr	r1, [r3, #4]
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801aafe:	035b      	lsls	r3, r3, #13
 801ab00:	430b      	orrs	r3, r1
 801ab02:	431a      	orrs	r2, r3
 801ab04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ab10:	d004      	beq.n	801ab1c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	4a3b      	ldr	r2, [pc, #236]	; (801ac04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	d10f      	bne.n	801ab3c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801ab1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ab20:	f7ff fea9 	bl	801a876 <LL_ADC_IsEnabled>
 801ab24:	4604      	mov	r4, r0
 801ab26:	4837      	ldr	r0, [pc, #220]	; (801ac04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ab28:	f7ff fea5 	bl	801a876 <LL_ADC_IsEnabled>
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	4323      	orrs	r3, r4
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	bf0c      	ite	eq
 801ab34:	2301      	moveq	r3, #1
 801ab36:	2300      	movne	r3, #0
 801ab38:	b2db      	uxtb	r3, r3
 801ab3a:	e008      	b.n	801ab4e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801ab3c:	4834      	ldr	r0, [pc, #208]	; (801ac10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801ab3e:	f7ff fe9a 	bl	801a876 <LL_ADC_IsEnabled>
 801ab42:	4603      	mov	r3, r0
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	bf0c      	ite	eq
 801ab48:	2301      	moveq	r3, #1
 801ab4a:	2300      	movne	r3, #0
 801ab4c:	b2db      	uxtb	r3, r3
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d04c      	beq.n	801abec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801ab52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab54:	689b      	ldr	r3, [r3, #8]
 801ab56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801ab5a:	f023 030f 	bic.w	r3, r3, #15
 801ab5e:	683a      	ldr	r2, [r7, #0]
 801ab60:	6811      	ldr	r1, [r2, #0]
 801ab62:	683a      	ldr	r2, [r7, #0]
 801ab64:	6892      	ldr	r2, [r2, #8]
 801ab66:	430a      	orrs	r2, r1
 801ab68:	431a      	orrs	r2, r3
 801ab6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab6c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ab6e:	e03d      	b.n	801abec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801ab70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab72:	689b      	ldr	r3, [r3, #8]
 801ab74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ab78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ab84:	d004      	beq.n	801ab90 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	4a1e      	ldr	r2, [pc, #120]	; (801ac04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ab8c:	4293      	cmp	r3, r2
 801ab8e:	d10f      	bne.n	801abb0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801ab90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ab94:	f7ff fe6f 	bl	801a876 <LL_ADC_IsEnabled>
 801ab98:	4604      	mov	r4, r0
 801ab9a:	481a      	ldr	r0, [pc, #104]	; (801ac04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ab9c:	f7ff fe6b 	bl	801a876 <LL_ADC_IsEnabled>
 801aba0:	4603      	mov	r3, r0
 801aba2:	4323      	orrs	r3, r4
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	bf0c      	ite	eq
 801aba8:	2301      	moveq	r3, #1
 801abaa:	2300      	movne	r3, #0
 801abac:	b2db      	uxtb	r3, r3
 801abae:	e008      	b.n	801abc2 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801abb0:	4817      	ldr	r0, [pc, #92]	; (801ac10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801abb2:	f7ff fe60 	bl	801a876 <LL_ADC_IsEnabled>
 801abb6:	4603      	mov	r3, r0
 801abb8:	2b00      	cmp	r3, #0
 801abba:	bf0c      	ite	eq
 801abbc:	2301      	moveq	r3, #1
 801abbe:	2300      	movne	r3, #0
 801abc0:	b2db      	uxtb	r3, r3
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d012      	beq.n	801abec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801abc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801abc8:	689b      	ldr	r3, [r3, #8]
 801abca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801abce:	f023 030f 	bic.w	r3, r3, #15
 801abd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801abd4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801abd6:	e009      	b.n	801abec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abdc:	f043 0220 	orr.w	r2, r3, #32
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801abe4:	2301      	movs	r3, #1
 801abe6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801abea:	e000      	b.n	801abee <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801abec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	2200      	movs	r2, #0
 801abf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801abf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801abfa:	4618      	mov	r0, r3
 801abfc:	3784      	adds	r7, #132	; 0x84
 801abfe:	46bd      	mov	sp, r7
 801ac00:	bd90      	pop	{r4, r7, pc}
 801ac02:	bf00      	nop
 801ac04:	50000100 	.word	0x50000100
 801ac08:	50000300 	.word	0x50000300
 801ac0c:	50000700 	.word	0x50000700
 801ac10:	50000400 	.word	0x50000400

0801ac14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ac14:	b480      	push	{r7}
 801ac16:	b085      	sub	sp, #20
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f003 0307 	and.w	r3, r3, #7
 801ac22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801ac24:	4b0c      	ldr	r3, [pc, #48]	; (801ac58 <__NVIC_SetPriorityGrouping+0x44>)
 801ac26:	68db      	ldr	r3, [r3, #12]
 801ac28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801ac2a:	68ba      	ldr	r2, [r7, #8]
 801ac2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801ac30:	4013      	ands	r3, r2
 801ac32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801ac3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801ac40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ac44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801ac46:	4a04      	ldr	r2, [pc, #16]	; (801ac58 <__NVIC_SetPriorityGrouping+0x44>)
 801ac48:	68bb      	ldr	r3, [r7, #8]
 801ac4a:	60d3      	str	r3, [r2, #12]
}
 801ac4c:	bf00      	nop
 801ac4e:	3714      	adds	r7, #20
 801ac50:	46bd      	mov	sp, r7
 801ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac56:	4770      	bx	lr
 801ac58:	e000ed00 	.word	0xe000ed00

0801ac5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801ac5c:	b480      	push	{r7}
 801ac5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801ac60:	4b04      	ldr	r3, [pc, #16]	; (801ac74 <__NVIC_GetPriorityGrouping+0x18>)
 801ac62:	68db      	ldr	r3, [r3, #12]
 801ac64:	0a1b      	lsrs	r3, r3, #8
 801ac66:	f003 0307 	and.w	r3, r3, #7
}
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac72:	4770      	bx	lr
 801ac74:	e000ed00 	.word	0xe000ed00

0801ac78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801ac78:	b480      	push	{r7}
 801ac7a:	b083      	sub	sp, #12
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	4603      	mov	r3, r0
 801ac80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ac82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	db0b      	blt.n	801aca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801ac8a:	79fb      	ldrb	r3, [r7, #7]
 801ac8c:	f003 021f 	and.w	r2, r3, #31
 801ac90:	4907      	ldr	r1, [pc, #28]	; (801acb0 <__NVIC_EnableIRQ+0x38>)
 801ac92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac96:	095b      	lsrs	r3, r3, #5
 801ac98:	2001      	movs	r0, #1
 801ac9a:	fa00 f202 	lsl.w	r2, r0, r2
 801ac9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801aca2:	bf00      	nop
 801aca4:	370c      	adds	r7, #12
 801aca6:	46bd      	mov	sp, r7
 801aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acac:	4770      	bx	lr
 801acae:	bf00      	nop
 801acb0:	e000e100 	.word	0xe000e100

0801acb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801acb4:	b480      	push	{r7}
 801acb6:	b083      	sub	sp, #12
 801acb8:	af00      	add	r7, sp, #0
 801acba:	4603      	mov	r3, r0
 801acbc:	6039      	str	r1, [r7, #0]
 801acbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801acc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	db0a      	blt.n	801acde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801acc8:	683b      	ldr	r3, [r7, #0]
 801acca:	b2da      	uxtb	r2, r3
 801accc:	490c      	ldr	r1, [pc, #48]	; (801ad00 <__NVIC_SetPriority+0x4c>)
 801acce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801acd2:	0112      	lsls	r2, r2, #4
 801acd4:	b2d2      	uxtb	r2, r2
 801acd6:	440b      	add	r3, r1
 801acd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801acdc:	e00a      	b.n	801acf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801acde:	683b      	ldr	r3, [r7, #0]
 801ace0:	b2da      	uxtb	r2, r3
 801ace2:	4908      	ldr	r1, [pc, #32]	; (801ad04 <__NVIC_SetPriority+0x50>)
 801ace4:	79fb      	ldrb	r3, [r7, #7]
 801ace6:	f003 030f 	and.w	r3, r3, #15
 801acea:	3b04      	subs	r3, #4
 801acec:	0112      	lsls	r2, r2, #4
 801acee:	b2d2      	uxtb	r2, r2
 801acf0:	440b      	add	r3, r1
 801acf2:	761a      	strb	r2, [r3, #24]
}
 801acf4:	bf00      	nop
 801acf6:	370c      	adds	r7, #12
 801acf8:	46bd      	mov	sp, r7
 801acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acfe:	4770      	bx	lr
 801ad00:	e000e100 	.word	0xe000e100
 801ad04:	e000ed00 	.word	0xe000ed00

0801ad08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801ad08:	b480      	push	{r7}
 801ad0a:	b089      	sub	sp, #36	; 0x24
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	60f8      	str	r0, [r7, #12]
 801ad10:	60b9      	str	r1, [r7, #8]
 801ad12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	f003 0307 	and.w	r3, r3, #7
 801ad1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801ad1c:	69fb      	ldr	r3, [r7, #28]
 801ad1e:	f1c3 0307 	rsb	r3, r3, #7
 801ad22:	2b04      	cmp	r3, #4
 801ad24:	bf28      	it	cs
 801ad26:	2304      	movcs	r3, #4
 801ad28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801ad2a:	69fb      	ldr	r3, [r7, #28]
 801ad2c:	3304      	adds	r3, #4
 801ad2e:	2b06      	cmp	r3, #6
 801ad30:	d902      	bls.n	801ad38 <NVIC_EncodePriority+0x30>
 801ad32:	69fb      	ldr	r3, [r7, #28]
 801ad34:	3b03      	subs	r3, #3
 801ad36:	e000      	b.n	801ad3a <NVIC_EncodePriority+0x32>
 801ad38:	2300      	movs	r3, #0
 801ad3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ad3c:	f04f 32ff 	mov.w	r2, #4294967295
 801ad40:	69bb      	ldr	r3, [r7, #24]
 801ad42:	fa02 f303 	lsl.w	r3, r2, r3
 801ad46:	43da      	mvns	r2, r3
 801ad48:	68bb      	ldr	r3, [r7, #8]
 801ad4a:	401a      	ands	r2, r3
 801ad4c:	697b      	ldr	r3, [r7, #20]
 801ad4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801ad50:	f04f 31ff 	mov.w	r1, #4294967295
 801ad54:	697b      	ldr	r3, [r7, #20]
 801ad56:	fa01 f303 	lsl.w	r3, r1, r3
 801ad5a:	43d9      	mvns	r1, r3
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ad60:	4313      	orrs	r3, r2
         );
}
 801ad62:	4618      	mov	r0, r3
 801ad64:	3724      	adds	r7, #36	; 0x24
 801ad66:	46bd      	mov	sp, r7
 801ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6c:	4770      	bx	lr
	...

0801ad70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b082      	sub	sp, #8
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	3b01      	subs	r3, #1
 801ad7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ad80:	d301      	bcc.n	801ad86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801ad82:	2301      	movs	r3, #1
 801ad84:	e00f      	b.n	801ada6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801ad86:	4a0a      	ldr	r2, [pc, #40]	; (801adb0 <SysTick_Config+0x40>)
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	3b01      	subs	r3, #1
 801ad8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801ad8e:	210f      	movs	r1, #15
 801ad90:	f04f 30ff 	mov.w	r0, #4294967295
 801ad94:	f7ff ff8e 	bl	801acb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801ad98:	4b05      	ldr	r3, [pc, #20]	; (801adb0 <SysTick_Config+0x40>)
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801ad9e:	4b04      	ldr	r3, [pc, #16]	; (801adb0 <SysTick_Config+0x40>)
 801ada0:	2207      	movs	r2, #7
 801ada2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801ada4:	2300      	movs	r3, #0
}
 801ada6:	4618      	mov	r0, r3
 801ada8:	3708      	adds	r7, #8
 801adaa:	46bd      	mov	sp, r7
 801adac:	bd80      	pop	{r7, pc}
 801adae:	bf00      	nop
 801adb0:	e000e010 	.word	0xe000e010

0801adb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b082      	sub	sp, #8
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801adbc:	6878      	ldr	r0, [r7, #4]
 801adbe:	f7ff ff29 	bl	801ac14 <__NVIC_SetPriorityGrouping>
}
 801adc2:	bf00      	nop
 801adc4:	3708      	adds	r7, #8
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bd80      	pop	{r7, pc}

0801adca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801adca:	b580      	push	{r7, lr}
 801adcc:	b086      	sub	sp, #24
 801adce:	af00      	add	r7, sp, #0
 801add0:	4603      	mov	r3, r0
 801add2:	60b9      	str	r1, [r7, #8]
 801add4:	607a      	str	r2, [r7, #4]
 801add6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801add8:	f7ff ff40 	bl	801ac5c <__NVIC_GetPriorityGrouping>
 801addc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801adde:	687a      	ldr	r2, [r7, #4]
 801ade0:	68b9      	ldr	r1, [r7, #8]
 801ade2:	6978      	ldr	r0, [r7, #20]
 801ade4:	f7ff ff90 	bl	801ad08 <NVIC_EncodePriority>
 801ade8:	4602      	mov	r2, r0
 801adea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801adee:	4611      	mov	r1, r2
 801adf0:	4618      	mov	r0, r3
 801adf2:	f7ff ff5f 	bl	801acb4 <__NVIC_SetPriority>
}
 801adf6:	bf00      	nop
 801adf8:	3718      	adds	r7, #24
 801adfa:	46bd      	mov	sp, r7
 801adfc:	bd80      	pop	{r7, pc}

0801adfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801adfe:	b580      	push	{r7, lr}
 801ae00:	b082      	sub	sp, #8
 801ae02:	af00      	add	r7, sp, #0
 801ae04:	4603      	mov	r3, r0
 801ae06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801ae08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	f7ff ff33 	bl	801ac78 <__NVIC_EnableIRQ>
}
 801ae12:	bf00      	nop
 801ae14:	3708      	adds	r7, #8
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}

0801ae1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801ae1a:	b580      	push	{r7, lr}
 801ae1c:	b082      	sub	sp, #8
 801ae1e:	af00      	add	r7, sp, #0
 801ae20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801ae22:	6878      	ldr	r0, [r7, #4]
 801ae24:	f7ff ffa4 	bl	801ad70 <SysTick_Config>
 801ae28:	4603      	mov	r3, r0
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	3708      	adds	r7, #8
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	bd80      	pop	{r7, pc}
	...

0801ae34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801ae34:	b580      	push	{r7, lr}
 801ae36:	b084      	sub	sp, #16
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d101      	bne.n	801ae46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801ae42:	2301      	movs	r3, #1
 801ae44:	e08d      	b.n	801af62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	461a      	mov	r2, r3
 801ae4c:	4b47      	ldr	r3, [pc, #284]	; (801af6c <HAL_DMA_Init+0x138>)
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	d80f      	bhi.n	801ae72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	461a      	mov	r2, r3
 801ae58:	4b45      	ldr	r3, [pc, #276]	; (801af70 <HAL_DMA_Init+0x13c>)
 801ae5a:	4413      	add	r3, r2
 801ae5c:	4a45      	ldr	r2, [pc, #276]	; (801af74 <HAL_DMA_Init+0x140>)
 801ae5e:	fba2 2303 	umull	r2, r3, r2, r3
 801ae62:	091b      	lsrs	r3, r3, #4
 801ae64:	009a      	lsls	r2, r3, #2
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	4a42      	ldr	r2, [pc, #264]	; (801af78 <HAL_DMA_Init+0x144>)
 801ae6e:	641a      	str	r2, [r3, #64]	; 0x40
 801ae70:	e00e      	b.n	801ae90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	461a      	mov	r2, r3
 801ae78:	4b40      	ldr	r3, [pc, #256]	; (801af7c <HAL_DMA_Init+0x148>)
 801ae7a:	4413      	add	r3, r2
 801ae7c:	4a3d      	ldr	r2, [pc, #244]	; (801af74 <HAL_DMA_Init+0x140>)
 801ae7e:	fba2 2303 	umull	r2, r3, r2, r3
 801ae82:	091b      	lsrs	r3, r3, #4
 801ae84:	009a      	lsls	r2, r3, #2
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	4a3c      	ldr	r2, [pc, #240]	; (801af80 <HAL_DMA_Init+0x14c>)
 801ae8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	2202      	movs	r2, #2
 801ae94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801aea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aeaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801aeb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	691b      	ldr	r3, [r3, #16]
 801aeba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801aec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	699b      	ldr	r3, [r3, #24]
 801aec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801aecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	6a1b      	ldr	r3, [r3, #32]
 801aed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801aed4:	68fa      	ldr	r2, [r7, #12]
 801aed6:	4313      	orrs	r3, r2
 801aed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	68fa      	ldr	r2, [r7, #12]
 801aee0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801aee2:	6878      	ldr	r0, [r7, #4]
 801aee4:	f000 fa10 	bl	801b308 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	689b      	ldr	r3, [r3, #8]
 801aeec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801aef0:	d102      	bne.n	801aef8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	2200      	movs	r2, #0
 801aef6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	685a      	ldr	r2, [r3, #4]
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801af00:	b2d2      	uxtb	r2, r2
 801af02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801af08:	687a      	ldr	r2, [r7, #4]
 801af0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801af0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	685b      	ldr	r3, [r3, #4]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d010      	beq.n	801af38 <HAL_DMA_Init+0x104>
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	685b      	ldr	r3, [r3, #4]
 801af1a:	2b04      	cmp	r3, #4
 801af1c:	d80c      	bhi.n	801af38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801af1e:	6878      	ldr	r0, [r7, #4]
 801af20:	f000 fa30 	bl	801b384 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801af28:	2200      	movs	r2, #0
 801af2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af30:	687a      	ldr	r2, [r7, #4]
 801af32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801af34:	605a      	str	r2, [r3, #4]
 801af36:	e008      	b.n	801af4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	2200      	movs	r2, #0
 801af3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	2200      	movs	r2, #0
 801af42:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	2200      	movs	r2, #0
 801af48:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	2200      	movs	r2, #0
 801af4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	2201      	movs	r2, #1
 801af54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	2200      	movs	r2, #0
 801af5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801af60:	2300      	movs	r3, #0
}
 801af62:	4618      	mov	r0, r3
 801af64:	3710      	adds	r7, #16
 801af66:	46bd      	mov	sp, r7
 801af68:	bd80      	pop	{r7, pc}
 801af6a:	bf00      	nop
 801af6c:	40020407 	.word	0x40020407
 801af70:	bffdfff8 	.word	0xbffdfff8
 801af74:	cccccccd 	.word	0xcccccccd
 801af78:	40020000 	.word	0x40020000
 801af7c:	bffdfbf8 	.word	0xbffdfbf8
 801af80:	40020400 	.word	0x40020400

0801af84 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b086      	sub	sp, #24
 801af88:	af00      	add	r7, sp, #0
 801af8a:	60f8      	str	r0, [r7, #12]
 801af8c:	60b9      	str	r1, [r7, #8]
 801af8e:	607a      	str	r2, [r7, #4]
 801af90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801af92:	2300      	movs	r3, #0
 801af94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801af9c:	2b01      	cmp	r3, #1
 801af9e:	d101      	bne.n	801afa4 <HAL_DMA_Start_IT+0x20>
 801afa0:	2302      	movs	r3, #2
 801afa2:	e066      	b.n	801b072 <HAL_DMA_Start_IT+0xee>
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	2201      	movs	r2, #1
 801afa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801afb2:	b2db      	uxtb	r3, r3
 801afb4:	2b01      	cmp	r3, #1
 801afb6:	d155      	bne.n	801b064 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	2202      	movs	r2, #2
 801afbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	2200      	movs	r2, #0
 801afc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	681a      	ldr	r2, [r3, #0]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	f022 0201 	bic.w	r2, r2, #1
 801afd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801afd6:	683b      	ldr	r3, [r7, #0]
 801afd8:	687a      	ldr	r2, [r7, #4]
 801afda:	68b9      	ldr	r1, [r7, #8]
 801afdc:	68f8      	ldr	r0, [r7, #12]
 801afde:	f000 f954 	bl	801b28a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d008      	beq.n	801affc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	681a      	ldr	r2, [r3, #0]
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	f042 020e 	orr.w	r2, r2, #14
 801aff8:	601a      	str	r2, [r3, #0]
 801affa:	e00f      	b.n	801b01c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	681a      	ldr	r2, [r3, #0]
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	f022 0204 	bic.w	r2, r2, #4
 801b00a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	681a      	ldr	r2, [r3, #0]
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	f042 020a 	orr.w	r2, r2, #10
 801b01a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b026:	2b00      	cmp	r3, #0
 801b028:	d007      	beq.n	801b03a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b02e:	681a      	ldr	r2, [r3, #0]
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b038:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d007      	beq.n	801b052 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b046:	681a      	ldr	r2, [r3, #0]
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b050:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	681a      	ldr	r2, [r3, #0]
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	f042 0201 	orr.w	r2, r2, #1
 801b060:	601a      	str	r2, [r3, #0]
 801b062:	e005      	b.n	801b070 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	2200      	movs	r2, #0
 801b068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801b06c:	2302      	movs	r3, #2
 801b06e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801b070:	7dfb      	ldrb	r3, [r7, #23]
}
 801b072:	4618      	mov	r0, r3
 801b074:	3718      	adds	r7, #24
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}

0801b07a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b07a:	b480      	push	{r7}
 801b07c:	b085      	sub	sp, #20
 801b07e:	af00      	add	r7, sp, #0
 801b080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b082:	2300      	movs	r3, #0
 801b084:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	2b02      	cmp	r3, #2
 801b090:	d005      	beq.n	801b09e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2204      	movs	r2, #4
 801b096:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b098:	2301      	movs	r3, #1
 801b09a:	73fb      	strb	r3, [r7, #15]
 801b09c:	e037      	b.n	801b10e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	681a      	ldr	r2, [r3, #0]
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	f022 020e 	bic.w	r2, r2, #14
 801b0ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b0b2:	681a      	ldr	r2, [r3, #0]
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b0b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b0bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	681a      	ldr	r2, [r3, #0]
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	f022 0201 	bic.w	r2, r2, #1
 801b0cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b0d2:	f003 021f 	and.w	r2, r3, #31
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0da:	2101      	movs	r1, #1
 801b0dc:	fa01 f202 	lsl.w	r2, r1, r2
 801b0e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b0e6:	687a      	ldr	r2, [r7, #4]
 801b0e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b0ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d00c      	beq.n	801b10e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b0f8:	681a      	ldr	r2, [r3, #0]
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b0fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b102:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b108:	687a      	ldr	r2, [r7, #4]
 801b10a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b10c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	2201      	movs	r2, #1
 801b112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	2200      	movs	r2, #0
 801b11a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801b11e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b120:	4618      	mov	r0, r3
 801b122:	3714      	adds	r7, #20
 801b124:	46bd      	mov	sp, r7
 801b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b12a:	4770      	bx	lr

0801b12c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b084      	sub	sp, #16
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b148:	f003 031f 	and.w	r3, r3, #31
 801b14c:	2204      	movs	r2, #4
 801b14e:	409a      	lsls	r2, r3
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	4013      	ands	r3, r2
 801b154:	2b00      	cmp	r3, #0
 801b156:	d026      	beq.n	801b1a6 <HAL_DMA_IRQHandler+0x7a>
 801b158:	68bb      	ldr	r3, [r7, #8]
 801b15a:	f003 0304 	and.w	r3, r3, #4
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d021      	beq.n	801b1a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	f003 0320 	and.w	r3, r3, #32
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d107      	bne.n	801b180 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	681a      	ldr	r2, [r3, #0]
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	f022 0204 	bic.w	r2, r2, #4
 801b17e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b184:	f003 021f 	and.w	r2, r3, #31
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b18c:	2104      	movs	r1, #4
 801b18e:	fa01 f202 	lsl.w	r2, r1, r2
 801b192:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d071      	beq.n	801b280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b1a0:	6878      	ldr	r0, [r7, #4]
 801b1a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801b1a4:	e06c      	b.n	801b280 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1aa:	f003 031f 	and.w	r3, r3, #31
 801b1ae:	2202      	movs	r2, #2
 801b1b0:	409a      	lsls	r2, r3
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	4013      	ands	r3, r2
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d02e      	beq.n	801b218 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801b1ba:	68bb      	ldr	r3, [r7, #8]
 801b1bc:	f003 0302 	and.w	r3, r3, #2
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d029      	beq.n	801b218 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	f003 0320 	and.w	r3, r3, #32
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d10b      	bne.n	801b1ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	681a      	ldr	r2, [r3, #0]
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	f022 020a 	bic.w	r2, r2, #10
 801b1e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	2201      	movs	r2, #1
 801b1e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1ee:	f003 021f 	and.w	r2, r3, #31
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b1f6:	2102      	movs	r1, #2
 801b1f8:	fa01 f202 	lsl.w	r2, r1, r2
 801b1fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	2200      	movs	r2, #0
 801b202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d038      	beq.n	801b280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b212:	6878      	ldr	r0, [r7, #4]
 801b214:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801b216:	e033      	b.n	801b280 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b21c:	f003 031f 	and.w	r3, r3, #31
 801b220:	2208      	movs	r2, #8
 801b222:	409a      	lsls	r2, r3
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	4013      	ands	r3, r2
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d02a      	beq.n	801b282 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801b22c:	68bb      	ldr	r3, [r7, #8]
 801b22e:	f003 0308 	and.w	r3, r3, #8
 801b232:	2b00      	cmp	r3, #0
 801b234:	d025      	beq.n	801b282 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	681a      	ldr	r2, [r3, #0]
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	f022 020e 	bic.w	r2, r2, #14
 801b244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b24a:	f003 021f 	and.w	r2, r3, #31
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b252:	2101      	movs	r1, #1
 801b254:	fa01 f202 	lsl.w	r2, r1, r2
 801b258:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	2201      	movs	r2, #1
 801b25e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	2201      	movs	r2, #1
 801b264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	2200      	movs	r2, #0
 801b26c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b274:	2b00      	cmp	r3, #0
 801b276:	d004      	beq.n	801b282 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b27c:	6878      	ldr	r0, [r7, #4]
 801b27e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801b280:	bf00      	nop
 801b282:	bf00      	nop
}
 801b284:	3710      	adds	r7, #16
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}

0801b28a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b28a:	b480      	push	{r7}
 801b28c:	b085      	sub	sp, #20
 801b28e:	af00      	add	r7, sp, #0
 801b290:	60f8      	str	r0, [r7, #12]
 801b292:	60b9      	str	r1, [r7, #8]
 801b294:	607a      	str	r2, [r7, #4]
 801b296:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b29c:	68fa      	ldr	r2, [r7, #12]
 801b29e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b2a0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d004      	beq.n	801b2b4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b2ae:	68fa      	ldr	r2, [r7, #12]
 801b2b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b2b2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2b8:	f003 021f 	and.w	r2, r3, #31
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2c0:	2101      	movs	r1, #1
 801b2c2:	fa01 f202 	lsl.w	r2, r1, r2
 801b2c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	683a      	ldr	r2, [r7, #0]
 801b2ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	689b      	ldr	r3, [r3, #8]
 801b2d4:	2b10      	cmp	r3, #16
 801b2d6:	d108      	bne.n	801b2ea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	68ba      	ldr	r2, [r7, #8]
 801b2e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801b2e8:	e007      	b.n	801b2fa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	68ba      	ldr	r2, [r7, #8]
 801b2f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	687a      	ldr	r2, [r7, #4]
 801b2f8:	60da      	str	r2, [r3, #12]
}
 801b2fa:	bf00      	nop
 801b2fc:	3714      	adds	r7, #20
 801b2fe:	46bd      	mov	sp, r7
 801b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b304:	4770      	bx	lr
	...

0801b308 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b308:	b480      	push	{r7}
 801b30a:	b087      	sub	sp, #28
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	461a      	mov	r2, r3
 801b316:	4b16      	ldr	r3, [pc, #88]	; (801b370 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801b318:	429a      	cmp	r2, r3
 801b31a:	d802      	bhi.n	801b322 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801b31c:	4b15      	ldr	r3, [pc, #84]	; (801b374 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801b31e:	617b      	str	r3, [r7, #20]
 801b320:	e001      	b.n	801b326 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801b322:	4b15      	ldr	r3, [pc, #84]	; (801b378 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801b324:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801b326:	697b      	ldr	r3, [r7, #20]
 801b328:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	b2db      	uxtb	r3, r3
 801b330:	3b08      	subs	r3, #8
 801b332:	4a12      	ldr	r2, [pc, #72]	; (801b37c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801b334:	fba2 2303 	umull	r2, r3, r2, r3
 801b338:	091b      	lsrs	r3, r3, #4
 801b33a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b340:	089b      	lsrs	r3, r3, #2
 801b342:	009a      	lsls	r2, r3, #2
 801b344:	693b      	ldr	r3, [r7, #16]
 801b346:	4413      	add	r3, r2
 801b348:	461a      	mov	r2, r3
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	4a0b      	ldr	r2, [pc, #44]	; (801b380 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801b352:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	f003 031f 	and.w	r3, r3, #31
 801b35a:	2201      	movs	r2, #1
 801b35c:	409a      	lsls	r2, r3
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b362:	bf00      	nop
 801b364:	371c      	adds	r7, #28
 801b366:	46bd      	mov	sp, r7
 801b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b36c:	4770      	bx	lr
 801b36e:	bf00      	nop
 801b370:	40020407 	.word	0x40020407
 801b374:	40020800 	.word	0x40020800
 801b378:	40020820 	.word	0x40020820
 801b37c:	cccccccd 	.word	0xcccccccd
 801b380:	40020880 	.word	0x40020880

0801b384 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b384:	b480      	push	{r7}
 801b386:	b085      	sub	sp, #20
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	685b      	ldr	r3, [r3, #4]
 801b390:	b2db      	uxtb	r3, r3
 801b392:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b394:	68fa      	ldr	r2, [r7, #12]
 801b396:	4b0b      	ldr	r3, [pc, #44]	; (801b3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801b398:	4413      	add	r3, r2
 801b39a:	009b      	lsls	r3, r3, #2
 801b39c:	461a      	mov	r2, r3
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	4a08      	ldr	r2, [pc, #32]	; (801b3c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801b3a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	3b01      	subs	r3, #1
 801b3ac:	f003 031f 	and.w	r3, r3, #31
 801b3b0:	2201      	movs	r2, #1
 801b3b2:	409a      	lsls	r2, r3
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801b3b8:	bf00      	nop
 801b3ba:	3714      	adds	r7, #20
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c2:	4770      	bx	lr
 801b3c4:	1000823f 	.word	0x1000823f
 801b3c8:	40020940 	.word	0x40020940

0801b3cc <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b3cc:	b580      	push	{r7, lr}
 801b3ce:	b086      	sub	sp, #24
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	60f8      	str	r0, [r7, #12]
 801b3d4:	60b9      	str	r1, [r7, #8]
 801b3d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b3da:	2300      	movs	r3, #0
 801b3dc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b3de:	4b24      	ldr	r3, [pc, #144]	; (801b470 <HAL_FLASH_Program+0xa4>)
 801b3e0:	781b      	ldrb	r3, [r3, #0]
 801b3e2:	2b01      	cmp	r3, #1
 801b3e4:	d101      	bne.n	801b3ea <HAL_FLASH_Program+0x1e>
 801b3e6:	2302      	movs	r3, #2
 801b3e8:	e03e      	b.n	801b468 <HAL_FLASH_Program+0x9c>
 801b3ea:	4b21      	ldr	r3, [pc, #132]	; (801b470 <HAL_FLASH_Program+0xa4>)
 801b3ec:	2201      	movs	r2, #1
 801b3ee:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b3f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b3f4:	f000 f87c 	bl	801b4f0 <FLASH_WaitForLastOperation>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801b3fc:	7dfb      	ldrb	r3, [r7, #23]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d12e      	bne.n	801b460 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b402:	4b1b      	ldr	r3, [pc, #108]	; (801b470 <HAL_FLASH_Program+0xa4>)
 801b404:	2200      	movs	r2, #0
 801b406:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d107      	bne.n	801b41e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b412:	68b8      	ldr	r0, [r7, #8]
 801b414:	f000 f8c0 	bl	801b598 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b418:	2301      	movs	r3, #1
 801b41a:	613b      	str	r3, [r7, #16]
 801b41c:	e010      	b.n	801b440 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	2b01      	cmp	r3, #1
 801b422:	d002      	beq.n	801b42a <HAL_FLASH_Program+0x5e>
 801b424:	68fb      	ldr	r3, [r7, #12]
 801b426:	2b02      	cmp	r3, #2
 801b428:	d10a      	bne.n	801b440 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b42a:	683b      	ldr	r3, [r7, #0]
 801b42c:	4619      	mov	r1, r3
 801b42e:	68b8      	ldr	r0, [r7, #8]
 801b430:	f000 f8d8 	bl	801b5e4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	2b02      	cmp	r3, #2
 801b438:	d102      	bne.n	801b440 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b43a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b43e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b444:	f000 f854 	bl	801b4f0 <FLASH_WaitForLastOperation>
 801b448:	4603      	mov	r3, r0
 801b44a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d006      	beq.n	801b460 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b452:	4b08      	ldr	r3, [pc, #32]	; (801b474 <HAL_FLASH_Program+0xa8>)
 801b454:	695a      	ldr	r2, [r3, #20]
 801b456:	693b      	ldr	r3, [r7, #16]
 801b458:	43db      	mvns	r3, r3
 801b45a:	4906      	ldr	r1, [pc, #24]	; (801b474 <HAL_FLASH_Program+0xa8>)
 801b45c:	4013      	ands	r3, r2
 801b45e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b460:	4b03      	ldr	r3, [pc, #12]	; (801b470 <HAL_FLASH_Program+0xa4>)
 801b462:	2200      	movs	r2, #0
 801b464:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801b466:	7dfb      	ldrb	r3, [r7, #23]
}
 801b468:	4618      	mov	r0, r3
 801b46a:	3718      	adds	r7, #24
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bd80      	pop	{r7, pc}
 801b470:	2000000c 	.word	0x2000000c
 801b474:	40022000 	.word	0x40022000

0801b478 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b478:	b480      	push	{r7}
 801b47a:	b083      	sub	sp, #12
 801b47c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b47e:	2300      	movs	r3, #0
 801b480:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b482:	4b0b      	ldr	r3, [pc, #44]	; (801b4b0 <HAL_FLASH_Unlock+0x38>)
 801b484:	695b      	ldr	r3, [r3, #20]
 801b486:	2b00      	cmp	r3, #0
 801b488:	da0b      	bge.n	801b4a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b48a:	4b09      	ldr	r3, [pc, #36]	; (801b4b0 <HAL_FLASH_Unlock+0x38>)
 801b48c:	4a09      	ldr	r2, [pc, #36]	; (801b4b4 <HAL_FLASH_Unlock+0x3c>)
 801b48e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b490:	4b07      	ldr	r3, [pc, #28]	; (801b4b0 <HAL_FLASH_Unlock+0x38>)
 801b492:	4a09      	ldr	r2, [pc, #36]	; (801b4b8 <HAL_FLASH_Unlock+0x40>)
 801b494:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b496:	4b06      	ldr	r3, [pc, #24]	; (801b4b0 <HAL_FLASH_Unlock+0x38>)
 801b498:	695b      	ldr	r3, [r3, #20]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	da01      	bge.n	801b4a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b49e:	2301      	movs	r3, #1
 801b4a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b4a2:	79fb      	ldrb	r3, [r7, #7]
}
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	370c      	adds	r7, #12
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ae:	4770      	bx	lr
 801b4b0:	40022000 	.word	0x40022000
 801b4b4:	45670123 	.word	0x45670123
 801b4b8:	cdef89ab 	.word	0xcdef89ab

0801b4bc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b4bc:	b480      	push	{r7}
 801b4be:	b083      	sub	sp, #12
 801b4c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801b4c2:	2301      	movs	r3, #1
 801b4c4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b4c6:	4b09      	ldr	r3, [pc, #36]	; (801b4ec <HAL_FLASH_Lock+0x30>)
 801b4c8:	695b      	ldr	r3, [r3, #20]
 801b4ca:	4a08      	ldr	r2, [pc, #32]	; (801b4ec <HAL_FLASH_Lock+0x30>)
 801b4cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b4d0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b4d2:	4b06      	ldr	r3, [pc, #24]	; (801b4ec <HAL_FLASH_Lock+0x30>)
 801b4d4:	695b      	ldr	r3, [r3, #20]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	da01      	bge.n	801b4de <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801b4da:	2300      	movs	r3, #0
 801b4dc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801b4de:	79fb      	ldrb	r3, [r7, #7]
}
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	370c      	adds	r7, #12
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ea:	4770      	bx	lr
 801b4ec:	40022000 	.word	0x40022000

0801b4f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	b084      	sub	sp, #16
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801b4f8:	f7fd f98a 	bl	8018810 <HAL_GetTick>
 801b4fc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b4fe:	e009      	b.n	801b514 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801b500:	f7fd f986 	bl	8018810 <HAL_GetTick>
 801b504:	4602      	mov	r2, r0
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	1ad3      	subs	r3, r2, r3
 801b50a:	687a      	ldr	r2, [r7, #4]
 801b50c:	429a      	cmp	r2, r3
 801b50e:	d201      	bcs.n	801b514 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801b510:	2303      	movs	r3, #3
 801b512:	e038      	b.n	801b586 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b514:	4b1e      	ldr	r3, [pc, #120]	; (801b590 <FLASH_WaitForLastOperation+0xa0>)
 801b516:	691b      	ldr	r3, [r3, #16]
 801b518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b51c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b520:	d0ee      	beq.n	801b500 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801b522:	4b1b      	ldr	r3, [pc, #108]	; (801b590 <FLASH_WaitForLastOperation+0xa0>)
 801b524:	691a      	ldr	r2, [r3, #16]
 801b526:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801b52a:	4013      	ands	r3, r2
 801b52c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801b52e:	68bb      	ldr	r3, [r7, #8]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d01e      	beq.n	801b572 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801b534:	4b17      	ldr	r3, [pc, #92]	; (801b594 <FLASH_WaitForLastOperation+0xa4>)
 801b536:	685a      	ldr	r2, [r3, #4]
 801b538:	68bb      	ldr	r3, [r7, #8]
 801b53a:	4313      	orrs	r3, r2
 801b53c:	4a15      	ldr	r2, [pc, #84]	; (801b594 <FLASH_WaitForLastOperation+0xa4>)
 801b53e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801b540:	68bb      	ldr	r3, [r7, #8]
 801b542:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b546:	2b00      	cmp	r3, #0
 801b548:	d007      	beq.n	801b55a <FLASH_WaitForLastOperation+0x6a>
 801b54a:	4b11      	ldr	r3, [pc, #68]	; (801b590 <FLASH_WaitForLastOperation+0xa0>)
 801b54c:	699a      	ldr	r2, [r3, #24]
 801b54e:	68bb      	ldr	r3, [r7, #8]
 801b550:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b554:	490e      	ldr	r1, [pc, #56]	; (801b590 <FLASH_WaitForLastOperation+0xa0>)
 801b556:	4313      	orrs	r3, r2
 801b558:	618b      	str	r3, [r1, #24]
 801b55a:	68bb      	ldr	r3, [r7, #8]
 801b55c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b560:	2b00      	cmp	r3, #0
 801b562:	d004      	beq.n	801b56e <FLASH_WaitForLastOperation+0x7e>
 801b564:	4a0a      	ldr	r2, [pc, #40]	; (801b590 <FLASH_WaitForLastOperation+0xa0>)
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b56c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801b56e:	2301      	movs	r3, #1
 801b570:	e009      	b.n	801b586 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801b572:	4b07      	ldr	r3, [pc, #28]	; (801b590 <FLASH_WaitForLastOperation+0xa0>)
 801b574:	691b      	ldr	r3, [r3, #16]
 801b576:	f003 0301 	and.w	r3, r3, #1
 801b57a:	2b01      	cmp	r3, #1
 801b57c:	d102      	bne.n	801b584 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801b57e:	4b04      	ldr	r3, [pc, #16]	; (801b590 <FLASH_WaitForLastOperation+0xa0>)
 801b580:	2201      	movs	r2, #1
 801b582:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801b584:	2300      	movs	r3, #0
}
 801b586:	4618      	mov	r0, r3
 801b588:	3710      	adds	r7, #16
 801b58a:	46bd      	mov	sp, r7
 801b58c:	bd80      	pop	{r7, pc}
 801b58e:	bf00      	nop
 801b590:	40022000 	.word	0x40022000
 801b594:	2000000c 	.word	0x2000000c

0801b598 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801b598:	b480      	push	{r7}
 801b59a:	b085      	sub	sp, #20
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	60f8      	str	r0, [r7, #12]
 801b5a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801b5a4:	4b0e      	ldr	r3, [pc, #56]	; (801b5e0 <FLASH_Program_DoubleWord+0x48>)
 801b5a6:	695b      	ldr	r3, [r3, #20]
 801b5a8:	4a0d      	ldr	r2, [pc, #52]	; (801b5e0 <FLASH_Program_DoubleWord+0x48>)
 801b5aa:	f043 0301 	orr.w	r3, r3, #1
 801b5ae:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	683a      	ldr	r2, [r7, #0]
 801b5b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801b5b6:	f3bf 8f6f 	isb	sy
}
 801b5ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801b5bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b5c0:	f04f 0200 	mov.w	r2, #0
 801b5c4:	f04f 0300 	mov.w	r3, #0
 801b5c8:	000a      	movs	r2, r1
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	68f9      	ldr	r1, [r7, #12]
 801b5ce:	3104      	adds	r1, #4
 801b5d0:	4613      	mov	r3, r2
 801b5d2:	600b      	str	r3, [r1, #0]
}
 801b5d4:	bf00      	nop
 801b5d6:	3714      	adds	r7, #20
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5de:	4770      	bx	lr
 801b5e0:	40022000 	.word	0x40022000

0801b5e4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801b5e4:	b480      	push	{r7}
 801b5e6:	b089      	sub	sp, #36	; 0x24
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801b5ee:	2340      	movs	r3, #64	; 0x40
 801b5f0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801b5f6:	683b      	ldr	r3, [r7, #0]
 801b5f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801b5fa:	4b14      	ldr	r3, [pc, #80]	; (801b64c <FLASH_Program_Fast+0x68>)
 801b5fc:	695b      	ldr	r3, [r3, #20]
 801b5fe:	4a13      	ldr	r2, [pc, #76]	; (801b64c <FLASH_Program_Fast+0x68>)
 801b600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b604:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b606:	f3ef 8310 	mrs	r3, PRIMASK
 801b60a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b60c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801b60e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b610:	b672      	cpsid	i
}
 801b612:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801b614:	697b      	ldr	r3, [r7, #20]
 801b616:	681a      	ldr	r2, [r3, #0]
 801b618:	69bb      	ldr	r3, [r7, #24]
 801b61a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801b61c:	69bb      	ldr	r3, [r7, #24]
 801b61e:	3304      	adds	r3, #4
 801b620:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801b622:	697b      	ldr	r3, [r7, #20]
 801b624:	3304      	adds	r3, #4
 801b626:	617b      	str	r3, [r7, #20]
    row_index--;
 801b628:	7ffb      	ldrb	r3, [r7, #31]
 801b62a:	3b01      	subs	r3, #1
 801b62c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801b62e:	7ffb      	ldrb	r3, [r7, #31]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d1ef      	bne.n	801b614 <FLASH_Program_Fast+0x30>
 801b634:	693b      	ldr	r3, [r7, #16]
 801b636:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	f383 8810 	msr	PRIMASK, r3
}
 801b63e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801b640:	bf00      	nop
 801b642:	3724      	adds	r7, #36	; 0x24
 801b644:	46bd      	mov	sp, r7
 801b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b64a:	4770      	bx	lr
 801b64c:	40022000 	.word	0x40022000

0801b650 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801b650:	b580      	push	{r7, lr}
 801b652:	b084      	sub	sp, #16
 801b654:	af00      	add	r7, sp, #0
 801b656:	6078      	str	r0, [r7, #4]
 801b658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b65a:	4b48      	ldr	r3, [pc, #288]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b65c:	781b      	ldrb	r3, [r3, #0]
 801b65e:	2b01      	cmp	r3, #1
 801b660:	d101      	bne.n	801b666 <HAL_FLASHEx_Erase+0x16>
 801b662:	2302      	movs	r3, #2
 801b664:	e085      	b.n	801b772 <HAL_FLASHEx_Erase+0x122>
 801b666:	4b45      	ldr	r3, [pc, #276]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b668:	2201      	movs	r2, #1
 801b66a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b66c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b670:	f7ff ff3e 	bl	801b4f0 <FLASH_WaitForLastOperation>
 801b674:	4603      	mov	r3, r0
 801b676:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801b678:	7bfb      	ldrb	r3, [r7, #15]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d175      	bne.n	801b76a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b67e:	4b3f      	ldr	r3, [pc, #252]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b680:	2200      	movs	r2, #0
 801b682:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801b684:	4b3e      	ldr	r3, [pc, #248]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d013      	beq.n	801b6b8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b690:	4b3b      	ldr	r3, [pc, #236]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d009      	beq.n	801b6b0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801b69c:	4b38      	ldr	r3, [pc, #224]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	4a37      	ldr	r2, [pc, #220]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b6a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b6a6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801b6a8:	4b34      	ldr	r3, [pc, #208]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b6aa:	2203      	movs	r2, #3
 801b6ac:	771a      	strb	r2, [r3, #28]
 801b6ae:	e016      	b.n	801b6de <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801b6b0:	4b32      	ldr	r3, [pc, #200]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b6b2:	2201      	movs	r2, #1
 801b6b4:	771a      	strb	r2, [r3, #28]
 801b6b6:	e012      	b.n	801b6de <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b6b8:	4b31      	ldr	r3, [pc, #196]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d009      	beq.n	801b6d8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801b6c4:	4b2e      	ldr	r3, [pc, #184]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	4a2d      	ldr	r2, [pc, #180]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b6ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b6ce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801b6d0:	4b2a      	ldr	r3, [pc, #168]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b6d2:	2202      	movs	r2, #2
 801b6d4:	771a      	strb	r2, [r3, #28]
 801b6d6:	e002      	b.n	801b6de <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b6d8:	4b28      	ldr	r3, [pc, #160]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b6da:	2200      	movs	r2, #0
 801b6dc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	2b01      	cmp	r3, #1
 801b6e4:	d111      	bne.n	801b70a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	685b      	ldr	r3, [r3, #4]
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	f000 f84a 	bl	801b784 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b6f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b6f4:	f7ff fefc 	bl	801b4f0 <FLASH_WaitForLastOperation>
 801b6f8:	4603      	mov	r3, r0
 801b6fa:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801b6fc:	4b20      	ldr	r3, [pc, #128]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b6fe:	695b      	ldr	r3, [r3, #20]
 801b700:	4a1f      	ldr	r2, [pc, #124]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b702:	f023 0304 	bic.w	r3, r3, #4
 801b706:	6153      	str	r3, [r2, #20]
 801b708:	e02d      	b.n	801b766 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	f04f 32ff 	mov.w	r2, #4294967295
 801b710:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	689b      	ldr	r3, [r3, #8]
 801b716:	60bb      	str	r3, [r7, #8]
 801b718:	e01d      	b.n	801b756 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	685b      	ldr	r3, [r3, #4]
 801b71e:	4619      	mov	r1, r3
 801b720:	68b8      	ldr	r0, [r7, #8]
 801b722:	f000 f84d 	bl	801b7c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b72a:	f7ff fee1 	bl	801b4f0 <FLASH_WaitForLastOperation>
 801b72e:	4603      	mov	r3, r0
 801b730:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801b732:	4b13      	ldr	r3, [pc, #76]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b734:	695b      	ldr	r3, [r3, #20]
 801b736:	4a12      	ldr	r2, [pc, #72]	; (801b780 <HAL_FLASHEx_Erase+0x130>)
 801b738:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801b73c:	f023 0302 	bic.w	r3, r3, #2
 801b740:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801b742:	7bfb      	ldrb	r3, [r7, #15]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d003      	beq.n	801b750 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	68ba      	ldr	r2, [r7, #8]
 801b74c:	601a      	str	r2, [r3, #0]
          break;
 801b74e:	e00a      	b.n	801b766 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	3301      	adds	r3, #1
 801b754:	60bb      	str	r3, [r7, #8]
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	689a      	ldr	r2, [r3, #8]
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	68db      	ldr	r3, [r3, #12]
 801b75e:	4413      	add	r3, r2
 801b760:	68ba      	ldr	r2, [r7, #8]
 801b762:	429a      	cmp	r2, r3
 801b764:	d3d9      	bcc.n	801b71a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801b766:	f000 f84f 	bl	801b808 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b76a:	4b04      	ldr	r3, [pc, #16]	; (801b77c <HAL_FLASHEx_Erase+0x12c>)
 801b76c:	2200      	movs	r2, #0
 801b76e:	701a      	strb	r2, [r3, #0]

  return status;
 801b770:	7bfb      	ldrb	r3, [r7, #15]
}
 801b772:	4618      	mov	r0, r3
 801b774:	3710      	adds	r7, #16
 801b776:	46bd      	mov	sp, r7
 801b778:	bd80      	pop	{r7, pc}
 801b77a:	bf00      	nop
 801b77c:	2000000c 	.word	0x2000000c
 801b780:	40022000 	.word	0x40022000

0801b784 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801b784:	b480      	push	{r7}
 801b786:	b083      	sub	sp, #12
 801b788:	af00      	add	r7, sp, #0
 801b78a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	f003 0301 	and.w	r3, r3, #1
 801b792:	2b00      	cmp	r3, #0
 801b794:	d005      	beq.n	801b7a2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801b796:	4b09      	ldr	r3, [pc, #36]	; (801b7bc <FLASH_MassErase+0x38>)
 801b798:	695b      	ldr	r3, [r3, #20]
 801b79a:	4a08      	ldr	r2, [pc, #32]	; (801b7bc <FLASH_MassErase+0x38>)
 801b79c:	f043 0304 	orr.w	r3, r3, #4
 801b7a0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801b7a2:	4b06      	ldr	r3, [pc, #24]	; (801b7bc <FLASH_MassErase+0x38>)
 801b7a4:	695b      	ldr	r3, [r3, #20]
 801b7a6:	4a05      	ldr	r2, [pc, #20]	; (801b7bc <FLASH_MassErase+0x38>)
 801b7a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b7ac:	6153      	str	r3, [r2, #20]
}
 801b7ae:	bf00      	nop
 801b7b0:	370c      	adds	r7, #12
 801b7b2:	46bd      	mov	sp, r7
 801b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b8:	4770      	bx	lr
 801b7ba:	bf00      	nop
 801b7bc:	40022000 	.word	0x40022000

0801b7c0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801b7c0:	b480      	push	{r7}
 801b7c2:	b083      	sub	sp, #12
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	6078      	str	r0, [r7, #4]
 801b7c8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801b7ca:	4b0e      	ldr	r3, [pc, #56]	; (801b804 <FLASH_PageErase+0x44>)
 801b7cc:	695b      	ldr	r3, [r3, #20]
 801b7ce:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	00db      	lsls	r3, r3, #3
 801b7d6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801b7da:	490a      	ldr	r1, [pc, #40]	; (801b804 <FLASH_PageErase+0x44>)
 801b7dc:	4313      	orrs	r3, r2
 801b7de:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801b7e0:	4b08      	ldr	r3, [pc, #32]	; (801b804 <FLASH_PageErase+0x44>)
 801b7e2:	695b      	ldr	r3, [r3, #20]
 801b7e4:	4a07      	ldr	r2, [pc, #28]	; (801b804 <FLASH_PageErase+0x44>)
 801b7e6:	f043 0302 	orr.w	r3, r3, #2
 801b7ea:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801b7ec:	4b05      	ldr	r3, [pc, #20]	; (801b804 <FLASH_PageErase+0x44>)
 801b7ee:	695b      	ldr	r3, [r3, #20]
 801b7f0:	4a04      	ldr	r2, [pc, #16]	; (801b804 <FLASH_PageErase+0x44>)
 801b7f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b7f6:	6153      	str	r3, [r2, #20]
}
 801b7f8:	bf00      	nop
 801b7fa:	370c      	adds	r7, #12
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b802:	4770      	bx	lr
 801b804:	40022000 	.word	0x40022000

0801b808 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801b808:	b480      	push	{r7}
 801b80a:	b083      	sub	sp, #12
 801b80c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801b80e:	4b21      	ldr	r3, [pc, #132]	; (801b894 <FLASH_FlushCaches+0x8c>)
 801b810:	7f1b      	ldrb	r3, [r3, #28]
 801b812:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801b814:	79fb      	ldrb	r3, [r7, #7]
 801b816:	2b01      	cmp	r3, #1
 801b818:	d002      	beq.n	801b820 <FLASH_FlushCaches+0x18>
 801b81a:	79fb      	ldrb	r3, [r7, #7]
 801b81c:	2b03      	cmp	r3, #3
 801b81e:	d117      	bne.n	801b850 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801b820:	4b1d      	ldr	r3, [pc, #116]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	4a1c      	ldr	r2, [pc, #112]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b826:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b82a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801b82c:	4b1a      	ldr	r3, [pc, #104]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	4a19      	ldr	r2, [pc, #100]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b836:	6013      	str	r3, [r2, #0]
 801b838:	4b17      	ldr	r3, [pc, #92]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	4a16      	ldr	r2, [pc, #88]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b83e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b842:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801b844:	4b14      	ldr	r3, [pc, #80]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	4a13      	ldr	r2, [pc, #76]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b84a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b84e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801b850:	79fb      	ldrb	r3, [r7, #7]
 801b852:	2b02      	cmp	r3, #2
 801b854:	d002      	beq.n	801b85c <FLASH_FlushCaches+0x54>
 801b856:	79fb      	ldrb	r3, [r7, #7]
 801b858:	2b03      	cmp	r3, #3
 801b85a:	d111      	bne.n	801b880 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801b85c:	4b0e      	ldr	r3, [pc, #56]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	4a0d      	ldr	r2, [pc, #52]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b866:	6013      	str	r3, [r2, #0]
 801b868:	4b0b      	ldr	r3, [pc, #44]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	4a0a      	ldr	r2, [pc, #40]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b86e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b872:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801b874:	4b08      	ldr	r3, [pc, #32]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	4a07      	ldr	r2, [pc, #28]	; (801b898 <FLASH_FlushCaches+0x90>)
 801b87a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b87e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b880:	4b04      	ldr	r3, [pc, #16]	; (801b894 <FLASH_FlushCaches+0x8c>)
 801b882:	2200      	movs	r2, #0
 801b884:	771a      	strb	r2, [r3, #28]
}
 801b886:	bf00      	nop
 801b888:	370c      	adds	r7, #12
 801b88a:	46bd      	mov	sp, r7
 801b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b890:	4770      	bx	lr
 801b892:	bf00      	nop
 801b894:	2000000c 	.word	0x2000000c
 801b898:	40022000 	.word	0x40022000

0801b89c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b89c:	b480      	push	{r7}
 801b89e:	b087      	sub	sp, #28
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
 801b8a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801b8aa:	e15a      	b.n	801bb62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b8ac:	683b      	ldr	r3, [r7, #0]
 801b8ae:	681a      	ldr	r2, [r3, #0]
 801b8b0:	2101      	movs	r1, #1
 801b8b2:	697b      	ldr	r3, [r7, #20]
 801b8b4:	fa01 f303 	lsl.w	r3, r1, r3
 801b8b8:	4013      	ands	r3, r2
 801b8ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	f000 814c 	beq.w	801bb5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801b8c4:	683b      	ldr	r3, [r7, #0]
 801b8c6:	685b      	ldr	r3, [r3, #4]
 801b8c8:	f003 0303 	and.w	r3, r3, #3
 801b8cc:	2b01      	cmp	r3, #1
 801b8ce:	d005      	beq.n	801b8dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b8d0:	683b      	ldr	r3, [r7, #0]
 801b8d2:	685b      	ldr	r3, [r3, #4]
 801b8d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801b8d8:	2b02      	cmp	r3, #2
 801b8da:	d130      	bne.n	801b93e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	689b      	ldr	r3, [r3, #8]
 801b8e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b8e2:	697b      	ldr	r3, [r7, #20]
 801b8e4:	005b      	lsls	r3, r3, #1
 801b8e6:	2203      	movs	r2, #3
 801b8e8:	fa02 f303 	lsl.w	r3, r2, r3
 801b8ec:	43db      	mvns	r3, r3
 801b8ee:	693a      	ldr	r2, [r7, #16]
 801b8f0:	4013      	ands	r3, r2
 801b8f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b8f4:	683b      	ldr	r3, [r7, #0]
 801b8f6:	68da      	ldr	r2, [r3, #12]
 801b8f8:	697b      	ldr	r3, [r7, #20]
 801b8fa:	005b      	lsls	r3, r3, #1
 801b8fc:	fa02 f303 	lsl.w	r3, r2, r3
 801b900:	693a      	ldr	r2, [r7, #16]
 801b902:	4313      	orrs	r3, r2
 801b904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	693a      	ldr	r2, [r7, #16]
 801b90a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	685b      	ldr	r3, [r3, #4]
 801b910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b912:	2201      	movs	r2, #1
 801b914:	697b      	ldr	r3, [r7, #20]
 801b916:	fa02 f303 	lsl.w	r3, r2, r3
 801b91a:	43db      	mvns	r3, r3
 801b91c:	693a      	ldr	r2, [r7, #16]
 801b91e:	4013      	ands	r3, r2
 801b920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b922:	683b      	ldr	r3, [r7, #0]
 801b924:	685b      	ldr	r3, [r3, #4]
 801b926:	091b      	lsrs	r3, r3, #4
 801b928:	f003 0201 	and.w	r2, r3, #1
 801b92c:	697b      	ldr	r3, [r7, #20]
 801b92e:	fa02 f303 	lsl.w	r3, r2, r3
 801b932:	693a      	ldr	r2, [r7, #16]
 801b934:	4313      	orrs	r3, r2
 801b936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	693a      	ldr	r2, [r7, #16]
 801b93c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b93e:	683b      	ldr	r3, [r7, #0]
 801b940:	685b      	ldr	r3, [r3, #4]
 801b942:	f003 0303 	and.w	r3, r3, #3
 801b946:	2b03      	cmp	r3, #3
 801b948:	d017      	beq.n	801b97a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	68db      	ldr	r3, [r3, #12]
 801b94e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801b950:	697b      	ldr	r3, [r7, #20]
 801b952:	005b      	lsls	r3, r3, #1
 801b954:	2203      	movs	r2, #3
 801b956:	fa02 f303 	lsl.w	r3, r2, r3
 801b95a:	43db      	mvns	r3, r3
 801b95c:	693a      	ldr	r2, [r7, #16]
 801b95e:	4013      	ands	r3, r2
 801b960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b962:	683b      	ldr	r3, [r7, #0]
 801b964:	689a      	ldr	r2, [r3, #8]
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	005b      	lsls	r3, r3, #1
 801b96a:	fa02 f303 	lsl.w	r3, r2, r3
 801b96e:	693a      	ldr	r2, [r7, #16]
 801b970:	4313      	orrs	r3, r2
 801b972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	693a      	ldr	r2, [r7, #16]
 801b978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b97a:	683b      	ldr	r3, [r7, #0]
 801b97c:	685b      	ldr	r3, [r3, #4]
 801b97e:	f003 0303 	and.w	r3, r3, #3
 801b982:	2b02      	cmp	r3, #2
 801b984:	d123      	bne.n	801b9ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b986:	697b      	ldr	r3, [r7, #20]
 801b988:	08da      	lsrs	r2, r3, #3
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	3208      	adds	r2, #8
 801b98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801b994:	697b      	ldr	r3, [r7, #20]
 801b996:	f003 0307 	and.w	r3, r3, #7
 801b99a:	009b      	lsls	r3, r3, #2
 801b99c:	220f      	movs	r2, #15
 801b99e:	fa02 f303 	lsl.w	r3, r2, r3
 801b9a2:	43db      	mvns	r3, r3
 801b9a4:	693a      	ldr	r2, [r7, #16]
 801b9a6:	4013      	ands	r3, r2
 801b9a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801b9aa:	683b      	ldr	r3, [r7, #0]
 801b9ac:	691a      	ldr	r2, [r3, #16]
 801b9ae:	697b      	ldr	r3, [r7, #20]
 801b9b0:	f003 0307 	and.w	r3, r3, #7
 801b9b4:	009b      	lsls	r3, r3, #2
 801b9b6:	fa02 f303 	lsl.w	r3, r2, r3
 801b9ba:	693a      	ldr	r2, [r7, #16]
 801b9bc:	4313      	orrs	r3, r2
 801b9be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	08da      	lsrs	r2, r3, #3
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	3208      	adds	r2, #8
 801b9c8:	6939      	ldr	r1, [r7, #16]
 801b9ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801b9d4:	697b      	ldr	r3, [r7, #20]
 801b9d6:	005b      	lsls	r3, r3, #1
 801b9d8:	2203      	movs	r2, #3
 801b9da:	fa02 f303 	lsl.w	r3, r2, r3
 801b9de:	43db      	mvns	r3, r3
 801b9e0:	693a      	ldr	r2, [r7, #16]
 801b9e2:	4013      	ands	r3, r2
 801b9e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b9e6:	683b      	ldr	r3, [r7, #0]
 801b9e8:	685b      	ldr	r3, [r3, #4]
 801b9ea:	f003 0203 	and.w	r2, r3, #3
 801b9ee:	697b      	ldr	r3, [r7, #20]
 801b9f0:	005b      	lsls	r3, r3, #1
 801b9f2:	fa02 f303 	lsl.w	r3, r2, r3
 801b9f6:	693a      	ldr	r2, [r7, #16]
 801b9f8:	4313      	orrs	r3, r2
 801b9fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	693a      	ldr	r2, [r7, #16]
 801ba00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801ba02:	683b      	ldr	r3, [r7, #0]
 801ba04:	685b      	ldr	r3, [r3, #4]
 801ba06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	f000 80a6 	beq.w	801bb5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ba10:	4b5b      	ldr	r3, [pc, #364]	; (801bb80 <HAL_GPIO_Init+0x2e4>)
 801ba12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba14:	4a5a      	ldr	r2, [pc, #360]	; (801bb80 <HAL_GPIO_Init+0x2e4>)
 801ba16:	f043 0301 	orr.w	r3, r3, #1
 801ba1a:	6613      	str	r3, [r2, #96]	; 0x60
 801ba1c:	4b58      	ldr	r3, [pc, #352]	; (801bb80 <HAL_GPIO_Init+0x2e4>)
 801ba1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba20:	f003 0301 	and.w	r3, r3, #1
 801ba24:	60bb      	str	r3, [r7, #8]
 801ba26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ba28:	4a56      	ldr	r2, [pc, #344]	; (801bb84 <HAL_GPIO_Init+0x2e8>)
 801ba2a:	697b      	ldr	r3, [r7, #20]
 801ba2c:	089b      	lsrs	r3, r3, #2
 801ba2e:	3302      	adds	r3, #2
 801ba30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ba34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ba36:	697b      	ldr	r3, [r7, #20]
 801ba38:	f003 0303 	and.w	r3, r3, #3
 801ba3c:	009b      	lsls	r3, r3, #2
 801ba3e:	220f      	movs	r2, #15
 801ba40:	fa02 f303 	lsl.w	r3, r2, r3
 801ba44:	43db      	mvns	r3, r3
 801ba46:	693a      	ldr	r2, [r7, #16]
 801ba48:	4013      	ands	r3, r2
 801ba4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801ba52:	d01f      	beq.n	801ba94 <HAL_GPIO_Init+0x1f8>
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	4a4c      	ldr	r2, [pc, #304]	; (801bb88 <HAL_GPIO_Init+0x2ec>)
 801ba58:	4293      	cmp	r3, r2
 801ba5a:	d019      	beq.n	801ba90 <HAL_GPIO_Init+0x1f4>
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	4a4b      	ldr	r2, [pc, #300]	; (801bb8c <HAL_GPIO_Init+0x2f0>)
 801ba60:	4293      	cmp	r3, r2
 801ba62:	d013      	beq.n	801ba8c <HAL_GPIO_Init+0x1f0>
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	4a4a      	ldr	r2, [pc, #296]	; (801bb90 <HAL_GPIO_Init+0x2f4>)
 801ba68:	4293      	cmp	r3, r2
 801ba6a:	d00d      	beq.n	801ba88 <HAL_GPIO_Init+0x1ec>
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	4a49      	ldr	r2, [pc, #292]	; (801bb94 <HAL_GPIO_Init+0x2f8>)
 801ba70:	4293      	cmp	r3, r2
 801ba72:	d007      	beq.n	801ba84 <HAL_GPIO_Init+0x1e8>
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	4a48      	ldr	r2, [pc, #288]	; (801bb98 <HAL_GPIO_Init+0x2fc>)
 801ba78:	4293      	cmp	r3, r2
 801ba7a:	d101      	bne.n	801ba80 <HAL_GPIO_Init+0x1e4>
 801ba7c:	2305      	movs	r3, #5
 801ba7e:	e00a      	b.n	801ba96 <HAL_GPIO_Init+0x1fa>
 801ba80:	2306      	movs	r3, #6
 801ba82:	e008      	b.n	801ba96 <HAL_GPIO_Init+0x1fa>
 801ba84:	2304      	movs	r3, #4
 801ba86:	e006      	b.n	801ba96 <HAL_GPIO_Init+0x1fa>
 801ba88:	2303      	movs	r3, #3
 801ba8a:	e004      	b.n	801ba96 <HAL_GPIO_Init+0x1fa>
 801ba8c:	2302      	movs	r3, #2
 801ba8e:	e002      	b.n	801ba96 <HAL_GPIO_Init+0x1fa>
 801ba90:	2301      	movs	r3, #1
 801ba92:	e000      	b.n	801ba96 <HAL_GPIO_Init+0x1fa>
 801ba94:	2300      	movs	r3, #0
 801ba96:	697a      	ldr	r2, [r7, #20]
 801ba98:	f002 0203 	and.w	r2, r2, #3
 801ba9c:	0092      	lsls	r2, r2, #2
 801ba9e:	4093      	lsls	r3, r2
 801baa0:	693a      	ldr	r2, [r7, #16]
 801baa2:	4313      	orrs	r3, r2
 801baa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801baa6:	4937      	ldr	r1, [pc, #220]	; (801bb84 <HAL_GPIO_Init+0x2e8>)
 801baa8:	697b      	ldr	r3, [r7, #20]
 801baaa:	089b      	lsrs	r3, r3, #2
 801baac:	3302      	adds	r3, #2
 801baae:	693a      	ldr	r2, [r7, #16]
 801bab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bab4:	4b39      	ldr	r3, [pc, #228]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bab6:	689b      	ldr	r3, [r3, #8]
 801bab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	43db      	mvns	r3, r3
 801babe:	693a      	ldr	r2, [r7, #16]
 801bac0:	4013      	ands	r3, r2
 801bac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bac4:	683b      	ldr	r3, [r7, #0]
 801bac6:	685b      	ldr	r3, [r3, #4]
 801bac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d003      	beq.n	801bad8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801bad0:	693a      	ldr	r2, [r7, #16]
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	4313      	orrs	r3, r2
 801bad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801bad8:	4a30      	ldr	r2, [pc, #192]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bada:	693b      	ldr	r3, [r7, #16]
 801badc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801bade:	4b2f      	ldr	r3, [pc, #188]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bae0:	68db      	ldr	r3, [r3, #12]
 801bae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	43db      	mvns	r3, r3
 801bae8:	693a      	ldr	r2, [r7, #16]
 801baea:	4013      	ands	r3, r2
 801baec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801baee:	683b      	ldr	r3, [r7, #0]
 801baf0:	685b      	ldr	r3, [r3, #4]
 801baf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d003      	beq.n	801bb02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801bafa:	693a      	ldr	r2, [r7, #16]
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	4313      	orrs	r3, r2
 801bb00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801bb02:	4a26      	ldr	r2, [pc, #152]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bb04:	693b      	ldr	r3, [r7, #16]
 801bb06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801bb08:	4b24      	ldr	r3, [pc, #144]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bb0a:	685b      	ldr	r3, [r3, #4]
 801bb0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	43db      	mvns	r3, r3
 801bb12:	693a      	ldr	r2, [r7, #16]
 801bb14:	4013      	ands	r3, r2
 801bb16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801bb18:	683b      	ldr	r3, [r7, #0]
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d003      	beq.n	801bb2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801bb24:	693a      	ldr	r2, [r7, #16]
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	4313      	orrs	r3, r2
 801bb2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801bb2c:	4a1b      	ldr	r2, [pc, #108]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bb2e:	693b      	ldr	r3, [r7, #16]
 801bb30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801bb32:	4b1a      	ldr	r3, [pc, #104]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	43db      	mvns	r3, r3
 801bb3c:	693a      	ldr	r2, [r7, #16]
 801bb3e:	4013      	ands	r3, r2
 801bb40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d003      	beq.n	801bb56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801bb4e:	693a      	ldr	r2, [r7, #16]
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	4313      	orrs	r3, r2
 801bb54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801bb56:	4a11      	ldr	r2, [pc, #68]	; (801bb9c <HAL_GPIO_Init+0x300>)
 801bb58:	693b      	ldr	r3, [r7, #16]
 801bb5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801bb5c:	697b      	ldr	r3, [r7, #20]
 801bb5e:	3301      	adds	r3, #1
 801bb60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801bb62:	683b      	ldr	r3, [r7, #0]
 801bb64:	681a      	ldr	r2, [r3, #0]
 801bb66:	697b      	ldr	r3, [r7, #20]
 801bb68:	fa22 f303 	lsr.w	r3, r2, r3
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	f47f ae9d 	bne.w	801b8ac <HAL_GPIO_Init+0x10>
  }
}
 801bb72:	bf00      	nop
 801bb74:	bf00      	nop
 801bb76:	371c      	adds	r7, #28
 801bb78:	46bd      	mov	sp, r7
 801bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb7e:	4770      	bx	lr
 801bb80:	40021000 	.word	0x40021000
 801bb84:	40010000 	.word	0x40010000
 801bb88:	48000400 	.word	0x48000400
 801bb8c:	48000800 	.word	0x48000800
 801bb90:	48000c00 	.word	0x48000c00
 801bb94:	48001000 	.word	0x48001000
 801bb98:	48001400 	.word	0x48001400
 801bb9c:	40010400 	.word	0x40010400

0801bba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bba0:	b480      	push	{r7}
 801bba2:	b083      	sub	sp, #12
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	6078      	str	r0, [r7, #4]
 801bba8:	460b      	mov	r3, r1
 801bbaa:	807b      	strh	r3, [r7, #2]
 801bbac:	4613      	mov	r3, r2
 801bbae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801bbb0:	787b      	ldrb	r3, [r7, #1]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d003      	beq.n	801bbbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801bbb6:	887a      	ldrh	r2, [r7, #2]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801bbbc:	e002      	b.n	801bbc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801bbbe:	887a      	ldrh	r2, [r7, #2]
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bbc4:	bf00      	nop
 801bbc6:	370c      	adds	r7, #12
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbce:	4770      	bx	lr

0801bbd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801bbd0:	b480      	push	{r7}
 801bbd2:	b085      	sub	sp, #20
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d141      	bne.n	801bc62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801bbde:	4b4b      	ldr	r3, [pc, #300]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bbe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bbea:	d131      	bne.n	801bc50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bbec:	4b47      	ldr	r3, [pc, #284]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bbee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bbf2:	4a46      	ldr	r2, [pc, #280]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bbf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bbf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bbfc:	4b43      	ldr	r3, [pc, #268]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bc04:	4a41      	ldr	r2, [pc, #260]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bc0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bc0c:	4b40      	ldr	r3, [pc, #256]	; (801bd10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	2232      	movs	r2, #50	; 0x32
 801bc12:	fb02 f303 	mul.w	r3, r2, r3
 801bc16:	4a3f      	ldr	r2, [pc, #252]	; (801bd14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801bc18:	fba2 2303 	umull	r2, r3, r2, r3
 801bc1c:	0c9b      	lsrs	r3, r3, #18
 801bc1e:	3301      	adds	r3, #1
 801bc20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bc22:	e002      	b.n	801bc2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801bc24:	68fb      	ldr	r3, [r7, #12]
 801bc26:	3b01      	subs	r3, #1
 801bc28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bc2a:	4b38      	ldr	r3, [pc, #224]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc2c:	695b      	ldr	r3, [r3, #20]
 801bc2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bc32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bc36:	d102      	bne.n	801bc3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d1f2      	bne.n	801bc24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bc3e:	4b33      	ldr	r3, [pc, #204]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc40:	695b      	ldr	r3, [r3, #20]
 801bc42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bc46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bc4a:	d158      	bne.n	801bcfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801bc4c:	2303      	movs	r3, #3
 801bc4e:	e057      	b.n	801bd00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bc50:	4b2e      	ldr	r3, [pc, #184]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bc56:	4a2d      	ldr	r2, [pc, #180]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bc5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801bc60:	e04d      	b.n	801bcfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bc68:	d141      	bne.n	801bcee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801bc6a:	4b28      	ldr	r3, [pc, #160]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bc72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bc76:	d131      	bne.n	801bcdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bc78:	4b24      	ldr	r3, [pc, #144]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bc7e:	4a23      	ldr	r2, [pc, #140]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bc84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bc88:	4b20      	ldr	r3, [pc, #128]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bc90:	4a1e      	ldr	r2, [pc, #120]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bc92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bc96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bc98:	4b1d      	ldr	r3, [pc, #116]	; (801bd10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	2232      	movs	r2, #50	; 0x32
 801bc9e:	fb02 f303 	mul.w	r3, r2, r3
 801bca2:	4a1c      	ldr	r2, [pc, #112]	; (801bd14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801bca4:	fba2 2303 	umull	r2, r3, r2, r3
 801bca8:	0c9b      	lsrs	r3, r3, #18
 801bcaa:	3301      	adds	r3, #1
 801bcac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bcae:	e002      	b.n	801bcb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	3b01      	subs	r3, #1
 801bcb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bcb6:	4b15      	ldr	r3, [pc, #84]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bcb8:	695b      	ldr	r3, [r3, #20]
 801bcba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bcbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bcc2:	d102      	bne.n	801bcca <HAL_PWREx_ControlVoltageScaling+0xfa>
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d1f2      	bne.n	801bcb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bcca:	4b10      	ldr	r3, [pc, #64]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bccc:	695b      	ldr	r3, [r3, #20]
 801bcce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bcd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bcd6:	d112      	bne.n	801bcfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801bcd8:	2303      	movs	r3, #3
 801bcda:	e011      	b.n	801bd00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bcdc:	4b0b      	ldr	r3, [pc, #44]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bcde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bce2:	4a0a      	ldr	r2, [pc, #40]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801bcec:	e007      	b.n	801bcfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801bcee:	4b07      	ldr	r3, [pc, #28]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bcf6:	4a05      	ldr	r2, [pc, #20]	; (801bd0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bcf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bcfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801bcfe:	2300      	movs	r3, #0
}
 801bd00:	4618      	mov	r0, r3
 801bd02:	3714      	adds	r7, #20
 801bd04:	46bd      	mov	sp, r7
 801bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd0a:	4770      	bx	lr
 801bd0c:	40007000 	.word	0x40007000
 801bd10:	20000000 	.word	0x20000000
 801bd14:	431bde83 	.word	0x431bde83

0801bd18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801bd18:	b480      	push	{r7}
 801bd1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801bd1c:	4b05      	ldr	r3, [pc, #20]	; (801bd34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801bd1e:	689b      	ldr	r3, [r3, #8]
 801bd20:	4a04      	ldr	r2, [pc, #16]	; (801bd34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801bd22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bd26:	6093      	str	r3, [r2, #8]
}
 801bd28:	bf00      	nop
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd30:	4770      	bx	lr
 801bd32:	bf00      	nop
 801bd34:	40007000 	.word	0x40007000

0801bd38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b088      	sub	sp, #32
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d101      	bne.n	801bd4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bd46:	2301      	movs	r3, #1
 801bd48:	e306      	b.n	801c358 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	f003 0301 	and.w	r3, r3, #1
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d075      	beq.n	801be42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bd56:	4b97      	ldr	r3, [pc, #604]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bd58:	689b      	ldr	r3, [r3, #8]
 801bd5a:	f003 030c 	and.w	r3, r3, #12
 801bd5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801bd60:	4b94      	ldr	r3, [pc, #592]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	f003 0303 	and.w	r3, r3, #3
 801bd68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801bd6a:	69bb      	ldr	r3, [r7, #24]
 801bd6c:	2b0c      	cmp	r3, #12
 801bd6e:	d102      	bne.n	801bd76 <HAL_RCC_OscConfig+0x3e>
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	2b03      	cmp	r3, #3
 801bd74:	d002      	beq.n	801bd7c <HAL_RCC_OscConfig+0x44>
 801bd76:	69bb      	ldr	r3, [r7, #24]
 801bd78:	2b08      	cmp	r3, #8
 801bd7a:	d10b      	bne.n	801bd94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bd7c:	4b8d      	ldr	r3, [pc, #564]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d05b      	beq.n	801be40 <HAL_RCC_OscConfig+0x108>
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	685b      	ldr	r3, [r3, #4]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d157      	bne.n	801be40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801bd90:	2301      	movs	r3, #1
 801bd92:	e2e1      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	685b      	ldr	r3, [r3, #4]
 801bd98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bd9c:	d106      	bne.n	801bdac <HAL_RCC_OscConfig+0x74>
 801bd9e:	4b85      	ldr	r3, [pc, #532]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	4a84      	ldr	r2, [pc, #528]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bda4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bda8:	6013      	str	r3, [r2, #0]
 801bdaa:	e01d      	b.n	801bde8 <HAL_RCC_OscConfig+0xb0>
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	685b      	ldr	r3, [r3, #4]
 801bdb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bdb4:	d10c      	bne.n	801bdd0 <HAL_RCC_OscConfig+0x98>
 801bdb6:	4b7f      	ldr	r3, [pc, #508]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	4a7e      	ldr	r2, [pc, #504]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bdbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bdc0:	6013      	str	r3, [r2, #0]
 801bdc2:	4b7c      	ldr	r3, [pc, #496]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	4a7b      	ldr	r2, [pc, #492]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bdc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bdcc:	6013      	str	r3, [r2, #0]
 801bdce:	e00b      	b.n	801bde8 <HAL_RCC_OscConfig+0xb0>
 801bdd0:	4b78      	ldr	r3, [pc, #480]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	4a77      	ldr	r2, [pc, #476]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bdd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bdda:	6013      	str	r3, [r2, #0]
 801bddc:	4b75      	ldr	r3, [pc, #468]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	4a74      	ldr	r2, [pc, #464]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bde2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bde6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	685b      	ldr	r3, [r3, #4]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d013      	beq.n	801be18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bdf0:	f7fc fd0e 	bl	8018810 <HAL_GetTick>
 801bdf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801bdf6:	e008      	b.n	801be0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bdf8:	f7fc fd0a 	bl	8018810 <HAL_GetTick>
 801bdfc:	4602      	mov	r2, r0
 801bdfe:	693b      	ldr	r3, [r7, #16]
 801be00:	1ad3      	subs	r3, r2, r3
 801be02:	2b64      	cmp	r3, #100	; 0x64
 801be04:	d901      	bls.n	801be0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801be06:	2303      	movs	r3, #3
 801be08:	e2a6      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801be0a:	4b6a      	ldr	r3, [pc, #424]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be12:	2b00      	cmp	r3, #0
 801be14:	d0f0      	beq.n	801bdf8 <HAL_RCC_OscConfig+0xc0>
 801be16:	e014      	b.n	801be42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801be18:	f7fc fcfa 	bl	8018810 <HAL_GetTick>
 801be1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801be1e:	e008      	b.n	801be32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801be20:	f7fc fcf6 	bl	8018810 <HAL_GetTick>
 801be24:	4602      	mov	r2, r0
 801be26:	693b      	ldr	r3, [r7, #16]
 801be28:	1ad3      	subs	r3, r2, r3
 801be2a:	2b64      	cmp	r3, #100	; 0x64
 801be2c:	d901      	bls.n	801be32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801be2e:	2303      	movs	r3, #3
 801be30:	e292      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801be32:	4b60      	ldr	r3, [pc, #384]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d1f0      	bne.n	801be20 <HAL_RCC_OscConfig+0xe8>
 801be3e:	e000      	b.n	801be42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801be40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	f003 0302 	and.w	r3, r3, #2
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d075      	beq.n	801bf3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801be4e:	4b59      	ldr	r3, [pc, #356]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801be50:	689b      	ldr	r3, [r3, #8]
 801be52:	f003 030c 	and.w	r3, r3, #12
 801be56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801be58:	4b56      	ldr	r3, [pc, #344]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801be5a:	68db      	ldr	r3, [r3, #12]
 801be5c:	f003 0303 	and.w	r3, r3, #3
 801be60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801be62:	69bb      	ldr	r3, [r7, #24]
 801be64:	2b0c      	cmp	r3, #12
 801be66:	d102      	bne.n	801be6e <HAL_RCC_OscConfig+0x136>
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	2b02      	cmp	r3, #2
 801be6c:	d002      	beq.n	801be74 <HAL_RCC_OscConfig+0x13c>
 801be6e:	69bb      	ldr	r3, [r7, #24]
 801be70:	2b04      	cmp	r3, #4
 801be72:	d11f      	bne.n	801beb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801be74:	4b4f      	ldr	r3, [pc, #316]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d005      	beq.n	801be8c <HAL_RCC_OscConfig+0x154>
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	68db      	ldr	r3, [r3, #12]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d101      	bne.n	801be8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801be88:	2301      	movs	r3, #1
 801be8a:	e265      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801be8c:	4b49      	ldr	r3, [pc, #292]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801be8e:	685b      	ldr	r3, [r3, #4]
 801be90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	691b      	ldr	r3, [r3, #16]
 801be98:	061b      	lsls	r3, r3, #24
 801be9a:	4946      	ldr	r1, [pc, #280]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801be9c:	4313      	orrs	r3, r2
 801be9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801bea0:	4b45      	ldr	r3, [pc, #276]	; (801bfb8 <HAL_RCC_OscConfig+0x280>)
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7fc fc67 	bl	8018778 <HAL_InitTick>
 801beaa:	4603      	mov	r3, r0
 801beac:	2b00      	cmp	r3, #0
 801beae:	d043      	beq.n	801bf38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801beb0:	2301      	movs	r3, #1
 801beb2:	e251      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	68db      	ldr	r3, [r3, #12]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d023      	beq.n	801bf04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bebc:	4b3d      	ldr	r3, [pc, #244]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	4a3c      	ldr	r2, [pc, #240]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bec8:	f7fc fca2 	bl	8018810 <HAL_GetTick>
 801becc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801bece:	e008      	b.n	801bee2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bed0:	f7fc fc9e 	bl	8018810 <HAL_GetTick>
 801bed4:	4602      	mov	r2, r0
 801bed6:	693b      	ldr	r3, [r7, #16]
 801bed8:	1ad3      	subs	r3, r2, r3
 801beda:	2b02      	cmp	r3, #2
 801bedc:	d901      	bls.n	801bee2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801bede:	2303      	movs	r3, #3
 801bee0:	e23a      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801bee2:	4b34      	ldr	r3, [pc, #208]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801beea:	2b00      	cmp	r3, #0
 801beec:	d0f0      	beq.n	801bed0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801beee:	4b31      	ldr	r3, [pc, #196]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bef0:	685b      	ldr	r3, [r3, #4]
 801bef2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	691b      	ldr	r3, [r3, #16]
 801befa:	061b      	lsls	r3, r3, #24
 801befc:	492d      	ldr	r1, [pc, #180]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801befe:	4313      	orrs	r3, r2
 801bf00:	604b      	str	r3, [r1, #4]
 801bf02:	e01a      	b.n	801bf3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bf04:	4b2b      	ldr	r3, [pc, #172]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	4a2a      	ldr	r2, [pc, #168]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bf0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf10:	f7fc fc7e 	bl	8018810 <HAL_GetTick>
 801bf14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801bf16:	e008      	b.n	801bf2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bf18:	f7fc fc7a 	bl	8018810 <HAL_GetTick>
 801bf1c:	4602      	mov	r2, r0
 801bf1e:	693b      	ldr	r3, [r7, #16]
 801bf20:	1ad3      	subs	r3, r2, r3
 801bf22:	2b02      	cmp	r3, #2
 801bf24:	d901      	bls.n	801bf2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801bf26:	2303      	movs	r3, #3
 801bf28:	e216      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801bf2a:	4b22      	ldr	r3, [pc, #136]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d1f0      	bne.n	801bf18 <HAL_RCC_OscConfig+0x1e0>
 801bf36:	e000      	b.n	801bf3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bf38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	f003 0308 	and.w	r3, r3, #8
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d041      	beq.n	801bfca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	695b      	ldr	r3, [r3, #20]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d01c      	beq.n	801bf88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bf4e:	4b19      	ldr	r3, [pc, #100]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bf54:	4a17      	ldr	r2, [pc, #92]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf56:	f043 0301 	orr.w	r3, r3, #1
 801bf5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf5e:	f7fc fc57 	bl	8018810 <HAL_GetTick>
 801bf62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801bf64:	e008      	b.n	801bf78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bf66:	f7fc fc53 	bl	8018810 <HAL_GetTick>
 801bf6a:	4602      	mov	r2, r0
 801bf6c:	693b      	ldr	r3, [r7, #16]
 801bf6e:	1ad3      	subs	r3, r2, r3
 801bf70:	2b02      	cmp	r3, #2
 801bf72:	d901      	bls.n	801bf78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801bf74:	2303      	movs	r3, #3
 801bf76:	e1ef      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801bf78:	4b0e      	ldr	r3, [pc, #56]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bf7e:	f003 0302 	and.w	r3, r3, #2
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d0ef      	beq.n	801bf66 <HAL_RCC_OscConfig+0x22e>
 801bf86:	e020      	b.n	801bfca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bf88:	4b0a      	ldr	r3, [pc, #40]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bf8e:	4a09      	ldr	r2, [pc, #36]	; (801bfb4 <HAL_RCC_OscConfig+0x27c>)
 801bf90:	f023 0301 	bic.w	r3, r3, #1
 801bf94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf98:	f7fc fc3a 	bl	8018810 <HAL_GetTick>
 801bf9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801bf9e:	e00d      	b.n	801bfbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bfa0:	f7fc fc36 	bl	8018810 <HAL_GetTick>
 801bfa4:	4602      	mov	r2, r0
 801bfa6:	693b      	ldr	r3, [r7, #16]
 801bfa8:	1ad3      	subs	r3, r2, r3
 801bfaa:	2b02      	cmp	r3, #2
 801bfac:	d906      	bls.n	801bfbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801bfae:	2303      	movs	r3, #3
 801bfb0:	e1d2      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
 801bfb2:	bf00      	nop
 801bfb4:	40021000 	.word	0x40021000
 801bfb8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801bfbc:	4b8c      	ldr	r3, [pc, #560]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801bfbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bfc2:	f003 0302 	and.w	r3, r3, #2
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d1ea      	bne.n	801bfa0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	f003 0304 	and.w	r3, r3, #4
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	f000 80a6 	beq.w	801c124 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bfd8:	2300      	movs	r3, #0
 801bfda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801bfdc:	4b84      	ldr	r3, [pc, #528]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801bfde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bfe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d101      	bne.n	801bfec <HAL_RCC_OscConfig+0x2b4>
 801bfe8:	2301      	movs	r3, #1
 801bfea:	e000      	b.n	801bfee <HAL_RCC_OscConfig+0x2b6>
 801bfec:	2300      	movs	r3, #0
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d00d      	beq.n	801c00e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bff2:	4b7f      	ldr	r3, [pc, #508]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801bff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bff6:	4a7e      	ldr	r2, [pc, #504]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801bff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bffc:	6593      	str	r3, [r2, #88]	; 0x58
 801bffe:	4b7c      	ldr	r3, [pc, #496]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c006:	60fb      	str	r3, [r7, #12]
 801c008:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801c00a:	2301      	movs	r3, #1
 801c00c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c00e:	4b79      	ldr	r3, [pc, #484]	; (801c1f4 <HAL_RCC_OscConfig+0x4bc>)
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c016:	2b00      	cmp	r3, #0
 801c018:	d118      	bne.n	801c04c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c01a:	4b76      	ldr	r3, [pc, #472]	; (801c1f4 <HAL_RCC_OscConfig+0x4bc>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	4a75      	ldr	r2, [pc, #468]	; (801c1f4 <HAL_RCC_OscConfig+0x4bc>)
 801c020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c026:	f7fc fbf3 	bl	8018810 <HAL_GetTick>
 801c02a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c02c:	e008      	b.n	801c040 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c02e:	f7fc fbef 	bl	8018810 <HAL_GetTick>
 801c032:	4602      	mov	r2, r0
 801c034:	693b      	ldr	r3, [r7, #16]
 801c036:	1ad3      	subs	r3, r2, r3
 801c038:	2b02      	cmp	r3, #2
 801c03a:	d901      	bls.n	801c040 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801c03c:	2303      	movs	r3, #3
 801c03e:	e18b      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c040:	4b6c      	ldr	r3, [pc, #432]	; (801c1f4 <HAL_RCC_OscConfig+0x4bc>)
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d0f0      	beq.n	801c02e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	689b      	ldr	r3, [r3, #8]
 801c050:	2b01      	cmp	r3, #1
 801c052:	d108      	bne.n	801c066 <HAL_RCC_OscConfig+0x32e>
 801c054:	4b66      	ldr	r3, [pc, #408]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c05a:	4a65      	ldr	r2, [pc, #404]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c05c:	f043 0301 	orr.w	r3, r3, #1
 801c060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c064:	e024      	b.n	801c0b0 <HAL_RCC_OscConfig+0x378>
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	689b      	ldr	r3, [r3, #8]
 801c06a:	2b05      	cmp	r3, #5
 801c06c:	d110      	bne.n	801c090 <HAL_RCC_OscConfig+0x358>
 801c06e:	4b60      	ldr	r3, [pc, #384]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c074:	4a5e      	ldr	r2, [pc, #376]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c076:	f043 0304 	orr.w	r3, r3, #4
 801c07a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c07e:	4b5c      	ldr	r3, [pc, #368]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c084:	4a5a      	ldr	r2, [pc, #360]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c086:	f043 0301 	orr.w	r3, r3, #1
 801c08a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c08e:	e00f      	b.n	801c0b0 <HAL_RCC_OscConfig+0x378>
 801c090:	4b57      	ldr	r3, [pc, #348]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c096:	4a56      	ldr	r2, [pc, #344]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c098:	f023 0301 	bic.w	r3, r3, #1
 801c09c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c0a0:	4b53      	ldr	r3, [pc, #332]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c0a6:	4a52      	ldr	r2, [pc, #328]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c0a8:	f023 0304 	bic.w	r3, r3, #4
 801c0ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	689b      	ldr	r3, [r3, #8]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d016      	beq.n	801c0e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c0b8:	f7fc fbaa 	bl	8018810 <HAL_GetTick>
 801c0bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c0be:	e00a      	b.n	801c0d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c0c0:	f7fc fba6 	bl	8018810 <HAL_GetTick>
 801c0c4:	4602      	mov	r2, r0
 801c0c6:	693b      	ldr	r3, [r7, #16]
 801c0c8:	1ad3      	subs	r3, r2, r3
 801c0ca:	f241 3288 	movw	r2, #5000	; 0x1388
 801c0ce:	4293      	cmp	r3, r2
 801c0d0:	d901      	bls.n	801c0d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801c0d2:	2303      	movs	r3, #3
 801c0d4:	e140      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c0d6:	4b46      	ldr	r3, [pc, #280]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c0dc:	f003 0302 	and.w	r3, r3, #2
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d0ed      	beq.n	801c0c0 <HAL_RCC_OscConfig+0x388>
 801c0e4:	e015      	b.n	801c112 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c0e6:	f7fc fb93 	bl	8018810 <HAL_GetTick>
 801c0ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c0ec:	e00a      	b.n	801c104 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c0ee:	f7fc fb8f 	bl	8018810 <HAL_GetTick>
 801c0f2:	4602      	mov	r2, r0
 801c0f4:	693b      	ldr	r3, [r7, #16]
 801c0f6:	1ad3      	subs	r3, r2, r3
 801c0f8:	f241 3288 	movw	r2, #5000	; 0x1388
 801c0fc:	4293      	cmp	r3, r2
 801c0fe:	d901      	bls.n	801c104 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801c100:	2303      	movs	r3, #3
 801c102:	e129      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c104:	4b3a      	ldr	r3, [pc, #232]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c10a:	f003 0302 	and.w	r3, r3, #2
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d1ed      	bne.n	801c0ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c112:	7ffb      	ldrb	r3, [r7, #31]
 801c114:	2b01      	cmp	r3, #1
 801c116:	d105      	bne.n	801c124 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c118:	4b35      	ldr	r3, [pc, #212]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c11c:	4a34      	ldr	r2, [pc, #208]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c11e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c122:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	f003 0320 	and.w	r3, r3, #32
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d03c      	beq.n	801c1aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	699b      	ldr	r3, [r3, #24]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d01c      	beq.n	801c172 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c138:	4b2d      	ldr	r3, [pc, #180]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c13a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c13e:	4a2c      	ldr	r2, [pc, #176]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c140:	f043 0301 	orr.w	r3, r3, #1
 801c144:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c148:	f7fc fb62 	bl	8018810 <HAL_GetTick>
 801c14c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c14e:	e008      	b.n	801c162 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c150:	f7fc fb5e 	bl	8018810 <HAL_GetTick>
 801c154:	4602      	mov	r2, r0
 801c156:	693b      	ldr	r3, [r7, #16]
 801c158:	1ad3      	subs	r3, r2, r3
 801c15a:	2b02      	cmp	r3, #2
 801c15c:	d901      	bls.n	801c162 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801c15e:	2303      	movs	r3, #3
 801c160:	e0fa      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c162:	4b23      	ldr	r3, [pc, #140]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c168:	f003 0302 	and.w	r3, r3, #2
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d0ef      	beq.n	801c150 <HAL_RCC_OscConfig+0x418>
 801c170:	e01b      	b.n	801c1aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c172:	4b1f      	ldr	r3, [pc, #124]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c178:	4a1d      	ldr	r2, [pc, #116]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c17a:	f023 0301 	bic.w	r3, r3, #1
 801c17e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c182:	f7fc fb45 	bl	8018810 <HAL_GetTick>
 801c186:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c188:	e008      	b.n	801c19c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c18a:	f7fc fb41 	bl	8018810 <HAL_GetTick>
 801c18e:	4602      	mov	r2, r0
 801c190:	693b      	ldr	r3, [r7, #16]
 801c192:	1ad3      	subs	r3, r2, r3
 801c194:	2b02      	cmp	r3, #2
 801c196:	d901      	bls.n	801c19c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801c198:	2303      	movs	r3, #3
 801c19a:	e0dd      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c19c:	4b14      	ldr	r3, [pc, #80]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c19e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c1a2:	f003 0302 	and.w	r3, r3, #2
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d1ef      	bne.n	801c18a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	69db      	ldr	r3, [r3, #28]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	f000 80d1 	beq.w	801c356 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c1b4:	4b0e      	ldr	r3, [pc, #56]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c1b6:	689b      	ldr	r3, [r3, #8]
 801c1b8:	f003 030c 	and.w	r3, r3, #12
 801c1bc:	2b0c      	cmp	r3, #12
 801c1be:	f000 808b 	beq.w	801c2d8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	69db      	ldr	r3, [r3, #28]
 801c1c6:	2b02      	cmp	r3, #2
 801c1c8:	d15e      	bne.n	801c288 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c1ca:	4b09      	ldr	r3, [pc, #36]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	4a08      	ldr	r2, [pc, #32]	; (801c1f0 <HAL_RCC_OscConfig+0x4b8>)
 801c1d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c1d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1d6:	f7fc fb1b 	bl	8018810 <HAL_GetTick>
 801c1da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c1dc:	e00c      	b.n	801c1f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c1de:	f7fc fb17 	bl	8018810 <HAL_GetTick>
 801c1e2:	4602      	mov	r2, r0
 801c1e4:	693b      	ldr	r3, [r7, #16]
 801c1e6:	1ad3      	subs	r3, r2, r3
 801c1e8:	2b02      	cmp	r3, #2
 801c1ea:	d905      	bls.n	801c1f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801c1ec:	2303      	movs	r3, #3
 801c1ee:	e0b3      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
 801c1f0:	40021000 	.word	0x40021000
 801c1f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c1f8:	4b59      	ldr	r3, [pc, #356]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c200:	2b00      	cmp	r3, #0
 801c202:	d1ec      	bne.n	801c1de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c204:	4b56      	ldr	r3, [pc, #344]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c206:	68da      	ldr	r2, [r3, #12]
 801c208:	4b56      	ldr	r3, [pc, #344]	; (801c364 <HAL_RCC_OscConfig+0x62c>)
 801c20a:	4013      	ands	r3, r2
 801c20c:	687a      	ldr	r2, [r7, #4]
 801c20e:	6a11      	ldr	r1, [r2, #32]
 801c210:	687a      	ldr	r2, [r7, #4]
 801c212:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c214:	3a01      	subs	r2, #1
 801c216:	0112      	lsls	r2, r2, #4
 801c218:	4311      	orrs	r1, r2
 801c21a:	687a      	ldr	r2, [r7, #4]
 801c21c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c21e:	0212      	lsls	r2, r2, #8
 801c220:	4311      	orrs	r1, r2
 801c222:	687a      	ldr	r2, [r7, #4]
 801c224:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c226:	0852      	lsrs	r2, r2, #1
 801c228:	3a01      	subs	r2, #1
 801c22a:	0552      	lsls	r2, r2, #21
 801c22c:	4311      	orrs	r1, r2
 801c22e:	687a      	ldr	r2, [r7, #4]
 801c230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c232:	0852      	lsrs	r2, r2, #1
 801c234:	3a01      	subs	r2, #1
 801c236:	0652      	lsls	r2, r2, #25
 801c238:	4311      	orrs	r1, r2
 801c23a:	687a      	ldr	r2, [r7, #4]
 801c23c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c23e:	06d2      	lsls	r2, r2, #27
 801c240:	430a      	orrs	r2, r1
 801c242:	4947      	ldr	r1, [pc, #284]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c244:	4313      	orrs	r3, r2
 801c246:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c248:	4b45      	ldr	r3, [pc, #276]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	4a44      	ldr	r2, [pc, #272]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c24e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c252:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c254:	4b42      	ldr	r3, [pc, #264]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c256:	68db      	ldr	r3, [r3, #12]
 801c258:	4a41      	ldr	r2, [pc, #260]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c25a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c25e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c260:	f7fc fad6 	bl	8018810 <HAL_GetTick>
 801c264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c266:	e008      	b.n	801c27a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c268:	f7fc fad2 	bl	8018810 <HAL_GetTick>
 801c26c:	4602      	mov	r2, r0
 801c26e:	693b      	ldr	r3, [r7, #16]
 801c270:	1ad3      	subs	r3, r2, r3
 801c272:	2b02      	cmp	r3, #2
 801c274:	d901      	bls.n	801c27a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c276:	2303      	movs	r3, #3
 801c278:	e06e      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c27a:	4b39      	ldr	r3, [pc, #228]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c282:	2b00      	cmp	r3, #0
 801c284:	d0f0      	beq.n	801c268 <HAL_RCC_OscConfig+0x530>
 801c286:	e066      	b.n	801c356 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c288:	4b35      	ldr	r3, [pc, #212]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	4a34      	ldr	r2, [pc, #208]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c28e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c292:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c294:	4b32      	ldr	r3, [pc, #200]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c296:	68db      	ldr	r3, [r3, #12]
 801c298:	4a31      	ldr	r2, [pc, #196]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c29a:	f023 0303 	bic.w	r3, r3, #3
 801c29e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801c2a0:	4b2f      	ldr	r3, [pc, #188]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c2a2:	68db      	ldr	r3, [r3, #12]
 801c2a4:	4a2e      	ldr	r2, [pc, #184]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c2a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c2aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c2ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2b0:	f7fc faae 	bl	8018810 <HAL_GetTick>
 801c2b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c2b6:	e008      	b.n	801c2ca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c2b8:	f7fc faaa 	bl	8018810 <HAL_GetTick>
 801c2bc:	4602      	mov	r2, r0
 801c2be:	693b      	ldr	r3, [r7, #16]
 801c2c0:	1ad3      	subs	r3, r2, r3
 801c2c2:	2b02      	cmp	r3, #2
 801c2c4:	d901      	bls.n	801c2ca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801c2c6:	2303      	movs	r3, #3
 801c2c8:	e046      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c2ca:	4b25      	ldr	r3, [pc, #148]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d1f0      	bne.n	801c2b8 <HAL_RCC_OscConfig+0x580>
 801c2d6:	e03e      	b.n	801c356 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	69db      	ldr	r3, [r3, #28]
 801c2dc:	2b01      	cmp	r3, #1
 801c2de:	d101      	bne.n	801c2e4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801c2e0:	2301      	movs	r3, #1
 801c2e2:	e039      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801c2e4:	4b1e      	ldr	r3, [pc, #120]	; (801c360 <HAL_RCC_OscConfig+0x628>)
 801c2e6:	68db      	ldr	r3, [r3, #12]
 801c2e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c2ea:	697b      	ldr	r3, [r7, #20]
 801c2ec:	f003 0203 	and.w	r2, r3, #3
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	6a1b      	ldr	r3, [r3, #32]
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	d12c      	bne.n	801c352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c2f8:	697b      	ldr	r3, [r7, #20]
 801c2fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c302:	3b01      	subs	r3, #1
 801c304:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c306:	429a      	cmp	r2, r3
 801c308:	d123      	bne.n	801c352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c30a:	697b      	ldr	r3, [r7, #20]
 801c30c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c314:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c316:	429a      	cmp	r2, r3
 801c318:	d11b      	bne.n	801c352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c324:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c326:	429a      	cmp	r2, r3
 801c328:	d113      	bne.n	801c352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c32a:	697b      	ldr	r3, [r7, #20]
 801c32c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c334:	085b      	lsrs	r3, r3, #1
 801c336:	3b01      	subs	r3, #1
 801c338:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c33a:	429a      	cmp	r2, r3
 801c33c:	d109      	bne.n	801c352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c33e:	697b      	ldr	r3, [r7, #20]
 801c340:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c348:	085b      	lsrs	r3, r3, #1
 801c34a:	3b01      	subs	r3, #1
 801c34c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c34e:	429a      	cmp	r2, r3
 801c350:	d001      	beq.n	801c356 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801c352:	2301      	movs	r3, #1
 801c354:	e000      	b.n	801c358 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801c356:	2300      	movs	r3, #0
}
 801c358:	4618      	mov	r0, r3
 801c35a:	3720      	adds	r7, #32
 801c35c:	46bd      	mov	sp, r7
 801c35e:	bd80      	pop	{r7, pc}
 801c360:	40021000 	.word	0x40021000
 801c364:	019f800c 	.word	0x019f800c

0801c368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b086      	sub	sp, #24
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	6078      	str	r0, [r7, #4]
 801c370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c372:	2300      	movs	r3, #0
 801c374:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d101      	bne.n	801c380 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c37c:	2301      	movs	r3, #1
 801c37e:	e11e      	b.n	801c5be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c380:	4b91      	ldr	r3, [pc, #580]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	f003 030f 	and.w	r3, r3, #15
 801c388:	683a      	ldr	r2, [r7, #0]
 801c38a:	429a      	cmp	r2, r3
 801c38c:	d910      	bls.n	801c3b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c38e:	4b8e      	ldr	r3, [pc, #568]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	f023 020f 	bic.w	r2, r3, #15
 801c396:	498c      	ldr	r1, [pc, #560]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	4313      	orrs	r3, r2
 801c39c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c39e:	4b8a      	ldr	r3, [pc, #552]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	f003 030f 	and.w	r3, r3, #15
 801c3a6:	683a      	ldr	r2, [r7, #0]
 801c3a8:	429a      	cmp	r2, r3
 801c3aa:	d001      	beq.n	801c3b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c3ac:	2301      	movs	r3, #1
 801c3ae:	e106      	b.n	801c5be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	f003 0301 	and.w	r3, r3, #1
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d073      	beq.n	801c4a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	685b      	ldr	r3, [r3, #4]
 801c3c0:	2b03      	cmp	r3, #3
 801c3c2:	d129      	bne.n	801c418 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c3c4:	4b81      	ldr	r3, [pc, #516]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d101      	bne.n	801c3d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801c3d0:	2301      	movs	r3, #1
 801c3d2:	e0f4      	b.n	801c5be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801c3d4:	f000 f99c 	bl	801c710 <RCC_GetSysClockFreqFromPLLSource>
 801c3d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801c3da:	693b      	ldr	r3, [r7, #16]
 801c3dc:	4a7c      	ldr	r2, [pc, #496]	; (801c5d0 <HAL_RCC_ClockConfig+0x268>)
 801c3de:	4293      	cmp	r3, r2
 801c3e0:	d93f      	bls.n	801c462 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c3e2:	4b7a      	ldr	r3, [pc, #488]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c3e4:	689b      	ldr	r3, [r3, #8]
 801c3e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d009      	beq.n	801c402 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d033      	beq.n	801c462 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d12f      	bne.n	801c462 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c402:	4b72      	ldr	r3, [pc, #456]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c404:	689b      	ldr	r3, [r3, #8]
 801c406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c40a:	4a70      	ldr	r2, [pc, #448]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c410:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c412:	2380      	movs	r3, #128	; 0x80
 801c414:	617b      	str	r3, [r7, #20]
 801c416:	e024      	b.n	801c462 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	685b      	ldr	r3, [r3, #4]
 801c41c:	2b02      	cmp	r3, #2
 801c41e:	d107      	bne.n	801c430 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c420:	4b6a      	ldr	r3, [pc, #424]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d109      	bne.n	801c440 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c42c:	2301      	movs	r3, #1
 801c42e:	e0c6      	b.n	801c5be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c430:	4b66      	ldr	r3, [pc, #408]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d101      	bne.n	801c440 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c43c:	2301      	movs	r3, #1
 801c43e:	e0be      	b.n	801c5be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801c440:	f000 f8ce 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 801c444:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801c446:	693b      	ldr	r3, [r7, #16]
 801c448:	4a61      	ldr	r2, [pc, #388]	; (801c5d0 <HAL_RCC_ClockConfig+0x268>)
 801c44a:	4293      	cmp	r3, r2
 801c44c:	d909      	bls.n	801c462 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c44e:	4b5f      	ldr	r3, [pc, #380]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c450:	689b      	ldr	r3, [r3, #8]
 801c452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c456:	4a5d      	ldr	r2, [pc, #372]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c45c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801c45e:	2380      	movs	r3, #128	; 0x80
 801c460:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c462:	4b5a      	ldr	r3, [pc, #360]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c464:	689b      	ldr	r3, [r3, #8]
 801c466:	f023 0203 	bic.w	r2, r3, #3
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	685b      	ldr	r3, [r3, #4]
 801c46e:	4957      	ldr	r1, [pc, #348]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c470:	4313      	orrs	r3, r2
 801c472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c474:	f7fc f9cc 	bl	8018810 <HAL_GetTick>
 801c478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c47a:	e00a      	b.n	801c492 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c47c:	f7fc f9c8 	bl	8018810 <HAL_GetTick>
 801c480:	4602      	mov	r2, r0
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	1ad3      	subs	r3, r2, r3
 801c486:	f241 3288 	movw	r2, #5000	; 0x1388
 801c48a:	4293      	cmp	r3, r2
 801c48c:	d901      	bls.n	801c492 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801c48e:	2303      	movs	r3, #3
 801c490:	e095      	b.n	801c5be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c492:	4b4e      	ldr	r3, [pc, #312]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c494:	689b      	ldr	r3, [r3, #8]
 801c496:	f003 020c 	and.w	r2, r3, #12
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	685b      	ldr	r3, [r3, #4]
 801c49e:	009b      	lsls	r3, r3, #2
 801c4a0:	429a      	cmp	r2, r3
 801c4a2:	d1eb      	bne.n	801c47c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	f003 0302 	and.w	r3, r3, #2
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d023      	beq.n	801c4f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	f003 0304 	and.w	r3, r3, #4
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d005      	beq.n	801c4c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c4bc:	4b43      	ldr	r3, [pc, #268]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c4be:	689b      	ldr	r3, [r3, #8]
 801c4c0:	4a42      	ldr	r2, [pc, #264]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c4c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c4c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	f003 0308 	and.w	r3, r3, #8
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d007      	beq.n	801c4e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801c4d4:	4b3d      	ldr	r3, [pc, #244]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c4d6:	689b      	ldr	r3, [r3, #8]
 801c4d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c4dc:	4a3b      	ldr	r2, [pc, #236]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c4de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c4e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c4e4:	4b39      	ldr	r3, [pc, #228]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c4e6:	689b      	ldr	r3, [r3, #8]
 801c4e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	689b      	ldr	r3, [r3, #8]
 801c4f0:	4936      	ldr	r1, [pc, #216]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c4f2:	4313      	orrs	r3, r2
 801c4f4:	608b      	str	r3, [r1, #8]
 801c4f6:	e008      	b.n	801c50a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801c4f8:	697b      	ldr	r3, [r7, #20]
 801c4fa:	2b80      	cmp	r3, #128	; 0x80
 801c4fc:	d105      	bne.n	801c50a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801c4fe:	4b33      	ldr	r3, [pc, #204]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c500:	689b      	ldr	r3, [r3, #8]
 801c502:	4a32      	ldr	r2, [pc, #200]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c508:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c50a:	4b2f      	ldr	r3, [pc, #188]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	f003 030f 	and.w	r3, r3, #15
 801c512:	683a      	ldr	r2, [r7, #0]
 801c514:	429a      	cmp	r2, r3
 801c516:	d21d      	bcs.n	801c554 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c518:	4b2b      	ldr	r3, [pc, #172]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	f023 020f 	bic.w	r2, r3, #15
 801c520:	4929      	ldr	r1, [pc, #164]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c522:	683b      	ldr	r3, [r7, #0]
 801c524:	4313      	orrs	r3, r2
 801c526:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801c528:	f7fc f972 	bl	8018810 <HAL_GetTick>
 801c52c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c52e:	e00a      	b.n	801c546 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c530:	f7fc f96e 	bl	8018810 <HAL_GetTick>
 801c534:	4602      	mov	r2, r0
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	1ad3      	subs	r3, r2, r3
 801c53a:	f241 3288 	movw	r2, #5000	; 0x1388
 801c53e:	4293      	cmp	r3, r2
 801c540:	d901      	bls.n	801c546 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801c542:	2303      	movs	r3, #3
 801c544:	e03b      	b.n	801c5be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c546:	4b20      	ldr	r3, [pc, #128]	; (801c5c8 <HAL_RCC_ClockConfig+0x260>)
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	f003 030f 	and.w	r3, r3, #15
 801c54e:	683a      	ldr	r2, [r7, #0]
 801c550:	429a      	cmp	r2, r3
 801c552:	d1ed      	bne.n	801c530 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	f003 0304 	and.w	r3, r3, #4
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d008      	beq.n	801c572 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c560:	4b1a      	ldr	r3, [pc, #104]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c562:	689b      	ldr	r3, [r3, #8]
 801c564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	68db      	ldr	r3, [r3, #12]
 801c56c:	4917      	ldr	r1, [pc, #92]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c56e:	4313      	orrs	r3, r2
 801c570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	f003 0308 	and.w	r3, r3, #8
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d009      	beq.n	801c592 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c57e:	4b13      	ldr	r3, [pc, #76]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c580:	689b      	ldr	r3, [r3, #8]
 801c582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	691b      	ldr	r3, [r3, #16]
 801c58a:	00db      	lsls	r3, r3, #3
 801c58c:	490f      	ldr	r1, [pc, #60]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c58e:	4313      	orrs	r3, r2
 801c590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c592:	f000 f825 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 801c596:	4602      	mov	r2, r0
 801c598:	4b0c      	ldr	r3, [pc, #48]	; (801c5cc <HAL_RCC_ClockConfig+0x264>)
 801c59a:	689b      	ldr	r3, [r3, #8]
 801c59c:	091b      	lsrs	r3, r3, #4
 801c59e:	f003 030f 	and.w	r3, r3, #15
 801c5a2:	490c      	ldr	r1, [pc, #48]	; (801c5d4 <HAL_RCC_ClockConfig+0x26c>)
 801c5a4:	5ccb      	ldrb	r3, [r1, r3]
 801c5a6:	f003 031f 	and.w	r3, r3, #31
 801c5aa:	fa22 f303 	lsr.w	r3, r2, r3
 801c5ae:	4a0a      	ldr	r2, [pc, #40]	; (801c5d8 <HAL_RCC_ClockConfig+0x270>)
 801c5b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801c5b2:	4b0a      	ldr	r3, [pc, #40]	; (801c5dc <HAL_RCC_ClockConfig+0x274>)
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f7fc f8de 	bl	8018778 <HAL_InitTick>
 801c5bc:	4603      	mov	r3, r0
}
 801c5be:	4618      	mov	r0, r3
 801c5c0:	3718      	adds	r7, #24
 801c5c2:	46bd      	mov	sp, r7
 801c5c4:	bd80      	pop	{r7, pc}
 801c5c6:	bf00      	nop
 801c5c8:	40022000 	.word	0x40022000
 801c5cc:	40021000 	.word	0x40021000
 801c5d0:	04c4b400 	.word	0x04c4b400
 801c5d4:	080231e8 	.word	0x080231e8
 801c5d8:	20000000 	.word	0x20000000
 801c5dc:	20000004 	.word	0x20000004

0801c5e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c5e0:	b480      	push	{r7}
 801c5e2:	b087      	sub	sp, #28
 801c5e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801c5e6:	4b2c      	ldr	r3, [pc, #176]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c5e8:	689b      	ldr	r3, [r3, #8]
 801c5ea:	f003 030c 	and.w	r3, r3, #12
 801c5ee:	2b04      	cmp	r3, #4
 801c5f0:	d102      	bne.n	801c5f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801c5f2:	4b2a      	ldr	r3, [pc, #168]	; (801c69c <HAL_RCC_GetSysClockFreq+0xbc>)
 801c5f4:	613b      	str	r3, [r7, #16]
 801c5f6:	e047      	b.n	801c688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801c5f8:	4b27      	ldr	r3, [pc, #156]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c5fa:	689b      	ldr	r3, [r3, #8]
 801c5fc:	f003 030c 	and.w	r3, r3, #12
 801c600:	2b08      	cmp	r3, #8
 801c602:	d102      	bne.n	801c60a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801c604:	4b25      	ldr	r3, [pc, #148]	; (801c69c <HAL_RCC_GetSysClockFreq+0xbc>)
 801c606:	613b      	str	r3, [r7, #16]
 801c608:	e03e      	b.n	801c688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801c60a:	4b23      	ldr	r3, [pc, #140]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c60c:	689b      	ldr	r3, [r3, #8]
 801c60e:	f003 030c 	and.w	r3, r3, #12
 801c612:	2b0c      	cmp	r3, #12
 801c614:	d136      	bne.n	801c684 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c616:	4b20      	ldr	r3, [pc, #128]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c618:	68db      	ldr	r3, [r3, #12]
 801c61a:	f003 0303 	and.w	r3, r3, #3
 801c61e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c620:	4b1d      	ldr	r3, [pc, #116]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c622:	68db      	ldr	r3, [r3, #12]
 801c624:	091b      	lsrs	r3, r3, #4
 801c626:	f003 030f 	and.w	r3, r3, #15
 801c62a:	3301      	adds	r3, #1
 801c62c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	2b03      	cmp	r3, #3
 801c632:	d10c      	bne.n	801c64e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c634:	4a19      	ldr	r2, [pc, #100]	; (801c69c <HAL_RCC_GetSysClockFreq+0xbc>)
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	fbb2 f3f3 	udiv	r3, r2, r3
 801c63c:	4a16      	ldr	r2, [pc, #88]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c63e:	68d2      	ldr	r2, [r2, #12]
 801c640:	0a12      	lsrs	r2, r2, #8
 801c642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c646:	fb02 f303 	mul.w	r3, r2, r3
 801c64a:	617b      	str	r3, [r7, #20]
      break;
 801c64c:	e00c      	b.n	801c668 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c64e:	4a13      	ldr	r2, [pc, #76]	; (801c69c <HAL_RCC_GetSysClockFreq+0xbc>)
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	fbb2 f3f3 	udiv	r3, r2, r3
 801c656:	4a10      	ldr	r2, [pc, #64]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c658:	68d2      	ldr	r2, [r2, #12]
 801c65a:	0a12      	lsrs	r2, r2, #8
 801c65c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c660:	fb02 f303 	mul.w	r3, r2, r3
 801c664:	617b      	str	r3, [r7, #20]
      break;
 801c666:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801c668:	4b0b      	ldr	r3, [pc, #44]	; (801c698 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c66a:	68db      	ldr	r3, [r3, #12]
 801c66c:	0e5b      	lsrs	r3, r3, #25
 801c66e:	f003 0303 	and.w	r3, r3, #3
 801c672:	3301      	adds	r3, #1
 801c674:	005b      	lsls	r3, r3, #1
 801c676:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801c678:	697a      	ldr	r2, [r7, #20]
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c680:	613b      	str	r3, [r7, #16]
 801c682:	e001      	b.n	801c688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801c684:	2300      	movs	r3, #0
 801c686:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801c688:	693b      	ldr	r3, [r7, #16]
}
 801c68a:	4618      	mov	r0, r3
 801c68c:	371c      	adds	r7, #28
 801c68e:	46bd      	mov	sp, r7
 801c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c694:	4770      	bx	lr
 801c696:	bf00      	nop
 801c698:	40021000 	.word	0x40021000
 801c69c:	00f42400 	.word	0x00f42400

0801c6a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c6a0:	b480      	push	{r7}
 801c6a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c6a4:	4b03      	ldr	r3, [pc, #12]	; (801c6b4 <HAL_RCC_GetHCLKFreq+0x14>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
}
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6b0:	4770      	bx	lr
 801c6b2:	bf00      	nop
 801c6b4:	20000000 	.word	0x20000000

0801c6b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801c6bc:	f7ff fff0 	bl	801c6a0 <HAL_RCC_GetHCLKFreq>
 801c6c0:	4602      	mov	r2, r0
 801c6c2:	4b06      	ldr	r3, [pc, #24]	; (801c6dc <HAL_RCC_GetPCLK1Freq+0x24>)
 801c6c4:	689b      	ldr	r3, [r3, #8]
 801c6c6:	0a1b      	lsrs	r3, r3, #8
 801c6c8:	f003 0307 	and.w	r3, r3, #7
 801c6cc:	4904      	ldr	r1, [pc, #16]	; (801c6e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801c6ce:	5ccb      	ldrb	r3, [r1, r3]
 801c6d0:	f003 031f 	and.w	r3, r3, #31
 801c6d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c6d8:	4618      	mov	r0, r3
 801c6da:	bd80      	pop	{r7, pc}
 801c6dc:	40021000 	.word	0x40021000
 801c6e0:	080231f8 	.word	0x080231f8

0801c6e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801c6e8:	f7ff ffda 	bl	801c6a0 <HAL_RCC_GetHCLKFreq>
 801c6ec:	4602      	mov	r2, r0
 801c6ee:	4b06      	ldr	r3, [pc, #24]	; (801c708 <HAL_RCC_GetPCLK2Freq+0x24>)
 801c6f0:	689b      	ldr	r3, [r3, #8]
 801c6f2:	0adb      	lsrs	r3, r3, #11
 801c6f4:	f003 0307 	and.w	r3, r3, #7
 801c6f8:	4904      	ldr	r1, [pc, #16]	; (801c70c <HAL_RCC_GetPCLK2Freq+0x28>)
 801c6fa:	5ccb      	ldrb	r3, [r1, r3]
 801c6fc:	f003 031f 	and.w	r3, r3, #31
 801c700:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c704:	4618      	mov	r0, r3
 801c706:	bd80      	pop	{r7, pc}
 801c708:	40021000 	.word	0x40021000
 801c70c:	080231f8 	.word	0x080231f8

0801c710 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801c710:	b480      	push	{r7}
 801c712:	b087      	sub	sp, #28
 801c714:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c716:	4b1e      	ldr	r3, [pc, #120]	; (801c790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c718:	68db      	ldr	r3, [r3, #12]
 801c71a:	f003 0303 	and.w	r3, r3, #3
 801c71e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c720:	4b1b      	ldr	r3, [pc, #108]	; (801c790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c722:	68db      	ldr	r3, [r3, #12]
 801c724:	091b      	lsrs	r3, r3, #4
 801c726:	f003 030f 	and.w	r3, r3, #15
 801c72a:	3301      	adds	r3, #1
 801c72c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801c72e:	693b      	ldr	r3, [r7, #16]
 801c730:	2b03      	cmp	r3, #3
 801c732:	d10c      	bne.n	801c74e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c734:	4a17      	ldr	r2, [pc, #92]	; (801c794 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	fbb2 f3f3 	udiv	r3, r2, r3
 801c73c:	4a14      	ldr	r2, [pc, #80]	; (801c790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c73e:	68d2      	ldr	r2, [r2, #12]
 801c740:	0a12      	lsrs	r2, r2, #8
 801c742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c746:	fb02 f303 	mul.w	r3, r2, r3
 801c74a:	617b      	str	r3, [r7, #20]
    break;
 801c74c:	e00c      	b.n	801c768 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c74e:	4a11      	ldr	r2, [pc, #68]	; (801c794 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	fbb2 f3f3 	udiv	r3, r2, r3
 801c756:	4a0e      	ldr	r2, [pc, #56]	; (801c790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c758:	68d2      	ldr	r2, [r2, #12]
 801c75a:	0a12      	lsrs	r2, r2, #8
 801c75c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c760:	fb02 f303 	mul.w	r3, r2, r3
 801c764:	617b      	str	r3, [r7, #20]
    break;
 801c766:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801c768:	4b09      	ldr	r3, [pc, #36]	; (801c790 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c76a:	68db      	ldr	r3, [r3, #12]
 801c76c:	0e5b      	lsrs	r3, r3, #25
 801c76e:	f003 0303 	and.w	r3, r3, #3
 801c772:	3301      	adds	r3, #1
 801c774:	005b      	lsls	r3, r3, #1
 801c776:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801c778:	697a      	ldr	r2, [r7, #20]
 801c77a:	68bb      	ldr	r3, [r7, #8]
 801c77c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c780:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801c782:	687b      	ldr	r3, [r7, #4]
}
 801c784:	4618      	mov	r0, r3
 801c786:	371c      	adds	r7, #28
 801c788:	46bd      	mov	sp, r7
 801c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c78e:	4770      	bx	lr
 801c790:	40021000 	.word	0x40021000
 801c794:	00f42400 	.word	0x00f42400

0801c798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b086      	sub	sp, #24
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	f000 8098 	beq.w	801c8e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c7ba:	4b43      	ldr	r3, [pc, #268]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c7be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d10d      	bne.n	801c7e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c7c6:	4b40      	ldr	r3, [pc, #256]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c7c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c7ca:	4a3f      	ldr	r2, [pc, #252]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c7cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c7d0:	6593      	str	r3, [r2, #88]	; 0x58
 801c7d2:	4b3d      	ldr	r3, [pc, #244]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c7d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c7da:	60bb      	str	r3, [r7, #8]
 801c7dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c7de:	2301      	movs	r3, #1
 801c7e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c7e2:	4b3a      	ldr	r3, [pc, #232]	; (801c8cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	4a39      	ldr	r2, [pc, #228]	; (801c8cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801c7e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c7ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c7ee:	f7fc f80f 	bl	8018810 <HAL_GetTick>
 801c7f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c7f4:	e009      	b.n	801c80a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c7f6:	f7fc f80b 	bl	8018810 <HAL_GetTick>
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	1ad3      	subs	r3, r2, r3
 801c800:	2b02      	cmp	r3, #2
 801c802:	d902      	bls.n	801c80a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801c804:	2303      	movs	r3, #3
 801c806:	74fb      	strb	r3, [r7, #19]
        break;
 801c808:	e005      	b.n	801c816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c80a:	4b30      	ldr	r3, [pc, #192]	; (801c8cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c812:	2b00      	cmp	r3, #0
 801c814:	d0ef      	beq.n	801c7f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801c816:	7cfb      	ldrb	r3, [r7, #19]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d159      	bne.n	801c8d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801c81c:	4b2a      	ldr	r3, [pc, #168]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c826:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801c828:	697b      	ldr	r3, [r7, #20]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d01e      	beq.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c832:	697a      	ldr	r2, [r7, #20]
 801c834:	429a      	cmp	r2, r3
 801c836:	d019      	beq.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801c838:	4b23      	ldr	r3, [pc, #140]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c83e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c842:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c844:	4b20      	ldr	r3, [pc, #128]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c84a:	4a1f      	ldr	r2, [pc, #124]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c84c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c854:	4b1c      	ldr	r3, [pc, #112]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c85a:	4a1b      	ldr	r2, [pc, #108]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c85c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801c864:	4a18      	ldr	r2, [pc, #96]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c866:	697b      	ldr	r3, [r7, #20]
 801c868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801c86c:	697b      	ldr	r3, [r7, #20]
 801c86e:	f003 0301 	and.w	r3, r3, #1
 801c872:	2b00      	cmp	r3, #0
 801c874:	d016      	beq.n	801c8a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c876:	f7fb ffcb 	bl	8018810 <HAL_GetTick>
 801c87a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c87c:	e00b      	b.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c87e:	f7fb ffc7 	bl	8018810 <HAL_GetTick>
 801c882:	4602      	mov	r2, r0
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	1ad3      	subs	r3, r2, r3
 801c888:	f241 3288 	movw	r2, #5000	; 0x1388
 801c88c:	4293      	cmp	r3, r2
 801c88e:	d902      	bls.n	801c896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801c890:	2303      	movs	r3, #3
 801c892:	74fb      	strb	r3, [r7, #19]
            break;
 801c894:	e006      	b.n	801c8a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c896:	4b0c      	ldr	r3, [pc, #48]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c89c:	f003 0302 	and.w	r3, r3, #2
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d0ec      	beq.n	801c87e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801c8a4:	7cfb      	ldrb	r3, [r7, #19]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d10b      	bne.n	801c8c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c8aa:	4b07      	ldr	r3, [pc, #28]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c8b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c8b8:	4903      	ldr	r1, [pc, #12]	; (801c8c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c8ba:	4313      	orrs	r3, r2
 801c8bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801c8c0:	e008      	b.n	801c8d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c8c2:	7cfb      	ldrb	r3, [r7, #19]
 801c8c4:	74bb      	strb	r3, [r7, #18]
 801c8c6:	e005      	b.n	801c8d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801c8c8:	40021000 	.word	0x40021000
 801c8cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c8d0:	7cfb      	ldrb	r3, [r7, #19]
 801c8d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c8d4:	7c7b      	ldrb	r3, [r7, #17]
 801c8d6:	2b01      	cmp	r3, #1
 801c8d8:	d105      	bne.n	801c8e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c8da:	4ba7      	ldr	r3, [pc, #668]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8de:	4aa6      	ldr	r2, [pc, #664]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c8e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c8e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	f003 0301 	and.w	r3, r3, #1
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d00a      	beq.n	801c908 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c8f2:	4ba1      	ldr	r3, [pc, #644]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c8f8:	f023 0203 	bic.w	r2, r3, #3
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	685b      	ldr	r3, [r3, #4]
 801c900:	499d      	ldr	r1, [pc, #628]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c902:	4313      	orrs	r3, r2
 801c904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	f003 0302 	and.w	r3, r3, #2
 801c910:	2b00      	cmp	r3, #0
 801c912:	d00a      	beq.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c914:	4b98      	ldr	r3, [pc, #608]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c91a:	f023 020c 	bic.w	r2, r3, #12
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	689b      	ldr	r3, [r3, #8]
 801c922:	4995      	ldr	r1, [pc, #596]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c924:	4313      	orrs	r3, r2
 801c926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	f003 0304 	and.w	r3, r3, #4
 801c932:	2b00      	cmp	r3, #0
 801c934:	d00a      	beq.n	801c94c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801c936:	4b90      	ldr	r3, [pc, #576]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c93c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	68db      	ldr	r3, [r3, #12]
 801c944:	498c      	ldr	r1, [pc, #560]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c946:	4313      	orrs	r3, r2
 801c948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	f003 0308 	and.w	r3, r3, #8
 801c954:	2b00      	cmp	r3, #0
 801c956:	d00a      	beq.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801c958:	4b87      	ldr	r3, [pc, #540]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c95e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	691b      	ldr	r3, [r3, #16]
 801c966:	4984      	ldr	r1, [pc, #528]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c968:	4313      	orrs	r3, r2
 801c96a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	f003 0310 	and.w	r3, r3, #16
 801c976:	2b00      	cmp	r3, #0
 801c978:	d00a      	beq.n	801c990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801c97a:	4b7f      	ldr	r3, [pc, #508]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	695b      	ldr	r3, [r3, #20]
 801c988:	497b      	ldr	r1, [pc, #492]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c98a:	4313      	orrs	r3, r2
 801c98c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	f003 0320 	and.w	r3, r3, #32
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d00a      	beq.n	801c9b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c99c:	4b76      	ldr	r3, [pc, #472]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c9a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	699b      	ldr	r3, [r3, #24]
 801c9aa:	4973      	ldr	r1, [pc, #460]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9ac:	4313      	orrs	r3, r2
 801c9ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d00a      	beq.n	801c9d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c9be:	4b6e      	ldr	r3, [pc, #440]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c9c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	69db      	ldr	r3, [r3, #28]
 801c9cc:	496a      	ldr	r1, [pc, #424]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9ce:	4313      	orrs	r3, r2
 801c9d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d00a      	beq.n	801c9f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801c9e0:	4b65      	ldr	r3, [pc, #404]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c9e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	6a1b      	ldr	r3, [r3, #32]
 801c9ee:	4962      	ldr	r1, [pc, #392]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9f0:	4313      	orrs	r3, r2
 801c9f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d00a      	beq.n	801ca18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801ca02:	4b5d      	ldr	r3, [pc, #372]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca10:	4959      	ldr	r1, [pc, #356]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca12:	4313      	orrs	r3, r2
 801ca14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d00a      	beq.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ca24:	4b54      	ldr	r3, [pc, #336]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca2a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca32:	4951      	ldr	r1, [pc, #324]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca34:	4313      	orrs	r3, r2
 801ca36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d015      	beq.n	801ca72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ca46:	4b4c      	ldr	r3, [pc, #304]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca54:	4948      	ldr	r1, [pc, #288]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca56:	4313      	orrs	r3, r2
 801ca58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ca64:	d105      	bne.n	801ca72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ca66:	4b44      	ldr	r3, [pc, #272]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca68:	68db      	ldr	r3, [r3, #12]
 801ca6a:	4a43      	ldr	r2, [pc, #268]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ca70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d015      	beq.n	801caaa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801ca7e:	4b3e      	ldr	r3, [pc, #248]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca8c:	493a      	ldr	r1, [pc, #232]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca8e:	4313      	orrs	r3, r2
 801ca90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ca9c:	d105      	bne.n	801caaa <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ca9e:	4b36      	ldr	r3, [pc, #216]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801caa0:	68db      	ldr	r3, [r3, #12]
 801caa2:	4a35      	ldr	r2, [pc, #212]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801caa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801caa8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d015      	beq.n	801cae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cab6:	4b30      	ldr	r3, [pc, #192]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cabc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cac4:	492c      	ldr	r1, [pc, #176]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cac6:	4313      	orrs	r3, r2
 801cac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cad4:	d105      	bne.n	801cae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cad6:	4b28      	ldr	r3, [pc, #160]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cad8:	68db      	ldr	r3, [r3, #12]
 801cada:	4a27      	ldr	r2, [pc, #156]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cadc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cae0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801caea:	2b00      	cmp	r3, #0
 801caec:	d015      	beq.n	801cb1a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801caee:	4b22      	ldr	r3, [pc, #136]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801caf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801caf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cafc:	491e      	ldr	r1, [pc, #120]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cafe:	4313      	orrs	r3, r2
 801cb00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cb0c:	d105      	bne.n	801cb1a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cb0e:	4b1a      	ldr	r3, [pc, #104]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb10:	68db      	ldr	r3, [r3, #12]
 801cb12:	4a19      	ldr	r2, [pc, #100]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cb18:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d015      	beq.n	801cb52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cb26:	4b14      	ldr	r3, [pc, #80]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cb34:	4910      	ldr	r1, [pc, #64]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb36:	4313      	orrs	r3, r2
 801cb38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cb40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cb44:	d105      	bne.n	801cb52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cb46:	4b0c      	ldr	r3, [pc, #48]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb48:	68db      	ldr	r3, [r3, #12]
 801cb4a:	4a0b      	ldr	r2, [pc, #44]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cb50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d018      	beq.n	801cb90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801cb5e:	4b06      	ldr	r3, [pc, #24]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb6c:	4902      	ldr	r1, [pc, #8]	; (801cb78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb6e:	4313      	orrs	r3, r2
 801cb70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	e001      	b.n	801cb7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801cb78:	40021000 	.word	0x40021000
 801cb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cb82:	d105      	bne.n	801cb90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801cb84:	4b21      	ldr	r3, [pc, #132]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cb86:	68db      	ldr	r3, [r3, #12]
 801cb88:	4a20      	ldr	r2, [pc, #128]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cb8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cb8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d015      	beq.n	801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801cb9c:	4b1b      	ldr	r3, [pc, #108]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cb9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cba2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbaa:	4918      	ldr	r1, [pc, #96]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cbac:	4313      	orrs	r3, r2
 801cbae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cbba:	d105      	bne.n	801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801cbbc:	4b13      	ldr	r3, [pc, #76]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cbbe:	68db      	ldr	r3, [r3, #12]
 801cbc0:	4a12      	ldr	r2, [pc, #72]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cbc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cbc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d015      	beq.n	801cc00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801cbd4:	4b0d      	ldr	r3, [pc, #52]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cbd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cbda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbe2:	490a      	ldr	r1, [pc, #40]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cbe4:	4313      	orrs	r3, r2
 801cbe6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cbf2:	d105      	bne.n	801cc00 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cbf4:	4b05      	ldr	r3, [pc, #20]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cbf6:	68db      	ldr	r3, [r3, #12]
 801cbf8:	4a04      	ldr	r2, [pc, #16]	; (801cc0c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cbfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cbfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801cc00:	7cbb      	ldrb	r3, [r7, #18]
}
 801cc02:	4618      	mov	r0, r3
 801cc04:	3718      	adds	r7, #24
 801cc06:	46bd      	mov	sp, r7
 801cc08:	bd80      	pop	{r7, pc}
 801cc0a:	bf00      	nop
 801cc0c:	40021000 	.word	0x40021000

0801cc10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801cc10:	b580      	push	{r7, lr}
 801cc12:	b084      	sub	sp, #16
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d101      	bne.n	801cc22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801cc1e:	2301      	movs	r3, #1
 801cc20:	e09d      	b.n	801cd5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d108      	bne.n	801cc3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	685b      	ldr	r3, [r3, #4]
 801cc2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc32:	d009      	beq.n	801cc48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2200      	movs	r2, #0
 801cc38:	61da      	str	r2, [r3, #28]
 801cc3a:	e005      	b.n	801cc48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	2200      	movs	r2, #0
 801cc40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	2200      	movs	r2, #0
 801cc46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801cc54:	b2db      	uxtb	r3, r3
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d106      	bne.n	801cc68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	2200      	movs	r2, #0
 801cc5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801cc62:	6878      	ldr	r0, [r7, #4]
 801cc64:	f7fa fa16 	bl	8017094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	2202      	movs	r2, #2
 801cc6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	681a      	ldr	r2, [r3, #0]
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	68db      	ldr	r3, [r3, #12]
 801cc84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cc88:	d902      	bls.n	801cc90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	60fb      	str	r3, [r7, #12]
 801cc8e:	e002      	b.n	801cc96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801cc90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801cc94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	68db      	ldr	r3, [r3, #12]
 801cc9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801cc9e:	d007      	beq.n	801ccb0 <HAL_SPI_Init+0xa0>
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	68db      	ldr	r3, [r3, #12]
 801cca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cca8:	d002      	beq.n	801ccb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	2200      	movs	r2, #0
 801ccae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	685b      	ldr	r3, [r3, #4]
 801ccb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	689b      	ldr	r3, [r3, #8]
 801ccbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801ccc0:	431a      	orrs	r2, r3
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	691b      	ldr	r3, [r3, #16]
 801ccc6:	f003 0302 	and.w	r3, r3, #2
 801ccca:	431a      	orrs	r2, r3
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	695b      	ldr	r3, [r3, #20]
 801ccd0:	f003 0301 	and.w	r3, r3, #1
 801ccd4:	431a      	orrs	r2, r3
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	699b      	ldr	r3, [r3, #24]
 801ccda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ccde:	431a      	orrs	r2, r3
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	69db      	ldr	r3, [r3, #28]
 801cce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801cce8:	431a      	orrs	r2, r3
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	6a1b      	ldr	r3, [r3, #32]
 801ccee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ccf2:	ea42 0103 	orr.w	r1, r2, r3
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	430a      	orrs	r2, r1
 801cd04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	699b      	ldr	r3, [r3, #24]
 801cd0a:	0c1b      	lsrs	r3, r3, #16
 801cd0c:	f003 0204 	and.w	r2, r3, #4
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd14:	f003 0310 	and.w	r3, r3, #16
 801cd18:	431a      	orrs	r2, r3
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd1e:	f003 0308 	and.w	r3, r3, #8
 801cd22:	431a      	orrs	r2, r3
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	68db      	ldr	r3, [r3, #12]
 801cd28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cd2c:	ea42 0103 	orr.w	r1, r2, r3
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	430a      	orrs	r2, r1
 801cd3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	69da      	ldr	r2, [r3, #28]
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801cd4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	2200      	movs	r2, #0
 801cd52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	2201      	movs	r2, #1
 801cd58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801cd5c:	2300      	movs	r3, #0
}
 801cd5e:	4618      	mov	r0, r3
 801cd60:	3710      	adds	r7, #16
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bd80      	pop	{r7, pc}

0801cd66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801cd66:	b580      	push	{r7, lr}
 801cd68:	b088      	sub	sp, #32
 801cd6a:	af00      	add	r7, sp, #0
 801cd6c:	60f8      	str	r0, [r7, #12]
 801cd6e:	60b9      	str	r1, [r7, #8]
 801cd70:	603b      	str	r3, [r7, #0]
 801cd72:	4613      	mov	r3, r2
 801cd74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801cd76:	2300      	movs	r3, #0
 801cd78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801cd80:	2b01      	cmp	r3, #1
 801cd82:	d101      	bne.n	801cd88 <HAL_SPI_Transmit+0x22>
 801cd84:	2302      	movs	r3, #2
 801cd86:	e158      	b.n	801d03a <HAL_SPI_Transmit+0x2d4>
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	2201      	movs	r2, #1
 801cd8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801cd90:	f7fb fd3e 	bl	8018810 <HAL_GetTick>
 801cd94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801cd96:	88fb      	ldrh	r3, [r7, #6]
 801cd98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801cd9a:	68fb      	ldr	r3, [r7, #12]
 801cd9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801cda0:	b2db      	uxtb	r3, r3
 801cda2:	2b01      	cmp	r3, #1
 801cda4:	d002      	beq.n	801cdac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801cda6:	2302      	movs	r3, #2
 801cda8:	77fb      	strb	r3, [r7, #31]
    goto error;
 801cdaa:	e13d      	b.n	801d028 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801cdac:	68bb      	ldr	r3, [r7, #8]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d002      	beq.n	801cdb8 <HAL_SPI_Transmit+0x52>
 801cdb2:	88fb      	ldrh	r3, [r7, #6]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d102      	bne.n	801cdbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801cdb8:	2301      	movs	r3, #1
 801cdba:	77fb      	strb	r3, [r7, #31]
    goto error;
 801cdbc:	e134      	b.n	801d028 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	2203      	movs	r2, #3
 801cdc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	2200      	movs	r2, #0
 801cdca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	68ba      	ldr	r2, [r7, #8]
 801cdd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	88fa      	ldrh	r2, [r7, #6]
 801cdd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801cdd8:	68fb      	ldr	r3, [r7, #12]
 801cdda:	88fa      	ldrh	r2, [r7, #6]
 801cddc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	2200      	movs	r2, #0
 801cde2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	2200      	movs	r2, #0
 801cde8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801cdec:	68fb      	ldr	r3, [r7, #12]
 801cdee:	2200      	movs	r2, #0
 801cdf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	2200      	movs	r2, #0
 801cdfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	689b      	ldr	r3, [r3, #8]
 801ce04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ce08:	d10f      	bne.n	801ce2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	681a      	ldr	r2, [r3, #0]
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ce18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	681a      	ldr	r2, [r3, #0]
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801ce28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ce34:	2b40      	cmp	r3, #64	; 0x40
 801ce36:	d007      	beq.n	801ce48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	681a      	ldr	r2, [r3, #0]
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ce46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	68db      	ldr	r3, [r3, #12]
 801ce4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ce50:	d94b      	bls.n	801ceea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	685b      	ldr	r3, [r3, #4]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d002      	beq.n	801ce60 <HAL_SPI_Transmit+0xfa>
 801ce5a:	8afb      	ldrh	r3, [r7, #22]
 801ce5c:	2b01      	cmp	r3, #1
 801ce5e:	d13e      	bne.n	801cede <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce64:	881a      	ldrh	r2, [r3, #0]
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce70:	1c9a      	adds	r2, r3, #2
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ce7a:	b29b      	uxth	r3, r3
 801ce7c:	3b01      	subs	r3, #1
 801ce7e:	b29a      	uxth	r2, r3
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801ce84:	e02b      	b.n	801cede <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	689b      	ldr	r3, [r3, #8]
 801ce8c:	f003 0302 	and.w	r3, r3, #2
 801ce90:	2b02      	cmp	r3, #2
 801ce92:	d112      	bne.n	801ceba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce98:	881a      	ldrh	r2, [r3, #0]
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cea0:	68fb      	ldr	r3, [r7, #12]
 801cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cea4:	1c9a      	adds	r2, r3, #2
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ceae:	b29b      	uxth	r3, r3
 801ceb0:	3b01      	subs	r3, #1
 801ceb2:	b29a      	uxth	r2, r3
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ceb8:	e011      	b.n	801cede <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801ceba:	f7fb fca9 	bl	8018810 <HAL_GetTick>
 801cebe:	4602      	mov	r2, r0
 801cec0:	69bb      	ldr	r3, [r7, #24]
 801cec2:	1ad3      	subs	r3, r2, r3
 801cec4:	683a      	ldr	r2, [r7, #0]
 801cec6:	429a      	cmp	r2, r3
 801cec8:	d803      	bhi.n	801ced2 <HAL_SPI_Transmit+0x16c>
 801ceca:	683b      	ldr	r3, [r7, #0]
 801cecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ced0:	d102      	bne.n	801ced8 <HAL_SPI_Transmit+0x172>
 801ced2:	683b      	ldr	r3, [r7, #0]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d102      	bne.n	801cede <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801ced8:	2303      	movs	r3, #3
 801ceda:	77fb      	strb	r3, [r7, #31]
          goto error;
 801cedc:	e0a4      	b.n	801d028 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cee2:	b29b      	uxth	r3, r3
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d1ce      	bne.n	801ce86 <HAL_SPI_Transmit+0x120>
 801cee8:	e07c      	b.n	801cfe4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	685b      	ldr	r3, [r3, #4]
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d002      	beq.n	801cef8 <HAL_SPI_Transmit+0x192>
 801cef2:	8afb      	ldrh	r3, [r7, #22]
 801cef4:	2b01      	cmp	r3, #1
 801cef6:	d170      	bne.n	801cfda <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cefc:	b29b      	uxth	r3, r3
 801cefe:	2b01      	cmp	r3, #1
 801cf00:	d912      	bls.n	801cf28 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf06:	881a      	ldrh	r2, [r3, #0]
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cf0e:	68fb      	ldr	r3, [r7, #12]
 801cf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf12:	1c9a      	adds	r2, r3, #2
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cf1c:	b29b      	uxth	r3, r3
 801cf1e:	3b02      	subs	r3, #2
 801cf20:	b29a      	uxth	r2, r3
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cf26:	e058      	b.n	801cfda <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	330c      	adds	r3, #12
 801cf32:	7812      	ldrb	r2, [r2, #0]
 801cf34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf3a:	1c5a      	adds	r2, r3, #1
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cf44:	b29b      	uxth	r3, r3
 801cf46:	3b01      	subs	r3, #1
 801cf48:	b29a      	uxth	r2, r3
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801cf4e:	e044      	b.n	801cfda <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	689b      	ldr	r3, [r3, #8]
 801cf56:	f003 0302 	and.w	r3, r3, #2
 801cf5a:	2b02      	cmp	r3, #2
 801cf5c:	d12b      	bne.n	801cfb6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cf62:	b29b      	uxth	r3, r3
 801cf64:	2b01      	cmp	r3, #1
 801cf66:	d912      	bls.n	801cf8e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf6c:	881a      	ldrh	r2, [r3, #0]
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf78:	1c9a      	adds	r2, r3, #2
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cf82:	b29b      	uxth	r3, r3
 801cf84:	3b02      	subs	r3, #2
 801cf86:	b29a      	uxth	r2, r3
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cf8c:	e025      	b.n	801cfda <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cf92:	68fb      	ldr	r3, [r7, #12]
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	330c      	adds	r3, #12
 801cf98:	7812      	ldrb	r2, [r2, #0]
 801cf9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfa0:	1c5a      	adds	r2, r3, #1
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801cfa6:	68fb      	ldr	r3, [r7, #12]
 801cfa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cfaa:	b29b      	uxth	r3, r3
 801cfac:	3b01      	subs	r3, #1
 801cfae:	b29a      	uxth	r2, r3
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cfb4:	e011      	b.n	801cfda <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801cfb6:	f7fb fc2b 	bl	8018810 <HAL_GetTick>
 801cfba:	4602      	mov	r2, r0
 801cfbc:	69bb      	ldr	r3, [r7, #24]
 801cfbe:	1ad3      	subs	r3, r2, r3
 801cfc0:	683a      	ldr	r2, [r7, #0]
 801cfc2:	429a      	cmp	r2, r3
 801cfc4:	d803      	bhi.n	801cfce <HAL_SPI_Transmit+0x268>
 801cfc6:	683b      	ldr	r3, [r7, #0]
 801cfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cfcc:	d102      	bne.n	801cfd4 <HAL_SPI_Transmit+0x26e>
 801cfce:	683b      	ldr	r3, [r7, #0]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d102      	bne.n	801cfda <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801cfd4:	2303      	movs	r3, #3
 801cfd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 801cfd8:	e026      	b.n	801d028 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cfde:	b29b      	uxth	r3, r3
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d1b5      	bne.n	801cf50 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801cfe4:	69ba      	ldr	r2, [r7, #24]
 801cfe6:	6839      	ldr	r1, [r7, #0]
 801cfe8:	68f8      	ldr	r0, [r7, #12]
 801cfea:	f000 fce3 	bl	801d9b4 <SPI_EndRxTxTransaction>
 801cfee:	4603      	mov	r3, r0
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d002      	beq.n	801cffa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	2220      	movs	r2, #32
 801cff8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801cffa:	68fb      	ldr	r3, [r7, #12]
 801cffc:	689b      	ldr	r3, [r3, #8]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d10a      	bne.n	801d018 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d002:	2300      	movs	r3, #0
 801d004:	613b      	str	r3, [r7, #16]
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	68db      	ldr	r3, [r3, #12]
 801d00c:	613b      	str	r3, [r7, #16]
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	689b      	ldr	r3, [r3, #8]
 801d014:	613b      	str	r3, [r7, #16]
 801d016:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d002      	beq.n	801d026 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d020:	2301      	movs	r3, #1
 801d022:	77fb      	strb	r3, [r7, #31]
 801d024:	e000      	b.n	801d028 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d026:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	2201      	movs	r2, #1
 801d02c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	2200      	movs	r2, #0
 801d034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d038:	7ffb      	ldrb	r3, [r7, #31]
}
 801d03a:	4618      	mov	r0, r3
 801d03c:	3720      	adds	r7, #32
 801d03e:	46bd      	mov	sp, r7
 801d040:	bd80      	pop	{r7, pc}

0801d042 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d042:	b580      	push	{r7, lr}
 801d044:	b088      	sub	sp, #32
 801d046:	af02      	add	r7, sp, #8
 801d048:	60f8      	str	r0, [r7, #12]
 801d04a:	60b9      	str	r1, [r7, #8]
 801d04c:	603b      	str	r3, [r7, #0]
 801d04e:	4613      	mov	r3, r2
 801d050:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d052:	2300      	movs	r3, #0
 801d054:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	685b      	ldr	r3, [r3, #4]
 801d05a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d05e:	d112      	bne.n	801d086 <HAL_SPI_Receive+0x44>
 801d060:	68fb      	ldr	r3, [r7, #12]
 801d062:	689b      	ldr	r3, [r3, #8]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d10e      	bne.n	801d086 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	2204      	movs	r2, #4
 801d06c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d070:	88fa      	ldrh	r2, [r7, #6]
 801d072:	683b      	ldr	r3, [r7, #0]
 801d074:	9300      	str	r3, [sp, #0]
 801d076:	4613      	mov	r3, r2
 801d078:	68ba      	ldr	r2, [r7, #8]
 801d07a:	68b9      	ldr	r1, [r7, #8]
 801d07c:	68f8      	ldr	r0, [r7, #12]
 801d07e:	f000 f910 	bl	801d2a2 <HAL_SPI_TransmitReceive>
 801d082:	4603      	mov	r3, r0
 801d084:	e109      	b.n	801d29a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d08c:	2b01      	cmp	r3, #1
 801d08e:	d101      	bne.n	801d094 <HAL_SPI_Receive+0x52>
 801d090:	2302      	movs	r3, #2
 801d092:	e102      	b.n	801d29a <HAL_SPI_Receive+0x258>
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	2201      	movs	r2, #1
 801d098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d09c:	f7fb fbb8 	bl	8018810 <HAL_GetTick>
 801d0a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d0a8:	b2db      	uxtb	r3, r3
 801d0aa:	2b01      	cmp	r3, #1
 801d0ac:	d002      	beq.n	801d0b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d0ae:	2302      	movs	r3, #2
 801d0b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d0b2:	e0e9      	b.n	801d288 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d0b4:	68bb      	ldr	r3, [r7, #8]
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d002      	beq.n	801d0c0 <HAL_SPI_Receive+0x7e>
 801d0ba:	88fb      	ldrh	r3, [r7, #6]
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d102      	bne.n	801d0c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d0c0:	2301      	movs	r3, #1
 801d0c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d0c4:	e0e0      	b.n	801d288 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d0c6:	68fb      	ldr	r3, [r7, #12]
 801d0c8:	2204      	movs	r2, #4
 801d0ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	2200      	movs	r2, #0
 801d0d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d0d4:	68fb      	ldr	r3, [r7, #12]
 801d0d6:	68ba      	ldr	r2, [r7, #8]
 801d0d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d0da:	68fb      	ldr	r3, [r7, #12]
 801d0dc:	88fa      	ldrh	r2, [r7, #6]
 801d0de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	88fa      	ldrh	r2, [r7, #6]
 801d0e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	2200      	movs	r2, #0
 801d0ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	2200      	movs	r2, #0
 801d0fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	2200      	movs	r2, #0
 801d100:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	2200      	movs	r2, #0
 801d106:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	68db      	ldr	r3, [r3, #12]
 801d10c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d110:	d908      	bls.n	801d124 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	685a      	ldr	r2, [r3, #4]
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d120:	605a      	str	r2, [r3, #4]
 801d122:	e007      	b.n	801d134 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	685a      	ldr	r2, [r3, #4]
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d132:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	689b      	ldr	r3, [r3, #8]
 801d138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d13c:	d10f      	bne.n	801d15e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d13e:	68fb      	ldr	r3, [r7, #12]
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	681a      	ldr	r2, [r3, #0]
 801d144:	68fb      	ldr	r3, [r7, #12]
 801d146:	681b      	ldr	r3, [r3, #0]
 801d148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d14c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	681b      	ldr	r3, [r3, #0]
 801d152:	681a      	ldr	r2, [r3, #0]
 801d154:	68fb      	ldr	r3, [r7, #12]
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d15c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d168:	2b40      	cmp	r3, #64	; 0x40
 801d16a:	d007      	beq.n	801d17c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	681a      	ldr	r2, [r3, #0]
 801d172:	68fb      	ldr	r3, [r7, #12]
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d17a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	68db      	ldr	r3, [r3, #12]
 801d180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d184:	d867      	bhi.n	801d256 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d186:	e030      	b.n	801d1ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	689b      	ldr	r3, [r3, #8]
 801d18e:	f003 0301 	and.w	r3, r3, #1
 801d192:	2b01      	cmp	r3, #1
 801d194:	d117      	bne.n	801d1c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	f103 020c 	add.w	r2, r3, #12
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d1a2:	7812      	ldrb	r2, [r2, #0]
 801d1a4:	b2d2      	uxtb	r2, r2
 801d1a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d1ac:	1c5a      	adds	r2, r3, #1
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d1b8:	b29b      	uxth	r3, r3
 801d1ba:	3b01      	subs	r3, #1
 801d1bc:	b29a      	uxth	r2, r3
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d1c4:	e011      	b.n	801d1ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d1c6:	f7fb fb23 	bl	8018810 <HAL_GetTick>
 801d1ca:	4602      	mov	r2, r0
 801d1cc:	693b      	ldr	r3, [r7, #16]
 801d1ce:	1ad3      	subs	r3, r2, r3
 801d1d0:	683a      	ldr	r2, [r7, #0]
 801d1d2:	429a      	cmp	r2, r3
 801d1d4:	d803      	bhi.n	801d1de <HAL_SPI_Receive+0x19c>
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d1dc:	d102      	bne.n	801d1e4 <HAL_SPI_Receive+0x1a2>
 801d1de:	683b      	ldr	r3, [r7, #0]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d102      	bne.n	801d1ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d1e4:	2303      	movs	r3, #3
 801d1e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d1e8:	e04e      	b.n	801d288 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d1f0:	b29b      	uxth	r3, r3
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d1c8      	bne.n	801d188 <HAL_SPI_Receive+0x146>
 801d1f6:	e034      	b.n	801d262 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	689b      	ldr	r3, [r3, #8]
 801d1fe:	f003 0301 	and.w	r3, r3, #1
 801d202:	2b01      	cmp	r3, #1
 801d204:	d115      	bne.n	801d232 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	68da      	ldr	r2, [r3, #12]
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d210:	b292      	uxth	r2, r2
 801d212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d218:	1c9a      	adds	r2, r3, #2
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d224:	b29b      	uxth	r3, r3
 801d226:	3b01      	subs	r3, #1
 801d228:	b29a      	uxth	r2, r3
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d230:	e011      	b.n	801d256 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d232:	f7fb faed 	bl	8018810 <HAL_GetTick>
 801d236:	4602      	mov	r2, r0
 801d238:	693b      	ldr	r3, [r7, #16]
 801d23a:	1ad3      	subs	r3, r2, r3
 801d23c:	683a      	ldr	r2, [r7, #0]
 801d23e:	429a      	cmp	r2, r3
 801d240:	d803      	bhi.n	801d24a <HAL_SPI_Receive+0x208>
 801d242:	683b      	ldr	r3, [r7, #0]
 801d244:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d248:	d102      	bne.n	801d250 <HAL_SPI_Receive+0x20e>
 801d24a:	683b      	ldr	r3, [r7, #0]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d102      	bne.n	801d256 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d250:	2303      	movs	r3, #3
 801d252:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d254:	e018      	b.n	801d288 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d25c:	b29b      	uxth	r3, r3
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d1ca      	bne.n	801d1f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d262:	693a      	ldr	r2, [r7, #16]
 801d264:	6839      	ldr	r1, [r7, #0]
 801d266:	68f8      	ldr	r0, [r7, #12]
 801d268:	f000 fb4c 	bl	801d904 <SPI_EndRxTransaction>
 801d26c:	4603      	mov	r3, r0
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d002      	beq.n	801d278 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	2220      	movs	r2, #32
 801d276:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d002      	beq.n	801d286 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d280:	2301      	movs	r3, #1
 801d282:	75fb      	strb	r3, [r7, #23]
 801d284:	e000      	b.n	801d288 <HAL_SPI_Receive+0x246>
  }

error :
 801d286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	2201      	movs	r2, #1
 801d28c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	2200      	movs	r2, #0
 801d294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d298:	7dfb      	ldrb	r3, [r7, #23]
}
 801d29a:	4618      	mov	r0, r3
 801d29c:	3718      	adds	r7, #24
 801d29e:	46bd      	mov	sp, r7
 801d2a0:	bd80      	pop	{r7, pc}

0801d2a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d2a2:	b580      	push	{r7, lr}
 801d2a4:	b08a      	sub	sp, #40	; 0x28
 801d2a6:	af00      	add	r7, sp, #0
 801d2a8:	60f8      	str	r0, [r7, #12]
 801d2aa:	60b9      	str	r1, [r7, #8]
 801d2ac:	607a      	str	r2, [r7, #4]
 801d2ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d2b0:	2301      	movs	r3, #1
 801d2b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d2c0:	2b01      	cmp	r3, #1
 801d2c2:	d101      	bne.n	801d2c8 <HAL_SPI_TransmitReceive+0x26>
 801d2c4:	2302      	movs	r3, #2
 801d2c6:	e1fb      	b.n	801d6c0 <HAL_SPI_TransmitReceive+0x41e>
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	2201      	movs	r2, #1
 801d2cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d2d0:	f7fb fa9e 	bl	8018810 <HAL_GetTick>
 801d2d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d2dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	685b      	ldr	r3, [r3, #4]
 801d2e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d2e4:	887b      	ldrh	r3, [r7, #2]
 801d2e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d2e8:	887b      	ldrh	r3, [r7, #2]
 801d2ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d2ec:	7efb      	ldrb	r3, [r7, #27]
 801d2ee:	2b01      	cmp	r3, #1
 801d2f0:	d00e      	beq.n	801d310 <HAL_SPI_TransmitReceive+0x6e>
 801d2f2:	697b      	ldr	r3, [r7, #20]
 801d2f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d2f8:	d106      	bne.n	801d308 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	689b      	ldr	r3, [r3, #8]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d102      	bne.n	801d308 <HAL_SPI_TransmitReceive+0x66>
 801d302:	7efb      	ldrb	r3, [r7, #27]
 801d304:	2b04      	cmp	r3, #4
 801d306:	d003      	beq.n	801d310 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d308:	2302      	movs	r3, #2
 801d30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d30e:	e1cd      	b.n	801d6ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d310:	68bb      	ldr	r3, [r7, #8]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d005      	beq.n	801d322 <HAL_SPI_TransmitReceive+0x80>
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d002      	beq.n	801d322 <HAL_SPI_TransmitReceive+0x80>
 801d31c:	887b      	ldrh	r3, [r7, #2]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d103      	bne.n	801d32a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d322:	2301      	movs	r3, #1
 801d324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d328:	e1c0      	b.n	801d6ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d330:	b2db      	uxtb	r3, r3
 801d332:	2b04      	cmp	r3, #4
 801d334:	d003      	beq.n	801d33e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	2205      	movs	r2, #5
 801d33a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	2200      	movs	r2, #0
 801d342:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	687a      	ldr	r2, [r7, #4]
 801d348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	887a      	ldrh	r2, [r7, #2]
 801d34e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	887a      	ldrh	r2, [r7, #2]
 801d356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	68ba      	ldr	r2, [r7, #8]
 801d35e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	887a      	ldrh	r2, [r7, #2]
 801d364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	887a      	ldrh	r2, [r7, #2]
 801d36a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	2200      	movs	r2, #0
 801d370:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	2200      	movs	r2, #0
 801d376:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	68db      	ldr	r3, [r3, #12]
 801d37c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d380:	d802      	bhi.n	801d388 <HAL_SPI_TransmitReceive+0xe6>
 801d382:	8a3b      	ldrh	r3, [r7, #16]
 801d384:	2b01      	cmp	r3, #1
 801d386:	d908      	bls.n	801d39a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	685a      	ldr	r2, [r3, #4]
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d396:	605a      	str	r2, [r3, #4]
 801d398:	e007      	b.n	801d3aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	685a      	ldr	r2, [r3, #4]
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d3a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3b4:	2b40      	cmp	r3, #64	; 0x40
 801d3b6:	d007      	beq.n	801d3c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	681a      	ldr	r2, [r3, #0]
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d3c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	68db      	ldr	r3, [r3, #12]
 801d3cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d3d0:	d97c      	bls.n	801d4cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	685b      	ldr	r3, [r3, #4]
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	d002      	beq.n	801d3e0 <HAL_SPI_TransmitReceive+0x13e>
 801d3da:	8a7b      	ldrh	r3, [r7, #18]
 801d3dc:	2b01      	cmp	r3, #1
 801d3de:	d169      	bne.n	801d4b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3e4:	881a      	ldrh	r2, [r3, #0]
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3f0:	1c9a      	adds	r2, r3, #2
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d3fa:	b29b      	uxth	r3, r3
 801d3fc:	3b01      	subs	r3, #1
 801d3fe:	b29a      	uxth	r2, r3
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d404:	e056      	b.n	801d4b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	689b      	ldr	r3, [r3, #8]
 801d40c:	f003 0302 	and.w	r3, r3, #2
 801d410:	2b02      	cmp	r3, #2
 801d412:	d11b      	bne.n	801d44c <HAL_SPI_TransmitReceive+0x1aa>
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d418:	b29b      	uxth	r3, r3
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d016      	beq.n	801d44c <HAL_SPI_TransmitReceive+0x1aa>
 801d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d420:	2b01      	cmp	r3, #1
 801d422:	d113      	bne.n	801d44c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d428:	881a      	ldrh	r2, [r3, #0]
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d434:	1c9a      	adds	r2, r3, #2
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d43e:	b29b      	uxth	r3, r3
 801d440:	3b01      	subs	r3, #1
 801d442:	b29a      	uxth	r2, r3
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d448:	2300      	movs	r3, #0
 801d44a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	689b      	ldr	r3, [r3, #8]
 801d452:	f003 0301 	and.w	r3, r3, #1
 801d456:	2b01      	cmp	r3, #1
 801d458:	d11c      	bne.n	801d494 <HAL_SPI_TransmitReceive+0x1f2>
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d460:	b29b      	uxth	r3, r3
 801d462:	2b00      	cmp	r3, #0
 801d464:	d016      	beq.n	801d494 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	68da      	ldr	r2, [r3, #12]
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d470:	b292      	uxth	r2, r2
 801d472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d478:	1c9a      	adds	r2, r3, #2
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d484:	b29b      	uxth	r3, r3
 801d486:	3b01      	subs	r3, #1
 801d488:	b29a      	uxth	r2, r3
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d490:	2301      	movs	r3, #1
 801d492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801d494:	f7fb f9bc 	bl	8018810 <HAL_GetTick>
 801d498:	4602      	mov	r2, r0
 801d49a:	69fb      	ldr	r3, [r7, #28]
 801d49c:	1ad3      	subs	r3, r2, r3
 801d49e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d4a0:	429a      	cmp	r2, r3
 801d4a2:	d807      	bhi.n	801d4b4 <HAL_SPI_TransmitReceive+0x212>
 801d4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4aa:	d003      	beq.n	801d4b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801d4ac:	2303      	movs	r3, #3
 801d4ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d4b2:	e0fb      	b.n	801d6ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4b8:	b29b      	uxth	r3, r3
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d1a3      	bne.n	801d406 <HAL_SPI_TransmitReceive+0x164>
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d4c4:	b29b      	uxth	r3, r3
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d19d      	bne.n	801d406 <HAL_SPI_TransmitReceive+0x164>
 801d4ca:	e0df      	b.n	801d68c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	685b      	ldr	r3, [r3, #4]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d003      	beq.n	801d4dc <HAL_SPI_TransmitReceive+0x23a>
 801d4d4:	8a7b      	ldrh	r3, [r7, #18]
 801d4d6:	2b01      	cmp	r3, #1
 801d4d8:	f040 80cb 	bne.w	801d672 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4e0:	b29b      	uxth	r3, r3
 801d4e2:	2b01      	cmp	r3, #1
 801d4e4:	d912      	bls.n	801d50c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d4e6:	68fb      	ldr	r3, [r7, #12]
 801d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4ea:	881a      	ldrh	r2, [r3, #0]
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4f6:	1c9a      	adds	r2, r3, #2
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d500:	b29b      	uxth	r3, r3
 801d502:	3b02      	subs	r3, #2
 801d504:	b29a      	uxth	r2, r3
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d50a:	e0b2      	b.n	801d672 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	330c      	adds	r3, #12
 801d516:	7812      	ldrb	r2, [r2, #0]
 801d518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d51e:	1c5a      	adds	r2, r3, #1
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d528:	b29b      	uxth	r3, r3
 801d52a:	3b01      	subs	r3, #1
 801d52c:	b29a      	uxth	r2, r3
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d532:	e09e      	b.n	801d672 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	689b      	ldr	r3, [r3, #8]
 801d53a:	f003 0302 	and.w	r3, r3, #2
 801d53e:	2b02      	cmp	r3, #2
 801d540:	d134      	bne.n	801d5ac <HAL_SPI_TransmitReceive+0x30a>
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d546:	b29b      	uxth	r3, r3
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d02f      	beq.n	801d5ac <HAL_SPI_TransmitReceive+0x30a>
 801d54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d54e:	2b01      	cmp	r3, #1
 801d550:	d12c      	bne.n	801d5ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d556:	b29b      	uxth	r3, r3
 801d558:	2b01      	cmp	r3, #1
 801d55a:	d912      	bls.n	801d582 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d560:	881a      	ldrh	r2, [r3, #0]
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d56c:	1c9a      	adds	r2, r3, #2
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d576:	b29b      	uxth	r3, r3
 801d578:	3b02      	subs	r3, #2
 801d57a:	b29a      	uxth	r2, r3
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d580:	e012      	b.n	801d5a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	681b      	ldr	r3, [r3, #0]
 801d58a:	330c      	adds	r3, #12
 801d58c:	7812      	ldrb	r2, [r2, #0]
 801d58e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d590:	68fb      	ldr	r3, [r7, #12]
 801d592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d594:	1c5a      	adds	r2, r3, #1
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d59e:	b29b      	uxth	r3, r3
 801d5a0:	3b01      	subs	r3, #1
 801d5a2:	b29a      	uxth	r2, r3
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	689b      	ldr	r3, [r3, #8]
 801d5b2:	f003 0301 	and.w	r3, r3, #1
 801d5b6:	2b01      	cmp	r3, #1
 801d5b8:	d148      	bne.n	801d64c <HAL_SPI_TransmitReceive+0x3aa>
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d042      	beq.n	801d64c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d5cc:	b29b      	uxth	r3, r3
 801d5ce:	2b01      	cmp	r3, #1
 801d5d0:	d923      	bls.n	801d61a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	68da      	ldr	r2, [r3, #12]
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5dc:	b292      	uxth	r2, r2
 801d5de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5e4:	1c9a      	adds	r2, r3, #2
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d5f0:	b29b      	uxth	r3, r3
 801d5f2:	3b02      	subs	r3, #2
 801d5f4:	b29a      	uxth	r2, r3
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d602:	b29b      	uxth	r3, r3
 801d604:	2b01      	cmp	r3, #1
 801d606:	d81f      	bhi.n	801d648 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d608:	68fb      	ldr	r3, [r7, #12]
 801d60a:	681b      	ldr	r3, [r3, #0]
 801d60c:	685a      	ldr	r2, [r3, #4]
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d616:	605a      	str	r2, [r3, #4]
 801d618:	e016      	b.n	801d648 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	f103 020c 	add.w	r2, r3, #12
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d626:	7812      	ldrb	r2, [r2, #0]
 801d628:	b2d2      	uxtb	r2, r2
 801d62a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d630:	1c5a      	adds	r2, r3, #1
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d63c:	b29b      	uxth	r3, r3
 801d63e:	3b01      	subs	r3, #1
 801d640:	b29a      	uxth	r2, r3
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d648:	2301      	movs	r3, #1
 801d64a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801d64c:	f7fb f8e0 	bl	8018810 <HAL_GetTick>
 801d650:	4602      	mov	r2, r0
 801d652:	69fb      	ldr	r3, [r7, #28]
 801d654:	1ad3      	subs	r3, r2, r3
 801d656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d658:	429a      	cmp	r2, r3
 801d65a:	d803      	bhi.n	801d664 <HAL_SPI_TransmitReceive+0x3c2>
 801d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d662:	d102      	bne.n	801d66a <HAL_SPI_TransmitReceive+0x3c8>
 801d664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d666:	2b00      	cmp	r3, #0
 801d668:	d103      	bne.n	801d672 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801d66a:	2303      	movs	r3, #3
 801d66c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d670:	e01c      	b.n	801d6ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d676:	b29b      	uxth	r3, r3
 801d678:	2b00      	cmp	r3, #0
 801d67a:	f47f af5b 	bne.w	801d534 <HAL_SPI_TransmitReceive+0x292>
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d684:	b29b      	uxth	r3, r3
 801d686:	2b00      	cmp	r3, #0
 801d688:	f47f af54 	bne.w	801d534 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d68c:	69fa      	ldr	r2, [r7, #28]
 801d68e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d690:	68f8      	ldr	r0, [r7, #12]
 801d692:	f000 f98f 	bl	801d9b4 <SPI_EndRxTxTransaction>
 801d696:	4603      	mov	r3, r0
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d006      	beq.n	801d6aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801d69c:	2301      	movs	r3, #1
 801d69e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	2220      	movs	r2, #32
 801d6a6:	661a      	str	r2, [r3, #96]	; 0x60
 801d6a8:	e000      	b.n	801d6ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801d6aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d6ac:	68fb      	ldr	r3, [r7, #12]
 801d6ae:	2201      	movs	r2, #1
 801d6b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	2200      	movs	r2, #0
 801d6b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d6bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	3728      	adds	r7, #40	; 0x28
 801d6c4:	46bd      	mov	sp, r7
 801d6c6:	bd80      	pop	{r7, pc}

0801d6c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	b088      	sub	sp, #32
 801d6cc:	af00      	add	r7, sp, #0
 801d6ce:	60f8      	str	r0, [r7, #12]
 801d6d0:	60b9      	str	r1, [r7, #8]
 801d6d2:	603b      	str	r3, [r7, #0]
 801d6d4:	4613      	mov	r3, r2
 801d6d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801d6d8:	f7fb f89a 	bl	8018810 <HAL_GetTick>
 801d6dc:	4602      	mov	r2, r0
 801d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6e0:	1a9b      	subs	r3, r3, r2
 801d6e2:	683a      	ldr	r2, [r7, #0]
 801d6e4:	4413      	add	r3, r2
 801d6e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801d6e8:	f7fb f892 	bl	8018810 <HAL_GetTick>
 801d6ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801d6ee:	4b39      	ldr	r3, [pc, #228]	; (801d7d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	015b      	lsls	r3, r3, #5
 801d6f4:	0d1b      	lsrs	r3, r3, #20
 801d6f6:	69fa      	ldr	r2, [r7, #28]
 801d6f8:	fb02 f303 	mul.w	r3, r2, r3
 801d6fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d6fe:	e054      	b.n	801d7aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801d700:	683b      	ldr	r3, [r7, #0]
 801d702:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d706:	d050      	beq.n	801d7aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d708:	f7fb f882 	bl	8018810 <HAL_GetTick>
 801d70c:	4602      	mov	r2, r0
 801d70e:	69bb      	ldr	r3, [r7, #24]
 801d710:	1ad3      	subs	r3, r2, r3
 801d712:	69fa      	ldr	r2, [r7, #28]
 801d714:	429a      	cmp	r2, r3
 801d716:	d902      	bls.n	801d71e <SPI_WaitFlagStateUntilTimeout+0x56>
 801d718:	69fb      	ldr	r3, [r7, #28]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d13d      	bne.n	801d79a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	685a      	ldr	r2, [r3, #4]
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d72c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	685b      	ldr	r3, [r3, #4]
 801d732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d736:	d111      	bne.n	801d75c <SPI_WaitFlagStateUntilTimeout+0x94>
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	689b      	ldr	r3, [r3, #8]
 801d73c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d740:	d004      	beq.n	801d74c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	689b      	ldr	r3, [r3, #8]
 801d746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d74a:	d107      	bne.n	801d75c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	681a      	ldr	r2, [r3, #0]
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d75a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d764:	d10f      	bne.n	801d786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	681a      	ldr	r2, [r3, #0]
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d774:	601a      	str	r2, [r3, #0]
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	681a      	ldr	r2, [r3, #0]
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	2201      	movs	r2, #1
 801d78a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	2200      	movs	r2, #0
 801d792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801d796:	2303      	movs	r3, #3
 801d798:	e017      	b.n	801d7ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801d79a:	697b      	ldr	r3, [r7, #20]
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d101      	bne.n	801d7a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801d7a4:	697b      	ldr	r3, [r7, #20]
 801d7a6:	3b01      	subs	r3, #1
 801d7a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	689a      	ldr	r2, [r3, #8]
 801d7b0:	68bb      	ldr	r3, [r7, #8]
 801d7b2:	4013      	ands	r3, r2
 801d7b4:	68ba      	ldr	r2, [r7, #8]
 801d7b6:	429a      	cmp	r2, r3
 801d7b8:	bf0c      	ite	eq
 801d7ba:	2301      	moveq	r3, #1
 801d7bc:	2300      	movne	r3, #0
 801d7be:	b2db      	uxtb	r3, r3
 801d7c0:	461a      	mov	r2, r3
 801d7c2:	79fb      	ldrb	r3, [r7, #7]
 801d7c4:	429a      	cmp	r2, r3
 801d7c6:	d19b      	bne.n	801d700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801d7c8:	2300      	movs	r3, #0
}
 801d7ca:	4618      	mov	r0, r3
 801d7cc:	3720      	adds	r7, #32
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	bd80      	pop	{r7, pc}
 801d7d2:	bf00      	nop
 801d7d4:	20000000 	.word	0x20000000

0801d7d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	b08a      	sub	sp, #40	; 0x28
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	60f8      	str	r0, [r7, #12]
 801d7e0:	60b9      	str	r1, [r7, #8]
 801d7e2:	607a      	str	r2, [r7, #4]
 801d7e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801d7ea:	f7fb f811 	bl	8018810 <HAL_GetTick>
 801d7ee:	4602      	mov	r2, r0
 801d7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7f2:	1a9b      	subs	r3, r3, r2
 801d7f4:	683a      	ldr	r2, [r7, #0]
 801d7f6:	4413      	add	r3, r2
 801d7f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801d7fa:	f7fb f809 	bl	8018810 <HAL_GetTick>
 801d7fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	330c      	adds	r3, #12
 801d806:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801d808:	4b3d      	ldr	r3, [pc, #244]	; (801d900 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801d80a:	681a      	ldr	r2, [r3, #0]
 801d80c:	4613      	mov	r3, r2
 801d80e:	009b      	lsls	r3, r3, #2
 801d810:	4413      	add	r3, r2
 801d812:	00da      	lsls	r2, r3, #3
 801d814:	1ad3      	subs	r3, r2, r3
 801d816:	0d1b      	lsrs	r3, r3, #20
 801d818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d81a:	fb02 f303 	mul.w	r3, r2, r3
 801d81e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801d820:	e060      	b.n	801d8e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801d822:	68bb      	ldr	r3, [r7, #8]
 801d824:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801d828:	d107      	bne.n	801d83a <SPI_WaitFifoStateUntilTimeout+0x62>
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d104      	bne.n	801d83a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801d830:	69fb      	ldr	r3, [r7, #28]
 801d832:	781b      	ldrb	r3, [r3, #0]
 801d834:	b2db      	uxtb	r3, r3
 801d836:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801d838:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801d83a:	683b      	ldr	r3, [r7, #0]
 801d83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d840:	d050      	beq.n	801d8e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d842:	f7fa ffe5 	bl	8018810 <HAL_GetTick>
 801d846:	4602      	mov	r2, r0
 801d848:	6a3b      	ldr	r3, [r7, #32]
 801d84a:	1ad3      	subs	r3, r2, r3
 801d84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d84e:	429a      	cmp	r2, r3
 801d850:	d902      	bls.n	801d858 <SPI_WaitFifoStateUntilTimeout+0x80>
 801d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d854:	2b00      	cmp	r3, #0
 801d856:	d13d      	bne.n	801d8d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	685a      	ldr	r2, [r3, #4]
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d866:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	685b      	ldr	r3, [r3, #4]
 801d86c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d870:	d111      	bne.n	801d896 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	689b      	ldr	r3, [r3, #8]
 801d876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d87a:	d004      	beq.n	801d886 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	689b      	ldr	r3, [r3, #8]
 801d880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d884:	d107      	bne.n	801d896 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d886:	68fb      	ldr	r3, [r7, #12]
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	681a      	ldr	r2, [r3, #0]
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d894:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d89a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d89e:	d10f      	bne.n	801d8c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	681a      	ldr	r2, [r3, #0]
 801d8a6:	68fb      	ldr	r3, [r7, #12]
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d8ae:	601a      	str	r2, [r3, #0]
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	681a      	ldr	r2, [r3, #0]
 801d8b6:	68fb      	ldr	r3, [r7, #12]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d8be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	2201      	movs	r2, #1
 801d8c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801d8d0:	2303      	movs	r3, #3
 801d8d2:	e010      	b.n	801d8f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801d8d4:	69bb      	ldr	r3, [r7, #24]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d101      	bne.n	801d8de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801d8da:	2300      	movs	r3, #0
 801d8dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801d8de:	69bb      	ldr	r3, [r7, #24]
 801d8e0:	3b01      	subs	r3, #1
 801d8e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	689a      	ldr	r2, [r3, #8]
 801d8ea:	68bb      	ldr	r3, [r7, #8]
 801d8ec:	4013      	ands	r3, r2
 801d8ee:	687a      	ldr	r2, [r7, #4]
 801d8f0:	429a      	cmp	r2, r3
 801d8f2:	d196      	bne.n	801d822 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801d8f4:	2300      	movs	r3, #0
}
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	3728      	adds	r7, #40	; 0x28
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	bd80      	pop	{r7, pc}
 801d8fe:	bf00      	nop
 801d900:	20000000 	.word	0x20000000

0801d904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b086      	sub	sp, #24
 801d908:	af02      	add	r7, sp, #8
 801d90a:	60f8      	str	r0, [r7, #12]
 801d90c:	60b9      	str	r1, [r7, #8]
 801d90e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	685b      	ldr	r3, [r3, #4]
 801d914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d918:	d111      	bne.n	801d93e <SPI_EndRxTransaction+0x3a>
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	689b      	ldr	r3, [r3, #8]
 801d91e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d922:	d004      	beq.n	801d92e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	689b      	ldr	r3, [r3, #8]
 801d928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d92c:	d107      	bne.n	801d93e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	681a      	ldr	r2, [r3, #0]
 801d934:	68fb      	ldr	r3, [r7, #12]
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d93c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	9300      	str	r3, [sp, #0]
 801d942:	68bb      	ldr	r3, [r7, #8]
 801d944:	2200      	movs	r2, #0
 801d946:	2180      	movs	r1, #128	; 0x80
 801d948:	68f8      	ldr	r0, [r7, #12]
 801d94a:	f7ff febd 	bl	801d6c8 <SPI_WaitFlagStateUntilTimeout>
 801d94e:	4603      	mov	r3, r0
 801d950:	2b00      	cmp	r3, #0
 801d952:	d007      	beq.n	801d964 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d954:	68fb      	ldr	r3, [r7, #12]
 801d956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d958:	f043 0220 	orr.w	r2, r3, #32
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801d960:	2303      	movs	r3, #3
 801d962:	e023      	b.n	801d9ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	685b      	ldr	r3, [r3, #4]
 801d968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d96c:	d11d      	bne.n	801d9aa <SPI_EndRxTransaction+0xa6>
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	689b      	ldr	r3, [r3, #8]
 801d972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d976:	d004      	beq.n	801d982 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	689b      	ldr	r3, [r3, #8]
 801d97c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d980:	d113      	bne.n	801d9aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	9300      	str	r3, [sp, #0]
 801d986:	68bb      	ldr	r3, [r7, #8]
 801d988:	2200      	movs	r2, #0
 801d98a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801d98e:	68f8      	ldr	r0, [r7, #12]
 801d990:	f7ff ff22 	bl	801d7d8 <SPI_WaitFifoStateUntilTimeout>
 801d994:	4603      	mov	r3, r0
 801d996:	2b00      	cmp	r3, #0
 801d998:	d007      	beq.n	801d9aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d99e:	f043 0220 	orr.w	r2, r3, #32
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801d9a6:	2303      	movs	r3, #3
 801d9a8:	e000      	b.n	801d9ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801d9aa:	2300      	movs	r3, #0
}
 801d9ac:	4618      	mov	r0, r3
 801d9ae:	3710      	adds	r7, #16
 801d9b0:	46bd      	mov	sp, r7
 801d9b2:	bd80      	pop	{r7, pc}

0801d9b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b086      	sub	sp, #24
 801d9b8:	af02      	add	r7, sp, #8
 801d9ba:	60f8      	str	r0, [r7, #12]
 801d9bc:	60b9      	str	r1, [r7, #8]
 801d9be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	9300      	str	r3, [sp, #0]
 801d9c4:	68bb      	ldr	r3, [r7, #8]
 801d9c6:	2200      	movs	r2, #0
 801d9c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801d9cc:	68f8      	ldr	r0, [r7, #12]
 801d9ce:	f7ff ff03 	bl	801d7d8 <SPI_WaitFifoStateUntilTimeout>
 801d9d2:	4603      	mov	r3, r0
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d007      	beq.n	801d9e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d9dc:	f043 0220 	orr.w	r2, r3, #32
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801d9e4:	2303      	movs	r3, #3
 801d9e6:	e027      	b.n	801da38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	9300      	str	r3, [sp, #0]
 801d9ec:	68bb      	ldr	r3, [r7, #8]
 801d9ee:	2200      	movs	r2, #0
 801d9f0:	2180      	movs	r1, #128	; 0x80
 801d9f2:	68f8      	ldr	r0, [r7, #12]
 801d9f4:	f7ff fe68 	bl	801d6c8 <SPI_WaitFlagStateUntilTimeout>
 801d9f8:	4603      	mov	r3, r0
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d007      	beq.n	801da0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da02:	f043 0220 	orr.w	r2, r3, #32
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801da0a:	2303      	movs	r3, #3
 801da0c:	e014      	b.n	801da38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	9300      	str	r3, [sp, #0]
 801da12:	68bb      	ldr	r3, [r7, #8]
 801da14:	2200      	movs	r2, #0
 801da16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801da1a:	68f8      	ldr	r0, [r7, #12]
 801da1c:	f7ff fedc 	bl	801d7d8 <SPI_WaitFifoStateUntilTimeout>
 801da20:	4603      	mov	r3, r0
 801da22:	2b00      	cmp	r3, #0
 801da24:	d007      	beq.n	801da36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da2a:	f043 0220 	orr.w	r2, r3, #32
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801da32:	2303      	movs	r3, #3
 801da34:	e000      	b.n	801da38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801da36:	2300      	movs	r3, #0
}
 801da38:	4618      	mov	r0, r3
 801da3a:	3710      	adds	r7, #16
 801da3c:	46bd      	mov	sp, r7
 801da3e:	bd80      	pop	{r7, pc}

0801da40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801da40:	b580      	push	{r7, lr}
 801da42:	b082      	sub	sp, #8
 801da44:	af00      	add	r7, sp, #0
 801da46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d101      	bne.n	801da52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801da4e:	2301      	movs	r3, #1
 801da50:	e049      	b.n	801dae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801da58:	b2db      	uxtb	r3, r3
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d106      	bne.n	801da6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	2200      	movs	r2, #0
 801da62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801da66:	6878      	ldr	r0, [r7, #4]
 801da68:	f7f9 fe54 	bl	8017714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	2202      	movs	r2, #2
 801da70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	681a      	ldr	r2, [r3, #0]
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	3304      	adds	r3, #4
 801da7c:	4619      	mov	r1, r3
 801da7e:	4610      	mov	r0, r2
 801da80:	f000 fd6c 	bl	801e55c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	2201      	movs	r2, #1
 801da88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	2201      	movs	r2, #1
 801da90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	2201      	movs	r2, #1
 801da98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	2201      	movs	r2, #1
 801daa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	2201      	movs	r2, #1
 801daa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	2201      	movs	r2, #1
 801dab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	2201      	movs	r2, #1
 801dab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	2201      	movs	r2, #1
 801dac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	2201      	movs	r2, #1
 801dac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	2201      	movs	r2, #1
 801dad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	2201      	movs	r2, #1
 801dad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	2201      	movs	r2, #1
 801dae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801dae4:	2300      	movs	r3, #0
}
 801dae6:	4618      	mov	r0, r3
 801dae8:	3708      	adds	r7, #8
 801daea:	46bd      	mov	sp, r7
 801daec:	bd80      	pop	{r7, pc}
	...

0801daf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801daf0:	b480      	push	{r7}
 801daf2:	b085      	sub	sp, #20
 801daf4:	af00      	add	r7, sp, #0
 801daf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dafe:	b2db      	uxtb	r3, r3
 801db00:	2b01      	cmp	r3, #1
 801db02:	d001      	beq.n	801db08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801db04:	2301      	movs	r3, #1
 801db06:	e04f      	b.n	801dba8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	2202      	movs	r2, #2
 801db0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	68da      	ldr	r2, [r3, #12]
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	f042 0201 	orr.w	r2, r2, #1
 801db1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	4a23      	ldr	r2, [pc, #140]	; (801dbb4 <HAL_TIM_Base_Start_IT+0xc4>)
 801db26:	4293      	cmp	r3, r2
 801db28:	d01d      	beq.n	801db66 <HAL_TIM_Base_Start_IT+0x76>
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801db32:	d018      	beq.n	801db66 <HAL_TIM_Base_Start_IT+0x76>
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	4a1f      	ldr	r2, [pc, #124]	; (801dbb8 <HAL_TIM_Base_Start_IT+0xc8>)
 801db3a:	4293      	cmp	r3, r2
 801db3c:	d013      	beq.n	801db66 <HAL_TIM_Base_Start_IT+0x76>
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	4a1e      	ldr	r2, [pc, #120]	; (801dbbc <HAL_TIM_Base_Start_IT+0xcc>)
 801db44:	4293      	cmp	r3, r2
 801db46:	d00e      	beq.n	801db66 <HAL_TIM_Base_Start_IT+0x76>
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	4a1c      	ldr	r2, [pc, #112]	; (801dbc0 <HAL_TIM_Base_Start_IT+0xd0>)
 801db4e:	4293      	cmp	r3, r2
 801db50:	d009      	beq.n	801db66 <HAL_TIM_Base_Start_IT+0x76>
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	681b      	ldr	r3, [r3, #0]
 801db56:	4a1b      	ldr	r2, [pc, #108]	; (801dbc4 <HAL_TIM_Base_Start_IT+0xd4>)
 801db58:	4293      	cmp	r3, r2
 801db5a:	d004      	beq.n	801db66 <HAL_TIM_Base_Start_IT+0x76>
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	4a19      	ldr	r2, [pc, #100]	; (801dbc8 <HAL_TIM_Base_Start_IT+0xd8>)
 801db62:	4293      	cmp	r3, r2
 801db64:	d115      	bne.n	801db92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	689a      	ldr	r2, [r3, #8]
 801db6c:	4b17      	ldr	r3, [pc, #92]	; (801dbcc <HAL_TIM_Base_Start_IT+0xdc>)
 801db6e:	4013      	ands	r3, r2
 801db70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	2b06      	cmp	r3, #6
 801db76:	d015      	beq.n	801dba4 <HAL_TIM_Base_Start_IT+0xb4>
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801db7e:	d011      	beq.n	801dba4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	681a      	ldr	r2, [r3, #0]
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	f042 0201 	orr.w	r2, r2, #1
 801db8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801db90:	e008      	b.n	801dba4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	681b      	ldr	r3, [r3, #0]
 801db96:	681a      	ldr	r2, [r3, #0]
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	f042 0201 	orr.w	r2, r2, #1
 801dba0:	601a      	str	r2, [r3, #0]
 801dba2:	e000      	b.n	801dba6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801dba4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801dba6:	2300      	movs	r3, #0
}
 801dba8:	4618      	mov	r0, r3
 801dbaa:	3714      	adds	r7, #20
 801dbac:	46bd      	mov	sp, r7
 801dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbb2:	4770      	bx	lr
 801dbb4:	40012c00 	.word	0x40012c00
 801dbb8:	40000400 	.word	0x40000400
 801dbbc:	40000800 	.word	0x40000800
 801dbc0:	40013400 	.word	0x40013400
 801dbc4:	40014000 	.word	0x40014000
 801dbc8:	40015000 	.word	0x40015000
 801dbcc:	00010007 	.word	0x00010007

0801dbd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801dbd0:	b580      	push	{r7, lr}
 801dbd2:	b082      	sub	sp, #8
 801dbd4:	af00      	add	r7, sp, #0
 801dbd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d101      	bne.n	801dbe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801dbde:	2301      	movs	r3, #1
 801dbe0:	e049      	b.n	801dc76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dbe8:	b2db      	uxtb	r3, r3
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d106      	bne.n	801dbfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	2200      	movs	r2, #0
 801dbf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801dbf6:	6878      	ldr	r0, [r7, #4]
 801dbf8:	f7f9 fdc6 	bl	8017788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	2202      	movs	r2, #2
 801dc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	681a      	ldr	r2, [r3, #0]
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	3304      	adds	r3, #4
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	4610      	mov	r0, r2
 801dc10:	f000 fca4 	bl	801e55c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	2201      	movs	r2, #1
 801dc18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	2201      	movs	r2, #1
 801dc20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	2201      	movs	r2, #1
 801dc28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	2201      	movs	r2, #1
 801dc30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	2201      	movs	r2, #1
 801dc38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	2201      	movs	r2, #1
 801dc40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	2201      	movs	r2, #1
 801dc48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	2201      	movs	r2, #1
 801dc50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	2201      	movs	r2, #1
 801dc58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	2201      	movs	r2, #1
 801dc60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	2201      	movs	r2, #1
 801dc68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	2201      	movs	r2, #1
 801dc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801dc74:	2300      	movs	r3, #0
}
 801dc76:	4618      	mov	r0, r3
 801dc78:	3708      	adds	r7, #8
 801dc7a:	46bd      	mov	sp, r7
 801dc7c:	bd80      	pop	{r7, pc}
	...

0801dc80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801dc80:	b580      	push	{r7, lr}
 801dc82:	b084      	sub	sp, #16
 801dc84:	af00      	add	r7, sp, #0
 801dc86:	6078      	str	r0, [r7, #4]
 801dc88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801dc8a:	683b      	ldr	r3, [r7, #0]
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d109      	bne.n	801dca4 <HAL_TIM_PWM_Start+0x24>
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dc96:	b2db      	uxtb	r3, r3
 801dc98:	2b01      	cmp	r3, #1
 801dc9a:	bf14      	ite	ne
 801dc9c:	2301      	movne	r3, #1
 801dc9e:	2300      	moveq	r3, #0
 801dca0:	b2db      	uxtb	r3, r3
 801dca2:	e03c      	b.n	801dd1e <HAL_TIM_PWM_Start+0x9e>
 801dca4:	683b      	ldr	r3, [r7, #0]
 801dca6:	2b04      	cmp	r3, #4
 801dca8:	d109      	bne.n	801dcbe <HAL_TIM_PWM_Start+0x3e>
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801dcb0:	b2db      	uxtb	r3, r3
 801dcb2:	2b01      	cmp	r3, #1
 801dcb4:	bf14      	ite	ne
 801dcb6:	2301      	movne	r3, #1
 801dcb8:	2300      	moveq	r3, #0
 801dcba:	b2db      	uxtb	r3, r3
 801dcbc:	e02f      	b.n	801dd1e <HAL_TIM_PWM_Start+0x9e>
 801dcbe:	683b      	ldr	r3, [r7, #0]
 801dcc0:	2b08      	cmp	r3, #8
 801dcc2:	d109      	bne.n	801dcd8 <HAL_TIM_PWM_Start+0x58>
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801dcca:	b2db      	uxtb	r3, r3
 801dccc:	2b01      	cmp	r3, #1
 801dcce:	bf14      	ite	ne
 801dcd0:	2301      	movne	r3, #1
 801dcd2:	2300      	moveq	r3, #0
 801dcd4:	b2db      	uxtb	r3, r3
 801dcd6:	e022      	b.n	801dd1e <HAL_TIM_PWM_Start+0x9e>
 801dcd8:	683b      	ldr	r3, [r7, #0]
 801dcda:	2b0c      	cmp	r3, #12
 801dcdc:	d109      	bne.n	801dcf2 <HAL_TIM_PWM_Start+0x72>
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801dce4:	b2db      	uxtb	r3, r3
 801dce6:	2b01      	cmp	r3, #1
 801dce8:	bf14      	ite	ne
 801dcea:	2301      	movne	r3, #1
 801dcec:	2300      	moveq	r3, #0
 801dcee:	b2db      	uxtb	r3, r3
 801dcf0:	e015      	b.n	801dd1e <HAL_TIM_PWM_Start+0x9e>
 801dcf2:	683b      	ldr	r3, [r7, #0]
 801dcf4:	2b10      	cmp	r3, #16
 801dcf6:	d109      	bne.n	801dd0c <HAL_TIM_PWM_Start+0x8c>
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dcfe:	b2db      	uxtb	r3, r3
 801dd00:	2b01      	cmp	r3, #1
 801dd02:	bf14      	ite	ne
 801dd04:	2301      	movne	r3, #1
 801dd06:	2300      	moveq	r3, #0
 801dd08:	b2db      	uxtb	r3, r3
 801dd0a:	e008      	b.n	801dd1e <HAL_TIM_PWM_Start+0x9e>
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801dd12:	b2db      	uxtb	r3, r3
 801dd14:	2b01      	cmp	r3, #1
 801dd16:	bf14      	ite	ne
 801dd18:	2301      	movne	r3, #1
 801dd1a:	2300      	moveq	r3, #0
 801dd1c:	b2db      	uxtb	r3, r3
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d001      	beq.n	801dd26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801dd22:	2301      	movs	r3, #1
 801dd24:	e0a1      	b.n	801de6a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801dd26:	683b      	ldr	r3, [r7, #0]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d104      	bne.n	801dd36 <HAL_TIM_PWM_Start+0xb6>
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	2202      	movs	r2, #2
 801dd30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dd34:	e023      	b.n	801dd7e <HAL_TIM_PWM_Start+0xfe>
 801dd36:	683b      	ldr	r3, [r7, #0]
 801dd38:	2b04      	cmp	r3, #4
 801dd3a:	d104      	bne.n	801dd46 <HAL_TIM_PWM_Start+0xc6>
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	2202      	movs	r2, #2
 801dd40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dd44:	e01b      	b.n	801dd7e <HAL_TIM_PWM_Start+0xfe>
 801dd46:	683b      	ldr	r3, [r7, #0]
 801dd48:	2b08      	cmp	r3, #8
 801dd4a:	d104      	bne.n	801dd56 <HAL_TIM_PWM_Start+0xd6>
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	2202      	movs	r2, #2
 801dd50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dd54:	e013      	b.n	801dd7e <HAL_TIM_PWM_Start+0xfe>
 801dd56:	683b      	ldr	r3, [r7, #0]
 801dd58:	2b0c      	cmp	r3, #12
 801dd5a:	d104      	bne.n	801dd66 <HAL_TIM_PWM_Start+0xe6>
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	2202      	movs	r2, #2
 801dd60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dd64:	e00b      	b.n	801dd7e <HAL_TIM_PWM_Start+0xfe>
 801dd66:	683b      	ldr	r3, [r7, #0]
 801dd68:	2b10      	cmp	r3, #16
 801dd6a:	d104      	bne.n	801dd76 <HAL_TIM_PWM_Start+0xf6>
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	2202      	movs	r2, #2
 801dd70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dd74:	e003      	b.n	801dd7e <HAL_TIM_PWM_Start+0xfe>
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	2202      	movs	r2, #2
 801dd7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	2201      	movs	r2, #1
 801dd84:	6839      	ldr	r1, [r7, #0]
 801dd86:	4618      	mov	r0, r3
 801dd88:	f000 ffb0 	bl	801ecec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	4a38      	ldr	r2, [pc, #224]	; (801de74 <HAL_TIM_PWM_Start+0x1f4>)
 801dd92:	4293      	cmp	r3, r2
 801dd94:	d018      	beq.n	801ddc8 <HAL_TIM_PWM_Start+0x148>
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	4a37      	ldr	r2, [pc, #220]	; (801de78 <HAL_TIM_PWM_Start+0x1f8>)
 801dd9c:	4293      	cmp	r3, r2
 801dd9e:	d013      	beq.n	801ddc8 <HAL_TIM_PWM_Start+0x148>
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	4a35      	ldr	r2, [pc, #212]	; (801de7c <HAL_TIM_PWM_Start+0x1fc>)
 801dda6:	4293      	cmp	r3, r2
 801dda8:	d00e      	beq.n	801ddc8 <HAL_TIM_PWM_Start+0x148>
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	4a34      	ldr	r2, [pc, #208]	; (801de80 <HAL_TIM_PWM_Start+0x200>)
 801ddb0:	4293      	cmp	r3, r2
 801ddb2:	d009      	beq.n	801ddc8 <HAL_TIM_PWM_Start+0x148>
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	4a32      	ldr	r2, [pc, #200]	; (801de84 <HAL_TIM_PWM_Start+0x204>)
 801ddba:	4293      	cmp	r3, r2
 801ddbc:	d004      	beq.n	801ddc8 <HAL_TIM_PWM_Start+0x148>
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	4a31      	ldr	r2, [pc, #196]	; (801de88 <HAL_TIM_PWM_Start+0x208>)
 801ddc4:	4293      	cmp	r3, r2
 801ddc6:	d101      	bne.n	801ddcc <HAL_TIM_PWM_Start+0x14c>
 801ddc8:	2301      	movs	r3, #1
 801ddca:	e000      	b.n	801ddce <HAL_TIM_PWM_Start+0x14e>
 801ddcc:	2300      	movs	r3, #0
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d007      	beq.n	801dde2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801dde0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	4a23      	ldr	r2, [pc, #140]	; (801de74 <HAL_TIM_PWM_Start+0x1f4>)
 801dde8:	4293      	cmp	r3, r2
 801ddea:	d01d      	beq.n	801de28 <HAL_TIM_PWM_Start+0x1a8>
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ddf4:	d018      	beq.n	801de28 <HAL_TIM_PWM_Start+0x1a8>
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	681b      	ldr	r3, [r3, #0]
 801ddfa:	4a24      	ldr	r2, [pc, #144]	; (801de8c <HAL_TIM_PWM_Start+0x20c>)
 801ddfc:	4293      	cmp	r3, r2
 801ddfe:	d013      	beq.n	801de28 <HAL_TIM_PWM_Start+0x1a8>
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	4a22      	ldr	r2, [pc, #136]	; (801de90 <HAL_TIM_PWM_Start+0x210>)
 801de06:	4293      	cmp	r3, r2
 801de08:	d00e      	beq.n	801de28 <HAL_TIM_PWM_Start+0x1a8>
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	4a1a      	ldr	r2, [pc, #104]	; (801de78 <HAL_TIM_PWM_Start+0x1f8>)
 801de10:	4293      	cmp	r3, r2
 801de12:	d009      	beq.n	801de28 <HAL_TIM_PWM_Start+0x1a8>
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	4a18      	ldr	r2, [pc, #96]	; (801de7c <HAL_TIM_PWM_Start+0x1fc>)
 801de1a:	4293      	cmp	r3, r2
 801de1c:	d004      	beq.n	801de28 <HAL_TIM_PWM_Start+0x1a8>
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	4a19      	ldr	r2, [pc, #100]	; (801de88 <HAL_TIM_PWM_Start+0x208>)
 801de24:	4293      	cmp	r3, r2
 801de26:	d115      	bne.n	801de54 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	689a      	ldr	r2, [r3, #8]
 801de2e:	4b19      	ldr	r3, [pc, #100]	; (801de94 <HAL_TIM_PWM_Start+0x214>)
 801de30:	4013      	ands	r3, r2
 801de32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	2b06      	cmp	r3, #6
 801de38:	d015      	beq.n	801de66 <HAL_TIM_PWM_Start+0x1e6>
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801de40:	d011      	beq.n	801de66 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	681a      	ldr	r2, [r3, #0]
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	f042 0201 	orr.w	r2, r2, #1
 801de50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801de52:	e008      	b.n	801de66 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	681a      	ldr	r2, [r3, #0]
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	f042 0201 	orr.w	r2, r2, #1
 801de62:	601a      	str	r2, [r3, #0]
 801de64:	e000      	b.n	801de68 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801de66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801de68:	2300      	movs	r3, #0
}
 801de6a:	4618      	mov	r0, r3
 801de6c:	3710      	adds	r7, #16
 801de6e:	46bd      	mov	sp, r7
 801de70:	bd80      	pop	{r7, pc}
 801de72:	bf00      	nop
 801de74:	40012c00 	.word	0x40012c00
 801de78:	40013400 	.word	0x40013400
 801de7c:	40014000 	.word	0x40014000
 801de80:	40014400 	.word	0x40014400
 801de84:	40014800 	.word	0x40014800
 801de88:	40015000 	.word	0x40015000
 801de8c:	40000400 	.word	0x40000400
 801de90:	40000800 	.word	0x40000800
 801de94:	00010007 	.word	0x00010007

0801de98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b082      	sub	sp, #8
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	6078      	str	r0, [r7, #4]
 801dea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	2200      	movs	r2, #0
 801dea8:	6839      	ldr	r1, [r7, #0]
 801deaa:	4618      	mov	r0, r3
 801deac:	f000 ff1e 	bl	801ecec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	4a40      	ldr	r2, [pc, #256]	; (801dfb8 <HAL_TIM_PWM_Stop+0x120>)
 801deb6:	4293      	cmp	r3, r2
 801deb8:	d018      	beq.n	801deec <HAL_TIM_PWM_Stop+0x54>
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	4a3f      	ldr	r2, [pc, #252]	; (801dfbc <HAL_TIM_PWM_Stop+0x124>)
 801dec0:	4293      	cmp	r3, r2
 801dec2:	d013      	beq.n	801deec <HAL_TIM_PWM_Stop+0x54>
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	4a3d      	ldr	r2, [pc, #244]	; (801dfc0 <HAL_TIM_PWM_Stop+0x128>)
 801deca:	4293      	cmp	r3, r2
 801decc:	d00e      	beq.n	801deec <HAL_TIM_PWM_Stop+0x54>
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	4a3c      	ldr	r2, [pc, #240]	; (801dfc4 <HAL_TIM_PWM_Stop+0x12c>)
 801ded4:	4293      	cmp	r3, r2
 801ded6:	d009      	beq.n	801deec <HAL_TIM_PWM_Stop+0x54>
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	4a3a      	ldr	r2, [pc, #232]	; (801dfc8 <HAL_TIM_PWM_Stop+0x130>)
 801dede:	4293      	cmp	r3, r2
 801dee0:	d004      	beq.n	801deec <HAL_TIM_PWM_Stop+0x54>
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	4a39      	ldr	r2, [pc, #228]	; (801dfcc <HAL_TIM_PWM_Stop+0x134>)
 801dee8:	4293      	cmp	r3, r2
 801deea:	d101      	bne.n	801def0 <HAL_TIM_PWM_Stop+0x58>
 801deec:	2301      	movs	r3, #1
 801deee:	e000      	b.n	801def2 <HAL_TIM_PWM_Stop+0x5a>
 801def0:	2300      	movs	r3, #0
 801def2:	2b00      	cmp	r3, #0
 801def4:	d017      	beq.n	801df26 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	6a1a      	ldr	r2, [r3, #32]
 801defc:	f241 1311 	movw	r3, #4369	; 0x1111
 801df00:	4013      	ands	r3, r2
 801df02:	2b00      	cmp	r3, #0
 801df04:	d10f      	bne.n	801df26 <HAL_TIM_PWM_Stop+0x8e>
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	6a1a      	ldr	r2, [r3, #32]
 801df0c:	f244 4344 	movw	r3, #17476	; 0x4444
 801df10:	4013      	ands	r3, r2
 801df12:	2b00      	cmp	r3, #0
 801df14:	d107      	bne.n	801df26 <HAL_TIM_PWM_Stop+0x8e>
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	681b      	ldr	r3, [r3, #0]
 801df20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801df24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	6a1a      	ldr	r2, [r3, #32]
 801df2c:	f241 1311 	movw	r3, #4369	; 0x1111
 801df30:	4013      	ands	r3, r2
 801df32:	2b00      	cmp	r3, #0
 801df34:	d10f      	bne.n	801df56 <HAL_TIM_PWM_Stop+0xbe>
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	6a1a      	ldr	r2, [r3, #32]
 801df3c:	f244 4344 	movw	r3, #17476	; 0x4444
 801df40:	4013      	ands	r3, r2
 801df42:	2b00      	cmp	r3, #0
 801df44:	d107      	bne.n	801df56 <HAL_TIM_PWM_Stop+0xbe>
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	681a      	ldr	r2, [r3, #0]
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	f022 0201 	bic.w	r2, r2, #1
 801df54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801df56:	683b      	ldr	r3, [r7, #0]
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d104      	bne.n	801df66 <HAL_TIM_PWM_Stop+0xce>
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	2201      	movs	r2, #1
 801df60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801df64:	e023      	b.n	801dfae <HAL_TIM_PWM_Stop+0x116>
 801df66:	683b      	ldr	r3, [r7, #0]
 801df68:	2b04      	cmp	r3, #4
 801df6a:	d104      	bne.n	801df76 <HAL_TIM_PWM_Stop+0xde>
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	2201      	movs	r2, #1
 801df70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801df74:	e01b      	b.n	801dfae <HAL_TIM_PWM_Stop+0x116>
 801df76:	683b      	ldr	r3, [r7, #0]
 801df78:	2b08      	cmp	r3, #8
 801df7a:	d104      	bne.n	801df86 <HAL_TIM_PWM_Stop+0xee>
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	2201      	movs	r2, #1
 801df80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801df84:	e013      	b.n	801dfae <HAL_TIM_PWM_Stop+0x116>
 801df86:	683b      	ldr	r3, [r7, #0]
 801df88:	2b0c      	cmp	r3, #12
 801df8a:	d104      	bne.n	801df96 <HAL_TIM_PWM_Stop+0xfe>
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	2201      	movs	r2, #1
 801df90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801df94:	e00b      	b.n	801dfae <HAL_TIM_PWM_Stop+0x116>
 801df96:	683b      	ldr	r3, [r7, #0]
 801df98:	2b10      	cmp	r3, #16
 801df9a:	d104      	bne.n	801dfa6 <HAL_TIM_PWM_Stop+0x10e>
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	2201      	movs	r2, #1
 801dfa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dfa4:	e003      	b.n	801dfae <HAL_TIM_PWM_Stop+0x116>
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	2201      	movs	r2, #1
 801dfaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801dfae:	2300      	movs	r3, #0
}
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	3708      	adds	r7, #8
 801dfb4:	46bd      	mov	sp, r7
 801dfb6:	bd80      	pop	{r7, pc}
 801dfb8:	40012c00 	.word	0x40012c00
 801dfbc:	40013400 	.word	0x40013400
 801dfc0:	40014000 	.word	0x40014000
 801dfc4:	40014400 	.word	0x40014400
 801dfc8:	40014800 	.word	0x40014800
 801dfcc:	40015000 	.word	0x40015000

0801dfd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801dfd0:	b580      	push	{r7, lr}
 801dfd2:	b082      	sub	sp, #8
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	691b      	ldr	r3, [r3, #16]
 801dfde:	f003 0302 	and.w	r3, r3, #2
 801dfe2:	2b02      	cmp	r3, #2
 801dfe4:	d122      	bne.n	801e02c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	68db      	ldr	r3, [r3, #12]
 801dfec:	f003 0302 	and.w	r3, r3, #2
 801dff0:	2b02      	cmp	r3, #2
 801dff2:	d11b      	bne.n	801e02c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	f06f 0202 	mvn.w	r2, #2
 801dffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	2201      	movs	r2, #1
 801e002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	699b      	ldr	r3, [r3, #24]
 801e00a:	f003 0303 	and.w	r3, r3, #3
 801e00e:	2b00      	cmp	r3, #0
 801e010:	d003      	beq.n	801e01a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e012:	6878      	ldr	r0, [r7, #4]
 801e014:	f000 fa84 	bl	801e520 <HAL_TIM_IC_CaptureCallback>
 801e018:	e005      	b.n	801e026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e01a:	6878      	ldr	r0, [r7, #4]
 801e01c:	f000 fa76 	bl	801e50c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e020:	6878      	ldr	r0, [r7, #4]
 801e022:	f000 fa87 	bl	801e534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	2200      	movs	r2, #0
 801e02a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	691b      	ldr	r3, [r3, #16]
 801e032:	f003 0304 	and.w	r3, r3, #4
 801e036:	2b04      	cmp	r3, #4
 801e038:	d122      	bne.n	801e080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	68db      	ldr	r3, [r3, #12]
 801e040:	f003 0304 	and.w	r3, r3, #4
 801e044:	2b04      	cmp	r3, #4
 801e046:	d11b      	bne.n	801e080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	f06f 0204 	mvn.w	r2, #4
 801e050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	2202      	movs	r2, #2
 801e056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	699b      	ldr	r3, [r3, #24]
 801e05e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e062:	2b00      	cmp	r3, #0
 801e064:	d003      	beq.n	801e06e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e066:	6878      	ldr	r0, [r7, #4]
 801e068:	f000 fa5a 	bl	801e520 <HAL_TIM_IC_CaptureCallback>
 801e06c:	e005      	b.n	801e07a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e06e:	6878      	ldr	r0, [r7, #4]
 801e070:	f000 fa4c 	bl	801e50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e074:	6878      	ldr	r0, [r7, #4]
 801e076:	f000 fa5d 	bl	801e534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	2200      	movs	r2, #0
 801e07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	691b      	ldr	r3, [r3, #16]
 801e086:	f003 0308 	and.w	r3, r3, #8
 801e08a:	2b08      	cmp	r3, #8
 801e08c:	d122      	bne.n	801e0d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	68db      	ldr	r3, [r3, #12]
 801e094:	f003 0308 	and.w	r3, r3, #8
 801e098:	2b08      	cmp	r3, #8
 801e09a:	d11b      	bne.n	801e0d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	f06f 0208 	mvn.w	r2, #8
 801e0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	2204      	movs	r2, #4
 801e0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	69db      	ldr	r3, [r3, #28]
 801e0b2:	f003 0303 	and.w	r3, r3, #3
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d003      	beq.n	801e0c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e0ba:	6878      	ldr	r0, [r7, #4]
 801e0bc:	f000 fa30 	bl	801e520 <HAL_TIM_IC_CaptureCallback>
 801e0c0:	e005      	b.n	801e0ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e0c2:	6878      	ldr	r0, [r7, #4]
 801e0c4:	f000 fa22 	bl	801e50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e0c8:	6878      	ldr	r0, [r7, #4]
 801e0ca:	f000 fa33 	bl	801e534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	2200      	movs	r2, #0
 801e0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	691b      	ldr	r3, [r3, #16]
 801e0da:	f003 0310 	and.w	r3, r3, #16
 801e0de:	2b10      	cmp	r3, #16
 801e0e0:	d122      	bne.n	801e128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	68db      	ldr	r3, [r3, #12]
 801e0e8:	f003 0310 	and.w	r3, r3, #16
 801e0ec:	2b10      	cmp	r3, #16
 801e0ee:	d11b      	bne.n	801e128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	f06f 0210 	mvn.w	r2, #16
 801e0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	2208      	movs	r2, #8
 801e0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	69db      	ldr	r3, [r3, #28]
 801e106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d003      	beq.n	801e116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e10e:	6878      	ldr	r0, [r7, #4]
 801e110:	f000 fa06 	bl	801e520 <HAL_TIM_IC_CaptureCallback>
 801e114:	e005      	b.n	801e122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e116:	6878      	ldr	r0, [r7, #4]
 801e118:	f000 f9f8 	bl	801e50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e11c:	6878      	ldr	r0, [r7, #4]
 801e11e:	f000 fa09 	bl	801e534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	2200      	movs	r2, #0
 801e126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	691b      	ldr	r3, [r3, #16]
 801e12e:	f003 0301 	and.w	r3, r3, #1
 801e132:	2b01      	cmp	r3, #1
 801e134:	d10e      	bne.n	801e154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	68db      	ldr	r3, [r3, #12]
 801e13c:	f003 0301 	and.w	r3, r3, #1
 801e140:	2b01      	cmp	r3, #1
 801e142:	d107      	bne.n	801e154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	f06f 0201 	mvn.w	r2, #1
 801e14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e14e:	6878      	ldr	r0, [r7, #4]
 801e150:	f000 f9d2 	bl	801e4f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	691b      	ldr	r3, [r3, #16]
 801e15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e15e:	2b80      	cmp	r3, #128	; 0x80
 801e160:	d10e      	bne.n	801e180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	68db      	ldr	r3, [r3, #12]
 801e168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e16c:	2b80      	cmp	r3, #128	; 0x80
 801e16e:	d107      	bne.n	801e180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e17a:	6878      	ldr	r0, [r7, #4]
 801e17c:	f000 ff26 	bl	801efcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	691b      	ldr	r3, [r3, #16]
 801e186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e18e:	d10e      	bne.n	801e1ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	68db      	ldr	r3, [r3, #12]
 801e196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e19a:	2b80      	cmp	r3, #128	; 0x80
 801e19c:	d107      	bne.n	801e1ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e1a8:	6878      	ldr	r0, [r7, #4]
 801e1aa:	f000 ff19 	bl	801efe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	691b      	ldr	r3, [r3, #16]
 801e1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1b8:	2b40      	cmp	r3, #64	; 0x40
 801e1ba:	d10e      	bne.n	801e1da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	68db      	ldr	r3, [r3, #12]
 801e1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1c6:	2b40      	cmp	r3, #64	; 0x40
 801e1c8:	d107      	bne.n	801e1da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	681b      	ldr	r3, [r3, #0]
 801e1ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e1d4:	6878      	ldr	r0, [r7, #4]
 801e1d6:	f000 f9b7 	bl	801e548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	691b      	ldr	r3, [r3, #16]
 801e1e0:	f003 0320 	and.w	r3, r3, #32
 801e1e4:	2b20      	cmp	r3, #32
 801e1e6:	d10e      	bne.n	801e206 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	68db      	ldr	r3, [r3, #12]
 801e1ee:	f003 0320 	and.w	r3, r3, #32
 801e1f2:	2b20      	cmp	r3, #32
 801e1f4:	d107      	bne.n	801e206 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	f06f 0220 	mvn.w	r2, #32
 801e1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e200:	6878      	ldr	r0, [r7, #4]
 801e202:	f000 fed9 	bl	801efb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	691b      	ldr	r3, [r3, #16]
 801e20c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e214:	d10f      	bne.n	801e236 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	68db      	ldr	r3, [r3, #12]
 801e21c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e224:	d107      	bne.n	801e236 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801e22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801e230:	6878      	ldr	r0, [r7, #4]
 801e232:	f000 fedf 	bl	801eff4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	691b      	ldr	r3, [r3, #16]
 801e23c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e244:	d10f      	bne.n	801e266 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	68db      	ldr	r3, [r3, #12]
 801e24c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e254:	d107      	bne.n	801e266 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801e25e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801e260:	6878      	ldr	r0, [r7, #4]
 801e262:	f000 fed1 	bl	801f008 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	691b      	ldr	r3, [r3, #16]
 801e26c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e274:	d10f      	bne.n	801e296 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	68db      	ldr	r3, [r3, #12]
 801e27c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e284:	d107      	bne.n	801e296 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801e28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801e290:	6878      	ldr	r0, [r7, #4]
 801e292:	f000 fec3 	bl	801f01c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	691b      	ldr	r3, [r3, #16]
 801e29c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e2a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e2a4:	d10f      	bne.n	801e2c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	68db      	ldr	r3, [r3, #12]
 801e2ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e2b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e2b4:	d107      	bne.n	801e2c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801e2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801e2c0:	6878      	ldr	r0, [r7, #4]
 801e2c2:	f000 feb5 	bl	801f030 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e2c6:	bf00      	nop
 801e2c8:	3708      	adds	r7, #8
 801e2ca:	46bd      	mov	sp, r7
 801e2cc:	bd80      	pop	{r7, pc}
	...

0801e2d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	b086      	sub	sp, #24
 801e2d4:	af00      	add	r7, sp, #0
 801e2d6:	60f8      	str	r0, [r7, #12]
 801e2d8:	60b9      	str	r1, [r7, #8]
 801e2da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e2dc:	2300      	movs	r3, #0
 801e2de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e2e6:	2b01      	cmp	r3, #1
 801e2e8:	d101      	bne.n	801e2ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e2ea:	2302      	movs	r3, #2
 801e2ec:	e0ff      	b.n	801e4ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	2201      	movs	r2, #1
 801e2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	2b14      	cmp	r3, #20
 801e2fa:	f200 80f0 	bhi.w	801e4de <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e2fe:	a201      	add	r2, pc, #4	; (adr r2, 801e304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e304:	0801e359 	.word	0x0801e359
 801e308:	0801e4df 	.word	0x0801e4df
 801e30c:	0801e4df 	.word	0x0801e4df
 801e310:	0801e4df 	.word	0x0801e4df
 801e314:	0801e399 	.word	0x0801e399
 801e318:	0801e4df 	.word	0x0801e4df
 801e31c:	0801e4df 	.word	0x0801e4df
 801e320:	0801e4df 	.word	0x0801e4df
 801e324:	0801e3db 	.word	0x0801e3db
 801e328:	0801e4df 	.word	0x0801e4df
 801e32c:	0801e4df 	.word	0x0801e4df
 801e330:	0801e4df 	.word	0x0801e4df
 801e334:	0801e41b 	.word	0x0801e41b
 801e338:	0801e4df 	.word	0x0801e4df
 801e33c:	0801e4df 	.word	0x0801e4df
 801e340:	0801e4df 	.word	0x0801e4df
 801e344:	0801e45d 	.word	0x0801e45d
 801e348:	0801e4df 	.word	0x0801e4df
 801e34c:	0801e4df 	.word	0x0801e4df
 801e350:	0801e4df 	.word	0x0801e4df
 801e354:	0801e49d 	.word	0x0801e49d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	68b9      	ldr	r1, [r7, #8]
 801e35e:	4618      	mov	r0, r3
 801e360:	f000 f99a 	bl	801e698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	699a      	ldr	r2, [r3, #24]
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	681b      	ldr	r3, [r3, #0]
 801e36e:	f042 0208 	orr.w	r2, r2, #8
 801e372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	699a      	ldr	r2, [r3, #24]
 801e37a:	68fb      	ldr	r3, [r7, #12]
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	f022 0204 	bic.w	r2, r2, #4
 801e382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	6999      	ldr	r1, [r3, #24]
 801e38a:	68bb      	ldr	r3, [r7, #8]
 801e38c:	691a      	ldr	r2, [r3, #16]
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	430a      	orrs	r2, r1
 801e394:	619a      	str	r2, [r3, #24]
      break;
 801e396:	e0a5      	b.n	801e4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	68b9      	ldr	r1, [r7, #8]
 801e39e:	4618      	mov	r0, r3
 801e3a0:	f000 fa14 	bl	801e7cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	699a      	ldr	r2, [r3, #24]
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e3b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	699a      	ldr	r2, [r3, #24]
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e3c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e3c4:	68fb      	ldr	r3, [r7, #12]
 801e3c6:	681b      	ldr	r3, [r3, #0]
 801e3c8:	6999      	ldr	r1, [r3, #24]
 801e3ca:	68bb      	ldr	r3, [r7, #8]
 801e3cc:	691b      	ldr	r3, [r3, #16]
 801e3ce:	021a      	lsls	r2, r3, #8
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	681b      	ldr	r3, [r3, #0]
 801e3d4:	430a      	orrs	r2, r1
 801e3d6:	619a      	str	r2, [r3, #24]
      break;
 801e3d8:	e084      	b.n	801e4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e3da:	68fb      	ldr	r3, [r7, #12]
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	68b9      	ldr	r1, [r7, #8]
 801e3e0:	4618      	mov	r0, r3
 801e3e2:	f000 fa87 	bl	801e8f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	681b      	ldr	r3, [r3, #0]
 801e3ea:	69da      	ldr	r2, [r3, #28]
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	f042 0208 	orr.w	r2, r2, #8
 801e3f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e3f6:	68fb      	ldr	r3, [r7, #12]
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	69da      	ldr	r2, [r3, #28]
 801e3fc:	68fb      	ldr	r3, [r7, #12]
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	f022 0204 	bic.w	r2, r2, #4
 801e404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	69d9      	ldr	r1, [r3, #28]
 801e40c:	68bb      	ldr	r3, [r7, #8]
 801e40e:	691a      	ldr	r2, [r3, #16]
 801e410:	68fb      	ldr	r3, [r7, #12]
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	430a      	orrs	r2, r1
 801e416:	61da      	str	r2, [r3, #28]
      break;
 801e418:	e064      	b.n	801e4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	68b9      	ldr	r1, [r7, #8]
 801e420:	4618      	mov	r0, r3
 801e422:	f000 faf9 	bl	801ea18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	69da      	ldr	r2, [r3, #28]
 801e42c:	68fb      	ldr	r3, [r7, #12]
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	69da      	ldr	r2, [r3, #28]
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	69d9      	ldr	r1, [r3, #28]
 801e44c:	68bb      	ldr	r3, [r7, #8]
 801e44e:	691b      	ldr	r3, [r3, #16]
 801e450:	021a      	lsls	r2, r3, #8
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	430a      	orrs	r2, r1
 801e458:	61da      	str	r2, [r3, #28]
      break;
 801e45a:	e043      	b.n	801e4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	68b9      	ldr	r1, [r7, #8]
 801e462:	4618      	mov	r0, r3
 801e464:	f000 fb6c 	bl	801eb40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	f042 0208 	orr.w	r2, r2, #8
 801e476:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	f022 0204 	bic.w	r2, r2, #4
 801e486:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e48e:	68bb      	ldr	r3, [r7, #8]
 801e490:	691a      	ldr	r2, [r3, #16]
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	430a      	orrs	r2, r1
 801e498:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e49a:	e023      	b.n	801e4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	68b9      	ldr	r1, [r7, #8]
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	f000 fbb6 	bl	801ec14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e4ae:	68fb      	ldr	r3, [r7, #12]
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e4b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e4b8:	68fb      	ldr	r3, [r7, #12]
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e4c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e4ce:	68bb      	ldr	r3, [r7, #8]
 801e4d0:	691b      	ldr	r3, [r3, #16]
 801e4d2:	021a      	lsls	r2, r3, #8
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	430a      	orrs	r2, r1
 801e4da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e4dc:	e002      	b.n	801e4e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801e4de:	2301      	movs	r3, #1
 801e4e0:	75fb      	strb	r3, [r7, #23]
      break;
 801e4e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801e4e4:	68fb      	ldr	r3, [r7, #12]
 801e4e6:	2200      	movs	r2, #0
 801e4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801e4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	3718      	adds	r7, #24
 801e4f2:	46bd      	mov	sp, r7
 801e4f4:	bd80      	pop	{r7, pc}
 801e4f6:	bf00      	nop

0801e4f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e4f8:	b480      	push	{r7}
 801e4fa:	b083      	sub	sp, #12
 801e4fc:	af00      	add	r7, sp, #0
 801e4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801e500:	bf00      	nop
 801e502:	370c      	adds	r7, #12
 801e504:	46bd      	mov	sp, r7
 801e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e50a:	4770      	bx	lr

0801e50c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e50c:	b480      	push	{r7}
 801e50e:	b083      	sub	sp, #12
 801e510:	af00      	add	r7, sp, #0
 801e512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801e514:	bf00      	nop
 801e516:	370c      	adds	r7, #12
 801e518:	46bd      	mov	sp, r7
 801e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e51e:	4770      	bx	lr

0801e520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801e520:	b480      	push	{r7}
 801e522:	b083      	sub	sp, #12
 801e524:	af00      	add	r7, sp, #0
 801e526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801e528:	bf00      	nop
 801e52a:	370c      	adds	r7, #12
 801e52c:	46bd      	mov	sp, r7
 801e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e532:	4770      	bx	lr

0801e534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801e534:	b480      	push	{r7}
 801e536:	b083      	sub	sp, #12
 801e538:	af00      	add	r7, sp, #0
 801e53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801e53c:	bf00      	nop
 801e53e:	370c      	adds	r7, #12
 801e540:	46bd      	mov	sp, r7
 801e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e546:	4770      	bx	lr

0801e548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801e548:	b480      	push	{r7}
 801e54a:	b083      	sub	sp, #12
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801e550:	bf00      	nop
 801e552:	370c      	adds	r7, #12
 801e554:	46bd      	mov	sp, r7
 801e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e55a:	4770      	bx	lr

0801e55c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801e55c:	b480      	push	{r7}
 801e55e:	b085      	sub	sp, #20
 801e560:	af00      	add	r7, sp, #0
 801e562:	6078      	str	r0, [r7, #4]
 801e564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	4a42      	ldr	r2, [pc, #264]	; (801e678 <TIM_Base_SetConfig+0x11c>)
 801e570:	4293      	cmp	r3, r2
 801e572:	d013      	beq.n	801e59c <TIM_Base_SetConfig+0x40>
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e57a:	d00f      	beq.n	801e59c <TIM_Base_SetConfig+0x40>
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	4a3f      	ldr	r2, [pc, #252]	; (801e67c <TIM_Base_SetConfig+0x120>)
 801e580:	4293      	cmp	r3, r2
 801e582:	d00b      	beq.n	801e59c <TIM_Base_SetConfig+0x40>
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	4a3e      	ldr	r2, [pc, #248]	; (801e680 <TIM_Base_SetConfig+0x124>)
 801e588:	4293      	cmp	r3, r2
 801e58a:	d007      	beq.n	801e59c <TIM_Base_SetConfig+0x40>
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	4a3d      	ldr	r2, [pc, #244]	; (801e684 <TIM_Base_SetConfig+0x128>)
 801e590:	4293      	cmp	r3, r2
 801e592:	d003      	beq.n	801e59c <TIM_Base_SetConfig+0x40>
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	4a3c      	ldr	r2, [pc, #240]	; (801e688 <TIM_Base_SetConfig+0x12c>)
 801e598:	4293      	cmp	r3, r2
 801e59a:	d108      	bne.n	801e5ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e5a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801e5a4:	683b      	ldr	r3, [r7, #0]
 801e5a6:	685b      	ldr	r3, [r3, #4]
 801e5a8:	68fa      	ldr	r2, [r7, #12]
 801e5aa:	4313      	orrs	r3, r2
 801e5ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	4a31      	ldr	r2, [pc, #196]	; (801e678 <TIM_Base_SetConfig+0x11c>)
 801e5b2:	4293      	cmp	r3, r2
 801e5b4:	d01f      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e5bc:	d01b      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	4a2e      	ldr	r2, [pc, #184]	; (801e67c <TIM_Base_SetConfig+0x120>)
 801e5c2:	4293      	cmp	r3, r2
 801e5c4:	d017      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	4a2d      	ldr	r2, [pc, #180]	; (801e680 <TIM_Base_SetConfig+0x124>)
 801e5ca:	4293      	cmp	r3, r2
 801e5cc:	d013      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	4a2c      	ldr	r2, [pc, #176]	; (801e684 <TIM_Base_SetConfig+0x128>)
 801e5d2:	4293      	cmp	r3, r2
 801e5d4:	d00f      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	4a2c      	ldr	r2, [pc, #176]	; (801e68c <TIM_Base_SetConfig+0x130>)
 801e5da:	4293      	cmp	r3, r2
 801e5dc:	d00b      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	4a2b      	ldr	r2, [pc, #172]	; (801e690 <TIM_Base_SetConfig+0x134>)
 801e5e2:	4293      	cmp	r3, r2
 801e5e4:	d007      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	4a2a      	ldr	r2, [pc, #168]	; (801e694 <TIM_Base_SetConfig+0x138>)
 801e5ea:	4293      	cmp	r3, r2
 801e5ec:	d003      	beq.n	801e5f6 <TIM_Base_SetConfig+0x9a>
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	4a25      	ldr	r2, [pc, #148]	; (801e688 <TIM_Base_SetConfig+0x12c>)
 801e5f2:	4293      	cmp	r3, r2
 801e5f4:	d108      	bne.n	801e608 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801e5fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801e5fe:	683b      	ldr	r3, [r7, #0]
 801e600:	68db      	ldr	r3, [r3, #12]
 801e602:	68fa      	ldr	r2, [r7, #12]
 801e604:	4313      	orrs	r3, r2
 801e606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801e60e:	683b      	ldr	r3, [r7, #0]
 801e610:	695b      	ldr	r3, [r3, #20]
 801e612:	4313      	orrs	r3, r2
 801e614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	68fa      	ldr	r2, [r7, #12]
 801e61a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801e61c:	683b      	ldr	r3, [r7, #0]
 801e61e:	689a      	ldr	r2, [r3, #8]
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801e624:	683b      	ldr	r3, [r7, #0]
 801e626:	681a      	ldr	r2, [r3, #0]
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	4a12      	ldr	r2, [pc, #72]	; (801e678 <TIM_Base_SetConfig+0x11c>)
 801e630:	4293      	cmp	r3, r2
 801e632:	d013      	beq.n	801e65c <TIM_Base_SetConfig+0x100>
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	4a13      	ldr	r2, [pc, #76]	; (801e684 <TIM_Base_SetConfig+0x128>)
 801e638:	4293      	cmp	r3, r2
 801e63a:	d00f      	beq.n	801e65c <TIM_Base_SetConfig+0x100>
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	4a13      	ldr	r2, [pc, #76]	; (801e68c <TIM_Base_SetConfig+0x130>)
 801e640:	4293      	cmp	r3, r2
 801e642:	d00b      	beq.n	801e65c <TIM_Base_SetConfig+0x100>
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	4a12      	ldr	r2, [pc, #72]	; (801e690 <TIM_Base_SetConfig+0x134>)
 801e648:	4293      	cmp	r3, r2
 801e64a:	d007      	beq.n	801e65c <TIM_Base_SetConfig+0x100>
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	4a11      	ldr	r2, [pc, #68]	; (801e694 <TIM_Base_SetConfig+0x138>)
 801e650:	4293      	cmp	r3, r2
 801e652:	d003      	beq.n	801e65c <TIM_Base_SetConfig+0x100>
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	4a0c      	ldr	r2, [pc, #48]	; (801e688 <TIM_Base_SetConfig+0x12c>)
 801e658:	4293      	cmp	r3, r2
 801e65a:	d103      	bne.n	801e664 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801e65c:	683b      	ldr	r3, [r7, #0]
 801e65e:	691a      	ldr	r2, [r3, #16]
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	2201      	movs	r2, #1
 801e668:	615a      	str	r2, [r3, #20]
}
 801e66a:	bf00      	nop
 801e66c:	3714      	adds	r7, #20
 801e66e:	46bd      	mov	sp, r7
 801e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e674:	4770      	bx	lr
 801e676:	bf00      	nop
 801e678:	40012c00 	.word	0x40012c00
 801e67c:	40000400 	.word	0x40000400
 801e680:	40000800 	.word	0x40000800
 801e684:	40013400 	.word	0x40013400
 801e688:	40015000 	.word	0x40015000
 801e68c:	40014000 	.word	0x40014000
 801e690:	40014400 	.word	0x40014400
 801e694:	40014800 	.word	0x40014800

0801e698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801e698:	b480      	push	{r7}
 801e69a:	b087      	sub	sp, #28
 801e69c:	af00      	add	r7, sp, #0
 801e69e:	6078      	str	r0, [r7, #4]
 801e6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	6a1b      	ldr	r3, [r3, #32]
 801e6a6:	f023 0201 	bic.w	r2, r3, #1
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	6a1b      	ldr	r3, [r3, #32]
 801e6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	685b      	ldr	r3, [r3, #4]
 801e6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	699b      	ldr	r3, [r3, #24]
 801e6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801e6c0:	68fb      	ldr	r3, [r7, #12]
 801e6c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e6c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e6ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	f023 0303 	bic.w	r3, r3, #3
 801e6d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801e6d4:	683b      	ldr	r3, [r7, #0]
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	68fa      	ldr	r2, [r7, #12]
 801e6da:	4313      	orrs	r3, r2
 801e6dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801e6de:	697b      	ldr	r3, [r7, #20]
 801e6e0:	f023 0302 	bic.w	r3, r3, #2
 801e6e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801e6e6:	683b      	ldr	r3, [r7, #0]
 801e6e8:	689b      	ldr	r3, [r3, #8]
 801e6ea:	697a      	ldr	r2, [r7, #20]
 801e6ec:	4313      	orrs	r3, r2
 801e6ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	4a30      	ldr	r2, [pc, #192]	; (801e7b4 <TIM_OC1_SetConfig+0x11c>)
 801e6f4:	4293      	cmp	r3, r2
 801e6f6:	d013      	beq.n	801e720 <TIM_OC1_SetConfig+0x88>
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	4a2f      	ldr	r2, [pc, #188]	; (801e7b8 <TIM_OC1_SetConfig+0x120>)
 801e6fc:	4293      	cmp	r3, r2
 801e6fe:	d00f      	beq.n	801e720 <TIM_OC1_SetConfig+0x88>
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	4a2e      	ldr	r2, [pc, #184]	; (801e7bc <TIM_OC1_SetConfig+0x124>)
 801e704:	4293      	cmp	r3, r2
 801e706:	d00b      	beq.n	801e720 <TIM_OC1_SetConfig+0x88>
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	4a2d      	ldr	r2, [pc, #180]	; (801e7c0 <TIM_OC1_SetConfig+0x128>)
 801e70c:	4293      	cmp	r3, r2
 801e70e:	d007      	beq.n	801e720 <TIM_OC1_SetConfig+0x88>
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	4a2c      	ldr	r2, [pc, #176]	; (801e7c4 <TIM_OC1_SetConfig+0x12c>)
 801e714:	4293      	cmp	r3, r2
 801e716:	d003      	beq.n	801e720 <TIM_OC1_SetConfig+0x88>
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	4a2b      	ldr	r2, [pc, #172]	; (801e7c8 <TIM_OC1_SetConfig+0x130>)
 801e71c:	4293      	cmp	r3, r2
 801e71e:	d10c      	bne.n	801e73a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801e720:	697b      	ldr	r3, [r7, #20]
 801e722:	f023 0308 	bic.w	r3, r3, #8
 801e726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801e728:	683b      	ldr	r3, [r7, #0]
 801e72a:	68db      	ldr	r3, [r3, #12]
 801e72c:	697a      	ldr	r2, [r7, #20]
 801e72e:	4313      	orrs	r3, r2
 801e730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801e732:	697b      	ldr	r3, [r7, #20]
 801e734:	f023 0304 	bic.w	r3, r3, #4
 801e738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	4a1d      	ldr	r2, [pc, #116]	; (801e7b4 <TIM_OC1_SetConfig+0x11c>)
 801e73e:	4293      	cmp	r3, r2
 801e740:	d013      	beq.n	801e76a <TIM_OC1_SetConfig+0xd2>
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	4a1c      	ldr	r2, [pc, #112]	; (801e7b8 <TIM_OC1_SetConfig+0x120>)
 801e746:	4293      	cmp	r3, r2
 801e748:	d00f      	beq.n	801e76a <TIM_OC1_SetConfig+0xd2>
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	4a1b      	ldr	r2, [pc, #108]	; (801e7bc <TIM_OC1_SetConfig+0x124>)
 801e74e:	4293      	cmp	r3, r2
 801e750:	d00b      	beq.n	801e76a <TIM_OC1_SetConfig+0xd2>
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	4a1a      	ldr	r2, [pc, #104]	; (801e7c0 <TIM_OC1_SetConfig+0x128>)
 801e756:	4293      	cmp	r3, r2
 801e758:	d007      	beq.n	801e76a <TIM_OC1_SetConfig+0xd2>
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	4a19      	ldr	r2, [pc, #100]	; (801e7c4 <TIM_OC1_SetConfig+0x12c>)
 801e75e:	4293      	cmp	r3, r2
 801e760:	d003      	beq.n	801e76a <TIM_OC1_SetConfig+0xd2>
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	4a18      	ldr	r2, [pc, #96]	; (801e7c8 <TIM_OC1_SetConfig+0x130>)
 801e766:	4293      	cmp	r3, r2
 801e768:	d111      	bne.n	801e78e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801e76a:	693b      	ldr	r3, [r7, #16]
 801e76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801e772:	693b      	ldr	r3, [r7, #16]
 801e774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801e778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801e77a:	683b      	ldr	r3, [r7, #0]
 801e77c:	695b      	ldr	r3, [r3, #20]
 801e77e:	693a      	ldr	r2, [r7, #16]
 801e780:	4313      	orrs	r3, r2
 801e782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801e784:	683b      	ldr	r3, [r7, #0]
 801e786:	699b      	ldr	r3, [r3, #24]
 801e788:	693a      	ldr	r2, [r7, #16]
 801e78a:	4313      	orrs	r3, r2
 801e78c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	693a      	ldr	r2, [r7, #16]
 801e792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	68fa      	ldr	r2, [r7, #12]
 801e798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801e79a:	683b      	ldr	r3, [r7, #0]
 801e79c:	685a      	ldr	r2, [r3, #4]
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	697a      	ldr	r2, [r7, #20]
 801e7a6:	621a      	str	r2, [r3, #32]
}
 801e7a8:	bf00      	nop
 801e7aa:	371c      	adds	r7, #28
 801e7ac:	46bd      	mov	sp, r7
 801e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7b2:	4770      	bx	lr
 801e7b4:	40012c00 	.word	0x40012c00
 801e7b8:	40013400 	.word	0x40013400
 801e7bc:	40014000 	.word	0x40014000
 801e7c0:	40014400 	.word	0x40014400
 801e7c4:	40014800 	.word	0x40014800
 801e7c8:	40015000 	.word	0x40015000

0801e7cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801e7cc:	b480      	push	{r7}
 801e7ce:	b087      	sub	sp, #28
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	6078      	str	r0, [r7, #4]
 801e7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	6a1b      	ldr	r3, [r3, #32]
 801e7da:	f023 0210 	bic.w	r2, r3, #16
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	6a1b      	ldr	r3, [r3, #32]
 801e7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	685b      	ldr	r3, [r3, #4]
 801e7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	699b      	ldr	r3, [r3, #24]
 801e7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801e7f4:	68fb      	ldr	r3, [r7, #12]
 801e7f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801e7fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801e7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801e806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801e808:	683b      	ldr	r3, [r7, #0]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	021b      	lsls	r3, r3, #8
 801e80e:	68fa      	ldr	r2, [r7, #12]
 801e810:	4313      	orrs	r3, r2
 801e812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801e814:	697b      	ldr	r3, [r7, #20]
 801e816:	f023 0320 	bic.w	r3, r3, #32
 801e81a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801e81c:	683b      	ldr	r3, [r7, #0]
 801e81e:	689b      	ldr	r3, [r3, #8]
 801e820:	011b      	lsls	r3, r3, #4
 801e822:	697a      	ldr	r2, [r7, #20]
 801e824:	4313      	orrs	r3, r2
 801e826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	4a2c      	ldr	r2, [pc, #176]	; (801e8dc <TIM_OC2_SetConfig+0x110>)
 801e82c:	4293      	cmp	r3, r2
 801e82e:	d007      	beq.n	801e840 <TIM_OC2_SetConfig+0x74>
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	4a2b      	ldr	r2, [pc, #172]	; (801e8e0 <TIM_OC2_SetConfig+0x114>)
 801e834:	4293      	cmp	r3, r2
 801e836:	d003      	beq.n	801e840 <TIM_OC2_SetConfig+0x74>
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	4a2a      	ldr	r2, [pc, #168]	; (801e8e4 <TIM_OC2_SetConfig+0x118>)
 801e83c:	4293      	cmp	r3, r2
 801e83e:	d10d      	bne.n	801e85c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801e840:	697b      	ldr	r3, [r7, #20]
 801e842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801e848:	683b      	ldr	r3, [r7, #0]
 801e84a:	68db      	ldr	r3, [r3, #12]
 801e84c:	011b      	lsls	r3, r3, #4
 801e84e:	697a      	ldr	r2, [r7, #20]
 801e850:	4313      	orrs	r3, r2
 801e852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801e854:	697b      	ldr	r3, [r7, #20]
 801e856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e85a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	4a1f      	ldr	r2, [pc, #124]	; (801e8dc <TIM_OC2_SetConfig+0x110>)
 801e860:	4293      	cmp	r3, r2
 801e862:	d013      	beq.n	801e88c <TIM_OC2_SetConfig+0xc0>
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	4a1e      	ldr	r2, [pc, #120]	; (801e8e0 <TIM_OC2_SetConfig+0x114>)
 801e868:	4293      	cmp	r3, r2
 801e86a:	d00f      	beq.n	801e88c <TIM_OC2_SetConfig+0xc0>
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	4a1e      	ldr	r2, [pc, #120]	; (801e8e8 <TIM_OC2_SetConfig+0x11c>)
 801e870:	4293      	cmp	r3, r2
 801e872:	d00b      	beq.n	801e88c <TIM_OC2_SetConfig+0xc0>
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	4a1d      	ldr	r2, [pc, #116]	; (801e8ec <TIM_OC2_SetConfig+0x120>)
 801e878:	4293      	cmp	r3, r2
 801e87a:	d007      	beq.n	801e88c <TIM_OC2_SetConfig+0xc0>
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	4a1c      	ldr	r2, [pc, #112]	; (801e8f0 <TIM_OC2_SetConfig+0x124>)
 801e880:	4293      	cmp	r3, r2
 801e882:	d003      	beq.n	801e88c <TIM_OC2_SetConfig+0xc0>
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	4a17      	ldr	r2, [pc, #92]	; (801e8e4 <TIM_OC2_SetConfig+0x118>)
 801e888:	4293      	cmp	r3, r2
 801e88a:	d113      	bne.n	801e8b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801e88c:	693b      	ldr	r3, [r7, #16]
 801e88e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801e892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801e894:	693b      	ldr	r3, [r7, #16]
 801e896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801e89a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801e89c:	683b      	ldr	r3, [r7, #0]
 801e89e:	695b      	ldr	r3, [r3, #20]
 801e8a0:	009b      	lsls	r3, r3, #2
 801e8a2:	693a      	ldr	r2, [r7, #16]
 801e8a4:	4313      	orrs	r3, r2
 801e8a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801e8a8:	683b      	ldr	r3, [r7, #0]
 801e8aa:	699b      	ldr	r3, [r3, #24]
 801e8ac:	009b      	lsls	r3, r3, #2
 801e8ae:	693a      	ldr	r2, [r7, #16]
 801e8b0:	4313      	orrs	r3, r2
 801e8b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	693a      	ldr	r2, [r7, #16]
 801e8b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	68fa      	ldr	r2, [r7, #12]
 801e8be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	685a      	ldr	r2, [r3, #4]
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	697a      	ldr	r2, [r7, #20]
 801e8cc:	621a      	str	r2, [r3, #32]
}
 801e8ce:	bf00      	nop
 801e8d0:	371c      	adds	r7, #28
 801e8d2:	46bd      	mov	sp, r7
 801e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8d8:	4770      	bx	lr
 801e8da:	bf00      	nop
 801e8dc:	40012c00 	.word	0x40012c00
 801e8e0:	40013400 	.word	0x40013400
 801e8e4:	40015000 	.word	0x40015000
 801e8e8:	40014000 	.word	0x40014000
 801e8ec:	40014400 	.word	0x40014400
 801e8f0:	40014800 	.word	0x40014800

0801e8f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801e8f4:	b480      	push	{r7}
 801e8f6:	b087      	sub	sp, #28
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	6078      	str	r0, [r7, #4]
 801e8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	6a1b      	ldr	r3, [r3, #32]
 801e902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	6a1b      	ldr	r3, [r3, #32]
 801e90e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	685b      	ldr	r3, [r3, #4]
 801e914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	69db      	ldr	r3, [r3, #28]
 801e91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	f023 0303 	bic.w	r3, r3, #3
 801e92e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801e930:	683b      	ldr	r3, [r7, #0]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	68fa      	ldr	r2, [r7, #12]
 801e936:	4313      	orrs	r3, r2
 801e938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801e93a:	697b      	ldr	r3, [r7, #20]
 801e93c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801e940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	689b      	ldr	r3, [r3, #8]
 801e946:	021b      	lsls	r3, r3, #8
 801e948:	697a      	ldr	r2, [r7, #20]
 801e94a:	4313      	orrs	r3, r2
 801e94c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	4a2b      	ldr	r2, [pc, #172]	; (801ea00 <TIM_OC3_SetConfig+0x10c>)
 801e952:	4293      	cmp	r3, r2
 801e954:	d007      	beq.n	801e966 <TIM_OC3_SetConfig+0x72>
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	4a2a      	ldr	r2, [pc, #168]	; (801ea04 <TIM_OC3_SetConfig+0x110>)
 801e95a:	4293      	cmp	r3, r2
 801e95c:	d003      	beq.n	801e966 <TIM_OC3_SetConfig+0x72>
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	4a29      	ldr	r2, [pc, #164]	; (801ea08 <TIM_OC3_SetConfig+0x114>)
 801e962:	4293      	cmp	r3, r2
 801e964:	d10d      	bne.n	801e982 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801e966:	697b      	ldr	r3, [r7, #20]
 801e968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801e96c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801e96e:	683b      	ldr	r3, [r7, #0]
 801e970:	68db      	ldr	r3, [r3, #12]
 801e972:	021b      	lsls	r3, r3, #8
 801e974:	697a      	ldr	r2, [r7, #20]
 801e976:	4313      	orrs	r3, r2
 801e978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801e97a:	697b      	ldr	r3, [r7, #20]
 801e97c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801e980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	4a1e      	ldr	r2, [pc, #120]	; (801ea00 <TIM_OC3_SetConfig+0x10c>)
 801e986:	4293      	cmp	r3, r2
 801e988:	d013      	beq.n	801e9b2 <TIM_OC3_SetConfig+0xbe>
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	4a1d      	ldr	r2, [pc, #116]	; (801ea04 <TIM_OC3_SetConfig+0x110>)
 801e98e:	4293      	cmp	r3, r2
 801e990:	d00f      	beq.n	801e9b2 <TIM_OC3_SetConfig+0xbe>
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	4a1d      	ldr	r2, [pc, #116]	; (801ea0c <TIM_OC3_SetConfig+0x118>)
 801e996:	4293      	cmp	r3, r2
 801e998:	d00b      	beq.n	801e9b2 <TIM_OC3_SetConfig+0xbe>
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	4a1c      	ldr	r2, [pc, #112]	; (801ea10 <TIM_OC3_SetConfig+0x11c>)
 801e99e:	4293      	cmp	r3, r2
 801e9a0:	d007      	beq.n	801e9b2 <TIM_OC3_SetConfig+0xbe>
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	4a1b      	ldr	r2, [pc, #108]	; (801ea14 <TIM_OC3_SetConfig+0x120>)
 801e9a6:	4293      	cmp	r3, r2
 801e9a8:	d003      	beq.n	801e9b2 <TIM_OC3_SetConfig+0xbe>
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	4a16      	ldr	r2, [pc, #88]	; (801ea08 <TIM_OC3_SetConfig+0x114>)
 801e9ae:	4293      	cmp	r3, r2
 801e9b0:	d113      	bne.n	801e9da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801e9b2:	693b      	ldr	r3, [r7, #16]
 801e9b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e9b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801e9ba:	693b      	ldr	r3, [r7, #16]
 801e9bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801e9c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801e9c2:	683b      	ldr	r3, [r7, #0]
 801e9c4:	695b      	ldr	r3, [r3, #20]
 801e9c6:	011b      	lsls	r3, r3, #4
 801e9c8:	693a      	ldr	r2, [r7, #16]
 801e9ca:	4313      	orrs	r3, r2
 801e9cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801e9ce:	683b      	ldr	r3, [r7, #0]
 801e9d0:	699b      	ldr	r3, [r3, #24]
 801e9d2:	011b      	lsls	r3, r3, #4
 801e9d4:	693a      	ldr	r2, [r7, #16]
 801e9d6:	4313      	orrs	r3, r2
 801e9d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	693a      	ldr	r2, [r7, #16]
 801e9de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	68fa      	ldr	r2, [r7, #12]
 801e9e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801e9e6:	683b      	ldr	r3, [r7, #0]
 801e9e8:	685a      	ldr	r2, [r3, #4]
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	697a      	ldr	r2, [r7, #20]
 801e9f2:	621a      	str	r2, [r3, #32]
}
 801e9f4:	bf00      	nop
 801e9f6:	371c      	adds	r7, #28
 801e9f8:	46bd      	mov	sp, r7
 801e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9fe:	4770      	bx	lr
 801ea00:	40012c00 	.word	0x40012c00
 801ea04:	40013400 	.word	0x40013400
 801ea08:	40015000 	.word	0x40015000
 801ea0c:	40014000 	.word	0x40014000
 801ea10:	40014400 	.word	0x40014400
 801ea14:	40014800 	.word	0x40014800

0801ea18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ea18:	b480      	push	{r7}
 801ea1a:	b087      	sub	sp, #28
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
 801ea20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	6a1b      	ldr	r3, [r3, #32]
 801ea26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	6a1b      	ldr	r3, [r3, #32]
 801ea32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	685b      	ldr	r3, [r3, #4]
 801ea38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	69db      	ldr	r3, [r3, #28]
 801ea3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ea46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ea4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ea52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ea54:	683b      	ldr	r3, [r7, #0]
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	021b      	lsls	r3, r3, #8
 801ea5a:	68fa      	ldr	r2, [r7, #12]
 801ea5c:	4313      	orrs	r3, r2
 801ea5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ea60:	697b      	ldr	r3, [r7, #20]
 801ea62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ea66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ea68:	683b      	ldr	r3, [r7, #0]
 801ea6a:	689b      	ldr	r3, [r3, #8]
 801ea6c:	031b      	lsls	r3, r3, #12
 801ea6e:	697a      	ldr	r2, [r7, #20]
 801ea70:	4313      	orrs	r3, r2
 801ea72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	4a2c      	ldr	r2, [pc, #176]	; (801eb28 <TIM_OC4_SetConfig+0x110>)
 801ea78:	4293      	cmp	r3, r2
 801ea7a:	d007      	beq.n	801ea8c <TIM_OC4_SetConfig+0x74>
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	4a2b      	ldr	r2, [pc, #172]	; (801eb2c <TIM_OC4_SetConfig+0x114>)
 801ea80:	4293      	cmp	r3, r2
 801ea82:	d003      	beq.n	801ea8c <TIM_OC4_SetConfig+0x74>
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	4a2a      	ldr	r2, [pc, #168]	; (801eb30 <TIM_OC4_SetConfig+0x118>)
 801ea88:	4293      	cmp	r3, r2
 801ea8a:	d10d      	bne.n	801eaa8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801ea8c:	697b      	ldr	r3, [r7, #20]
 801ea8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ea92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801ea94:	683b      	ldr	r3, [r7, #0]
 801ea96:	68db      	ldr	r3, [r3, #12]
 801ea98:	031b      	lsls	r3, r3, #12
 801ea9a:	697a      	ldr	r2, [r7, #20]
 801ea9c:	4313      	orrs	r3, r2
 801ea9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801eaa0:	697b      	ldr	r3, [r7, #20]
 801eaa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801eaa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	4a1f      	ldr	r2, [pc, #124]	; (801eb28 <TIM_OC4_SetConfig+0x110>)
 801eaac:	4293      	cmp	r3, r2
 801eaae:	d013      	beq.n	801ead8 <TIM_OC4_SetConfig+0xc0>
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	4a1e      	ldr	r2, [pc, #120]	; (801eb2c <TIM_OC4_SetConfig+0x114>)
 801eab4:	4293      	cmp	r3, r2
 801eab6:	d00f      	beq.n	801ead8 <TIM_OC4_SetConfig+0xc0>
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	4a1e      	ldr	r2, [pc, #120]	; (801eb34 <TIM_OC4_SetConfig+0x11c>)
 801eabc:	4293      	cmp	r3, r2
 801eabe:	d00b      	beq.n	801ead8 <TIM_OC4_SetConfig+0xc0>
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	4a1d      	ldr	r2, [pc, #116]	; (801eb38 <TIM_OC4_SetConfig+0x120>)
 801eac4:	4293      	cmp	r3, r2
 801eac6:	d007      	beq.n	801ead8 <TIM_OC4_SetConfig+0xc0>
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	4a1c      	ldr	r2, [pc, #112]	; (801eb3c <TIM_OC4_SetConfig+0x124>)
 801eacc:	4293      	cmp	r3, r2
 801eace:	d003      	beq.n	801ead8 <TIM_OC4_SetConfig+0xc0>
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	4a17      	ldr	r2, [pc, #92]	; (801eb30 <TIM_OC4_SetConfig+0x118>)
 801ead4:	4293      	cmp	r3, r2
 801ead6:	d113      	bne.n	801eb00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ead8:	693b      	ldr	r3, [r7, #16]
 801eada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801eade:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801eae0:	693b      	ldr	r3, [r7, #16]
 801eae2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801eae6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801eae8:	683b      	ldr	r3, [r7, #0]
 801eaea:	695b      	ldr	r3, [r3, #20]
 801eaec:	019b      	lsls	r3, r3, #6
 801eaee:	693a      	ldr	r2, [r7, #16]
 801eaf0:	4313      	orrs	r3, r2
 801eaf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801eaf4:	683b      	ldr	r3, [r7, #0]
 801eaf6:	699b      	ldr	r3, [r3, #24]
 801eaf8:	019b      	lsls	r3, r3, #6
 801eafa:	693a      	ldr	r2, [r7, #16]
 801eafc:	4313      	orrs	r3, r2
 801eafe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	693a      	ldr	r2, [r7, #16]
 801eb04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	68fa      	ldr	r2, [r7, #12]
 801eb0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801eb0c:	683b      	ldr	r3, [r7, #0]
 801eb0e:	685a      	ldr	r2, [r3, #4]
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	697a      	ldr	r2, [r7, #20]
 801eb18:	621a      	str	r2, [r3, #32]
}
 801eb1a:	bf00      	nop
 801eb1c:	371c      	adds	r7, #28
 801eb1e:	46bd      	mov	sp, r7
 801eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb24:	4770      	bx	lr
 801eb26:	bf00      	nop
 801eb28:	40012c00 	.word	0x40012c00
 801eb2c:	40013400 	.word	0x40013400
 801eb30:	40015000 	.word	0x40015000
 801eb34:	40014000 	.word	0x40014000
 801eb38:	40014400 	.word	0x40014400
 801eb3c:	40014800 	.word	0x40014800

0801eb40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801eb40:	b480      	push	{r7}
 801eb42:	b087      	sub	sp, #28
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	6078      	str	r0, [r7, #4]
 801eb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	6a1b      	ldr	r3, [r3, #32]
 801eb4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	6a1b      	ldr	r3, [r3, #32]
 801eb5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	685b      	ldr	r3, [r3, #4]
 801eb60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801eb6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801eb72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801eb74:	683b      	ldr	r3, [r7, #0]
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	68fa      	ldr	r2, [r7, #12]
 801eb7a:	4313      	orrs	r3, r2
 801eb7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801eb7e:	693b      	ldr	r3, [r7, #16]
 801eb80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801eb84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801eb86:	683b      	ldr	r3, [r7, #0]
 801eb88:	689b      	ldr	r3, [r3, #8]
 801eb8a:	041b      	lsls	r3, r3, #16
 801eb8c:	693a      	ldr	r2, [r7, #16]
 801eb8e:	4313      	orrs	r3, r2
 801eb90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	4a19      	ldr	r2, [pc, #100]	; (801ebfc <TIM_OC5_SetConfig+0xbc>)
 801eb96:	4293      	cmp	r3, r2
 801eb98:	d013      	beq.n	801ebc2 <TIM_OC5_SetConfig+0x82>
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	4a18      	ldr	r2, [pc, #96]	; (801ec00 <TIM_OC5_SetConfig+0xc0>)
 801eb9e:	4293      	cmp	r3, r2
 801eba0:	d00f      	beq.n	801ebc2 <TIM_OC5_SetConfig+0x82>
 801eba2:	687b      	ldr	r3, [r7, #4]
 801eba4:	4a17      	ldr	r2, [pc, #92]	; (801ec04 <TIM_OC5_SetConfig+0xc4>)
 801eba6:	4293      	cmp	r3, r2
 801eba8:	d00b      	beq.n	801ebc2 <TIM_OC5_SetConfig+0x82>
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	4a16      	ldr	r2, [pc, #88]	; (801ec08 <TIM_OC5_SetConfig+0xc8>)
 801ebae:	4293      	cmp	r3, r2
 801ebb0:	d007      	beq.n	801ebc2 <TIM_OC5_SetConfig+0x82>
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	4a15      	ldr	r2, [pc, #84]	; (801ec0c <TIM_OC5_SetConfig+0xcc>)
 801ebb6:	4293      	cmp	r3, r2
 801ebb8:	d003      	beq.n	801ebc2 <TIM_OC5_SetConfig+0x82>
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	4a14      	ldr	r2, [pc, #80]	; (801ec10 <TIM_OC5_SetConfig+0xd0>)
 801ebbe:	4293      	cmp	r3, r2
 801ebc0:	d109      	bne.n	801ebd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ebc2:	697b      	ldr	r3, [r7, #20]
 801ebc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ebc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	695b      	ldr	r3, [r3, #20]
 801ebce:	021b      	lsls	r3, r3, #8
 801ebd0:	697a      	ldr	r2, [r7, #20]
 801ebd2:	4313      	orrs	r3, r2
 801ebd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	697a      	ldr	r2, [r7, #20]
 801ebda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	68fa      	ldr	r2, [r7, #12]
 801ebe0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ebe2:	683b      	ldr	r3, [r7, #0]
 801ebe4:	685a      	ldr	r2, [r3, #4]
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	693a      	ldr	r2, [r7, #16]
 801ebee:	621a      	str	r2, [r3, #32]
}
 801ebf0:	bf00      	nop
 801ebf2:	371c      	adds	r7, #28
 801ebf4:	46bd      	mov	sp, r7
 801ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebfa:	4770      	bx	lr
 801ebfc:	40012c00 	.word	0x40012c00
 801ec00:	40013400 	.word	0x40013400
 801ec04:	40014000 	.word	0x40014000
 801ec08:	40014400 	.word	0x40014400
 801ec0c:	40014800 	.word	0x40014800
 801ec10:	40015000 	.word	0x40015000

0801ec14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801ec14:	b480      	push	{r7}
 801ec16:	b087      	sub	sp, #28
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	6078      	str	r0, [r7, #4]
 801ec1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	6a1b      	ldr	r3, [r3, #32]
 801ec22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	6a1b      	ldr	r3, [r3, #32]
 801ec2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	685b      	ldr	r3, [r3, #4]
 801ec34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ec42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ec46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ec48:	683b      	ldr	r3, [r7, #0]
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	021b      	lsls	r3, r3, #8
 801ec4e:	68fa      	ldr	r2, [r7, #12]
 801ec50:	4313      	orrs	r3, r2
 801ec52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801ec54:	693b      	ldr	r3, [r7, #16]
 801ec56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ec5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801ec5c:	683b      	ldr	r3, [r7, #0]
 801ec5e:	689b      	ldr	r3, [r3, #8]
 801ec60:	051b      	lsls	r3, r3, #20
 801ec62:	693a      	ldr	r2, [r7, #16]
 801ec64:	4313      	orrs	r3, r2
 801ec66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	4a1a      	ldr	r2, [pc, #104]	; (801ecd4 <TIM_OC6_SetConfig+0xc0>)
 801ec6c:	4293      	cmp	r3, r2
 801ec6e:	d013      	beq.n	801ec98 <TIM_OC6_SetConfig+0x84>
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	4a19      	ldr	r2, [pc, #100]	; (801ecd8 <TIM_OC6_SetConfig+0xc4>)
 801ec74:	4293      	cmp	r3, r2
 801ec76:	d00f      	beq.n	801ec98 <TIM_OC6_SetConfig+0x84>
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	4a18      	ldr	r2, [pc, #96]	; (801ecdc <TIM_OC6_SetConfig+0xc8>)
 801ec7c:	4293      	cmp	r3, r2
 801ec7e:	d00b      	beq.n	801ec98 <TIM_OC6_SetConfig+0x84>
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	4a17      	ldr	r2, [pc, #92]	; (801ece0 <TIM_OC6_SetConfig+0xcc>)
 801ec84:	4293      	cmp	r3, r2
 801ec86:	d007      	beq.n	801ec98 <TIM_OC6_SetConfig+0x84>
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	4a16      	ldr	r2, [pc, #88]	; (801ece4 <TIM_OC6_SetConfig+0xd0>)
 801ec8c:	4293      	cmp	r3, r2
 801ec8e:	d003      	beq.n	801ec98 <TIM_OC6_SetConfig+0x84>
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	4a15      	ldr	r2, [pc, #84]	; (801ece8 <TIM_OC6_SetConfig+0xd4>)
 801ec94:	4293      	cmp	r3, r2
 801ec96:	d109      	bne.n	801ecac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801ec98:	697b      	ldr	r3, [r7, #20]
 801ec9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ec9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801eca0:	683b      	ldr	r3, [r7, #0]
 801eca2:	695b      	ldr	r3, [r3, #20]
 801eca4:	029b      	lsls	r3, r3, #10
 801eca6:	697a      	ldr	r2, [r7, #20]
 801eca8:	4313      	orrs	r3, r2
 801ecaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	697a      	ldr	r2, [r7, #20]
 801ecb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	68fa      	ldr	r2, [r7, #12]
 801ecb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ecb8:	683b      	ldr	r3, [r7, #0]
 801ecba:	685a      	ldr	r2, [r3, #4]
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	693a      	ldr	r2, [r7, #16]
 801ecc4:	621a      	str	r2, [r3, #32]
}
 801ecc6:	bf00      	nop
 801ecc8:	371c      	adds	r7, #28
 801ecca:	46bd      	mov	sp, r7
 801eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecd0:	4770      	bx	lr
 801ecd2:	bf00      	nop
 801ecd4:	40012c00 	.word	0x40012c00
 801ecd8:	40013400 	.word	0x40013400
 801ecdc:	40014000 	.word	0x40014000
 801ece0:	40014400 	.word	0x40014400
 801ece4:	40014800 	.word	0x40014800
 801ece8:	40015000 	.word	0x40015000

0801ecec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801ecec:	b480      	push	{r7}
 801ecee:	b087      	sub	sp, #28
 801ecf0:	af00      	add	r7, sp, #0
 801ecf2:	60f8      	str	r0, [r7, #12]
 801ecf4:	60b9      	str	r1, [r7, #8]
 801ecf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801ecf8:	68bb      	ldr	r3, [r7, #8]
 801ecfa:	f003 031f 	and.w	r3, r3, #31
 801ecfe:	2201      	movs	r2, #1
 801ed00:	fa02 f303 	lsl.w	r3, r2, r3
 801ed04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	6a1a      	ldr	r2, [r3, #32]
 801ed0a:	697b      	ldr	r3, [r7, #20]
 801ed0c:	43db      	mvns	r3, r3
 801ed0e:	401a      	ands	r2, r3
 801ed10:	68fb      	ldr	r3, [r7, #12]
 801ed12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801ed14:	68fb      	ldr	r3, [r7, #12]
 801ed16:	6a1a      	ldr	r2, [r3, #32]
 801ed18:	68bb      	ldr	r3, [r7, #8]
 801ed1a:	f003 031f 	and.w	r3, r3, #31
 801ed1e:	6879      	ldr	r1, [r7, #4]
 801ed20:	fa01 f303 	lsl.w	r3, r1, r3
 801ed24:	431a      	orrs	r2, r3
 801ed26:	68fb      	ldr	r3, [r7, #12]
 801ed28:	621a      	str	r2, [r3, #32]
}
 801ed2a:	bf00      	nop
 801ed2c:	371c      	adds	r7, #28
 801ed2e:	46bd      	mov	sp, r7
 801ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed34:	4770      	bx	lr
	...

0801ed38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801ed38:	b480      	push	{r7}
 801ed3a:	b085      	sub	sp, #20
 801ed3c:	af00      	add	r7, sp, #0
 801ed3e:	6078      	str	r0, [r7, #4]
 801ed40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ed48:	2b01      	cmp	r3, #1
 801ed4a:	d101      	bne.n	801ed50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801ed4c:	2302      	movs	r3, #2
 801ed4e:	e06f      	b.n	801ee30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	2201      	movs	r2, #1
 801ed54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	2202      	movs	r2, #2
 801ed5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	681b      	ldr	r3, [r3, #0]
 801ed64:	685b      	ldr	r3, [r3, #4]
 801ed66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	689b      	ldr	r3, [r3, #8]
 801ed6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	4a31      	ldr	r2, [pc, #196]	; (801ee3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801ed76:	4293      	cmp	r3, r2
 801ed78:	d009      	beq.n	801ed8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	681b      	ldr	r3, [r3, #0]
 801ed7e:	4a30      	ldr	r2, [pc, #192]	; (801ee40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801ed80:	4293      	cmp	r3, r2
 801ed82:	d004      	beq.n	801ed8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	4a2e      	ldr	r2, [pc, #184]	; (801ee44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801ed8a:	4293      	cmp	r3, r2
 801ed8c:	d108      	bne.n	801eda0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801ed8e:	68fb      	ldr	r3, [r7, #12]
 801ed90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801ed94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801ed96:	683b      	ldr	r3, [r7, #0]
 801ed98:	685b      	ldr	r3, [r3, #4]
 801ed9a:	68fa      	ldr	r2, [r7, #12]
 801ed9c:	4313      	orrs	r3, r2
 801ed9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801eda0:	68fb      	ldr	r3, [r7, #12]
 801eda2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801eda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801edaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801edac:	683b      	ldr	r3, [r7, #0]
 801edae:	681b      	ldr	r3, [r3, #0]
 801edb0:	68fa      	ldr	r2, [r7, #12]
 801edb2:	4313      	orrs	r3, r2
 801edb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	681b      	ldr	r3, [r3, #0]
 801edba:	68fa      	ldr	r2, [r7, #12]
 801edbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	4a1e      	ldr	r2, [pc, #120]	; (801ee3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801edc4:	4293      	cmp	r3, r2
 801edc6:	d01d      	beq.n	801ee04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801edd0:	d018      	beq.n	801ee04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	4a1c      	ldr	r2, [pc, #112]	; (801ee48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801edd8:	4293      	cmp	r3, r2
 801edda:	d013      	beq.n	801ee04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	4a1a      	ldr	r2, [pc, #104]	; (801ee4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801ede2:	4293      	cmp	r3, r2
 801ede4:	d00e      	beq.n	801ee04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	681b      	ldr	r3, [r3, #0]
 801edea:	4a15      	ldr	r2, [pc, #84]	; (801ee40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801edec:	4293      	cmp	r3, r2
 801edee:	d009      	beq.n	801ee04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	681b      	ldr	r3, [r3, #0]
 801edf4:	4a16      	ldr	r2, [pc, #88]	; (801ee50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801edf6:	4293      	cmp	r3, r2
 801edf8:	d004      	beq.n	801ee04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	4a11      	ldr	r2, [pc, #68]	; (801ee44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801ee00:	4293      	cmp	r3, r2
 801ee02:	d10c      	bne.n	801ee1e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801ee04:	68bb      	ldr	r3, [r7, #8]
 801ee06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ee0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801ee0c:	683b      	ldr	r3, [r7, #0]
 801ee0e:	689b      	ldr	r3, [r3, #8]
 801ee10:	68ba      	ldr	r2, [r7, #8]
 801ee12:	4313      	orrs	r3, r2
 801ee14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	68ba      	ldr	r2, [r7, #8]
 801ee1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	2201      	movs	r2, #1
 801ee22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	2200      	movs	r2, #0
 801ee2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ee2e:	2300      	movs	r3, #0
}
 801ee30:	4618      	mov	r0, r3
 801ee32:	3714      	adds	r7, #20
 801ee34:	46bd      	mov	sp, r7
 801ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee3a:	4770      	bx	lr
 801ee3c:	40012c00 	.word	0x40012c00
 801ee40:	40013400 	.word	0x40013400
 801ee44:	40015000 	.word	0x40015000
 801ee48:	40000400 	.word	0x40000400
 801ee4c:	40000800 	.word	0x40000800
 801ee50:	40014000 	.word	0x40014000

0801ee54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801ee54:	b480      	push	{r7}
 801ee56:	b085      	sub	sp, #20
 801ee58:	af00      	add	r7, sp, #0
 801ee5a:	6078      	str	r0, [r7, #4]
 801ee5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801ee5e:	2300      	movs	r3, #0
 801ee60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ee68:	2b01      	cmp	r3, #1
 801ee6a:	d101      	bne.n	801ee70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801ee6c:	2302      	movs	r3, #2
 801ee6e:	e096      	b.n	801ef9e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	2201      	movs	r2, #1
 801ee74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801ee78:	68fb      	ldr	r3, [r7, #12]
 801ee7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801ee7e:	683b      	ldr	r3, [r7, #0]
 801ee80:	68db      	ldr	r3, [r3, #12]
 801ee82:	4313      	orrs	r3, r2
 801ee84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801ee86:	68fb      	ldr	r3, [r7, #12]
 801ee88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ee8c:	683b      	ldr	r3, [r7, #0]
 801ee8e:	689b      	ldr	r3, [r3, #8]
 801ee90:	4313      	orrs	r3, r2
 801ee92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801ee9a:	683b      	ldr	r3, [r7, #0]
 801ee9c:	685b      	ldr	r3, [r3, #4]
 801ee9e:	4313      	orrs	r3, r2
 801eea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801eea8:	683b      	ldr	r3, [r7, #0]
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	4313      	orrs	r3, r2
 801eeae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801eeb0:	68fb      	ldr	r3, [r7, #12]
 801eeb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801eeb6:	683b      	ldr	r3, [r7, #0]
 801eeb8:	691b      	ldr	r3, [r3, #16]
 801eeba:	4313      	orrs	r3, r2
 801eebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801eec4:	683b      	ldr	r3, [r7, #0]
 801eec6:	695b      	ldr	r3, [r3, #20]
 801eec8:	4313      	orrs	r3, r2
 801eeca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801eecc:	68fb      	ldr	r3, [r7, #12]
 801eece:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801eed2:	683b      	ldr	r3, [r7, #0]
 801eed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eed6:	4313      	orrs	r3, r2
 801eed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801eeda:	68fb      	ldr	r3, [r7, #12]
 801eedc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801eee0:	683b      	ldr	r3, [r7, #0]
 801eee2:	699b      	ldr	r3, [r3, #24]
 801eee4:	041b      	lsls	r3, r3, #16
 801eee6:	4313      	orrs	r3, r2
 801eee8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	4a2f      	ldr	r2, [pc, #188]	; (801efac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801eef0:	4293      	cmp	r3, r2
 801eef2:	d009      	beq.n	801ef08 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	4a2d      	ldr	r2, [pc, #180]	; (801efb0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801eefa:	4293      	cmp	r3, r2
 801eefc:	d004      	beq.n	801ef08 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	681b      	ldr	r3, [r3, #0]
 801ef02:	4a2c      	ldr	r2, [pc, #176]	; (801efb4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801ef04:	4293      	cmp	r3, r2
 801ef06:	d106      	bne.n	801ef16 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801ef0e:	683b      	ldr	r3, [r7, #0]
 801ef10:	69db      	ldr	r3, [r3, #28]
 801ef12:	4313      	orrs	r3, r2
 801ef14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	4a24      	ldr	r2, [pc, #144]	; (801efac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801ef1c:	4293      	cmp	r3, r2
 801ef1e:	d009      	beq.n	801ef34 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	4a22      	ldr	r2, [pc, #136]	; (801efb0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801ef26:	4293      	cmp	r3, r2
 801ef28:	d004      	beq.n	801ef34 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	4a21      	ldr	r2, [pc, #132]	; (801efb4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801ef30:	4293      	cmp	r3, r2
 801ef32:	d12b      	bne.n	801ef8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801ef34:	68fb      	ldr	r3, [r7, #12]
 801ef36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801ef3a:	683b      	ldr	r3, [r7, #0]
 801ef3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef3e:	051b      	lsls	r3, r3, #20
 801ef40:	4313      	orrs	r3, r2
 801ef42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801ef44:	68fb      	ldr	r3, [r7, #12]
 801ef46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801ef4a:	683b      	ldr	r3, [r7, #0]
 801ef4c:	6a1b      	ldr	r3, [r3, #32]
 801ef4e:	4313      	orrs	r3, r2
 801ef50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801ef52:	68fb      	ldr	r3, [r7, #12]
 801ef54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801ef58:	683b      	ldr	r3, [r7, #0]
 801ef5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef5c:	4313      	orrs	r3, r2
 801ef5e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	681b      	ldr	r3, [r3, #0]
 801ef64:	4a11      	ldr	r2, [pc, #68]	; (801efac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801ef66:	4293      	cmp	r3, r2
 801ef68:	d009      	beq.n	801ef7e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	4a10      	ldr	r2, [pc, #64]	; (801efb0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801ef70:	4293      	cmp	r3, r2
 801ef72:	d004      	beq.n	801ef7e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	4a0e      	ldr	r2, [pc, #56]	; (801efb4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801ef7a:	4293      	cmp	r3, r2
 801ef7c:	d106      	bne.n	801ef8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801ef84:	683b      	ldr	r3, [r7, #0]
 801ef86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef88:	4313      	orrs	r3, r2
 801ef8a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	68fa      	ldr	r2, [r7, #12]
 801ef92:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	2200      	movs	r2, #0
 801ef98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ef9c:	2300      	movs	r3, #0
}
 801ef9e:	4618      	mov	r0, r3
 801efa0:	3714      	adds	r7, #20
 801efa2:	46bd      	mov	sp, r7
 801efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efa8:	4770      	bx	lr
 801efaa:	bf00      	nop
 801efac:	40012c00 	.word	0x40012c00
 801efb0:	40013400 	.word	0x40013400
 801efb4:	40015000 	.word	0x40015000

0801efb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801efb8:	b480      	push	{r7}
 801efba:	b083      	sub	sp, #12
 801efbc:	af00      	add	r7, sp, #0
 801efbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801efc0:	bf00      	nop
 801efc2:	370c      	adds	r7, #12
 801efc4:	46bd      	mov	sp, r7
 801efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efca:	4770      	bx	lr

0801efcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801efcc:	b480      	push	{r7}
 801efce:	b083      	sub	sp, #12
 801efd0:	af00      	add	r7, sp, #0
 801efd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801efd4:	bf00      	nop
 801efd6:	370c      	adds	r7, #12
 801efd8:	46bd      	mov	sp, r7
 801efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efde:	4770      	bx	lr

0801efe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801efe0:	b480      	push	{r7}
 801efe2:	b083      	sub	sp, #12
 801efe4:	af00      	add	r7, sp, #0
 801efe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801efe8:	bf00      	nop
 801efea:	370c      	adds	r7, #12
 801efec:	46bd      	mov	sp, r7
 801efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eff2:	4770      	bx	lr

0801eff4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801eff4:	b480      	push	{r7}
 801eff6:	b083      	sub	sp, #12
 801eff8:	af00      	add	r7, sp, #0
 801effa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801effc:	bf00      	nop
 801effe:	370c      	adds	r7, #12
 801f000:	46bd      	mov	sp, r7
 801f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f006:	4770      	bx	lr

0801f008 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801f008:	b480      	push	{r7}
 801f00a:	b083      	sub	sp, #12
 801f00c:	af00      	add	r7, sp, #0
 801f00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801f010:	bf00      	nop
 801f012:	370c      	adds	r7, #12
 801f014:	46bd      	mov	sp, r7
 801f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f01a:	4770      	bx	lr

0801f01c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801f01c:	b480      	push	{r7}
 801f01e:	b083      	sub	sp, #12
 801f020:	af00      	add	r7, sp, #0
 801f022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801f024:	bf00      	nop
 801f026:	370c      	adds	r7, #12
 801f028:	46bd      	mov	sp, r7
 801f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f02e:	4770      	bx	lr

0801f030 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801f030:	b480      	push	{r7}
 801f032:	b083      	sub	sp, #12
 801f034:	af00      	add	r7, sp, #0
 801f036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801f038:	bf00      	nop
 801f03a:	370c      	adds	r7, #12
 801f03c:	46bd      	mov	sp, r7
 801f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f042:	4770      	bx	lr

0801f044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f044:	b580      	push	{r7, lr}
 801f046:	b082      	sub	sp, #8
 801f048:	af00      	add	r7, sp, #0
 801f04a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d101      	bne.n	801f056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f052:	2301      	movs	r3, #1
 801f054:	e042      	b.n	801f0dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d106      	bne.n	801f06e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	2200      	movs	r2, #0
 801f064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f068:	6878      	ldr	r0, [r7, #4]
 801f06a:	f7f9 fae3 	bl	8018634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	2224      	movs	r2, #36	; 0x24
 801f072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	681a      	ldr	r2, [r3, #0]
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	f022 0201 	bic.w	r2, r2, #1
 801f084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f086:	6878      	ldr	r0, [r7, #4]
 801f088:	f000 f8c2 	bl	801f210 <UART_SetConfig>
 801f08c:	4603      	mov	r3, r0
 801f08e:	2b01      	cmp	r3, #1
 801f090:	d101      	bne.n	801f096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f092:	2301      	movs	r3, #1
 801f094:	e022      	b.n	801f0dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d002      	beq.n	801f0a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f09e:	6878      	ldr	r0, [r7, #4]
 801f0a0:	f000 fbb2 	bl	801f808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	685a      	ldr	r2, [r3, #4]
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f0b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	689a      	ldr	r2, [r3, #8]
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f0c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	681a      	ldr	r2, [r3, #0]
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	f042 0201 	orr.w	r2, r2, #1
 801f0d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f0d4:	6878      	ldr	r0, [r7, #4]
 801f0d6:	f000 fc39 	bl	801f94c <UART_CheckIdleState>
 801f0da:	4603      	mov	r3, r0
}
 801f0dc:	4618      	mov	r0, r3
 801f0de:	3708      	adds	r7, #8
 801f0e0:	46bd      	mov	sp, r7
 801f0e2:	bd80      	pop	{r7, pc}

0801f0e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f0e4:	b580      	push	{r7, lr}
 801f0e6:	b08a      	sub	sp, #40	; 0x28
 801f0e8:	af02      	add	r7, sp, #8
 801f0ea:	60f8      	str	r0, [r7, #12]
 801f0ec:	60b9      	str	r1, [r7, #8]
 801f0ee:	603b      	str	r3, [r7, #0]
 801f0f0:	4613      	mov	r3, r2
 801f0f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f0f4:	68fb      	ldr	r3, [r7, #12]
 801f0f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f0fa:	2b20      	cmp	r3, #32
 801f0fc:	f040 8083 	bne.w	801f206 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801f100:	68bb      	ldr	r3, [r7, #8]
 801f102:	2b00      	cmp	r3, #0
 801f104:	d002      	beq.n	801f10c <HAL_UART_Transmit+0x28>
 801f106:	88fb      	ldrh	r3, [r7, #6]
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d101      	bne.n	801f110 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801f10c:	2301      	movs	r3, #1
 801f10e:	e07b      	b.n	801f208 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801f110:	68fb      	ldr	r3, [r7, #12]
 801f112:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f116:	2b01      	cmp	r3, #1
 801f118:	d101      	bne.n	801f11e <HAL_UART_Transmit+0x3a>
 801f11a:	2302      	movs	r3, #2
 801f11c:	e074      	b.n	801f208 <HAL_UART_Transmit+0x124>
 801f11e:	68fb      	ldr	r3, [r7, #12]
 801f120:	2201      	movs	r2, #1
 801f122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	2200      	movs	r2, #0
 801f12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f12e:	68fb      	ldr	r3, [r7, #12]
 801f130:	2221      	movs	r2, #33	; 0x21
 801f132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f136:	f7f9 fb6b 	bl	8018810 <HAL_GetTick>
 801f13a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f13c:	68fb      	ldr	r3, [r7, #12]
 801f13e:	88fa      	ldrh	r2, [r7, #6]
 801f140:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801f144:	68fb      	ldr	r3, [r7, #12]
 801f146:	88fa      	ldrh	r2, [r7, #6]
 801f148:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f14c:	68fb      	ldr	r3, [r7, #12]
 801f14e:	689b      	ldr	r3, [r3, #8]
 801f150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f154:	d108      	bne.n	801f168 <HAL_UART_Transmit+0x84>
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	691b      	ldr	r3, [r3, #16]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d104      	bne.n	801f168 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801f15e:	2300      	movs	r3, #0
 801f160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f162:	68bb      	ldr	r3, [r7, #8]
 801f164:	61bb      	str	r3, [r7, #24]
 801f166:	e003      	b.n	801f170 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801f168:	68bb      	ldr	r3, [r7, #8]
 801f16a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f16c:	2300      	movs	r3, #0
 801f16e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	2200      	movs	r2, #0
 801f174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801f178:	e02c      	b.n	801f1d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f17a:	683b      	ldr	r3, [r7, #0]
 801f17c:	9300      	str	r3, [sp, #0]
 801f17e:	697b      	ldr	r3, [r7, #20]
 801f180:	2200      	movs	r2, #0
 801f182:	2180      	movs	r1, #128	; 0x80
 801f184:	68f8      	ldr	r0, [r7, #12]
 801f186:	f000 fc2c 	bl	801f9e2 <UART_WaitOnFlagUntilTimeout>
 801f18a:	4603      	mov	r3, r0
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	d001      	beq.n	801f194 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801f190:	2303      	movs	r3, #3
 801f192:	e039      	b.n	801f208 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801f194:	69fb      	ldr	r3, [r7, #28]
 801f196:	2b00      	cmp	r3, #0
 801f198:	d10b      	bne.n	801f1b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f19a:	69bb      	ldr	r3, [r7, #24]
 801f19c:	881b      	ldrh	r3, [r3, #0]
 801f19e:	461a      	mov	r2, r3
 801f1a0:	68fb      	ldr	r3, [r7, #12]
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f1a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f1aa:	69bb      	ldr	r3, [r7, #24]
 801f1ac:	3302      	adds	r3, #2
 801f1ae:	61bb      	str	r3, [r7, #24]
 801f1b0:	e007      	b.n	801f1c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f1b2:	69fb      	ldr	r3, [r7, #28]
 801f1b4:	781a      	ldrb	r2, [r3, #0]
 801f1b6:	68fb      	ldr	r3, [r7, #12]
 801f1b8:	681b      	ldr	r3, [r3, #0]
 801f1ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f1bc:	69fb      	ldr	r3, [r7, #28]
 801f1be:	3301      	adds	r3, #1
 801f1c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f1c8:	b29b      	uxth	r3, r3
 801f1ca:	3b01      	subs	r3, #1
 801f1cc:	b29a      	uxth	r2, r3
 801f1ce:	68fb      	ldr	r3, [r7, #12]
 801f1d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f1da:	b29b      	uxth	r3, r3
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d1cc      	bne.n	801f17a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f1e0:	683b      	ldr	r3, [r7, #0]
 801f1e2:	9300      	str	r3, [sp, #0]
 801f1e4:	697b      	ldr	r3, [r7, #20]
 801f1e6:	2200      	movs	r2, #0
 801f1e8:	2140      	movs	r1, #64	; 0x40
 801f1ea:	68f8      	ldr	r0, [r7, #12]
 801f1ec:	f000 fbf9 	bl	801f9e2 <UART_WaitOnFlagUntilTimeout>
 801f1f0:	4603      	mov	r3, r0
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d001      	beq.n	801f1fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801f1f6:	2303      	movs	r3, #3
 801f1f8:	e006      	b.n	801f208 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f1fa:	68fb      	ldr	r3, [r7, #12]
 801f1fc:	2220      	movs	r2, #32
 801f1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801f202:	2300      	movs	r3, #0
 801f204:	e000      	b.n	801f208 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801f206:	2302      	movs	r3, #2
  }
}
 801f208:	4618      	mov	r0, r3
 801f20a:	3720      	adds	r7, #32
 801f20c:	46bd      	mov	sp, r7
 801f20e:	bd80      	pop	{r7, pc}

0801f210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f214:	b08c      	sub	sp, #48	; 0x30
 801f216:	af00      	add	r7, sp, #0
 801f218:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f21a:	2300      	movs	r3, #0
 801f21c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f220:	697b      	ldr	r3, [r7, #20]
 801f222:	689a      	ldr	r2, [r3, #8]
 801f224:	697b      	ldr	r3, [r7, #20]
 801f226:	691b      	ldr	r3, [r3, #16]
 801f228:	431a      	orrs	r2, r3
 801f22a:	697b      	ldr	r3, [r7, #20]
 801f22c:	695b      	ldr	r3, [r3, #20]
 801f22e:	431a      	orrs	r2, r3
 801f230:	697b      	ldr	r3, [r7, #20]
 801f232:	69db      	ldr	r3, [r3, #28]
 801f234:	4313      	orrs	r3, r2
 801f236:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f238:	697b      	ldr	r3, [r7, #20]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	681a      	ldr	r2, [r3, #0]
 801f23e:	4baa      	ldr	r3, [pc, #680]	; (801f4e8 <UART_SetConfig+0x2d8>)
 801f240:	4013      	ands	r3, r2
 801f242:	697a      	ldr	r2, [r7, #20]
 801f244:	6812      	ldr	r2, [r2, #0]
 801f246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f248:	430b      	orrs	r3, r1
 801f24a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f24c:	697b      	ldr	r3, [r7, #20]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	685b      	ldr	r3, [r3, #4]
 801f252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f256:	697b      	ldr	r3, [r7, #20]
 801f258:	68da      	ldr	r2, [r3, #12]
 801f25a:	697b      	ldr	r3, [r7, #20]
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	430a      	orrs	r2, r1
 801f260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f262:	697b      	ldr	r3, [r7, #20]
 801f264:	699b      	ldr	r3, [r3, #24]
 801f266:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f268:	697b      	ldr	r3, [r7, #20]
 801f26a:	681b      	ldr	r3, [r3, #0]
 801f26c:	4a9f      	ldr	r2, [pc, #636]	; (801f4ec <UART_SetConfig+0x2dc>)
 801f26e:	4293      	cmp	r3, r2
 801f270:	d004      	beq.n	801f27c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f272:	697b      	ldr	r3, [r7, #20]
 801f274:	6a1b      	ldr	r3, [r3, #32]
 801f276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f278:	4313      	orrs	r3, r2
 801f27a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f27c:	697b      	ldr	r3, [r7, #20]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	689b      	ldr	r3, [r3, #8]
 801f282:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801f286:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801f28a:	697a      	ldr	r2, [r7, #20]
 801f28c:	6812      	ldr	r2, [r2, #0]
 801f28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f290:	430b      	orrs	r3, r1
 801f292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f294:	697b      	ldr	r3, [r7, #20]
 801f296:	681b      	ldr	r3, [r3, #0]
 801f298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f29a:	f023 010f 	bic.w	r1, r3, #15
 801f29e:	697b      	ldr	r3, [r7, #20]
 801f2a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f2a2:	697b      	ldr	r3, [r7, #20]
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	430a      	orrs	r2, r1
 801f2a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f2aa:	697b      	ldr	r3, [r7, #20]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	4a90      	ldr	r2, [pc, #576]	; (801f4f0 <UART_SetConfig+0x2e0>)
 801f2b0:	4293      	cmp	r3, r2
 801f2b2:	d125      	bne.n	801f300 <UART_SetConfig+0xf0>
 801f2b4:	4b8f      	ldr	r3, [pc, #572]	; (801f4f4 <UART_SetConfig+0x2e4>)
 801f2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f2ba:	f003 0303 	and.w	r3, r3, #3
 801f2be:	2b03      	cmp	r3, #3
 801f2c0:	d81a      	bhi.n	801f2f8 <UART_SetConfig+0xe8>
 801f2c2:	a201      	add	r2, pc, #4	; (adr r2, 801f2c8 <UART_SetConfig+0xb8>)
 801f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f2c8:	0801f2d9 	.word	0x0801f2d9
 801f2cc:	0801f2e9 	.word	0x0801f2e9
 801f2d0:	0801f2e1 	.word	0x0801f2e1
 801f2d4:	0801f2f1 	.word	0x0801f2f1
 801f2d8:	2301      	movs	r3, #1
 801f2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f2de:	e116      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f2e0:	2302      	movs	r3, #2
 801f2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f2e6:	e112      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f2e8:	2304      	movs	r3, #4
 801f2ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f2ee:	e10e      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f2f0:	2308      	movs	r3, #8
 801f2f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f2f6:	e10a      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f2f8:	2310      	movs	r3, #16
 801f2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f2fe:	e106      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f300:	697b      	ldr	r3, [r7, #20]
 801f302:	681b      	ldr	r3, [r3, #0]
 801f304:	4a7c      	ldr	r2, [pc, #496]	; (801f4f8 <UART_SetConfig+0x2e8>)
 801f306:	4293      	cmp	r3, r2
 801f308:	d138      	bne.n	801f37c <UART_SetConfig+0x16c>
 801f30a:	4b7a      	ldr	r3, [pc, #488]	; (801f4f4 <UART_SetConfig+0x2e4>)
 801f30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f310:	f003 030c 	and.w	r3, r3, #12
 801f314:	2b0c      	cmp	r3, #12
 801f316:	d82d      	bhi.n	801f374 <UART_SetConfig+0x164>
 801f318:	a201      	add	r2, pc, #4	; (adr r2, 801f320 <UART_SetConfig+0x110>)
 801f31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f31e:	bf00      	nop
 801f320:	0801f355 	.word	0x0801f355
 801f324:	0801f375 	.word	0x0801f375
 801f328:	0801f375 	.word	0x0801f375
 801f32c:	0801f375 	.word	0x0801f375
 801f330:	0801f365 	.word	0x0801f365
 801f334:	0801f375 	.word	0x0801f375
 801f338:	0801f375 	.word	0x0801f375
 801f33c:	0801f375 	.word	0x0801f375
 801f340:	0801f35d 	.word	0x0801f35d
 801f344:	0801f375 	.word	0x0801f375
 801f348:	0801f375 	.word	0x0801f375
 801f34c:	0801f375 	.word	0x0801f375
 801f350:	0801f36d 	.word	0x0801f36d
 801f354:	2300      	movs	r3, #0
 801f356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f35a:	e0d8      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f35c:	2302      	movs	r3, #2
 801f35e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f362:	e0d4      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f364:	2304      	movs	r3, #4
 801f366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f36a:	e0d0      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f36c:	2308      	movs	r3, #8
 801f36e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f372:	e0cc      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f374:	2310      	movs	r3, #16
 801f376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f37a:	e0c8      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f37c:	697b      	ldr	r3, [r7, #20]
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	4a5e      	ldr	r2, [pc, #376]	; (801f4fc <UART_SetConfig+0x2ec>)
 801f382:	4293      	cmp	r3, r2
 801f384:	d125      	bne.n	801f3d2 <UART_SetConfig+0x1c2>
 801f386:	4b5b      	ldr	r3, [pc, #364]	; (801f4f4 <UART_SetConfig+0x2e4>)
 801f388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f38c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f390:	2b30      	cmp	r3, #48	; 0x30
 801f392:	d016      	beq.n	801f3c2 <UART_SetConfig+0x1b2>
 801f394:	2b30      	cmp	r3, #48	; 0x30
 801f396:	d818      	bhi.n	801f3ca <UART_SetConfig+0x1ba>
 801f398:	2b20      	cmp	r3, #32
 801f39a:	d00a      	beq.n	801f3b2 <UART_SetConfig+0x1a2>
 801f39c:	2b20      	cmp	r3, #32
 801f39e:	d814      	bhi.n	801f3ca <UART_SetConfig+0x1ba>
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d002      	beq.n	801f3aa <UART_SetConfig+0x19a>
 801f3a4:	2b10      	cmp	r3, #16
 801f3a6:	d008      	beq.n	801f3ba <UART_SetConfig+0x1aa>
 801f3a8:	e00f      	b.n	801f3ca <UART_SetConfig+0x1ba>
 801f3aa:	2300      	movs	r3, #0
 801f3ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3b0:	e0ad      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f3b2:	2302      	movs	r3, #2
 801f3b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3b8:	e0a9      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f3ba:	2304      	movs	r3, #4
 801f3bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3c0:	e0a5      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f3c2:	2308      	movs	r3, #8
 801f3c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3c8:	e0a1      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f3ca:	2310      	movs	r3, #16
 801f3cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3d0:	e09d      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f3d2:	697b      	ldr	r3, [r7, #20]
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	4a4a      	ldr	r2, [pc, #296]	; (801f500 <UART_SetConfig+0x2f0>)
 801f3d8:	4293      	cmp	r3, r2
 801f3da:	d125      	bne.n	801f428 <UART_SetConfig+0x218>
 801f3dc:	4b45      	ldr	r3, [pc, #276]	; (801f4f4 <UART_SetConfig+0x2e4>)
 801f3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f3e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f3e6:	2bc0      	cmp	r3, #192	; 0xc0
 801f3e8:	d016      	beq.n	801f418 <UART_SetConfig+0x208>
 801f3ea:	2bc0      	cmp	r3, #192	; 0xc0
 801f3ec:	d818      	bhi.n	801f420 <UART_SetConfig+0x210>
 801f3ee:	2b80      	cmp	r3, #128	; 0x80
 801f3f0:	d00a      	beq.n	801f408 <UART_SetConfig+0x1f8>
 801f3f2:	2b80      	cmp	r3, #128	; 0x80
 801f3f4:	d814      	bhi.n	801f420 <UART_SetConfig+0x210>
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d002      	beq.n	801f400 <UART_SetConfig+0x1f0>
 801f3fa:	2b40      	cmp	r3, #64	; 0x40
 801f3fc:	d008      	beq.n	801f410 <UART_SetConfig+0x200>
 801f3fe:	e00f      	b.n	801f420 <UART_SetConfig+0x210>
 801f400:	2300      	movs	r3, #0
 801f402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f406:	e082      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f408:	2302      	movs	r3, #2
 801f40a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f40e:	e07e      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f410:	2304      	movs	r3, #4
 801f412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f416:	e07a      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f418:	2308      	movs	r3, #8
 801f41a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f41e:	e076      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f420:	2310      	movs	r3, #16
 801f422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f426:	e072      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f428:	697b      	ldr	r3, [r7, #20]
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	4a35      	ldr	r2, [pc, #212]	; (801f504 <UART_SetConfig+0x2f4>)
 801f42e:	4293      	cmp	r3, r2
 801f430:	d12a      	bne.n	801f488 <UART_SetConfig+0x278>
 801f432:	4b30      	ldr	r3, [pc, #192]	; (801f4f4 <UART_SetConfig+0x2e4>)
 801f434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f43c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f440:	d01a      	beq.n	801f478 <UART_SetConfig+0x268>
 801f442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f446:	d81b      	bhi.n	801f480 <UART_SetConfig+0x270>
 801f448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f44c:	d00c      	beq.n	801f468 <UART_SetConfig+0x258>
 801f44e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f452:	d815      	bhi.n	801f480 <UART_SetConfig+0x270>
 801f454:	2b00      	cmp	r3, #0
 801f456:	d003      	beq.n	801f460 <UART_SetConfig+0x250>
 801f458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f45c:	d008      	beq.n	801f470 <UART_SetConfig+0x260>
 801f45e:	e00f      	b.n	801f480 <UART_SetConfig+0x270>
 801f460:	2300      	movs	r3, #0
 801f462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f466:	e052      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f468:	2302      	movs	r3, #2
 801f46a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f46e:	e04e      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f470:	2304      	movs	r3, #4
 801f472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f476:	e04a      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f478:	2308      	movs	r3, #8
 801f47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f47e:	e046      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f480:	2310      	movs	r3, #16
 801f482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f486:	e042      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f488:	697b      	ldr	r3, [r7, #20]
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	4a17      	ldr	r2, [pc, #92]	; (801f4ec <UART_SetConfig+0x2dc>)
 801f48e:	4293      	cmp	r3, r2
 801f490:	d13a      	bne.n	801f508 <UART_SetConfig+0x2f8>
 801f492:	4b18      	ldr	r3, [pc, #96]	; (801f4f4 <UART_SetConfig+0x2e4>)
 801f494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f498:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f49c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f4a0:	d01a      	beq.n	801f4d8 <UART_SetConfig+0x2c8>
 801f4a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f4a6:	d81b      	bhi.n	801f4e0 <UART_SetConfig+0x2d0>
 801f4a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f4ac:	d00c      	beq.n	801f4c8 <UART_SetConfig+0x2b8>
 801f4ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f4b2:	d815      	bhi.n	801f4e0 <UART_SetConfig+0x2d0>
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d003      	beq.n	801f4c0 <UART_SetConfig+0x2b0>
 801f4b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f4bc:	d008      	beq.n	801f4d0 <UART_SetConfig+0x2c0>
 801f4be:	e00f      	b.n	801f4e0 <UART_SetConfig+0x2d0>
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4c6:	e022      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f4c8:	2302      	movs	r3, #2
 801f4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4ce:	e01e      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f4d0:	2304      	movs	r3, #4
 801f4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4d6:	e01a      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f4d8:	2308      	movs	r3, #8
 801f4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4de:	e016      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f4e0:	2310      	movs	r3, #16
 801f4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4e6:	e012      	b.n	801f50e <UART_SetConfig+0x2fe>
 801f4e8:	cfff69f3 	.word	0xcfff69f3
 801f4ec:	40008000 	.word	0x40008000
 801f4f0:	40013800 	.word	0x40013800
 801f4f4:	40021000 	.word	0x40021000
 801f4f8:	40004400 	.word	0x40004400
 801f4fc:	40004800 	.word	0x40004800
 801f500:	40004c00 	.word	0x40004c00
 801f504:	40005000 	.word	0x40005000
 801f508:	2310      	movs	r3, #16
 801f50a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801f50e:	697b      	ldr	r3, [r7, #20]
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	4aae      	ldr	r2, [pc, #696]	; (801f7cc <UART_SetConfig+0x5bc>)
 801f514:	4293      	cmp	r3, r2
 801f516:	f040 8097 	bne.w	801f648 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801f51a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f51e:	2b08      	cmp	r3, #8
 801f520:	d823      	bhi.n	801f56a <UART_SetConfig+0x35a>
 801f522:	a201      	add	r2, pc, #4	; (adr r2, 801f528 <UART_SetConfig+0x318>)
 801f524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f528:	0801f54d 	.word	0x0801f54d
 801f52c:	0801f56b 	.word	0x0801f56b
 801f530:	0801f555 	.word	0x0801f555
 801f534:	0801f56b 	.word	0x0801f56b
 801f538:	0801f55b 	.word	0x0801f55b
 801f53c:	0801f56b 	.word	0x0801f56b
 801f540:	0801f56b 	.word	0x0801f56b
 801f544:	0801f56b 	.word	0x0801f56b
 801f548:	0801f563 	.word	0x0801f563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f54c:	f7fd f8b4 	bl	801c6b8 <HAL_RCC_GetPCLK1Freq>
 801f550:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f552:	e010      	b.n	801f576 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f554:	4b9e      	ldr	r3, [pc, #632]	; (801f7d0 <UART_SetConfig+0x5c0>)
 801f556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f558:	e00d      	b.n	801f576 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f55a:	f7fd f841 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 801f55e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f560:	e009      	b.n	801f576 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f568:	e005      	b.n	801f576 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801f56a:	2300      	movs	r3, #0
 801f56c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f56e:	2301      	movs	r3, #1
 801f570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f574:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f578:	2b00      	cmp	r3, #0
 801f57a:	f000 8130 	beq.w	801f7de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801f57e:	697b      	ldr	r3, [r7, #20]
 801f580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f582:	4a94      	ldr	r2, [pc, #592]	; (801f7d4 <UART_SetConfig+0x5c4>)
 801f584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f588:	461a      	mov	r2, r3
 801f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f58c:	fbb3 f3f2 	udiv	r3, r3, r2
 801f590:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f592:	697b      	ldr	r3, [r7, #20]
 801f594:	685a      	ldr	r2, [r3, #4]
 801f596:	4613      	mov	r3, r2
 801f598:	005b      	lsls	r3, r3, #1
 801f59a:	4413      	add	r3, r2
 801f59c:	69ba      	ldr	r2, [r7, #24]
 801f59e:	429a      	cmp	r2, r3
 801f5a0:	d305      	bcc.n	801f5ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801f5a2:	697b      	ldr	r3, [r7, #20]
 801f5a4:	685b      	ldr	r3, [r3, #4]
 801f5a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f5a8:	69ba      	ldr	r2, [r7, #24]
 801f5aa:	429a      	cmp	r2, r3
 801f5ac:	d903      	bls.n	801f5b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801f5ae:	2301      	movs	r3, #1
 801f5b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f5b4:	e113      	b.n	801f7de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5b8:	2200      	movs	r2, #0
 801f5ba:	60bb      	str	r3, [r7, #8]
 801f5bc:	60fa      	str	r2, [r7, #12]
 801f5be:	697b      	ldr	r3, [r7, #20]
 801f5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f5c2:	4a84      	ldr	r2, [pc, #528]	; (801f7d4 <UART_SetConfig+0x5c4>)
 801f5c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f5c8:	b29b      	uxth	r3, r3
 801f5ca:	2200      	movs	r2, #0
 801f5cc:	603b      	str	r3, [r7, #0]
 801f5ce:	607a      	str	r2, [r7, #4]
 801f5d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f5d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f5d8:	f7e1 fb5e 	bl	8000c98 <__aeabi_uldivmod>
 801f5dc:	4602      	mov	r2, r0
 801f5de:	460b      	mov	r3, r1
 801f5e0:	4610      	mov	r0, r2
 801f5e2:	4619      	mov	r1, r3
 801f5e4:	f04f 0200 	mov.w	r2, #0
 801f5e8:	f04f 0300 	mov.w	r3, #0
 801f5ec:	020b      	lsls	r3, r1, #8
 801f5ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801f5f2:	0202      	lsls	r2, r0, #8
 801f5f4:	6979      	ldr	r1, [r7, #20]
 801f5f6:	6849      	ldr	r1, [r1, #4]
 801f5f8:	0849      	lsrs	r1, r1, #1
 801f5fa:	2000      	movs	r0, #0
 801f5fc:	460c      	mov	r4, r1
 801f5fe:	4605      	mov	r5, r0
 801f600:	eb12 0804 	adds.w	r8, r2, r4
 801f604:	eb43 0905 	adc.w	r9, r3, r5
 801f608:	697b      	ldr	r3, [r7, #20]
 801f60a:	685b      	ldr	r3, [r3, #4]
 801f60c:	2200      	movs	r2, #0
 801f60e:	469a      	mov	sl, r3
 801f610:	4693      	mov	fp, r2
 801f612:	4652      	mov	r2, sl
 801f614:	465b      	mov	r3, fp
 801f616:	4640      	mov	r0, r8
 801f618:	4649      	mov	r1, r9
 801f61a:	f7e1 fb3d 	bl	8000c98 <__aeabi_uldivmod>
 801f61e:	4602      	mov	r2, r0
 801f620:	460b      	mov	r3, r1
 801f622:	4613      	mov	r3, r2
 801f624:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801f626:	6a3b      	ldr	r3, [r7, #32]
 801f628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f62c:	d308      	bcc.n	801f640 <UART_SetConfig+0x430>
 801f62e:	6a3b      	ldr	r3, [r7, #32]
 801f630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f634:	d204      	bcs.n	801f640 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801f636:	697b      	ldr	r3, [r7, #20]
 801f638:	681b      	ldr	r3, [r3, #0]
 801f63a:	6a3a      	ldr	r2, [r7, #32]
 801f63c:	60da      	str	r2, [r3, #12]
 801f63e:	e0ce      	b.n	801f7de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801f640:	2301      	movs	r3, #1
 801f642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f646:	e0ca      	b.n	801f7de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f648:	697b      	ldr	r3, [r7, #20]
 801f64a:	69db      	ldr	r3, [r3, #28]
 801f64c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f650:	d166      	bne.n	801f720 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801f652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f656:	2b08      	cmp	r3, #8
 801f658:	d827      	bhi.n	801f6aa <UART_SetConfig+0x49a>
 801f65a:	a201      	add	r2, pc, #4	; (adr r2, 801f660 <UART_SetConfig+0x450>)
 801f65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f660:	0801f685 	.word	0x0801f685
 801f664:	0801f68d 	.word	0x0801f68d
 801f668:	0801f695 	.word	0x0801f695
 801f66c:	0801f6ab 	.word	0x0801f6ab
 801f670:	0801f69b 	.word	0x0801f69b
 801f674:	0801f6ab 	.word	0x0801f6ab
 801f678:	0801f6ab 	.word	0x0801f6ab
 801f67c:	0801f6ab 	.word	0x0801f6ab
 801f680:	0801f6a3 	.word	0x0801f6a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f684:	f7fd f818 	bl	801c6b8 <HAL_RCC_GetPCLK1Freq>
 801f688:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f68a:	e014      	b.n	801f6b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f68c:	f7fd f82a 	bl	801c6e4 <HAL_RCC_GetPCLK2Freq>
 801f690:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f692:	e010      	b.n	801f6b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f694:	4b4e      	ldr	r3, [pc, #312]	; (801f7d0 <UART_SetConfig+0x5c0>)
 801f696:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f698:	e00d      	b.n	801f6b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f69a:	f7fc ffa1 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 801f69e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f6a0:	e009      	b.n	801f6b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f6a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f6a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f6a8:	e005      	b.n	801f6b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801f6aa:	2300      	movs	r3, #0
 801f6ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f6ae:	2301      	movs	r3, #1
 801f6b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f6b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	f000 8090 	beq.w	801f7de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f6be:	697b      	ldr	r3, [r7, #20]
 801f6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f6c2:	4a44      	ldr	r2, [pc, #272]	; (801f7d4 <UART_SetConfig+0x5c4>)
 801f6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f6c8:	461a      	mov	r2, r3
 801f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6cc:	fbb3 f3f2 	udiv	r3, r3, r2
 801f6d0:	005a      	lsls	r2, r3, #1
 801f6d2:	697b      	ldr	r3, [r7, #20]
 801f6d4:	685b      	ldr	r3, [r3, #4]
 801f6d6:	085b      	lsrs	r3, r3, #1
 801f6d8:	441a      	add	r2, r3
 801f6da:	697b      	ldr	r3, [r7, #20]
 801f6dc:	685b      	ldr	r3, [r3, #4]
 801f6de:	fbb2 f3f3 	udiv	r3, r2, r3
 801f6e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f6e4:	6a3b      	ldr	r3, [r7, #32]
 801f6e6:	2b0f      	cmp	r3, #15
 801f6e8:	d916      	bls.n	801f718 <UART_SetConfig+0x508>
 801f6ea:	6a3b      	ldr	r3, [r7, #32]
 801f6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f6f0:	d212      	bcs.n	801f718 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801f6f2:	6a3b      	ldr	r3, [r7, #32]
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	f023 030f 	bic.w	r3, r3, #15
 801f6fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801f6fc:	6a3b      	ldr	r3, [r7, #32]
 801f6fe:	085b      	lsrs	r3, r3, #1
 801f700:	b29b      	uxth	r3, r3
 801f702:	f003 0307 	and.w	r3, r3, #7
 801f706:	b29a      	uxth	r2, r3
 801f708:	8bfb      	ldrh	r3, [r7, #30]
 801f70a:	4313      	orrs	r3, r2
 801f70c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801f70e:	697b      	ldr	r3, [r7, #20]
 801f710:	681b      	ldr	r3, [r3, #0]
 801f712:	8bfa      	ldrh	r2, [r7, #30]
 801f714:	60da      	str	r2, [r3, #12]
 801f716:	e062      	b.n	801f7de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801f718:	2301      	movs	r3, #1
 801f71a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f71e:	e05e      	b.n	801f7de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801f720:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f724:	2b08      	cmp	r3, #8
 801f726:	d828      	bhi.n	801f77a <UART_SetConfig+0x56a>
 801f728:	a201      	add	r2, pc, #4	; (adr r2, 801f730 <UART_SetConfig+0x520>)
 801f72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f72e:	bf00      	nop
 801f730:	0801f755 	.word	0x0801f755
 801f734:	0801f75d 	.word	0x0801f75d
 801f738:	0801f765 	.word	0x0801f765
 801f73c:	0801f77b 	.word	0x0801f77b
 801f740:	0801f76b 	.word	0x0801f76b
 801f744:	0801f77b 	.word	0x0801f77b
 801f748:	0801f77b 	.word	0x0801f77b
 801f74c:	0801f77b 	.word	0x0801f77b
 801f750:	0801f773 	.word	0x0801f773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f754:	f7fc ffb0 	bl	801c6b8 <HAL_RCC_GetPCLK1Freq>
 801f758:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f75a:	e014      	b.n	801f786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f75c:	f7fc ffc2 	bl	801c6e4 <HAL_RCC_GetPCLK2Freq>
 801f760:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f762:	e010      	b.n	801f786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f764:	4b1a      	ldr	r3, [pc, #104]	; (801f7d0 <UART_SetConfig+0x5c0>)
 801f766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f768:	e00d      	b.n	801f786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f76a:	f7fc ff39 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 801f76e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f770:	e009      	b.n	801f786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f778:	e005      	b.n	801f786 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801f77a:	2300      	movs	r3, #0
 801f77c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f77e:	2301      	movs	r3, #1
 801f780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f784:	bf00      	nop
    }

    if (pclk != 0U)
 801f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d028      	beq.n	801f7de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f78c:	697b      	ldr	r3, [r7, #20]
 801f78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f790:	4a10      	ldr	r2, [pc, #64]	; (801f7d4 <UART_SetConfig+0x5c4>)
 801f792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f796:	461a      	mov	r2, r3
 801f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f79a:	fbb3 f2f2 	udiv	r2, r3, r2
 801f79e:	697b      	ldr	r3, [r7, #20]
 801f7a0:	685b      	ldr	r3, [r3, #4]
 801f7a2:	085b      	lsrs	r3, r3, #1
 801f7a4:	441a      	add	r2, r3
 801f7a6:	697b      	ldr	r3, [r7, #20]
 801f7a8:	685b      	ldr	r3, [r3, #4]
 801f7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 801f7ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f7b0:	6a3b      	ldr	r3, [r7, #32]
 801f7b2:	2b0f      	cmp	r3, #15
 801f7b4:	d910      	bls.n	801f7d8 <UART_SetConfig+0x5c8>
 801f7b6:	6a3b      	ldr	r3, [r7, #32]
 801f7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f7bc:	d20c      	bcs.n	801f7d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801f7be:	6a3b      	ldr	r3, [r7, #32]
 801f7c0:	b29a      	uxth	r2, r3
 801f7c2:	697b      	ldr	r3, [r7, #20]
 801f7c4:	681b      	ldr	r3, [r3, #0]
 801f7c6:	60da      	str	r2, [r3, #12]
 801f7c8:	e009      	b.n	801f7de <UART_SetConfig+0x5ce>
 801f7ca:	bf00      	nop
 801f7cc:	40008000 	.word	0x40008000
 801f7d0:	00f42400 	.word	0x00f42400
 801f7d4:	08023200 	.word	0x08023200
      }
      else
      {
        ret = HAL_ERROR;
 801f7d8:	2301      	movs	r3, #1
 801f7da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801f7de:	697b      	ldr	r3, [r7, #20]
 801f7e0:	2201      	movs	r2, #1
 801f7e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801f7e6:	697b      	ldr	r3, [r7, #20]
 801f7e8:	2201      	movs	r2, #1
 801f7ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801f7ee:	697b      	ldr	r3, [r7, #20]
 801f7f0:	2200      	movs	r2, #0
 801f7f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801f7f4:	697b      	ldr	r3, [r7, #20]
 801f7f6:	2200      	movs	r2, #0
 801f7f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801f7fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801f7fe:	4618      	mov	r0, r3
 801f800:	3730      	adds	r7, #48	; 0x30
 801f802:	46bd      	mov	sp, r7
 801f804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801f808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801f808:	b480      	push	{r7}
 801f80a:	b083      	sub	sp, #12
 801f80c:	af00      	add	r7, sp, #0
 801f80e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f814:	f003 0301 	and.w	r3, r3, #1
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d00a      	beq.n	801f832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	681b      	ldr	r3, [r3, #0]
 801f820:	685b      	ldr	r3, [r3, #4]
 801f822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	430a      	orrs	r2, r1
 801f830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f836:	f003 0302 	and.w	r3, r3, #2
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d00a      	beq.n	801f854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	685b      	ldr	r3, [r3, #4]
 801f844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	430a      	orrs	r2, r1
 801f852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f858:	f003 0304 	and.w	r3, r3, #4
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d00a      	beq.n	801f876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	685b      	ldr	r3, [r3, #4]
 801f866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	430a      	orrs	r2, r1
 801f874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f87a:	f003 0308 	and.w	r3, r3, #8
 801f87e:	2b00      	cmp	r3, #0
 801f880:	d00a      	beq.n	801f898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	685b      	ldr	r3, [r3, #4]
 801f888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	430a      	orrs	r2, r1
 801f896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f89c:	f003 0310 	and.w	r3, r3, #16
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	d00a      	beq.n	801f8ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	689b      	ldr	r3, [r3, #8]
 801f8aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	430a      	orrs	r2, r1
 801f8b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f8be:	f003 0320 	and.w	r3, r3, #32
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d00a      	beq.n	801f8dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	689b      	ldr	r3, [r3, #8]
 801f8cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801f8d0:	687b      	ldr	r3, [r7, #4]
 801f8d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	430a      	orrs	r2, r1
 801f8da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f8e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d01a      	beq.n	801f91e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	681b      	ldr	r3, [r3, #0]
 801f8ec:	685b      	ldr	r3, [r3, #4]
 801f8ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801f8f2:	687b      	ldr	r3, [r7, #4]
 801f8f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	430a      	orrs	r2, r1
 801f8fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f906:	d10a      	bne.n	801f91e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	685b      	ldr	r3, [r3, #4]
 801f90e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	681b      	ldr	r3, [r3, #0]
 801f91a:	430a      	orrs	r2, r1
 801f91c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f926:	2b00      	cmp	r3, #0
 801f928:	d00a      	beq.n	801f940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	685b      	ldr	r3, [r3, #4]
 801f930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f938:	687b      	ldr	r3, [r7, #4]
 801f93a:	681b      	ldr	r3, [r3, #0]
 801f93c:	430a      	orrs	r2, r1
 801f93e:	605a      	str	r2, [r3, #4]
  }
}
 801f940:	bf00      	nop
 801f942:	370c      	adds	r7, #12
 801f944:	46bd      	mov	sp, r7
 801f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f94a:	4770      	bx	lr

0801f94c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801f94c:	b580      	push	{r7, lr}
 801f94e:	b086      	sub	sp, #24
 801f950:	af02      	add	r7, sp, #8
 801f952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	2200      	movs	r2, #0
 801f958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801f95c:	f7f8 ff58 	bl	8018810 <HAL_GetTick>
 801f960:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	f003 0308 	and.w	r3, r3, #8
 801f96c:	2b08      	cmp	r3, #8
 801f96e:	d10e      	bne.n	801f98e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f974:	9300      	str	r3, [sp, #0]
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	2200      	movs	r2, #0
 801f97a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801f97e:	6878      	ldr	r0, [r7, #4]
 801f980:	f000 f82f 	bl	801f9e2 <UART_WaitOnFlagUntilTimeout>
 801f984:	4603      	mov	r3, r0
 801f986:	2b00      	cmp	r3, #0
 801f988:	d001      	beq.n	801f98e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f98a:	2303      	movs	r3, #3
 801f98c:	e025      	b.n	801f9da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	681b      	ldr	r3, [r3, #0]
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	f003 0304 	and.w	r3, r3, #4
 801f998:	2b04      	cmp	r3, #4
 801f99a:	d10e      	bne.n	801f9ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f99c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f9a0:	9300      	str	r3, [sp, #0]
 801f9a2:	68fb      	ldr	r3, [r7, #12]
 801f9a4:	2200      	movs	r2, #0
 801f9a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801f9aa:	6878      	ldr	r0, [r7, #4]
 801f9ac:	f000 f819 	bl	801f9e2 <UART_WaitOnFlagUntilTimeout>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d001      	beq.n	801f9ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f9b6:	2303      	movs	r3, #3
 801f9b8:	e00f      	b.n	801f9da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	2220      	movs	r2, #32
 801f9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	2220      	movs	r2, #32
 801f9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	2200      	movs	r2, #0
 801f9ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	2200      	movs	r2, #0
 801f9d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801f9d8:	2300      	movs	r3, #0
}
 801f9da:	4618      	mov	r0, r3
 801f9dc:	3710      	adds	r7, #16
 801f9de:	46bd      	mov	sp, r7
 801f9e0:	bd80      	pop	{r7, pc}

0801f9e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801f9e2:	b580      	push	{r7, lr}
 801f9e4:	b09c      	sub	sp, #112	; 0x70
 801f9e6:	af00      	add	r7, sp, #0
 801f9e8:	60f8      	str	r0, [r7, #12]
 801f9ea:	60b9      	str	r1, [r7, #8]
 801f9ec:	603b      	str	r3, [r7, #0]
 801f9ee:	4613      	mov	r3, r2
 801f9f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801f9f2:	e0a9      	b.n	801fb48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f9f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f9fa:	f000 80a5 	beq.w	801fb48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f9fe:	f7f8 ff07 	bl	8018810 <HAL_GetTick>
 801fa02:	4602      	mov	r2, r0
 801fa04:	683b      	ldr	r3, [r7, #0]
 801fa06:	1ad3      	subs	r3, r2, r3
 801fa08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801fa0a:	429a      	cmp	r2, r3
 801fa0c:	d302      	bcc.n	801fa14 <UART_WaitOnFlagUntilTimeout+0x32>
 801fa0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d140      	bne.n	801fa96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fa1c:	e853 3f00 	ldrex	r3, [r3]
 801fa20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801fa22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fa24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fa28:	667b      	str	r3, [r7, #100]	; 0x64
 801fa2a:	68fb      	ldr	r3, [r7, #12]
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	461a      	mov	r2, r3
 801fa30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fa32:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fa34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801fa38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fa3a:	e841 2300 	strex	r3, r2, [r1]
 801fa3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801fa40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d1e6      	bne.n	801fa14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	681b      	ldr	r3, [r3, #0]
 801fa4a:	3308      	adds	r3, #8
 801fa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa50:	e853 3f00 	ldrex	r3, [r3]
 801fa54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa58:	f023 0301 	bic.w	r3, r3, #1
 801fa5c:	663b      	str	r3, [r7, #96]	; 0x60
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	681b      	ldr	r3, [r3, #0]
 801fa62:	3308      	adds	r3, #8
 801fa64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fa66:	64ba      	str	r2, [r7, #72]	; 0x48
 801fa68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fa6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fa6e:	e841 2300 	strex	r3, r2, [r1]
 801fa72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801fa74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d1e5      	bne.n	801fa46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801fa7a:	68fb      	ldr	r3, [r7, #12]
 801fa7c:	2220      	movs	r2, #32
 801fa7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801fa82:	68fb      	ldr	r3, [r7, #12]
 801fa84:	2220      	movs	r2, #32
 801fa86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801fa8a:	68fb      	ldr	r3, [r7, #12]
 801fa8c:	2200      	movs	r2, #0
 801fa8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801fa92:	2303      	movs	r3, #3
 801fa94:	e069      	b.n	801fb6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801fa96:	68fb      	ldr	r3, [r7, #12]
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	f003 0304 	and.w	r3, r3, #4
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d051      	beq.n	801fb48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	69db      	ldr	r3, [r3, #28]
 801faaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801faae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fab2:	d149      	bne.n	801fb48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801fab4:	68fb      	ldr	r3, [r7, #12]
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fabc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fabe:	68fb      	ldr	r3, [r7, #12]
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fac6:	e853 3f00 	ldrex	r3, [r3]
 801faca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801facc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801face:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 801fad4:	68fb      	ldr	r3, [r7, #12]
 801fad6:	681b      	ldr	r3, [r3, #0]
 801fad8:	461a      	mov	r2, r3
 801fada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fadc:	637b      	str	r3, [r7, #52]	; 0x34
 801fade:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fae4:	e841 2300 	strex	r3, r2, [r1]
 801fae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801faea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801faec:	2b00      	cmp	r3, #0
 801faee:	d1e6      	bne.n	801fabe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801faf0:	68fb      	ldr	r3, [r7, #12]
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	3308      	adds	r3, #8
 801faf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801faf8:	697b      	ldr	r3, [r7, #20]
 801fafa:	e853 3f00 	ldrex	r3, [r3]
 801fafe:	613b      	str	r3, [r7, #16]
   return(result);
 801fb00:	693b      	ldr	r3, [r7, #16]
 801fb02:	f023 0301 	bic.w	r3, r3, #1
 801fb06:	66bb      	str	r3, [r7, #104]	; 0x68
 801fb08:	68fb      	ldr	r3, [r7, #12]
 801fb0a:	681b      	ldr	r3, [r3, #0]
 801fb0c:	3308      	adds	r3, #8
 801fb0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fb10:	623a      	str	r2, [r7, #32]
 801fb12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb14:	69f9      	ldr	r1, [r7, #28]
 801fb16:	6a3a      	ldr	r2, [r7, #32]
 801fb18:	e841 2300 	strex	r3, r2, [r1]
 801fb1c:	61bb      	str	r3, [r7, #24]
   return(result);
 801fb1e:	69bb      	ldr	r3, [r7, #24]
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	d1e5      	bne.n	801faf0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801fb24:	68fb      	ldr	r3, [r7, #12]
 801fb26:	2220      	movs	r2, #32
 801fb28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801fb2c:	68fb      	ldr	r3, [r7, #12]
 801fb2e:	2220      	movs	r2, #32
 801fb30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	2220      	movs	r2, #32
 801fb38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	2200      	movs	r2, #0
 801fb40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801fb44:	2303      	movs	r3, #3
 801fb46:	e010      	b.n	801fb6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fb48:	68fb      	ldr	r3, [r7, #12]
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	69da      	ldr	r2, [r3, #28]
 801fb4e:	68bb      	ldr	r3, [r7, #8]
 801fb50:	4013      	ands	r3, r2
 801fb52:	68ba      	ldr	r2, [r7, #8]
 801fb54:	429a      	cmp	r2, r3
 801fb56:	bf0c      	ite	eq
 801fb58:	2301      	moveq	r3, #1
 801fb5a:	2300      	movne	r3, #0
 801fb5c:	b2db      	uxtb	r3, r3
 801fb5e:	461a      	mov	r2, r3
 801fb60:	79fb      	ldrb	r3, [r7, #7]
 801fb62:	429a      	cmp	r2, r3
 801fb64:	f43f af46 	beq.w	801f9f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801fb68:	2300      	movs	r3, #0
}
 801fb6a:	4618      	mov	r0, r3
 801fb6c:	3770      	adds	r7, #112	; 0x70
 801fb6e:	46bd      	mov	sp, r7
 801fb70:	bd80      	pop	{r7, pc}

0801fb72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801fb72:	b480      	push	{r7}
 801fb74:	b085      	sub	sp, #20
 801fb76:	af00      	add	r7, sp, #0
 801fb78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fb80:	2b01      	cmp	r3, #1
 801fb82:	d101      	bne.n	801fb88 <HAL_UARTEx_DisableFifoMode+0x16>
 801fb84:	2302      	movs	r3, #2
 801fb86:	e027      	b.n	801fbd8 <HAL_UARTEx_DisableFifoMode+0x66>
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	2201      	movs	r2, #1
 801fb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	2224      	movs	r2, #36	; 0x24
 801fb94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	681a      	ldr	r2, [r3, #0]
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	f022 0201 	bic.w	r2, r2, #1
 801fbae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801fbb0:	68fb      	ldr	r3, [r7, #12]
 801fbb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801fbb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	2200      	movs	r2, #0
 801fbbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	68fa      	ldr	r2, [r7, #12]
 801fbc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	2220      	movs	r2, #32
 801fbca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	2200      	movs	r2, #0
 801fbd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fbd6:	2300      	movs	r3, #0
}
 801fbd8:	4618      	mov	r0, r3
 801fbda:	3714      	adds	r7, #20
 801fbdc:	46bd      	mov	sp, r7
 801fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbe2:	4770      	bx	lr

0801fbe4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801fbe4:	b580      	push	{r7, lr}
 801fbe6:	b084      	sub	sp, #16
 801fbe8:	af00      	add	r7, sp, #0
 801fbea:	6078      	str	r0, [r7, #4]
 801fbec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fbee:	687b      	ldr	r3, [r7, #4]
 801fbf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fbf4:	2b01      	cmp	r3, #1
 801fbf6:	d101      	bne.n	801fbfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801fbf8:	2302      	movs	r3, #2
 801fbfa:	e02d      	b.n	801fc58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	2201      	movs	r2, #1
 801fc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	2224      	movs	r2, #36	; 0x24
 801fc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801fc14:	687b      	ldr	r3, [r7, #4]
 801fc16:	681b      	ldr	r3, [r3, #0]
 801fc18:	681a      	ldr	r2, [r3, #0]
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	f022 0201 	bic.w	r2, r2, #1
 801fc22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	689b      	ldr	r3, [r3, #8]
 801fc2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	683a      	ldr	r2, [r7, #0]
 801fc34:	430a      	orrs	r2, r1
 801fc36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801fc38:	6878      	ldr	r0, [r7, #4]
 801fc3a:	f000 f84f 	bl	801fcdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	68fa      	ldr	r2, [r7, #12]
 801fc44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	2220      	movs	r2, #32
 801fc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	2200      	movs	r2, #0
 801fc52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fc56:	2300      	movs	r3, #0
}
 801fc58:	4618      	mov	r0, r3
 801fc5a:	3710      	adds	r7, #16
 801fc5c:	46bd      	mov	sp, r7
 801fc5e:	bd80      	pop	{r7, pc}

0801fc60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801fc60:	b580      	push	{r7, lr}
 801fc62:	b084      	sub	sp, #16
 801fc64:	af00      	add	r7, sp, #0
 801fc66:	6078      	str	r0, [r7, #4]
 801fc68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fc70:	2b01      	cmp	r3, #1
 801fc72:	d101      	bne.n	801fc78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801fc74:	2302      	movs	r3, #2
 801fc76:	e02d      	b.n	801fcd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	2201      	movs	r2, #1
 801fc7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	2224      	movs	r2, #36	; 0x24
 801fc84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	681b      	ldr	r3, [r3, #0]
 801fc8c:	681b      	ldr	r3, [r3, #0]
 801fc8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	681a      	ldr	r2, [r3, #0]
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	f022 0201 	bic.w	r2, r2, #1
 801fc9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	689b      	ldr	r3, [r3, #8]
 801fca6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	683a      	ldr	r2, [r7, #0]
 801fcb0:	430a      	orrs	r2, r1
 801fcb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801fcb4:	6878      	ldr	r0, [r7, #4]
 801fcb6:	f000 f811 	bl	801fcdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	681b      	ldr	r3, [r3, #0]
 801fcbe:	68fa      	ldr	r2, [r7, #12]
 801fcc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	2220      	movs	r2, #32
 801fcc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	2200      	movs	r2, #0
 801fcce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fcd2:	2300      	movs	r3, #0
}
 801fcd4:	4618      	mov	r0, r3
 801fcd6:	3710      	adds	r7, #16
 801fcd8:	46bd      	mov	sp, r7
 801fcda:	bd80      	pop	{r7, pc}

0801fcdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801fcdc:	b480      	push	{r7}
 801fcde:	b085      	sub	sp, #20
 801fce0:	af00      	add	r7, sp, #0
 801fce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d108      	bne.n	801fcfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	2201      	movs	r2, #1
 801fcf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	2201      	movs	r2, #1
 801fcf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801fcfc:	e031      	b.n	801fd62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801fcfe:	2308      	movs	r3, #8
 801fd00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801fd02:	2308      	movs	r3, #8
 801fd04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	689b      	ldr	r3, [r3, #8]
 801fd0c:	0e5b      	lsrs	r3, r3, #25
 801fd0e:	b2db      	uxtb	r3, r3
 801fd10:	f003 0307 	and.w	r3, r3, #7
 801fd14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	689b      	ldr	r3, [r3, #8]
 801fd1c:	0f5b      	lsrs	r3, r3, #29
 801fd1e:	b2db      	uxtb	r3, r3
 801fd20:	f003 0307 	and.w	r3, r3, #7
 801fd24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801fd26:	7bbb      	ldrb	r3, [r7, #14]
 801fd28:	7b3a      	ldrb	r2, [r7, #12]
 801fd2a:	4911      	ldr	r1, [pc, #68]	; (801fd70 <UARTEx_SetNbDataToProcess+0x94>)
 801fd2c:	5c8a      	ldrb	r2, [r1, r2]
 801fd2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801fd32:	7b3a      	ldrb	r2, [r7, #12]
 801fd34:	490f      	ldr	r1, [pc, #60]	; (801fd74 <UARTEx_SetNbDataToProcess+0x98>)
 801fd36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801fd38:	fb93 f3f2 	sdiv	r3, r3, r2
 801fd3c:	b29a      	uxth	r2, r3
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801fd44:	7bfb      	ldrb	r3, [r7, #15]
 801fd46:	7b7a      	ldrb	r2, [r7, #13]
 801fd48:	4909      	ldr	r1, [pc, #36]	; (801fd70 <UARTEx_SetNbDataToProcess+0x94>)
 801fd4a:	5c8a      	ldrb	r2, [r1, r2]
 801fd4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801fd50:	7b7a      	ldrb	r2, [r7, #13]
 801fd52:	4908      	ldr	r1, [pc, #32]	; (801fd74 <UARTEx_SetNbDataToProcess+0x98>)
 801fd54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801fd56:	fb93 f3f2 	sdiv	r3, r3, r2
 801fd5a:	b29a      	uxth	r2, r3
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801fd62:	bf00      	nop
 801fd64:	3714      	adds	r7, #20
 801fd66:	46bd      	mov	sp, r7
 801fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd6c:	4770      	bx	lr
 801fd6e:	bf00      	nop
 801fd70:	08023218 	.word	0x08023218
 801fd74:	08023220 	.word	0x08023220

0801fd78 <__errno>:
 801fd78:	4b01      	ldr	r3, [pc, #4]	; (801fd80 <__errno+0x8>)
 801fd7a:	6818      	ldr	r0, [r3, #0]
 801fd7c:	4770      	bx	lr
 801fd7e:	bf00      	nop
 801fd80:	2000002c 	.word	0x2000002c

0801fd84 <__libc_init_array>:
 801fd84:	b570      	push	{r4, r5, r6, lr}
 801fd86:	4d0d      	ldr	r5, [pc, #52]	; (801fdbc <__libc_init_array+0x38>)
 801fd88:	4c0d      	ldr	r4, [pc, #52]	; (801fdc0 <__libc_init_array+0x3c>)
 801fd8a:	1b64      	subs	r4, r4, r5
 801fd8c:	10a4      	asrs	r4, r4, #2
 801fd8e:	2600      	movs	r6, #0
 801fd90:	42a6      	cmp	r6, r4
 801fd92:	d109      	bne.n	801fda8 <__libc_init_array+0x24>
 801fd94:	4d0b      	ldr	r5, [pc, #44]	; (801fdc4 <__libc_init_array+0x40>)
 801fd96:	4c0c      	ldr	r4, [pc, #48]	; (801fdc8 <__libc_init_array+0x44>)
 801fd98:	f003 f8ac 	bl	8022ef4 <_init>
 801fd9c:	1b64      	subs	r4, r4, r5
 801fd9e:	10a4      	asrs	r4, r4, #2
 801fda0:	2600      	movs	r6, #0
 801fda2:	42a6      	cmp	r6, r4
 801fda4:	d105      	bne.n	801fdb2 <__libc_init_array+0x2e>
 801fda6:	bd70      	pop	{r4, r5, r6, pc}
 801fda8:	f855 3b04 	ldr.w	r3, [r5], #4
 801fdac:	4798      	blx	r3
 801fdae:	3601      	adds	r6, #1
 801fdb0:	e7ee      	b.n	801fd90 <__libc_init_array+0xc>
 801fdb2:	f855 3b04 	ldr.w	r3, [r5], #4
 801fdb6:	4798      	blx	r3
 801fdb8:	3601      	adds	r6, #1
 801fdba:	e7f2      	b.n	801fda2 <__libc_init_array+0x1e>
 801fdbc:	08023640 	.word	0x08023640
 801fdc0:	08023640 	.word	0x08023640
 801fdc4:	08023640 	.word	0x08023640
 801fdc8:	08023644 	.word	0x08023644

0801fdcc <memcpy>:
 801fdcc:	440a      	add	r2, r1
 801fdce:	4291      	cmp	r1, r2
 801fdd0:	f100 33ff 	add.w	r3, r0, #4294967295
 801fdd4:	d100      	bne.n	801fdd8 <memcpy+0xc>
 801fdd6:	4770      	bx	lr
 801fdd8:	b510      	push	{r4, lr}
 801fdda:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fdde:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fde2:	4291      	cmp	r1, r2
 801fde4:	d1f9      	bne.n	801fdda <memcpy+0xe>
 801fde6:	bd10      	pop	{r4, pc}

0801fde8 <memset>:
 801fde8:	4402      	add	r2, r0
 801fdea:	4603      	mov	r3, r0
 801fdec:	4293      	cmp	r3, r2
 801fdee:	d100      	bne.n	801fdf2 <memset+0xa>
 801fdf0:	4770      	bx	lr
 801fdf2:	f803 1b01 	strb.w	r1, [r3], #1
 801fdf6:	e7f9      	b.n	801fdec <memset+0x4>

0801fdf8 <__cvt>:
 801fdf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fdfc:	ec55 4b10 	vmov	r4, r5, d0
 801fe00:	2d00      	cmp	r5, #0
 801fe02:	460e      	mov	r6, r1
 801fe04:	4619      	mov	r1, r3
 801fe06:	462b      	mov	r3, r5
 801fe08:	bfbb      	ittet	lt
 801fe0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801fe0e:	461d      	movlt	r5, r3
 801fe10:	2300      	movge	r3, #0
 801fe12:	232d      	movlt	r3, #45	; 0x2d
 801fe14:	700b      	strb	r3, [r1, #0]
 801fe16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fe18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801fe1c:	4691      	mov	r9, r2
 801fe1e:	f023 0820 	bic.w	r8, r3, #32
 801fe22:	bfbc      	itt	lt
 801fe24:	4622      	movlt	r2, r4
 801fe26:	4614      	movlt	r4, r2
 801fe28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801fe2c:	d005      	beq.n	801fe3a <__cvt+0x42>
 801fe2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801fe32:	d100      	bne.n	801fe36 <__cvt+0x3e>
 801fe34:	3601      	adds	r6, #1
 801fe36:	2102      	movs	r1, #2
 801fe38:	e000      	b.n	801fe3c <__cvt+0x44>
 801fe3a:	2103      	movs	r1, #3
 801fe3c:	ab03      	add	r3, sp, #12
 801fe3e:	9301      	str	r3, [sp, #4]
 801fe40:	ab02      	add	r3, sp, #8
 801fe42:	9300      	str	r3, [sp, #0]
 801fe44:	ec45 4b10 	vmov	d0, r4, r5
 801fe48:	4653      	mov	r3, sl
 801fe4a:	4632      	mov	r2, r6
 801fe4c:	f000 fe30 	bl	8020ab0 <_dtoa_r>
 801fe50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801fe54:	4607      	mov	r7, r0
 801fe56:	d102      	bne.n	801fe5e <__cvt+0x66>
 801fe58:	f019 0f01 	tst.w	r9, #1
 801fe5c:	d022      	beq.n	801fea4 <__cvt+0xac>
 801fe5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801fe62:	eb07 0906 	add.w	r9, r7, r6
 801fe66:	d110      	bne.n	801fe8a <__cvt+0x92>
 801fe68:	783b      	ldrb	r3, [r7, #0]
 801fe6a:	2b30      	cmp	r3, #48	; 0x30
 801fe6c:	d10a      	bne.n	801fe84 <__cvt+0x8c>
 801fe6e:	2200      	movs	r2, #0
 801fe70:	2300      	movs	r3, #0
 801fe72:	4620      	mov	r0, r4
 801fe74:	4629      	mov	r1, r5
 801fe76:	f7e0 fe4f 	bl	8000b18 <__aeabi_dcmpeq>
 801fe7a:	b918      	cbnz	r0, 801fe84 <__cvt+0x8c>
 801fe7c:	f1c6 0601 	rsb	r6, r6, #1
 801fe80:	f8ca 6000 	str.w	r6, [sl]
 801fe84:	f8da 3000 	ldr.w	r3, [sl]
 801fe88:	4499      	add	r9, r3
 801fe8a:	2200      	movs	r2, #0
 801fe8c:	2300      	movs	r3, #0
 801fe8e:	4620      	mov	r0, r4
 801fe90:	4629      	mov	r1, r5
 801fe92:	f7e0 fe41 	bl	8000b18 <__aeabi_dcmpeq>
 801fe96:	b108      	cbz	r0, 801fe9c <__cvt+0xa4>
 801fe98:	f8cd 900c 	str.w	r9, [sp, #12]
 801fe9c:	2230      	movs	r2, #48	; 0x30
 801fe9e:	9b03      	ldr	r3, [sp, #12]
 801fea0:	454b      	cmp	r3, r9
 801fea2:	d307      	bcc.n	801feb4 <__cvt+0xbc>
 801fea4:	9b03      	ldr	r3, [sp, #12]
 801fea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fea8:	1bdb      	subs	r3, r3, r7
 801feaa:	4638      	mov	r0, r7
 801feac:	6013      	str	r3, [r2, #0]
 801feae:	b004      	add	sp, #16
 801feb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feb4:	1c59      	adds	r1, r3, #1
 801feb6:	9103      	str	r1, [sp, #12]
 801feb8:	701a      	strb	r2, [r3, #0]
 801feba:	e7f0      	b.n	801fe9e <__cvt+0xa6>

0801febc <__exponent>:
 801febc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801febe:	4603      	mov	r3, r0
 801fec0:	2900      	cmp	r1, #0
 801fec2:	bfb8      	it	lt
 801fec4:	4249      	neglt	r1, r1
 801fec6:	f803 2b02 	strb.w	r2, [r3], #2
 801feca:	bfb4      	ite	lt
 801fecc:	222d      	movlt	r2, #45	; 0x2d
 801fece:	222b      	movge	r2, #43	; 0x2b
 801fed0:	2909      	cmp	r1, #9
 801fed2:	7042      	strb	r2, [r0, #1]
 801fed4:	dd2a      	ble.n	801ff2c <__exponent+0x70>
 801fed6:	f10d 0407 	add.w	r4, sp, #7
 801feda:	46a4      	mov	ip, r4
 801fedc:	270a      	movs	r7, #10
 801fede:	46a6      	mov	lr, r4
 801fee0:	460a      	mov	r2, r1
 801fee2:	fb91 f6f7 	sdiv	r6, r1, r7
 801fee6:	fb07 1516 	mls	r5, r7, r6, r1
 801feea:	3530      	adds	r5, #48	; 0x30
 801feec:	2a63      	cmp	r2, #99	; 0x63
 801feee:	f104 34ff 	add.w	r4, r4, #4294967295
 801fef2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fef6:	4631      	mov	r1, r6
 801fef8:	dcf1      	bgt.n	801fede <__exponent+0x22>
 801fefa:	3130      	adds	r1, #48	; 0x30
 801fefc:	f1ae 0502 	sub.w	r5, lr, #2
 801ff00:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ff04:	1c44      	adds	r4, r0, #1
 801ff06:	4629      	mov	r1, r5
 801ff08:	4561      	cmp	r1, ip
 801ff0a:	d30a      	bcc.n	801ff22 <__exponent+0x66>
 801ff0c:	f10d 0209 	add.w	r2, sp, #9
 801ff10:	eba2 020e 	sub.w	r2, r2, lr
 801ff14:	4565      	cmp	r5, ip
 801ff16:	bf88      	it	hi
 801ff18:	2200      	movhi	r2, #0
 801ff1a:	4413      	add	r3, r2
 801ff1c:	1a18      	subs	r0, r3, r0
 801ff1e:	b003      	add	sp, #12
 801ff20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff22:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ff26:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ff2a:	e7ed      	b.n	801ff08 <__exponent+0x4c>
 801ff2c:	2330      	movs	r3, #48	; 0x30
 801ff2e:	3130      	adds	r1, #48	; 0x30
 801ff30:	7083      	strb	r3, [r0, #2]
 801ff32:	70c1      	strb	r1, [r0, #3]
 801ff34:	1d03      	adds	r3, r0, #4
 801ff36:	e7f1      	b.n	801ff1c <__exponent+0x60>

0801ff38 <_printf_float>:
 801ff38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff3c:	ed2d 8b02 	vpush	{d8}
 801ff40:	b08d      	sub	sp, #52	; 0x34
 801ff42:	460c      	mov	r4, r1
 801ff44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ff48:	4616      	mov	r6, r2
 801ff4a:	461f      	mov	r7, r3
 801ff4c:	4605      	mov	r5, r0
 801ff4e:	f001 fd55 	bl	80219fc <_localeconv_r>
 801ff52:	f8d0 a000 	ldr.w	sl, [r0]
 801ff56:	4650      	mov	r0, sl
 801ff58:	f7e0 f962 	bl	8000220 <strlen>
 801ff5c:	2300      	movs	r3, #0
 801ff5e:	930a      	str	r3, [sp, #40]	; 0x28
 801ff60:	6823      	ldr	r3, [r4, #0]
 801ff62:	9305      	str	r3, [sp, #20]
 801ff64:	f8d8 3000 	ldr.w	r3, [r8]
 801ff68:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ff6c:	3307      	adds	r3, #7
 801ff6e:	f023 0307 	bic.w	r3, r3, #7
 801ff72:	f103 0208 	add.w	r2, r3, #8
 801ff76:	f8c8 2000 	str.w	r2, [r8]
 801ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801ff82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801ff86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ff8a:	9307      	str	r3, [sp, #28]
 801ff8c:	f8cd 8018 	str.w	r8, [sp, #24]
 801ff90:	ee08 0a10 	vmov	s16, r0
 801ff94:	4b9f      	ldr	r3, [pc, #636]	; (8020214 <_printf_float+0x2dc>)
 801ff96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ff9a:	f04f 32ff 	mov.w	r2, #4294967295
 801ff9e:	f7e0 fded 	bl	8000b7c <__aeabi_dcmpun>
 801ffa2:	bb88      	cbnz	r0, 8020008 <_printf_float+0xd0>
 801ffa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ffa8:	4b9a      	ldr	r3, [pc, #616]	; (8020214 <_printf_float+0x2dc>)
 801ffaa:	f04f 32ff 	mov.w	r2, #4294967295
 801ffae:	f7e0 fdc7 	bl	8000b40 <__aeabi_dcmple>
 801ffb2:	bb48      	cbnz	r0, 8020008 <_printf_float+0xd0>
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	2300      	movs	r3, #0
 801ffb8:	4640      	mov	r0, r8
 801ffba:	4649      	mov	r1, r9
 801ffbc:	f7e0 fdb6 	bl	8000b2c <__aeabi_dcmplt>
 801ffc0:	b110      	cbz	r0, 801ffc8 <_printf_float+0x90>
 801ffc2:	232d      	movs	r3, #45	; 0x2d
 801ffc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ffc8:	4b93      	ldr	r3, [pc, #588]	; (8020218 <_printf_float+0x2e0>)
 801ffca:	4894      	ldr	r0, [pc, #592]	; (802021c <_printf_float+0x2e4>)
 801ffcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ffd0:	bf94      	ite	ls
 801ffd2:	4698      	movls	r8, r3
 801ffd4:	4680      	movhi	r8, r0
 801ffd6:	2303      	movs	r3, #3
 801ffd8:	6123      	str	r3, [r4, #16]
 801ffda:	9b05      	ldr	r3, [sp, #20]
 801ffdc:	f023 0204 	bic.w	r2, r3, #4
 801ffe0:	6022      	str	r2, [r4, #0]
 801ffe2:	f04f 0900 	mov.w	r9, #0
 801ffe6:	9700      	str	r7, [sp, #0]
 801ffe8:	4633      	mov	r3, r6
 801ffea:	aa0b      	add	r2, sp, #44	; 0x2c
 801ffec:	4621      	mov	r1, r4
 801ffee:	4628      	mov	r0, r5
 801fff0:	f000 f9d8 	bl	80203a4 <_printf_common>
 801fff4:	3001      	adds	r0, #1
 801fff6:	f040 8090 	bne.w	802011a <_printf_float+0x1e2>
 801fffa:	f04f 30ff 	mov.w	r0, #4294967295
 801fffe:	b00d      	add	sp, #52	; 0x34
 8020000:	ecbd 8b02 	vpop	{d8}
 8020004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020008:	4642      	mov	r2, r8
 802000a:	464b      	mov	r3, r9
 802000c:	4640      	mov	r0, r8
 802000e:	4649      	mov	r1, r9
 8020010:	f7e0 fdb4 	bl	8000b7c <__aeabi_dcmpun>
 8020014:	b140      	cbz	r0, 8020028 <_printf_float+0xf0>
 8020016:	464b      	mov	r3, r9
 8020018:	2b00      	cmp	r3, #0
 802001a:	bfbc      	itt	lt
 802001c:	232d      	movlt	r3, #45	; 0x2d
 802001e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020022:	487f      	ldr	r0, [pc, #508]	; (8020220 <_printf_float+0x2e8>)
 8020024:	4b7f      	ldr	r3, [pc, #508]	; (8020224 <_printf_float+0x2ec>)
 8020026:	e7d1      	b.n	801ffcc <_printf_float+0x94>
 8020028:	6863      	ldr	r3, [r4, #4]
 802002a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802002e:	9206      	str	r2, [sp, #24]
 8020030:	1c5a      	adds	r2, r3, #1
 8020032:	d13f      	bne.n	80200b4 <_printf_float+0x17c>
 8020034:	2306      	movs	r3, #6
 8020036:	6063      	str	r3, [r4, #4]
 8020038:	9b05      	ldr	r3, [sp, #20]
 802003a:	6861      	ldr	r1, [r4, #4]
 802003c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8020040:	2300      	movs	r3, #0
 8020042:	9303      	str	r3, [sp, #12]
 8020044:	ab0a      	add	r3, sp, #40	; 0x28
 8020046:	e9cd b301 	strd	fp, r3, [sp, #4]
 802004a:	ab09      	add	r3, sp, #36	; 0x24
 802004c:	ec49 8b10 	vmov	d0, r8, r9
 8020050:	9300      	str	r3, [sp, #0]
 8020052:	6022      	str	r2, [r4, #0]
 8020054:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020058:	4628      	mov	r0, r5
 802005a:	f7ff fecd 	bl	801fdf8 <__cvt>
 802005e:	9b06      	ldr	r3, [sp, #24]
 8020060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020062:	2b47      	cmp	r3, #71	; 0x47
 8020064:	4680      	mov	r8, r0
 8020066:	d108      	bne.n	802007a <_printf_float+0x142>
 8020068:	1cc8      	adds	r0, r1, #3
 802006a:	db02      	blt.n	8020072 <_printf_float+0x13a>
 802006c:	6863      	ldr	r3, [r4, #4]
 802006e:	4299      	cmp	r1, r3
 8020070:	dd41      	ble.n	80200f6 <_printf_float+0x1be>
 8020072:	f1ab 0b02 	sub.w	fp, fp, #2
 8020076:	fa5f fb8b 	uxtb.w	fp, fp
 802007a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802007e:	d820      	bhi.n	80200c2 <_printf_float+0x18a>
 8020080:	3901      	subs	r1, #1
 8020082:	465a      	mov	r2, fp
 8020084:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020088:	9109      	str	r1, [sp, #36]	; 0x24
 802008a:	f7ff ff17 	bl	801febc <__exponent>
 802008e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020090:	1813      	adds	r3, r2, r0
 8020092:	2a01      	cmp	r2, #1
 8020094:	4681      	mov	r9, r0
 8020096:	6123      	str	r3, [r4, #16]
 8020098:	dc02      	bgt.n	80200a0 <_printf_float+0x168>
 802009a:	6822      	ldr	r2, [r4, #0]
 802009c:	07d2      	lsls	r2, r2, #31
 802009e:	d501      	bpl.n	80200a4 <_printf_float+0x16c>
 80200a0:	3301      	adds	r3, #1
 80200a2:	6123      	str	r3, [r4, #16]
 80200a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d09c      	beq.n	801ffe6 <_printf_float+0xae>
 80200ac:	232d      	movs	r3, #45	; 0x2d
 80200ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80200b2:	e798      	b.n	801ffe6 <_printf_float+0xae>
 80200b4:	9a06      	ldr	r2, [sp, #24]
 80200b6:	2a47      	cmp	r2, #71	; 0x47
 80200b8:	d1be      	bne.n	8020038 <_printf_float+0x100>
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	d1bc      	bne.n	8020038 <_printf_float+0x100>
 80200be:	2301      	movs	r3, #1
 80200c0:	e7b9      	b.n	8020036 <_printf_float+0xfe>
 80200c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80200c6:	d118      	bne.n	80200fa <_printf_float+0x1c2>
 80200c8:	2900      	cmp	r1, #0
 80200ca:	6863      	ldr	r3, [r4, #4]
 80200cc:	dd0b      	ble.n	80200e6 <_printf_float+0x1ae>
 80200ce:	6121      	str	r1, [r4, #16]
 80200d0:	b913      	cbnz	r3, 80200d8 <_printf_float+0x1a0>
 80200d2:	6822      	ldr	r2, [r4, #0]
 80200d4:	07d0      	lsls	r0, r2, #31
 80200d6:	d502      	bpl.n	80200de <_printf_float+0x1a6>
 80200d8:	3301      	adds	r3, #1
 80200da:	440b      	add	r3, r1
 80200dc:	6123      	str	r3, [r4, #16]
 80200de:	65a1      	str	r1, [r4, #88]	; 0x58
 80200e0:	f04f 0900 	mov.w	r9, #0
 80200e4:	e7de      	b.n	80200a4 <_printf_float+0x16c>
 80200e6:	b913      	cbnz	r3, 80200ee <_printf_float+0x1b6>
 80200e8:	6822      	ldr	r2, [r4, #0]
 80200ea:	07d2      	lsls	r2, r2, #31
 80200ec:	d501      	bpl.n	80200f2 <_printf_float+0x1ba>
 80200ee:	3302      	adds	r3, #2
 80200f0:	e7f4      	b.n	80200dc <_printf_float+0x1a4>
 80200f2:	2301      	movs	r3, #1
 80200f4:	e7f2      	b.n	80200dc <_printf_float+0x1a4>
 80200f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80200fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200fc:	4299      	cmp	r1, r3
 80200fe:	db05      	blt.n	802010c <_printf_float+0x1d4>
 8020100:	6823      	ldr	r3, [r4, #0]
 8020102:	6121      	str	r1, [r4, #16]
 8020104:	07d8      	lsls	r0, r3, #31
 8020106:	d5ea      	bpl.n	80200de <_printf_float+0x1a6>
 8020108:	1c4b      	adds	r3, r1, #1
 802010a:	e7e7      	b.n	80200dc <_printf_float+0x1a4>
 802010c:	2900      	cmp	r1, #0
 802010e:	bfd4      	ite	le
 8020110:	f1c1 0202 	rsble	r2, r1, #2
 8020114:	2201      	movgt	r2, #1
 8020116:	4413      	add	r3, r2
 8020118:	e7e0      	b.n	80200dc <_printf_float+0x1a4>
 802011a:	6823      	ldr	r3, [r4, #0]
 802011c:	055a      	lsls	r2, r3, #21
 802011e:	d407      	bmi.n	8020130 <_printf_float+0x1f8>
 8020120:	6923      	ldr	r3, [r4, #16]
 8020122:	4642      	mov	r2, r8
 8020124:	4631      	mov	r1, r6
 8020126:	4628      	mov	r0, r5
 8020128:	47b8      	blx	r7
 802012a:	3001      	adds	r0, #1
 802012c:	d12c      	bne.n	8020188 <_printf_float+0x250>
 802012e:	e764      	b.n	801fffa <_printf_float+0xc2>
 8020130:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020134:	f240 80e0 	bls.w	80202f8 <_printf_float+0x3c0>
 8020138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802013c:	2200      	movs	r2, #0
 802013e:	2300      	movs	r3, #0
 8020140:	f7e0 fcea 	bl	8000b18 <__aeabi_dcmpeq>
 8020144:	2800      	cmp	r0, #0
 8020146:	d034      	beq.n	80201b2 <_printf_float+0x27a>
 8020148:	4a37      	ldr	r2, [pc, #220]	; (8020228 <_printf_float+0x2f0>)
 802014a:	2301      	movs	r3, #1
 802014c:	4631      	mov	r1, r6
 802014e:	4628      	mov	r0, r5
 8020150:	47b8      	blx	r7
 8020152:	3001      	adds	r0, #1
 8020154:	f43f af51 	beq.w	801fffa <_printf_float+0xc2>
 8020158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802015c:	429a      	cmp	r2, r3
 802015e:	db02      	blt.n	8020166 <_printf_float+0x22e>
 8020160:	6823      	ldr	r3, [r4, #0]
 8020162:	07d8      	lsls	r0, r3, #31
 8020164:	d510      	bpl.n	8020188 <_printf_float+0x250>
 8020166:	ee18 3a10 	vmov	r3, s16
 802016a:	4652      	mov	r2, sl
 802016c:	4631      	mov	r1, r6
 802016e:	4628      	mov	r0, r5
 8020170:	47b8      	blx	r7
 8020172:	3001      	adds	r0, #1
 8020174:	f43f af41 	beq.w	801fffa <_printf_float+0xc2>
 8020178:	f04f 0800 	mov.w	r8, #0
 802017c:	f104 091a 	add.w	r9, r4, #26
 8020180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020182:	3b01      	subs	r3, #1
 8020184:	4543      	cmp	r3, r8
 8020186:	dc09      	bgt.n	802019c <_printf_float+0x264>
 8020188:	6823      	ldr	r3, [r4, #0]
 802018a:	079b      	lsls	r3, r3, #30
 802018c:	f100 8105 	bmi.w	802039a <_printf_float+0x462>
 8020190:	68e0      	ldr	r0, [r4, #12]
 8020192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020194:	4298      	cmp	r0, r3
 8020196:	bfb8      	it	lt
 8020198:	4618      	movlt	r0, r3
 802019a:	e730      	b.n	801fffe <_printf_float+0xc6>
 802019c:	2301      	movs	r3, #1
 802019e:	464a      	mov	r2, r9
 80201a0:	4631      	mov	r1, r6
 80201a2:	4628      	mov	r0, r5
 80201a4:	47b8      	blx	r7
 80201a6:	3001      	adds	r0, #1
 80201a8:	f43f af27 	beq.w	801fffa <_printf_float+0xc2>
 80201ac:	f108 0801 	add.w	r8, r8, #1
 80201b0:	e7e6      	b.n	8020180 <_printf_float+0x248>
 80201b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	dc39      	bgt.n	802022c <_printf_float+0x2f4>
 80201b8:	4a1b      	ldr	r2, [pc, #108]	; (8020228 <_printf_float+0x2f0>)
 80201ba:	2301      	movs	r3, #1
 80201bc:	4631      	mov	r1, r6
 80201be:	4628      	mov	r0, r5
 80201c0:	47b8      	blx	r7
 80201c2:	3001      	adds	r0, #1
 80201c4:	f43f af19 	beq.w	801fffa <_printf_float+0xc2>
 80201c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80201cc:	4313      	orrs	r3, r2
 80201ce:	d102      	bne.n	80201d6 <_printf_float+0x29e>
 80201d0:	6823      	ldr	r3, [r4, #0]
 80201d2:	07d9      	lsls	r1, r3, #31
 80201d4:	d5d8      	bpl.n	8020188 <_printf_float+0x250>
 80201d6:	ee18 3a10 	vmov	r3, s16
 80201da:	4652      	mov	r2, sl
 80201dc:	4631      	mov	r1, r6
 80201de:	4628      	mov	r0, r5
 80201e0:	47b8      	blx	r7
 80201e2:	3001      	adds	r0, #1
 80201e4:	f43f af09 	beq.w	801fffa <_printf_float+0xc2>
 80201e8:	f04f 0900 	mov.w	r9, #0
 80201ec:	f104 0a1a 	add.w	sl, r4, #26
 80201f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201f2:	425b      	negs	r3, r3
 80201f4:	454b      	cmp	r3, r9
 80201f6:	dc01      	bgt.n	80201fc <_printf_float+0x2c4>
 80201f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201fa:	e792      	b.n	8020122 <_printf_float+0x1ea>
 80201fc:	2301      	movs	r3, #1
 80201fe:	4652      	mov	r2, sl
 8020200:	4631      	mov	r1, r6
 8020202:	4628      	mov	r0, r5
 8020204:	47b8      	blx	r7
 8020206:	3001      	adds	r0, #1
 8020208:	f43f aef7 	beq.w	801fffa <_printf_float+0xc2>
 802020c:	f109 0901 	add.w	r9, r9, #1
 8020210:	e7ee      	b.n	80201f0 <_printf_float+0x2b8>
 8020212:	bf00      	nop
 8020214:	7fefffff 	.word	0x7fefffff
 8020218:	0802322c 	.word	0x0802322c
 802021c:	08023230 	.word	0x08023230
 8020220:	08023238 	.word	0x08023238
 8020224:	08023234 	.word	0x08023234
 8020228:	0802323c 	.word	0x0802323c
 802022c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802022e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020230:	429a      	cmp	r2, r3
 8020232:	bfa8      	it	ge
 8020234:	461a      	movge	r2, r3
 8020236:	2a00      	cmp	r2, #0
 8020238:	4691      	mov	r9, r2
 802023a:	dc37      	bgt.n	80202ac <_printf_float+0x374>
 802023c:	f04f 0b00 	mov.w	fp, #0
 8020240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020244:	f104 021a 	add.w	r2, r4, #26
 8020248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802024a:	9305      	str	r3, [sp, #20]
 802024c:	eba3 0309 	sub.w	r3, r3, r9
 8020250:	455b      	cmp	r3, fp
 8020252:	dc33      	bgt.n	80202bc <_printf_float+0x384>
 8020254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020258:	429a      	cmp	r2, r3
 802025a:	db3b      	blt.n	80202d4 <_printf_float+0x39c>
 802025c:	6823      	ldr	r3, [r4, #0]
 802025e:	07da      	lsls	r2, r3, #31
 8020260:	d438      	bmi.n	80202d4 <_printf_float+0x39c>
 8020262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020264:	9a05      	ldr	r2, [sp, #20]
 8020266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020268:	1a9a      	subs	r2, r3, r2
 802026a:	eba3 0901 	sub.w	r9, r3, r1
 802026e:	4591      	cmp	r9, r2
 8020270:	bfa8      	it	ge
 8020272:	4691      	movge	r9, r2
 8020274:	f1b9 0f00 	cmp.w	r9, #0
 8020278:	dc35      	bgt.n	80202e6 <_printf_float+0x3ae>
 802027a:	f04f 0800 	mov.w	r8, #0
 802027e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020282:	f104 0a1a 	add.w	sl, r4, #26
 8020286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802028a:	1a9b      	subs	r3, r3, r2
 802028c:	eba3 0309 	sub.w	r3, r3, r9
 8020290:	4543      	cmp	r3, r8
 8020292:	f77f af79 	ble.w	8020188 <_printf_float+0x250>
 8020296:	2301      	movs	r3, #1
 8020298:	4652      	mov	r2, sl
 802029a:	4631      	mov	r1, r6
 802029c:	4628      	mov	r0, r5
 802029e:	47b8      	blx	r7
 80202a0:	3001      	adds	r0, #1
 80202a2:	f43f aeaa 	beq.w	801fffa <_printf_float+0xc2>
 80202a6:	f108 0801 	add.w	r8, r8, #1
 80202aa:	e7ec      	b.n	8020286 <_printf_float+0x34e>
 80202ac:	4613      	mov	r3, r2
 80202ae:	4631      	mov	r1, r6
 80202b0:	4642      	mov	r2, r8
 80202b2:	4628      	mov	r0, r5
 80202b4:	47b8      	blx	r7
 80202b6:	3001      	adds	r0, #1
 80202b8:	d1c0      	bne.n	802023c <_printf_float+0x304>
 80202ba:	e69e      	b.n	801fffa <_printf_float+0xc2>
 80202bc:	2301      	movs	r3, #1
 80202be:	4631      	mov	r1, r6
 80202c0:	4628      	mov	r0, r5
 80202c2:	9205      	str	r2, [sp, #20]
 80202c4:	47b8      	blx	r7
 80202c6:	3001      	adds	r0, #1
 80202c8:	f43f ae97 	beq.w	801fffa <_printf_float+0xc2>
 80202cc:	9a05      	ldr	r2, [sp, #20]
 80202ce:	f10b 0b01 	add.w	fp, fp, #1
 80202d2:	e7b9      	b.n	8020248 <_printf_float+0x310>
 80202d4:	ee18 3a10 	vmov	r3, s16
 80202d8:	4652      	mov	r2, sl
 80202da:	4631      	mov	r1, r6
 80202dc:	4628      	mov	r0, r5
 80202de:	47b8      	blx	r7
 80202e0:	3001      	adds	r0, #1
 80202e2:	d1be      	bne.n	8020262 <_printf_float+0x32a>
 80202e4:	e689      	b.n	801fffa <_printf_float+0xc2>
 80202e6:	9a05      	ldr	r2, [sp, #20]
 80202e8:	464b      	mov	r3, r9
 80202ea:	4442      	add	r2, r8
 80202ec:	4631      	mov	r1, r6
 80202ee:	4628      	mov	r0, r5
 80202f0:	47b8      	blx	r7
 80202f2:	3001      	adds	r0, #1
 80202f4:	d1c1      	bne.n	802027a <_printf_float+0x342>
 80202f6:	e680      	b.n	801fffa <_printf_float+0xc2>
 80202f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80202fa:	2a01      	cmp	r2, #1
 80202fc:	dc01      	bgt.n	8020302 <_printf_float+0x3ca>
 80202fe:	07db      	lsls	r3, r3, #31
 8020300:	d538      	bpl.n	8020374 <_printf_float+0x43c>
 8020302:	2301      	movs	r3, #1
 8020304:	4642      	mov	r2, r8
 8020306:	4631      	mov	r1, r6
 8020308:	4628      	mov	r0, r5
 802030a:	47b8      	blx	r7
 802030c:	3001      	adds	r0, #1
 802030e:	f43f ae74 	beq.w	801fffa <_printf_float+0xc2>
 8020312:	ee18 3a10 	vmov	r3, s16
 8020316:	4652      	mov	r2, sl
 8020318:	4631      	mov	r1, r6
 802031a:	4628      	mov	r0, r5
 802031c:	47b8      	blx	r7
 802031e:	3001      	adds	r0, #1
 8020320:	f43f ae6b 	beq.w	801fffa <_printf_float+0xc2>
 8020324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8020328:	2200      	movs	r2, #0
 802032a:	2300      	movs	r3, #0
 802032c:	f7e0 fbf4 	bl	8000b18 <__aeabi_dcmpeq>
 8020330:	b9d8      	cbnz	r0, 802036a <_printf_float+0x432>
 8020332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020334:	f108 0201 	add.w	r2, r8, #1
 8020338:	3b01      	subs	r3, #1
 802033a:	4631      	mov	r1, r6
 802033c:	4628      	mov	r0, r5
 802033e:	47b8      	blx	r7
 8020340:	3001      	adds	r0, #1
 8020342:	d10e      	bne.n	8020362 <_printf_float+0x42a>
 8020344:	e659      	b.n	801fffa <_printf_float+0xc2>
 8020346:	2301      	movs	r3, #1
 8020348:	4652      	mov	r2, sl
 802034a:	4631      	mov	r1, r6
 802034c:	4628      	mov	r0, r5
 802034e:	47b8      	blx	r7
 8020350:	3001      	adds	r0, #1
 8020352:	f43f ae52 	beq.w	801fffa <_printf_float+0xc2>
 8020356:	f108 0801 	add.w	r8, r8, #1
 802035a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802035c:	3b01      	subs	r3, #1
 802035e:	4543      	cmp	r3, r8
 8020360:	dcf1      	bgt.n	8020346 <_printf_float+0x40e>
 8020362:	464b      	mov	r3, r9
 8020364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020368:	e6dc      	b.n	8020124 <_printf_float+0x1ec>
 802036a:	f04f 0800 	mov.w	r8, #0
 802036e:	f104 0a1a 	add.w	sl, r4, #26
 8020372:	e7f2      	b.n	802035a <_printf_float+0x422>
 8020374:	2301      	movs	r3, #1
 8020376:	4642      	mov	r2, r8
 8020378:	e7df      	b.n	802033a <_printf_float+0x402>
 802037a:	2301      	movs	r3, #1
 802037c:	464a      	mov	r2, r9
 802037e:	4631      	mov	r1, r6
 8020380:	4628      	mov	r0, r5
 8020382:	47b8      	blx	r7
 8020384:	3001      	adds	r0, #1
 8020386:	f43f ae38 	beq.w	801fffa <_printf_float+0xc2>
 802038a:	f108 0801 	add.w	r8, r8, #1
 802038e:	68e3      	ldr	r3, [r4, #12]
 8020390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020392:	1a5b      	subs	r3, r3, r1
 8020394:	4543      	cmp	r3, r8
 8020396:	dcf0      	bgt.n	802037a <_printf_float+0x442>
 8020398:	e6fa      	b.n	8020190 <_printf_float+0x258>
 802039a:	f04f 0800 	mov.w	r8, #0
 802039e:	f104 0919 	add.w	r9, r4, #25
 80203a2:	e7f4      	b.n	802038e <_printf_float+0x456>

080203a4 <_printf_common>:
 80203a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203a8:	4616      	mov	r6, r2
 80203aa:	4699      	mov	r9, r3
 80203ac:	688a      	ldr	r2, [r1, #8]
 80203ae:	690b      	ldr	r3, [r1, #16]
 80203b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80203b4:	4293      	cmp	r3, r2
 80203b6:	bfb8      	it	lt
 80203b8:	4613      	movlt	r3, r2
 80203ba:	6033      	str	r3, [r6, #0]
 80203bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80203c0:	4607      	mov	r7, r0
 80203c2:	460c      	mov	r4, r1
 80203c4:	b10a      	cbz	r2, 80203ca <_printf_common+0x26>
 80203c6:	3301      	adds	r3, #1
 80203c8:	6033      	str	r3, [r6, #0]
 80203ca:	6823      	ldr	r3, [r4, #0]
 80203cc:	0699      	lsls	r1, r3, #26
 80203ce:	bf42      	ittt	mi
 80203d0:	6833      	ldrmi	r3, [r6, #0]
 80203d2:	3302      	addmi	r3, #2
 80203d4:	6033      	strmi	r3, [r6, #0]
 80203d6:	6825      	ldr	r5, [r4, #0]
 80203d8:	f015 0506 	ands.w	r5, r5, #6
 80203dc:	d106      	bne.n	80203ec <_printf_common+0x48>
 80203de:	f104 0a19 	add.w	sl, r4, #25
 80203e2:	68e3      	ldr	r3, [r4, #12]
 80203e4:	6832      	ldr	r2, [r6, #0]
 80203e6:	1a9b      	subs	r3, r3, r2
 80203e8:	42ab      	cmp	r3, r5
 80203ea:	dc26      	bgt.n	802043a <_printf_common+0x96>
 80203ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80203f0:	1e13      	subs	r3, r2, #0
 80203f2:	6822      	ldr	r2, [r4, #0]
 80203f4:	bf18      	it	ne
 80203f6:	2301      	movne	r3, #1
 80203f8:	0692      	lsls	r2, r2, #26
 80203fa:	d42b      	bmi.n	8020454 <_printf_common+0xb0>
 80203fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020400:	4649      	mov	r1, r9
 8020402:	4638      	mov	r0, r7
 8020404:	47c0      	blx	r8
 8020406:	3001      	adds	r0, #1
 8020408:	d01e      	beq.n	8020448 <_printf_common+0xa4>
 802040a:	6823      	ldr	r3, [r4, #0]
 802040c:	68e5      	ldr	r5, [r4, #12]
 802040e:	6832      	ldr	r2, [r6, #0]
 8020410:	f003 0306 	and.w	r3, r3, #6
 8020414:	2b04      	cmp	r3, #4
 8020416:	bf08      	it	eq
 8020418:	1aad      	subeq	r5, r5, r2
 802041a:	68a3      	ldr	r3, [r4, #8]
 802041c:	6922      	ldr	r2, [r4, #16]
 802041e:	bf0c      	ite	eq
 8020420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020424:	2500      	movne	r5, #0
 8020426:	4293      	cmp	r3, r2
 8020428:	bfc4      	itt	gt
 802042a:	1a9b      	subgt	r3, r3, r2
 802042c:	18ed      	addgt	r5, r5, r3
 802042e:	2600      	movs	r6, #0
 8020430:	341a      	adds	r4, #26
 8020432:	42b5      	cmp	r5, r6
 8020434:	d11a      	bne.n	802046c <_printf_common+0xc8>
 8020436:	2000      	movs	r0, #0
 8020438:	e008      	b.n	802044c <_printf_common+0xa8>
 802043a:	2301      	movs	r3, #1
 802043c:	4652      	mov	r2, sl
 802043e:	4649      	mov	r1, r9
 8020440:	4638      	mov	r0, r7
 8020442:	47c0      	blx	r8
 8020444:	3001      	adds	r0, #1
 8020446:	d103      	bne.n	8020450 <_printf_common+0xac>
 8020448:	f04f 30ff 	mov.w	r0, #4294967295
 802044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020450:	3501      	adds	r5, #1
 8020452:	e7c6      	b.n	80203e2 <_printf_common+0x3e>
 8020454:	18e1      	adds	r1, r4, r3
 8020456:	1c5a      	adds	r2, r3, #1
 8020458:	2030      	movs	r0, #48	; 0x30
 802045a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802045e:	4422      	add	r2, r4
 8020460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020468:	3302      	adds	r3, #2
 802046a:	e7c7      	b.n	80203fc <_printf_common+0x58>
 802046c:	2301      	movs	r3, #1
 802046e:	4622      	mov	r2, r4
 8020470:	4649      	mov	r1, r9
 8020472:	4638      	mov	r0, r7
 8020474:	47c0      	blx	r8
 8020476:	3001      	adds	r0, #1
 8020478:	d0e6      	beq.n	8020448 <_printf_common+0xa4>
 802047a:	3601      	adds	r6, #1
 802047c:	e7d9      	b.n	8020432 <_printf_common+0x8e>
	...

08020480 <_printf_i>:
 8020480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020484:	7e0f      	ldrb	r7, [r1, #24]
 8020486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020488:	2f78      	cmp	r7, #120	; 0x78
 802048a:	4691      	mov	r9, r2
 802048c:	4680      	mov	r8, r0
 802048e:	460c      	mov	r4, r1
 8020490:	469a      	mov	sl, r3
 8020492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020496:	d807      	bhi.n	80204a8 <_printf_i+0x28>
 8020498:	2f62      	cmp	r7, #98	; 0x62
 802049a:	d80a      	bhi.n	80204b2 <_printf_i+0x32>
 802049c:	2f00      	cmp	r7, #0
 802049e:	f000 80d8 	beq.w	8020652 <_printf_i+0x1d2>
 80204a2:	2f58      	cmp	r7, #88	; 0x58
 80204a4:	f000 80a3 	beq.w	80205ee <_printf_i+0x16e>
 80204a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80204ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80204b0:	e03a      	b.n	8020528 <_printf_i+0xa8>
 80204b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80204b6:	2b15      	cmp	r3, #21
 80204b8:	d8f6      	bhi.n	80204a8 <_printf_i+0x28>
 80204ba:	a101      	add	r1, pc, #4	; (adr r1, 80204c0 <_printf_i+0x40>)
 80204bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80204c0:	08020519 	.word	0x08020519
 80204c4:	0802052d 	.word	0x0802052d
 80204c8:	080204a9 	.word	0x080204a9
 80204cc:	080204a9 	.word	0x080204a9
 80204d0:	080204a9 	.word	0x080204a9
 80204d4:	080204a9 	.word	0x080204a9
 80204d8:	0802052d 	.word	0x0802052d
 80204dc:	080204a9 	.word	0x080204a9
 80204e0:	080204a9 	.word	0x080204a9
 80204e4:	080204a9 	.word	0x080204a9
 80204e8:	080204a9 	.word	0x080204a9
 80204ec:	08020639 	.word	0x08020639
 80204f0:	0802055d 	.word	0x0802055d
 80204f4:	0802061b 	.word	0x0802061b
 80204f8:	080204a9 	.word	0x080204a9
 80204fc:	080204a9 	.word	0x080204a9
 8020500:	0802065b 	.word	0x0802065b
 8020504:	080204a9 	.word	0x080204a9
 8020508:	0802055d 	.word	0x0802055d
 802050c:	080204a9 	.word	0x080204a9
 8020510:	080204a9 	.word	0x080204a9
 8020514:	08020623 	.word	0x08020623
 8020518:	682b      	ldr	r3, [r5, #0]
 802051a:	1d1a      	adds	r2, r3, #4
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	602a      	str	r2, [r5, #0]
 8020520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020528:	2301      	movs	r3, #1
 802052a:	e0a3      	b.n	8020674 <_printf_i+0x1f4>
 802052c:	6820      	ldr	r0, [r4, #0]
 802052e:	6829      	ldr	r1, [r5, #0]
 8020530:	0606      	lsls	r6, r0, #24
 8020532:	f101 0304 	add.w	r3, r1, #4
 8020536:	d50a      	bpl.n	802054e <_printf_i+0xce>
 8020538:	680e      	ldr	r6, [r1, #0]
 802053a:	602b      	str	r3, [r5, #0]
 802053c:	2e00      	cmp	r6, #0
 802053e:	da03      	bge.n	8020548 <_printf_i+0xc8>
 8020540:	232d      	movs	r3, #45	; 0x2d
 8020542:	4276      	negs	r6, r6
 8020544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020548:	485e      	ldr	r0, [pc, #376]	; (80206c4 <_printf_i+0x244>)
 802054a:	230a      	movs	r3, #10
 802054c:	e019      	b.n	8020582 <_printf_i+0x102>
 802054e:	680e      	ldr	r6, [r1, #0]
 8020550:	602b      	str	r3, [r5, #0]
 8020552:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020556:	bf18      	it	ne
 8020558:	b236      	sxthne	r6, r6
 802055a:	e7ef      	b.n	802053c <_printf_i+0xbc>
 802055c:	682b      	ldr	r3, [r5, #0]
 802055e:	6820      	ldr	r0, [r4, #0]
 8020560:	1d19      	adds	r1, r3, #4
 8020562:	6029      	str	r1, [r5, #0]
 8020564:	0601      	lsls	r1, r0, #24
 8020566:	d501      	bpl.n	802056c <_printf_i+0xec>
 8020568:	681e      	ldr	r6, [r3, #0]
 802056a:	e002      	b.n	8020572 <_printf_i+0xf2>
 802056c:	0646      	lsls	r6, r0, #25
 802056e:	d5fb      	bpl.n	8020568 <_printf_i+0xe8>
 8020570:	881e      	ldrh	r6, [r3, #0]
 8020572:	4854      	ldr	r0, [pc, #336]	; (80206c4 <_printf_i+0x244>)
 8020574:	2f6f      	cmp	r7, #111	; 0x6f
 8020576:	bf0c      	ite	eq
 8020578:	2308      	moveq	r3, #8
 802057a:	230a      	movne	r3, #10
 802057c:	2100      	movs	r1, #0
 802057e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020582:	6865      	ldr	r5, [r4, #4]
 8020584:	60a5      	str	r5, [r4, #8]
 8020586:	2d00      	cmp	r5, #0
 8020588:	bfa2      	ittt	ge
 802058a:	6821      	ldrge	r1, [r4, #0]
 802058c:	f021 0104 	bicge.w	r1, r1, #4
 8020590:	6021      	strge	r1, [r4, #0]
 8020592:	b90e      	cbnz	r6, 8020598 <_printf_i+0x118>
 8020594:	2d00      	cmp	r5, #0
 8020596:	d04d      	beq.n	8020634 <_printf_i+0x1b4>
 8020598:	4615      	mov	r5, r2
 802059a:	fbb6 f1f3 	udiv	r1, r6, r3
 802059e:	fb03 6711 	mls	r7, r3, r1, r6
 80205a2:	5dc7      	ldrb	r7, [r0, r7]
 80205a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80205a8:	4637      	mov	r7, r6
 80205aa:	42bb      	cmp	r3, r7
 80205ac:	460e      	mov	r6, r1
 80205ae:	d9f4      	bls.n	802059a <_printf_i+0x11a>
 80205b0:	2b08      	cmp	r3, #8
 80205b2:	d10b      	bne.n	80205cc <_printf_i+0x14c>
 80205b4:	6823      	ldr	r3, [r4, #0]
 80205b6:	07de      	lsls	r6, r3, #31
 80205b8:	d508      	bpl.n	80205cc <_printf_i+0x14c>
 80205ba:	6923      	ldr	r3, [r4, #16]
 80205bc:	6861      	ldr	r1, [r4, #4]
 80205be:	4299      	cmp	r1, r3
 80205c0:	bfde      	ittt	le
 80205c2:	2330      	movle	r3, #48	; 0x30
 80205c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80205c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80205cc:	1b52      	subs	r2, r2, r5
 80205ce:	6122      	str	r2, [r4, #16]
 80205d0:	f8cd a000 	str.w	sl, [sp]
 80205d4:	464b      	mov	r3, r9
 80205d6:	aa03      	add	r2, sp, #12
 80205d8:	4621      	mov	r1, r4
 80205da:	4640      	mov	r0, r8
 80205dc:	f7ff fee2 	bl	80203a4 <_printf_common>
 80205e0:	3001      	adds	r0, #1
 80205e2:	d14c      	bne.n	802067e <_printf_i+0x1fe>
 80205e4:	f04f 30ff 	mov.w	r0, #4294967295
 80205e8:	b004      	add	sp, #16
 80205ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ee:	4835      	ldr	r0, [pc, #212]	; (80206c4 <_printf_i+0x244>)
 80205f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80205f4:	6829      	ldr	r1, [r5, #0]
 80205f6:	6823      	ldr	r3, [r4, #0]
 80205f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80205fc:	6029      	str	r1, [r5, #0]
 80205fe:	061d      	lsls	r5, r3, #24
 8020600:	d514      	bpl.n	802062c <_printf_i+0x1ac>
 8020602:	07df      	lsls	r7, r3, #31
 8020604:	bf44      	itt	mi
 8020606:	f043 0320 	orrmi.w	r3, r3, #32
 802060a:	6023      	strmi	r3, [r4, #0]
 802060c:	b91e      	cbnz	r6, 8020616 <_printf_i+0x196>
 802060e:	6823      	ldr	r3, [r4, #0]
 8020610:	f023 0320 	bic.w	r3, r3, #32
 8020614:	6023      	str	r3, [r4, #0]
 8020616:	2310      	movs	r3, #16
 8020618:	e7b0      	b.n	802057c <_printf_i+0xfc>
 802061a:	6823      	ldr	r3, [r4, #0]
 802061c:	f043 0320 	orr.w	r3, r3, #32
 8020620:	6023      	str	r3, [r4, #0]
 8020622:	2378      	movs	r3, #120	; 0x78
 8020624:	4828      	ldr	r0, [pc, #160]	; (80206c8 <_printf_i+0x248>)
 8020626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802062a:	e7e3      	b.n	80205f4 <_printf_i+0x174>
 802062c:	0659      	lsls	r1, r3, #25
 802062e:	bf48      	it	mi
 8020630:	b2b6      	uxthmi	r6, r6
 8020632:	e7e6      	b.n	8020602 <_printf_i+0x182>
 8020634:	4615      	mov	r5, r2
 8020636:	e7bb      	b.n	80205b0 <_printf_i+0x130>
 8020638:	682b      	ldr	r3, [r5, #0]
 802063a:	6826      	ldr	r6, [r4, #0]
 802063c:	6961      	ldr	r1, [r4, #20]
 802063e:	1d18      	adds	r0, r3, #4
 8020640:	6028      	str	r0, [r5, #0]
 8020642:	0635      	lsls	r5, r6, #24
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	d501      	bpl.n	802064c <_printf_i+0x1cc>
 8020648:	6019      	str	r1, [r3, #0]
 802064a:	e002      	b.n	8020652 <_printf_i+0x1d2>
 802064c:	0670      	lsls	r0, r6, #25
 802064e:	d5fb      	bpl.n	8020648 <_printf_i+0x1c8>
 8020650:	8019      	strh	r1, [r3, #0]
 8020652:	2300      	movs	r3, #0
 8020654:	6123      	str	r3, [r4, #16]
 8020656:	4615      	mov	r5, r2
 8020658:	e7ba      	b.n	80205d0 <_printf_i+0x150>
 802065a:	682b      	ldr	r3, [r5, #0]
 802065c:	1d1a      	adds	r2, r3, #4
 802065e:	602a      	str	r2, [r5, #0]
 8020660:	681d      	ldr	r5, [r3, #0]
 8020662:	6862      	ldr	r2, [r4, #4]
 8020664:	2100      	movs	r1, #0
 8020666:	4628      	mov	r0, r5
 8020668:	f7df fde2 	bl	8000230 <memchr>
 802066c:	b108      	cbz	r0, 8020672 <_printf_i+0x1f2>
 802066e:	1b40      	subs	r0, r0, r5
 8020670:	6060      	str	r0, [r4, #4]
 8020672:	6863      	ldr	r3, [r4, #4]
 8020674:	6123      	str	r3, [r4, #16]
 8020676:	2300      	movs	r3, #0
 8020678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802067c:	e7a8      	b.n	80205d0 <_printf_i+0x150>
 802067e:	6923      	ldr	r3, [r4, #16]
 8020680:	462a      	mov	r2, r5
 8020682:	4649      	mov	r1, r9
 8020684:	4640      	mov	r0, r8
 8020686:	47d0      	blx	sl
 8020688:	3001      	adds	r0, #1
 802068a:	d0ab      	beq.n	80205e4 <_printf_i+0x164>
 802068c:	6823      	ldr	r3, [r4, #0]
 802068e:	079b      	lsls	r3, r3, #30
 8020690:	d413      	bmi.n	80206ba <_printf_i+0x23a>
 8020692:	68e0      	ldr	r0, [r4, #12]
 8020694:	9b03      	ldr	r3, [sp, #12]
 8020696:	4298      	cmp	r0, r3
 8020698:	bfb8      	it	lt
 802069a:	4618      	movlt	r0, r3
 802069c:	e7a4      	b.n	80205e8 <_printf_i+0x168>
 802069e:	2301      	movs	r3, #1
 80206a0:	4632      	mov	r2, r6
 80206a2:	4649      	mov	r1, r9
 80206a4:	4640      	mov	r0, r8
 80206a6:	47d0      	blx	sl
 80206a8:	3001      	adds	r0, #1
 80206aa:	d09b      	beq.n	80205e4 <_printf_i+0x164>
 80206ac:	3501      	adds	r5, #1
 80206ae:	68e3      	ldr	r3, [r4, #12]
 80206b0:	9903      	ldr	r1, [sp, #12]
 80206b2:	1a5b      	subs	r3, r3, r1
 80206b4:	42ab      	cmp	r3, r5
 80206b6:	dcf2      	bgt.n	802069e <_printf_i+0x21e>
 80206b8:	e7eb      	b.n	8020692 <_printf_i+0x212>
 80206ba:	2500      	movs	r5, #0
 80206bc:	f104 0619 	add.w	r6, r4, #25
 80206c0:	e7f5      	b.n	80206ae <_printf_i+0x22e>
 80206c2:	bf00      	nop
 80206c4:	0802323e 	.word	0x0802323e
 80206c8:	0802324f 	.word	0x0802324f

080206cc <iprintf>:
 80206cc:	b40f      	push	{r0, r1, r2, r3}
 80206ce:	4b0a      	ldr	r3, [pc, #40]	; (80206f8 <iprintf+0x2c>)
 80206d0:	b513      	push	{r0, r1, r4, lr}
 80206d2:	681c      	ldr	r4, [r3, #0]
 80206d4:	b124      	cbz	r4, 80206e0 <iprintf+0x14>
 80206d6:	69a3      	ldr	r3, [r4, #24]
 80206d8:	b913      	cbnz	r3, 80206e0 <iprintf+0x14>
 80206da:	4620      	mov	r0, r4
 80206dc:	f001 f8f0 	bl	80218c0 <__sinit>
 80206e0:	ab05      	add	r3, sp, #20
 80206e2:	9a04      	ldr	r2, [sp, #16]
 80206e4:	68a1      	ldr	r1, [r4, #8]
 80206e6:	9301      	str	r3, [sp, #4]
 80206e8:	4620      	mov	r0, r4
 80206ea:	f001 fe9f 	bl	802242c <_vfiprintf_r>
 80206ee:	b002      	add	sp, #8
 80206f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206f4:	b004      	add	sp, #16
 80206f6:	4770      	bx	lr
 80206f8:	2000002c 	.word	0x2000002c

080206fc <putchar>:
 80206fc:	4b09      	ldr	r3, [pc, #36]	; (8020724 <putchar+0x28>)
 80206fe:	b513      	push	{r0, r1, r4, lr}
 8020700:	681c      	ldr	r4, [r3, #0]
 8020702:	4601      	mov	r1, r0
 8020704:	b134      	cbz	r4, 8020714 <putchar+0x18>
 8020706:	69a3      	ldr	r3, [r4, #24]
 8020708:	b923      	cbnz	r3, 8020714 <putchar+0x18>
 802070a:	9001      	str	r0, [sp, #4]
 802070c:	4620      	mov	r0, r4
 802070e:	f001 f8d7 	bl	80218c0 <__sinit>
 8020712:	9901      	ldr	r1, [sp, #4]
 8020714:	68a2      	ldr	r2, [r4, #8]
 8020716:	4620      	mov	r0, r4
 8020718:	b002      	add	sp, #8
 802071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802071e:	f001 bfb5 	b.w	802268c <_putc_r>
 8020722:	bf00      	nop
 8020724:	2000002c 	.word	0x2000002c

08020728 <_puts_r>:
 8020728:	b570      	push	{r4, r5, r6, lr}
 802072a:	460e      	mov	r6, r1
 802072c:	4605      	mov	r5, r0
 802072e:	b118      	cbz	r0, 8020738 <_puts_r+0x10>
 8020730:	6983      	ldr	r3, [r0, #24]
 8020732:	b90b      	cbnz	r3, 8020738 <_puts_r+0x10>
 8020734:	f001 f8c4 	bl	80218c0 <__sinit>
 8020738:	69ab      	ldr	r3, [r5, #24]
 802073a:	68ac      	ldr	r4, [r5, #8]
 802073c:	b913      	cbnz	r3, 8020744 <_puts_r+0x1c>
 802073e:	4628      	mov	r0, r5
 8020740:	f001 f8be 	bl	80218c0 <__sinit>
 8020744:	4b2c      	ldr	r3, [pc, #176]	; (80207f8 <_puts_r+0xd0>)
 8020746:	429c      	cmp	r4, r3
 8020748:	d120      	bne.n	802078c <_puts_r+0x64>
 802074a:	686c      	ldr	r4, [r5, #4]
 802074c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802074e:	07db      	lsls	r3, r3, #31
 8020750:	d405      	bmi.n	802075e <_puts_r+0x36>
 8020752:	89a3      	ldrh	r3, [r4, #12]
 8020754:	0598      	lsls	r0, r3, #22
 8020756:	d402      	bmi.n	802075e <_puts_r+0x36>
 8020758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802075a:	f001 f954 	bl	8021a06 <__retarget_lock_acquire_recursive>
 802075e:	89a3      	ldrh	r3, [r4, #12]
 8020760:	0719      	lsls	r1, r3, #28
 8020762:	d51d      	bpl.n	80207a0 <_puts_r+0x78>
 8020764:	6923      	ldr	r3, [r4, #16]
 8020766:	b1db      	cbz	r3, 80207a0 <_puts_r+0x78>
 8020768:	3e01      	subs	r6, #1
 802076a:	68a3      	ldr	r3, [r4, #8]
 802076c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020770:	3b01      	subs	r3, #1
 8020772:	60a3      	str	r3, [r4, #8]
 8020774:	bb39      	cbnz	r1, 80207c6 <_puts_r+0x9e>
 8020776:	2b00      	cmp	r3, #0
 8020778:	da38      	bge.n	80207ec <_puts_r+0xc4>
 802077a:	4622      	mov	r2, r4
 802077c:	210a      	movs	r1, #10
 802077e:	4628      	mov	r0, r5
 8020780:	f000 f848 	bl	8020814 <__swbuf_r>
 8020784:	3001      	adds	r0, #1
 8020786:	d011      	beq.n	80207ac <_puts_r+0x84>
 8020788:	250a      	movs	r5, #10
 802078a:	e011      	b.n	80207b0 <_puts_r+0x88>
 802078c:	4b1b      	ldr	r3, [pc, #108]	; (80207fc <_puts_r+0xd4>)
 802078e:	429c      	cmp	r4, r3
 8020790:	d101      	bne.n	8020796 <_puts_r+0x6e>
 8020792:	68ac      	ldr	r4, [r5, #8]
 8020794:	e7da      	b.n	802074c <_puts_r+0x24>
 8020796:	4b1a      	ldr	r3, [pc, #104]	; (8020800 <_puts_r+0xd8>)
 8020798:	429c      	cmp	r4, r3
 802079a:	bf08      	it	eq
 802079c:	68ec      	ldreq	r4, [r5, #12]
 802079e:	e7d5      	b.n	802074c <_puts_r+0x24>
 80207a0:	4621      	mov	r1, r4
 80207a2:	4628      	mov	r0, r5
 80207a4:	f000 f888 	bl	80208b8 <__swsetup_r>
 80207a8:	2800      	cmp	r0, #0
 80207aa:	d0dd      	beq.n	8020768 <_puts_r+0x40>
 80207ac:	f04f 35ff 	mov.w	r5, #4294967295
 80207b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80207b2:	07da      	lsls	r2, r3, #31
 80207b4:	d405      	bmi.n	80207c2 <_puts_r+0x9a>
 80207b6:	89a3      	ldrh	r3, [r4, #12]
 80207b8:	059b      	lsls	r3, r3, #22
 80207ba:	d402      	bmi.n	80207c2 <_puts_r+0x9a>
 80207bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80207be:	f001 f923 	bl	8021a08 <__retarget_lock_release_recursive>
 80207c2:	4628      	mov	r0, r5
 80207c4:	bd70      	pop	{r4, r5, r6, pc}
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	da04      	bge.n	80207d4 <_puts_r+0xac>
 80207ca:	69a2      	ldr	r2, [r4, #24]
 80207cc:	429a      	cmp	r2, r3
 80207ce:	dc06      	bgt.n	80207de <_puts_r+0xb6>
 80207d0:	290a      	cmp	r1, #10
 80207d2:	d004      	beq.n	80207de <_puts_r+0xb6>
 80207d4:	6823      	ldr	r3, [r4, #0]
 80207d6:	1c5a      	adds	r2, r3, #1
 80207d8:	6022      	str	r2, [r4, #0]
 80207da:	7019      	strb	r1, [r3, #0]
 80207dc:	e7c5      	b.n	802076a <_puts_r+0x42>
 80207de:	4622      	mov	r2, r4
 80207e0:	4628      	mov	r0, r5
 80207e2:	f000 f817 	bl	8020814 <__swbuf_r>
 80207e6:	3001      	adds	r0, #1
 80207e8:	d1bf      	bne.n	802076a <_puts_r+0x42>
 80207ea:	e7df      	b.n	80207ac <_puts_r+0x84>
 80207ec:	6823      	ldr	r3, [r4, #0]
 80207ee:	250a      	movs	r5, #10
 80207f0:	1c5a      	adds	r2, r3, #1
 80207f2:	6022      	str	r2, [r4, #0]
 80207f4:	701d      	strb	r5, [r3, #0]
 80207f6:	e7db      	b.n	80207b0 <_puts_r+0x88>
 80207f8:	08023310 	.word	0x08023310
 80207fc:	08023330 	.word	0x08023330
 8020800:	080232f0 	.word	0x080232f0

08020804 <puts>:
 8020804:	4b02      	ldr	r3, [pc, #8]	; (8020810 <puts+0xc>)
 8020806:	4601      	mov	r1, r0
 8020808:	6818      	ldr	r0, [r3, #0]
 802080a:	f7ff bf8d 	b.w	8020728 <_puts_r>
 802080e:	bf00      	nop
 8020810:	2000002c 	.word	0x2000002c

08020814 <__swbuf_r>:
 8020814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020816:	460e      	mov	r6, r1
 8020818:	4614      	mov	r4, r2
 802081a:	4605      	mov	r5, r0
 802081c:	b118      	cbz	r0, 8020826 <__swbuf_r+0x12>
 802081e:	6983      	ldr	r3, [r0, #24]
 8020820:	b90b      	cbnz	r3, 8020826 <__swbuf_r+0x12>
 8020822:	f001 f84d 	bl	80218c0 <__sinit>
 8020826:	4b21      	ldr	r3, [pc, #132]	; (80208ac <__swbuf_r+0x98>)
 8020828:	429c      	cmp	r4, r3
 802082a:	d12b      	bne.n	8020884 <__swbuf_r+0x70>
 802082c:	686c      	ldr	r4, [r5, #4]
 802082e:	69a3      	ldr	r3, [r4, #24]
 8020830:	60a3      	str	r3, [r4, #8]
 8020832:	89a3      	ldrh	r3, [r4, #12]
 8020834:	071a      	lsls	r2, r3, #28
 8020836:	d52f      	bpl.n	8020898 <__swbuf_r+0x84>
 8020838:	6923      	ldr	r3, [r4, #16]
 802083a:	b36b      	cbz	r3, 8020898 <__swbuf_r+0x84>
 802083c:	6923      	ldr	r3, [r4, #16]
 802083e:	6820      	ldr	r0, [r4, #0]
 8020840:	1ac0      	subs	r0, r0, r3
 8020842:	6963      	ldr	r3, [r4, #20]
 8020844:	b2f6      	uxtb	r6, r6
 8020846:	4283      	cmp	r3, r0
 8020848:	4637      	mov	r7, r6
 802084a:	dc04      	bgt.n	8020856 <__swbuf_r+0x42>
 802084c:	4621      	mov	r1, r4
 802084e:	4628      	mov	r0, r5
 8020850:	f000 ffa2 	bl	8021798 <_fflush_r>
 8020854:	bb30      	cbnz	r0, 80208a4 <__swbuf_r+0x90>
 8020856:	68a3      	ldr	r3, [r4, #8]
 8020858:	3b01      	subs	r3, #1
 802085a:	60a3      	str	r3, [r4, #8]
 802085c:	6823      	ldr	r3, [r4, #0]
 802085e:	1c5a      	adds	r2, r3, #1
 8020860:	6022      	str	r2, [r4, #0]
 8020862:	701e      	strb	r6, [r3, #0]
 8020864:	6963      	ldr	r3, [r4, #20]
 8020866:	3001      	adds	r0, #1
 8020868:	4283      	cmp	r3, r0
 802086a:	d004      	beq.n	8020876 <__swbuf_r+0x62>
 802086c:	89a3      	ldrh	r3, [r4, #12]
 802086e:	07db      	lsls	r3, r3, #31
 8020870:	d506      	bpl.n	8020880 <__swbuf_r+0x6c>
 8020872:	2e0a      	cmp	r6, #10
 8020874:	d104      	bne.n	8020880 <__swbuf_r+0x6c>
 8020876:	4621      	mov	r1, r4
 8020878:	4628      	mov	r0, r5
 802087a:	f000 ff8d 	bl	8021798 <_fflush_r>
 802087e:	b988      	cbnz	r0, 80208a4 <__swbuf_r+0x90>
 8020880:	4638      	mov	r0, r7
 8020882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020884:	4b0a      	ldr	r3, [pc, #40]	; (80208b0 <__swbuf_r+0x9c>)
 8020886:	429c      	cmp	r4, r3
 8020888:	d101      	bne.n	802088e <__swbuf_r+0x7a>
 802088a:	68ac      	ldr	r4, [r5, #8]
 802088c:	e7cf      	b.n	802082e <__swbuf_r+0x1a>
 802088e:	4b09      	ldr	r3, [pc, #36]	; (80208b4 <__swbuf_r+0xa0>)
 8020890:	429c      	cmp	r4, r3
 8020892:	bf08      	it	eq
 8020894:	68ec      	ldreq	r4, [r5, #12]
 8020896:	e7ca      	b.n	802082e <__swbuf_r+0x1a>
 8020898:	4621      	mov	r1, r4
 802089a:	4628      	mov	r0, r5
 802089c:	f000 f80c 	bl	80208b8 <__swsetup_r>
 80208a0:	2800      	cmp	r0, #0
 80208a2:	d0cb      	beq.n	802083c <__swbuf_r+0x28>
 80208a4:	f04f 37ff 	mov.w	r7, #4294967295
 80208a8:	e7ea      	b.n	8020880 <__swbuf_r+0x6c>
 80208aa:	bf00      	nop
 80208ac:	08023310 	.word	0x08023310
 80208b0:	08023330 	.word	0x08023330
 80208b4:	080232f0 	.word	0x080232f0

080208b8 <__swsetup_r>:
 80208b8:	4b32      	ldr	r3, [pc, #200]	; (8020984 <__swsetup_r+0xcc>)
 80208ba:	b570      	push	{r4, r5, r6, lr}
 80208bc:	681d      	ldr	r5, [r3, #0]
 80208be:	4606      	mov	r6, r0
 80208c0:	460c      	mov	r4, r1
 80208c2:	b125      	cbz	r5, 80208ce <__swsetup_r+0x16>
 80208c4:	69ab      	ldr	r3, [r5, #24]
 80208c6:	b913      	cbnz	r3, 80208ce <__swsetup_r+0x16>
 80208c8:	4628      	mov	r0, r5
 80208ca:	f000 fff9 	bl	80218c0 <__sinit>
 80208ce:	4b2e      	ldr	r3, [pc, #184]	; (8020988 <__swsetup_r+0xd0>)
 80208d0:	429c      	cmp	r4, r3
 80208d2:	d10f      	bne.n	80208f4 <__swsetup_r+0x3c>
 80208d4:	686c      	ldr	r4, [r5, #4]
 80208d6:	89a3      	ldrh	r3, [r4, #12]
 80208d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80208dc:	0719      	lsls	r1, r3, #28
 80208de:	d42c      	bmi.n	802093a <__swsetup_r+0x82>
 80208e0:	06dd      	lsls	r5, r3, #27
 80208e2:	d411      	bmi.n	8020908 <__swsetup_r+0x50>
 80208e4:	2309      	movs	r3, #9
 80208e6:	6033      	str	r3, [r6, #0]
 80208e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80208ec:	81a3      	strh	r3, [r4, #12]
 80208ee:	f04f 30ff 	mov.w	r0, #4294967295
 80208f2:	e03e      	b.n	8020972 <__swsetup_r+0xba>
 80208f4:	4b25      	ldr	r3, [pc, #148]	; (802098c <__swsetup_r+0xd4>)
 80208f6:	429c      	cmp	r4, r3
 80208f8:	d101      	bne.n	80208fe <__swsetup_r+0x46>
 80208fa:	68ac      	ldr	r4, [r5, #8]
 80208fc:	e7eb      	b.n	80208d6 <__swsetup_r+0x1e>
 80208fe:	4b24      	ldr	r3, [pc, #144]	; (8020990 <__swsetup_r+0xd8>)
 8020900:	429c      	cmp	r4, r3
 8020902:	bf08      	it	eq
 8020904:	68ec      	ldreq	r4, [r5, #12]
 8020906:	e7e6      	b.n	80208d6 <__swsetup_r+0x1e>
 8020908:	0758      	lsls	r0, r3, #29
 802090a:	d512      	bpl.n	8020932 <__swsetup_r+0x7a>
 802090c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802090e:	b141      	cbz	r1, 8020922 <__swsetup_r+0x6a>
 8020910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020914:	4299      	cmp	r1, r3
 8020916:	d002      	beq.n	802091e <__swsetup_r+0x66>
 8020918:	4630      	mov	r0, r6
 802091a:	f001 fc7d 	bl	8022218 <_free_r>
 802091e:	2300      	movs	r3, #0
 8020920:	6363      	str	r3, [r4, #52]	; 0x34
 8020922:	89a3      	ldrh	r3, [r4, #12]
 8020924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020928:	81a3      	strh	r3, [r4, #12]
 802092a:	2300      	movs	r3, #0
 802092c:	6063      	str	r3, [r4, #4]
 802092e:	6923      	ldr	r3, [r4, #16]
 8020930:	6023      	str	r3, [r4, #0]
 8020932:	89a3      	ldrh	r3, [r4, #12]
 8020934:	f043 0308 	orr.w	r3, r3, #8
 8020938:	81a3      	strh	r3, [r4, #12]
 802093a:	6923      	ldr	r3, [r4, #16]
 802093c:	b94b      	cbnz	r3, 8020952 <__swsetup_r+0x9a>
 802093e:	89a3      	ldrh	r3, [r4, #12]
 8020940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020948:	d003      	beq.n	8020952 <__swsetup_r+0x9a>
 802094a:	4621      	mov	r1, r4
 802094c:	4630      	mov	r0, r6
 802094e:	f001 f881 	bl	8021a54 <__smakebuf_r>
 8020952:	89a0      	ldrh	r0, [r4, #12]
 8020954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020958:	f010 0301 	ands.w	r3, r0, #1
 802095c:	d00a      	beq.n	8020974 <__swsetup_r+0xbc>
 802095e:	2300      	movs	r3, #0
 8020960:	60a3      	str	r3, [r4, #8]
 8020962:	6963      	ldr	r3, [r4, #20]
 8020964:	425b      	negs	r3, r3
 8020966:	61a3      	str	r3, [r4, #24]
 8020968:	6923      	ldr	r3, [r4, #16]
 802096a:	b943      	cbnz	r3, 802097e <__swsetup_r+0xc6>
 802096c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020970:	d1ba      	bne.n	80208e8 <__swsetup_r+0x30>
 8020972:	bd70      	pop	{r4, r5, r6, pc}
 8020974:	0781      	lsls	r1, r0, #30
 8020976:	bf58      	it	pl
 8020978:	6963      	ldrpl	r3, [r4, #20]
 802097a:	60a3      	str	r3, [r4, #8]
 802097c:	e7f4      	b.n	8020968 <__swsetup_r+0xb0>
 802097e:	2000      	movs	r0, #0
 8020980:	e7f7      	b.n	8020972 <__swsetup_r+0xba>
 8020982:	bf00      	nop
 8020984:	2000002c 	.word	0x2000002c
 8020988:	08023310 	.word	0x08023310
 802098c:	08023330 	.word	0x08023330
 8020990:	080232f0 	.word	0x080232f0

08020994 <quorem>:
 8020994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020998:	6903      	ldr	r3, [r0, #16]
 802099a:	690c      	ldr	r4, [r1, #16]
 802099c:	42a3      	cmp	r3, r4
 802099e:	4607      	mov	r7, r0
 80209a0:	f2c0 8081 	blt.w	8020aa6 <quorem+0x112>
 80209a4:	3c01      	subs	r4, #1
 80209a6:	f101 0814 	add.w	r8, r1, #20
 80209aa:	f100 0514 	add.w	r5, r0, #20
 80209ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80209b2:	9301      	str	r3, [sp, #4]
 80209b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80209b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80209bc:	3301      	adds	r3, #1
 80209be:	429a      	cmp	r2, r3
 80209c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80209c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80209c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80209cc:	d331      	bcc.n	8020a32 <quorem+0x9e>
 80209ce:	f04f 0e00 	mov.w	lr, #0
 80209d2:	4640      	mov	r0, r8
 80209d4:	46ac      	mov	ip, r5
 80209d6:	46f2      	mov	sl, lr
 80209d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80209dc:	b293      	uxth	r3, r2
 80209de:	fb06 e303 	mla	r3, r6, r3, lr
 80209e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80209e6:	b29b      	uxth	r3, r3
 80209e8:	ebaa 0303 	sub.w	r3, sl, r3
 80209ec:	f8dc a000 	ldr.w	sl, [ip]
 80209f0:	0c12      	lsrs	r2, r2, #16
 80209f2:	fa13 f38a 	uxtah	r3, r3, sl
 80209f6:	fb06 e202 	mla	r2, r6, r2, lr
 80209fa:	9300      	str	r3, [sp, #0]
 80209fc:	9b00      	ldr	r3, [sp, #0]
 80209fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020a02:	b292      	uxth	r2, r2
 8020a04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020a08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020a0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8020a10:	4581      	cmp	r9, r0
 8020a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020a16:	f84c 3b04 	str.w	r3, [ip], #4
 8020a1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020a1e:	d2db      	bcs.n	80209d8 <quorem+0x44>
 8020a20:	f855 300b 	ldr.w	r3, [r5, fp]
 8020a24:	b92b      	cbnz	r3, 8020a32 <quorem+0x9e>
 8020a26:	9b01      	ldr	r3, [sp, #4]
 8020a28:	3b04      	subs	r3, #4
 8020a2a:	429d      	cmp	r5, r3
 8020a2c:	461a      	mov	r2, r3
 8020a2e:	d32e      	bcc.n	8020a8e <quorem+0xfa>
 8020a30:	613c      	str	r4, [r7, #16]
 8020a32:	4638      	mov	r0, r7
 8020a34:	f001 fad8 	bl	8021fe8 <__mcmp>
 8020a38:	2800      	cmp	r0, #0
 8020a3a:	db24      	blt.n	8020a86 <quorem+0xf2>
 8020a3c:	3601      	adds	r6, #1
 8020a3e:	4628      	mov	r0, r5
 8020a40:	f04f 0c00 	mov.w	ip, #0
 8020a44:	f858 2b04 	ldr.w	r2, [r8], #4
 8020a48:	f8d0 e000 	ldr.w	lr, [r0]
 8020a4c:	b293      	uxth	r3, r2
 8020a4e:	ebac 0303 	sub.w	r3, ip, r3
 8020a52:	0c12      	lsrs	r2, r2, #16
 8020a54:	fa13 f38e 	uxtah	r3, r3, lr
 8020a58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020a60:	b29b      	uxth	r3, r3
 8020a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020a66:	45c1      	cmp	r9, r8
 8020a68:	f840 3b04 	str.w	r3, [r0], #4
 8020a6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020a70:	d2e8      	bcs.n	8020a44 <quorem+0xb0>
 8020a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020a7a:	b922      	cbnz	r2, 8020a86 <quorem+0xf2>
 8020a7c:	3b04      	subs	r3, #4
 8020a7e:	429d      	cmp	r5, r3
 8020a80:	461a      	mov	r2, r3
 8020a82:	d30a      	bcc.n	8020a9a <quorem+0x106>
 8020a84:	613c      	str	r4, [r7, #16]
 8020a86:	4630      	mov	r0, r6
 8020a88:	b003      	add	sp, #12
 8020a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a8e:	6812      	ldr	r2, [r2, #0]
 8020a90:	3b04      	subs	r3, #4
 8020a92:	2a00      	cmp	r2, #0
 8020a94:	d1cc      	bne.n	8020a30 <quorem+0x9c>
 8020a96:	3c01      	subs	r4, #1
 8020a98:	e7c7      	b.n	8020a2a <quorem+0x96>
 8020a9a:	6812      	ldr	r2, [r2, #0]
 8020a9c:	3b04      	subs	r3, #4
 8020a9e:	2a00      	cmp	r2, #0
 8020aa0:	d1f0      	bne.n	8020a84 <quorem+0xf0>
 8020aa2:	3c01      	subs	r4, #1
 8020aa4:	e7eb      	b.n	8020a7e <quorem+0xea>
 8020aa6:	2000      	movs	r0, #0
 8020aa8:	e7ee      	b.n	8020a88 <quorem+0xf4>
 8020aaa:	0000      	movs	r0, r0
 8020aac:	0000      	movs	r0, r0
	...

08020ab0 <_dtoa_r>:
 8020ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ab4:	ed2d 8b04 	vpush	{d8-d9}
 8020ab8:	ec57 6b10 	vmov	r6, r7, d0
 8020abc:	b093      	sub	sp, #76	; 0x4c
 8020abe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020ac0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020ac4:	9106      	str	r1, [sp, #24]
 8020ac6:	ee10 aa10 	vmov	sl, s0
 8020aca:	4604      	mov	r4, r0
 8020acc:	9209      	str	r2, [sp, #36]	; 0x24
 8020ace:	930c      	str	r3, [sp, #48]	; 0x30
 8020ad0:	46bb      	mov	fp, r7
 8020ad2:	b975      	cbnz	r5, 8020af2 <_dtoa_r+0x42>
 8020ad4:	2010      	movs	r0, #16
 8020ad6:	f000 fffd 	bl	8021ad4 <malloc>
 8020ada:	4602      	mov	r2, r0
 8020adc:	6260      	str	r0, [r4, #36]	; 0x24
 8020ade:	b920      	cbnz	r0, 8020aea <_dtoa_r+0x3a>
 8020ae0:	4ba7      	ldr	r3, [pc, #668]	; (8020d80 <_dtoa_r+0x2d0>)
 8020ae2:	21ea      	movs	r1, #234	; 0xea
 8020ae4:	48a7      	ldr	r0, [pc, #668]	; (8020d84 <_dtoa_r+0x2d4>)
 8020ae6:	f001 fe7f 	bl	80227e8 <__assert_func>
 8020aea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020aee:	6005      	str	r5, [r0, #0]
 8020af0:	60c5      	str	r5, [r0, #12]
 8020af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020af4:	6819      	ldr	r1, [r3, #0]
 8020af6:	b151      	cbz	r1, 8020b0e <_dtoa_r+0x5e>
 8020af8:	685a      	ldr	r2, [r3, #4]
 8020afa:	604a      	str	r2, [r1, #4]
 8020afc:	2301      	movs	r3, #1
 8020afe:	4093      	lsls	r3, r2
 8020b00:	608b      	str	r3, [r1, #8]
 8020b02:	4620      	mov	r0, r4
 8020b04:	f001 f82e 	bl	8021b64 <_Bfree>
 8020b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b0a:	2200      	movs	r2, #0
 8020b0c:	601a      	str	r2, [r3, #0]
 8020b0e:	1e3b      	subs	r3, r7, #0
 8020b10:	bfaa      	itet	ge
 8020b12:	2300      	movge	r3, #0
 8020b14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8020b18:	f8c8 3000 	strge.w	r3, [r8]
 8020b1c:	4b9a      	ldr	r3, [pc, #616]	; (8020d88 <_dtoa_r+0x2d8>)
 8020b1e:	bfbc      	itt	lt
 8020b20:	2201      	movlt	r2, #1
 8020b22:	f8c8 2000 	strlt.w	r2, [r8]
 8020b26:	ea33 030b 	bics.w	r3, r3, fp
 8020b2a:	d11b      	bne.n	8020b64 <_dtoa_r+0xb4>
 8020b2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8020b32:	6013      	str	r3, [r2, #0]
 8020b34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020b38:	4333      	orrs	r3, r6
 8020b3a:	f000 8592 	beq.w	8021662 <_dtoa_r+0xbb2>
 8020b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020b40:	b963      	cbnz	r3, 8020b5c <_dtoa_r+0xac>
 8020b42:	4b92      	ldr	r3, [pc, #584]	; (8020d8c <_dtoa_r+0x2dc>)
 8020b44:	e022      	b.n	8020b8c <_dtoa_r+0xdc>
 8020b46:	4b92      	ldr	r3, [pc, #584]	; (8020d90 <_dtoa_r+0x2e0>)
 8020b48:	9301      	str	r3, [sp, #4]
 8020b4a:	3308      	adds	r3, #8
 8020b4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020b4e:	6013      	str	r3, [r2, #0]
 8020b50:	9801      	ldr	r0, [sp, #4]
 8020b52:	b013      	add	sp, #76	; 0x4c
 8020b54:	ecbd 8b04 	vpop	{d8-d9}
 8020b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b5c:	4b8b      	ldr	r3, [pc, #556]	; (8020d8c <_dtoa_r+0x2dc>)
 8020b5e:	9301      	str	r3, [sp, #4]
 8020b60:	3303      	adds	r3, #3
 8020b62:	e7f3      	b.n	8020b4c <_dtoa_r+0x9c>
 8020b64:	2200      	movs	r2, #0
 8020b66:	2300      	movs	r3, #0
 8020b68:	4650      	mov	r0, sl
 8020b6a:	4659      	mov	r1, fp
 8020b6c:	f7df ffd4 	bl	8000b18 <__aeabi_dcmpeq>
 8020b70:	ec4b ab19 	vmov	d9, sl, fp
 8020b74:	4680      	mov	r8, r0
 8020b76:	b158      	cbz	r0, 8020b90 <_dtoa_r+0xe0>
 8020b78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b7a:	2301      	movs	r3, #1
 8020b7c:	6013      	str	r3, [r2, #0]
 8020b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	f000 856b 	beq.w	802165c <_dtoa_r+0xbac>
 8020b86:	4883      	ldr	r0, [pc, #524]	; (8020d94 <_dtoa_r+0x2e4>)
 8020b88:	6018      	str	r0, [r3, #0]
 8020b8a:	1e43      	subs	r3, r0, #1
 8020b8c:	9301      	str	r3, [sp, #4]
 8020b8e:	e7df      	b.n	8020b50 <_dtoa_r+0xa0>
 8020b90:	ec4b ab10 	vmov	d0, sl, fp
 8020b94:	aa10      	add	r2, sp, #64	; 0x40
 8020b96:	a911      	add	r1, sp, #68	; 0x44
 8020b98:	4620      	mov	r0, r4
 8020b9a:	f001 facb 	bl	8022134 <__d2b>
 8020b9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8020ba2:	ee08 0a10 	vmov	s16, r0
 8020ba6:	2d00      	cmp	r5, #0
 8020ba8:	f000 8084 	beq.w	8020cb4 <_dtoa_r+0x204>
 8020bac:	ee19 3a90 	vmov	r3, s19
 8020bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020bb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020bb8:	4656      	mov	r6, sl
 8020bba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020bc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8020bc6:	4b74      	ldr	r3, [pc, #464]	; (8020d98 <_dtoa_r+0x2e8>)
 8020bc8:	2200      	movs	r2, #0
 8020bca:	4630      	mov	r0, r6
 8020bcc:	4639      	mov	r1, r7
 8020bce:	f7df fb83 	bl	80002d8 <__aeabi_dsub>
 8020bd2:	a365      	add	r3, pc, #404	; (adr r3, 8020d68 <_dtoa_r+0x2b8>)
 8020bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bd8:	f7df fd36 	bl	8000648 <__aeabi_dmul>
 8020bdc:	a364      	add	r3, pc, #400	; (adr r3, 8020d70 <_dtoa_r+0x2c0>)
 8020bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020be2:	f7df fb7b 	bl	80002dc <__adddf3>
 8020be6:	4606      	mov	r6, r0
 8020be8:	4628      	mov	r0, r5
 8020bea:	460f      	mov	r7, r1
 8020bec:	f7df fcc2 	bl	8000574 <__aeabi_i2d>
 8020bf0:	a361      	add	r3, pc, #388	; (adr r3, 8020d78 <_dtoa_r+0x2c8>)
 8020bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bf6:	f7df fd27 	bl	8000648 <__aeabi_dmul>
 8020bfa:	4602      	mov	r2, r0
 8020bfc:	460b      	mov	r3, r1
 8020bfe:	4630      	mov	r0, r6
 8020c00:	4639      	mov	r1, r7
 8020c02:	f7df fb6b 	bl	80002dc <__adddf3>
 8020c06:	4606      	mov	r6, r0
 8020c08:	460f      	mov	r7, r1
 8020c0a:	f7df ffcd 	bl	8000ba8 <__aeabi_d2iz>
 8020c0e:	2200      	movs	r2, #0
 8020c10:	9000      	str	r0, [sp, #0]
 8020c12:	2300      	movs	r3, #0
 8020c14:	4630      	mov	r0, r6
 8020c16:	4639      	mov	r1, r7
 8020c18:	f7df ff88 	bl	8000b2c <__aeabi_dcmplt>
 8020c1c:	b150      	cbz	r0, 8020c34 <_dtoa_r+0x184>
 8020c1e:	9800      	ldr	r0, [sp, #0]
 8020c20:	f7df fca8 	bl	8000574 <__aeabi_i2d>
 8020c24:	4632      	mov	r2, r6
 8020c26:	463b      	mov	r3, r7
 8020c28:	f7df ff76 	bl	8000b18 <__aeabi_dcmpeq>
 8020c2c:	b910      	cbnz	r0, 8020c34 <_dtoa_r+0x184>
 8020c2e:	9b00      	ldr	r3, [sp, #0]
 8020c30:	3b01      	subs	r3, #1
 8020c32:	9300      	str	r3, [sp, #0]
 8020c34:	9b00      	ldr	r3, [sp, #0]
 8020c36:	2b16      	cmp	r3, #22
 8020c38:	d85a      	bhi.n	8020cf0 <_dtoa_r+0x240>
 8020c3a:	9a00      	ldr	r2, [sp, #0]
 8020c3c:	4b57      	ldr	r3, [pc, #348]	; (8020d9c <_dtoa_r+0x2ec>)
 8020c3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c46:	ec51 0b19 	vmov	r0, r1, d9
 8020c4a:	f7df ff6f 	bl	8000b2c <__aeabi_dcmplt>
 8020c4e:	2800      	cmp	r0, #0
 8020c50:	d050      	beq.n	8020cf4 <_dtoa_r+0x244>
 8020c52:	9b00      	ldr	r3, [sp, #0]
 8020c54:	3b01      	subs	r3, #1
 8020c56:	9300      	str	r3, [sp, #0]
 8020c58:	2300      	movs	r3, #0
 8020c5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c5e:	1b5d      	subs	r5, r3, r5
 8020c60:	1e6b      	subs	r3, r5, #1
 8020c62:	9305      	str	r3, [sp, #20]
 8020c64:	bf45      	ittet	mi
 8020c66:	f1c5 0301 	rsbmi	r3, r5, #1
 8020c6a:	9304      	strmi	r3, [sp, #16]
 8020c6c:	2300      	movpl	r3, #0
 8020c6e:	2300      	movmi	r3, #0
 8020c70:	bf4c      	ite	mi
 8020c72:	9305      	strmi	r3, [sp, #20]
 8020c74:	9304      	strpl	r3, [sp, #16]
 8020c76:	9b00      	ldr	r3, [sp, #0]
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	db3d      	blt.n	8020cf8 <_dtoa_r+0x248>
 8020c7c:	9b05      	ldr	r3, [sp, #20]
 8020c7e:	9a00      	ldr	r2, [sp, #0]
 8020c80:	920a      	str	r2, [sp, #40]	; 0x28
 8020c82:	4413      	add	r3, r2
 8020c84:	9305      	str	r3, [sp, #20]
 8020c86:	2300      	movs	r3, #0
 8020c88:	9307      	str	r3, [sp, #28]
 8020c8a:	9b06      	ldr	r3, [sp, #24]
 8020c8c:	2b09      	cmp	r3, #9
 8020c8e:	f200 8089 	bhi.w	8020da4 <_dtoa_r+0x2f4>
 8020c92:	2b05      	cmp	r3, #5
 8020c94:	bfc4      	itt	gt
 8020c96:	3b04      	subgt	r3, #4
 8020c98:	9306      	strgt	r3, [sp, #24]
 8020c9a:	9b06      	ldr	r3, [sp, #24]
 8020c9c:	f1a3 0302 	sub.w	r3, r3, #2
 8020ca0:	bfcc      	ite	gt
 8020ca2:	2500      	movgt	r5, #0
 8020ca4:	2501      	movle	r5, #1
 8020ca6:	2b03      	cmp	r3, #3
 8020ca8:	f200 8087 	bhi.w	8020dba <_dtoa_r+0x30a>
 8020cac:	e8df f003 	tbb	[pc, r3]
 8020cb0:	59383a2d 	.word	0x59383a2d
 8020cb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020cb8:	441d      	add	r5, r3
 8020cba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020cbe:	2b20      	cmp	r3, #32
 8020cc0:	bfc1      	itttt	gt
 8020cc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020cc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020cca:	fa0b f303 	lslgt.w	r3, fp, r3
 8020cce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020cd2:	bfda      	itte	le
 8020cd4:	f1c3 0320 	rsble	r3, r3, #32
 8020cd8:	fa06 f003 	lslle.w	r0, r6, r3
 8020cdc:	4318      	orrgt	r0, r3
 8020cde:	f7df fc39 	bl	8000554 <__aeabi_ui2d>
 8020ce2:	2301      	movs	r3, #1
 8020ce4:	4606      	mov	r6, r0
 8020ce6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020cea:	3d01      	subs	r5, #1
 8020cec:	930e      	str	r3, [sp, #56]	; 0x38
 8020cee:	e76a      	b.n	8020bc6 <_dtoa_r+0x116>
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	e7b2      	b.n	8020c5a <_dtoa_r+0x1aa>
 8020cf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8020cf6:	e7b1      	b.n	8020c5c <_dtoa_r+0x1ac>
 8020cf8:	9b04      	ldr	r3, [sp, #16]
 8020cfa:	9a00      	ldr	r2, [sp, #0]
 8020cfc:	1a9b      	subs	r3, r3, r2
 8020cfe:	9304      	str	r3, [sp, #16]
 8020d00:	4253      	negs	r3, r2
 8020d02:	9307      	str	r3, [sp, #28]
 8020d04:	2300      	movs	r3, #0
 8020d06:	930a      	str	r3, [sp, #40]	; 0x28
 8020d08:	e7bf      	b.n	8020c8a <_dtoa_r+0x1da>
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	9308      	str	r3, [sp, #32]
 8020d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	dc55      	bgt.n	8020dc0 <_dtoa_r+0x310>
 8020d14:	2301      	movs	r3, #1
 8020d16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020d1a:	461a      	mov	r2, r3
 8020d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8020d1e:	e00c      	b.n	8020d3a <_dtoa_r+0x28a>
 8020d20:	2301      	movs	r3, #1
 8020d22:	e7f3      	b.n	8020d0c <_dtoa_r+0x25c>
 8020d24:	2300      	movs	r3, #0
 8020d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d28:	9308      	str	r3, [sp, #32]
 8020d2a:	9b00      	ldr	r3, [sp, #0]
 8020d2c:	4413      	add	r3, r2
 8020d2e:	9302      	str	r3, [sp, #8]
 8020d30:	3301      	adds	r3, #1
 8020d32:	2b01      	cmp	r3, #1
 8020d34:	9303      	str	r3, [sp, #12]
 8020d36:	bfb8      	it	lt
 8020d38:	2301      	movlt	r3, #1
 8020d3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	6042      	str	r2, [r0, #4]
 8020d40:	2204      	movs	r2, #4
 8020d42:	f102 0614 	add.w	r6, r2, #20
 8020d46:	429e      	cmp	r6, r3
 8020d48:	6841      	ldr	r1, [r0, #4]
 8020d4a:	d93d      	bls.n	8020dc8 <_dtoa_r+0x318>
 8020d4c:	4620      	mov	r0, r4
 8020d4e:	f000 fec9 	bl	8021ae4 <_Balloc>
 8020d52:	9001      	str	r0, [sp, #4]
 8020d54:	2800      	cmp	r0, #0
 8020d56:	d13b      	bne.n	8020dd0 <_dtoa_r+0x320>
 8020d58:	4b11      	ldr	r3, [pc, #68]	; (8020da0 <_dtoa_r+0x2f0>)
 8020d5a:	4602      	mov	r2, r0
 8020d5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020d60:	e6c0      	b.n	8020ae4 <_dtoa_r+0x34>
 8020d62:	2301      	movs	r3, #1
 8020d64:	e7df      	b.n	8020d26 <_dtoa_r+0x276>
 8020d66:	bf00      	nop
 8020d68:	636f4361 	.word	0x636f4361
 8020d6c:	3fd287a7 	.word	0x3fd287a7
 8020d70:	8b60c8b3 	.word	0x8b60c8b3
 8020d74:	3fc68a28 	.word	0x3fc68a28
 8020d78:	509f79fb 	.word	0x509f79fb
 8020d7c:	3fd34413 	.word	0x3fd34413
 8020d80:	0802326d 	.word	0x0802326d
 8020d84:	08023284 	.word	0x08023284
 8020d88:	7ff00000 	.word	0x7ff00000
 8020d8c:	08023269 	.word	0x08023269
 8020d90:	08023260 	.word	0x08023260
 8020d94:	0802323d 	.word	0x0802323d
 8020d98:	3ff80000 	.word	0x3ff80000
 8020d9c:	080233d8 	.word	0x080233d8
 8020da0:	080232df 	.word	0x080232df
 8020da4:	2501      	movs	r5, #1
 8020da6:	2300      	movs	r3, #0
 8020da8:	9306      	str	r3, [sp, #24]
 8020daa:	9508      	str	r5, [sp, #32]
 8020dac:	f04f 33ff 	mov.w	r3, #4294967295
 8020db0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020db4:	2200      	movs	r2, #0
 8020db6:	2312      	movs	r3, #18
 8020db8:	e7b0      	b.n	8020d1c <_dtoa_r+0x26c>
 8020dba:	2301      	movs	r3, #1
 8020dbc:	9308      	str	r3, [sp, #32]
 8020dbe:	e7f5      	b.n	8020dac <_dtoa_r+0x2fc>
 8020dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020dc6:	e7b8      	b.n	8020d3a <_dtoa_r+0x28a>
 8020dc8:	3101      	adds	r1, #1
 8020dca:	6041      	str	r1, [r0, #4]
 8020dcc:	0052      	lsls	r2, r2, #1
 8020dce:	e7b8      	b.n	8020d42 <_dtoa_r+0x292>
 8020dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020dd2:	9a01      	ldr	r2, [sp, #4]
 8020dd4:	601a      	str	r2, [r3, #0]
 8020dd6:	9b03      	ldr	r3, [sp, #12]
 8020dd8:	2b0e      	cmp	r3, #14
 8020dda:	f200 809d 	bhi.w	8020f18 <_dtoa_r+0x468>
 8020dde:	2d00      	cmp	r5, #0
 8020de0:	f000 809a 	beq.w	8020f18 <_dtoa_r+0x468>
 8020de4:	9b00      	ldr	r3, [sp, #0]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	dd32      	ble.n	8020e50 <_dtoa_r+0x3a0>
 8020dea:	4ab7      	ldr	r2, [pc, #732]	; (80210c8 <_dtoa_r+0x618>)
 8020dec:	f003 030f 	and.w	r3, r3, #15
 8020df0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020df4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020df8:	9b00      	ldr	r3, [sp, #0]
 8020dfa:	05d8      	lsls	r0, r3, #23
 8020dfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020e00:	d516      	bpl.n	8020e30 <_dtoa_r+0x380>
 8020e02:	4bb2      	ldr	r3, [pc, #712]	; (80210cc <_dtoa_r+0x61c>)
 8020e04:	ec51 0b19 	vmov	r0, r1, d9
 8020e08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020e0c:	f7df fd46 	bl	800089c <__aeabi_ddiv>
 8020e10:	f007 070f 	and.w	r7, r7, #15
 8020e14:	4682      	mov	sl, r0
 8020e16:	468b      	mov	fp, r1
 8020e18:	2503      	movs	r5, #3
 8020e1a:	4eac      	ldr	r6, [pc, #688]	; (80210cc <_dtoa_r+0x61c>)
 8020e1c:	b957      	cbnz	r7, 8020e34 <_dtoa_r+0x384>
 8020e1e:	4642      	mov	r2, r8
 8020e20:	464b      	mov	r3, r9
 8020e22:	4650      	mov	r0, sl
 8020e24:	4659      	mov	r1, fp
 8020e26:	f7df fd39 	bl	800089c <__aeabi_ddiv>
 8020e2a:	4682      	mov	sl, r0
 8020e2c:	468b      	mov	fp, r1
 8020e2e:	e028      	b.n	8020e82 <_dtoa_r+0x3d2>
 8020e30:	2502      	movs	r5, #2
 8020e32:	e7f2      	b.n	8020e1a <_dtoa_r+0x36a>
 8020e34:	07f9      	lsls	r1, r7, #31
 8020e36:	d508      	bpl.n	8020e4a <_dtoa_r+0x39a>
 8020e38:	4640      	mov	r0, r8
 8020e3a:	4649      	mov	r1, r9
 8020e3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020e40:	f7df fc02 	bl	8000648 <__aeabi_dmul>
 8020e44:	3501      	adds	r5, #1
 8020e46:	4680      	mov	r8, r0
 8020e48:	4689      	mov	r9, r1
 8020e4a:	107f      	asrs	r7, r7, #1
 8020e4c:	3608      	adds	r6, #8
 8020e4e:	e7e5      	b.n	8020e1c <_dtoa_r+0x36c>
 8020e50:	f000 809b 	beq.w	8020f8a <_dtoa_r+0x4da>
 8020e54:	9b00      	ldr	r3, [sp, #0]
 8020e56:	4f9d      	ldr	r7, [pc, #628]	; (80210cc <_dtoa_r+0x61c>)
 8020e58:	425e      	negs	r6, r3
 8020e5a:	4b9b      	ldr	r3, [pc, #620]	; (80210c8 <_dtoa_r+0x618>)
 8020e5c:	f006 020f 	and.w	r2, r6, #15
 8020e60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e68:	ec51 0b19 	vmov	r0, r1, d9
 8020e6c:	f7df fbec 	bl	8000648 <__aeabi_dmul>
 8020e70:	1136      	asrs	r6, r6, #4
 8020e72:	4682      	mov	sl, r0
 8020e74:	468b      	mov	fp, r1
 8020e76:	2300      	movs	r3, #0
 8020e78:	2502      	movs	r5, #2
 8020e7a:	2e00      	cmp	r6, #0
 8020e7c:	d17a      	bne.n	8020f74 <_dtoa_r+0x4c4>
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d1d3      	bne.n	8020e2a <_dtoa_r+0x37a>
 8020e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	f000 8082 	beq.w	8020f8e <_dtoa_r+0x4de>
 8020e8a:	4b91      	ldr	r3, [pc, #580]	; (80210d0 <_dtoa_r+0x620>)
 8020e8c:	2200      	movs	r2, #0
 8020e8e:	4650      	mov	r0, sl
 8020e90:	4659      	mov	r1, fp
 8020e92:	f7df fe4b 	bl	8000b2c <__aeabi_dcmplt>
 8020e96:	2800      	cmp	r0, #0
 8020e98:	d079      	beq.n	8020f8e <_dtoa_r+0x4de>
 8020e9a:	9b03      	ldr	r3, [sp, #12]
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d076      	beq.n	8020f8e <_dtoa_r+0x4de>
 8020ea0:	9b02      	ldr	r3, [sp, #8]
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	dd36      	ble.n	8020f14 <_dtoa_r+0x464>
 8020ea6:	9b00      	ldr	r3, [sp, #0]
 8020ea8:	4650      	mov	r0, sl
 8020eaa:	4659      	mov	r1, fp
 8020eac:	1e5f      	subs	r7, r3, #1
 8020eae:	2200      	movs	r2, #0
 8020eb0:	4b88      	ldr	r3, [pc, #544]	; (80210d4 <_dtoa_r+0x624>)
 8020eb2:	f7df fbc9 	bl	8000648 <__aeabi_dmul>
 8020eb6:	9e02      	ldr	r6, [sp, #8]
 8020eb8:	4682      	mov	sl, r0
 8020eba:	468b      	mov	fp, r1
 8020ebc:	3501      	adds	r5, #1
 8020ebe:	4628      	mov	r0, r5
 8020ec0:	f7df fb58 	bl	8000574 <__aeabi_i2d>
 8020ec4:	4652      	mov	r2, sl
 8020ec6:	465b      	mov	r3, fp
 8020ec8:	f7df fbbe 	bl	8000648 <__aeabi_dmul>
 8020ecc:	4b82      	ldr	r3, [pc, #520]	; (80210d8 <_dtoa_r+0x628>)
 8020ece:	2200      	movs	r2, #0
 8020ed0:	f7df fa04 	bl	80002dc <__adddf3>
 8020ed4:	46d0      	mov	r8, sl
 8020ed6:	46d9      	mov	r9, fp
 8020ed8:	4682      	mov	sl, r0
 8020eda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020ede:	2e00      	cmp	r6, #0
 8020ee0:	d158      	bne.n	8020f94 <_dtoa_r+0x4e4>
 8020ee2:	4b7e      	ldr	r3, [pc, #504]	; (80210dc <_dtoa_r+0x62c>)
 8020ee4:	2200      	movs	r2, #0
 8020ee6:	4640      	mov	r0, r8
 8020ee8:	4649      	mov	r1, r9
 8020eea:	f7df f9f5 	bl	80002d8 <__aeabi_dsub>
 8020eee:	4652      	mov	r2, sl
 8020ef0:	465b      	mov	r3, fp
 8020ef2:	4680      	mov	r8, r0
 8020ef4:	4689      	mov	r9, r1
 8020ef6:	f7df fe37 	bl	8000b68 <__aeabi_dcmpgt>
 8020efa:	2800      	cmp	r0, #0
 8020efc:	f040 8295 	bne.w	802142a <_dtoa_r+0x97a>
 8020f00:	4652      	mov	r2, sl
 8020f02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8020f06:	4640      	mov	r0, r8
 8020f08:	4649      	mov	r1, r9
 8020f0a:	f7df fe0f 	bl	8000b2c <__aeabi_dcmplt>
 8020f0e:	2800      	cmp	r0, #0
 8020f10:	f040 8289 	bne.w	8021426 <_dtoa_r+0x976>
 8020f14:	ec5b ab19 	vmov	sl, fp, d9
 8020f18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	f2c0 8148 	blt.w	80211b0 <_dtoa_r+0x700>
 8020f20:	9a00      	ldr	r2, [sp, #0]
 8020f22:	2a0e      	cmp	r2, #14
 8020f24:	f300 8144 	bgt.w	80211b0 <_dtoa_r+0x700>
 8020f28:	4b67      	ldr	r3, [pc, #412]	; (80210c8 <_dtoa_r+0x618>)
 8020f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020f2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	f280 80d5 	bge.w	80210e4 <_dtoa_r+0x634>
 8020f3a:	9b03      	ldr	r3, [sp, #12]
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	f300 80d1 	bgt.w	80210e4 <_dtoa_r+0x634>
 8020f42:	f040 826f 	bne.w	8021424 <_dtoa_r+0x974>
 8020f46:	4b65      	ldr	r3, [pc, #404]	; (80210dc <_dtoa_r+0x62c>)
 8020f48:	2200      	movs	r2, #0
 8020f4a:	4640      	mov	r0, r8
 8020f4c:	4649      	mov	r1, r9
 8020f4e:	f7df fb7b 	bl	8000648 <__aeabi_dmul>
 8020f52:	4652      	mov	r2, sl
 8020f54:	465b      	mov	r3, fp
 8020f56:	f7df fdfd 	bl	8000b54 <__aeabi_dcmpge>
 8020f5a:	9e03      	ldr	r6, [sp, #12]
 8020f5c:	4637      	mov	r7, r6
 8020f5e:	2800      	cmp	r0, #0
 8020f60:	f040 8245 	bne.w	80213ee <_dtoa_r+0x93e>
 8020f64:	9d01      	ldr	r5, [sp, #4]
 8020f66:	2331      	movs	r3, #49	; 0x31
 8020f68:	f805 3b01 	strb.w	r3, [r5], #1
 8020f6c:	9b00      	ldr	r3, [sp, #0]
 8020f6e:	3301      	adds	r3, #1
 8020f70:	9300      	str	r3, [sp, #0]
 8020f72:	e240      	b.n	80213f6 <_dtoa_r+0x946>
 8020f74:	07f2      	lsls	r2, r6, #31
 8020f76:	d505      	bpl.n	8020f84 <_dtoa_r+0x4d4>
 8020f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020f7c:	f7df fb64 	bl	8000648 <__aeabi_dmul>
 8020f80:	3501      	adds	r5, #1
 8020f82:	2301      	movs	r3, #1
 8020f84:	1076      	asrs	r6, r6, #1
 8020f86:	3708      	adds	r7, #8
 8020f88:	e777      	b.n	8020e7a <_dtoa_r+0x3ca>
 8020f8a:	2502      	movs	r5, #2
 8020f8c:	e779      	b.n	8020e82 <_dtoa_r+0x3d2>
 8020f8e:	9f00      	ldr	r7, [sp, #0]
 8020f90:	9e03      	ldr	r6, [sp, #12]
 8020f92:	e794      	b.n	8020ebe <_dtoa_r+0x40e>
 8020f94:	9901      	ldr	r1, [sp, #4]
 8020f96:	4b4c      	ldr	r3, [pc, #304]	; (80210c8 <_dtoa_r+0x618>)
 8020f98:	4431      	add	r1, r6
 8020f9a:	910d      	str	r1, [sp, #52]	; 0x34
 8020f9c:	9908      	ldr	r1, [sp, #32]
 8020f9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8020fa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020fa6:	2900      	cmp	r1, #0
 8020fa8:	d043      	beq.n	8021032 <_dtoa_r+0x582>
 8020faa:	494d      	ldr	r1, [pc, #308]	; (80210e0 <_dtoa_r+0x630>)
 8020fac:	2000      	movs	r0, #0
 8020fae:	f7df fc75 	bl	800089c <__aeabi_ddiv>
 8020fb2:	4652      	mov	r2, sl
 8020fb4:	465b      	mov	r3, fp
 8020fb6:	f7df f98f 	bl	80002d8 <__aeabi_dsub>
 8020fba:	9d01      	ldr	r5, [sp, #4]
 8020fbc:	4682      	mov	sl, r0
 8020fbe:	468b      	mov	fp, r1
 8020fc0:	4649      	mov	r1, r9
 8020fc2:	4640      	mov	r0, r8
 8020fc4:	f7df fdf0 	bl	8000ba8 <__aeabi_d2iz>
 8020fc8:	4606      	mov	r6, r0
 8020fca:	f7df fad3 	bl	8000574 <__aeabi_i2d>
 8020fce:	4602      	mov	r2, r0
 8020fd0:	460b      	mov	r3, r1
 8020fd2:	4640      	mov	r0, r8
 8020fd4:	4649      	mov	r1, r9
 8020fd6:	f7df f97f 	bl	80002d8 <__aeabi_dsub>
 8020fda:	3630      	adds	r6, #48	; 0x30
 8020fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8020fe0:	4652      	mov	r2, sl
 8020fe2:	465b      	mov	r3, fp
 8020fe4:	4680      	mov	r8, r0
 8020fe6:	4689      	mov	r9, r1
 8020fe8:	f7df fda0 	bl	8000b2c <__aeabi_dcmplt>
 8020fec:	2800      	cmp	r0, #0
 8020fee:	d163      	bne.n	80210b8 <_dtoa_r+0x608>
 8020ff0:	4642      	mov	r2, r8
 8020ff2:	464b      	mov	r3, r9
 8020ff4:	4936      	ldr	r1, [pc, #216]	; (80210d0 <_dtoa_r+0x620>)
 8020ff6:	2000      	movs	r0, #0
 8020ff8:	f7df f96e 	bl	80002d8 <__aeabi_dsub>
 8020ffc:	4652      	mov	r2, sl
 8020ffe:	465b      	mov	r3, fp
 8021000:	f7df fd94 	bl	8000b2c <__aeabi_dcmplt>
 8021004:	2800      	cmp	r0, #0
 8021006:	f040 80b5 	bne.w	8021174 <_dtoa_r+0x6c4>
 802100a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802100c:	429d      	cmp	r5, r3
 802100e:	d081      	beq.n	8020f14 <_dtoa_r+0x464>
 8021010:	4b30      	ldr	r3, [pc, #192]	; (80210d4 <_dtoa_r+0x624>)
 8021012:	2200      	movs	r2, #0
 8021014:	4650      	mov	r0, sl
 8021016:	4659      	mov	r1, fp
 8021018:	f7df fb16 	bl	8000648 <__aeabi_dmul>
 802101c:	4b2d      	ldr	r3, [pc, #180]	; (80210d4 <_dtoa_r+0x624>)
 802101e:	4682      	mov	sl, r0
 8021020:	468b      	mov	fp, r1
 8021022:	4640      	mov	r0, r8
 8021024:	4649      	mov	r1, r9
 8021026:	2200      	movs	r2, #0
 8021028:	f7df fb0e 	bl	8000648 <__aeabi_dmul>
 802102c:	4680      	mov	r8, r0
 802102e:	4689      	mov	r9, r1
 8021030:	e7c6      	b.n	8020fc0 <_dtoa_r+0x510>
 8021032:	4650      	mov	r0, sl
 8021034:	4659      	mov	r1, fp
 8021036:	f7df fb07 	bl	8000648 <__aeabi_dmul>
 802103a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802103c:	9d01      	ldr	r5, [sp, #4]
 802103e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021040:	4682      	mov	sl, r0
 8021042:	468b      	mov	fp, r1
 8021044:	4649      	mov	r1, r9
 8021046:	4640      	mov	r0, r8
 8021048:	f7df fdae 	bl	8000ba8 <__aeabi_d2iz>
 802104c:	4606      	mov	r6, r0
 802104e:	f7df fa91 	bl	8000574 <__aeabi_i2d>
 8021052:	3630      	adds	r6, #48	; 0x30
 8021054:	4602      	mov	r2, r0
 8021056:	460b      	mov	r3, r1
 8021058:	4640      	mov	r0, r8
 802105a:	4649      	mov	r1, r9
 802105c:	f7df f93c 	bl	80002d8 <__aeabi_dsub>
 8021060:	f805 6b01 	strb.w	r6, [r5], #1
 8021064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021066:	429d      	cmp	r5, r3
 8021068:	4680      	mov	r8, r0
 802106a:	4689      	mov	r9, r1
 802106c:	f04f 0200 	mov.w	r2, #0
 8021070:	d124      	bne.n	80210bc <_dtoa_r+0x60c>
 8021072:	4b1b      	ldr	r3, [pc, #108]	; (80210e0 <_dtoa_r+0x630>)
 8021074:	4650      	mov	r0, sl
 8021076:	4659      	mov	r1, fp
 8021078:	f7df f930 	bl	80002dc <__adddf3>
 802107c:	4602      	mov	r2, r0
 802107e:	460b      	mov	r3, r1
 8021080:	4640      	mov	r0, r8
 8021082:	4649      	mov	r1, r9
 8021084:	f7df fd70 	bl	8000b68 <__aeabi_dcmpgt>
 8021088:	2800      	cmp	r0, #0
 802108a:	d173      	bne.n	8021174 <_dtoa_r+0x6c4>
 802108c:	4652      	mov	r2, sl
 802108e:	465b      	mov	r3, fp
 8021090:	4913      	ldr	r1, [pc, #76]	; (80210e0 <_dtoa_r+0x630>)
 8021092:	2000      	movs	r0, #0
 8021094:	f7df f920 	bl	80002d8 <__aeabi_dsub>
 8021098:	4602      	mov	r2, r0
 802109a:	460b      	mov	r3, r1
 802109c:	4640      	mov	r0, r8
 802109e:	4649      	mov	r1, r9
 80210a0:	f7df fd44 	bl	8000b2c <__aeabi_dcmplt>
 80210a4:	2800      	cmp	r0, #0
 80210a6:	f43f af35 	beq.w	8020f14 <_dtoa_r+0x464>
 80210aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80210ac:	1e6b      	subs	r3, r5, #1
 80210ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80210b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80210b4:	2b30      	cmp	r3, #48	; 0x30
 80210b6:	d0f8      	beq.n	80210aa <_dtoa_r+0x5fa>
 80210b8:	9700      	str	r7, [sp, #0]
 80210ba:	e049      	b.n	8021150 <_dtoa_r+0x6a0>
 80210bc:	4b05      	ldr	r3, [pc, #20]	; (80210d4 <_dtoa_r+0x624>)
 80210be:	f7df fac3 	bl	8000648 <__aeabi_dmul>
 80210c2:	4680      	mov	r8, r0
 80210c4:	4689      	mov	r9, r1
 80210c6:	e7bd      	b.n	8021044 <_dtoa_r+0x594>
 80210c8:	080233d8 	.word	0x080233d8
 80210cc:	080233b0 	.word	0x080233b0
 80210d0:	3ff00000 	.word	0x3ff00000
 80210d4:	40240000 	.word	0x40240000
 80210d8:	401c0000 	.word	0x401c0000
 80210dc:	40140000 	.word	0x40140000
 80210e0:	3fe00000 	.word	0x3fe00000
 80210e4:	9d01      	ldr	r5, [sp, #4]
 80210e6:	4656      	mov	r6, sl
 80210e8:	465f      	mov	r7, fp
 80210ea:	4642      	mov	r2, r8
 80210ec:	464b      	mov	r3, r9
 80210ee:	4630      	mov	r0, r6
 80210f0:	4639      	mov	r1, r7
 80210f2:	f7df fbd3 	bl	800089c <__aeabi_ddiv>
 80210f6:	f7df fd57 	bl	8000ba8 <__aeabi_d2iz>
 80210fa:	4682      	mov	sl, r0
 80210fc:	f7df fa3a 	bl	8000574 <__aeabi_i2d>
 8021100:	4642      	mov	r2, r8
 8021102:	464b      	mov	r3, r9
 8021104:	f7df faa0 	bl	8000648 <__aeabi_dmul>
 8021108:	4602      	mov	r2, r0
 802110a:	460b      	mov	r3, r1
 802110c:	4630      	mov	r0, r6
 802110e:	4639      	mov	r1, r7
 8021110:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8021114:	f7df f8e0 	bl	80002d8 <__aeabi_dsub>
 8021118:	f805 6b01 	strb.w	r6, [r5], #1
 802111c:	9e01      	ldr	r6, [sp, #4]
 802111e:	9f03      	ldr	r7, [sp, #12]
 8021120:	1bae      	subs	r6, r5, r6
 8021122:	42b7      	cmp	r7, r6
 8021124:	4602      	mov	r2, r0
 8021126:	460b      	mov	r3, r1
 8021128:	d135      	bne.n	8021196 <_dtoa_r+0x6e6>
 802112a:	f7df f8d7 	bl	80002dc <__adddf3>
 802112e:	4642      	mov	r2, r8
 8021130:	464b      	mov	r3, r9
 8021132:	4606      	mov	r6, r0
 8021134:	460f      	mov	r7, r1
 8021136:	f7df fd17 	bl	8000b68 <__aeabi_dcmpgt>
 802113a:	b9d0      	cbnz	r0, 8021172 <_dtoa_r+0x6c2>
 802113c:	4642      	mov	r2, r8
 802113e:	464b      	mov	r3, r9
 8021140:	4630      	mov	r0, r6
 8021142:	4639      	mov	r1, r7
 8021144:	f7df fce8 	bl	8000b18 <__aeabi_dcmpeq>
 8021148:	b110      	cbz	r0, 8021150 <_dtoa_r+0x6a0>
 802114a:	f01a 0f01 	tst.w	sl, #1
 802114e:	d110      	bne.n	8021172 <_dtoa_r+0x6c2>
 8021150:	4620      	mov	r0, r4
 8021152:	ee18 1a10 	vmov	r1, s16
 8021156:	f000 fd05 	bl	8021b64 <_Bfree>
 802115a:	2300      	movs	r3, #0
 802115c:	9800      	ldr	r0, [sp, #0]
 802115e:	702b      	strb	r3, [r5, #0]
 8021160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021162:	3001      	adds	r0, #1
 8021164:	6018      	str	r0, [r3, #0]
 8021166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021168:	2b00      	cmp	r3, #0
 802116a:	f43f acf1 	beq.w	8020b50 <_dtoa_r+0xa0>
 802116e:	601d      	str	r5, [r3, #0]
 8021170:	e4ee      	b.n	8020b50 <_dtoa_r+0xa0>
 8021172:	9f00      	ldr	r7, [sp, #0]
 8021174:	462b      	mov	r3, r5
 8021176:	461d      	mov	r5, r3
 8021178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802117c:	2a39      	cmp	r2, #57	; 0x39
 802117e:	d106      	bne.n	802118e <_dtoa_r+0x6de>
 8021180:	9a01      	ldr	r2, [sp, #4]
 8021182:	429a      	cmp	r2, r3
 8021184:	d1f7      	bne.n	8021176 <_dtoa_r+0x6c6>
 8021186:	9901      	ldr	r1, [sp, #4]
 8021188:	2230      	movs	r2, #48	; 0x30
 802118a:	3701      	adds	r7, #1
 802118c:	700a      	strb	r2, [r1, #0]
 802118e:	781a      	ldrb	r2, [r3, #0]
 8021190:	3201      	adds	r2, #1
 8021192:	701a      	strb	r2, [r3, #0]
 8021194:	e790      	b.n	80210b8 <_dtoa_r+0x608>
 8021196:	4ba6      	ldr	r3, [pc, #664]	; (8021430 <_dtoa_r+0x980>)
 8021198:	2200      	movs	r2, #0
 802119a:	f7df fa55 	bl	8000648 <__aeabi_dmul>
 802119e:	2200      	movs	r2, #0
 80211a0:	2300      	movs	r3, #0
 80211a2:	4606      	mov	r6, r0
 80211a4:	460f      	mov	r7, r1
 80211a6:	f7df fcb7 	bl	8000b18 <__aeabi_dcmpeq>
 80211aa:	2800      	cmp	r0, #0
 80211ac:	d09d      	beq.n	80210ea <_dtoa_r+0x63a>
 80211ae:	e7cf      	b.n	8021150 <_dtoa_r+0x6a0>
 80211b0:	9a08      	ldr	r2, [sp, #32]
 80211b2:	2a00      	cmp	r2, #0
 80211b4:	f000 80d7 	beq.w	8021366 <_dtoa_r+0x8b6>
 80211b8:	9a06      	ldr	r2, [sp, #24]
 80211ba:	2a01      	cmp	r2, #1
 80211bc:	f300 80ba 	bgt.w	8021334 <_dtoa_r+0x884>
 80211c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80211c2:	2a00      	cmp	r2, #0
 80211c4:	f000 80b2 	beq.w	802132c <_dtoa_r+0x87c>
 80211c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80211cc:	9e07      	ldr	r6, [sp, #28]
 80211ce:	9d04      	ldr	r5, [sp, #16]
 80211d0:	9a04      	ldr	r2, [sp, #16]
 80211d2:	441a      	add	r2, r3
 80211d4:	9204      	str	r2, [sp, #16]
 80211d6:	9a05      	ldr	r2, [sp, #20]
 80211d8:	2101      	movs	r1, #1
 80211da:	441a      	add	r2, r3
 80211dc:	4620      	mov	r0, r4
 80211de:	9205      	str	r2, [sp, #20]
 80211e0:	f000 fd78 	bl	8021cd4 <__i2b>
 80211e4:	4607      	mov	r7, r0
 80211e6:	2d00      	cmp	r5, #0
 80211e8:	dd0c      	ble.n	8021204 <_dtoa_r+0x754>
 80211ea:	9b05      	ldr	r3, [sp, #20]
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	dd09      	ble.n	8021204 <_dtoa_r+0x754>
 80211f0:	42ab      	cmp	r3, r5
 80211f2:	9a04      	ldr	r2, [sp, #16]
 80211f4:	bfa8      	it	ge
 80211f6:	462b      	movge	r3, r5
 80211f8:	1ad2      	subs	r2, r2, r3
 80211fa:	9204      	str	r2, [sp, #16]
 80211fc:	9a05      	ldr	r2, [sp, #20]
 80211fe:	1aed      	subs	r5, r5, r3
 8021200:	1ad3      	subs	r3, r2, r3
 8021202:	9305      	str	r3, [sp, #20]
 8021204:	9b07      	ldr	r3, [sp, #28]
 8021206:	b31b      	cbz	r3, 8021250 <_dtoa_r+0x7a0>
 8021208:	9b08      	ldr	r3, [sp, #32]
 802120a:	2b00      	cmp	r3, #0
 802120c:	f000 80af 	beq.w	802136e <_dtoa_r+0x8be>
 8021210:	2e00      	cmp	r6, #0
 8021212:	dd13      	ble.n	802123c <_dtoa_r+0x78c>
 8021214:	4639      	mov	r1, r7
 8021216:	4632      	mov	r2, r6
 8021218:	4620      	mov	r0, r4
 802121a:	f000 fe1b 	bl	8021e54 <__pow5mult>
 802121e:	ee18 2a10 	vmov	r2, s16
 8021222:	4601      	mov	r1, r0
 8021224:	4607      	mov	r7, r0
 8021226:	4620      	mov	r0, r4
 8021228:	f000 fd6a 	bl	8021d00 <__multiply>
 802122c:	ee18 1a10 	vmov	r1, s16
 8021230:	4680      	mov	r8, r0
 8021232:	4620      	mov	r0, r4
 8021234:	f000 fc96 	bl	8021b64 <_Bfree>
 8021238:	ee08 8a10 	vmov	s16, r8
 802123c:	9b07      	ldr	r3, [sp, #28]
 802123e:	1b9a      	subs	r2, r3, r6
 8021240:	d006      	beq.n	8021250 <_dtoa_r+0x7a0>
 8021242:	ee18 1a10 	vmov	r1, s16
 8021246:	4620      	mov	r0, r4
 8021248:	f000 fe04 	bl	8021e54 <__pow5mult>
 802124c:	ee08 0a10 	vmov	s16, r0
 8021250:	2101      	movs	r1, #1
 8021252:	4620      	mov	r0, r4
 8021254:	f000 fd3e 	bl	8021cd4 <__i2b>
 8021258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802125a:	2b00      	cmp	r3, #0
 802125c:	4606      	mov	r6, r0
 802125e:	f340 8088 	ble.w	8021372 <_dtoa_r+0x8c2>
 8021262:	461a      	mov	r2, r3
 8021264:	4601      	mov	r1, r0
 8021266:	4620      	mov	r0, r4
 8021268:	f000 fdf4 	bl	8021e54 <__pow5mult>
 802126c:	9b06      	ldr	r3, [sp, #24]
 802126e:	2b01      	cmp	r3, #1
 8021270:	4606      	mov	r6, r0
 8021272:	f340 8081 	ble.w	8021378 <_dtoa_r+0x8c8>
 8021276:	f04f 0800 	mov.w	r8, #0
 802127a:	6933      	ldr	r3, [r6, #16]
 802127c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021280:	6918      	ldr	r0, [r3, #16]
 8021282:	f000 fcd7 	bl	8021c34 <__hi0bits>
 8021286:	f1c0 0020 	rsb	r0, r0, #32
 802128a:	9b05      	ldr	r3, [sp, #20]
 802128c:	4418      	add	r0, r3
 802128e:	f010 001f 	ands.w	r0, r0, #31
 8021292:	f000 8092 	beq.w	80213ba <_dtoa_r+0x90a>
 8021296:	f1c0 0320 	rsb	r3, r0, #32
 802129a:	2b04      	cmp	r3, #4
 802129c:	f340 808a 	ble.w	80213b4 <_dtoa_r+0x904>
 80212a0:	f1c0 001c 	rsb	r0, r0, #28
 80212a4:	9b04      	ldr	r3, [sp, #16]
 80212a6:	4403      	add	r3, r0
 80212a8:	9304      	str	r3, [sp, #16]
 80212aa:	9b05      	ldr	r3, [sp, #20]
 80212ac:	4403      	add	r3, r0
 80212ae:	4405      	add	r5, r0
 80212b0:	9305      	str	r3, [sp, #20]
 80212b2:	9b04      	ldr	r3, [sp, #16]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	dd07      	ble.n	80212c8 <_dtoa_r+0x818>
 80212b8:	ee18 1a10 	vmov	r1, s16
 80212bc:	461a      	mov	r2, r3
 80212be:	4620      	mov	r0, r4
 80212c0:	f000 fe22 	bl	8021f08 <__lshift>
 80212c4:	ee08 0a10 	vmov	s16, r0
 80212c8:	9b05      	ldr	r3, [sp, #20]
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	dd05      	ble.n	80212da <_dtoa_r+0x82a>
 80212ce:	4631      	mov	r1, r6
 80212d0:	461a      	mov	r2, r3
 80212d2:	4620      	mov	r0, r4
 80212d4:	f000 fe18 	bl	8021f08 <__lshift>
 80212d8:	4606      	mov	r6, r0
 80212da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d06e      	beq.n	80213be <_dtoa_r+0x90e>
 80212e0:	ee18 0a10 	vmov	r0, s16
 80212e4:	4631      	mov	r1, r6
 80212e6:	f000 fe7f 	bl	8021fe8 <__mcmp>
 80212ea:	2800      	cmp	r0, #0
 80212ec:	da67      	bge.n	80213be <_dtoa_r+0x90e>
 80212ee:	9b00      	ldr	r3, [sp, #0]
 80212f0:	3b01      	subs	r3, #1
 80212f2:	ee18 1a10 	vmov	r1, s16
 80212f6:	9300      	str	r3, [sp, #0]
 80212f8:	220a      	movs	r2, #10
 80212fa:	2300      	movs	r3, #0
 80212fc:	4620      	mov	r0, r4
 80212fe:	f000 fc53 	bl	8021ba8 <__multadd>
 8021302:	9b08      	ldr	r3, [sp, #32]
 8021304:	ee08 0a10 	vmov	s16, r0
 8021308:	2b00      	cmp	r3, #0
 802130a:	f000 81b1 	beq.w	8021670 <_dtoa_r+0xbc0>
 802130e:	2300      	movs	r3, #0
 8021310:	4639      	mov	r1, r7
 8021312:	220a      	movs	r2, #10
 8021314:	4620      	mov	r0, r4
 8021316:	f000 fc47 	bl	8021ba8 <__multadd>
 802131a:	9b02      	ldr	r3, [sp, #8]
 802131c:	2b00      	cmp	r3, #0
 802131e:	4607      	mov	r7, r0
 8021320:	f300 808e 	bgt.w	8021440 <_dtoa_r+0x990>
 8021324:	9b06      	ldr	r3, [sp, #24]
 8021326:	2b02      	cmp	r3, #2
 8021328:	dc51      	bgt.n	80213ce <_dtoa_r+0x91e>
 802132a:	e089      	b.n	8021440 <_dtoa_r+0x990>
 802132c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802132e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021332:	e74b      	b.n	80211cc <_dtoa_r+0x71c>
 8021334:	9b03      	ldr	r3, [sp, #12]
 8021336:	1e5e      	subs	r6, r3, #1
 8021338:	9b07      	ldr	r3, [sp, #28]
 802133a:	42b3      	cmp	r3, r6
 802133c:	bfbf      	itttt	lt
 802133e:	9b07      	ldrlt	r3, [sp, #28]
 8021340:	9607      	strlt	r6, [sp, #28]
 8021342:	1af2      	sublt	r2, r6, r3
 8021344:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8021346:	bfb6      	itet	lt
 8021348:	189b      	addlt	r3, r3, r2
 802134a:	1b9e      	subge	r6, r3, r6
 802134c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802134e:	9b03      	ldr	r3, [sp, #12]
 8021350:	bfb8      	it	lt
 8021352:	2600      	movlt	r6, #0
 8021354:	2b00      	cmp	r3, #0
 8021356:	bfb7      	itett	lt
 8021358:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802135c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021360:	1a9d      	sublt	r5, r3, r2
 8021362:	2300      	movlt	r3, #0
 8021364:	e734      	b.n	80211d0 <_dtoa_r+0x720>
 8021366:	9e07      	ldr	r6, [sp, #28]
 8021368:	9d04      	ldr	r5, [sp, #16]
 802136a:	9f08      	ldr	r7, [sp, #32]
 802136c:	e73b      	b.n	80211e6 <_dtoa_r+0x736>
 802136e:	9a07      	ldr	r2, [sp, #28]
 8021370:	e767      	b.n	8021242 <_dtoa_r+0x792>
 8021372:	9b06      	ldr	r3, [sp, #24]
 8021374:	2b01      	cmp	r3, #1
 8021376:	dc18      	bgt.n	80213aa <_dtoa_r+0x8fa>
 8021378:	f1ba 0f00 	cmp.w	sl, #0
 802137c:	d115      	bne.n	80213aa <_dtoa_r+0x8fa>
 802137e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021382:	b993      	cbnz	r3, 80213aa <_dtoa_r+0x8fa>
 8021384:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021388:	0d1b      	lsrs	r3, r3, #20
 802138a:	051b      	lsls	r3, r3, #20
 802138c:	b183      	cbz	r3, 80213b0 <_dtoa_r+0x900>
 802138e:	9b04      	ldr	r3, [sp, #16]
 8021390:	3301      	adds	r3, #1
 8021392:	9304      	str	r3, [sp, #16]
 8021394:	9b05      	ldr	r3, [sp, #20]
 8021396:	3301      	adds	r3, #1
 8021398:	9305      	str	r3, [sp, #20]
 802139a:	f04f 0801 	mov.w	r8, #1
 802139e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	f47f af6a 	bne.w	802127a <_dtoa_r+0x7ca>
 80213a6:	2001      	movs	r0, #1
 80213a8:	e76f      	b.n	802128a <_dtoa_r+0x7da>
 80213aa:	f04f 0800 	mov.w	r8, #0
 80213ae:	e7f6      	b.n	802139e <_dtoa_r+0x8ee>
 80213b0:	4698      	mov	r8, r3
 80213b2:	e7f4      	b.n	802139e <_dtoa_r+0x8ee>
 80213b4:	f43f af7d 	beq.w	80212b2 <_dtoa_r+0x802>
 80213b8:	4618      	mov	r0, r3
 80213ba:	301c      	adds	r0, #28
 80213bc:	e772      	b.n	80212a4 <_dtoa_r+0x7f4>
 80213be:	9b03      	ldr	r3, [sp, #12]
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	dc37      	bgt.n	8021434 <_dtoa_r+0x984>
 80213c4:	9b06      	ldr	r3, [sp, #24]
 80213c6:	2b02      	cmp	r3, #2
 80213c8:	dd34      	ble.n	8021434 <_dtoa_r+0x984>
 80213ca:	9b03      	ldr	r3, [sp, #12]
 80213cc:	9302      	str	r3, [sp, #8]
 80213ce:	9b02      	ldr	r3, [sp, #8]
 80213d0:	b96b      	cbnz	r3, 80213ee <_dtoa_r+0x93e>
 80213d2:	4631      	mov	r1, r6
 80213d4:	2205      	movs	r2, #5
 80213d6:	4620      	mov	r0, r4
 80213d8:	f000 fbe6 	bl	8021ba8 <__multadd>
 80213dc:	4601      	mov	r1, r0
 80213de:	4606      	mov	r6, r0
 80213e0:	ee18 0a10 	vmov	r0, s16
 80213e4:	f000 fe00 	bl	8021fe8 <__mcmp>
 80213e8:	2800      	cmp	r0, #0
 80213ea:	f73f adbb 	bgt.w	8020f64 <_dtoa_r+0x4b4>
 80213ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213f0:	9d01      	ldr	r5, [sp, #4]
 80213f2:	43db      	mvns	r3, r3
 80213f4:	9300      	str	r3, [sp, #0]
 80213f6:	f04f 0800 	mov.w	r8, #0
 80213fa:	4631      	mov	r1, r6
 80213fc:	4620      	mov	r0, r4
 80213fe:	f000 fbb1 	bl	8021b64 <_Bfree>
 8021402:	2f00      	cmp	r7, #0
 8021404:	f43f aea4 	beq.w	8021150 <_dtoa_r+0x6a0>
 8021408:	f1b8 0f00 	cmp.w	r8, #0
 802140c:	d005      	beq.n	802141a <_dtoa_r+0x96a>
 802140e:	45b8      	cmp	r8, r7
 8021410:	d003      	beq.n	802141a <_dtoa_r+0x96a>
 8021412:	4641      	mov	r1, r8
 8021414:	4620      	mov	r0, r4
 8021416:	f000 fba5 	bl	8021b64 <_Bfree>
 802141a:	4639      	mov	r1, r7
 802141c:	4620      	mov	r0, r4
 802141e:	f000 fba1 	bl	8021b64 <_Bfree>
 8021422:	e695      	b.n	8021150 <_dtoa_r+0x6a0>
 8021424:	2600      	movs	r6, #0
 8021426:	4637      	mov	r7, r6
 8021428:	e7e1      	b.n	80213ee <_dtoa_r+0x93e>
 802142a:	9700      	str	r7, [sp, #0]
 802142c:	4637      	mov	r7, r6
 802142e:	e599      	b.n	8020f64 <_dtoa_r+0x4b4>
 8021430:	40240000 	.word	0x40240000
 8021434:	9b08      	ldr	r3, [sp, #32]
 8021436:	2b00      	cmp	r3, #0
 8021438:	f000 80ca 	beq.w	80215d0 <_dtoa_r+0xb20>
 802143c:	9b03      	ldr	r3, [sp, #12]
 802143e:	9302      	str	r3, [sp, #8]
 8021440:	2d00      	cmp	r5, #0
 8021442:	dd05      	ble.n	8021450 <_dtoa_r+0x9a0>
 8021444:	4639      	mov	r1, r7
 8021446:	462a      	mov	r2, r5
 8021448:	4620      	mov	r0, r4
 802144a:	f000 fd5d 	bl	8021f08 <__lshift>
 802144e:	4607      	mov	r7, r0
 8021450:	f1b8 0f00 	cmp.w	r8, #0
 8021454:	d05b      	beq.n	802150e <_dtoa_r+0xa5e>
 8021456:	6879      	ldr	r1, [r7, #4]
 8021458:	4620      	mov	r0, r4
 802145a:	f000 fb43 	bl	8021ae4 <_Balloc>
 802145e:	4605      	mov	r5, r0
 8021460:	b928      	cbnz	r0, 802146e <_dtoa_r+0x9be>
 8021462:	4b87      	ldr	r3, [pc, #540]	; (8021680 <_dtoa_r+0xbd0>)
 8021464:	4602      	mov	r2, r0
 8021466:	f240 21ea 	movw	r1, #746	; 0x2ea
 802146a:	f7ff bb3b 	b.w	8020ae4 <_dtoa_r+0x34>
 802146e:	693a      	ldr	r2, [r7, #16]
 8021470:	3202      	adds	r2, #2
 8021472:	0092      	lsls	r2, r2, #2
 8021474:	f107 010c 	add.w	r1, r7, #12
 8021478:	300c      	adds	r0, #12
 802147a:	f7fe fca7 	bl	801fdcc <memcpy>
 802147e:	2201      	movs	r2, #1
 8021480:	4629      	mov	r1, r5
 8021482:	4620      	mov	r0, r4
 8021484:	f000 fd40 	bl	8021f08 <__lshift>
 8021488:	9b01      	ldr	r3, [sp, #4]
 802148a:	f103 0901 	add.w	r9, r3, #1
 802148e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8021492:	4413      	add	r3, r2
 8021494:	9305      	str	r3, [sp, #20]
 8021496:	f00a 0301 	and.w	r3, sl, #1
 802149a:	46b8      	mov	r8, r7
 802149c:	9304      	str	r3, [sp, #16]
 802149e:	4607      	mov	r7, r0
 80214a0:	4631      	mov	r1, r6
 80214a2:	ee18 0a10 	vmov	r0, s16
 80214a6:	f7ff fa75 	bl	8020994 <quorem>
 80214aa:	4641      	mov	r1, r8
 80214ac:	9002      	str	r0, [sp, #8]
 80214ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80214b2:	ee18 0a10 	vmov	r0, s16
 80214b6:	f000 fd97 	bl	8021fe8 <__mcmp>
 80214ba:	463a      	mov	r2, r7
 80214bc:	9003      	str	r0, [sp, #12]
 80214be:	4631      	mov	r1, r6
 80214c0:	4620      	mov	r0, r4
 80214c2:	f000 fdad 	bl	8022020 <__mdiff>
 80214c6:	68c2      	ldr	r2, [r0, #12]
 80214c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80214cc:	4605      	mov	r5, r0
 80214ce:	bb02      	cbnz	r2, 8021512 <_dtoa_r+0xa62>
 80214d0:	4601      	mov	r1, r0
 80214d2:	ee18 0a10 	vmov	r0, s16
 80214d6:	f000 fd87 	bl	8021fe8 <__mcmp>
 80214da:	4602      	mov	r2, r0
 80214dc:	4629      	mov	r1, r5
 80214de:	4620      	mov	r0, r4
 80214e0:	9207      	str	r2, [sp, #28]
 80214e2:	f000 fb3f 	bl	8021b64 <_Bfree>
 80214e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80214ea:	ea43 0102 	orr.w	r1, r3, r2
 80214ee:	9b04      	ldr	r3, [sp, #16]
 80214f0:	430b      	orrs	r3, r1
 80214f2:	464d      	mov	r5, r9
 80214f4:	d10f      	bne.n	8021516 <_dtoa_r+0xa66>
 80214f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80214fa:	d02a      	beq.n	8021552 <_dtoa_r+0xaa2>
 80214fc:	9b03      	ldr	r3, [sp, #12]
 80214fe:	2b00      	cmp	r3, #0
 8021500:	dd02      	ble.n	8021508 <_dtoa_r+0xa58>
 8021502:	9b02      	ldr	r3, [sp, #8]
 8021504:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8021508:	f88b a000 	strb.w	sl, [fp]
 802150c:	e775      	b.n	80213fa <_dtoa_r+0x94a>
 802150e:	4638      	mov	r0, r7
 8021510:	e7ba      	b.n	8021488 <_dtoa_r+0x9d8>
 8021512:	2201      	movs	r2, #1
 8021514:	e7e2      	b.n	80214dc <_dtoa_r+0xa2c>
 8021516:	9b03      	ldr	r3, [sp, #12]
 8021518:	2b00      	cmp	r3, #0
 802151a:	db04      	blt.n	8021526 <_dtoa_r+0xa76>
 802151c:	9906      	ldr	r1, [sp, #24]
 802151e:	430b      	orrs	r3, r1
 8021520:	9904      	ldr	r1, [sp, #16]
 8021522:	430b      	orrs	r3, r1
 8021524:	d122      	bne.n	802156c <_dtoa_r+0xabc>
 8021526:	2a00      	cmp	r2, #0
 8021528:	ddee      	ble.n	8021508 <_dtoa_r+0xa58>
 802152a:	ee18 1a10 	vmov	r1, s16
 802152e:	2201      	movs	r2, #1
 8021530:	4620      	mov	r0, r4
 8021532:	f000 fce9 	bl	8021f08 <__lshift>
 8021536:	4631      	mov	r1, r6
 8021538:	ee08 0a10 	vmov	s16, r0
 802153c:	f000 fd54 	bl	8021fe8 <__mcmp>
 8021540:	2800      	cmp	r0, #0
 8021542:	dc03      	bgt.n	802154c <_dtoa_r+0xa9c>
 8021544:	d1e0      	bne.n	8021508 <_dtoa_r+0xa58>
 8021546:	f01a 0f01 	tst.w	sl, #1
 802154a:	d0dd      	beq.n	8021508 <_dtoa_r+0xa58>
 802154c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021550:	d1d7      	bne.n	8021502 <_dtoa_r+0xa52>
 8021552:	2339      	movs	r3, #57	; 0x39
 8021554:	f88b 3000 	strb.w	r3, [fp]
 8021558:	462b      	mov	r3, r5
 802155a:	461d      	mov	r5, r3
 802155c:	3b01      	subs	r3, #1
 802155e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021562:	2a39      	cmp	r2, #57	; 0x39
 8021564:	d071      	beq.n	802164a <_dtoa_r+0xb9a>
 8021566:	3201      	adds	r2, #1
 8021568:	701a      	strb	r2, [r3, #0]
 802156a:	e746      	b.n	80213fa <_dtoa_r+0x94a>
 802156c:	2a00      	cmp	r2, #0
 802156e:	dd07      	ble.n	8021580 <_dtoa_r+0xad0>
 8021570:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021574:	d0ed      	beq.n	8021552 <_dtoa_r+0xaa2>
 8021576:	f10a 0301 	add.w	r3, sl, #1
 802157a:	f88b 3000 	strb.w	r3, [fp]
 802157e:	e73c      	b.n	80213fa <_dtoa_r+0x94a>
 8021580:	9b05      	ldr	r3, [sp, #20]
 8021582:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021586:	4599      	cmp	r9, r3
 8021588:	d047      	beq.n	802161a <_dtoa_r+0xb6a>
 802158a:	ee18 1a10 	vmov	r1, s16
 802158e:	2300      	movs	r3, #0
 8021590:	220a      	movs	r2, #10
 8021592:	4620      	mov	r0, r4
 8021594:	f000 fb08 	bl	8021ba8 <__multadd>
 8021598:	45b8      	cmp	r8, r7
 802159a:	ee08 0a10 	vmov	s16, r0
 802159e:	f04f 0300 	mov.w	r3, #0
 80215a2:	f04f 020a 	mov.w	r2, #10
 80215a6:	4641      	mov	r1, r8
 80215a8:	4620      	mov	r0, r4
 80215aa:	d106      	bne.n	80215ba <_dtoa_r+0xb0a>
 80215ac:	f000 fafc 	bl	8021ba8 <__multadd>
 80215b0:	4680      	mov	r8, r0
 80215b2:	4607      	mov	r7, r0
 80215b4:	f109 0901 	add.w	r9, r9, #1
 80215b8:	e772      	b.n	80214a0 <_dtoa_r+0x9f0>
 80215ba:	f000 faf5 	bl	8021ba8 <__multadd>
 80215be:	4639      	mov	r1, r7
 80215c0:	4680      	mov	r8, r0
 80215c2:	2300      	movs	r3, #0
 80215c4:	220a      	movs	r2, #10
 80215c6:	4620      	mov	r0, r4
 80215c8:	f000 faee 	bl	8021ba8 <__multadd>
 80215cc:	4607      	mov	r7, r0
 80215ce:	e7f1      	b.n	80215b4 <_dtoa_r+0xb04>
 80215d0:	9b03      	ldr	r3, [sp, #12]
 80215d2:	9302      	str	r3, [sp, #8]
 80215d4:	9d01      	ldr	r5, [sp, #4]
 80215d6:	ee18 0a10 	vmov	r0, s16
 80215da:	4631      	mov	r1, r6
 80215dc:	f7ff f9da 	bl	8020994 <quorem>
 80215e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80215e4:	9b01      	ldr	r3, [sp, #4]
 80215e6:	f805 ab01 	strb.w	sl, [r5], #1
 80215ea:	1aea      	subs	r2, r5, r3
 80215ec:	9b02      	ldr	r3, [sp, #8]
 80215ee:	4293      	cmp	r3, r2
 80215f0:	dd09      	ble.n	8021606 <_dtoa_r+0xb56>
 80215f2:	ee18 1a10 	vmov	r1, s16
 80215f6:	2300      	movs	r3, #0
 80215f8:	220a      	movs	r2, #10
 80215fa:	4620      	mov	r0, r4
 80215fc:	f000 fad4 	bl	8021ba8 <__multadd>
 8021600:	ee08 0a10 	vmov	s16, r0
 8021604:	e7e7      	b.n	80215d6 <_dtoa_r+0xb26>
 8021606:	9b02      	ldr	r3, [sp, #8]
 8021608:	2b00      	cmp	r3, #0
 802160a:	bfc8      	it	gt
 802160c:	461d      	movgt	r5, r3
 802160e:	9b01      	ldr	r3, [sp, #4]
 8021610:	bfd8      	it	le
 8021612:	2501      	movle	r5, #1
 8021614:	441d      	add	r5, r3
 8021616:	f04f 0800 	mov.w	r8, #0
 802161a:	ee18 1a10 	vmov	r1, s16
 802161e:	2201      	movs	r2, #1
 8021620:	4620      	mov	r0, r4
 8021622:	f000 fc71 	bl	8021f08 <__lshift>
 8021626:	4631      	mov	r1, r6
 8021628:	ee08 0a10 	vmov	s16, r0
 802162c:	f000 fcdc 	bl	8021fe8 <__mcmp>
 8021630:	2800      	cmp	r0, #0
 8021632:	dc91      	bgt.n	8021558 <_dtoa_r+0xaa8>
 8021634:	d102      	bne.n	802163c <_dtoa_r+0xb8c>
 8021636:	f01a 0f01 	tst.w	sl, #1
 802163a:	d18d      	bne.n	8021558 <_dtoa_r+0xaa8>
 802163c:	462b      	mov	r3, r5
 802163e:	461d      	mov	r5, r3
 8021640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021644:	2a30      	cmp	r2, #48	; 0x30
 8021646:	d0fa      	beq.n	802163e <_dtoa_r+0xb8e>
 8021648:	e6d7      	b.n	80213fa <_dtoa_r+0x94a>
 802164a:	9a01      	ldr	r2, [sp, #4]
 802164c:	429a      	cmp	r2, r3
 802164e:	d184      	bne.n	802155a <_dtoa_r+0xaaa>
 8021650:	9b00      	ldr	r3, [sp, #0]
 8021652:	3301      	adds	r3, #1
 8021654:	9300      	str	r3, [sp, #0]
 8021656:	2331      	movs	r3, #49	; 0x31
 8021658:	7013      	strb	r3, [r2, #0]
 802165a:	e6ce      	b.n	80213fa <_dtoa_r+0x94a>
 802165c:	4b09      	ldr	r3, [pc, #36]	; (8021684 <_dtoa_r+0xbd4>)
 802165e:	f7ff ba95 	b.w	8020b8c <_dtoa_r+0xdc>
 8021662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021664:	2b00      	cmp	r3, #0
 8021666:	f47f aa6e 	bne.w	8020b46 <_dtoa_r+0x96>
 802166a:	4b07      	ldr	r3, [pc, #28]	; (8021688 <_dtoa_r+0xbd8>)
 802166c:	f7ff ba8e 	b.w	8020b8c <_dtoa_r+0xdc>
 8021670:	9b02      	ldr	r3, [sp, #8]
 8021672:	2b00      	cmp	r3, #0
 8021674:	dcae      	bgt.n	80215d4 <_dtoa_r+0xb24>
 8021676:	9b06      	ldr	r3, [sp, #24]
 8021678:	2b02      	cmp	r3, #2
 802167a:	f73f aea8 	bgt.w	80213ce <_dtoa_r+0x91e>
 802167e:	e7a9      	b.n	80215d4 <_dtoa_r+0xb24>
 8021680:	080232df 	.word	0x080232df
 8021684:	0802323c 	.word	0x0802323c
 8021688:	08023260 	.word	0x08023260

0802168c <__sflush_r>:
 802168c:	898a      	ldrh	r2, [r1, #12]
 802168e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021692:	4605      	mov	r5, r0
 8021694:	0710      	lsls	r0, r2, #28
 8021696:	460c      	mov	r4, r1
 8021698:	d458      	bmi.n	802174c <__sflush_r+0xc0>
 802169a:	684b      	ldr	r3, [r1, #4]
 802169c:	2b00      	cmp	r3, #0
 802169e:	dc05      	bgt.n	80216ac <__sflush_r+0x20>
 80216a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	dc02      	bgt.n	80216ac <__sflush_r+0x20>
 80216a6:	2000      	movs	r0, #0
 80216a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80216ae:	2e00      	cmp	r6, #0
 80216b0:	d0f9      	beq.n	80216a6 <__sflush_r+0x1a>
 80216b2:	2300      	movs	r3, #0
 80216b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80216b8:	682f      	ldr	r7, [r5, #0]
 80216ba:	602b      	str	r3, [r5, #0]
 80216bc:	d032      	beq.n	8021724 <__sflush_r+0x98>
 80216be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80216c0:	89a3      	ldrh	r3, [r4, #12]
 80216c2:	075a      	lsls	r2, r3, #29
 80216c4:	d505      	bpl.n	80216d2 <__sflush_r+0x46>
 80216c6:	6863      	ldr	r3, [r4, #4]
 80216c8:	1ac0      	subs	r0, r0, r3
 80216ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80216cc:	b10b      	cbz	r3, 80216d2 <__sflush_r+0x46>
 80216ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80216d0:	1ac0      	subs	r0, r0, r3
 80216d2:	2300      	movs	r3, #0
 80216d4:	4602      	mov	r2, r0
 80216d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80216d8:	6a21      	ldr	r1, [r4, #32]
 80216da:	4628      	mov	r0, r5
 80216dc:	47b0      	blx	r6
 80216de:	1c43      	adds	r3, r0, #1
 80216e0:	89a3      	ldrh	r3, [r4, #12]
 80216e2:	d106      	bne.n	80216f2 <__sflush_r+0x66>
 80216e4:	6829      	ldr	r1, [r5, #0]
 80216e6:	291d      	cmp	r1, #29
 80216e8:	d82c      	bhi.n	8021744 <__sflush_r+0xb8>
 80216ea:	4a2a      	ldr	r2, [pc, #168]	; (8021794 <__sflush_r+0x108>)
 80216ec:	40ca      	lsrs	r2, r1
 80216ee:	07d6      	lsls	r6, r2, #31
 80216f0:	d528      	bpl.n	8021744 <__sflush_r+0xb8>
 80216f2:	2200      	movs	r2, #0
 80216f4:	6062      	str	r2, [r4, #4]
 80216f6:	04d9      	lsls	r1, r3, #19
 80216f8:	6922      	ldr	r2, [r4, #16]
 80216fa:	6022      	str	r2, [r4, #0]
 80216fc:	d504      	bpl.n	8021708 <__sflush_r+0x7c>
 80216fe:	1c42      	adds	r2, r0, #1
 8021700:	d101      	bne.n	8021706 <__sflush_r+0x7a>
 8021702:	682b      	ldr	r3, [r5, #0]
 8021704:	b903      	cbnz	r3, 8021708 <__sflush_r+0x7c>
 8021706:	6560      	str	r0, [r4, #84]	; 0x54
 8021708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802170a:	602f      	str	r7, [r5, #0]
 802170c:	2900      	cmp	r1, #0
 802170e:	d0ca      	beq.n	80216a6 <__sflush_r+0x1a>
 8021710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021714:	4299      	cmp	r1, r3
 8021716:	d002      	beq.n	802171e <__sflush_r+0x92>
 8021718:	4628      	mov	r0, r5
 802171a:	f000 fd7d 	bl	8022218 <_free_r>
 802171e:	2000      	movs	r0, #0
 8021720:	6360      	str	r0, [r4, #52]	; 0x34
 8021722:	e7c1      	b.n	80216a8 <__sflush_r+0x1c>
 8021724:	6a21      	ldr	r1, [r4, #32]
 8021726:	2301      	movs	r3, #1
 8021728:	4628      	mov	r0, r5
 802172a:	47b0      	blx	r6
 802172c:	1c41      	adds	r1, r0, #1
 802172e:	d1c7      	bne.n	80216c0 <__sflush_r+0x34>
 8021730:	682b      	ldr	r3, [r5, #0]
 8021732:	2b00      	cmp	r3, #0
 8021734:	d0c4      	beq.n	80216c0 <__sflush_r+0x34>
 8021736:	2b1d      	cmp	r3, #29
 8021738:	d001      	beq.n	802173e <__sflush_r+0xb2>
 802173a:	2b16      	cmp	r3, #22
 802173c:	d101      	bne.n	8021742 <__sflush_r+0xb6>
 802173e:	602f      	str	r7, [r5, #0]
 8021740:	e7b1      	b.n	80216a6 <__sflush_r+0x1a>
 8021742:	89a3      	ldrh	r3, [r4, #12]
 8021744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021748:	81a3      	strh	r3, [r4, #12]
 802174a:	e7ad      	b.n	80216a8 <__sflush_r+0x1c>
 802174c:	690f      	ldr	r7, [r1, #16]
 802174e:	2f00      	cmp	r7, #0
 8021750:	d0a9      	beq.n	80216a6 <__sflush_r+0x1a>
 8021752:	0793      	lsls	r3, r2, #30
 8021754:	680e      	ldr	r6, [r1, #0]
 8021756:	bf08      	it	eq
 8021758:	694b      	ldreq	r3, [r1, #20]
 802175a:	600f      	str	r7, [r1, #0]
 802175c:	bf18      	it	ne
 802175e:	2300      	movne	r3, #0
 8021760:	eba6 0807 	sub.w	r8, r6, r7
 8021764:	608b      	str	r3, [r1, #8]
 8021766:	f1b8 0f00 	cmp.w	r8, #0
 802176a:	dd9c      	ble.n	80216a6 <__sflush_r+0x1a>
 802176c:	6a21      	ldr	r1, [r4, #32]
 802176e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021770:	4643      	mov	r3, r8
 8021772:	463a      	mov	r2, r7
 8021774:	4628      	mov	r0, r5
 8021776:	47b0      	blx	r6
 8021778:	2800      	cmp	r0, #0
 802177a:	dc06      	bgt.n	802178a <__sflush_r+0xfe>
 802177c:	89a3      	ldrh	r3, [r4, #12]
 802177e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021782:	81a3      	strh	r3, [r4, #12]
 8021784:	f04f 30ff 	mov.w	r0, #4294967295
 8021788:	e78e      	b.n	80216a8 <__sflush_r+0x1c>
 802178a:	4407      	add	r7, r0
 802178c:	eba8 0800 	sub.w	r8, r8, r0
 8021790:	e7e9      	b.n	8021766 <__sflush_r+0xda>
 8021792:	bf00      	nop
 8021794:	20400001 	.word	0x20400001

08021798 <_fflush_r>:
 8021798:	b538      	push	{r3, r4, r5, lr}
 802179a:	690b      	ldr	r3, [r1, #16]
 802179c:	4605      	mov	r5, r0
 802179e:	460c      	mov	r4, r1
 80217a0:	b913      	cbnz	r3, 80217a8 <_fflush_r+0x10>
 80217a2:	2500      	movs	r5, #0
 80217a4:	4628      	mov	r0, r5
 80217a6:	bd38      	pop	{r3, r4, r5, pc}
 80217a8:	b118      	cbz	r0, 80217b2 <_fflush_r+0x1a>
 80217aa:	6983      	ldr	r3, [r0, #24]
 80217ac:	b90b      	cbnz	r3, 80217b2 <_fflush_r+0x1a>
 80217ae:	f000 f887 	bl	80218c0 <__sinit>
 80217b2:	4b14      	ldr	r3, [pc, #80]	; (8021804 <_fflush_r+0x6c>)
 80217b4:	429c      	cmp	r4, r3
 80217b6:	d11b      	bne.n	80217f0 <_fflush_r+0x58>
 80217b8:	686c      	ldr	r4, [r5, #4]
 80217ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217be:	2b00      	cmp	r3, #0
 80217c0:	d0ef      	beq.n	80217a2 <_fflush_r+0xa>
 80217c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80217c4:	07d0      	lsls	r0, r2, #31
 80217c6:	d404      	bmi.n	80217d2 <_fflush_r+0x3a>
 80217c8:	0599      	lsls	r1, r3, #22
 80217ca:	d402      	bmi.n	80217d2 <_fflush_r+0x3a>
 80217cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80217ce:	f000 f91a 	bl	8021a06 <__retarget_lock_acquire_recursive>
 80217d2:	4628      	mov	r0, r5
 80217d4:	4621      	mov	r1, r4
 80217d6:	f7ff ff59 	bl	802168c <__sflush_r>
 80217da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80217dc:	07da      	lsls	r2, r3, #31
 80217de:	4605      	mov	r5, r0
 80217e0:	d4e0      	bmi.n	80217a4 <_fflush_r+0xc>
 80217e2:	89a3      	ldrh	r3, [r4, #12]
 80217e4:	059b      	lsls	r3, r3, #22
 80217e6:	d4dd      	bmi.n	80217a4 <_fflush_r+0xc>
 80217e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80217ea:	f000 f90d 	bl	8021a08 <__retarget_lock_release_recursive>
 80217ee:	e7d9      	b.n	80217a4 <_fflush_r+0xc>
 80217f0:	4b05      	ldr	r3, [pc, #20]	; (8021808 <_fflush_r+0x70>)
 80217f2:	429c      	cmp	r4, r3
 80217f4:	d101      	bne.n	80217fa <_fflush_r+0x62>
 80217f6:	68ac      	ldr	r4, [r5, #8]
 80217f8:	e7df      	b.n	80217ba <_fflush_r+0x22>
 80217fa:	4b04      	ldr	r3, [pc, #16]	; (802180c <_fflush_r+0x74>)
 80217fc:	429c      	cmp	r4, r3
 80217fe:	bf08      	it	eq
 8021800:	68ec      	ldreq	r4, [r5, #12]
 8021802:	e7da      	b.n	80217ba <_fflush_r+0x22>
 8021804:	08023310 	.word	0x08023310
 8021808:	08023330 	.word	0x08023330
 802180c:	080232f0 	.word	0x080232f0

08021810 <std>:
 8021810:	2300      	movs	r3, #0
 8021812:	b510      	push	{r4, lr}
 8021814:	4604      	mov	r4, r0
 8021816:	e9c0 3300 	strd	r3, r3, [r0]
 802181a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802181e:	6083      	str	r3, [r0, #8]
 8021820:	8181      	strh	r1, [r0, #12]
 8021822:	6643      	str	r3, [r0, #100]	; 0x64
 8021824:	81c2      	strh	r2, [r0, #14]
 8021826:	6183      	str	r3, [r0, #24]
 8021828:	4619      	mov	r1, r3
 802182a:	2208      	movs	r2, #8
 802182c:	305c      	adds	r0, #92	; 0x5c
 802182e:	f7fe fadb 	bl	801fde8 <memset>
 8021832:	4b05      	ldr	r3, [pc, #20]	; (8021848 <std+0x38>)
 8021834:	6263      	str	r3, [r4, #36]	; 0x24
 8021836:	4b05      	ldr	r3, [pc, #20]	; (802184c <std+0x3c>)
 8021838:	62a3      	str	r3, [r4, #40]	; 0x28
 802183a:	4b05      	ldr	r3, [pc, #20]	; (8021850 <std+0x40>)
 802183c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802183e:	4b05      	ldr	r3, [pc, #20]	; (8021854 <std+0x44>)
 8021840:	6224      	str	r4, [r4, #32]
 8021842:	6323      	str	r3, [r4, #48]	; 0x30
 8021844:	bd10      	pop	{r4, pc}
 8021846:	bf00      	nop
 8021848:	0802273d 	.word	0x0802273d
 802184c:	0802275f 	.word	0x0802275f
 8021850:	08022797 	.word	0x08022797
 8021854:	080227bb 	.word	0x080227bb

08021858 <_cleanup_r>:
 8021858:	4901      	ldr	r1, [pc, #4]	; (8021860 <_cleanup_r+0x8>)
 802185a:	f000 b8af 	b.w	80219bc <_fwalk_reent>
 802185e:	bf00      	nop
 8021860:	08021799 	.word	0x08021799

08021864 <__sfmoreglue>:
 8021864:	b570      	push	{r4, r5, r6, lr}
 8021866:	2268      	movs	r2, #104	; 0x68
 8021868:	1e4d      	subs	r5, r1, #1
 802186a:	4355      	muls	r5, r2
 802186c:	460e      	mov	r6, r1
 802186e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021872:	f000 fd3d 	bl	80222f0 <_malloc_r>
 8021876:	4604      	mov	r4, r0
 8021878:	b140      	cbz	r0, 802188c <__sfmoreglue+0x28>
 802187a:	2100      	movs	r1, #0
 802187c:	e9c0 1600 	strd	r1, r6, [r0]
 8021880:	300c      	adds	r0, #12
 8021882:	60a0      	str	r0, [r4, #8]
 8021884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021888:	f7fe faae 	bl	801fde8 <memset>
 802188c:	4620      	mov	r0, r4
 802188e:	bd70      	pop	{r4, r5, r6, pc}

08021890 <__sfp_lock_acquire>:
 8021890:	4801      	ldr	r0, [pc, #4]	; (8021898 <__sfp_lock_acquire+0x8>)
 8021892:	f000 b8b8 	b.w	8021a06 <__retarget_lock_acquire_recursive>
 8021896:	bf00      	nop
 8021898:	2000f7c5 	.word	0x2000f7c5

0802189c <__sfp_lock_release>:
 802189c:	4801      	ldr	r0, [pc, #4]	; (80218a4 <__sfp_lock_release+0x8>)
 802189e:	f000 b8b3 	b.w	8021a08 <__retarget_lock_release_recursive>
 80218a2:	bf00      	nop
 80218a4:	2000f7c5 	.word	0x2000f7c5

080218a8 <__sinit_lock_acquire>:
 80218a8:	4801      	ldr	r0, [pc, #4]	; (80218b0 <__sinit_lock_acquire+0x8>)
 80218aa:	f000 b8ac 	b.w	8021a06 <__retarget_lock_acquire_recursive>
 80218ae:	bf00      	nop
 80218b0:	2000f7c6 	.word	0x2000f7c6

080218b4 <__sinit_lock_release>:
 80218b4:	4801      	ldr	r0, [pc, #4]	; (80218bc <__sinit_lock_release+0x8>)
 80218b6:	f000 b8a7 	b.w	8021a08 <__retarget_lock_release_recursive>
 80218ba:	bf00      	nop
 80218bc:	2000f7c6 	.word	0x2000f7c6

080218c0 <__sinit>:
 80218c0:	b510      	push	{r4, lr}
 80218c2:	4604      	mov	r4, r0
 80218c4:	f7ff fff0 	bl	80218a8 <__sinit_lock_acquire>
 80218c8:	69a3      	ldr	r3, [r4, #24]
 80218ca:	b11b      	cbz	r3, 80218d4 <__sinit+0x14>
 80218cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218d0:	f7ff bff0 	b.w	80218b4 <__sinit_lock_release>
 80218d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80218d8:	6523      	str	r3, [r4, #80]	; 0x50
 80218da:	4b13      	ldr	r3, [pc, #76]	; (8021928 <__sinit+0x68>)
 80218dc:	4a13      	ldr	r2, [pc, #76]	; (802192c <__sinit+0x6c>)
 80218de:	681b      	ldr	r3, [r3, #0]
 80218e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80218e2:	42a3      	cmp	r3, r4
 80218e4:	bf04      	itt	eq
 80218e6:	2301      	moveq	r3, #1
 80218e8:	61a3      	streq	r3, [r4, #24]
 80218ea:	4620      	mov	r0, r4
 80218ec:	f000 f820 	bl	8021930 <__sfp>
 80218f0:	6060      	str	r0, [r4, #4]
 80218f2:	4620      	mov	r0, r4
 80218f4:	f000 f81c 	bl	8021930 <__sfp>
 80218f8:	60a0      	str	r0, [r4, #8]
 80218fa:	4620      	mov	r0, r4
 80218fc:	f000 f818 	bl	8021930 <__sfp>
 8021900:	2200      	movs	r2, #0
 8021902:	60e0      	str	r0, [r4, #12]
 8021904:	2104      	movs	r1, #4
 8021906:	6860      	ldr	r0, [r4, #4]
 8021908:	f7ff ff82 	bl	8021810 <std>
 802190c:	68a0      	ldr	r0, [r4, #8]
 802190e:	2201      	movs	r2, #1
 8021910:	2109      	movs	r1, #9
 8021912:	f7ff ff7d 	bl	8021810 <std>
 8021916:	68e0      	ldr	r0, [r4, #12]
 8021918:	2202      	movs	r2, #2
 802191a:	2112      	movs	r1, #18
 802191c:	f7ff ff78 	bl	8021810 <std>
 8021920:	2301      	movs	r3, #1
 8021922:	61a3      	str	r3, [r4, #24]
 8021924:	e7d2      	b.n	80218cc <__sinit+0xc>
 8021926:	bf00      	nop
 8021928:	08023228 	.word	0x08023228
 802192c:	08021859 	.word	0x08021859

08021930 <__sfp>:
 8021930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021932:	4607      	mov	r7, r0
 8021934:	f7ff ffac 	bl	8021890 <__sfp_lock_acquire>
 8021938:	4b1e      	ldr	r3, [pc, #120]	; (80219b4 <__sfp+0x84>)
 802193a:	681e      	ldr	r6, [r3, #0]
 802193c:	69b3      	ldr	r3, [r6, #24]
 802193e:	b913      	cbnz	r3, 8021946 <__sfp+0x16>
 8021940:	4630      	mov	r0, r6
 8021942:	f7ff ffbd 	bl	80218c0 <__sinit>
 8021946:	3648      	adds	r6, #72	; 0x48
 8021948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802194c:	3b01      	subs	r3, #1
 802194e:	d503      	bpl.n	8021958 <__sfp+0x28>
 8021950:	6833      	ldr	r3, [r6, #0]
 8021952:	b30b      	cbz	r3, 8021998 <__sfp+0x68>
 8021954:	6836      	ldr	r6, [r6, #0]
 8021956:	e7f7      	b.n	8021948 <__sfp+0x18>
 8021958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802195c:	b9d5      	cbnz	r5, 8021994 <__sfp+0x64>
 802195e:	4b16      	ldr	r3, [pc, #88]	; (80219b8 <__sfp+0x88>)
 8021960:	60e3      	str	r3, [r4, #12]
 8021962:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021966:	6665      	str	r5, [r4, #100]	; 0x64
 8021968:	f000 f84c 	bl	8021a04 <__retarget_lock_init_recursive>
 802196c:	f7ff ff96 	bl	802189c <__sfp_lock_release>
 8021970:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021974:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021978:	6025      	str	r5, [r4, #0]
 802197a:	61a5      	str	r5, [r4, #24]
 802197c:	2208      	movs	r2, #8
 802197e:	4629      	mov	r1, r5
 8021980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021984:	f7fe fa30 	bl	801fde8 <memset>
 8021988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802198c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021990:	4620      	mov	r0, r4
 8021992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021994:	3468      	adds	r4, #104	; 0x68
 8021996:	e7d9      	b.n	802194c <__sfp+0x1c>
 8021998:	2104      	movs	r1, #4
 802199a:	4638      	mov	r0, r7
 802199c:	f7ff ff62 	bl	8021864 <__sfmoreglue>
 80219a0:	4604      	mov	r4, r0
 80219a2:	6030      	str	r0, [r6, #0]
 80219a4:	2800      	cmp	r0, #0
 80219a6:	d1d5      	bne.n	8021954 <__sfp+0x24>
 80219a8:	f7ff ff78 	bl	802189c <__sfp_lock_release>
 80219ac:	230c      	movs	r3, #12
 80219ae:	603b      	str	r3, [r7, #0]
 80219b0:	e7ee      	b.n	8021990 <__sfp+0x60>
 80219b2:	bf00      	nop
 80219b4:	08023228 	.word	0x08023228
 80219b8:	ffff0001 	.word	0xffff0001

080219bc <_fwalk_reent>:
 80219bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80219c0:	4606      	mov	r6, r0
 80219c2:	4688      	mov	r8, r1
 80219c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80219c8:	2700      	movs	r7, #0
 80219ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80219ce:	f1b9 0901 	subs.w	r9, r9, #1
 80219d2:	d505      	bpl.n	80219e0 <_fwalk_reent+0x24>
 80219d4:	6824      	ldr	r4, [r4, #0]
 80219d6:	2c00      	cmp	r4, #0
 80219d8:	d1f7      	bne.n	80219ca <_fwalk_reent+0xe>
 80219da:	4638      	mov	r0, r7
 80219dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80219e0:	89ab      	ldrh	r3, [r5, #12]
 80219e2:	2b01      	cmp	r3, #1
 80219e4:	d907      	bls.n	80219f6 <_fwalk_reent+0x3a>
 80219e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80219ea:	3301      	adds	r3, #1
 80219ec:	d003      	beq.n	80219f6 <_fwalk_reent+0x3a>
 80219ee:	4629      	mov	r1, r5
 80219f0:	4630      	mov	r0, r6
 80219f2:	47c0      	blx	r8
 80219f4:	4307      	orrs	r7, r0
 80219f6:	3568      	adds	r5, #104	; 0x68
 80219f8:	e7e9      	b.n	80219ce <_fwalk_reent+0x12>
	...

080219fc <_localeconv_r>:
 80219fc:	4800      	ldr	r0, [pc, #0]	; (8021a00 <_localeconv_r+0x4>)
 80219fe:	4770      	bx	lr
 8021a00:	20000180 	.word	0x20000180

08021a04 <__retarget_lock_init_recursive>:
 8021a04:	4770      	bx	lr

08021a06 <__retarget_lock_acquire_recursive>:
 8021a06:	4770      	bx	lr

08021a08 <__retarget_lock_release_recursive>:
 8021a08:	4770      	bx	lr

08021a0a <__swhatbuf_r>:
 8021a0a:	b570      	push	{r4, r5, r6, lr}
 8021a0c:	460e      	mov	r6, r1
 8021a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a12:	2900      	cmp	r1, #0
 8021a14:	b096      	sub	sp, #88	; 0x58
 8021a16:	4614      	mov	r4, r2
 8021a18:	461d      	mov	r5, r3
 8021a1a:	da08      	bge.n	8021a2e <__swhatbuf_r+0x24>
 8021a1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021a20:	2200      	movs	r2, #0
 8021a22:	602a      	str	r2, [r5, #0]
 8021a24:	061a      	lsls	r2, r3, #24
 8021a26:	d410      	bmi.n	8021a4a <__swhatbuf_r+0x40>
 8021a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021a2c:	e00e      	b.n	8021a4c <__swhatbuf_r+0x42>
 8021a2e:	466a      	mov	r2, sp
 8021a30:	f000 ff1a 	bl	8022868 <_fstat_r>
 8021a34:	2800      	cmp	r0, #0
 8021a36:	dbf1      	blt.n	8021a1c <__swhatbuf_r+0x12>
 8021a38:	9a01      	ldr	r2, [sp, #4]
 8021a3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021a3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021a42:	425a      	negs	r2, r3
 8021a44:	415a      	adcs	r2, r3
 8021a46:	602a      	str	r2, [r5, #0]
 8021a48:	e7ee      	b.n	8021a28 <__swhatbuf_r+0x1e>
 8021a4a:	2340      	movs	r3, #64	; 0x40
 8021a4c:	2000      	movs	r0, #0
 8021a4e:	6023      	str	r3, [r4, #0]
 8021a50:	b016      	add	sp, #88	; 0x58
 8021a52:	bd70      	pop	{r4, r5, r6, pc}

08021a54 <__smakebuf_r>:
 8021a54:	898b      	ldrh	r3, [r1, #12]
 8021a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021a58:	079d      	lsls	r5, r3, #30
 8021a5a:	4606      	mov	r6, r0
 8021a5c:	460c      	mov	r4, r1
 8021a5e:	d507      	bpl.n	8021a70 <__smakebuf_r+0x1c>
 8021a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021a64:	6023      	str	r3, [r4, #0]
 8021a66:	6123      	str	r3, [r4, #16]
 8021a68:	2301      	movs	r3, #1
 8021a6a:	6163      	str	r3, [r4, #20]
 8021a6c:	b002      	add	sp, #8
 8021a6e:	bd70      	pop	{r4, r5, r6, pc}
 8021a70:	ab01      	add	r3, sp, #4
 8021a72:	466a      	mov	r2, sp
 8021a74:	f7ff ffc9 	bl	8021a0a <__swhatbuf_r>
 8021a78:	9900      	ldr	r1, [sp, #0]
 8021a7a:	4605      	mov	r5, r0
 8021a7c:	4630      	mov	r0, r6
 8021a7e:	f000 fc37 	bl	80222f0 <_malloc_r>
 8021a82:	b948      	cbnz	r0, 8021a98 <__smakebuf_r+0x44>
 8021a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a88:	059a      	lsls	r2, r3, #22
 8021a8a:	d4ef      	bmi.n	8021a6c <__smakebuf_r+0x18>
 8021a8c:	f023 0303 	bic.w	r3, r3, #3
 8021a90:	f043 0302 	orr.w	r3, r3, #2
 8021a94:	81a3      	strh	r3, [r4, #12]
 8021a96:	e7e3      	b.n	8021a60 <__smakebuf_r+0xc>
 8021a98:	4b0d      	ldr	r3, [pc, #52]	; (8021ad0 <__smakebuf_r+0x7c>)
 8021a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8021a9c:	89a3      	ldrh	r3, [r4, #12]
 8021a9e:	6020      	str	r0, [r4, #0]
 8021aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021aa4:	81a3      	strh	r3, [r4, #12]
 8021aa6:	9b00      	ldr	r3, [sp, #0]
 8021aa8:	6163      	str	r3, [r4, #20]
 8021aaa:	9b01      	ldr	r3, [sp, #4]
 8021aac:	6120      	str	r0, [r4, #16]
 8021aae:	b15b      	cbz	r3, 8021ac8 <__smakebuf_r+0x74>
 8021ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021ab4:	4630      	mov	r0, r6
 8021ab6:	f000 fee9 	bl	802288c <_isatty_r>
 8021aba:	b128      	cbz	r0, 8021ac8 <__smakebuf_r+0x74>
 8021abc:	89a3      	ldrh	r3, [r4, #12]
 8021abe:	f023 0303 	bic.w	r3, r3, #3
 8021ac2:	f043 0301 	orr.w	r3, r3, #1
 8021ac6:	81a3      	strh	r3, [r4, #12]
 8021ac8:	89a0      	ldrh	r0, [r4, #12]
 8021aca:	4305      	orrs	r5, r0
 8021acc:	81a5      	strh	r5, [r4, #12]
 8021ace:	e7cd      	b.n	8021a6c <__smakebuf_r+0x18>
 8021ad0:	08021859 	.word	0x08021859

08021ad4 <malloc>:
 8021ad4:	4b02      	ldr	r3, [pc, #8]	; (8021ae0 <malloc+0xc>)
 8021ad6:	4601      	mov	r1, r0
 8021ad8:	6818      	ldr	r0, [r3, #0]
 8021ada:	f000 bc09 	b.w	80222f0 <_malloc_r>
 8021ade:	bf00      	nop
 8021ae0:	2000002c 	.word	0x2000002c

08021ae4 <_Balloc>:
 8021ae4:	b570      	push	{r4, r5, r6, lr}
 8021ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021ae8:	4604      	mov	r4, r0
 8021aea:	460d      	mov	r5, r1
 8021aec:	b976      	cbnz	r6, 8021b0c <_Balloc+0x28>
 8021aee:	2010      	movs	r0, #16
 8021af0:	f7ff fff0 	bl	8021ad4 <malloc>
 8021af4:	4602      	mov	r2, r0
 8021af6:	6260      	str	r0, [r4, #36]	; 0x24
 8021af8:	b920      	cbnz	r0, 8021b04 <_Balloc+0x20>
 8021afa:	4b18      	ldr	r3, [pc, #96]	; (8021b5c <_Balloc+0x78>)
 8021afc:	4818      	ldr	r0, [pc, #96]	; (8021b60 <_Balloc+0x7c>)
 8021afe:	2166      	movs	r1, #102	; 0x66
 8021b00:	f000 fe72 	bl	80227e8 <__assert_func>
 8021b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021b08:	6006      	str	r6, [r0, #0]
 8021b0a:	60c6      	str	r6, [r0, #12]
 8021b0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021b0e:	68f3      	ldr	r3, [r6, #12]
 8021b10:	b183      	cbz	r3, 8021b34 <_Balloc+0x50>
 8021b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021b14:	68db      	ldr	r3, [r3, #12]
 8021b16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021b1a:	b9b8      	cbnz	r0, 8021b4c <_Balloc+0x68>
 8021b1c:	2101      	movs	r1, #1
 8021b1e:	fa01 f605 	lsl.w	r6, r1, r5
 8021b22:	1d72      	adds	r2, r6, #5
 8021b24:	0092      	lsls	r2, r2, #2
 8021b26:	4620      	mov	r0, r4
 8021b28:	f000 fb60 	bl	80221ec <_calloc_r>
 8021b2c:	b160      	cbz	r0, 8021b48 <_Balloc+0x64>
 8021b2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021b32:	e00e      	b.n	8021b52 <_Balloc+0x6e>
 8021b34:	2221      	movs	r2, #33	; 0x21
 8021b36:	2104      	movs	r1, #4
 8021b38:	4620      	mov	r0, r4
 8021b3a:	f000 fb57 	bl	80221ec <_calloc_r>
 8021b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021b40:	60f0      	str	r0, [r6, #12]
 8021b42:	68db      	ldr	r3, [r3, #12]
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	d1e4      	bne.n	8021b12 <_Balloc+0x2e>
 8021b48:	2000      	movs	r0, #0
 8021b4a:	bd70      	pop	{r4, r5, r6, pc}
 8021b4c:	6802      	ldr	r2, [r0, #0]
 8021b4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021b52:	2300      	movs	r3, #0
 8021b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021b58:	e7f7      	b.n	8021b4a <_Balloc+0x66>
 8021b5a:	bf00      	nop
 8021b5c:	0802326d 	.word	0x0802326d
 8021b60:	08023350 	.word	0x08023350

08021b64 <_Bfree>:
 8021b64:	b570      	push	{r4, r5, r6, lr}
 8021b66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021b68:	4605      	mov	r5, r0
 8021b6a:	460c      	mov	r4, r1
 8021b6c:	b976      	cbnz	r6, 8021b8c <_Bfree+0x28>
 8021b6e:	2010      	movs	r0, #16
 8021b70:	f7ff ffb0 	bl	8021ad4 <malloc>
 8021b74:	4602      	mov	r2, r0
 8021b76:	6268      	str	r0, [r5, #36]	; 0x24
 8021b78:	b920      	cbnz	r0, 8021b84 <_Bfree+0x20>
 8021b7a:	4b09      	ldr	r3, [pc, #36]	; (8021ba0 <_Bfree+0x3c>)
 8021b7c:	4809      	ldr	r0, [pc, #36]	; (8021ba4 <_Bfree+0x40>)
 8021b7e:	218a      	movs	r1, #138	; 0x8a
 8021b80:	f000 fe32 	bl	80227e8 <__assert_func>
 8021b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021b88:	6006      	str	r6, [r0, #0]
 8021b8a:	60c6      	str	r6, [r0, #12]
 8021b8c:	b13c      	cbz	r4, 8021b9e <_Bfree+0x3a>
 8021b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021b90:	6862      	ldr	r2, [r4, #4]
 8021b92:	68db      	ldr	r3, [r3, #12]
 8021b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021b98:	6021      	str	r1, [r4, #0]
 8021b9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021b9e:	bd70      	pop	{r4, r5, r6, pc}
 8021ba0:	0802326d 	.word	0x0802326d
 8021ba4:	08023350 	.word	0x08023350

08021ba8 <__multadd>:
 8021ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021bac:	690d      	ldr	r5, [r1, #16]
 8021bae:	4607      	mov	r7, r0
 8021bb0:	460c      	mov	r4, r1
 8021bb2:	461e      	mov	r6, r3
 8021bb4:	f101 0c14 	add.w	ip, r1, #20
 8021bb8:	2000      	movs	r0, #0
 8021bba:	f8dc 3000 	ldr.w	r3, [ip]
 8021bbe:	b299      	uxth	r1, r3
 8021bc0:	fb02 6101 	mla	r1, r2, r1, r6
 8021bc4:	0c1e      	lsrs	r6, r3, #16
 8021bc6:	0c0b      	lsrs	r3, r1, #16
 8021bc8:	fb02 3306 	mla	r3, r2, r6, r3
 8021bcc:	b289      	uxth	r1, r1
 8021bce:	3001      	adds	r0, #1
 8021bd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021bd4:	4285      	cmp	r5, r0
 8021bd6:	f84c 1b04 	str.w	r1, [ip], #4
 8021bda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021bde:	dcec      	bgt.n	8021bba <__multadd+0x12>
 8021be0:	b30e      	cbz	r6, 8021c26 <__multadd+0x7e>
 8021be2:	68a3      	ldr	r3, [r4, #8]
 8021be4:	42ab      	cmp	r3, r5
 8021be6:	dc19      	bgt.n	8021c1c <__multadd+0x74>
 8021be8:	6861      	ldr	r1, [r4, #4]
 8021bea:	4638      	mov	r0, r7
 8021bec:	3101      	adds	r1, #1
 8021bee:	f7ff ff79 	bl	8021ae4 <_Balloc>
 8021bf2:	4680      	mov	r8, r0
 8021bf4:	b928      	cbnz	r0, 8021c02 <__multadd+0x5a>
 8021bf6:	4602      	mov	r2, r0
 8021bf8:	4b0c      	ldr	r3, [pc, #48]	; (8021c2c <__multadd+0x84>)
 8021bfa:	480d      	ldr	r0, [pc, #52]	; (8021c30 <__multadd+0x88>)
 8021bfc:	21b5      	movs	r1, #181	; 0xb5
 8021bfe:	f000 fdf3 	bl	80227e8 <__assert_func>
 8021c02:	6922      	ldr	r2, [r4, #16]
 8021c04:	3202      	adds	r2, #2
 8021c06:	f104 010c 	add.w	r1, r4, #12
 8021c0a:	0092      	lsls	r2, r2, #2
 8021c0c:	300c      	adds	r0, #12
 8021c0e:	f7fe f8dd 	bl	801fdcc <memcpy>
 8021c12:	4621      	mov	r1, r4
 8021c14:	4638      	mov	r0, r7
 8021c16:	f7ff ffa5 	bl	8021b64 <_Bfree>
 8021c1a:	4644      	mov	r4, r8
 8021c1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021c20:	3501      	adds	r5, #1
 8021c22:	615e      	str	r6, [r3, #20]
 8021c24:	6125      	str	r5, [r4, #16]
 8021c26:	4620      	mov	r0, r4
 8021c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c2c:	080232df 	.word	0x080232df
 8021c30:	08023350 	.word	0x08023350

08021c34 <__hi0bits>:
 8021c34:	0c03      	lsrs	r3, r0, #16
 8021c36:	041b      	lsls	r3, r3, #16
 8021c38:	b9d3      	cbnz	r3, 8021c70 <__hi0bits+0x3c>
 8021c3a:	0400      	lsls	r0, r0, #16
 8021c3c:	2310      	movs	r3, #16
 8021c3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021c42:	bf04      	itt	eq
 8021c44:	0200      	lsleq	r0, r0, #8
 8021c46:	3308      	addeq	r3, #8
 8021c48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021c4c:	bf04      	itt	eq
 8021c4e:	0100      	lsleq	r0, r0, #4
 8021c50:	3304      	addeq	r3, #4
 8021c52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021c56:	bf04      	itt	eq
 8021c58:	0080      	lsleq	r0, r0, #2
 8021c5a:	3302      	addeq	r3, #2
 8021c5c:	2800      	cmp	r0, #0
 8021c5e:	db05      	blt.n	8021c6c <__hi0bits+0x38>
 8021c60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021c64:	f103 0301 	add.w	r3, r3, #1
 8021c68:	bf08      	it	eq
 8021c6a:	2320      	moveq	r3, #32
 8021c6c:	4618      	mov	r0, r3
 8021c6e:	4770      	bx	lr
 8021c70:	2300      	movs	r3, #0
 8021c72:	e7e4      	b.n	8021c3e <__hi0bits+0xa>

08021c74 <__lo0bits>:
 8021c74:	6803      	ldr	r3, [r0, #0]
 8021c76:	f013 0207 	ands.w	r2, r3, #7
 8021c7a:	4601      	mov	r1, r0
 8021c7c:	d00b      	beq.n	8021c96 <__lo0bits+0x22>
 8021c7e:	07da      	lsls	r2, r3, #31
 8021c80:	d423      	bmi.n	8021cca <__lo0bits+0x56>
 8021c82:	0798      	lsls	r0, r3, #30
 8021c84:	bf49      	itett	mi
 8021c86:	085b      	lsrmi	r3, r3, #1
 8021c88:	089b      	lsrpl	r3, r3, #2
 8021c8a:	2001      	movmi	r0, #1
 8021c8c:	600b      	strmi	r3, [r1, #0]
 8021c8e:	bf5c      	itt	pl
 8021c90:	600b      	strpl	r3, [r1, #0]
 8021c92:	2002      	movpl	r0, #2
 8021c94:	4770      	bx	lr
 8021c96:	b298      	uxth	r0, r3
 8021c98:	b9a8      	cbnz	r0, 8021cc6 <__lo0bits+0x52>
 8021c9a:	0c1b      	lsrs	r3, r3, #16
 8021c9c:	2010      	movs	r0, #16
 8021c9e:	b2da      	uxtb	r2, r3
 8021ca0:	b90a      	cbnz	r2, 8021ca6 <__lo0bits+0x32>
 8021ca2:	3008      	adds	r0, #8
 8021ca4:	0a1b      	lsrs	r3, r3, #8
 8021ca6:	071a      	lsls	r2, r3, #28
 8021ca8:	bf04      	itt	eq
 8021caa:	091b      	lsreq	r3, r3, #4
 8021cac:	3004      	addeq	r0, #4
 8021cae:	079a      	lsls	r2, r3, #30
 8021cb0:	bf04      	itt	eq
 8021cb2:	089b      	lsreq	r3, r3, #2
 8021cb4:	3002      	addeq	r0, #2
 8021cb6:	07da      	lsls	r2, r3, #31
 8021cb8:	d403      	bmi.n	8021cc2 <__lo0bits+0x4e>
 8021cba:	085b      	lsrs	r3, r3, #1
 8021cbc:	f100 0001 	add.w	r0, r0, #1
 8021cc0:	d005      	beq.n	8021cce <__lo0bits+0x5a>
 8021cc2:	600b      	str	r3, [r1, #0]
 8021cc4:	4770      	bx	lr
 8021cc6:	4610      	mov	r0, r2
 8021cc8:	e7e9      	b.n	8021c9e <__lo0bits+0x2a>
 8021cca:	2000      	movs	r0, #0
 8021ccc:	4770      	bx	lr
 8021cce:	2020      	movs	r0, #32
 8021cd0:	4770      	bx	lr
	...

08021cd4 <__i2b>:
 8021cd4:	b510      	push	{r4, lr}
 8021cd6:	460c      	mov	r4, r1
 8021cd8:	2101      	movs	r1, #1
 8021cda:	f7ff ff03 	bl	8021ae4 <_Balloc>
 8021cde:	4602      	mov	r2, r0
 8021ce0:	b928      	cbnz	r0, 8021cee <__i2b+0x1a>
 8021ce2:	4b05      	ldr	r3, [pc, #20]	; (8021cf8 <__i2b+0x24>)
 8021ce4:	4805      	ldr	r0, [pc, #20]	; (8021cfc <__i2b+0x28>)
 8021ce6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021cea:	f000 fd7d 	bl	80227e8 <__assert_func>
 8021cee:	2301      	movs	r3, #1
 8021cf0:	6144      	str	r4, [r0, #20]
 8021cf2:	6103      	str	r3, [r0, #16]
 8021cf4:	bd10      	pop	{r4, pc}
 8021cf6:	bf00      	nop
 8021cf8:	080232df 	.word	0x080232df
 8021cfc:	08023350 	.word	0x08023350

08021d00 <__multiply>:
 8021d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d04:	4691      	mov	r9, r2
 8021d06:	690a      	ldr	r2, [r1, #16]
 8021d08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021d0c:	429a      	cmp	r2, r3
 8021d0e:	bfb8      	it	lt
 8021d10:	460b      	movlt	r3, r1
 8021d12:	460c      	mov	r4, r1
 8021d14:	bfbc      	itt	lt
 8021d16:	464c      	movlt	r4, r9
 8021d18:	4699      	movlt	r9, r3
 8021d1a:	6927      	ldr	r7, [r4, #16]
 8021d1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021d20:	68a3      	ldr	r3, [r4, #8]
 8021d22:	6861      	ldr	r1, [r4, #4]
 8021d24:	eb07 060a 	add.w	r6, r7, sl
 8021d28:	42b3      	cmp	r3, r6
 8021d2a:	b085      	sub	sp, #20
 8021d2c:	bfb8      	it	lt
 8021d2e:	3101      	addlt	r1, #1
 8021d30:	f7ff fed8 	bl	8021ae4 <_Balloc>
 8021d34:	b930      	cbnz	r0, 8021d44 <__multiply+0x44>
 8021d36:	4602      	mov	r2, r0
 8021d38:	4b44      	ldr	r3, [pc, #272]	; (8021e4c <__multiply+0x14c>)
 8021d3a:	4845      	ldr	r0, [pc, #276]	; (8021e50 <__multiply+0x150>)
 8021d3c:	f240 115d 	movw	r1, #349	; 0x15d
 8021d40:	f000 fd52 	bl	80227e8 <__assert_func>
 8021d44:	f100 0514 	add.w	r5, r0, #20
 8021d48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021d4c:	462b      	mov	r3, r5
 8021d4e:	2200      	movs	r2, #0
 8021d50:	4543      	cmp	r3, r8
 8021d52:	d321      	bcc.n	8021d98 <__multiply+0x98>
 8021d54:	f104 0314 	add.w	r3, r4, #20
 8021d58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021d5c:	f109 0314 	add.w	r3, r9, #20
 8021d60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021d64:	9202      	str	r2, [sp, #8]
 8021d66:	1b3a      	subs	r2, r7, r4
 8021d68:	3a15      	subs	r2, #21
 8021d6a:	f022 0203 	bic.w	r2, r2, #3
 8021d6e:	3204      	adds	r2, #4
 8021d70:	f104 0115 	add.w	r1, r4, #21
 8021d74:	428f      	cmp	r7, r1
 8021d76:	bf38      	it	cc
 8021d78:	2204      	movcc	r2, #4
 8021d7a:	9201      	str	r2, [sp, #4]
 8021d7c:	9a02      	ldr	r2, [sp, #8]
 8021d7e:	9303      	str	r3, [sp, #12]
 8021d80:	429a      	cmp	r2, r3
 8021d82:	d80c      	bhi.n	8021d9e <__multiply+0x9e>
 8021d84:	2e00      	cmp	r6, #0
 8021d86:	dd03      	ble.n	8021d90 <__multiply+0x90>
 8021d88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d05a      	beq.n	8021e46 <__multiply+0x146>
 8021d90:	6106      	str	r6, [r0, #16]
 8021d92:	b005      	add	sp, #20
 8021d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d98:	f843 2b04 	str.w	r2, [r3], #4
 8021d9c:	e7d8      	b.n	8021d50 <__multiply+0x50>
 8021d9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8021da2:	f1ba 0f00 	cmp.w	sl, #0
 8021da6:	d024      	beq.n	8021df2 <__multiply+0xf2>
 8021da8:	f104 0e14 	add.w	lr, r4, #20
 8021dac:	46a9      	mov	r9, r5
 8021dae:	f04f 0c00 	mov.w	ip, #0
 8021db2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021db6:	f8d9 1000 	ldr.w	r1, [r9]
 8021dba:	fa1f fb82 	uxth.w	fp, r2
 8021dbe:	b289      	uxth	r1, r1
 8021dc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8021dc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8021dcc:	4461      	add	r1, ip
 8021dce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021dd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8021dd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021dda:	b289      	uxth	r1, r1
 8021ddc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021de0:	4577      	cmp	r7, lr
 8021de2:	f849 1b04 	str.w	r1, [r9], #4
 8021de6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021dea:	d8e2      	bhi.n	8021db2 <__multiply+0xb2>
 8021dec:	9a01      	ldr	r2, [sp, #4]
 8021dee:	f845 c002 	str.w	ip, [r5, r2]
 8021df2:	9a03      	ldr	r2, [sp, #12]
 8021df4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021df8:	3304      	adds	r3, #4
 8021dfa:	f1b9 0f00 	cmp.w	r9, #0
 8021dfe:	d020      	beq.n	8021e42 <__multiply+0x142>
 8021e00:	6829      	ldr	r1, [r5, #0]
 8021e02:	f104 0c14 	add.w	ip, r4, #20
 8021e06:	46ae      	mov	lr, r5
 8021e08:	f04f 0a00 	mov.w	sl, #0
 8021e0c:	f8bc b000 	ldrh.w	fp, [ip]
 8021e10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021e14:	fb09 220b 	mla	r2, r9, fp, r2
 8021e18:	4492      	add	sl, r2
 8021e1a:	b289      	uxth	r1, r1
 8021e1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021e20:	f84e 1b04 	str.w	r1, [lr], #4
 8021e24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021e28:	f8be 1000 	ldrh.w	r1, [lr]
 8021e2c:	0c12      	lsrs	r2, r2, #16
 8021e2e:	fb09 1102 	mla	r1, r9, r2, r1
 8021e32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021e36:	4567      	cmp	r7, ip
 8021e38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021e3c:	d8e6      	bhi.n	8021e0c <__multiply+0x10c>
 8021e3e:	9a01      	ldr	r2, [sp, #4]
 8021e40:	50a9      	str	r1, [r5, r2]
 8021e42:	3504      	adds	r5, #4
 8021e44:	e79a      	b.n	8021d7c <__multiply+0x7c>
 8021e46:	3e01      	subs	r6, #1
 8021e48:	e79c      	b.n	8021d84 <__multiply+0x84>
 8021e4a:	bf00      	nop
 8021e4c:	080232df 	.word	0x080232df
 8021e50:	08023350 	.word	0x08023350

08021e54 <__pow5mult>:
 8021e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021e58:	4615      	mov	r5, r2
 8021e5a:	f012 0203 	ands.w	r2, r2, #3
 8021e5e:	4606      	mov	r6, r0
 8021e60:	460f      	mov	r7, r1
 8021e62:	d007      	beq.n	8021e74 <__pow5mult+0x20>
 8021e64:	4c25      	ldr	r4, [pc, #148]	; (8021efc <__pow5mult+0xa8>)
 8021e66:	3a01      	subs	r2, #1
 8021e68:	2300      	movs	r3, #0
 8021e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021e6e:	f7ff fe9b 	bl	8021ba8 <__multadd>
 8021e72:	4607      	mov	r7, r0
 8021e74:	10ad      	asrs	r5, r5, #2
 8021e76:	d03d      	beq.n	8021ef4 <__pow5mult+0xa0>
 8021e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021e7a:	b97c      	cbnz	r4, 8021e9c <__pow5mult+0x48>
 8021e7c:	2010      	movs	r0, #16
 8021e7e:	f7ff fe29 	bl	8021ad4 <malloc>
 8021e82:	4602      	mov	r2, r0
 8021e84:	6270      	str	r0, [r6, #36]	; 0x24
 8021e86:	b928      	cbnz	r0, 8021e94 <__pow5mult+0x40>
 8021e88:	4b1d      	ldr	r3, [pc, #116]	; (8021f00 <__pow5mult+0xac>)
 8021e8a:	481e      	ldr	r0, [pc, #120]	; (8021f04 <__pow5mult+0xb0>)
 8021e8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021e90:	f000 fcaa 	bl	80227e8 <__assert_func>
 8021e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021e98:	6004      	str	r4, [r0, #0]
 8021e9a:	60c4      	str	r4, [r0, #12]
 8021e9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021ea4:	b94c      	cbnz	r4, 8021eba <__pow5mult+0x66>
 8021ea6:	f240 2171 	movw	r1, #625	; 0x271
 8021eaa:	4630      	mov	r0, r6
 8021eac:	f7ff ff12 	bl	8021cd4 <__i2b>
 8021eb0:	2300      	movs	r3, #0
 8021eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8021eb6:	4604      	mov	r4, r0
 8021eb8:	6003      	str	r3, [r0, #0]
 8021eba:	f04f 0900 	mov.w	r9, #0
 8021ebe:	07eb      	lsls	r3, r5, #31
 8021ec0:	d50a      	bpl.n	8021ed8 <__pow5mult+0x84>
 8021ec2:	4639      	mov	r1, r7
 8021ec4:	4622      	mov	r2, r4
 8021ec6:	4630      	mov	r0, r6
 8021ec8:	f7ff ff1a 	bl	8021d00 <__multiply>
 8021ecc:	4639      	mov	r1, r7
 8021ece:	4680      	mov	r8, r0
 8021ed0:	4630      	mov	r0, r6
 8021ed2:	f7ff fe47 	bl	8021b64 <_Bfree>
 8021ed6:	4647      	mov	r7, r8
 8021ed8:	106d      	asrs	r5, r5, #1
 8021eda:	d00b      	beq.n	8021ef4 <__pow5mult+0xa0>
 8021edc:	6820      	ldr	r0, [r4, #0]
 8021ede:	b938      	cbnz	r0, 8021ef0 <__pow5mult+0x9c>
 8021ee0:	4622      	mov	r2, r4
 8021ee2:	4621      	mov	r1, r4
 8021ee4:	4630      	mov	r0, r6
 8021ee6:	f7ff ff0b 	bl	8021d00 <__multiply>
 8021eea:	6020      	str	r0, [r4, #0]
 8021eec:	f8c0 9000 	str.w	r9, [r0]
 8021ef0:	4604      	mov	r4, r0
 8021ef2:	e7e4      	b.n	8021ebe <__pow5mult+0x6a>
 8021ef4:	4638      	mov	r0, r7
 8021ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021efa:	bf00      	nop
 8021efc:	080234a0 	.word	0x080234a0
 8021f00:	0802326d 	.word	0x0802326d
 8021f04:	08023350 	.word	0x08023350

08021f08 <__lshift>:
 8021f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f0c:	460c      	mov	r4, r1
 8021f0e:	6849      	ldr	r1, [r1, #4]
 8021f10:	6923      	ldr	r3, [r4, #16]
 8021f12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021f16:	68a3      	ldr	r3, [r4, #8]
 8021f18:	4607      	mov	r7, r0
 8021f1a:	4691      	mov	r9, r2
 8021f1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021f20:	f108 0601 	add.w	r6, r8, #1
 8021f24:	42b3      	cmp	r3, r6
 8021f26:	db0b      	blt.n	8021f40 <__lshift+0x38>
 8021f28:	4638      	mov	r0, r7
 8021f2a:	f7ff fddb 	bl	8021ae4 <_Balloc>
 8021f2e:	4605      	mov	r5, r0
 8021f30:	b948      	cbnz	r0, 8021f46 <__lshift+0x3e>
 8021f32:	4602      	mov	r2, r0
 8021f34:	4b2a      	ldr	r3, [pc, #168]	; (8021fe0 <__lshift+0xd8>)
 8021f36:	482b      	ldr	r0, [pc, #172]	; (8021fe4 <__lshift+0xdc>)
 8021f38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021f3c:	f000 fc54 	bl	80227e8 <__assert_func>
 8021f40:	3101      	adds	r1, #1
 8021f42:	005b      	lsls	r3, r3, #1
 8021f44:	e7ee      	b.n	8021f24 <__lshift+0x1c>
 8021f46:	2300      	movs	r3, #0
 8021f48:	f100 0114 	add.w	r1, r0, #20
 8021f4c:	f100 0210 	add.w	r2, r0, #16
 8021f50:	4618      	mov	r0, r3
 8021f52:	4553      	cmp	r3, sl
 8021f54:	db37      	blt.n	8021fc6 <__lshift+0xbe>
 8021f56:	6920      	ldr	r0, [r4, #16]
 8021f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021f5c:	f104 0314 	add.w	r3, r4, #20
 8021f60:	f019 091f 	ands.w	r9, r9, #31
 8021f64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021f68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021f6c:	d02f      	beq.n	8021fce <__lshift+0xc6>
 8021f6e:	f1c9 0e20 	rsb	lr, r9, #32
 8021f72:	468a      	mov	sl, r1
 8021f74:	f04f 0c00 	mov.w	ip, #0
 8021f78:	681a      	ldr	r2, [r3, #0]
 8021f7a:	fa02 f209 	lsl.w	r2, r2, r9
 8021f7e:	ea42 020c 	orr.w	r2, r2, ip
 8021f82:	f84a 2b04 	str.w	r2, [sl], #4
 8021f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f8a:	4298      	cmp	r0, r3
 8021f8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021f90:	d8f2      	bhi.n	8021f78 <__lshift+0x70>
 8021f92:	1b03      	subs	r3, r0, r4
 8021f94:	3b15      	subs	r3, #21
 8021f96:	f023 0303 	bic.w	r3, r3, #3
 8021f9a:	3304      	adds	r3, #4
 8021f9c:	f104 0215 	add.w	r2, r4, #21
 8021fa0:	4290      	cmp	r0, r2
 8021fa2:	bf38      	it	cc
 8021fa4:	2304      	movcc	r3, #4
 8021fa6:	f841 c003 	str.w	ip, [r1, r3]
 8021faa:	f1bc 0f00 	cmp.w	ip, #0
 8021fae:	d001      	beq.n	8021fb4 <__lshift+0xac>
 8021fb0:	f108 0602 	add.w	r6, r8, #2
 8021fb4:	3e01      	subs	r6, #1
 8021fb6:	4638      	mov	r0, r7
 8021fb8:	612e      	str	r6, [r5, #16]
 8021fba:	4621      	mov	r1, r4
 8021fbc:	f7ff fdd2 	bl	8021b64 <_Bfree>
 8021fc0:	4628      	mov	r0, r5
 8021fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8021fca:	3301      	adds	r3, #1
 8021fcc:	e7c1      	b.n	8021f52 <__lshift+0x4a>
 8021fce:	3904      	subs	r1, #4
 8021fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8021fd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8021fd8:	4298      	cmp	r0, r3
 8021fda:	d8f9      	bhi.n	8021fd0 <__lshift+0xc8>
 8021fdc:	e7ea      	b.n	8021fb4 <__lshift+0xac>
 8021fde:	bf00      	nop
 8021fe0:	080232df 	.word	0x080232df
 8021fe4:	08023350 	.word	0x08023350

08021fe8 <__mcmp>:
 8021fe8:	b530      	push	{r4, r5, lr}
 8021fea:	6902      	ldr	r2, [r0, #16]
 8021fec:	690c      	ldr	r4, [r1, #16]
 8021fee:	1b12      	subs	r2, r2, r4
 8021ff0:	d10e      	bne.n	8022010 <__mcmp+0x28>
 8021ff2:	f100 0314 	add.w	r3, r0, #20
 8021ff6:	3114      	adds	r1, #20
 8021ff8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021ffc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022000:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022004:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022008:	42a5      	cmp	r5, r4
 802200a:	d003      	beq.n	8022014 <__mcmp+0x2c>
 802200c:	d305      	bcc.n	802201a <__mcmp+0x32>
 802200e:	2201      	movs	r2, #1
 8022010:	4610      	mov	r0, r2
 8022012:	bd30      	pop	{r4, r5, pc}
 8022014:	4283      	cmp	r3, r0
 8022016:	d3f3      	bcc.n	8022000 <__mcmp+0x18>
 8022018:	e7fa      	b.n	8022010 <__mcmp+0x28>
 802201a:	f04f 32ff 	mov.w	r2, #4294967295
 802201e:	e7f7      	b.n	8022010 <__mcmp+0x28>

08022020 <__mdiff>:
 8022020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022024:	460c      	mov	r4, r1
 8022026:	4606      	mov	r6, r0
 8022028:	4611      	mov	r1, r2
 802202a:	4620      	mov	r0, r4
 802202c:	4690      	mov	r8, r2
 802202e:	f7ff ffdb 	bl	8021fe8 <__mcmp>
 8022032:	1e05      	subs	r5, r0, #0
 8022034:	d110      	bne.n	8022058 <__mdiff+0x38>
 8022036:	4629      	mov	r1, r5
 8022038:	4630      	mov	r0, r6
 802203a:	f7ff fd53 	bl	8021ae4 <_Balloc>
 802203e:	b930      	cbnz	r0, 802204e <__mdiff+0x2e>
 8022040:	4b3a      	ldr	r3, [pc, #232]	; (802212c <__mdiff+0x10c>)
 8022042:	4602      	mov	r2, r0
 8022044:	f240 2132 	movw	r1, #562	; 0x232
 8022048:	4839      	ldr	r0, [pc, #228]	; (8022130 <__mdiff+0x110>)
 802204a:	f000 fbcd 	bl	80227e8 <__assert_func>
 802204e:	2301      	movs	r3, #1
 8022050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022058:	bfa4      	itt	ge
 802205a:	4643      	movge	r3, r8
 802205c:	46a0      	movge	r8, r4
 802205e:	4630      	mov	r0, r6
 8022060:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022064:	bfa6      	itte	ge
 8022066:	461c      	movge	r4, r3
 8022068:	2500      	movge	r5, #0
 802206a:	2501      	movlt	r5, #1
 802206c:	f7ff fd3a 	bl	8021ae4 <_Balloc>
 8022070:	b920      	cbnz	r0, 802207c <__mdiff+0x5c>
 8022072:	4b2e      	ldr	r3, [pc, #184]	; (802212c <__mdiff+0x10c>)
 8022074:	4602      	mov	r2, r0
 8022076:	f44f 7110 	mov.w	r1, #576	; 0x240
 802207a:	e7e5      	b.n	8022048 <__mdiff+0x28>
 802207c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022080:	6926      	ldr	r6, [r4, #16]
 8022082:	60c5      	str	r5, [r0, #12]
 8022084:	f104 0914 	add.w	r9, r4, #20
 8022088:	f108 0514 	add.w	r5, r8, #20
 802208c:	f100 0e14 	add.w	lr, r0, #20
 8022090:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022094:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022098:	f108 0210 	add.w	r2, r8, #16
 802209c:	46f2      	mov	sl, lr
 802209e:	2100      	movs	r1, #0
 80220a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80220a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80220a8:	fa1f f883 	uxth.w	r8, r3
 80220ac:	fa11 f18b 	uxtah	r1, r1, fp
 80220b0:	0c1b      	lsrs	r3, r3, #16
 80220b2:	eba1 0808 	sub.w	r8, r1, r8
 80220b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80220ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80220be:	fa1f f888 	uxth.w	r8, r8
 80220c2:	1419      	asrs	r1, r3, #16
 80220c4:	454e      	cmp	r6, r9
 80220c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80220ca:	f84a 3b04 	str.w	r3, [sl], #4
 80220ce:	d8e7      	bhi.n	80220a0 <__mdiff+0x80>
 80220d0:	1b33      	subs	r3, r6, r4
 80220d2:	3b15      	subs	r3, #21
 80220d4:	f023 0303 	bic.w	r3, r3, #3
 80220d8:	3304      	adds	r3, #4
 80220da:	3415      	adds	r4, #21
 80220dc:	42a6      	cmp	r6, r4
 80220de:	bf38      	it	cc
 80220e0:	2304      	movcc	r3, #4
 80220e2:	441d      	add	r5, r3
 80220e4:	4473      	add	r3, lr
 80220e6:	469e      	mov	lr, r3
 80220e8:	462e      	mov	r6, r5
 80220ea:	4566      	cmp	r6, ip
 80220ec:	d30e      	bcc.n	802210c <__mdiff+0xec>
 80220ee:	f10c 0203 	add.w	r2, ip, #3
 80220f2:	1b52      	subs	r2, r2, r5
 80220f4:	f022 0203 	bic.w	r2, r2, #3
 80220f8:	3d03      	subs	r5, #3
 80220fa:	45ac      	cmp	ip, r5
 80220fc:	bf38      	it	cc
 80220fe:	2200      	movcc	r2, #0
 8022100:	441a      	add	r2, r3
 8022102:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022106:	b17b      	cbz	r3, 8022128 <__mdiff+0x108>
 8022108:	6107      	str	r7, [r0, #16]
 802210a:	e7a3      	b.n	8022054 <__mdiff+0x34>
 802210c:	f856 8b04 	ldr.w	r8, [r6], #4
 8022110:	fa11 f288 	uxtah	r2, r1, r8
 8022114:	1414      	asrs	r4, r2, #16
 8022116:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802211a:	b292      	uxth	r2, r2
 802211c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022120:	f84e 2b04 	str.w	r2, [lr], #4
 8022124:	1421      	asrs	r1, r4, #16
 8022126:	e7e0      	b.n	80220ea <__mdiff+0xca>
 8022128:	3f01      	subs	r7, #1
 802212a:	e7ea      	b.n	8022102 <__mdiff+0xe2>
 802212c:	080232df 	.word	0x080232df
 8022130:	08023350 	.word	0x08023350

08022134 <__d2b>:
 8022134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022138:	4689      	mov	r9, r1
 802213a:	2101      	movs	r1, #1
 802213c:	ec57 6b10 	vmov	r6, r7, d0
 8022140:	4690      	mov	r8, r2
 8022142:	f7ff fccf 	bl	8021ae4 <_Balloc>
 8022146:	4604      	mov	r4, r0
 8022148:	b930      	cbnz	r0, 8022158 <__d2b+0x24>
 802214a:	4602      	mov	r2, r0
 802214c:	4b25      	ldr	r3, [pc, #148]	; (80221e4 <__d2b+0xb0>)
 802214e:	4826      	ldr	r0, [pc, #152]	; (80221e8 <__d2b+0xb4>)
 8022150:	f240 310a 	movw	r1, #778	; 0x30a
 8022154:	f000 fb48 	bl	80227e8 <__assert_func>
 8022158:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802215c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022160:	bb35      	cbnz	r5, 80221b0 <__d2b+0x7c>
 8022162:	2e00      	cmp	r6, #0
 8022164:	9301      	str	r3, [sp, #4]
 8022166:	d028      	beq.n	80221ba <__d2b+0x86>
 8022168:	4668      	mov	r0, sp
 802216a:	9600      	str	r6, [sp, #0]
 802216c:	f7ff fd82 	bl	8021c74 <__lo0bits>
 8022170:	9900      	ldr	r1, [sp, #0]
 8022172:	b300      	cbz	r0, 80221b6 <__d2b+0x82>
 8022174:	9a01      	ldr	r2, [sp, #4]
 8022176:	f1c0 0320 	rsb	r3, r0, #32
 802217a:	fa02 f303 	lsl.w	r3, r2, r3
 802217e:	430b      	orrs	r3, r1
 8022180:	40c2      	lsrs	r2, r0
 8022182:	6163      	str	r3, [r4, #20]
 8022184:	9201      	str	r2, [sp, #4]
 8022186:	9b01      	ldr	r3, [sp, #4]
 8022188:	61a3      	str	r3, [r4, #24]
 802218a:	2b00      	cmp	r3, #0
 802218c:	bf14      	ite	ne
 802218e:	2202      	movne	r2, #2
 8022190:	2201      	moveq	r2, #1
 8022192:	6122      	str	r2, [r4, #16]
 8022194:	b1d5      	cbz	r5, 80221cc <__d2b+0x98>
 8022196:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802219a:	4405      	add	r5, r0
 802219c:	f8c9 5000 	str.w	r5, [r9]
 80221a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80221a4:	f8c8 0000 	str.w	r0, [r8]
 80221a8:	4620      	mov	r0, r4
 80221aa:	b003      	add	sp, #12
 80221ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80221b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80221b4:	e7d5      	b.n	8022162 <__d2b+0x2e>
 80221b6:	6161      	str	r1, [r4, #20]
 80221b8:	e7e5      	b.n	8022186 <__d2b+0x52>
 80221ba:	a801      	add	r0, sp, #4
 80221bc:	f7ff fd5a 	bl	8021c74 <__lo0bits>
 80221c0:	9b01      	ldr	r3, [sp, #4]
 80221c2:	6163      	str	r3, [r4, #20]
 80221c4:	2201      	movs	r2, #1
 80221c6:	6122      	str	r2, [r4, #16]
 80221c8:	3020      	adds	r0, #32
 80221ca:	e7e3      	b.n	8022194 <__d2b+0x60>
 80221cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80221d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80221d4:	f8c9 0000 	str.w	r0, [r9]
 80221d8:	6918      	ldr	r0, [r3, #16]
 80221da:	f7ff fd2b 	bl	8021c34 <__hi0bits>
 80221de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80221e2:	e7df      	b.n	80221a4 <__d2b+0x70>
 80221e4:	080232df 	.word	0x080232df
 80221e8:	08023350 	.word	0x08023350

080221ec <_calloc_r>:
 80221ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80221ee:	fba1 2402 	umull	r2, r4, r1, r2
 80221f2:	b94c      	cbnz	r4, 8022208 <_calloc_r+0x1c>
 80221f4:	4611      	mov	r1, r2
 80221f6:	9201      	str	r2, [sp, #4]
 80221f8:	f000 f87a 	bl	80222f0 <_malloc_r>
 80221fc:	9a01      	ldr	r2, [sp, #4]
 80221fe:	4605      	mov	r5, r0
 8022200:	b930      	cbnz	r0, 8022210 <_calloc_r+0x24>
 8022202:	4628      	mov	r0, r5
 8022204:	b003      	add	sp, #12
 8022206:	bd30      	pop	{r4, r5, pc}
 8022208:	220c      	movs	r2, #12
 802220a:	6002      	str	r2, [r0, #0]
 802220c:	2500      	movs	r5, #0
 802220e:	e7f8      	b.n	8022202 <_calloc_r+0x16>
 8022210:	4621      	mov	r1, r4
 8022212:	f7fd fde9 	bl	801fde8 <memset>
 8022216:	e7f4      	b.n	8022202 <_calloc_r+0x16>

08022218 <_free_r>:
 8022218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802221a:	2900      	cmp	r1, #0
 802221c:	d044      	beq.n	80222a8 <_free_r+0x90>
 802221e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022222:	9001      	str	r0, [sp, #4]
 8022224:	2b00      	cmp	r3, #0
 8022226:	f1a1 0404 	sub.w	r4, r1, #4
 802222a:	bfb8      	it	lt
 802222c:	18e4      	addlt	r4, r4, r3
 802222e:	f000 fb61 	bl	80228f4 <__malloc_lock>
 8022232:	4a1e      	ldr	r2, [pc, #120]	; (80222ac <_free_r+0x94>)
 8022234:	9801      	ldr	r0, [sp, #4]
 8022236:	6813      	ldr	r3, [r2, #0]
 8022238:	b933      	cbnz	r3, 8022248 <_free_r+0x30>
 802223a:	6063      	str	r3, [r4, #4]
 802223c:	6014      	str	r4, [r2, #0]
 802223e:	b003      	add	sp, #12
 8022240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022244:	f000 bb5c 	b.w	8022900 <__malloc_unlock>
 8022248:	42a3      	cmp	r3, r4
 802224a:	d908      	bls.n	802225e <_free_r+0x46>
 802224c:	6825      	ldr	r5, [r4, #0]
 802224e:	1961      	adds	r1, r4, r5
 8022250:	428b      	cmp	r3, r1
 8022252:	bf01      	itttt	eq
 8022254:	6819      	ldreq	r1, [r3, #0]
 8022256:	685b      	ldreq	r3, [r3, #4]
 8022258:	1949      	addeq	r1, r1, r5
 802225a:	6021      	streq	r1, [r4, #0]
 802225c:	e7ed      	b.n	802223a <_free_r+0x22>
 802225e:	461a      	mov	r2, r3
 8022260:	685b      	ldr	r3, [r3, #4]
 8022262:	b10b      	cbz	r3, 8022268 <_free_r+0x50>
 8022264:	42a3      	cmp	r3, r4
 8022266:	d9fa      	bls.n	802225e <_free_r+0x46>
 8022268:	6811      	ldr	r1, [r2, #0]
 802226a:	1855      	adds	r5, r2, r1
 802226c:	42a5      	cmp	r5, r4
 802226e:	d10b      	bne.n	8022288 <_free_r+0x70>
 8022270:	6824      	ldr	r4, [r4, #0]
 8022272:	4421      	add	r1, r4
 8022274:	1854      	adds	r4, r2, r1
 8022276:	42a3      	cmp	r3, r4
 8022278:	6011      	str	r1, [r2, #0]
 802227a:	d1e0      	bne.n	802223e <_free_r+0x26>
 802227c:	681c      	ldr	r4, [r3, #0]
 802227e:	685b      	ldr	r3, [r3, #4]
 8022280:	6053      	str	r3, [r2, #4]
 8022282:	4421      	add	r1, r4
 8022284:	6011      	str	r1, [r2, #0]
 8022286:	e7da      	b.n	802223e <_free_r+0x26>
 8022288:	d902      	bls.n	8022290 <_free_r+0x78>
 802228a:	230c      	movs	r3, #12
 802228c:	6003      	str	r3, [r0, #0]
 802228e:	e7d6      	b.n	802223e <_free_r+0x26>
 8022290:	6825      	ldr	r5, [r4, #0]
 8022292:	1961      	adds	r1, r4, r5
 8022294:	428b      	cmp	r3, r1
 8022296:	bf04      	itt	eq
 8022298:	6819      	ldreq	r1, [r3, #0]
 802229a:	685b      	ldreq	r3, [r3, #4]
 802229c:	6063      	str	r3, [r4, #4]
 802229e:	bf04      	itt	eq
 80222a0:	1949      	addeq	r1, r1, r5
 80222a2:	6021      	streq	r1, [r4, #0]
 80222a4:	6054      	str	r4, [r2, #4]
 80222a6:	e7ca      	b.n	802223e <_free_r+0x26>
 80222a8:	b003      	add	sp, #12
 80222aa:	bd30      	pop	{r4, r5, pc}
 80222ac:	2000f7c8 	.word	0x2000f7c8

080222b0 <sbrk_aligned>:
 80222b0:	b570      	push	{r4, r5, r6, lr}
 80222b2:	4e0e      	ldr	r6, [pc, #56]	; (80222ec <sbrk_aligned+0x3c>)
 80222b4:	460c      	mov	r4, r1
 80222b6:	6831      	ldr	r1, [r6, #0]
 80222b8:	4605      	mov	r5, r0
 80222ba:	b911      	cbnz	r1, 80222c2 <sbrk_aligned+0x12>
 80222bc:	f000 fa2e 	bl	802271c <_sbrk_r>
 80222c0:	6030      	str	r0, [r6, #0]
 80222c2:	4621      	mov	r1, r4
 80222c4:	4628      	mov	r0, r5
 80222c6:	f000 fa29 	bl	802271c <_sbrk_r>
 80222ca:	1c43      	adds	r3, r0, #1
 80222cc:	d00a      	beq.n	80222e4 <sbrk_aligned+0x34>
 80222ce:	1cc4      	adds	r4, r0, #3
 80222d0:	f024 0403 	bic.w	r4, r4, #3
 80222d4:	42a0      	cmp	r0, r4
 80222d6:	d007      	beq.n	80222e8 <sbrk_aligned+0x38>
 80222d8:	1a21      	subs	r1, r4, r0
 80222da:	4628      	mov	r0, r5
 80222dc:	f000 fa1e 	bl	802271c <_sbrk_r>
 80222e0:	3001      	adds	r0, #1
 80222e2:	d101      	bne.n	80222e8 <sbrk_aligned+0x38>
 80222e4:	f04f 34ff 	mov.w	r4, #4294967295
 80222e8:	4620      	mov	r0, r4
 80222ea:	bd70      	pop	{r4, r5, r6, pc}
 80222ec:	2000f7cc 	.word	0x2000f7cc

080222f0 <_malloc_r>:
 80222f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222f4:	1ccd      	adds	r5, r1, #3
 80222f6:	f025 0503 	bic.w	r5, r5, #3
 80222fa:	3508      	adds	r5, #8
 80222fc:	2d0c      	cmp	r5, #12
 80222fe:	bf38      	it	cc
 8022300:	250c      	movcc	r5, #12
 8022302:	2d00      	cmp	r5, #0
 8022304:	4607      	mov	r7, r0
 8022306:	db01      	blt.n	802230c <_malloc_r+0x1c>
 8022308:	42a9      	cmp	r1, r5
 802230a:	d905      	bls.n	8022318 <_malloc_r+0x28>
 802230c:	230c      	movs	r3, #12
 802230e:	603b      	str	r3, [r7, #0]
 8022310:	2600      	movs	r6, #0
 8022312:	4630      	mov	r0, r6
 8022314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022318:	4e2e      	ldr	r6, [pc, #184]	; (80223d4 <_malloc_r+0xe4>)
 802231a:	f000 faeb 	bl	80228f4 <__malloc_lock>
 802231e:	6833      	ldr	r3, [r6, #0]
 8022320:	461c      	mov	r4, r3
 8022322:	bb34      	cbnz	r4, 8022372 <_malloc_r+0x82>
 8022324:	4629      	mov	r1, r5
 8022326:	4638      	mov	r0, r7
 8022328:	f7ff ffc2 	bl	80222b0 <sbrk_aligned>
 802232c:	1c43      	adds	r3, r0, #1
 802232e:	4604      	mov	r4, r0
 8022330:	d14d      	bne.n	80223ce <_malloc_r+0xde>
 8022332:	6834      	ldr	r4, [r6, #0]
 8022334:	4626      	mov	r6, r4
 8022336:	2e00      	cmp	r6, #0
 8022338:	d140      	bne.n	80223bc <_malloc_r+0xcc>
 802233a:	6823      	ldr	r3, [r4, #0]
 802233c:	4631      	mov	r1, r6
 802233e:	4638      	mov	r0, r7
 8022340:	eb04 0803 	add.w	r8, r4, r3
 8022344:	f000 f9ea 	bl	802271c <_sbrk_r>
 8022348:	4580      	cmp	r8, r0
 802234a:	d13a      	bne.n	80223c2 <_malloc_r+0xd2>
 802234c:	6821      	ldr	r1, [r4, #0]
 802234e:	3503      	adds	r5, #3
 8022350:	1a6d      	subs	r5, r5, r1
 8022352:	f025 0503 	bic.w	r5, r5, #3
 8022356:	3508      	adds	r5, #8
 8022358:	2d0c      	cmp	r5, #12
 802235a:	bf38      	it	cc
 802235c:	250c      	movcc	r5, #12
 802235e:	4629      	mov	r1, r5
 8022360:	4638      	mov	r0, r7
 8022362:	f7ff ffa5 	bl	80222b0 <sbrk_aligned>
 8022366:	3001      	adds	r0, #1
 8022368:	d02b      	beq.n	80223c2 <_malloc_r+0xd2>
 802236a:	6823      	ldr	r3, [r4, #0]
 802236c:	442b      	add	r3, r5
 802236e:	6023      	str	r3, [r4, #0]
 8022370:	e00e      	b.n	8022390 <_malloc_r+0xa0>
 8022372:	6822      	ldr	r2, [r4, #0]
 8022374:	1b52      	subs	r2, r2, r5
 8022376:	d41e      	bmi.n	80223b6 <_malloc_r+0xc6>
 8022378:	2a0b      	cmp	r2, #11
 802237a:	d916      	bls.n	80223aa <_malloc_r+0xba>
 802237c:	1961      	adds	r1, r4, r5
 802237e:	42a3      	cmp	r3, r4
 8022380:	6025      	str	r5, [r4, #0]
 8022382:	bf18      	it	ne
 8022384:	6059      	strne	r1, [r3, #4]
 8022386:	6863      	ldr	r3, [r4, #4]
 8022388:	bf08      	it	eq
 802238a:	6031      	streq	r1, [r6, #0]
 802238c:	5162      	str	r2, [r4, r5]
 802238e:	604b      	str	r3, [r1, #4]
 8022390:	4638      	mov	r0, r7
 8022392:	f104 060b 	add.w	r6, r4, #11
 8022396:	f000 fab3 	bl	8022900 <__malloc_unlock>
 802239a:	f026 0607 	bic.w	r6, r6, #7
 802239e:	1d23      	adds	r3, r4, #4
 80223a0:	1af2      	subs	r2, r6, r3
 80223a2:	d0b6      	beq.n	8022312 <_malloc_r+0x22>
 80223a4:	1b9b      	subs	r3, r3, r6
 80223a6:	50a3      	str	r3, [r4, r2]
 80223a8:	e7b3      	b.n	8022312 <_malloc_r+0x22>
 80223aa:	6862      	ldr	r2, [r4, #4]
 80223ac:	42a3      	cmp	r3, r4
 80223ae:	bf0c      	ite	eq
 80223b0:	6032      	streq	r2, [r6, #0]
 80223b2:	605a      	strne	r2, [r3, #4]
 80223b4:	e7ec      	b.n	8022390 <_malloc_r+0xa0>
 80223b6:	4623      	mov	r3, r4
 80223b8:	6864      	ldr	r4, [r4, #4]
 80223ba:	e7b2      	b.n	8022322 <_malloc_r+0x32>
 80223bc:	4634      	mov	r4, r6
 80223be:	6876      	ldr	r6, [r6, #4]
 80223c0:	e7b9      	b.n	8022336 <_malloc_r+0x46>
 80223c2:	230c      	movs	r3, #12
 80223c4:	603b      	str	r3, [r7, #0]
 80223c6:	4638      	mov	r0, r7
 80223c8:	f000 fa9a 	bl	8022900 <__malloc_unlock>
 80223cc:	e7a1      	b.n	8022312 <_malloc_r+0x22>
 80223ce:	6025      	str	r5, [r4, #0]
 80223d0:	e7de      	b.n	8022390 <_malloc_r+0xa0>
 80223d2:	bf00      	nop
 80223d4:	2000f7c8 	.word	0x2000f7c8

080223d8 <__sfputc_r>:
 80223d8:	6893      	ldr	r3, [r2, #8]
 80223da:	3b01      	subs	r3, #1
 80223dc:	2b00      	cmp	r3, #0
 80223de:	b410      	push	{r4}
 80223e0:	6093      	str	r3, [r2, #8]
 80223e2:	da08      	bge.n	80223f6 <__sfputc_r+0x1e>
 80223e4:	6994      	ldr	r4, [r2, #24]
 80223e6:	42a3      	cmp	r3, r4
 80223e8:	db01      	blt.n	80223ee <__sfputc_r+0x16>
 80223ea:	290a      	cmp	r1, #10
 80223ec:	d103      	bne.n	80223f6 <__sfputc_r+0x1e>
 80223ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80223f2:	f7fe ba0f 	b.w	8020814 <__swbuf_r>
 80223f6:	6813      	ldr	r3, [r2, #0]
 80223f8:	1c58      	adds	r0, r3, #1
 80223fa:	6010      	str	r0, [r2, #0]
 80223fc:	7019      	strb	r1, [r3, #0]
 80223fe:	4608      	mov	r0, r1
 8022400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022404:	4770      	bx	lr

08022406 <__sfputs_r>:
 8022406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022408:	4606      	mov	r6, r0
 802240a:	460f      	mov	r7, r1
 802240c:	4614      	mov	r4, r2
 802240e:	18d5      	adds	r5, r2, r3
 8022410:	42ac      	cmp	r4, r5
 8022412:	d101      	bne.n	8022418 <__sfputs_r+0x12>
 8022414:	2000      	movs	r0, #0
 8022416:	e007      	b.n	8022428 <__sfputs_r+0x22>
 8022418:	f814 1b01 	ldrb.w	r1, [r4], #1
 802241c:	463a      	mov	r2, r7
 802241e:	4630      	mov	r0, r6
 8022420:	f7ff ffda 	bl	80223d8 <__sfputc_r>
 8022424:	1c43      	adds	r3, r0, #1
 8022426:	d1f3      	bne.n	8022410 <__sfputs_r+0xa>
 8022428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802242c <_vfiprintf_r>:
 802242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022430:	460d      	mov	r5, r1
 8022432:	b09d      	sub	sp, #116	; 0x74
 8022434:	4614      	mov	r4, r2
 8022436:	4698      	mov	r8, r3
 8022438:	4606      	mov	r6, r0
 802243a:	b118      	cbz	r0, 8022444 <_vfiprintf_r+0x18>
 802243c:	6983      	ldr	r3, [r0, #24]
 802243e:	b90b      	cbnz	r3, 8022444 <_vfiprintf_r+0x18>
 8022440:	f7ff fa3e 	bl	80218c0 <__sinit>
 8022444:	4b89      	ldr	r3, [pc, #548]	; (802266c <_vfiprintf_r+0x240>)
 8022446:	429d      	cmp	r5, r3
 8022448:	d11b      	bne.n	8022482 <_vfiprintf_r+0x56>
 802244a:	6875      	ldr	r5, [r6, #4]
 802244c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802244e:	07d9      	lsls	r1, r3, #31
 8022450:	d405      	bmi.n	802245e <_vfiprintf_r+0x32>
 8022452:	89ab      	ldrh	r3, [r5, #12]
 8022454:	059a      	lsls	r2, r3, #22
 8022456:	d402      	bmi.n	802245e <_vfiprintf_r+0x32>
 8022458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802245a:	f7ff fad4 	bl	8021a06 <__retarget_lock_acquire_recursive>
 802245e:	89ab      	ldrh	r3, [r5, #12]
 8022460:	071b      	lsls	r3, r3, #28
 8022462:	d501      	bpl.n	8022468 <_vfiprintf_r+0x3c>
 8022464:	692b      	ldr	r3, [r5, #16]
 8022466:	b9eb      	cbnz	r3, 80224a4 <_vfiprintf_r+0x78>
 8022468:	4629      	mov	r1, r5
 802246a:	4630      	mov	r0, r6
 802246c:	f7fe fa24 	bl	80208b8 <__swsetup_r>
 8022470:	b1c0      	cbz	r0, 80224a4 <_vfiprintf_r+0x78>
 8022472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022474:	07dc      	lsls	r4, r3, #31
 8022476:	d50e      	bpl.n	8022496 <_vfiprintf_r+0x6a>
 8022478:	f04f 30ff 	mov.w	r0, #4294967295
 802247c:	b01d      	add	sp, #116	; 0x74
 802247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022482:	4b7b      	ldr	r3, [pc, #492]	; (8022670 <_vfiprintf_r+0x244>)
 8022484:	429d      	cmp	r5, r3
 8022486:	d101      	bne.n	802248c <_vfiprintf_r+0x60>
 8022488:	68b5      	ldr	r5, [r6, #8]
 802248a:	e7df      	b.n	802244c <_vfiprintf_r+0x20>
 802248c:	4b79      	ldr	r3, [pc, #484]	; (8022674 <_vfiprintf_r+0x248>)
 802248e:	429d      	cmp	r5, r3
 8022490:	bf08      	it	eq
 8022492:	68f5      	ldreq	r5, [r6, #12]
 8022494:	e7da      	b.n	802244c <_vfiprintf_r+0x20>
 8022496:	89ab      	ldrh	r3, [r5, #12]
 8022498:	0598      	lsls	r0, r3, #22
 802249a:	d4ed      	bmi.n	8022478 <_vfiprintf_r+0x4c>
 802249c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802249e:	f7ff fab3 	bl	8021a08 <__retarget_lock_release_recursive>
 80224a2:	e7e9      	b.n	8022478 <_vfiprintf_r+0x4c>
 80224a4:	2300      	movs	r3, #0
 80224a6:	9309      	str	r3, [sp, #36]	; 0x24
 80224a8:	2320      	movs	r3, #32
 80224aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80224ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80224b2:	2330      	movs	r3, #48	; 0x30
 80224b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022678 <_vfiprintf_r+0x24c>
 80224b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80224bc:	f04f 0901 	mov.w	r9, #1
 80224c0:	4623      	mov	r3, r4
 80224c2:	469a      	mov	sl, r3
 80224c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80224c8:	b10a      	cbz	r2, 80224ce <_vfiprintf_r+0xa2>
 80224ca:	2a25      	cmp	r2, #37	; 0x25
 80224cc:	d1f9      	bne.n	80224c2 <_vfiprintf_r+0x96>
 80224ce:	ebba 0b04 	subs.w	fp, sl, r4
 80224d2:	d00b      	beq.n	80224ec <_vfiprintf_r+0xc0>
 80224d4:	465b      	mov	r3, fp
 80224d6:	4622      	mov	r2, r4
 80224d8:	4629      	mov	r1, r5
 80224da:	4630      	mov	r0, r6
 80224dc:	f7ff ff93 	bl	8022406 <__sfputs_r>
 80224e0:	3001      	adds	r0, #1
 80224e2:	f000 80aa 	beq.w	802263a <_vfiprintf_r+0x20e>
 80224e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80224e8:	445a      	add	r2, fp
 80224ea:	9209      	str	r2, [sp, #36]	; 0x24
 80224ec:	f89a 3000 	ldrb.w	r3, [sl]
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	f000 80a2 	beq.w	802263a <_vfiprintf_r+0x20e>
 80224f6:	2300      	movs	r3, #0
 80224f8:	f04f 32ff 	mov.w	r2, #4294967295
 80224fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022500:	f10a 0a01 	add.w	sl, sl, #1
 8022504:	9304      	str	r3, [sp, #16]
 8022506:	9307      	str	r3, [sp, #28]
 8022508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802250c:	931a      	str	r3, [sp, #104]	; 0x68
 802250e:	4654      	mov	r4, sl
 8022510:	2205      	movs	r2, #5
 8022512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022516:	4858      	ldr	r0, [pc, #352]	; (8022678 <_vfiprintf_r+0x24c>)
 8022518:	f7dd fe8a 	bl	8000230 <memchr>
 802251c:	9a04      	ldr	r2, [sp, #16]
 802251e:	b9d8      	cbnz	r0, 8022558 <_vfiprintf_r+0x12c>
 8022520:	06d1      	lsls	r1, r2, #27
 8022522:	bf44      	itt	mi
 8022524:	2320      	movmi	r3, #32
 8022526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802252a:	0713      	lsls	r3, r2, #28
 802252c:	bf44      	itt	mi
 802252e:	232b      	movmi	r3, #43	; 0x2b
 8022530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022534:	f89a 3000 	ldrb.w	r3, [sl]
 8022538:	2b2a      	cmp	r3, #42	; 0x2a
 802253a:	d015      	beq.n	8022568 <_vfiprintf_r+0x13c>
 802253c:	9a07      	ldr	r2, [sp, #28]
 802253e:	4654      	mov	r4, sl
 8022540:	2000      	movs	r0, #0
 8022542:	f04f 0c0a 	mov.w	ip, #10
 8022546:	4621      	mov	r1, r4
 8022548:	f811 3b01 	ldrb.w	r3, [r1], #1
 802254c:	3b30      	subs	r3, #48	; 0x30
 802254e:	2b09      	cmp	r3, #9
 8022550:	d94e      	bls.n	80225f0 <_vfiprintf_r+0x1c4>
 8022552:	b1b0      	cbz	r0, 8022582 <_vfiprintf_r+0x156>
 8022554:	9207      	str	r2, [sp, #28]
 8022556:	e014      	b.n	8022582 <_vfiprintf_r+0x156>
 8022558:	eba0 0308 	sub.w	r3, r0, r8
 802255c:	fa09 f303 	lsl.w	r3, r9, r3
 8022560:	4313      	orrs	r3, r2
 8022562:	9304      	str	r3, [sp, #16]
 8022564:	46a2      	mov	sl, r4
 8022566:	e7d2      	b.n	802250e <_vfiprintf_r+0xe2>
 8022568:	9b03      	ldr	r3, [sp, #12]
 802256a:	1d19      	adds	r1, r3, #4
 802256c:	681b      	ldr	r3, [r3, #0]
 802256e:	9103      	str	r1, [sp, #12]
 8022570:	2b00      	cmp	r3, #0
 8022572:	bfbb      	ittet	lt
 8022574:	425b      	neglt	r3, r3
 8022576:	f042 0202 	orrlt.w	r2, r2, #2
 802257a:	9307      	strge	r3, [sp, #28]
 802257c:	9307      	strlt	r3, [sp, #28]
 802257e:	bfb8      	it	lt
 8022580:	9204      	strlt	r2, [sp, #16]
 8022582:	7823      	ldrb	r3, [r4, #0]
 8022584:	2b2e      	cmp	r3, #46	; 0x2e
 8022586:	d10c      	bne.n	80225a2 <_vfiprintf_r+0x176>
 8022588:	7863      	ldrb	r3, [r4, #1]
 802258a:	2b2a      	cmp	r3, #42	; 0x2a
 802258c:	d135      	bne.n	80225fa <_vfiprintf_r+0x1ce>
 802258e:	9b03      	ldr	r3, [sp, #12]
 8022590:	1d1a      	adds	r2, r3, #4
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	9203      	str	r2, [sp, #12]
 8022596:	2b00      	cmp	r3, #0
 8022598:	bfb8      	it	lt
 802259a:	f04f 33ff 	movlt.w	r3, #4294967295
 802259e:	3402      	adds	r4, #2
 80225a0:	9305      	str	r3, [sp, #20]
 80225a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022688 <_vfiprintf_r+0x25c>
 80225a6:	7821      	ldrb	r1, [r4, #0]
 80225a8:	2203      	movs	r2, #3
 80225aa:	4650      	mov	r0, sl
 80225ac:	f7dd fe40 	bl	8000230 <memchr>
 80225b0:	b140      	cbz	r0, 80225c4 <_vfiprintf_r+0x198>
 80225b2:	2340      	movs	r3, #64	; 0x40
 80225b4:	eba0 000a 	sub.w	r0, r0, sl
 80225b8:	fa03 f000 	lsl.w	r0, r3, r0
 80225bc:	9b04      	ldr	r3, [sp, #16]
 80225be:	4303      	orrs	r3, r0
 80225c0:	3401      	adds	r4, #1
 80225c2:	9304      	str	r3, [sp, #16]
 80225c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80225c8:	482c      	ldr	r0, [pc, #176]	; (802267c <_vfiprintf_r+0x250>)
 80225ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80225ce:	2206      	movs	r2, #6
 80225d0:	f7dd fe2e 	bl	8000230 <memchr>
 80225d4:	2800      	cmp	r0, #0
 80225d6:	d03f      	beq.n	8022658 <_vfiprintf_r+0x22c>
 80225d8:	4b29      	ldr	r3, [pc, #164]	; (8022680 <_vfiprintf_r+0x254>)
 80225da:	bb1b      	cbnz	r3, 8022624 <_vfiprintf_r+0x1f8>
 80225dc:	9b03      	ldr	r3, [sp, #12]
 80225de:	3307      	adds	r3, #7
 80225e0:	f023 0307 	bic.w	r3, r3, #7
 80225e4:	3308      	adds	r3, #8
 80225e6:	9303      	str	r3, [sp, #12]
 80225e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225ea:	443b      	add	r3, r7
 80225ec:	9309      	str	r3, [sp, #36]	; 0x24
 80225ee:	e767      	b.n	80224c0 <_vfiprintf_r+0x94>
 80225f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80225f4:	460c      	mov	r4, r1
 80225f6:	2001      	movs	r0, #1
 80225f8:	e7a5      	b.n	8022546 <_vfiprintf_r+0x11a>
 80225fa:	2300      	movs	r3, #0
 80225fc:	3401      	adds	r4, #1
 80225fe:	9305      	str	r3, [sp, #20]
 8022600:	4619      	mov	r1, r3
 8022602:	f04f 0c0a 	mov.w	ip, #10
 8022606:	4620      	mov	r0, r4
 8022608:	f810 2b01 	ldrb.w	r2, [r0], #1
 802260c:	3a30      	subs	r2, #48	; 0x30
 802260e:	2a09      	cmp	r2, #9
 8022610:	d903      	bls.n	802261a <_vfiprintf_r+0x1ee>
 8022612:	2b00      	cmp	r3, #0
 8022614:	d0c5      	beq.n	80225a2 <_vfiprintf_r+0x176>
 8022616:	9105      	str	r1, [sp, #20]
 8022618:	e7c3      	b.n	80225a2 <_vfiprintf_r+0x176>
 802261a:	fb0c 2101 	mla	r1, ip, r1, r2
 802261e:	4604      	mov	r4, r0
 8022620:	2301      	movs	r3, #1
 8022622:	e7f0      	b.n	8022606 <_vfiprintf_r+0x1da>
 8022624:	ab03      	add	r3, sp, #12
 8022626:	9300      	str	r3, [sp, #0]
 8022628:	462a      	mov	r2, r5
 802262a:	4b16      	ldr	r3, [pc, #88]	; (8022684 <_vfiprintf_r+0x258>)
 802262c:	a904      	add	r1, sp, #16
 802262e:	4630      	mov	r0, r6
 8022630:	f7fd fc82 	bl	801ff38 <_printf_float>
 8022634:	4607      	mov	r7, r0
 8022636:	1c78      	adds	r0, r7, #1
 8022638:	d1d6      	bne.n	80225e8 <_vfiprintf_r+0x1bc>
 802263a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802263c:	07d9      	lsls	r1, r3, #31
 802263e:	d405      	bmi.n	802264c <_vfiprintf_r+0x220>
 8022640:	89ab      	ldrh	r3, [r5, #12]
 8022642:	059a      	lsls	r2, r3, #22
 8022644:	d402      	bmi.n	802264c <_vfiprintf_r+0x220>
 8022646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022648:	f7ff f9de 	bl	8021a08 <__retarget_lock_release_recursive>
 802264c:	89ab      	ldrh	r3, [r5, #12]
 802264e:	065b      	lsls	r3, r3, #25
 8022650:	f53f af12 	bmi.w	8022478 <_vfiprintf_r+0x4c>
 8022654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022656:	e711      	b.n	802247c <_vfiprintf_r+0x50>
 8022658:	ab03      	add	r3, sp, #12
 802265a:	9300      	str	r3, [sp, #0]
 802265c:	462a      	mov	r2, r5
 802265e:	4b09      	ldr	r3, [pc, #36]	; (8022684 <_vfiprintf_r+0x258>)
 8022660:	a904      	add	r1, sp, #16
 8022662:	4630      	mov	r0, r6
 8022664:	f7fd ff0c 	bl	8020480 <_printf_i>
 8022668:	e7e4      	b.n	8022634 <_vfiprintf_r+0x208>
 802266a:	bf00      	nop
 802266c:	08023310 	.word	0x08023310
 8022670:	08023330 	.word	0x08023330
 8022674:	080232f0 	.word	0x080232f0
 8022678:	080234ac 	.word	0x080234ac
 802267c:	080234b6 	.word	0x080234b6
 8022680:	0801ff39 	.word	0x0801ff39
 8022684:	08022407 	.word	0x08022407
 8022688:	080234b2 	.word	0x080234b2

0802268c <_putc_r>:
 802268c:	b570      	push	{r4, r5, r6, lr}
 802268e:	460d      	mov	r5, r1
 8022690:	4614      	mov	r4, r2
 8022692:	4606      	mov	r6, r0
 8022694:	b118      	cbz	r0, 802269e <_putc_r+0x12>
 8022696:	6983      	ldr	r3, [r0, #24]
 8022698:	b90b      	cbnz	r3, 802269e <_putc_r+0x12>
 802269a:	f7ff f911 	bl	80218c0 <__sinit>
 802269e:	4b1c      	ldr	r3, [pc, #112]	; (8022710 <_putc_r+0x84>)
 80226a0:	429c      	cmp	r4, r3
 80226a2:	d124      	bne.n	80226ee <_putc_r+0x62>
 80226a4:	6874      	ldr	r4, [r6, #4]
 80226a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80226a8:	07d8      	lsls	r0, r3, #31
 80226aa:	d405      	bmi.n	80226b8 <_putc_r+0x2c>
 80226ac:	89a3      	ldrh	r3, [r4, #12]
 80226ae:	0599      	lsls	r1, r3, #22
 80226b0:	d402      	bmi.n	80226b8 <_putc_r+0x2c>
 80226b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226b4:	f7ff f9a7 	bl	8021a06 <__retarget_lock_acquire_recursive>
 80226b8:	68a3      	ldr	r3, [r4, #8]
 80226ba:	3b01      	subs	r3, #1
 80226bc:	2b00      	cmp	r3, #0
 80226be:	60a3      	str	r3, [r4, #8]
 80226c0:	da05      	bge.n	80226ce <_putc_r+0x42>
 80226c2:	69a2      	ldr	r2, [r4, #24]
 80226c4:	4293      	cmp	r3, r2
 80226c6:	db1c      	blt.n	8022702 <_putc_r+0x76>
 80226c8:	b2eb      	uxtb	r3, r5
 80226ca:	2b0a      	cmp	r3, #10
 80226cc:	d019      	beq.n	8022702 <_putc_r+0x76>
 80226ce:	6823      	ldr	r3, [r4, #0]
 80226d0:	1c5a      	adds	r2, r3, #1
 80226d2:	6022      	str	r2, [r4, #0]
 80226d4:	701d      	strb	r5, [r3, #0]
 80226d6:	b2ed      	uxtb	r5, r5
 80226d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80226da:	07da      	lsls	r2, r3, #31
 80226dc:	d405      	bmi.n	80226ea <_putc_r+0x5e>
 80226de:	89a3      	ldrh	r3, [r4, #12]
 80226e0:	059b      	lsls	r3, r3, #22
 80226e2:	d402      	bmi.n	80226ea <_putc_r+0x5e>
 80226e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226e6:	f7ff f98f 	bl	8021a08 <__retarget_lock_release_recursive>
 80226ea:	4628      	mov	r0, r5
 80226ec:	bd70      	pop	{r4, r5, r6, pc}
 80226ee:	4b09      	ldr	r3, [pc, #36]	; (8022714 <_putc_r+0x88>)
 80226f0:	429c      	cmp	r4, r3
 80226f2:	d101      	bne.n	80226f8 <_putc_r+0x6c>
 80226f4:	68b4      	ldr	r4, [r6, #8]
 80226f6:	e7d6      	b.n	80226a6 <_putc_r+0x1a>
 80226f8:	4b07      	ldr	r3, [pc, #28]	; (8022718 <_putc_r+0x8c>)
 80226fa:	429c      	cmp	r4, r3
 80226fc:	bf08      	it	eq
 80226fe:	68f4      	ldreq	r4, [r6, #12]
 8022700:	e7d1      	b.n	80226a6 <_putc_r+0x1a>
 8022702:	4629      	mov	r1, r5
 8022704:	4622      	mov	r2, r4
 8022706:	4630      	mov	r0, r6
 8022708:	f7fe f884 	bl	8020814 <__swbuf_r>
 802270c:	4605      	mov	r5, r0
 802270e:	e7e3      	b.n	80226d8 <_putc_r+0x4c>
 8022710:	08023310 	.word	0x08023310
 8022714:	08023330 	.word	0x08023330
 8022718:	080232f0 	.word	0x080232f0

0802271c <_sbrk_r>:
 802271c:	b538      	push	{r3, r4, r5, lr}
 802271e:	4d06      	ldr	r5, [pc, #24]	; (8022738 <_sbrk_r+0x1c>)
 8022720:	2300      	movs	r3, #0
 8022722:	4604      	mov	r4, r0
 8022724:	4608      	mov	r0, r1
 8022726:	602b      	str	r3, [r5, #0]
 8022728:	f7f4 fe5e 	bl	80173e8 <_sbrk>
 802272c:	1c43      	adds	r3, r0, #1
 802272e:	d102      	bne.n	8022736 <_sbrk_r+0x1a>
 8022730:	682b      	ldr	r3, [r5, #0]
 8022732:	b103      	cbz	r3, 8022736 <_sbrk_r+0x1a>
 8022734:	6023      	str	r3, [r4, #0]
 8022736:	bd38      	pop	{r3, r4, r5, pc}
 8022738:	2000f7d0 	.word	0x2000f7d0

0802273c <__sread>:
 802273c:	b510      	push	{r4, lr}
 802273e:	460c      	mov	r4, r1
 8022740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022744:	f000 f8e2 	bl	802290c <_read_r>
 8022748:	2800      	cmp	r0, #0
 802274a:	bfab      	itete	ge
 802274c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802274e:	89a3      	ldrhlt	r3, [r4, #12]
 8022750:	181b      	addge	r3, r3, r0
 8022752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022756:	bfac      	ite	ge
 8022758:	6563      	strge	r3, [r4, #84]	; 0x54
 802275a:	81a3      	strhlt	r3, [r4, #12]
 802275c:	bd10      	pop	{r4, pc}

0802275e <__swrite>:
 802275e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022762:	461f      	mov	r7, r3
 8022764:	898b      	ldrh	r3, [r1, #12]
 8022766:	05db      	lsls	r3, r3, #23
 8022768:	4605      	mov	r5, r0
 802276a:	460c      	mov	r4, r1
 802276c:	4616      	mov	r6, r2
 802276e:	d505      	bpl.n	802277c <__swrite+0x1e>
 8022770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022774:	2302      	movs	r3, #2
 8022776:	2200      	movs	r2, #0
 8022778:	f000 f898 	bl	80228ac <_lseek_r>
 802277c:	89a3      	ldrh	r3, [r4, #12]
 802277e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022786:	81a3      	strh	r3, [r4, #12]
 8022788:	4632      	mov	r2, r6
 802278a:	463b      	mov	r3, r7
 802278c:	4628      	mov	r0, r5
 802278e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022792:	f000 b817 	b.w	80227c4 <_write_r>

08022796 <__sseek>:
 8022796:	b510      	push	{r4, lr}
 8022798:	460c      	mov	r4, r1
 802279a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802279e:	f000 f885 	bl	80228ac <_lseek_r>
 80227a2:	1c43      	adds	r3, r0, #1
 80227a4:	89a3      	ldrh	r3, [r4, #12]
 80227a6:	bf15      	itete	ne
 80227a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80227aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80227ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80227b2:	81a3      	strheq	r3, [r4, #12]
 80227b4:	bf18      	it	ne
 80227b6:	81a3      	strhne	r3, [r4, #12]
 80227b8:	bd10      	pop	{r4, pc}

080227ba <__sclose>:
 80227ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227be:	f000 b831 	b.w	8022824 <_close_r>
	...

080227c4 <_write_r>:
 80227c4:	b538      	push	{r3, r4, r5, lr}
 80227c6:	4d07      	ldr	r5, [pc, #28]	; (80227e4 <_write_r+0x20>)
 80227c8:	4604      	mov	r4, r0
 80227ca:	4608      	mov	r0, r1
 80227cc:	4611      	mov	r1, r2
 80227ce:	2200      	movs	r2, #0
 80227d0:	602a      	str	r2, [r5, #0]
 80227d2:	461a      	mov	r2, r3
 80227d4:	f7f4 fdb4 	bl	8017340 <_write>
 80227d8:	1c43      	adds	r3, r0, #1
 80227da:	d102      	bne.n	80227e2 <_write_r+0x1e>
 80227dc:	682b      	ldr	r3, [r5, #0]
 80227de:	b103      	cbz	r3, 80227e2 <_write_r+0x1e>
 80227e0:	6023      	str	r3, [r4, #0]
 80227e2:	bd38      	pop	{r3, r4, r5, pc}
 80227e4:	2000f7d0 	.word	0x2000f7d0

080227e8 <__assert_func>:
 80227e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80227ea:	4614      	mov	r4, r2
 80227ec:	461a      	mov	r2, r3
 80227ee:	4b09      	ldr	r3, [pc, #36]	; (8022814 <__assert_func+0x2c>)
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	4605      	mov	r5, r0
 80227f4:	68d8      	ldr	r0, [r3, #12]
 80227f6:	b14c      	cbz	r4, 802280c <__assert_func+0x24>
 80227f8:	4b07      	ldr	r3, [pc, #28]	; (8022818 <__assert_func+0x30>)
 80227fa:	9100      	str	r1, [sp, #0]
 80227fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022800:	4906      	ldr	r1, [pc, #24]	; (802281c <__assert_func+0x34>)
 8022802:	462b      	mov	r3, r5
 8022804:	f000 f81e 	bl	8022844 <fiprintf>
 8022808:	f000 f89f 	bl	802294a <abort>
 802280c:	4b04      	ldr	r3, [pc, #16]	; (8022820 <__assert_func+0x38>)
 802280e:	461c      	mov	r4, r3
 8022810:	e7f3      	b.n	80227fa <__assert_func+0x12>
 8022812:	bf00      	nop
 8022814:	2000002c 	.word	0x2000002c
 8022818:	080234bd 	.word	0x080234bd
 802281c:	080234ca 	.word	0x080234ca
 8022820:	080234f8 	.word	0x080234f8

08022824 <_close_r>:
 8022824:	b538      	push	{r3, r4, r5, lr}
 8022826:	4d06      	ldr	r5, [pc, #24]	; (8022840 <_close_r+0x1c>)
 8022828:	2300      	movs	r3, #0
 802282a:	4604      	mov	r4, r0
 802282c:	4608      	mov	r0, r1
 802282e:	602b      	str	r3, [r5, #0]
 8022830:	f7f4 fda6 	bl	8017380 <_close>
 8022834:	1c43      	adds	r3, r0, #1
 8022836:	d102      	bne.n	802283e <_close_r+0x1a>
 8022838:	682b      	ldr	r3, [r5, #0]
 802283a:	b103      	cbz	r3, 802283e <_close_r+0x1a>
 802283c:	6023      	str	r3, [r4, #0]
 802283e:	bd38      	pop	{r3, r4, r5, pc}
 8022840:	2000f7d0 	.word	0x2000f7d0

08022844 <fiprintf>:
 8022844:	b40e      	push	{r1, r2, r3}
 8022846:	b503      	push	{r0, r1, lr}
 8022848:	4601      	mov	r1, r0
 802284a:	ab03      	add	r3, sp, #12
 802284c:	4805      	ldr	r0, [pc, #20]	; (8022864 <fiprintf+0x20>)
 802284e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022852:	6800      	ldr	r0, [r0, #0]
 8022854:	9301      	str	r3, [sp, #4]
 8022856:	f7ff fde9 	bl	802242c <_vfiprintf_r>
 802285a:	b002      	add	sp, #8
 802285c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022860:	b003      	add	sp, #12
 8022862:	4770      	bx	lr
 8022864:	2000002c 	.word	0x2000002c

08022868 <_fstat_r>:
 8022868:	b538      	push	{r3, r4, r5, lr}
 802286a:	4d07      	ldr	r5, [pc, #28]	; (8022888 <_fstat_r+0x20>)
 802286c:	2300      	movs	r3, #0
 802286e:	4604      	mov	r4, r0
 8022870:	4608      	mov	r0, r1
 8022872:	4611      	mov	r1, r2
 8022874:	602b      	str	r3, [r5, #0]
 8022876:	f7f4 fd8f 	bl	8017398 <_fstat>
 802287a:	1c43      	adds	r3, r0, #1
 802287c:	d102      	bne.n	8022884 <_fstat_r+0x1c>
 802287e:	682b      	ldr	r3, [r5, #0]
 8022880:	b103      	cbz	r3, 8022884 <_fstat_r+0x1c>
 8022882:	6023      	str	r3, [r4, #0]
 8022884:	bd38      	pop	{r3, r4, r5, pc}
 8022886:	bf00      	nop
 8022888:	2000f7d0 	.word	0x2000f7d0

0802288c <_isatty_r>:
 802288c:	b538      	push	{r3, r4, r5, lr}
 802288e:	4d06      	ldr	r5, [pc, #24]	; (80228a8 <_isatty_r+0x1c>)
 8022890:	2300      	movs	r3, #0
 8022892:	4604      	mov	r4, r0
 8022894:	4608      	mov	r0, r1
 8022896:	602b      	str	r3, [r5, #0]
 8022898:	f7f4 fd8e 	bl	80173b8 <_isatty>
 802289c:	1c43      	adds	r3, r0, #1
 802289e:	d102      	bne.n	80228a6 <_isatty_r+0x1a>
 80228a0:	682b      	ldr	r3, [r5, #0]
 80228a2:	b103      	cbz	r3, 80228a6 <_isatty_r+0x1a>
 80228a4:	6023      	str	r3, [r4, #0]
 80228a6:	bd38      	pop	{r3, r4, r5, pc}
 80228a8:	2000f7d0 	.word	0x2000f7d0

080228ac <_lseek_r>:
 80228ac:	b538      	push	{r3, r4, r5, lr}
 80228ae:	4d07      	ldr	r5, [pc, #28]	; (80228cc <_lseek_r+0x20>)
 80228b0:	4604      	mov	r4, r0
 80228b2:	4608      	mov	r0, r1
 80228b4:	4611      	mov	r1, r2
 80228b6:	2200      	movs	r2, #0
 80228b8:	602a      	str	r2, [r5, #0]
 80228ba:	461a      	mov	r2, r3
 80228bc:	f7f4 fd87 	bl	80173ce <_lseek>
 80228c0:	1c43      	adds	r3, r0, #1
 80228c2:	d102      	bne.n	80228ca <_lseek_r+0x1e>
 80228c4:	682b      	ldr	r3, [r5, #0]
 80228c6:	b103      	cbz	r3, 80228ca <_lseek_r+0x1e>
 80228c8:	6023      	str	r3, [r4, #0]
 80228ca:	bd38      	pop	{r3, r4, r5, pc}
 80228cc:	2000f7d0 	.word	0x2000f7d0

080228d0 <__ascii_mbtowc>:
 80228d0:	b082      	sub	sp, #8
 80228d2:	b901      	cbnz	r1, 80228d6 <__ascii_mbtowc+0x6>
 80228d4:	a901      	add	r1, sp, #4
 80228d6:	b142      	cbz	r2, 80228ea <__ascii_mbtowc+0x1a>
 80228d8:	b14b      	cbz	r3, 80228ee <__ascii_mbtowc+0x1e>
 80228da:	7813      	ldrb	r3, [r2, #0]
 80228dc:	600b      	str	r3, [r1, #0]
 80228de:	7812      	ldrb	r2, [r2, #0]
 80228e0:	1e10      	subs	r0, r2, #0
 80228e2:	bf18      	it	ne
 80228e4:	2001      	movne	r0, #1
 80228e6:	b002      	add	sp, #8
 80228e8:	4770      	bx	lr
 80228ea:	4610      	mov	r0, r2
 80228ec:	e7fb      	b.n	80228e6 <__ascii_mbtowc+0x16>
 80228ee:	f06f 0001 	mvn.w	r0, #1
 80228f2:	e7f8      	b.n	80228e6 <__ascii_mbtowc+0x16>

080228f4 <__malloc_lock>:
 80228f4:	4801      	ldr	r0, [pc, #4]	; (80228fc <__malloc_lock+0x8>)
 80228f6:	f7ff b886 	b.w	8021a06 <__retarget_lock_acquire_recursive>
 80228fa:	bf00      	nop
 80228fc:	2000f7c4 	.word	0x2000f7c4

08022900 <__malloc_unlock>:
 8022900:	4801      	ldr	r0, [pc, #4]	; (8022908 <__malloc_unlock+0x8>)
 8022902:	f7ff b881 	b.w	8021a08 <__retarget_lock_release_recursive>
 8022906:	bf00      	nop
 8022908:	2000f7c4 	.word	0x2000f7c4

0802290c <_read_r>:
 802290c:	b538      	push	{r3, r4, r5, lr}
 802290e:	4d07      	ldr	r5, [pc, #28]	; (802292c <_read_r+0x20>)
 8022910:	4604      	mov	r4, r0
 8022912:	4608      	mov	r0, r1
 8022914:	4611      	mov	r1, r2
 8022916:	2200      	movs	r2, #0
 8022918:	602a      	str	r2, [r5, #0]
 802291a:	461a      	mov	r2, r3
 802291c:	f7f4 fcf2 	bl	8017304 <_read>
 8022920:	1c43      	adds	r3, r0, #1
 8022922:	d102      	bne.n	802292a <_read_r+0x1e>
 8022924:	682b      	ldr	r3, [r5, #0]
 8022926:	b103      	cbz	r3, 802292a <_read_r+0x1e>
 8022928:	6023      	str	r3, [r4, #0]
 802292a:	bd38      	pop	{r3, r4, r5, pc}
 802292c:	2000f7d0 	.word	0x2000f7d0

08022930 <__ascii_wctomb>:
 8022930:	b149      	cbz	r1, 8022946 <__ascii_wctomb+0x16>
 8022932:	2aff      	cmp	r2, #255	; 0xff
 8022934:	bf85      	ittet	hi
 8022936:	238a      	movhi	r3, #138	; 0x8a
 8022938:	6003      	strhi	r3, [r0, #0]
 802293a:	700a      	strbls	r2, [r1, #0]
 802293c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022940:	bf98      	it	ls
 8022942:	2001      	movls	r0, #1
 8022944:	4770      	bx	lr
 8022946:	4608      	mov	r0, r1
 8022948:	4770      	bx	lr

0802294a <abort>:
 802294a:	b508      	push	{r3, lr}
 802294c:	2006      	movs	r0, #6
 802294e:	f000 f82b 	bl	80229a8 <raise>
 8022952:	2001      	movs	r0, #1
 8022954:	f7f4 fccc 	bl	80172f0 <_exit>

08022958 <_raise_r>:
 8022958:	291f      	cmp	r1, #31
 802295a:	b538      	push	{r3, r4, r5, lr}
 802295c:	4604      	mov	r4, r0
 802295e:	460d      	mov	r5, r1
 8022960:	d904      	bls.n	802296c <_raise_r+0x14>
 8022962:	2316      	movs	r3, #22
 8022964:	6003      	str	r3, [r0, #0]
 8022966:	f04f 30ff 	mov.w	r0, #4294967295
 802296a:	bd38      	pop	{r3, r4, r5, pc}
 802296c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802296e:	b112      	cbz	r2, 8022976 <_raise_r+0x1e>
 8022970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022974:	b94b      	cbnz	r3, 802298a <_raise_r+0x32>
 8022976:	4620      	mov	r0, r4
 8022978:	f000 f830 	bl	80229dc <_getpid_r>
 802297c:	462a      	mov	r2, r5
 802297e:	4601      	mov	r1, r0
 8022980:	4620      	mov	r0, r4
 8022982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022986:	f000 b817 	b.w	80229b8 <_kill_r>
 802298a:	2b01      	cmp	r3, #1
 802298c:	d00a      	beq.n	80229a4 <_raise_r+0x4c>
 802298e:	1c59      	adds	r1, r3, #1
 8022990:	d103      	bne.n	802299a <_raise_r+0x42>
 8022992:	2316      	movs	r3, #22
 8022994:	6003      	str	r3, [r0, #0]
 8022996:	2001      	movs	r0, #1
 8022998:	e7e7      	b.n	802296a <_raise_r+0x12>
 802299a:	2400      	movs	r4, #0
 802299c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80229a0:	4628      	mov	r0, r5
 80229a2:	4798      	blx	r3
 80229a4:	2000      	movs	r0, #0
 80229a6:	e7e0      	b.n	802296a <_raise_r+0x12>

080229a8 <raise>:
 80229a8:	4b02      	ldr	r3, [pc, #8]	; (80229b4 <raise+0xc>)
 80229aa:	4601      	mov	r1, r0
 80229ac:	6818      	ldr	r0, [r3, #0]
 80229ae:	f7ff bfd3 	b.w	8022958 <_raise_r>
 80229b2:	bf00      	nop
 80229b4:	2000002c 	.word	0x2000002c

080229b8 <_kill_r>:
 80229b8:	b538      	push	{r3, r4, r5, lr}
 80229ba:	4d07      	ldr	r5, [pc, #28]	; (80229d8 <_kill_r+0x20>)
 80229bc:	2300      	movs	r3, #0
 80229be:	4604      	mov	r4, r0
 80229c0:	4608      	mov	r0, r1
 80229c2:	4611      	mov	r1, r2
 80229c4:	602b      	str	r3, [r5, #0]
 80229c6:	f7f4 fc83 	bl	80172d0 <_kill>
 80229ca:	1c43      	adds	r3, r0, #1
 80229cc:	d102      	bne.n	80229d4 <_kill_r+0x1c>
 80229ce:	682b      	ldr	r3, [r5, #0]
 80229d0:	b103      	cbz	r3, 80229d4 <_kill_r+0x1c>
 80229d2:	6023      	str	r3, [r4, #0]
 80229d4:	bd38      	pop	{r3, r4, r5, pc}
 80229d6:	bf00      	nop
 80229d8:	2000f7d0 	.word	0x2000f7d0

080229dc <_getpid_r>:
 80229dc:	f7f4 bc70 	b.w	80172c0 <_getpid>

080229e0 <ceil>:
 80229e0:	ec51 0b10 	vmov	r0, r1, d0
 80229e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80229ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80229f0:	2e13      	cmp	r6, #19
 80229f2:	ee10 5a10 	vmov	r5, s0
 80229f6:	ee10 8a10 	vmov	r8, s0
 80229fa:	460c      	mov	r4, r1
 80229fc:	dc30      	bgt.n	8022a60 <ceil+0x80>
 80229fe:	2e00      	cmp	r6, #0
 8022a00:	da12      	bge.n	8022a28 <ceil+0x48>
 8022a02:	a335      	add	r3, pc, #212	; (adr r3, 8022ad8 <ceil+0xf8>)
 8022a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a08:	f7dd fc68 	bl	80002dc <__adddf3>
 8022a0c:	2200      	movs	r2, #0
 8022a0e:	2300      	movs	r3, #0
 8022a10:	f7de f8aa 	bl	8000b68 <__aeabi_dcmpgt>
 8022a14:	b128      	cbz	r0, 8022a22 <ceil+0x42>
 8022a16:	2c00      	cmp	r4, #0
 8022a18:	db55      	blt.n	8022ac6 <ceil+0xe6>
 8022a1a:	432c      	orrs	r4, r5
 8022a1c:	d057      	beq.n	8022ace <ceil+0xee>
 8022a1e:	4c30      	ldr	r4, [pc, #192]	; (8022ae0 <ceil+0x100>)
 8022a20:	2500      	movs	r5, #0
 8022a22:	4621      	mov	r1, r4
 8022a24:	4628      	mov	r0, r5
 8022a26:	e025      	b.n	8022a74 <ceil+0x94>
 8022a28:	4f2e      	ldr	r7, [pc, #184]	; (8022ae4 <ceil+0x104>)
 8022a2a:	4137      	asrs	r7, r6
 8022a2c:	ea01 0307 	and.w	r3, r1, r7
 8022a30:	4303      	orrs	r3, r0
 8022a32:	d01f      	beq.n	8022a74 <ceil+0x94>
 8022a34:	a328      	add	r3, pc, #160	; (adr r3, 8022ad8 <ceil+0xf8>)
 8022a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a3a:	f7dd fc4f 	bl	80002dc <__adddf3>
 8022a3e:	2200      	movs	r2, #0
 8022a40:	2300      	movs	r3, #0
 8022a42:	f7de f891 	bl	8000b68 <__aeabi_dcmpgt>
 8022a46:	2800      	cmp	r0, #0
 8022a48:	d0eb      	beq.n	8022a22 <ceil+0x42>
 8022a4a:	2c00      	cmp	r4, #0
 8022a4c:	bfc2      	ittt	gt
 8022a4e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8022a52:	fa43 f606 	asrgt.w	r6, r3, r6
 8022a56:	19a4      	addgt	r4, r4, r6
 8022a58:	ea24 0407 	bic.w	r4, r4, r7
 8022a5c:	2500      	movs	r5, #0
 8022a5e:	e7e0      	b.n	8022a22 <ceil+0x42>
 8022a60:	2e33      	cmp	r6, #51	; 0x33
 8022a62:	dd0b      	ble.n	8022a7c <ceil+0x9c>
 8022a64:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022a68:	d104      	bne.n	8022a74 <ceil+0x94>
 8022a6a:	ee10 2a10 	vmov	r2, s0
 8022a6e:	460b      	mov	r3, r1
 8022a70:	f7dd fc34 	bl	80002dc <__adddf3>
 8022a74:	ec41 0b10 	vmov	d0, r0, r1
 8022a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a7c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022a80:	f04f 33ff 	mov.w	r3, #4294967295
 8022a84:	fa23 f707 	lsr.w	r7, r3, r7
 8022a88:	4207      	tst	r7, r0
 8022a8a:	d0f3      	beq.n	8022a74 <ceil+0x94>
 8022a8c:	a312      	add	r3, pc, #72	; (adr r3, 8022ad8 <ceil+0xf8>)
 8022a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a92:	f7dd fc23 	bl	80002dc <__adddf3>
 8022a96:	2200      	movs	r2, #0
 8022a98:	2300      	movs	r3, #0
 8022a9a:	f7de f865 	bl	8000b68 <__aeabi_dcmpgt>
 8022a9e:	2800      	cmp	r0, #0
 8022aa0:	d0bf      	beq.n	8022a22 <ceil+0x42>
 8022aa2:	2c00      	cmp	r4, #0
 8022aa4:	dd02      	ble.n	8022aac <ceil+0xcc>
 8022aa6:	2e14      	cmp	r6, #20
 8022aa8:	d103      	bne.n	8022ab2 <ceil+0xd2>
 8022aaa:	3401      	adds	r4, #1
 8022aac:	ea25 0507 	bic.w	r5, r5, r7
 8022ab0:	e7b7      	b.n	8022a22 <ceil+0x42>
 8022ab2:	2301      	movs	r3, #1
 8022ab4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022ab8:	fa03 f606 	lsl.w	r6, r3, r6
 8022abc:	4435      	add	r5, r6
 8022abe:	4545      	cmp	r5, r8
 8022ac0:	bf38      	it	cc
 8022ac2:	18e4      	addcc	r4, r4, r3
 8022ac4:	e7f2      	b.n	8022aac <ceil+0xcc>
 8022ac6:	2500      	movs	r5, #0
 8022ac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8022acc:	e7a9      	b.n	8022a22 <ceil+0x42>
 8022ace:	4625      	mov	r5, r4
 8022ad0:	e7a7      	b.n	8022a22 <ceil+0x42>
 8022ad2:	bf00      	nop
 8022ad4:	f3af 8000 	nop.w
 8022ad8:	8800759c 	.word	0x8800759c
 8022adc:	7e37e43c 	.word	0x7e37e43c
 8022ae0:	3ff00000 	.word	0x3ff00000
 8022ae4:	000fffff 	.word	0x000fffff

08022ae8 <exp>:
 8022ae8:	b538      	push	{r3, r4, r5, lr}
 8022aea:	ed2d 8b02 	vpush	{d8}
 8022aee:	ec55 4b10 	vmov	r4, r5, d0
 8022af2:	f000 f841 	bl	8022b78 <__ieee754_exp>
 8022af6:	eeb0 8a40 	vmov.f32	s16, s0
 8022afa:	eef0 8a60 	vmov.f32	s17, s1
 8022afe:	ec45 4b10 	vmov	d0, r4, r5
 8022b02:	f000 f9eb 	bl	8022edc <finite>
 8022b06:	b168      	cbz	r0, 8022b24 <exp+0x3c>
 8022b08:	a317      	add	r3, pc, #92	; (adr r3, 8022b68 <exp+0x80>)
 8022b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b0e:	4620      	mov	r0, r4
 8022b10:	4629      	mov	r1, r5
 8022b12:	f7de f829 	bl	8000b68 <__aeabi_dcmpgt>
 8022b16:	b160      	cbz	r0, 8022b32 <exp+0x4a>
 8022b18:	f7fd f92e 	bl	801fd78 <__errno>
 8022b1c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8022b58 <exp+0x70>
 8022b20:	2322      	movs	r3, #34	; 0x22
 8022b22:	6003      	str	r3, [r0, #0]
 8022b24:	eeb0 0a48 	vmov.f32	s0, s16
 8022b28:	eef0 0a68 	vmov.f32	s1, s17
 8022b2c:	ecbd 8b02 	vpop	{d8}
 8022b30:	bd38      	pop	{r3, r4, r5, pc}
 8022b32:	a30f      	add	r3, pc, #60	; (adr r3, 8022b70 <exp+0x88>)
 8022b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b38:	4620      	mov	r0, r4
 8022b3a:	4629      	mov	r1, r5
 8022b3c:	f7dd fff6 	bl	8000b2c <__aeabi_dcmplt>
 8022b40:	2800      	cmp	r0, #0
 8022b42:	d0ef      	beq.n	8022b24 <exp+0x3c>
 8022b44:	f7fd f918 	bl	801fd78 <__errno>
 8022b48:	2322      	movs	r3, #34	; 0x22
 8022b4a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8022b60 <exp+0x78>
 8022b4e:	6003      	str	r3, [r0, #0]
 8022b50:	e7e8      	b.n	8022b24 <exp+0x3c>
 8022b52:	bf00      	nop
 8022b54:	f3af 8000 	nop.w
 8022b58:	00000000 	.word	0x00000000
 8022b5c:	7ff00000 	.word	0x7ff00000
	...
 8022b68:	fefa39ef 	.word	0xfefa39ef
 8022b6c:	40862e42 	.word	0x40862e42
 8022b70:	d52d3051 	.word	0xd52d3051
 8022b74:	c0874910 	.word	0xc0874910

08022b78 <__ieee754_exp>:
 8022b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b7c:	ec55 4b10 	vmov	r4, r5, d0
 8022b80:	49b5      	ldr	r1, [pc, #724]	; (8022e58 <__ieee754_exp+0x2e0>)
 8022b82:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022b86:	428b      	cmp	r3, r1
 8022b88:	ed2d 8b04 	vpush	{d8-d9}
 8022b8c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8022b90:	d93d      	bls.n	8022c0e <__ieee754_exp+0x96>
 8022b92:	49b2      	ldr	r1, [pc, #712]	; (8022e5c <__ieee754_exp+0x2e4>)
 8022b94:	428b      	cmp	r3, r1
 8022b96:	d918      	bls.n	8022bca <__ieee754_exp+0x52>
 8022b98:	ee10 3a10 	vmov	r3, s0
 8022b9c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8022ba0:	4313      	orrs	r3, r2
 8022ba2:	d009      	beq.n	8022bb8 <__ieee754_exp+0x40>
 8022ba4:	ee10 2a10 	vmov	r2, s0
 8022ba8:	462b      	mov	r3, r5
 8022baa:	4620      	mov	r0, r4
 8022bac:	4629      	mov	r1, r5
 8022bae:	f7dd fb95 	bl	80002dc <__adddf3>
 8022bb2:	4604      	mov	r4, r0
 8022bb4:	460d      	mov	r5, r1
 8022bb6:	e002      	b.n	8022bbe <__ieee754_exp+0x46>
 8022bb8:	b10e      	cbz	r6, 8022bbe <__ieee754_exp+0x46>
 8022bba:	2400      	movs	r4, #0
 8022bbc:	2500      	movs	r5, #0
 8022bbe:	ecbd 8b04 	vpop	{d8-d9}
 8022bc2:	ec45 4b10 	vmov	d0, r4, r5
 8022bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bca:	a38d      	add	r3, pc, #564	; (adr r3, 8022e00 <__ieee754_exp+0x288>)
 8022bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bd0:	ee10 0a10 	vmov	r0, s0
 8022bd4:	4629      	mov	r1, r5
 8022bd6:	f7dd ffc7 	bl	8000b68 <__aeabi_dcmpgt>
 8022bda:	4607      	mov	r7, r0
 8022bdc:	b130      	cbz	r0, 8022bec <__ieee754_exp+0x74>
 8022bde:	ecbd 8b04 	vpop	{d8-d9}
 8022be2:	2000      	movs	r0, #0
 8022be4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022be8:	f000 b96f 	b.w	8022eca <__math_oflow>
 8022bec:	a386      	add	r3, pc, #536	; (adr r3, 8022e08 <__ieee754_exp+0x290>)
 8022bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bf2:	4620      	mov	r0, r4
 8022bf4:	4629      	mov	r1, r5
 8022bf6:	f7dd ff99 	bl	8000b2c <__aeabi_dcmplt>
 8022bfa:	2800      	cmp	r0, #0
 8022bfc:	f000 808b 	beq.w	8022d16 <__ieee754_exp+0x19e>
 8022c00:	ecbd 8b04 	vpop	{d8-d9}
 8022c04:	4638      	mov	r0, r7
 8022c06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c0a:	f000 b955 	b.w	8022eb8 <__math_uflow>
 8022c0e:	4a94      	ldr	r2, [pc, #592]	; (8022e60 <__ieee754_exp+0x2e8>)
 8022c10:	4293      	cmp	r3, r2
 8022c12:	f240 80ac 	bls.w	8022d6e <__ieee754_exp+0x1f6>
 8022c16:	4a93      	ldr	r2, [pc, #588]	; (8022e64 <__ieee754_exp+0x2ec>)
 8022c18:	4293      	cmp	r3, r2
 8022c1a:	d87c      	bhi.n	8022d16 <__ieee754_exp+0x19e>
 8022c1c:	4b92      	ldr	r3, [pc, #584]	; (8022e68 <__ieee754_exp+0x2f0>)
 8022c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8022c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c26:	ee10 0a10 	vmov	r0, s0
 8022c2a:	4629      	mov	r1, r5
 8022c2c:	f7dd fb54 	bl	80002d8 <__aeabi_dsub>
 8022c30:	4b8e      	ldr	r3, [pc, #568]	; (8022e6c <__ieee754_exp+0x2f4>)
 8022c32:	00f7      	lsls	r7, r6, #3
 8022c34:	443b      	add	r3, r7
 8022c36:	ed93 7b00 	vldr	d7, [r3]
 8022c3a:	f1c6 0a01 	rsb	sl, r6, #1
 8022c3e:	4680      	mov	r8, r0
 8022c40:	4689      	mov	r9, r1
 8022c42:	ebaa 0a06 	sub.w	sl, sl, r6
 8022c46:	eeb0 8a47 	vmov.f32	s16, s14
 8022c4a:	eef0 8a67 	vmov.f32	s17, s15
 8022c4e:	ec53 2b18 	vmov	r2, r3, d8
 8022c52:	4640      	mov	r0, r8
 8022c54:	4649      	mov	r1, r9
 8022c56:	f7dd fb3f 	bl	80002d8 <__aeabi_dsub>
 8022c5a:	4604      	mov	r4, r0
 8022c5c:	460d      	mov	r5, r1
 8022c5e:	4622      	mov	r2, r4
 8022c60:	462b      	mov	r3, r5
 8022c62:	4620      	mov	r0, r4
 8022c64:	4629      	mov	r1, r5
 8022c66:	f7dd fcef 	bl	8000648 <__aeabi_dmul>
 8022c6a:	a369      	add	r3, pc, #420	; (adr r3, 8022e10 <__ieee754_exp+0x298>)
 8022c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c70:	4606      	mov	r6, r0
 8022c72:	460f      	mov	r7, r1
 8022c74:	f7dd fce8 	bl	8000648 <__aeabi_dmul>
 8022c78:	a367      	add	r3, pc, #412	; (adr r3, 8022e18 <__ieee754_exp+0x2a0>)
 8022c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c7e:	f7dd fb2b 	bl	80002d8 <__aeabi_dsub>
 8022c82:	4632      	mov	r2, r6
 8022c84:	463b      	mov	r3, r7
 8022c86:	f7dd fcdf 	bl	8000648 <__aeabi_dmul>
 8022c8a:	a365      	add	r3, pc, #404	; (adr r3, 8022e20 <__ieee754_exp+0x2a8>)
 8022c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c90:	f7dd fb24 	bl	80002dc <__adddf3>
 8022c94:	4632      	mov	r2, r6
 8022c96:	463b      	mov	r3, r7
 8022c98:	f7dd fcd6 	bl	8000648 <__aeabi_dmul>
 8022c9c:	a362      	add	r3, pc, #392	; (adr r3, 8022e28 <__ieee754_exp+0x2b0>)
 8022c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ca2:	f7dd fb19 	bl	80002d8 <__aeabi_dsub>
 8022ca6:	4632      	mov	r2, r6
 8022ca8:	463b      	mov	r3, r7
 8022caa:	f7dd fccd 	bl	8000648 <__aeabi_dmul>
 8022cae:	a360      	add	r3, pc, #384	; (adr r3, 8022e30 <__ieee754_exp+0x2b8>)
 8022cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cb4:	f7dd fb12 	bl	80002dc <__adddf3>
 8022cb8:	4632      	mov	r2, r6
 8022cba:	463b      	mov	r3, r7
 8022cbc:	f7dd fcc4 	bl	8000648 <__aeabi_dmul>
 8022cc0:	4602      	mov	r2, r0
 8022cc2:	460b      	mov	r3, r1
 8022cc4:	4620      	mov	r0, r4
 8022cc6:	4629      	mov	r1, r5
 8022cc8:	f7dd fb06 	bl	80002d8 <__aeabi_dsub>
 8022ccc:	4602      	mov	r2, r0
 8022cce:	460b      	mov	r3, r1
 8022cd0:	4606      	mov	r6, r0
 8022cd2:	460f      	mov	r7, r1
 8022cd4:	4620      	mov	r0, r4
 8022cd6:	4629      	mov	r1, r5
 8022cd8:	f7dd fcb6 	bl	8000648 <__aeabi_dmul>
 8022cdc:	ec41 0b19 	vmov	d9, r0, r1
 8022ce0:	f1ba 0f00 	cmp.w	sl, #0
 8022ce4:	d15d      	bne.n	8022da2 <__ieee754_exp+0x22a>
 8022ce6:	2200      	movs	r2, #0
 8022ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022cec:	4630      	mov	r0, r6
 8022cee:	4639      	mov	r1, r7
 8022cf0:	f7dd faf2 	bl	80002d8 <__aeabi_dsub>
 8022cf4:	4602      	mov	r2, r0
 8022cf6:	460b      	mov	r3, r1
 8022cf8:	ec51 0b19 	vmov	r0, r1, d9
 8022cfc:	f7dd fdce 	bl	800089c <__aeabi_ddiv>
 8022d00:	4622      	mov	r2, r4
 8022d02:	462b      	mov	r3, r5
 8022d04:	f7dd fae8 	bl	80002d8 <__aeabi_dsub>
 8022d08:	4602      	mov	r2, r0
 8022d0a:	460b      	mov	r3, r1
 8022d0c:	2000      	movs	r0, #0
 8022d0e:	4958      	ldr	r1, [pc, #352]	; (8022e70 <__ieee754_exp+0x2f8>)
 8022d10:	f7dd fae2 	bl	80002d8 <__aeabi_dsub>
 8022d14:	e74d      	b.n	8022bb2 <__ieee754_exp+0x3a>
 8022d16:	4857      	ldr	r0, [pc, #348]	; (8022e74 <__ieee754_exp+0x2fc>)
 8022d18:	a347      	add	r3, pc, #284	; (adr r3, 8022e38 <__ieee754_exp+0x2c0>)
 8022d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d1e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8022d22:	4629      	mov	r1, r5
 8022d24:	4620      	mov	r0, r4
 8022d26:	f7dd fc8f 	bl	8000648 <__aeabi_dmul>
 8022d2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8022d2e:	f7dd fad5 	bl	80002dc <__adddf3>
 8022d32:	f7dd ff39 	bl	8000ba8 <__aeabi_d2iz>
 8022d36:	4682      	mov	sl, r0
 8022d38:	f7dd fc1c 	bl	8000574 <__aeabi_i2d>
 8022d3c:	a340      	add	r3, pc, #256	; (adr r3, 8022e40 <__ieee754_exp+0x2c8>)
 8022d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d42:	4606      	mov	r6, r0
 8022d44:	460f      	mov	r7, r1
 8022d46:	f7dd fc7f 	bl	8000648 <__aeabi_dmul>
 8022d4a:	4602      	mov	r2, r0
 8022d4c:	460b      	mov	r3, r1
 8022d4e:	4620      	mov	r0, r4
 8022d50:	4629      	mov	r1, r5
 8022d52:	f7dd fac1 	bl	80002d8 <__aeabi_dsub>
 8022d56:	a33c      	add	r3, pc, #240	; (adr r3, 8022e48 <__ieee754_exp+0x2d0>)
 8022d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d5c:	4680      	mov	r8, r0
 8022d5e:	4689      	mov	r9, r1
 8022d60:	4630      	mov	r0, r6
 8022d62:	4639      	mov	r1, r7
 8022d64:	f7dd fc70 	bl	8000648 <__aeabi_dmul>
 8022d68:	ec41 0b18 	vmov	d8, r0, r1
 8022d6c:	e76f      	b.n	8022c4e <__ieee754_exp+0xd6>
 8022d6e:	4a42      	ldr	r2, [pc, #264]	; (8022e78 <__ieee754_exp+0x300>)
 8022d70:	4293      	cmp	r3, r2
 8022d72:	d811      	bhi.n	8022d98 <__ieee754_exp+0x220>
 8022d74:	a336      	add	r3, pc, #216	; (adr r3, 8022e50 <__ieee754_exp+0x2d8>)
 8022d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d7a:	ee10 0a10 	vmov	r0, s0
 8022d7e:	4629      	mov	r1, r5
 8022d80:	f7dd faac 	bl	80002dc <__adddf3>
 8022d84:	4b3a      	ldr	r3, [pc, #232]	; (8022e70 <__ieee754_exp+0x2f8>)
 8022d86:	2200      	movs	r2, #0
 8022d88:	f7dd feee 	bl	8000b68 <__aeabi_dcmpgt>
 8022d8c:	b138      	cbz	r0, 8022d9e <__ieee754_exp+0x226>
 8022d8e:	4b38      	ldr	r3, [pc, #224]	; (8022e70 <__ieee754_exp+0x2f8>)
 8022d90:	2200      	movs	r2, #0
 8022d92:	4620      	mov	r0, r4
 8022d94:	4629      	mov	r1, r5
 8022d96:	e70a      	b.n	8022bae <__ieee754_exp+0x36>
 8022d98:	f04f 0a00 	mov.w	sl, #0
 8022d9c:	e75f      	b.n	8022c5e <__ieee754_exp+0xe6>
 8022d9e:	4682      	mov	sl, r0
 8022da0:	e75d      	b.n	8022c5e <__ieee754_exp+0xe6>
 8022da2:	4632      	mov	r2, r6
 8022da4:	463b      	mov	r3, r7
 8022da6:	2000      	movs	r0, #0
 8022da8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8022dac:	f7dd fa94 	bl	80002d8 <__aeabi_dsub>
 8022db0:	4602      	mov	r2, r0
 8022db2:	460b      	mov	r3, r1
 8022db4:	ec51 0b19 	vmov	r0, r1, d9
 8022db8:	f7dd fd70 	bl	800089c <__aeabi_ddiv>
 8022dbc:	4602      	mov	r2, r0
 8022dbe:	460b      	mov	r3, r1
 8022dc0:	ec51 0b18 	vmov	r0, r1, d8
 8022dc4:	f7dd fa88 	bl	80002d8 <__aeabi_dsub>
 8022dc8:	4642      	mov	r2, r8
 8022dca:	464b      	mov	r3, r9
 8022dcc:	f7dd fa84 	bl	80002d8 <__aeabi_dsub>
 8022dd0:	4602      	mov	r2, r0
 8022dd2:	460b      	mov	r3, r1
 8022dd4:	2000      	movs	r0, #0
 8022dd6:	4926      	ldr	r1, [pc, #152]	; (8022e70 <__ieee754_exp+0x2f8>)
 8022dd8:	f7dd fa7e 	bl	80002d8 <__aeabi_dsub>
 8022ddc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8022de0:	4592      	cmp	sl, r2
 8022de2:	db02      	blt.n	8022dea <__ieee754_exp+0x272>
 8022de4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8022de8:	e6e3      	b.n	8022bb2 <__ieee754_exp+0x3a>
 8022dea:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8022dee:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8022df2:	2200      	movs	r2, #0
 8022df4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8022df8:	f7dd fc26 	bl	8000648 <__aeabi_dmul>
 8022dfc:	e6d9      	b.n	8022bb2 <__ieee754_exp+0x3a>
 8022dfe:	bf00      	nop
 8022e00:	fefa39ef 	.word	0xfefa39ef
 8022e04:	40862e42 	.word	0x40862e42
 8022e08:	d52d3051 	.word	0xd52d3051
 8022e0c:	c0874910 	.word	0xc0874910
 8022e10:	72bea4d0 	.word	0x72bea4d0
 8022e14:	3e663769 	.word	0x3e663769
 8022e18:	c5d26bf1 	.word	0xc5d26bf1
 8022e1c:	3ebbbd41 	.word	0x3ebbbd41
 8022e20:	af25de2c 	.word	0xaf25de2c
 8022e24:	3f11566a 	.word	0x3f11566a
 8022e28:	16bebd93 	.word	0x16bebd93
 8022e2c:	3f66c16c 	.word	0x3f66c16c
 8022e30:	5555553e 	.word	0x5555553e
 8022e34:	3fc55555 	.word	0x3fc55555
 8022e38:	652b82fe 	.word	0x652b82fe
 8022e3c:	3ff71547 	.word	0x3ff71547
 8022e40:	fee00000 	.word	0xfee00000
 8022e44:	3fe62e42 	.word	0x3fe62e42
 8022e48:	35793c76 	.word	0x35793c76
 8022e4c:	3dea39ef 	.word	0x3dea39ef
 8022e50:	8800759c 	.word	0x8800759c
 8022e54:	7e37e43c 	.word	0x7e37e43c
 8022e58:	40862e41 	.word	0x40862e41
 8022e5c:	7fefffff 	.word	0x7fefffff
 8022e60:	3fd62e42 	.word	0x3fd62e42
 8022e64:	3ff0a2b1 	.word	0x3ff0a2b1
 8022e68:	08023618 	.word	0x08023618
 8022e6c:	08023628 	.word	0x08023628
 8022e70:	3ff00000 	.word	0x3ff00000
 8022e74:	08023608 	.word	0x08023608
 8022e78:	3defffff 	.word	0x3defffff

08022e7c <with_errno>:
 8022e7c:	b570      	push	{r4, r5, r6, lr}
 8022e7e:	4604      	mov	r4, r0
 8022e80:	460d      	mov	r5, r1
 8022e82:	4616      	mov	r6, r2
 8022e84:	f7fc ff78 	bl	801fd78 <__errno>
 8022e88:	4629      	mov	r1, r5
 8022e8a:	6006      	str	r6, [r0, #0]
 8022e8c:	4620      	mov	r0, r4
 8022e8e:	bd70      	pop	{r4, r5, r6, pc}

08022e90 <xflow>:
 8022e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022e92:	4614      	mov	r4, r2
 8022e94:	461d      	mov	r5, r3
 8022e96:	b108      	cbz	r0, 8022e9c <xflow+0xc>
 8022e98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8022ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ea4:	4620      	mov	r0, r4
 8022ea6:	4629      	mov	r1, r5
 8022ea8:	f7dd fbce 	bl	8000648 <__aeabi_dmul>
 8022eac:	2222      	movs	r2, #34	; 0x22
 8022eae:	b003      	add	sp, #12
 8022eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022eb4:	f7ff bfe2 	b.w	8022e7c <with_errno>

08022eb8 <__math_uflow>:
 8022eb8:	b508      	push	{r3, lr}
 8022eba:	2200      	movs	r2, #0
 8022ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8022ec0:	f7ff ffe6 	bl	8022e90 <xflow>
 8022ec4:	ec41 0b10 	vmov	d0, r0, r1
 8022ec8:	bd08      	pop	{r3, pc}

08022eca <__math_oflow>:
 8022eca:	b508      	push	{r3, lr}
 8022ecc:	2200      	movs	r2, #0
 8022ece:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022ed2:	f7ff ffdd 	bl	8022e90 <xflow>
 8022ed6:	ec41 0b10 	vmov	d0, r0, r1
 8022eda:	bd08      	pop	{r3, pc}

08022edc <finite>:
 8022edc:	b082      	sub	sp, #8
 8022ede:	ed8d 0b00 	vstr	d0, [sp]
 8022ee2:	9801      	ldr	r0, [sp, #4]
 8022ee4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8022ee8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8022eec:	0fc0      	lsrs	r0, r0, #31
 8022eee:	b002      	add	sp, #8
 8022ef0:	4770      	bx	lr
	...

08022ef4 <_init>:
 8022ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ef6:	bf00      	nop
 8022ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022efa:	bc08      	pop	{r3}
 8022efc:	469e      	mov	lr, r3
 8022efe:	4770      	bx	lr

08022f00 <_fini>:
 8022f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f02:	bf00      	nop
 8022f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f06:	bc08      	pop	{r3}
 8022f08:	469e      	mov	lr, r3
 8022f0a:	4770      	bx	lr
